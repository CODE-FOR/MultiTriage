<Issues>
  <Issue>
    <IssueID>37461</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>37461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect spilling of stackalloc in async method</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>19/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>37461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>37461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

``

**Actual**

The program compiles and throws 

&gt; System.TypeLoadException: 'A ByRef-like type cannot be used as the type for an instance field in a non-ByRef-like type.'

at runtime since the lowering of stackalloc in await expression spills `Span&lt;T&gt;` to a state machine field.

**Expected**

Compiler error.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37461</IssueID>
        <PullRequestID>37711</PullRequestID>
        <Title>Permit stackalloc to be used in an async method as long as it need not be spilled.</Title>
        <Description>Fixes #37461</Description>
        <CreatedDate>03/08/2019</CreatedDate>
        <ClosedDate>19/08/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37461</IssueID>
            <PullRequestID>37711</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>37711</PullRequestID>
            <IssueID>37461</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>37711</PullRequestID>
            <IssueID>37461</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37458</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>37458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"csc.exe" exited with code -2146232797.</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>37458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Process terminated. 
System.NotImplementedException: The method or operation is not implemented. [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundNode.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReadOnlySpanFromArray(BoundReadOnlySpanFromArray node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReadOnlySpanFromArray.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitReturnStatement(BoundReturnStatement node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans, AsyncForwardEntryPoint entryPointOpt) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Environment.FailFast(System.String, System.Exception) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundNode.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReadOnlySpanFromArray(Microsoft.CodeAnalysis.CSharp.BoundReadOnlySpanFromArray) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReadOnlySpanFromArray.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol,Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt;, Boolean) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; ByRef) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CodeGen.ILBuilder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.OptimizationLevel, Boolean) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;, AsyncForwardEntryPoint) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.InnerInvoke() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task+&lt;&gt;c.&lt;.cctor&gt;b__274_0(System.Object) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.NotImplementedException: The method or operation is not implemented. [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundNode.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReadOnlySpanFromArray(BoundReadOnlySpanFromArray node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReadOnlySpanFromArray.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitReturnStatement(BoundReturnStatement node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans, AsyncForwardEntryPoint entryPointOpt) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [C:\ProjectPath\ProjectName.csproj]
C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [C:\ProjectPath\ProjectName.csproj]
`</Code>
    <Description>**Version Used**: 
Visual Studio 16.3.0 Preview 1

Visual Studio 16.3.0 Preview 1 updated .Net Core 3.0 from Preview 6 to 7 and now a project no longer builds with the error `"csc.exe" exited with code -2146232797.`
The same had started happening with earlier Visual Studio versions but before building from the command line with `dotnet build` still worked.

After the update trying to build it with `dotnet build` gives the following:

``

~~Other smaller projects still run fine so I have no idea where to even begin looking for a reproducible example.~~
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37458</IssueID>
        <PullRequestID>37057</PullRequestID>
        <Title>Ensure we have stack spilling support for the recently-added expression node `BoundReadOnlySpanFromArray`</Title>
        <Description>Fixes #36856

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</Description>
        <CreatedDate>08/07/2019</CreatedDate>
        <ClosedDate>09/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37458</IssueID>
            <PullRequestID>37057</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Stackalloc initializers</Name>
            <IssueID>37458</IssueID>
            <PullRequestID>37057</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>37057</PullRequestID>
            <IssueID>37458</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>37057</PullRequestID>
            <IssueID>37458</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37458</IssueID>
        <PullRequestID>37052</PullRequestID>
        <Title>Target-typed switch expression</Title>
        <Description>This PR adds support for a target-typed switch expression.

This is the first time where we have an expression form that must be converted when it is used with its natural type.  That is because an expression such as `e switch { 1 =&gt; a, 2 =&gt; b }` must not convert `a` to `b` if the target type is some common supertype (e.g. `object`), but must do the conversion if it is needed to use the expression in its natural type.  Moreover, there might be errors using the expression in its natural type (e.g. an obsolete user-defined conversion).  These errors must only be reported when the expression is used without being converted to some type.

In order to do this we add a new bottleneck for converting an expression to its natural type.  Every rvalue expression must either be converted, or be passed through `BindToNaturalType(e, diagnostics)`.  To ensure that we've handled all contexts, we instrument every reference to a local or parameter, and add a flag to it when it has "been converted" (in debug mode only).  Then, in definite assignment analysis we assert that every rvalue expression that needs to have been converted (including switch expressions, tuple literals, parameters and locals) has indeed been converted.  Since we have excellent test coverage of language forms that have subexpressions using parameters and locals, this flushed out scores of places where binding required changes.  This will also help ensure that new language constructs are handled properly.

A new invariant is that after binding, there are no unconverted tuple literals or unconverted switch expressions remaining.  Every one of them has been replaced by (converted to) its "converted" form.  The assertion mentioned above also checks this.

The PR also includes an overhaul to the handling of tuple equality.  Now, in initial binding, we simply produce converted tuples or converted tuple literals for operands.  In lowering, we reorder the operations so that conversions that should be deferred are done later.

Fixes #14965 
Fixes #35958
Specified by 
</Description>
        <CreatedDate>08/07/2019</CreatedDate>
        <ClosedDate>15/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37458</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>37458</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>37458</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>37052</PullRequestID>
            <IssueID>37458</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37456</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>37456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VBCSCompiler.exe hangs when building .Net Core 3 Preview 7 app from Visual Studio 16.3 Preview 1</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>37456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Versions Used**:
Roslyn 3.3.0-beta1-19360-03
VS 2019 16.3.0 Preview 1
.Net Core 3.0.100-preview7-012821
OS: Windows 10 x64 1803

Actually, this issue started happening with VS 2019 16.2.0 Preview 1 at the end of May, back then I restored older version of Roslyn that came with VS 2019 16.1.0 (Net Core 3 Preview 5) to "fix" it, thinking newer previews will fix the issue. However, now it was announced that .Net Core 3 previews are aligned with VS, and the exact issue remains I decided to report it, as I can no longer continue using older Roslyn.

**Steps to Reproduce**:

1. I initiate build of my project with Visual Studio, which ultimately runs: `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\VBCSCompiler.exe" "-pipename:IVamwVzaBdrypv9GgVkRsjt1ff4WYeqbiBsnRMXwDlE"`
2. The process `VBCSCompiler.exe` ends up utilizing 100% CPU (1 thread) with the following stack trace:

``
3. The compilation never finishes. I don;t know exactly what code causes it to hang and why. Simple Hello World console app compiles without problems.

I also notice that Roslyn files in `C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn` and `C:\Program Files\dotnet\sdk\3.0.100-preview7-012821\Roslyn\bincore` are very different size-wise despite having almost identical versions.

**Expected Behavior**:

Projects compile without compiler hanging.

**Actual Behavior**:

Compiler hangs, compilation never finishes.</Description>
  </Issue>
  <Issue>
    <IssueID>37455</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0066 Convert switch statement to switch expression generates invalid code</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>37455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>37455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 16.3.0 Preview 1.0

**Steps to Reproduce**:

The following code:

``

The new code doesn't compile: CS8506 No best type was found for the switch expression.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37455</IssueID>
        <PullRequestID>37052</PullRequestID>
        <Title>Target-typed switch expression</Title>
        <Description>This PR adds support for a target-typed switch expression.

This is the first time where we have an expression form that must be converted when it is used with its natural type.  That is because an expression such as `e switch { 1 =&gt; a, 2 =&gt; b }` must not convert `a` to `b` if the target type is some common supertype (e.g. `object`), but must do the conversion if it is needed to use the expression in its natural type.  Moreover, there might be errors using the expression in its natural type (e.g. an obsolete user-defined conversion).  These errors must only be reported when the expression is used without being converted to some type.

In order to do this we add a new bottleneck for converting an expression to its natural type.  Every rvalue expression must either be converted, or be passed through `BindToNaturalType(e, diagnostics)`.  To ensure that we've handled all contexts, we instrument every reference to a local or parameter, and add a flag to it when it has "been converted" (in debug mode only).  Then, in definite assignment analysis we assert that every rvalue expression that needs to have been converted (including switch expressions, tuple literals, parameters and locals) has indeed been converted.  Since we have excellent test coverage of language forms that have subexpressions using parameters and locals, this flushed out scores of places where binding required changes.  This will also help ensure that new language constructs are handled properly.

A new invariant is that after binding, there are no unconverted tuple literals or unconverted switch expressions remaining.  Every one of them has been replaced by (converted to) its "converted" form.  The assertion mentioned above also checks this.

The PR also includes an overhaul to the handling of tuple equality.  Now, in initial binding, we simply produce converted tuples or converted tuple literals for operands.  In lowering, we reorder the operations so that conversions that should be deferred are done later.

Fixes #14965 
Fixes #35958
Specified by 
</Description>
        <CreatedDate>08/07/2019</CreatedDate>
        <ClosedDate>15/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37455</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>37455</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>37455</IssueID>
            <PullRequestID>37052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>37052</PullRequestID>
            <IssueID>37455</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37454</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>37454</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Renaming a variable when range syntax is in use results in crash</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>30/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37454</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>37454</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
using System;

namespace BugReport
{
    public static class Example
    {
        public static void Test(ReadOnlySpan&lt;byte&gt; data)
        {
            if (true)
            {
                var bar = 1;
                var foo = data[..2];
                DoSomething(foo);
            }
        }

        private static void DoSomething(ReadOnlySpan&lt;byte&gt; _) { }
    }
}
`</Code>
    <Description>I'm not positive that this is an issue with Roslyn rather than Visual Studio, but I'm reporting it here just in case.  I initially reported it on the [Feedback Hub]( but it was marked as low priority ("Under Consideration").

* Visual Studio 2019.3.0 Preview 1.0 (prior preview versions also exhibit the issue)
* .NET Core 3.0.0-preview7 (prior preview versions also exhibit the issue)
* C# 8.0 preview

If I attempt to rename `bar` to `foobar` in the following code by putting my cursor within it, pressing F2, and typing `foobar`, Visual Studio will immediately crash without showing an error dialog as soon as I've typed `foo`. Any unsaved changes will be lost. Normally, Visual Studio would report that there's a conflict when I reach `foo`, then allow me to continue typing the rest of the variable name; however, in this context, it crashes. If I change `data[..2]` to `data.Slice(0, 2)`, Visual Studio doesn't crash, and the rename is successful.

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37454</IssueID>
        <PullRequestID>37513</PullRequestID>
        <Title>Handle checking for language version in speculative semantic model</Title>
        <Description>Asking for Location.SourceTree may not produce a syntax tree, even if there
is a backing syntax tree, because a speculative tree node may produce NoLocation
when asked for one, even if there is a backing tree. This change stops us from
trying to do the SyntaxTree-&gt;Location-&gt;SyntaxTree roundtrip because it's not guaranteed
to succeed.

Fixes #37454</Description>
        <CreatedDate>26/07/2019</CreatedDate>
        <ClosedDate>30/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37454</IssueID>
            <PullRequestID>37513</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>ask-mode</Name>
            <IssueID>37454</IssueID>
            <PullRequestID>37513</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37454</IssueID>
        <PullRequestID>37583</PullRequestID>
        <Title>Handle checking for language version in speculative semantic model</Title>
        <Description>Asking for Location.SourceTree may not produce a syntax tree, even if there
is a backing syntax tree, because a speculative tree node may produce NoLocation
when asked for one, even if there is a backing tree. This change stops us from
trying to do the SyntaxTree-&gt;Location-&gt;SyntaxTree roundtrip because it's not guaranteed
to succeed.

Fixes #37454

(cherry picked from commit 83e8f8f0602aecf68dd257ea24b0b4817d842f72)</Description>
        <CreatedDate>30/07/2019</CreatedDate>
        <ClosedDate>31/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>37454</IssueID>
            <PullRequestID>37583</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37457</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8614 (Nullability doesn't match) false warning</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Create two class libraries (with `&lt;Nullable&gt;enable&lt;/Nullable&gt;` and `&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;` in the project files).

In one, add this interface:
``

Now build.  This warning is printed in Build output (but not in Warnings list):
`2&gt;Meow.cs(9,17,9,26): warning CS8614: Nullability of reference types in type of parameter 'c' of 'void MEOW.Something(string? a, string? b, bool c)' doesn't match implicitly implemented member 'void IMEOW.Something(string? a, string? b, bool c)'.`

The signatures are identical, so the warning should not exist.

The problem doesn't occur if the interface and class are in the same class library, or if one of those parameters is removed.</Description>
  </Issue>
  <Issue>
    <IssueID>37451</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Tuple is zeroed when accessed via collection</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>37451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
   using System;
   using System.Collections.Generic;
   
   namespace CompilerBugZero
   {
       class Program
       {
           static void Main(string[] args)
           {
               var hdl = FindHandle();
               if (IntPtr.Zero == hdl)
               {
                   throw new InvalidOperationException();
               }
           }
   
           static IntPtr FindHandle()
           {
               var candidates = new List&lt;(IntPtr hwnd, string title, string className)&gt;();
               candidates.Add((new IntPtr(123), "title", "className"));
   
               if (candidates.Count == 1)
               {
                   // Breakpoint here
                   return candidates[0].hwnd;
               }
   
               throw new InvalidOperationException();
           }
       }
   }

   

2. Set a breakpoint the line below `// Breakpoint here`
3. See how everything is Zero when it shouldn't: 
![image](https://user-images.githubusercontent.com/1866463/61797637-14a82700-ae28-11e9-9b1d-a764993d13f1.png)


   Note how the list still has the correct value but accessing `[0]` returns a zeroed tuple apparently.

**Expected Behavior**:
Debugger shows the correct values. Code works at runtime.

**Actual Behavior**:
Debugger doesn't show correct value. In fact in our real application I feel like we had the wrong behavior (ie `IntPtr.Zero`) at runtime. In the real application this happened in a PInvoke scenario. However, I couldn't reproduce this here. This might be a wrong positive, but worth considering when investigating this.

**Workaround**:

Change the code to

diff
            if (candidates.Count == 1)
            {
                // Breakpoint here
-               return candidates[0].hwnd;
+               var t = candidates[0];
+               return t.hwnd;
            }
`</Code>
    <Description>**Version Used**: Visual Studio 15.9.04012.0. File -&gt; New -&gt; Project -&gt; Console (DotNet Core)

**Steps to Reproduce**:

1. Paste the following code:
    ``

</Description>
  </Issue>
  <Issue>
    <IssueID>37446</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Bug] C#8.0 - Struct member causes a cycle in the struct layout </Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels />
    <Code>
error CS0523: Struct member 'Test&lt;A&gt;.Value' of type 'Test&lt;A&gt;' causes a cycle in the struct layout

This is a simple test-case:
c#
    public struct Test&lt;A&gt;
    {
        public readonly static Test&lt;A&gt; Value = new Test&lt;A&gt;();
    }

Here's my test project file:
xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

    &lt;PropertyGroup&gt;
        &lt;OutputType&gt;Exe&lt;/OutputType&gt;
        &lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;

        &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
        &lt;Nullable&gt;enable&lt;/Nullable&gt;
        &lt;!-- NullableContextOptions will be replaced by Nullable in dotnet core 3.0 --&gt;
        &lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;
    &lt;/PropertyGroup&gt;
    
    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Microsoft.CSharp" Version="4.6.0-preview7.19362.9" /&gt;
    &lt;/ItemGroup&gt;
    
&lt;/Project&gt;

I use this heavily for the ad-hoc polymorphism feature of lang-ext; although I could drop it, it does seem rather arbitrary.

c#
    public struct EqSeq&lt;A&gt; : Eq&lt;Seq&lt;A&gt;&gt;
    {
        public static readonly EqSeq&lt;A&gt; Inst = default(EqSeq&lt;A&gt;);

        /// &lt;summary&gt;
        /// Equality check
        /// &lt;/summary&gt;
        [Pure]
        public bool Equals(Seq&lt;A&gt; x, Seq&lt;A&gt; y) =&gt;
            default(EqSeq&lt;EqDefault&lt;A&gt;, A&gt;).Equals(x, y);

        /// &lt;summary&gt;
        /// Get hash code of the value
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;Value to get the hash code of&lt;/param&gt;
        /// &lt;returns&gt;The hash code of x&lt;/returns&gt;
        [Pure]
        public int GetHashCode(Seq&lt;A&gt; x) =&gt;
            default(EqSeq&lt;EqDefault&lt;A&gt;, A&gt;).GetHashCode(x);
    }
`</Code>
    <Description>I started converting [language-ext]( over to C# 8.0 (to use non-nullable references) and immediately ran into a regression.  

Static members of generic structs (where the type is the struct itself) now throw an error where they didn't before.
``</Description>
  </Issue>
  <Issue>
    <IssueID>37444</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>37444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Assert failure in Binder.BindDeconstruction</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>37444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>`
var j = (i) switch { ... }
`

Roslyn tries to bind a deconstruction and fails on an assert:

`
DeconstructionVariable locals = BindDeconstructionVariables(left, diagnostics, ref declaration, ref expression);
Debug.Assert(locals.HasNestedVariables);
`

`
    System.InvalidOperationException : 
    
  Stack Trace: 
    at ThrowingTraceListener.Fail(String message, String detailMessage) in ThrowingTraceListener.cs line: 24
    at TraceListener.Fail(String message)
    at TraceInternal.Fail(String message)
    at Debug.Assert(Boolean condition)
    at Binder.BindDeconstruction(CSharpSyntaxNode deconstruction, ExpressionSyntax left, ExpressionSyntax right, DiagnosticBag diagnostics, DeclarationExpressionSyntax&amp; declaration, ExpressionSyntax&amp; expression, Boolean resultIsUsedOverride, BoundDeconstructValuePlaceholder rightPlaceholder) in Binder_Deconstruct.cs line: 95
    at Binder.BindDeconstruction(AssignmentExpressionSyntax node, DiagnosticBag diagnostics, Boolean resultIsUsedOverride) in Binder_Deconstruct.cs line: 33
    at Binder.BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 1333
    at Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in Binder_Expressions.cs line: 404
    at Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in Binder_Expressions.cs line: 329
    at Binder.BindValue(ExpressionSyntax node, DiagnosticBag diagnostics, BindValueKind valueKind) in Binder_Expressions.cs line: 228
    at Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics) in Binder_Statements.cs line: 588
    at Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 581
    at Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 52
    at Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 1662
    at Binder.BindBlock(BlockSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 1650
    at Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) in Binder_Statements.cs line: 43
    at Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics) in Binder_Statements.cs line: 3170
    at Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics) in Binder_Statements.cs line: 3118
    at MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, ValueTuple`4&amp; forSemanticModel) in MethodCompiler.cs line: 1653
    at MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) in MethodCompiler.cs line: 958
    at MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) in MethodCompiler.cs line: 507
    at MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg) in MethodCompiler.cs line: 385
    at NamedTypeSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument) in NamedTypeSymbol.cs line: 576
    at MethodCompiler.CompileNamespace(NamespaceSymbol symbol) in MethodCompiler.cs line: 364
    at MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in MethodCompiler.cs line: 152
    at CSharpCompilation.GetDiagnosticsForMethodBodiesInTree(SyntaxTree tree, Nullable`1 span, CancellationToken cancellationToken) in CSharpCompilation.cs line: 2412
    at CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken) in CSharpCompilation.cs line: 2544
    at SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken) in SyntaxTreeSemanticModel.cs line: 134
    at &lt;GetErrorsAsync&gt;d__7.MoveNext() in DocumentExtensions.cs line: 120
...
``</Code>
    <Description>A [fix in the convert switch statement to switch expression rewriter]( fails on an assert in `Binder.BindDeconstruction` for 2 tests:
- Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionTests.TestAssignment
- Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.ConvertSwitchStatementToExpression.ConvertSwitchStatementToExpressionTests.TestNested_01

It fails when the rewritten expression looks like

``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37444</IssueID>
        <PullRequestID>37016</PullRequestID>
        <Title>IDE0066 code fix adds parentheses when needed</Title>
        <Description>fix #36995 </Description>
        <CreatedDate>05/07/2019</CreatedDate>
        <ClosedDate>25/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>37444</IssueID>
            <PullRequestID>37016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>37444</IssueID>
            <PullRequestID>37016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>37016</PullRequestID>
            <IssueID>37444</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37443</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>37443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>PublicAPI.Unshipped.txt API files should be moved to PublicAPI.Shipped.txt</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>37443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>37443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Now that we're past the C# 8 preview period and have shipped some new APIs, we should move the "Unshipped" API file to the "Shipped" file so we have a record of what APIs we shipped.

/cc @jcouv @agocke </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>37443</IssueID>
        <PullRequestID>38594</PullRequestID>
        <Title>Run scripts/PublicAPI/mark-shipped.cmd</Title>
        <Description>Fixes  @JoeRobich fyi, this is almost certainly going to cause merge conflicts when it makes its way to master.</Description>
        <CreatedDate>09/09/2019</CreatedDate>
        <ClosedDate>09/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>37443</IssueID>
            <PullRequestID>38594</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>37441</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Condense NullableAnnotationState.NotApplicable and Disabled into None</Title>
    <CreatedDate>24/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>37441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As title. Also rename NullableFlowState.NotApplicable to None for consistency.</Description>
  </Issue>
  <Issue>
    <IssueID>37435</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>37435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Quick Actions not applying within Document/Project/Solution</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>37435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>37435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On being offered a Quick Action (xUnit2000 to be specific) clicking any of Document, Project or Solution does not apply the change as expected. The Quick Action will only work on a single instance._This issue has been moved from VSTS ticketId: 855884__These are the original issue comments:_Visual Studio Feedback System on 4/26/2019, 00:53 AM (88 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37434</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>37434</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Delete unused code in analyzer driver under SIMULATED_EVENT_QUEUE preprocessor symbol</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>37434</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>37434</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>37432</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>37432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Quick actions and refactorins suggest to delete unity methods that aren't called</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>37432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Quick actions and refactorins suggest to delete unity methods that aren't called, such as &amp;quot;Awake&amp;quot;,&amp;quot;OnTriggerEnter&amp;quot;,&amp;quot;Update&amp;quot; and etc_This issue has been moved from VSTS ticketId: 842165__These are the original issue comments:_Visual Studio Feedback System on 4/8/2019, 03:45 AM (106 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37430</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>37430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Create and initialise field ignores nullability</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>14/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C
{
   public C(string? str)
   {
   }
}

Use the Create and initialise field  refactoring

**Expected Behavior**:

csharp
public class C
{
	private readonly string? _str;

	public C(string? str) 
        {
		_str = str;
	}
}


**Actual Behavior**:

csharp
public class C
{
	private readonly string _str;

	public C(string? str) 
        {
		_str = str;
	}
}
`</Code>
    <Description>**Version Used**: VS 16.2 preview 4

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>37427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>37427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Region analysis gives incorrect results in the presence of local functions</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>26/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>37427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact, WorkItem(37427, "https://github.com/dotnet/roslyn/issues/37427")]
        public void RegionWithLocalFunctions()
        {
            var analysisResults = CompileAndAnalyzeDataFlowStatements(@"
class A
{
    static void M(int p)
    {
        int i, j;
        i = 1;
        /*&lt;bind&gt;*/
        int L1() =&gt; 1;
        int k;
        j = i;
        int L2() =&gt; 2;
        /*&lt;/bind&gt;*/
        k = j;
    }
}
");
            var dataFlowAnalysisResults = analysisResults;
            Assert.True(dataFlowAnalysisResults.Succeeded);
            Assert.Equal("k", GetSymbolNamesJoined(dataFlowAnalysisResults.VariablesDeclared));
            // should be "j"
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.AlwaysAssigned));
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.Captured));
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.CapturedInside));
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.CapturedOutside));
            // should be "i"
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.DataFlowsIn));
            // should be "j"
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.DataFlowsOut));
            // should be "i"
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.ReadInside));
            // should be "j"
            Assert.Equal("i, j", GetSymbolNamesJoined(dataFlowAnalysisResults.ReadOutside));
            // should be "j"
            Assert.Equal(null, GetSymbolNamesJoined(dataFlowAnalysisResults.WrittenInside));
            // should be "p, i, k"
            Assert.Equal("p, i, j, k", GetSymbolNamesJoined(dataFlowAnalysisResults.WrittenOutside));
        }
`</Code>
    <Description>Region analysis gives incorrect results in the presence of local functions.  The implementation does not properly track the start and end of the region, resulting in incorrect results.

See also  

/cc @CyrusNajmabadi @agocke 

``
</Description>
  </Issue>
  <Issue>
    <IssueID>37423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>using namespace invalid</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>37423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Data;
using System.Drawing;

namespace ConsoleApp1
{
    public class Program
    {
        public static void Main(string[] args)
        {
#if DEBUG
            Console.WriteLine(CommandType.Text);
#else
            Console.WriteLine(Color.Red);
#endif
        }
    }
}

`</Code>
    <Description>**Visual Studio Version**:16.1.6

**Summary**:

The reference namespace is invalid and will be cleaned up by the editor, which will cause the compilation to fail.

**Steps to Reproduce**:

1. 

``
2. Remove And Sort Usings

3. Switch to Release mode

4.rebuild

**Expected Behavior**:

build success

**Actual Behavior**:

build fail

**User Impact**:
</Description>
  </Issue>
  <Issue>
    <IssueID>37421</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>37421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test harness for region analysis has some strange behavior.</Title>
    <CreatedDate>23/07/2019</CreatedDate>
    <ClosedDate>02/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>37421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From PR:  and @gafter:

&gt; OK, I think I understand why that test behaves the way it does. Other APIs will display bad behavior too. Please file an issue for it and notate the unexpected test with that bug number. Tag me in the bug and I will fix it.

The unexpected test is LocalFuncCapture8 (which has also been updated to link to this issue).</Description>
  </Issue>
  <Issue>
    <IssueID>37415</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Invalid Inline variable declaration code fix</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37415</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37415</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;pre&gt;class Foo{    public Bar Bar;}class Bar{    public int Value;}public static int Test(out int bar) =&amp;gt; throw new NotImplementedException();public void Inline(){    int bar; // This can be inlined    _ = new Foo()    {        Bar =        {            Value = Test(out bar)        }    };}&lt;/pre&gt;&lt;p&gt;When using the code-fix to apply inline variable declaration on the variable `bar` in the `Inline` function, the generated code will be `Value = Test(out intbar)` instead of `Value = Test(out int bar)` (note the missing space).&lt;/p&gt;&lt;p&gt;This only happens when using nested initializer syntax.&lt;/p&gt;_This issue has been moved from VSTS ticketId: 839184__These are the original issue comments:_Visual Studio Feedback System on 4/8/2019, 00:56 AM (105 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37411</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot build latest Roslyn</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>37411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>37411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: master as of earlier today, VS 16.20 preview 4

**Steps to Reproduce**: 
cannot build roslyn. I've tried building in VS, as well as shutting down VS, deleting .vs folder, running Restore.cmd, running build.cmd, but it fails.

The error message is:

``</Description>
  </Issue>
  <Issue>
    <IssueID>37409</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove derived Symbol.Equals(object)</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>37409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As part of #37247 we've added a new internal virtual method to Symbol: `Equals(Symbol, TypeCompareKind)`

We should replace all usages of `Equals(Object)` in any derived types with the new overload, and make `Equals(Object)` sealed, so that no types can implement it going forward.

Derived types can then either use the comparison as needed, or discard it if it doesn't make sense in the context of the symbol.</Description>
  </Issue>
  <Issue>
    <IssueID>37408</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Statement indentation level gets broken with comment</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>22/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``If you hit enter twice after the comment, the caret moves to curly bracket level._This issue has been moved from VSTS ticketId: 948418__These are the original issue comments:_Visual Studio Feedback System on 7/18/2019, 02:37 AM (4 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;Enbi Zhang [MSFT] on 7/19/2019, 00:40 AM (3 days ago): &lt;markdown&gt;&lt;p&gt;Thanks for your feedback.&lt;br&gt;Which language of your project used? C#, VB or C++?&lt;br&gt;Also did you install any extension? If yes, can you disable/uninstall them and reopen vs, see if the issue still occurs?&lt;/p&gt;&lt;/markdown&gt;savascilve on 7/19/2019, 02:19 AM (3 days ago): Hi,&lt;br&gt;&lt;br&gt;It's C#. I've tried disabling all extensions one by one, no luck. Also I've tried on diiferent type of projects (class library, web api, console app, winforms..) on net framework 4.6.2, 4.7, .net core 2.1, .net core 2.2. &lt;br&gt;&lt;br&gt;Attached a gif.&lt;br&gt;Enbi Zhang [MSFT] on 7/21/2019, 06:42 PM (17 hours ago): &lt;markdown&gt;&lt;p&gt;We have redirected your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>37405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2019 crashes with C# file containing a method with too many locals</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;This apparently happens when a C# program contains a method that initializes enough value types in the stack to cause a StackOverflowException at runtime.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Repro steps&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Clone repro project from &lt;a href=" target=_blank&gt; Open Program.cs on the IDE &lt;/p&gt;&lt;p&gt;3. Start scrolling on the file until VS crashes&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Actual result &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. After processing the file in the background and and freezing the UI for a few seconds, Visual Studio crashes &lt;/p&gt;&lt;p&gt;2. When Visual Studio automatically restarts, it crashes again&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Expected result &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Visual Studio 2019 is stable and handles this file gracefully, like Visual Studio 2017.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Notes &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Visual Studio only crashes if Program.cs remains open in the IDE for a few seconds. &lt;/p&gt;&lt;p&gt;2. The repro project has some dependencies, but this seems to be just a bug in the IDE (or perhaps in some add-in). &lt;/p&gt;&lt;p&gt;3. After one of the crashes, I saw a message saying &amp;quot;Developer Analytics Tools 9.0.20206.1 likely caused 8 seconds of unresponsiveness. Disabling it may improve your experience.&amp;quot;, but I was still able to repro after disabling the add-in.&lt;/p&gt;_This issue has been moved from VSTS ticketId: 802077__These are the original issue comments:_Visual Studio Feedback System on 2/25/2019, 07:30 PM (146 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Visual Studio Feedback System on 2/26/2019, 00:02 AM (146 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;Sam Harwell [MSFT] on 7/9/2019, 06:25 AM (13 days ago): &lt;markdown&gt;&lt;p&gt;Thank you for providing feedback, and we’re sorry to hear it’s not behaving as you expect. Based on your description so far, it sounds like you are experiencing a problem which is historically hard to diagnose and resolve using the normal “steps to reproduce”. We created a set of instructions for providing additional information which will help us track down the true source of the problems.&lt;/p&gt;&lt;p&gt;Based on the information provided so far, the most likely scenario to follow is for “Crashes”. Please take a look at the following document to provide the feedback most relevant for the problems you would like to see fixed: &lt;a target='_blank' href="&lt;/markdown&gt;Blair Wang [MSFT] on 7/22/2019, 07:37 AM (3 hours ago): We will close this report in 7 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.Diego Vega [MSFT] on 7/22/2019, 10:30 AM (60 min ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;&lt;a rel="user" href=" nodeid="13574"&gt;@Sam Harwell [MSFT]&lt;/a&gt; I can confirm that this still crashes in the last dogfooding builds (I have Microsoft Visual Studio Enterprise 2019 Int PreviewVersion 16.3.0 Preview 1.0 [29118.114.d16.3]). It repros consistently, every time on my machine, just following the simple steps in the repro. I am happy to talk and show you the repro in Teams. &lt;/p&gt;Diego Vega [MSFT] on 7/22/2019, 10:49 AM (40 min ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;I also have a crash heap dump &lt;a target='_blank' href="Diego Vega [MSFT] on 7/22/2019, 10:59 AM (30 min ago): &lt;p&gt;The only difference I have observed from the original repro (possibly a behavior change in recent builds) is that when Visual Studio restarts automatically after the crash, the Program.cs file isn't open, and VS won't crash again util you open it and do some amount of scrolling.&lt;/p&gt;&lt;p&gt;I have attached a crash dump in a message to Microsoft.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37404</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Find all references' breaks when assigning via deconstruction</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>22/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37404</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37404</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    void M(int a, int b)
    {
        // Find all references of the parameter `a` by right-clicking the first reference to it
        // in the following line (on the left-hand side of the assignment):
        (a, b) = Adjust(a, b);
    }

    (int a, int b) Adjust(int a, int b)
    {
        a++;
        b++;
        return (a, b);
    }

    void AVeryUnrelatedMethod()
    {
        var x = (a: 3, b: 4);
        Console.WriteLine(x.a);
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 16.1.6

I wanted to see a list of all writes to parameter `a`, so I right-clicked the write to `a` that was in front of me:

``

The result should have been the same as if I had right-clicked any other reference to the parameter `a`:

![image](

Instead, it returned all references to `(int a, int b).a` which is not at all the same thing as the parameter `a` which is referenced in the syntax that I clicked. It even dug into other projects:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>37402</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>37402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider adjusting breakpoint spans for await foreach and using declarations</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>37402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>37402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A breakpoint span that corresponds to an initial sequence point of an `await foreach` statement and `await using` and `using` declarations does not currently cover `await` or `using` keywords. When a breakpoint is attempted to be placed on one of these keywords in the IDE it gets placed on the following part of the foreach statement or the variable declaration. These behaviors are in sync between the compiler and the IDE, so functionally there is no issue. However, it feels odd that the breakpoint does not cover the keywords as we include the modifiers in the breakpoint span in other variable declaring constructs, like a field declaration.

Async foreach:
![image](

Using declaration:
![image](

![image](

![image](

Field declaration:
![image](

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>37400</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Copying solution folder then opening sln =&gt; wrong source files opened on startup</Title>
    <CreatedDate>22/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37400</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37400</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Every morning I copy my solution folder then rename it.  For example folder .. \Solution_07_18_2019 gets copied to .. \Solution_07_19_2019 (no source control, etc. - I'm the only developer).  Then I launch Visual Studio and open the new copy by browsing to Solution_07_19_2019\...\Solution.sln.  The project opens fine, and Visual Studio automatically reopens/loads the source files I had open when I last closed the Solution (yesterday) - but it loads them from the old location!  So I have to remember to close them all or I will be editing the old versions (the clue I forgot is when intellisense starts acting funny in the source file).  For example if I do File/Save As it shows the old location .. \Solution_07_18_2019\.. \SourceFile.cs.  Simply closing all the open documents then double-clicking on them in the Solution Explorer to reopen the correct ones works fine.  I actually put a &amp;quot;close all documents&amp;quot; tool-bar button on my tool-bar...I would suggest not opening the &amp;quot;last-open&amp;quot; documents at all if the sln file is not where it was previously?  Or using relative paths?_This issue has been moved from VSTS ticketId: 950068__These are the original issue comments:_Visual Studio Feedback System on 7/22/2019, 05:43 AM (2 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Property patterns with generics give a syntax error</Title>
    <CreatedDate>21/07/2019</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
   public abstract class Option&lt;T&gt; { }
   public class None&lt;T&gt; : Option&lt;T&gt; { }
   public class Some&lt;T&gt; : Option&lt;T&gt; {
       public T Value { get; }
       public Some(T value) =&gt; Value = value;
   }

If i try property pattern on Some\&lt;T&gt; the compiler throws a syntax error

cs
static string Match(Option&lt;Foo&gt; maybeFoo) =&gt;
    maybeFoo switch
    {
        // works
        None&lt;Foo&gt; _ =&gt; "Theres nothing",

        // works
        Some&lt;Foo&gt; someFoo when someFoo.Value.Bar &gt; 42 =&gt; someFoo.Value.Baz,

        // Syntax error
        Some&lt;Foo&gt; { Value: var p } when p.Bar == 42 =&gt; p.Baz,

        _ =&gt; string.Empty,
    };


If I define a Type alias to Some\&lt;Foo&gt; it works as expected

cs
using SomeFoo = Program.Some&lt;Foo&gt;;

static string Match(Option&lt;Foo&gt; maybeFoo) =&gt;
    maybeFoo switch
    {
        // works
        None&lt;Foo&gt; _ =&gt; "Theres nothing",

        // now works
        SomeFoo { Value: var p } when p.Bar == 42 =&gt; p.Baz,

        _ =&gt; string.Empty,
    };
`</Code>
    <Description>
I'm trying to replicate some light Option\&lt;T&gt; on C#8, but I'm getting an error in the switch expression

Consider the code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>37394</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>37394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable Check didn't check for ?? false</Title>
    <CreatedDate>21/07/2019</CreatedDate>
    <ClosedDate>13/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
mkdir NullableTest &amp;&amp; cd NullableTest
dotnet new console

Then enable NullableContextOptions, and write code:
csharp
using System;

namespace NullableTest
{
    class InnerClass
    {
        public bool TestField;
    }
    class Test
    {
        public InnerClass? InnerField;
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }

        static bool Test()
        {
            var x = new Test();
            if (x.InnerField?.TestField ?? false) // obviously if x.InnerField is null, it won't enter the `if` statement so there's no nullable-related issues
            {
                return x.InnerField.TestField;
            }
            return false;
        }
    }
}



dotnet build


**Expected Behavior**:
No warnings and no errors.

**Actual Behavior**:

Program.cs(25,24): warning CS8602: Dereference of a possibly null reference.
`</Code>
    <Description>**Version Used**: 16.2.0-preview-19278-01+d635043bd

**Steps to Reproduce**:
``

**Additional Information**
The if (xx?.yy ?? false) is commonly used in C#, I hope that Roslyn can support checking nullability for this syntax </Description>
  </Issue>
  <Issue>
    <IssueID>37391</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>37391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Where is the list of compiler warnings or error codes?For example, IDE1006</Title>
    <CreatedDate>20/07/2019</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>37391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>37391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
Where is the list of compiler warnings or error codes?For example, IDE1006</Description>
  </Issue>
  <Issue>
    <IssueID>37386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EditorTextFactoryService should handle exceptions better when calling editor's CreateTextBuffer</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> calls an editor API to CreateTextBuffer.

This can throw more exceptions than are currently handled, (file access exceptions for files in excess of 3gb, binary characters (new exception), etc.).

Currently this is causing VS to crash when opening Roslyn on VS master as changes were made to throw a FileFormatException when binary characters are encountered.  I've created an issue to track down where these files are and why.
  

Even if these are not valid, we still should probably not be crashing / provide a better error to help diagnose which file has the issue.</Description>
  </Issue>
  <Issue>
    <IssueID>37385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crashes when opening roslyn.sln on VS master.</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>29/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>37385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>37385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With stack stace-
``

There appear to be binary characters in some roslyn files.  Loading these will throw a FileFormatException in the latest versions of VS.

This issue is to track down why these files exist.</Description>
  </Issue>
  <Issue>
    <IssueID>37383</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Substituted symbols should override Equals(ISymbol, TypeComparisonKind)</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>03/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>37383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In #37247 we updated `TypeSymbol` and `SubstituedMethodSymbol` to consider the compare kind when comparing for equality.

We should additionally light up other symbol types that can change depending on their nullability, to ensure analyzers can correctly determine symbol equality.</Description>
  </Issue>
  <Issue>
    <IssueID>37382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Symbol Comparisons should not use default Equals</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>03/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>37382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As part of #37247 we changed the default equals to ignore nullability. 

We changed everywhere that change broke to be explicit comparisons, but in reality we should change all of the usages in our code base and obsolete `Symbol.Equals(ISymbol)` and `Symbol operator ==` to ensure every comparison is valid

Proposal was to create an analyzer and code fixer to mechanically switch all the instances over, and prevent future breaks.</Description>
  </Issue>
  <Issue>
    <IssueID>37379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>37379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>DeterministicSourcePaths can break building if source control information not available</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>37379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>37379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
dotnet sdk 2.2.300
**Steps to Reproduce**:

1. dotnet new console 
1. dotnet build /p:ContinuousIntegrationBuild=true

**Actual Behavior**:
&gt; C:\Program Files\dotnet\sdk\2.2.300\Roslyn\Microsoft.Managed.Core.targets(102,5): error : SourceRoot items must include at least one top-level (not nested) item when DeterministicSourcePaths is true

**Expected Behavior**:
Build Succeeds. 

The mere fact that we we are performing a continuous integration build does not mean that source control information will be available to MSBuild. However deterministic builds are enabled by default, and turning on `ContinuousIntegrationBuild`, means that `DeterministicSourcePaths` is enabled.

That would be fine if `DeterministicSourcePaths` worked when no source control information was available, but it requires `SourceRoot` items, which are only created by a source control information provider like the Source Link packages.

This bit me when I tried to add a new Test project to a solution being built with `/p:ContinuousIntegrationBuild=true`. I did not bother to add a Source Link NuGet package since I was not going to package or publish the test project on the CI server, merely run it, so I don't actually need Source Link data in the pdbs.

Obviously I know the workarounds (add the Source Link package or set `DeterministicSourcePaths` to false in the test project).

But ideally they would not be needed. Instead ideally, either a) `DeterministicSourcePaths` would only be set if a source control information provider package was installed, or b) that `DeterministicSourcePaths` was somehow made to work even without a source provider package.

@tmat I think you are the expert on this stuff, so this is probably your issue. </Description>
  </Issue>
  <Issue>
    <IssueID>37371</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intellisense verbiage for DateDiff in VB.Net</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The DateDiff function in VB.Net takes two dates: date1 and date2.  The Intellisense help for those two parameters is not helpful, however.  It simply tells you that you're putting in the first or second value, which is already obvious from the name.  What we need to know is that date1 will be subtracted from date2 instead of the other way around.I've been using Visual Basic professionally since version 3 and, in all that time, I still get those two dates reversed!  The only way to figure out which way it will go is to either try it or hit F1 and scroll down a couple of pages.  Even the example in the help is done in such a way that you can't tell which is which!I know VB.Net is no longer a priority but please, give us some help text that's helpful!_This issue has been moved from VSTS ticketId: 949192__These are the original issue comments:_Visual Studio Feedback System on 7/19/2019, 00:19 AM (9 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37364</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>37364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Serious UI perf delays in 16.2 preview 4</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>37364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The latest builds of VS give me UI pauses constantly, often on hte order of 2-3 seconds.  I have filed two traces for this and have tagged @sharwell in them.  Sam says he has analyzed hte issue and knows the culprit.

I'm opening this issue at the request of @jinujoseph so the problem doesn't get lost and so that fix is driven to completion. 

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>37363</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio crash opening CPS solution</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>23/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On Visual Studio master, 16.3.0-pre.2.0+29118.169.master

Opening the CPS.sln crashes Visual Studio. Looks like SolutionCrawlerRegistrationService is doing a FailFast (why does that ever happen?!)

I've seen it with various files, but today `DefaultStandardCommandSet97Handler.cs` was opened from solution restore, but if I doubt there is anything specific in there, as I have no local changes and it loads fine in IntPreview.

``</Description>
  </Issue>
  <Issue>
    <IssueID>37362</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning CS8653 didn't show up neither in Visual Studio nor in VSCode</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37362</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>37362</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.NetCore SDK 3.0.100-preview6-012264
Visual Studio 16.2.0-p3
Visual Studio Code 1.36.1
C# Extension in Visual Studio Code: 1.21.0

**Steps to Reproduce**:

1. Create a project containing below code snippet:

    ```cs
    public T GetT&lt;T&gt;()
    {
        throw new NotImplementedException();
    }

    public T GetOrDefault&lt;T&gt;()
    {
        bool condition = false;
        T value = GetT&lt;T&gt;();
        return condition ? value : default; // warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.
    }

1. Open this project in Visual Studio or VSCode 

**Expected Behavior**:

A warning (CS8653) at the return statement;

**Actual Behavior**:

No warning there, it won't break build in Visual Studio even if `TreatWarningAsError` is set to true, but it will show up while building the project using the CLI.</Description>
  </Issue>
  <Issue>
    <IssueID>37361</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SpeculativeT completion does not support tuples.</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>37361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is found during review of #37323

**Version Used**:
VS16.2 

**Steps to Reproduce**:

1. Inside a C# class, type `(T `

**Expected Behavior**:

`(T )`

**Actual Behavior**:

`(ThreadStaticAttribute )`</Description>
  </Issue>
  <Issue>
    <IssueID>37358</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>37358</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Assign shortcut Ctrl+/ to ToggleLineComment</Title>
    <CreatedDate>19/07/2019</CreatedDate>
    <ClosedDate>26/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37358</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37358</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>37358</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>ToggleLineComment is such an important editor productivity command that it deserves a single-chord shortcut. Ideally, Ctrl+/, which is commonly used by many other editors for commenting and uncommenting code.

Reference issue: #36351 </Description>
  </Issue>
  <Issue>
    <IssueID>37354</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compilation failed with exit code 57005</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>01/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>37354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) 
at System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken) 
at Microsoft.Analytics.Roslyn.CS6.RoslynSemanticModel.GetDiagnostics() 
at ScopeCompiler.FrontEnd.ScopeRoslynBinder.CheckScriptEnvironment(IRoslynCompilation compilation) 
at ScopeCompiler.FrontEnd.ScopeRoslynBinder.BuildScriptEnvironment() 
at System.Threading.Tasks.Task`1.InnerInvoke() 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
at System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() 
at Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() 
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() 
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
`</Code>
    <Description>**Version Used**: 1.3.2
I know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.

Cannot repro but got an Exception from Roslyn with return code 57005 with the following callstack:

``</Description>
  </Issue>
  <Issue>
    <IssueID>37352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Binder error -1073741819</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>37352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>37352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 1.3.2
I know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.

Cannot repro but got an Exception from Roslyn with return code -1073741819 with the following callstack (which is different than the same bugs I found with the same return code):

at Microsoft.CodeAnalysis.CSharp.Binder.WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent, NodeUsage extraInfo) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, Int32 position, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeOneDeclaredBases(ConsList`1 newBasesBeingResolved, SingleTypeDeclaration decl, DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeDeclaredBases(ConsList`1 basesBeingResolved, DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetDeclaredBases(ConsList`1 basesBeingResolved) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeAcyclicBaseType(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.get_BaseTypeNoUseSiteDiagnostics() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckBase(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.Execute() 
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) 
at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot) 
at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) 
at System.Threading.ThreadPoolWorkQueue.Dispatch() 
</Description>
  </Issue>
  <Issue>
    <IssueID>37349</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>37349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS8019 violation in Resources.Designer.cs</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Visual Studio 2019 Enterprise (16.1.6)I have a `Resources.resx` file in a .NET FX 4.6 C# project. IntelliSense reports &amp;quot;Unnecessary using directive. (CS8019)&amp;quot; in the the auto-generated `Resources.Designer.cs`, complaining `using System;` is unnecessary.Auto generated file should not have compile/CA warnings. Please either fix the code generation tool or the compiler._This issue has been moved from VSTS ticketId: 944547__These are the original issue comments:_Visual Studio Feedback System on 7/10/2019, 00:44 AM (8 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;Drew Noakes [MSFT] on 7/17/2019, 02:31 AM (37 hours ago): &lt;markdown&gt;&lt;p&gt;Thanks for the feedback. Can you please confirm whether you’re seeing the CS8019 diagnostic in the build output (when you compile) or only in the IDE when the file is opened in the editor?&lt;/p&gt;&lt;/markdown&gt;James Liang [MSFT] on 7/17/2019, 08:58 PM (19 hours ago): &lt;p&gt;The CS8019 violations are shown in IDE Error List (with IntelliSense on) only, not yet observed in build output.&lt;/p&gt;&lt;p&gt;By the way, I have "Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.3" installed for the projects, configed with customzied ruleset file, and have .editconfig file above.&lt;/p&gt;Visual Studio Feedback System on 7/17/2019, 09:10 PM (18 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37348</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn NullReferenceException at Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>37348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>37348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:1.3.2 
I know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.

Cannot repro but got a NullReferenceException with the following callstack:

at Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound(Int32[] array, Int32 value) 
at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.FindSlotIndexContainingOffset(Int32 offset) 
at Microsoft.CodeAnalysis.ChildSyntaxList.ChildThatContainsPosition(SyntaxNode node, Int32 targetPosition) 
at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ChildThatContainsPosition(Int32 position) 
at Microsoft.CodeAnalysis.SyntaxNode.FindTokenInternal(Int32 position) 
at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.IsInUsing(CSharpSyntaxNode containingNode) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent, NodeUsage extraInfo) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, Int32 position, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) 
at Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddNonTypeMembers(MembersAndInitializersBuilder builder, SyntaxList`1 members, DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow() 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) 
at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) 
at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object ) 
at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext() 
at ScopeCompiler.CompilationException.FromInnerException(Exception e, CompilerDependencyFactory dependencies, Nullable`1 unhandled, Token anchor, Script script, Func`2 getDiagnosticSerializableException, Func`2 args) 
at ScopeCompiler.CompilationException.&lt;&gt;c__DisplayClass15_0.&lt;FromInnerException&gt;b__0(Exception inner) 
at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext() 
</Description>
  </Issue>
  <Issue>
    <IssueID>37343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>37343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect `IDE0007 use 'var' instead of explicit type` for List&lt;T&gt;</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>19/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>37343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var result = new List&lt;CorrespondenceModel&gt;();
// ...
List&lt;CorrespondenceModel&gt; sortedresult = result.OrderByDescending(r =&gt; r.CreationDate).ToList();
`</Code>
    <Description>``

I'm getting "use 'var' instead of explicit type" for line "List&lt;...&gt;"

_This issue has been moved from 
VSTS ticketId: 841177_
_These are the original issue comments:_

Visual Studio Feedback System on 4/8/2019, 01:55 AM (101 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

Visual Studio Feedback System on 7/18/2019, 00:54 PM (42 sec ago): &lt;markdown&gt;&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;
&lt;/markdown&gt;
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37342</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generalize InternalImplementationOnlyAttribute Usage</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>37342</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>37342</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>37342</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.NET Core 3.0 preview 6

This isn't a bug per-se. I just noticed recently that I can't create a class that inherits from `ISymbol`. After digging around a bit, I finally realized that the interface (`IOperation` has this as well) has the `InternalImplementationOnlyAttribute` on it. Apparently, this lets Roslyn define public interfaces that can't be part of a class's inheritance hierarchy if it's not within its assembly.

Since `InternalImplementationOnlyAttribute` is `internal`, .NET developers can't use this attribute. But the compiler already knows to create an error (RS1009 is the code) if an interface has it. I've had cases myself where I wanted a public interface that could not be a base type unless it was within the assembly. If `InternalImplementationOnlyAttribute` was made `public`, would it be possible to make this a feature for general consumption by any .NET developer?</Description>
  </Issue>
  <Issue>
    <IssueID>37336</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Static local functions cannot reference locally defined constants.</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37336</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>37336</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If a function in which a local function is defined has locally defined constants, IDE0062 will appear suggesting to make the local function static.However, doing so will produce CS8421: A static local function cannot contain a reference to 'LocalConstant'.Since constants are... well, constant, it should not quite matter where -- or how many times -- they are defined as long as they are in scope. Probably the compiler would have to re-generate these local constants or hoist them from the outer function to the class that receives the local functions and just fixup the references whether they appear in the local function or the function in which they are defined._This issue has been moved from VSTS ticketId: 943805__These are the original issue comments:_Visual Studio Feedback System on 7/9/2019, 03:43 AM (9 days ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37335</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Edit - GoTo All: Focus is lost when file is auto-opened</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When hitting Ctrl-, or Ctrl-T and typing something, after a short delay the first search result location is opened in a (new) window. this steals the focus away from the GoToAll window, thus making it impossible to continue typing (or just type slowly) and select from the search result using the arrow keys._This issue has been moved from VSTS ticketId: 947772__These are the original issue comments:_Visual Studio Feedback System on 7/17/2019, 01:17 AM (34 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37334</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Closing GoToAll closes current document even if unrelated</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>37334</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>37334</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Search for something in GoToAll2. Single-click to temporarily open a document from the results list as you're not sure it's what you're looking for3. Navigate away from that document - use Go to Definition, text search etc.4. Realise that you have found what you were looking for5. Close the GoToAll results list6. The document you are now in closes, even though it's not the document that GoToAll initially temporarily openedIf the document was already open, you still leave where you were working and go back to where you were originally.There seems to be no way to close the list without losing your palce.This has been happening since VS2015 and I belive still happens in VS2019._This issue has been moved from VSTS ticketId: 947791__These are the original issue comments:_Visual Studio Feedback System on 7/17/2019, 01:20 AM (34 hours ago): &lt;markdown&gt;&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;&lt;/markdown&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>37329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>37329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0060 false positive for Main(string[] args)</Title>
    <CreatedDate>18/07/2019</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>37329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>37329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>37329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
MS VS Community 2019 v16.1.6

**Steps to Reproduce**:
namespace S0201___HelloWorld
{
	internal static class Program
	{
		private static void Main(string[] args)
		{
			Console.WriteLine("Hello World");
			Console.ReadLine();
		}
	}
}

**Expected Behavior**:
No message (-&gt; blue bang).

**Actual Behavior**:
Message	IDE0060	Remove unused parameter 'args'	S0201 - HelloWorld	C:\SourceCode\Learning\Complete ASP.NET MVC Web Dev - Newbie to Ninja!\S0201 - HelloWorld\Program.cs	11	Active

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>36641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>36641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Source server support broken in VS</Title>
    <CreatedDate>21/06/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was trying to debug Roslyn in VS. I was able to get symbols from symweb, but when I hit a breakpoint, it was unable to find the source.

I don't know if this is a VS bug or a bug with Roslyn source server support.</Description>
  </Issue>
  <Issue>
    <IssueID>36631</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect IDE0004 Cast is redundant on interplation</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNVisual Studio 2019 (16.1.2) incorrectly reports the cast in the following expression as redundant:
`object x = (IFormattable)$"";`

_This issue has been moved from 
VSTS ticketId: 917467_
_These are the original issue comments:_

Visual Studio Feedback System on 6/13/2019, 01:53 AM (7 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36627</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>36627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unable to create a delegate pointing to a static local function from within the function</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>36627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>36627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

``

**Expected Behavior**:

Compiles w/o errors.

**Actual Behavior**:

`Error CS8422: A static local function cannot contain a reference to 'this' or 'base'.`</Description>
  </Issue>
  <Issue>
    <IssueID>36626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New CSPROJ format: Conditional compilation code not correctly visualized</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>36626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When using the new CSPROJ fomat conditional code elements are not correctly visualized.Inactive code es expected to be printed in gray.Visual Studio: 15.3.5Example:Switching betwenn Debug and Release mode does not change the color of the two 'Console.WriteLine' statements:#if DEBUG            Console.WriteLine(&amp;quot;DEBUG&amp;quot;);#endif#if !DEBUG            Console.WriteLine(&amp;quot;NOT DEBUG&amp;quot;);#endif_This issue has been moved from VSTS ticketId: 516771__These are the original issue comments:_Jinu Joseph [MSFT] on 11/1/2017, 00:37 PM (596 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;Igor Pietraszko on 4/21/2018, 08:56 AM (425 days ago): &lt;p&gt;I have noticed the same behaviour but if I shut down VS2017 and then reopen it and go to the file in question, the correct code block is highlighted.  I am on VS2017 15.6.6.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36624</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>36624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Import completion should timeout if computing items takes too long</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>36624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>36624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It should keep the computation going to populate the cache, so the next time completion is triggered the data will be available.

This is to avoid blocking completion for the very first time it's triggered. Telemetry shows that for most people it might take at least 6s for the import completion to return (30s in the most extreme case). 

An alternative would be pre-calculate the data and warm up the cache before completion is triggered.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>36624</IssueID>
        <PullRequestID>36936</PullRequestID>
        <Title>Completion timebox</Title>
        <Description>Fix #36624

Verified the timeout works manually, not sure if there's good way to test this as unittest.

TODO:

- [x] Perf analysis</Description>
        <CreatedDate>02/07/2019</CreatedDate>
        <ClosedDate>12/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>36624</IssueID>
            <PullRequestID>36936</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>36619</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Don't analyse generated code</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>36619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNI'm working on a project that uses a lot of generated code and VS2019 shows a lot of activity analysing it on every build. It would be useful to be able to specify files / folders to exclude from analysis. Annoyingly in this specific case the files are dumped in with other, non generated files and they're not named anything useful to distinguish them from regular code so I'd need the ability to specify specific files rather than a heuristic._This issue has been moved from VSTS ticketId: 934239__These are the original issue comments:_Visual Studio Feedback System on 6/20/2019, 02:05 AM (8 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36616</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CSharp.Core.targets(59,5): error on linux.</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>yaml
language: csharp
solution: Natasha.sln
mono: none
dotnet: 2.2
dist: xenial
sudo: required

before_install:
  - sudo apt-get install nuget

env:
  global:
    - DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    - DOTNET_CLI_TELEMETRY_OPTOUT: 1

install:
  - dotnet restore

script:
  - dotnet build -c Release
`</Code>
    <Description>I used travis-ci to build project.  
Here is the build configuration:
``

Here is the error message: [build--log](
You can turn to the bottom few lines.  


`
[39;49m[39;49m[31m/home/travis/.nuget/packages/microsoft.net.compilers/3.1.1/tools/Microsoft.CSharp.Core.targets(59,5): error : Got a SIGABRT while executing native code. This usually indicates [/home/travis/build/dotnetcore/Natasha/Natasha/Natasha.csproj]
[39;49m[39;49m[31m/home/travis/.nuget/packages/microsoft.net.compilers/3.1.1/tools/Microsoft.CSharp.Core.targets(59,5): error : a fatal error in the mono runtime or one of the native libraries  
...................
`  

How can I solve this problem?</Description>
  </Issue>
  <Issue>
    <IssueID>36609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Components/Controls/UserControls inconsistently get marked with sub type</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Version 16.2.0 Preview 4.0 [29018.107.d16.2stg]

**Steps to Reproduce**:

All steps start with:

1. File -&gt; New -&gt; Windows Forms App (.NET Core)

#### User Control does not get marked with sub type

1. Add -&gt; New Item -&gt; User Control

####  Custom Control does not get marked with sub type

**Expected**: Icon to change to "UserControl", when double-click, Control designer should open

1. Add -&gt; New Item -&gt; Custom Control

**Expected**: Icon to change to "Component", when double-click Component designer should open

#### Changing Form -&gt; Component should fix up sub type

1. Add -&gt; New Item -&gt; Windows Form
2. Right-click -&gt; View Code
3. Change base class to Component

**Expected**: Icon to change to "Component", when double-click Component designer should open
</Description>
  </Issue>
  <Issue>
    <IssueID>36608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE offers refactoring to convert switch statement to expression</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>36608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
public class C {
    public enum Kind {
        Created,
        Moved,
    }
    
    class EventArgs1 : EventArgs {}
    class EventArgs2 : EventArgs {}
    
    event EventHandler&lt;EventArgs1&gt; Created;
    event EventHandler&lt;EventArgs2&gt; Moved;
    
    public object GetHandler(Kind kind)
    {
        switch (kind)
        {
            case Kind.Created:
                return Created;
            case Kind.Moved:
        	return Moved;
            default:
                throw new InvalidOperationException();
        }
    }
}


**Expected Behavior**:
IDE offers to convert to switch statement and gets it right (adds object casts) or doesn't offer the refactoring.

**Actual Behavior**:
Refactors the code to this, which doesn't build:

csharp
static object GetHandler (Kind kind)
{
	return kind switch
	{
		Kind.Created =&gt; Created,
		Kind.Copied =&gt; Copied,
		_ =&gt; throw new InvalidOperationException (),
	};
}
`</Code>
    <Description>**Version Used**: 
3.2.0-beta4-19312-10

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>36606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>36606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>show progress in task center for solution crawler</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>36606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>right now, task center solution crawler progress uses an indeterministic progress bar. that makes it hard for users to know how much works are left in the queue.

change it so that it shows "m out of n" progress so that it is easier for users to know when BG work will finish.</Description>
  </Issue>
  <Issue>
    <IssueID>36604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Adjust the NullableAttribute type emitted by the compiler</Title>
    <CreatedDate>20/06/2019</CreatedDate>
    <ClosedDate>08/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The corefx API review process yielded some minor tweaks, even though the type won't be included in Core 3.

Here's the final API shape is documented [here]( Note that it uses `ReadOnlySpan` for the flags.</Description>
  </Issue>
  <Issue>
    <IssueID>36591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>36591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable analysis should learn from calls to well-known Equals methods</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>36591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From @jcouv:

Update the null-state at the end of an invocation of a recognized method


Comparison with null literal (or null constant): `object.Equals(x, null)`
- learn that `x` is null in when-true branch
- learn that `x` is not-null in when-false branch

Comparison with a not-null expression: `object.Equals(x, notNull)`
- learn that `x` is not-null in when-true branch
- for `object.Equals(x?.y, notNull)`, learn that x was not-null (the same as `x?.y == notNull`)

`object.Equals(x, maybeNull)`
- learn nothing about x

Open question: what are all the methods we recognize? So far:

- `Object.ReferenceEquals`
- `Object.Equals` 
- `IEqualityComparer&lt;T&gt;.Equals` 
- `EqualityComparer&lt;T&gt;.Equals` 
- `IEquatable&lt;T&gt;.Equals`


Also add some tests around user-defined `==` (we learn the same thing regardless of if it's builtin or user-defined)</Description>
  </Issue>
  <Issue>
    <IssueID>36590</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>36590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unify EnumerableExtensions Classes</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>28/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>


Same static class, different namespaces. We shouldn't have two of these.</Description>
  </Issue>
  <Issue>
    <IssueID>36589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected default formatting for multi-line switch expressions</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>36589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Type the following code (IDE will format it as follows):
``

Motivation - improved readability.</Description>
  </Issue>
  <Issue>
    <IssueID>36588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Usage of flow analysis attributes should warn outside of annotation context</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>36588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>36588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable disable
using System.Diagnostics.CodeAnalysis;

internal class C&lt;T&gt; where T : class
{
    // 'out T value' should warn, but doesn't
    public bool TryGetValue([MaybeNullWhen(false)] out T value)
    {
        value = default!;
        return false;
    }
}
`</Code>
    <Description>From [LDM notes on 15th May](

&gt; The attributes count as “nullable annotations” (with the exception of the Flow attributes that aren’t directly related to nullability) and yield a warning if applied where the annotation context is disabled.

The implementation doesn't appear to do this today.

``

</Description>
  </Issue>
  <Issue>
    <IssueID>36583</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Runtime Exception : Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36583</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used:**
3.1.0

 **Visual Studios Version Used  :** 
Visual Studios 2017 Community Version 15.9.13


**Steps to Reproduce:**

Create a .VSIX project using Visual Studios 2017 Community Version 15.9.13

Add Nuget References to following:
``

**Expected Behavior:**
The current Solution should be loaded in the VisualStudioWorkspace reference.

**Actual Behavior:**
System.InvalidCastException
  HResult=0x80004002
  Message=Unable to cast object of type 'Microsoft.VisualStudio.ComponentModelHost.ComponentModel' to type 'Microsoft.VisualStudio.ComponentModelHost.IComponentModel'.</Description>
  </Issue>
  <Issue>
    <IssueID>36570</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Analyzer classes cannot be created because assembly 'Microsoft.CodeAnalysis.Analyzers' is not found</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>36570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>36570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
The one shipped with VS2019 16.1.3

**Steps to Reproduce**:
I'm not sure how to reproduce this issue, but it is related to the analyzers that are used if you have a ASP.NET Core web project in your solution. Sometimes when I open my solution in Visual Studio the errors (see below) are there.
With VS2017 I could reproduce it quite easily even with a completely empty project (just created from the Web API template). See dotnet/roslyn-analyzers#2340 for details. But with VS2019 the error happens **far** less often, so I can't really test what exactly triggers it.

**Expected Behavior**:
No warnings should be shown in the error list of Visual Studio.

**Actual Behavior**:
The error list of Visual Studio shows these warnings:

Note: The first exception says that it searches for version 1.1.0.0 of the assembly Microsoft.CodeAnalysis.Analyzers. All other exceptions search for version 3.1.0.0.

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticDescriptorCreationAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.FixAnalyzers.CSharpFixerWithFixAllAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpRegisterActionAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpReportDiagnosticAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

`An instance of analyzer Microsoft.CodeAnalysis.CSharp.Analyzers.MetaAnalyzers.CSharpDiagnosticAnalyzerFieldsAnalyzer cannot be created from C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.codeanalysis.analyzers\1.1.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.Analyzers.dll: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden..`

3x the same exception:
`Analyzer 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception of type 'System.TypeInitializationException' with message 'The type initializer for 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception.'.
'System.TypeInitializationException: The type initializer for 'Microsoft.CodeAnalysis.CSharp.Analyzers.CSharpImmutableObjectMethodAnalyzer' threw an exception. ---&gt; System.IO.FileNotFoundException: Die Datei oder Assembly "Microsoft.CodeAnalysis.Analyzers, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" oder eine Abhängigkeit davon wurde nicht gefunden. Das System kann die angegebene Datei nicht finden.`

My initial report of this issue for VS2017: dotnet/roslyn-analyzers#2340
Maybe related: #32226</Description>
  </Issue>
  <Issue>
    <IssueID>36561</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>36561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[RPS] Additional Image loads as part of initializing the Csharp language service</Title>
    <CreatedDate>19/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[This ]( logic ends up importing all implementations of `ITableColumnDefinition` which is essentially the base interface for any component that has a table control (Test Explorer being one of them since 16.2). This causes unnecessary image loads on solution open/project creation. 

Filing this to track fixing this to be more specific to the column definitions that Roslyn needs.

Additional odities - I haven't seen this repro in IntPreview bits though(VisualStudio.16.IntPreview/16.2.0-pre.4.0+29017.117.d16.2stg) and this specific code has not changed.</Description>
  </Issue>
  <Issue>
    <IssueID>36553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow `#nullable` as a shorthand for `#nullable enable`</Title>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>17/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>36553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I expect `#nullable enable` will be the most common usage of `#nullable` directive, so it makes sense to give it a shorter form and nicer default.</Description>
  </Issue>
  <Issue>
    <IssueID>36546</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Backspace completion disappears if entire identifier is removed</Title>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>36546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.2 Preview 2

:link: 

**Steps to Reproduce**:

1. In a VB method, type `Console.W`
2. Press &lt;kbd&gt;Backspace&lt;/kbd&gt;

**Expected Behavior**:

Completion is visible, just as though the user just typed `.`.

**Actual Behavior**:

Completion disappears.
</Description>
  </Issue>
  <Issue>
    <IssueID>36544</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0040 warning </Title>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>36544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static partial class ContainerConfig
{}

static partial class ContainerConfig   //IDE0040
{ }
`</Code>
    <Description>Visual Studio 2019 16.2.0 Preview 2.0

IDE0040 warning generated on partial classes even if one of the partial class declarations have one.

Steps:
1. Create a partial class definition with an access modifier for the type.
2. Create a partial class definition for the same type without the modifier.

``

Expected Behavior:
This is debatable but the general rule of thumb (from my observation) for partials is to only specify the type (class/struct) and name of the partial class in all but one declaration. This reduces the likelihood of making a mistake that conflicts with one of the other declarations. The language will use whichever one has the access modifier and therefore, while it is not explicitly set on all the partial declarations, it is inferred from the partial declaration that has it.

Actual Behavior:
The partial declarations that don't have the modifier are flagged with a warning.
</Description>
  </Issue>
  <Issue>
    <IssueID>36532</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>36532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SourceEventSymbol.ComputeIsWindowsRuntimeEvent is improperly handling WinRT events implemented in derived interfaces</Title>
    <CreatedDate>18/06/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>36532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`` in that case is likely cause an unexpected behavior of the compiler.</Description>
  </Issue>
  <Issue>
    <IssueID>36520</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LocalsWindowUpdatesAfterLocalGetsItsTypeUpdatedDuringEnC</Title>
    <CreatedDate>17/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>36520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failed with

``


</Description>
  </Issue>
  <Issue>
    <IssueID>36401</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EnCWhileDebuggingFromImmediateWindow fails with focus error</Title>
    <CreatedDate>13/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>36401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>36401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.2.0 Preview 2.0

Starting with a recent update to the integration test machines, the `EnCWhileDebuggingFromImmediateWindow` test fails because focus is changed to the Output window instead of leaving it on the source document.</Description>
  </Issue>
  <Issue>
    <IssueID>36383</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Spaces in declaration statements</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNGiven the following in .editorconfig:csharp_space_around_declaration_statements = ignorecsharp_space_between_method_call_name_and_opening_parenthesis = falseIn VS2010 'csharp_space_around_declaration_statements = ignore'  only affected the accessibility, type, and name -- it did not affect the initializer if one was specified. (.editorconfig was not supported in VS2010, but I'm writing about the equivalent Text Editor option.)In VS2019 'csharp_space_around_declaration_statements = ignore' affects the whole statement - other spacing options (e.g. 'csharp_space_between_method_call_name_and_opening_parenthesis = false' are ignored)Attached before.png shows is the original input.Attached after.png shows that 'csharp_space_between_method_call_name_and_opening_parenthesis = false' is ignored in the declaration statements.Changing the meaning of 'csharp_space_around_declaration_statements = ignore' is probably not doable as it would break existing formatting, but in the UI (Options/Text Editor/C#/Code Style/Formatting/Spacing/Ignore spaces in declaration statements) it would be good to have a sub-option to specify that the spaces are not ignored in the initializer._This issue has been moved from VSTS ticketId: 916945__These are the original issue comments:_Visual Studio Feedback System on 6/12/2019, 00:02 AM (16 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>36381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Hit NRE in completion (GetDescriptionAsync)</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>16/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>36381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>36381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Version 16.2.0 Preview 2.0 [28930.63.d16.2stg]

**Steps to Reproduce**:

I don't have repro steps, just saw an NRE reported in goldbar with the following exception stack in activity log:

``</Description>
  </Issue>
  <Issue>
    <IssueID>36367</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Use coalesce expression" (IDE0029) generates incorrect code</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels />
  </Issue>
  <Issue>
    <IssueID>36355</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] Wrong naming rules are being enforced for static fields</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>36355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Works in 15.9, 16.1.2, regressed in 16.2.

**Steps to Reproduce**:

With this editor config: 

``</Description>
  </Issue>
  <Issue>
    <IssueID>36354</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Invalid 'for to foreach' refactoring</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>36354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        class Item { public string Value; }

        static void Test()
        {
            var first = new { list = new List&lt;Item&gt;() };
            var second = new { list = new List&lt;Item&gt;() };

            for (var i = 0; i &lt; first.list.Count; i++)
            {
                first.list[i].Value = second.list[i].Value;
            }
        }
`</Code>
    <Description>**Version Used**: 16.1.1

**Steps to Reproduce**:
``

**Expected Behavior**: No suggestions

**Actual Behavior**: Suggests to convert to foreach anyways


![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>36353</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Naming style rules are no longer being enforced or used</Title>
    <CreatedDate>12/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This works in 15.9 &amp; 16.1.2 and has regressed in Version 16.2.0 Preview 3.0 [29010.160.d16.2stg].

EditorConfig: 

Naming style rules (at least for fields) are no longer being enforced or used.

15.9/16.1.2:
![image](

16.2:
![image](

The warnings are 16.2 are the new ones telling me that they can be literals.</Description>
  </Issue>
  <Issue>
    <IssueID>36346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>36346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Parser can stack overflow when GetDirectives is called on a SyntaxNodeOrToken</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See 

While the compiler as a whole may not handle extremely deep trees, it seems reasonable to harden the public surface area of the parser.</Description>
  </Issue>
  <Issue>
    <IssueID>36330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Enable code actions to configure code style options and diagnostic severity from light bulb</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>36330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> adds support for new code actions to configure code style options and diagnostic severity from light bulb, but the code actions were disabled by  towards the end of the PR. Enabling these code actions is blocked on following items:

1. All the editorconfig features in compiler, project system and IDE layers are enabled by default. In absence of any of this hooks, the code action does not work as expected.
2.  leads to the generated severity entries by this code action not being respected by the compiler.

Once the above two have been resolved, we should revert the following commits from  which should enable the code actions and unskip relevant tests:
1. 
2. </Description>
  </Issue>
  <Issue>
    <IssueID>36327</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add editor format classifications for member declarations vs member usage</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>06/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>36327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>36327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When VS Mac switched from TextMate to Roslyn classification. One of the things that TextMate did was classify member/method declarations and usages/references differently.

#3976 was recently closed as fixed due to #31231, but this did not actually seem to implement support for the usage vs declaration classification. So while Roslyn does now have richer classification, it's still missing this this particular case which many users found useful in VS Mac.

See also  which was filed originally when VS Mac moved to Roslyn classification.</Description>
  </Issue>
  <Issue>
    <IssueID>36317</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2019 Disables Extension on Add Missing Usings</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36317</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36317</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36317</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNVisual Studio 2019 is crashes when I press &amp;quot;Ctrl + Space&amp;quot; and higlight &amp;quot;Add missing usings&amp;quot;.  This disables the feature from the context menu.  I was trying to added the missing using for  `DuplicateKeyException` from `System.Data.Linq.DuplicateKeyException```_This issue has been moved from VSTS ticketId: 838562__These are the original issue comments:_Visual Studio Feedback System on 4/4/2019, 00:38 AM (68 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Visual Studio Feedback System on 4/4/2019, 01:46 AM (68 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;sethg on 4/4/2019, 11:12 AM (67 days ago): Not that it changes the issue, but I did find that System.Data.Linq.DuplicateKeyException was not the actual exception I was looking for._These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36316</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>RenameTagProducerTests.RenamingEscapedIdentifiers Failed</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36316</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>36316</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failed during signed build [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>36315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Use pattern matching' doesn't recognize 'is object' as a non-null check</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
int Method(object obj) {
  var str = obj as string;
  if (str is object) {
    return 1;
  }

  return 0;
}


**Expected Behavior**:

A code fix is offered to use pattern matching:

csharp
int Method(object obj) {
  if (obj is string str) {
    return 1;
  }

  return 0;
}
`</Code>
    <Description>**Version Used**: 16.2 Preview 1

**Steps to Reproduce**:

``

**Actual Behavior**:

No code fix is offered.</Description>
  </Issue>
  <Issue>
    <IssueID>36313</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Fix name violation for private protected</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNProblem 1)Define interface named `abc` wit accessibility modifier `private protected`. There is no suggestion to fix name violation to `IAbc`. That's inconsistent because for `private`, `protected`, `public`, `internal` and `protected internal` there is suggestion for fix.Problem 2) Generate .editorconfig from settings. The following code is generated. I think that there should be also `private_protected` included.``_This issue has been moved from VSTS ticketId: 901099__These are the original issue comments:_Visual Studio Feedback System on 5/29/2019, 10:53 PM (12 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Can't change the severity of a dotnet_naming_style</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>36312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio v16.1.1
dotnet v 2.2.300

**Steps to Reproduce**:
Add this to the .editorconfig file:
dotnet_naming_style.private_field_style.capitalization = camel_case
dotnet_naming_style.private_field_style.required_prefix = _
dotnet_naming_style.private_field_style.severity = warning

**Expected Behavior**:
Private field name with no '_' at the beginning should trigger a warning,

**Actual Behavior**:
Private field name with no '_' at the beginning trigger an error,</Description>
  </Issue>
  <Issue>
    <IssueID>36310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>?. operator and await question (potential bug)</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels />
    <Code>csharp
using System;
using System.Threading.Tasks;

namespace ConsoleApp15
{
    public class Foo
    {
        public void Bar() { }
        public async Task Bar2() { await Task.Delay(0);  return; }
    }
    class Program
    {
        static async Task Main(string[] args)
        {
            Foo foo = null;
            foo?.Bar(); // Not throws
            await foo?.Bar2(); // Throws

            Console.WriteLine("Hello World!");
        }
    }
}
`</Code>
    <Description>Hi Guys!

Have a look at following sample:



``

Here when I call Bar I use ?. operator and expect method to not be called and it is not called and no exception thrown. Right on the next line I expect exactly the same behaviour but I do get NullReferenceException. Is that something expected? (If it is then I would say it looks very inconsistent)

VS 2019 16.1.1
C# Latest Minor

Thank you


</Description>
  </Issue>
  <Issue>
    <IssueID>36304</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash on right-click a analyse rule in Solution-Explorer</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>36304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Visual Studio crash when I right-click on a analyse rule in the solution explorer in a .NET Core 3.0 project. There is no additional information about the crash.

I have start Visual Studio with the `/Log` switch, but the log file contains no errors and no warnings and Visual Studio don't restart always.

Question: Is there another way to get a crash log from Visual Studio 2019?

I have noticed that the ruleset-window don't show the rule name of a changed rule and the rule-set window show only changed rules and not all rules. 

![2019-06-11 10_43_45-PowerCalculator](

**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.2.0 Preview 1.0
German language

**Steps to Reproduce**:
1. Start Visual Studio 2019 
2. Open a project with a AnlyseTools
3. Right-click on a rule in the Solution-Explorer

**Expected Behavior**:
* Don't crash on right-click a analyse rule in the Solution-Explorer and show the context menu for this rule

**Actual Behavior**:
* Crash on right-click a analyse rule in the Solution-Explorer

**Current workaround for me**
1. Start Visual Studio 2019 
2. Open a minimal project with a Anlysetools (.NET Standard 2.1)
3. Right-click on a rule in the Solution-Explorer (context menu is shown)
4. Open another project with Anlysetools (.NET Core 3.0)
5. Right-click on a rule in the Solution-Explorer (context menu is shown)
6. -&gt; works fine
</Description>
  </Issue>
  <Issue>
    <IssueID>36294</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>36294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS2019, C# : Cannot peek inside an active peek unless the current peek target is already opened as a proper file (applies only to non-std peek target symbols)</Title>
    <CreatedDate>11/06/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNSteps:1. Have different files with different custom types and methods.2. Close them all except one that uses types/methods from other files.3. Peek into any such custom type or method definition.4. Inside that peek window, only symbols from the standard library and symbols local to the target file (of the peek) are properly highlighted and you can peek at them.5. If you open the file of the target of (3), the peek window in (4) should have the proper highlighting and you can peek at them properly._This issue has been moved from VSTS ticketId: 814177__These are the original issue comments:_Visual Studio Feedback System on 3/7/2019, 08:11 PM (95 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Visual Studio Feedback System on 3/8/2019, 00:55 AM (94 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;Sara Shi [MSFT] on 3/12/2019, 02:47 AM (90 days ago): &lt;p&gt;Thank you for your feedback! I tried to repro the issue, &lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a console app, add Box.cs&lt;/li&gt;&lt;li&gt; add reference of Box.cs in Program.cs&lt;/li&gt;&lt;li&gt; set caret at Box, invoke 'peek Definition'&lt;/li&gt;&lt;li&gt;inside the peek window, set caret at symbols ,invoke 'peek definition'&lt;p&gt;&lt;img src=" Box.cs, we can invoke peek window.&lt;p&gt;&lt;img src=" you confirm if my steps are correct and what do you mean of step 4,5? Could you provide some more detailed description or screenshots follow the attached project &lt;a target='_blank' href=" to help us better understand this scenario? &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;Muhammad Nael [MSFT] on 3/12/2019, 06:22 AM (90 days ago): &lt;p&gt;Hi!&lt;/p&gt;&lt;p&gt;I modified the project and included it with 2 screenshots. If `Thing` in `Box` were a symbol from the .NET 'standard library' (I don't know what else to call it), it wouldn't have the same issue. The issue shows in the `Box.cs-closed` screenshot.&lt;/p&gt;&lt;p&gt;* Box.cs is not open. `Thing` is not highlighted and cannot be peeked into.&lt;/p&gt;&lt;p&gt;&lt;img src=" Box.cs is open and `Thing` is properly highlighted and reachable by peek in the peek into Box.cs from Program.cs.&lt;/p&gt;&lt;p&gt;&lt;img src="Visual Studio Feedback System on 3/12/2019, 09:35 PM (89 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;Visual Studio Feedback System on 4/10/2019, 03:03 AM (61 days ago): &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:   . In case you need answers to common questions or need assisted support, be sure to use   . We'll keep you posted on any updates to this feedback.&lt;/p&gt;Leon(Work) Yang on 6/4/2019, 01:35 PM (6 days ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;similar issue with Mouse Click got to definition, the peek view is not recursive , I guess it's same root cause.&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href="_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36282</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>36282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Build is working in VS 2019, but failing using VS 2017 / .NET CLI / Rider</Title>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>36282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNI'm aware what kind of compiler is used in VS 2019. We have a situation, where build is failing on VS 2017 / .NET CLI / Rider, but is working fine on VS 2019. I have prepared a simple solution for &amp;quot;easy to reproduce&amp;quot; problem.1. Download Test.7z2. Unpack3. Build using:a) VS 2019 - will workb) VS 2017 - will failc) Rider - will faild) .NET CLI (`dotnet build Test.sln`)- will failWith following errors:&amp;gt;Build FAILED.&amp;gt;Class1.cs(22,18): error CS0121: The call is ambiguous between the following methods or properties: 'AsyncResultExtensionsRightOperand.Ensure(Result, Func&amp;lt;Task&amp;lt;bool&amp;gt;&amp;gt;, string)' and 'ResultExtensions.Ensure(Result, Func&amp;lt;bool&amp;gt;, string)' [Test\ Test.csproj]&amp;gt;    0 Warning(s)&amp;gt;    1 Error(s)&amp;gt;Time Elapsed 00:00:01.08_This issue has been moved from VSTS ticketId: 911332__These are the original issue comments:_sygnowski.p on 6/7/2019, 05:29 AM (3 days ago): I've created a repository with example code in GitHub:   Jeff Schwartz [MSFT] on 6/7/2019, 03:36 PM (2 days ago): &lt;p&gt;Thank you &lt;a rel="user" href=" nodeid="165367"&gt;@sygnowski.p&lt;/a&gt; for the feedback and repro.  I have a few additional questions...  Are you seeing these all fail on the same machine or different machines?  What version of the SDK are you using?  (dotnet --list-sdks)&lt;/p&gt;&lt;p&gt;I gave your repro a try on 2.1.601 and the issue did not repro, but on 2.1.202 it did.  Have you tried updating to the latest 2.1, or 2.2 version?&lt;/p&gt;&lt;p&gt;Pawel Sygnowski on 6/7/2019, 11:28 PM (2 days ago): &lt;p&gt;I've tested it on two machines:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows 10 with following SDKs installed:&lt;br&gt;2.1.300&lt;br&gt;2.1.403&lt;br&gt;2.1.500&lt;br&gt;2.1.505&lt;br&gt;2.1.700&lt;br&gt;2.2.100&lt;/li&gt;&lt;li&gt;Mojave macOS with following SDKs installed:&lt;br&gt;1.0.0-preview2-1-003177&lt;br&gt;1.0.1&lt;br&gt;2.0.0&lt;br&gt;2.1.403&lt;br&gt;2.1.505&lt;br&gt;2.2.101&lt;br&gt;2.2.107&lt;/li&gt;&lt;/ul&gt;And the same issue is on both of them (also, I've asked few of my friends to build this and they have the same issue, but I don't know which SDK's they have on their machines).&lt;br&gt;&lt;br&gt;&lt;p&gt;As you suggest, I've installed the newest available .NET Core SDK - 2.2.300.&lt;/p&gt;&lt;p&gt;I've tested it again using the newest SDK and the results are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;VS 2019 16.1.2 - build is working fine&lt;/li&gt;&lt;li&gt;Rider 2019.1.2 - build is working fine&lt;/li&gt;&lt;li&gt;.NET CLI - build is working fine&lt;/li&gt;&lt;li&gt;VS 2017 15.9.12 - build is still not working, with the same issue as above&lt;/li&gt;&lt;/ul&gt;Visual Studio Feedback System on 6/9/2019, 08:19 PM (17 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Jeff Schwartz [MSFT] on 6/10/2019, 09:01 AM (4 hours ago): &lt;p&gt;&lt;a rel="user" href=" nodeid="165386"&gt;@Pawel Sygnowski&lt;/a&gt; thank you for all the details.  I am glad to hear the latest SDK is working in all but VS 2017.  This question may be better answered on   I am going to also move it to my colleague on the SDK team.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36276</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>36276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent handling of `dynamic` generic type constraint when overriding is involved.</Title>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>14/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
#nullable enable
class TestDynamic1&lt;T&gt;
{
    public virtual void M&lt;S&gt;() where S : T
    {
    }
}

class TestDynamic2 : TestDynamic1&lt;dynamic&gt;
{
    public override void M&lt;S&gt;()
    {
    }

    void Test()
    {
        base.M&lt;object?&gt;();
        this.M&lt;object?&gt;();
    }
}


Observed:

.cs(17,9): warning CS8631: The type 'object?' cannot be used as type parameter 'S' in the generic type or method 'TestDynamic1&lt;dynamic&gt;.M&lt;S&gt;()'. Nullability of type argument 'object?' doesn't match constraint type 'dynamic'.


Expected to get an additional similar warning for the this.M&lt;object?&gt;() method TestDynamic2.M&lt;S&gt;(). Both methods have the same signatures and constraints.

I think this is caused by the fact that 

        public static TypeParameterBounds ResolveBounds(
            this TypeParameterSymbol typeParameter,
            AssemblySymbol corLibrary,
            ConsList&lt;TypeParameterSymbol&gt; inProgress,
            ImmutableArray&lt;TypeWithAnnotations&gt; constraintTypes,
            bool inherited,
            CSharpCompilation currentCompilation,
            ArrayBuilder&lt;TypeParameterDiagnosticInfo&gt; diagnosticsBuilder,
            ref ArrayBuilder&lt;TypeParameterDiagnosticInfo&gt; useSiteDiagnosticsBuilder)
`</Code>
    <Description>``
in ConstraintsHelper filters out `dynamic` constraint. That method shouldn't filter out any constraints. The `dynamic` constraint should be filtered out or converted to `object` in the same places where we decide if `object` constraint should be filtered out or not.</Description>
  </Issue>
  <Issue>
    <IssueID>36274</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>36274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Provide API for IAssemblySymbol to retrieve type forwards</Title>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>19/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>36274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There's already an internal API on PEModuleSymbol, GetForwardedTypes, but I don't think it's ready to be made public. We should actually do some design work to figure out how we want this API to behave.</Description>
  </Issue>
  <Issue>
    <IssueID>36270</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No warnings for a loop with byte indexer and Int32 condition.</Title>
    <CreatedDate>10/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
class P 
{
    static void Main()
    {
        int[] test = new int[300];
        for (byte i = 0; i &lt; test.Length; i++)
            Console.WriteLine(i);
    }
}

**Expected Behavior**:
a warning e.g.: 

test.Length is int and can be outside the range of type 'byte'


**Actual Behavior**:
No warnings generated. The loop is endless.


However, the following code does generate a warrning:
csharp
for (byte i = 0; i &lt; 300; i++) {}


warning CS0652: Comparison to integral constant is useless; 
the constant is outside the range of type 'byte'
`</Code>
    <Description>**Version Used**: 
3.100.19.26603 (9d80dea7).
Also tried on "master" at [sharplab.io](

**Steps to Reproduce**:
1. Compile the following code:
``

Sorry if there is already an issue for this but I couldn't find any.</Description>
  </Issue>
  <Issue>
    <IssueID>36260</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>System.MissingMethodException </Title>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>10/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>36260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>36260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello,

I have a small problem. I am using ROSLYN compiler and tried to invoke RoslynTest.ComputeClass.Compute method, but I got run-time error "System.MissingMethodException: 'Method RoslynTest.ComputeClass.Compute was not found.' The method is in short code in variable g_code in RoslynTest.RoslynInterface.InitCompiler and complette source code in MS VS 2019 is here:



and also in in text below. The problem is caused thanks to array-type variable passing to method in 

InvokeCode(ref MyData[,] t_array )

if simple variable e.g. Int32 A is used instead of "MyData[,] t_array" no "MissingMethodException" arose.

Can someone help me where is problem ?

Problem describtion is also here:


Many thanks

Jerry 


</Description>
  </Issue>
  <Issue>
    <IssueID>36259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No associated IFieldSymbol is provided for a field-like event</Title>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>36259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class Foo
{
    public int X { get; }

    private event EventHandler Y;
}
`</Code>
    <Description>If you create a compilation with the following syntax:

``

And you get the ITypeSymbol for the type declaration from the symbolic model, it contains an IFieldSymbol representing the backing field for the property but none for the backing field of the event:

![](

Why is an associated IFieldSymbol surfaced for an autoprop but not an auto event?
Is there any chance that an associated IFieldSymbol might not be surfaced for an autoprop in some circumstances if I got the containing ITypeSymbol from a TypeDeclarationSyntax? 

@CyrusNajmabadi reproduced this and asked me to file since this doesn't seem right to him.



</Description>
  </Issue>
  <Issue>
    <IssueID>36258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Finalizer constructor</Title>
    <CreatedDate>08/06/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>36258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;With the code below the TestClass finaliser is called despite the fact that the constructor is never called. This happens with -toolsversion:4.0 but not for 3.5 or 2.0.&lt;/p&gt; &lt;p&gt;FinaliserBug.cs:&lt;/p&gt; &lt;pre&gt;namespace FinaliserBug{    class TestClass    {        public TestClass(string arg) { System.Console.WriteLine(&amp;quot;constructor&amp;quot;); }        ~TestClass() { System.Console.WriteLine(&amp;quot; finaliser &amp;quot;); }    }class Program    {        static void Main(string[] args)        {            System.Console.WriteLine(&amp;quot;begin&amp;quot;);            try            {                new TestClass(args[args. Length]);                System.Console.WriteLine(&amp;quot;constructed&amp;quot;);            }            catch            {                System.Console.WriteLine(&amp;quot;bang!&amp;quot;);            }            System.Console.WriteLine(&amp;quot;end&amp;quot;);        }    }}&lt;/pre&gt;&lt;p&gt;FinaliserBug.msbuild:&lt;/p&gt;&lt;pre&gt;&amp;lt;Project xmlns=&amp;quot;  &amp;lt;ItemGroup&amp;gt;    &amp;lt;Compile Include=&amp;quot;FinaliserBug.cs&amp;quot; /&amp;gt;  &amp;lt;/ItemGroup&amp;gt;  &amp;lt;Target Name=&amp;quot;Build&amp;quot;&amp;gt;    &amp;lt;Csc Sources=&amp;quot;@(Compile)&amp;quot;/&amp;gt;    &amp;lt;/Target&amp;gt;&amp;lt;/Project&amp;gt;&lt;/pre&gt;&lt;p&gt;Build:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;c:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild -toolsversion:4.0 FinaliserBug.msbuildMicrosoft (R) Build Engine version 4.7.3190.0[Microsoft .NET Framework, version 4.0.30319.42000]Copyright (C) Microsoft Corporation. All rights reserved.Build started 18/05/2019 12:48:13 PM.Project &amp;quot;C:\Temp\FinaliserBug\FinaliserBug.msbuild&amp;quot; on node 1 (default targets).Build:  C:\Windows\Microsoft.NET\Framework\v4.0.30319\Csc.exe /out:FinaliserBug.exe FinaliserBug.csDone Building Project &amp;quot;C:\Temp\FinaliserBug\FinaliserBug.msbuild&amp;quot; (default targets).Build succeeded.    0 Warning(s)    0 Error(s)Time Elapsed 00:00:01.16&lt;/pre&gt;&lt;p&gt;Actual output:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;FinaliserBug.exebeginbang!end finaliser &lt;/pre&gt;&lt;p&gt;Expected output:&lt;/p&gt;&lt;pre&gt;C:\Temp\FinaliserBug&amp;gt;FinaliserBug.exebeginbang!end&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 895482__These are the original issue comments:_Sascha Sanches on 5/18/2019, 01:30 AM (20 days ago): &lt;p&gt;Hi,&lt;/p&gt;&lt;p&gt;the argument args[args.Length] will cause an exception. The index is one too large: indexing the array is normally from 0 to .Length - 1 inclusive.&lt;/p&gt;Visual Studio Feedback System on 5/19/2019, 07:21 PM (19 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>36241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing possible dereference of null reference warning for range / index from end access to nullable strings</Title>
    <CreatedDate>07/06/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>36241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Branch master (22 May 2019)
Latest commit 04252e by Neal Gafter:
Unskip passing tests. (#35856)

Fixes #35611


**Steps to Reproduce**:

Compile and run the following code:
cs
#nullable enable
class C
{
  static void Main()
  {
    M1(null);
    M2(null);
  }

  static void M1(string? s)
  {
    _ = s[^1];
  }
  
  static void M2(string? s)
  {
    _ = s[1..10];
  }
}
`</Code>
    <Description>**Version Used**: 

``



**Expected Behavior**:
Warnings for possible dereference of a null reference for both `s[^1]` and `s[1..10]` since they access the string without checking it for null via `.Length` and `.Substring` respectively.

**Actual Behavior**:
No warnings. Both expressions crash with a `NullReferenceException` at runtime.</Description>
  </Issue>
  <Issue>
    <IssueID>36218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Definite assignment not detected in conditional access</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class C
{
    static void M1(C c)
    {
        string s1;
        if (c?.M(out s1) == true)
        {
            Console.WriteLine(s1); // error CS0165: Use of unassigned local variable 's1'
        }
    }
    
    bool M(out string s) { s = ""; return true; }
}


Compare to this similar program which does detect a definite assignment.
cs
public class C
{
    static void M2(C c)
    {
        string s2;
        if (c != null &amp;&amp; c.M(out s2))
        {
            Console.WriteLine(s2); // OK
        }
    }
    
    bool M(out string s) { s = ""; return true; }
}
`</Code>
    <Description>The following sample program produces an error, even though we might expect that within the "then" block an assignment is known to have occurred.

``</Description>
  </Issue>
  <Issue>
    <IssueID>36215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Fix diagnostic suppressor feature for compiler warnings in presence of /warnaserror</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>36215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Tracks the work reverted from  as par of 

Following unit tests should be unskipped as part of this work:
1. C#:  `TestSuppression_CompilerParserWarningAsError`
2. VB: `TestSuppression_CompilerWarningAsError`</Description>
  </Issue>
  <Issue>
    <IssueID>36214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>New class templates should have using directives inside the namespace</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>13/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>36214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNMany people use ReSharper or StyleCop. Those have a rule enabled by default that the using directives should be inside the namespace declaration. It has been widely debated why that rule is recommended so it should be default for new classes in Visual Studio._This issue has been moved from VSTS ticketId: 904651__These are the original issue comments:_Jane Wu [MSFT] on 6/4/2019, 03:39 AM (2 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>36210</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Query code for occurance of X (Roslyn)</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>17/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>36210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>36210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNIn our company (like so many others) we have issues with DateTime.. What i'd like to do, is to find EVERY occurance where DateTime is converted to or from string. eg: - Every Implicit Cast- Every Explicit Cast- Every ParseI imagine that Roslyn could locate all of these occurances for me ?I'm not sure how the query language or function should be made, but it would be of great help._This issue has been moved from VSTS ticketId: 897603__These are the original issue comments:_Jane Wu [MSFT] on 5/24/2019, 03:43 AM (13 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>36209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>36209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Information about referenced symbols is not complete even when RegisterCompilationAction</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>07/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>36209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>36209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>36209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public interface IFoo
{ 
    void Foo([SomeAttribute] string str); 
}
 
2. Create assembly Assembly2, reference Assembly1 and create an implementation of interface 
csharp
 public class Program : IFoo
 {
    public void Foo(string str)
    {
        Console.Out.WriteLine(s); 
    }
}

3. Now create minimal analyzer, that should check this code:
csharp
        public override void Initialize(AnalysisContext context)
        {
            context.RegisterCodeBlockAction(CodeBlockAction);
        }

        private static void CodeBlockAction(CodeBlockAnalysisContext codeBlockContext)
        {
            if (codeBlockContext.OwningSymbol?.Kind != SymbolKind.Method)
            {
                return;
            }

            if (!(codeBlockContext.OwningSymbol is IMethodSymbol methodSymbol) || methodSymbol.IsAbstract)
            {
                return;
            }

            var allAttributes = methodSymbol.ContainingType.Interfaces
                .SelectMany(i =&gt; i.GetMembers(methodSymbol.Name).OfType&lt;IMethodSymbol&gt;())
                .SelectMany(d =&gt; d.Parameters)
                .SelectMany(p =&gt; p.GetAttributes())
                .Select(a =&gt; a.AttributeClass)
                .ToArray();

            if (allAttributes.Length &gt; 0)
            {
                var diagnostic = Diagnostic.Create(_someDescription, codeBlockContext.CodeBlock.GetLocation());
                codeBlockContext.ReportDiagnostic(diagnostic);
            }
      }
`</Code>
    <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:

1. Create assembly Assembly1, declare an interface 
``
**Expected Behavior**:
Building produces warning.
**Actual Behavior**:
No warning shown in build log
**More information**:
Actualy visual studio will show the warning when you open document, because analyzer will be triggered one more time, and at this moment all correct information is provided.
Also I got the same result with RegisterSemanticModelAction and RegisterCompilationAction. I think that's incorect behavior, when it's imposible to get information about referenced symbols even with RegisterCompilationAction.
A bit more information [here](</Description>
  </Issue>
  <Issue>
    <IssueID>36204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>36204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[loc][Query][Roslyn] Localizability of the "cmdidCSharpOrganizeSortUsings"</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>36204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>36204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
SortUsings

ID:
0; "cmdidCSharpOrganizeSortUsings"

File Name:
VisualStudio\Core\Def\xlf\Commands.vsct.xlf

==========================================
Query:
Please confirm if this string can be translated</Description>
  </Issue>
  <Issue>
    <IssueID>36203</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Useless overload resolution error when using static class as generic type argument</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>36203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>36203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.IO;

public class Serializer
{
    public static object Deserialize&lt;T&gt;(Stream s) =&gt; throw null;
    public static object Deserialize&lt;T&gt;(TextReader tr) =&gt; throw null;
}

public static class IShouldNotBeUsed { }

public class Victim
{
    public object Foo(Stream s)
    {
     	return Serializer.Deserialize&lt;IShouldNotBeUsed&gt;(s);
    }
    
    public object Bar(TextReader tr)
    {
     	return Serializer.Deserialize&lt;IShouldNotBeUsed&gt;(tr);
    }
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 2019 Enterprise v16.1

**Steps to Reproduce**:

Try and compile this code:

``

**Expected Behavior**:

An error message warning that I am trying to use a static class as a generic type argument.

**Actual Behavior**:

error CS1503: Argument 1: cannot convert from 'System.IO.Stream' to 'System.IO.TextReader'
error CS1503: Argument 1: cannot convert from 'System.IO.TextReader' to 'System.IO.Stream'

**Notes**:

If I assign the result of `Deserialize&lt;&gt;` to a local variable, instead of returning it, I get [CS0723](

Sharplab playground [here](</Description>
  </Issue>
  <Issue>
    <IssueID>36201</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Problem with C# lambda expression auto-formatting</Title>
    <CreatedDate>06/06/2019</CreatedDate>
    <ClosedDate>06/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    static Action action(() =&gt;
    {
        doThings();
    });

At least that's how I meant it. I had typed it like this:
csharp
    static Action action( () =&gt; // with a space right here
    {
        doThings();
    });

When I deleted and retyped the semicolon at the end to auto format it, this happened:
csharp
    static Action action(() =&gt;
   {
       doThings();
   });
`</Code>
    <Description>VSF_TYPE_MARKDOWNI'm writing a C# lambda expression somewhat like this:

``
It shifts all of the text over by as many spaces as there are between the two `(`s, I tested it. This wasn't a difficult bug to deal with, but I thought I'd report it, because I'm fairly sure this is unintended.

Thanks to whoever read through this.

_This issue has been moved from 
VSTS ticketId: 909893_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>36191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>QuickInfo should display null-state and declared type</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>27/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>36191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>36191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>36187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>36187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Odd IntelliSense Behavior with Overloaded Methods</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>36187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>36187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNWhen you type the following code:``And now if you type `(`, you get no suggestions. Notice that the first overloaded method that shows up is still the one with the `A` parameter, and not the `string` one.See this picture: Pressin the default `Ctrl+Space` does not help either.**Expected behavior:** When the `Get(A a)` method is selected as the current overload, pressing `Ctrl+Space` should suggest to complete that given parameter._This issue has been moved from VSTS ticketId: 892502__These are the original issue comments:_Visual Studio Feedback System on 5/14/2019, 09:42 PM (21 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Vatsalya Agrawal [MSFT] on 5/15/2019, 00:11 PM (21 days ago): &lt;p&gt;Thank you for providing feedback, and we're sorry to hear it's not behaving as you expect. Based on your description so far, we were unable to reproduce the issue. Pressing Ctrl + Space seems to be suggesting the right parameter. If possible please provide a sample project where this issue is occurring.&lt;/p&gt;matej.zajacik on 5/15/2019, 00:33 PM (21 days ago): &lt;strong&gt;(private comment)&lt;/strong&gt;&lt;p&gt;Thank you for the reply!&lt;/p&gt;&lt;p&gt;When the declaration order is `Get(A a)` and then `Get(string a)`, everything works okay. Right after typing `(`, it does the expected thing, that is suggesting the enum `A` (the first picture). But when the order is `Get(string a)` and then `Get(A a)`, I get no suggestion at all (the second picture). When I press `Ctrl+Space`, it suggests to use the `ToString()` method:&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href=" project: &lt;a target='_blank' href="_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>36185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>36185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect semantic model type information for converted tuple literal</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>36185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>36185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact]
        [WorkItem(36185, "https://github.com/dotnet/roslyn/issues/36185")]
        public void GetTypeInfo_03()
        {
            var source = @"
class C
{
    static void Main()
    {
        M((1, ""hello""));
        M((2, null));
    }
    public static void M((short, string) x) { }
}
" + trivial2uple + trivial3uple + tupleattributes_cs;

            var tree = Parse(source, options: TestOptions.Regular);
            var comp = CreateCompilation(tree);
            comp.VerifyDiagnostics();

            var model = comp.GetSemanticModel(tree, ignoreAccessibility: false);
            var nodes = tree.GetCompilationUnitRoot().DescendantNodes();

            var n1 = nodes.OfType&lt;TupleExpressionSyntax&gt;().ElementAt(0);

            Assert.Equal(@"(1, ""hello"")", n1.ToString());
            Assert.Equal("(System.Int32, System.String)", model.GetTypeInfo(n1).Type.ToTestDisplayString());
            Assert.Equal("(System.Int16, System.String)", model.GetTypeInfo(n1).ConvertedType.ToTestDisplayString());
            Assert.Equal(ConversionKind.ImplicitTupleLiteral, model.GetConversion(n1).Kind);

            var n2 = nodes.OfType&lt;TupleExpressionSyntax&gt;().ElementAt(1);

            Assert.Equal(@"(2, null)", n2.ToString());
            Assert.Null(model.GetTypeInfo(n2).Type);
            Assert.Equal("(System.Int16, System.String)", model.GetTypeInfo(n2).ConvertedType.ToTestDisplayString());
            Assert.Equal(ConversionKind.ImplicitTupleLiteral, model.GetConversion(n2).Kind);
        }
`</Code>
    <Description>The following proposed test fails where marked:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>36181</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>36181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing compilation error CS0165 with unassigned ImmutableArray</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>36181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 + 2019, .NET Core 2.1 + Framework 4.7.2 tested

**Steps to Reproduce**:

1. Create C# Console project with  System.Collections.Immutable 1.5.0 nugget package
2. 
``

**Actual Behavior**:
No error is shown and behavior during runtime can be unexpected

The following file shows another sample using a function
[SampleBug.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>36178</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing intellisense error and weird diagnostic when indexing ReadOnlyMemory&lt;T&gt;</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>11/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Range</Name>
        <IssueID>36178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C
{
    public void M()
    {
        System.ReadOnlyMemory&lt;int&gt; a = default;
        var b = a[0];
    }
}
`</Code>
    <Description>**Version Used**: 
16.1.1, netcoreapp2.2, LangVersion=latest

**Steps to Reproduce**:

``

**Expected Behavior**:
There should be an IntelliSense diagnostic and a compiler diagnostic that `ReadOnlyMemory&lt;T&gt;` doesn't have an indexer.

**Actual Behavior**:
There's no IntelliSense error, b is typed as `ReadOnlyMemory&lt;int&gt;`. When compiling, there's  diagnostic `CS0656: Missing compiler required member 'System.Range.get_Start'`.

It looks like some C# 8 features are leaking.
</Description>
  </Issue>
  <Issue>
    <IssueID>36175</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'CS8629: Nullable value type may be null' reported when it can not be null after HasValue</Title>
    <CreatedDate>05/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This occurs with C# 8

``
I think the last test is simple enough that it should not generate a warning

</Description>
  </Issue>
  <Issue>
    <IssueID>36149</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Support null checking with property in Nullable Reference Type analysis</Title>
    <CreatedDate>04/06/2019</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Foo
{
    public TaskCompletionSource&lt;bool&gt;? _completionSource;

    public bool IsStopped =&gt; !(_completionSource is null);
    // or
    public bool IsStopped =&gt; _completionSource != null;

    public void Bar()
    {
        if (IsStopped)
        {
            // Possible dereference
            _completionSource.SetResult(true);
        }

        if (!(_completionSource is null))
        {
            // This is fine
            _completionSource.SetResult(true);
        }
    }
}
`</Code>
    <Description>``

I know I can stick a dammit operator in there, was just wondering if there are plans to support such null checks in analysis.</Description>
  </Issue>
  <Issue>
    <IssueID>36140</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>36140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Change C# 8 to be the default, non-experimental language version</Title>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>36140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>36140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>36140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This change can be made as soon as we fork off the last branch for a 16.2 release from master.</Description>
  </Issue>
  <Issue>
    <IssueID>36133</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code style:  built-in types rule trumps apparent type rule, when type is not apparent</Title>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>04/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning

2.  Open this file:

using System.Collections.Generic;
using System.Reflection;

class A
{
    internal Dictionary&lt;string, int&gt; B { get; }
}

class C
{
    private void D(A a, PropertyInfo e)
    {
        /*1*/ var f = false;

        foreach (/*2*/ var g in a.B.Keys)
        {
        }

        /*3*/ var h = e.GetValue(this);
    }
}
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.2.0 Preview 3.0 [29002.38.d16.2stg]
VisualStudio.16.IntPreview/16.2.0-pre.3.0+29002.38.d16.2stg
Microsoft .NET Framework
Version 4.8.03752

Installed Version: Enterprise

Visual C++ 2019   00435-60000-00000-AA784
Microsoft Visual C++ 2019

Application Insights Tools for Visual Studio Package   9.1.00429.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2019   16.2.154.3618
ASP.NET and Web Tools 2019

ASP.NET Web Frameworks and Tools 2019   16.2.154.3618
For additional information, visit 

Azure App Service Tools v3.0.0   16.2.154.3618
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   16.2.154.3618
Azure Functions and Web Jobs Tools

C# Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

GitHub.VisualStudio   2.9.1.7781
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20419.2

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

NuGet Package Manager   5.2.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit 

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

Snapshot Debugging Extension   1.0
Snapshot Debugging Visual Studio Extension Detailed Info

SQL Server Data Tools   16.0.61905.20080
Microsoft SQL Server Data Tools

Test Adapter for Boost.Test   1.0
Enables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.

Test Adapter for Google Test   1.0
Enables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.

TypeScript Tools   16.0.10529.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   3.2.0-beta2-19277-03+50ce8972ca70993faaa7c130a19cfd174452ee68
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.4 for F# 4.6   16.2.0-beta.19277.5+42c125e3cbb5cb06256a413c4e742199fb0df1f3
Microsoft Visual F# Tools 10.4 for F# 4.6

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for CMake   1.0
Visual Studio Tools for CMake

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers

**Steps to Reproduce**:

1.  Use these .editorconfig rules:
``

**Expected Behavior**:
`csharp_style_var_when_type_is_apparent` will trump the `csharp_style_var_for_built_in_types` rule.
* /\*1\*/ will not warn, because the type is apparent.
* /\*2\*/ and /\*3\*/ will warn because the types are not apparent.

Irrespective of whether or not a type is built in, the goal is to encourage use of `var` when the type is apparent but encourage use of the explicit type when the type is not apparent.

**Actual Behavior**:
The `csharp_style_var_for_built_in_types` rule trumps the `csharp_style_var_when_type_is_apparent` rule.

No warnings are generated.</Description>
  </Issue>
  <Issue>
    <IssueID>36131</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>36131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make nullable analysis pay-for-play</Title>
    <CreatedDate>03/06/2019</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>36131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>36131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>One proposal is that we would not run nullability flow analysis on a compilation which has no opt-in (such as `-nullable:enable` or `#nullable enable`). We may do something more granular.

Note that `#nullable restore` would not count (as it is used in generated code.

Also note that this affects analyzers, so this decision will have to be communicated (the compiler can return `NotComputed` in such cases). We may add another mechanism for users to opt-in (for example a feature flag set by an IDE checkbox).

We should queue that work up right after attribute work (</Description>
  </Issue>
  <Issue>
    <IssueID>36122</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>36122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Apparent C# 8 bug in Range implementation</Title>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>12/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>36122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>36122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static T[] FromStart&lt;T&gt;(this T[] Source, int Count, int Offset = 0)
        {
            return Source[(Offset)..(Offset + Count)];
        }



**Expected Behavior**:

Compiler treats this the same as:

cs
        public static T[] FromStart&lt;T&gt;(this T[] Source, int Count, int Offset = 0)
        {
            return Source[Offset..(Offset + Count)];
        }
`</Code>
    <Description>**C# 8 beta - Visual Studio 16.1.1**: 



**Steps to Reproduce**:

``

**Actual Behavior**:

Complains and issues CS0118.
</Description>
  </Issue>
  <Issue>
    <IssueID>36117</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"if statement can be simplified" does not respect preprocessor</Title>
    <CreatedDate>02/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
private static int Main()
{
    bool check = true/*of course, some actual calculation would be done here*/;
#if DEBUG
    if (check)
        return 3;
#endif
    return 2;
}

This code has the requirements of returning 3 in DEBUG builds if `check` is `true`, otherwise 2. In non-DEBUG builds, it always returns 2.

**Expected Behavior**:
The if statement cannot be simplified due to the constraints put on it by the preprocessor `#if DEBUG`.

**Actual Behavior**:
However, VS suggests **IDE0046: 'if' statement can be simplified** to create the following:
cs
private static int Main()
{
    bool check = true;
#if DEBUG
    return check ? 3 : 2;

#endif
}
`</Code>
    <Description>**Version Used**: 
VS 2019 16.1.1 (cannot test in Beta at the moment as it broke compiling my main project :( ).

**Steps to Reproduce**:
1. Create sample C# project with the following Main method:
``
This breaks the logic of any non-DEBUG build as the return is completely gone from them (it would even break compilation for normal methods requiring a return). The above requirements are not met anymore.</Description>
  </Issue>
  <Issue>
    <IssueID>36111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>FAR crashes ServiceHub.RoslynCodeAnalysisService32.exe</Title>
    <CreatedDate>01/06/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>36111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>36111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: eb082c8f9afb24b196d634adc3844de72af65259

**Steps to Reproduce**: Link to internal repo available upon request

**Expected Behavior**: FAR terminates

**Actual Behavior**: Gold bar indicates external process has crashed and FAR progress indicator loops forever

``
</Description>
  </Issue>
  <Issue>
    <IssueID>35690</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>35690</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Different .editorconfig severity strings are used to specify IDE code style options and dotnet_diagnostic.severity</Title>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35690</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35690</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[*.cs]

# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = warn

# IDE0059: Unnecessary assignment of a value
csharp_style_unused_value_assignment_preference = discard_variable:warning


Compiler generates the following diagnostic if term `warning` is used for `dotnet_diagnostic.CA1822.severity`

CSC : warning InvalidSeverityInAnalyzerConfig: The diagnostic 'ca1822' was given an invalid severity 'warning' in the analyzer config file
`</Code>
    <Description>**Version Used**: 
Latest master source

I found out we use different editorconfig strings for severities specified through our code style options and the ones that the compiler looks for:

| DiagnosticSeverity | IDE Code style term | Compiler dotnet_diagnostic.severity term |
| ------- | ------- | ------- |
| Error | "error" | "error" |
| Warning | "warning" | "warn" |
| Info | "suggestion" | "info" |
| Hidden | "silent" or "refactoring" | "hidden" |
| Suppress | "none" | "suppress" |

So, user needs to use different terms for specifying severies, which seems very confusing:
``

**IDE code style:**
Documentation: 
Implementation: 

**Compiler:**


I believe the compiler terms should be switched to follow the [already shipped terminology]( or at least the compiler should allow the terms from both columns in the table above

</Description>
  </Issue>
  <Issue>
    <IssueID>35688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>35688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS2019 intellisense completes with bad quality results</Title>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019

Maybe my mind is playing tricks on me, but since I updated to VS 2019 I feel like I'm fighting a lot against Intellisense.

Specifically: I would very quickly type the beginning of what I'm intending to write, hit complete (tab, space, enter -- depends on the situation)... and not get the expected (best) result.
So I have to backspace, start again (slowly), get the "right" completion and move on.

This was not the case in VS2017, I could write code quickly, completing everything along the way.

Because writing code is the "core loop" of coder, having to stop and backspace because of bad Intellisense is *very irksome and a major frustration after my upgrade*.

I may be completely off, but I have a suspicion / theory about what has changed:

My guess is that new Intellisense is completely async and I am getting its best suggestion at the time I hit "complete". So when typing `int&lt;tab&gt;` I think I might get the completion for `in` if Intellisense has not finished filtering and sorting the `int` prefix.

I love the improved "snapiness" of VS 2019, but if I'm correct about Intellisense it should wait for the full suggestions to complete before completing text in editor.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35688</IssueID>
        <PullRequestID>35837</PullRequestID>
        <Title>Set non-blocking mode per textView</Title>
        <Description>Since 16.1, the Editor support blocking/non-blocking mode per textView. This fixes a situation when users turned the _non-blocking_ option ON for TypeScript/F# and could never turned it OFF.

There still can happen mixed scenarios with TypeScript and C# in the same file. However, the right fix for them would be to send the value to the Editor not via the option but as a result.</Description>
        <CreatedDate>21/05/2019</CreatedDate>
        <ClosedDate>23/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35688</IssueID>
            <PullRequestID>35837</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35684</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>35684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should `static bool IsDefault&lt;T&gt;(T xx = default) =&gt; xx == default;` compile?</Title>
    <CreatedDate>13/05/2019</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>35684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>35684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
sharplab.io(master/2.9.0)

**Steps to Reproduce**:


**Expected Behavior**:

`xx == default` should be the same as `xx == default(T)`, and can't compile.

**Actual Behavior**:
`xx == default` is compile as `xx == null` without warns, and so `default(T) == default` is always false for struct.</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>35670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>35670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>PublicAPI checker crashing.</Title>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm running into this in the  PR.

When i make a public API change and attempt to add the item to the the unshipped.txt file i run into: 

``

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35670</IssueID>
        <PullRequestID>32999</PullRequestID>
        <Title>Simplify representation of AttributeLists/Modifiers on all MemberDecls.</Title>
        <Description>The current (i.e. prior to this PR) way of representing attributes/modifiers is to specify which nodes they can go on in an adhoc manner.  Some member decls specify they take attributes+modifiers, some only attributes, and some take none at all.  While this is accurate as per the grammar, it makes for some ungainly APIs and complex use cases.

For example, our parser detects if you write attributes/modifiers for a namespace, but then has no place to put it.  Similarly, lots of code in later layers has to write specialized code to get at modifiers/attributelists.

--

This PR attempts to simplify things (taking a page from TypeScript).  After this PR, we simply define all member decls as being able to have attributes/modifiers.  This means that if we run into attributes/modifiers that aren't grammatically legal, we still have a place to put them.  And, later layers can more easily get/change/add these properties easily.

--

This also ties into the goal of pulling errors out of hte parser, since they affect incremental parsing, as well as making it more difficult for later phases to understand what is going on.

--

Todo:
- [x] tests.</Description>
        <CreatedDate>31/01/2019</CreatedDate>
        <ClosedDate>08/06/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35670</IssueID>
            <PullRequestID>32999</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35670</IssueID>
            <PullRequestID>32999</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>32999</PullRequestID>
            <IssueID>35670</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35670</IssueID>
        <PullRequestID>35300</PullRequestID>
        <Title>Fix applying code actions that change AdditionalDocuments</Title>
        <Description>Some code was accidentally calling GetDocument with an additional document ID; this didn't end well.</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>28/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35670</IssueID>
            <PullRequestID>35300</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35670</IssueID>
            <PullRequestID>35300</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35300</PullRequestID>
            <IssueID>35670</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35668</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>35668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullability analysis not flowing through switches</Title>
    <CreatedDate>12/05/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

#nullable enable

public class Person {
    public string? Name { get;}
}
public class C {
    public void M(Person p) {
        switch (p) {
            case { Name: var name } when name is null:
                Console.WriteLine("Hey anonymous");
            break;
            case { Name: var name }:
                Console.WriteLine($"Person has name of length { name.Length }!");
            break;
        }
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

``



**Expected Behavior**: no warning

**Actual Behavior**: warning CS8602: Dereference of a possibly null reference. `Console.WriteLine($"Person has name of length { name.Length }!");`

This looks related to  but that has been fixed, and this still occurs in master on sharplab.
</Description>
  </Issue>
  <Issue>
    <IssueID>35665</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Create and initialize property/field for all unused constructor parameters</Title>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>35665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>35665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>35665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This would save me some time regularly. Currently the best alternative I know of is to manually place the caret on each parameter and do Ctrl+., enter on each one. Sometimes there are three or four, other times there are more than ten.

ReSharper has the menu hierarchy 'Introduce get-only auto-property Foo' &gt; 'For all unused parameters'.</Description>
  </Issue>
  <Issue>
    <IssueID>35661</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>35661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Switch case doesn't match anymore in VS2019</Title>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>35661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>35661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019
**Example code**
``
**Expected Behavior**:
`System.UInt32[]`
**Actual Behavior**:
`System.Exception : Not an int array`

This code worked in VS2017, but no longer in VS2019. I suspect some optimization was done to skip cases that "can't match", but in this rather special case it is mistaken.

It will match `int[]`(!) but fail the condition and instead of testing the next case it jumps to default.

The fact that an uint array can be unboxed as an int array is strange as well, but the reason behind that is explained here: 

I understand that this is an edge case that you might not deem important enough to do anything about, but I wanted to let you know about this change in behavior from VS2017.</Description>
  </Issue>
  <Issue>
    <IssueID>35660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>35660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify older compilers consuming newer library that uses the new constraints</Title>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>35660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>35660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported issue from </Description>
  </Issue>
  <Issue>
    <IssueID>35658</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>can stackalloc be allowed in ref struct constructors?</Title>
    <CreatedDate>11/05/2019</CreatedDate>
    <ClosedDate>12/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>35658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>35658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

c# 7.3

**Steps to Reproduce**:

 ``

results in error 
`CS8353: A result of a stackalloc expression of type 'Span&lt;T&gt;' cannot be used in this context because it may be exposed outside of the containing method` 

I think I understand the error message and why it is necessary to prevent it. 
But in this specific case the this.span is a field on a ref struct itself, so the stack will be maintained and the matrix itself cannot "be exposed outside the context".

</Description>
  </Issue>
  <Issue>
    <IssueID>35645</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InlineVariable should not trigger for a `using` declaration</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>35645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](


FYI @chsienki 
</Description>
  </Issue>
  <Issue>
    <IssueID>35644</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`this` keyword should not be recommended within a static local function</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>35637</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>35637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error in "await foreach" in C# 8.0 beta</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>13/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>35637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Program
{
    public static async Task Main(string[] args)
    {
        try
        {
            try
            {
                await foreach (var item in NumGenerateAsync())
                {
                    switch (item)
                    {
                        case 5:
                            return;
                    }
                }
                
            }
            catch
            {
            }
        }
        finally
        {
            await Task.Delay(42);
        }
    }

    static async IAsyncEnumerable&lt;int&gt; NumGenerateAsync()
    {
        for (int i = 0; i &lt; 30; i++)
        {
            await Task.Delay(42);
            yield return i;
        }
    }
}

VS 2019 reports an error: "MSB6006 "csc.exe" exited with code -2146232797".

**Expected Behavior:**
But I think, this code is logically correct and I expect the code to be compiled

**Actual Behavior:**
"MSB6006 "csc.exe" exited with code -2146232797"

**Remarks:**
If I delete inner try-catch, or await statement in finally block - it works as expected.

To avoid this error I replace ``return`` with ``goto`` now:
csharp
public static async Task Main(string[] args)
{
    try
    {
        try
        {
            await foreach (var item in NumGenerateAsync())
            {
                switch (item)
                {
                    case 5:
                        goto exit;
                }
            }
        exit:;
        }
        catch
        {
        }
    }
    finally
    {
        await Task.Delay(42);
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.0.3, C# 8 (beta) and 3.0.100-preview4-011223

**Steps to Reproduce**:
When i try to compile this code
``</Description>
  </Issue>
  <Issue>
    <IssueID>35631</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Regex Completion unit tests use hard-coded strings for localizable resources</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>35631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>35631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Assert.Equal() Failure\r\n ↓ (pos 3)\r\nExpected: [ character-group ]\r\nActual: [ grupo de caracteres ]\r\n ↑ (pos 3)
   en Xunit.Assert.Equal(String expected, String actual, Boolean ignoreCase, Boolean ignoreLineEndingDifferences, Boolean ignoreWhiteSpaceDifferences) en C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:línea 244
   en Xunit.Assert.Equal(String expected, String actual) en C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:línea 174
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_23_AssertSelectedCompletionItem.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:línea 246
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.VB$StateMachine_5_TestCaretPlacement.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests_Regex.vb:línea 81
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
`</Code>
    <Description>The following unit tests use hard-coded strings instead of the localized resources:

- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests_Regex.TestCaretPlacement
- Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests_Regex.TestCaretPlacement

This guarantees they will fail when run under locales other than en.

Example failure:
``

The tests will be disabled. Please update them to use the localized resource rather than hard-coded strings.
</Description>
  </Issue>
  <Issue>
    <IssueID>35630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[QUESTION]Roslyn name pattern constants</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
    <IssueLabels />
    <Description>Someone could tell me where is the cs with roslyn constants for generation of name for lambda, async/await state machine etc.

I'm working on coverlet and would like to try some pattern recognition.</Description>
  </Issue>
  <Issue>
    <IssueID>35628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing Nullable warnings?</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

.NET Core 3, Preview 5, Visual Studio 2019 16.0.3

**Steps to Reproduce**:

In the following code, the last two lines in the method does not get any warnings about nullability

`
``


**Expected Behavior**:

Expected to get 6 warnings in this method, I only get 4 warnings.

**Actual Behavior**:

The last two lines does not get any null warnings.
</Description>
  </Issue>
  <Issue>
    <IssueID>35626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type of invalid invocation expression returns a type parameter instead of some kind of error</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>09/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>35626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis 3.0.0

**Steps to Reproduce**:

1. Use the following code:

``

That is, without the intermediate variable.

This behavior might be intentional. In this case, what API can I use to know that the type of the expression is actually invalid?</Description>
  </Issue>
  <Issue>
    <IssueID>35625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>35625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title> [loc][Query][Roslyn] Localizability of "TypeOrNamespaceUsageInfo_Qualify" </Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>29/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>35625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>35625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Qualify

File Name:
Workspaces\Core\Portable\xlf\WorkspacesResources.xlf

==========================================
Query:
Would you please let me know if this string is translatable? If yes, would you please clarify its meaning?</Description>
  </Issue>
  <Issue>
    <IssueID>35624</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[loc][Query][Roslyn] Localizability of "ref_local_or_expression" </Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>35624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
ref local or expression

File Name:
Features\CSharp\Portable\xlf\CSharpFeaturesResources.xlf

==========================================
Query:
What does "local" mean here?</Description>
  </Issue>
  <Issue>
    <IssueID>35623</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Range]Type of argument is not checked before try to access String or Span&lt;T&gt; with Range mode.</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
    <IssueLabels />
    <Code>cs
using System;

public static class Program {
    public static void Main() {
//        string xxx = "str1";
        var xxx = new Span&lt;byte&gt;();
        var zzz = xxx["str2"];
//        var zzz = xxx[null];
//        var zzz = xxx[new object()];
        Console.WriteLine(zzz.ToString());
    }
}

***Seems also happen with `Span&lt;T&gt;`, but not for user-defined Types.***

**Expected Behavior**:
Seem not see any description for this with  https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/ranges.md
Maybe should not compile, as it does for CSharp 7.x

**Actual Behavior**:

When not use null, It compile well and always get an `System.ArgumentOutOfRangeException: startIndex cannot be larger than length of string.`

When use null, roslyn crashes.

Application: VBCSCompiler.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(BoundSequence node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(Microsoft.CodeAnalysis.CSharp.BoundSequence)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol,Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CodeGen.ILBuilder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.OptimizationLevel, Boolean)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>
**Version Used**: 
Compiler version: '3.100.19.22309 (ce8ac3f7)'. Language version: 8.0.
VS2019 16.1.0 Preview3.0

**Steps to Reproduce**:
1. Set`&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;`.
2. Compile the below code()
``</Description>
  </Issue>
  <Issue>
    <IssueID>35622</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>35622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Range]Type of argument is not checked before try to access String or Span&lt;T&gt; with Range mode.</Title>
    <CreatedDate>10/05/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Range</Name>
        <IssueID>35622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

public static class Program {
    public static void Main() {
//        string xxx = "str1";
        var xxx = new Span&lt;byte&gt;();
        var zzz = xxx["str2"];
//        var zzz = xxx[null];
//        var zzz = xxx[Main()];
//        var zzz = xxx[new object()];
        Console.WriteLine(zzz.ToString());
    }
}

***Seems also happen with `Span&lt;T&gt;`, but not for user-defined Types.***

**Expected Behavior**:
Seem not see any description for this with  https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/ranges.md
Maybe should not compile, as it does for CSharp 7.x

**Actual Behavior**:

When not use null, It compile well and always get an `System.ArgumentOutOfRangeException: startIndex cannot be larger than length of string.`

When use null, roslyn crashes.

Application: VBCSCompiler.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(BoundExpression receiver)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(BoundSequence node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(BoundAssignmentOperator node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(BoundExpression node, ExprContext context)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(BoundNode node, Dictionary`2 locals, Boolean debugFriendly)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(BoundStatement src, Boolean debugFriendly, HashSet`1&amp; stackLocals)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(MethodSymbol method, BoundStatement boundBody, ILBuilder builder, PEModuleBuilder moduleBuilder, DiagnosticBag diagnostics, OptimizationLevel optimizations, Boolean emittingPdb)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCallReceiver(Microsoft.CodeAnalysis.CSharp.BoundExpression)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSequence(Microsoft.CodeAnalysis.CSharp.BoundSequence)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitSideEffect(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol,Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt;, Boolean)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator..ctor(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CodeGen.ILBuilder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.OptimizationLevel, Boolean)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt;)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>**Version Used**: 
Compiler version: '3.100.19.22309 (ce8ac3f7)'. Language version: 8.0.
VS2019 16.1.0 Preview3.0

This works well with `dotnet-sdk 3.0.100-preview4-011223`, `3.100.19.20907 (01f3eb10)`.

**Steps to Reproduce**:
1. Set`&lt;LangVersion&gt;8.0&lt;/LangVersion&gt;` and `&lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;`.
2. Compile the below code()
``</Description>
  </Issue>
  <Issue>
    <IssueID>35614</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Committing unimorted type item doesn't add the missing using directive</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>35611</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>35611</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>PROTOTYPE(patterns2) comments should be replaced by an issue</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35611</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>35611</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> none
Code    File    Line    Column
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns")]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterEnterOnTokenTests.cs    1304    26
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns"), Trait(Traits.Feature, Traits.Features.SmartIndent)]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterTests.cs    2621    26
[WpfFact(Skip = "PROTOTYPE(patterns2): need to implement indentation for recursive patterns"), Trait(Traits.Feature, Traits.Features.SmartIndent)]    D:\repos\roslyn\src\EditorFeatures\CSharpTest\Formatting\Indentation\SmartIndenterTests.cs    2664    26
`</Code>
    <Description>it looks like some patterns2 PROTOTYPE comments snuck in to master:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>35610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>35610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>WRN_ImplicitCopyInReadOnlyMember not given for event assignment</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>35610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>35610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
public struct S {
    public event Action E;
    public readonly void M()
    {
        E += M2; // should warn about implicit copy
    }
    
    public static void M2() { }
}
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>35607</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Referencing Microsoft.CodeAnalysis.Scripting NuGet package should bring in System.Runtime.Loader.dll</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>23/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>35607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSMac is referencing Microsoft.CodeAnalysis.EditorFeatures NuGet package, which in turn brings in Microsoft.CodeAnalysis.Scripting.dll which references System.Runtime.Loader.dll. 

However the Loader.dll isn't being restored or copied to output.



For now it doesn't look like we use the codepaths that would result in runtime failures, but it would be nice to fix this properly.</Description>
  </Issue>
  <Issue>
    <IssueID>35602</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing nullable warning in generic methods</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>35602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    static void Main(string[] args)
    {
        Get();
        GetGeneric&lt;string&gt;();
    }

    static void Check(object value) { }

    static string Get()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;string&gt;("null");

        if (possibleNullValue == null)
        {
            Console.WriteLine("null value");
        }

        Check(possibleNullValue);

        return possibleNullValue;
    }

    static T GetGeneric&lt;T&gt;()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;T&gt;("null");

        if (possibleNullValue == null)
        {
            Console.WriteLine("null value");
        }

        Check(possibleNullValue); // "Possible null reference" warning here

        return possibleNullValue;
    }
}


----
[jcouv updated:]
I think we've narrowed down to the most questionable/suspicious scenario:

csharp
public static class JsonConvert
{
    public static T DeserializeObject&lt;T&gt;() =&gt; default;
}

#nullable safeonly

class NullTestWithoutContraint
{
    static T GetGeneric&lt;T&gt;()
    {
        var possibleNullValue = JsonConvert.DeserializeObject&lt;T&gt;();

       if (possibleNullValue is null) {} 
  
       return possibleNullValue;  // expecting a warning here, if T=string for example
    }
}
`</Code>
    <Description>**Version Used**: 

[Microsoft.Net.Tool@3.1.0-beta3-final](

**Steps to Reproduce**:

1.  Unzip [TestNullable.zip](
2.  Build

**Expected Behavior**:

- Have a possible null reference warning with all method calls using `possibleNullValue`.
- Have a warning on all methods that returns `possibleNullValue` asking to return a nullable.

**Actual Behavior**:

I only have a "possible null reference" warning on the last `Check(value)` (in the generic method). In fact I don't think the compiler really knows `possibleNullValue` can really be null so it looks like a bug to me (even if the warning is totally valid).

*Adding the code error here so that people don't have to open the .zip:*
``
(see on [sharplab](</Description>
  </Issue>
  <Issue>
    <IssueID>35599</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Why `nameof` keyword is parsed to InvocationExpressionSyntax.</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>35599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>35599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
void OnInvocationExpression(node) {
    if (node.Identifier == "nameof") {
        if (TARGET_CS6_OR_ABOVE) {
            /* nameof must be treated as KEYWORD */ 
        }
        else {
           /* nameof must be treated as FUNCTION NAME */
        }
    }
    else 
         ; // Usual invocation syntax
}


If they're treated as __keyword__, it can be more simpler.
cs
void OnNameofExpression(node) {
    /* always guranteed CS6 or above */
}
`</Code>
    <Description>![image](

Unlike `sizeof` keyword, `nameof` is always parsed to `InvocationExpressionSyntax`.&lt;br&gt;
Even this won't be compiled to an __invocation__ because they're not a runtime data.


With the current version of __roslyn__, I have to write something like below:
``</Description>
  </Issue>
  <Issue>
    <IssueID>35598</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>35598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Semicolon is placed at a wrong place</Title>
    <CreatedDate>09/05/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  16.1.0 Preivew 1

**Steps to Reproduce**:
```using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject7
{
    [TestClass]
    public class UnitTest1
    {
        private List&lt;int&gt; l = new List&lt;int&gt;()

        [TestMethod]
        public void TestMethod1()
        {
        }
    }
}

When I trying to type semicolon at the end of "private List&lt;int&gt; l = new List&lt;int&gt;()",
then the semicolon appears at the end of "[TestMethod]".
The semicolon should be placed at the end of "private List&lt;int&gt; l = new List&lt;int&gt;()".</Description>
  </Issue>
  <Issue>
    <IssueID>35592</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>#nullable enable should detect nested initialization of fields</Title>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>35592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# 8.0, .Net Core SDK 2.1.700

**Steps to Reproduce**:
With #nullable enable, "Non-nullable field is uninitialized" warning will show up if some field is not initialized in constructor. But sometimes we want to initialize some thing in a function so that it can be well structured, or we need to call an abstract function on children class. So this is bug is filed as a suggestion to consider detect nested initialization for #nullable enable. Thank you so much!
Code example: 

``

**Expected Behavior**:
No warning.
**Actual Behavior**:
 "Non-nullable field is uninitialized" shows up around the constructor.</Description>
  </Issue>
  <Issue>
    <IssueID>35584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Is' operator casts Int32 to null within constructor of generic type</Title>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>35584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Unsure - let me know how to determine, or if you need further information. Using VS2019 Enterprise, targeting .NET Framework 4.6.1, LangVersion 7.3, Microsoft.Net.Compilers 3.0.0.

**Steps to Reproduce**:

``

**Expected Behavior**:

I believe that if the expression `value is object obj` evaluates to `true`, then `obj` should be a non-null object. As such, the subsequent `obj == null` expression in the `GenericFoo` constructor should evaluate to false, and not throw the exception.

**Actual Behavior**:

The `is` operator in the `GenericFoo` constructor casts `value` to a null object, which then throws the "Kaboom!" exception.

Also relevant: if the value `1` is passed into the constructor instead of `0`, the test passes without any exception being thrown.</Description>
  </Issue>
  <Issue>
    <IssueID>35583</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>35583</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpSimplifyTypeNamesDiagnosticAnalyzer throws InvalidCastException</Title>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>35583</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35583</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>35583</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Source	Suppression State	Tool	Detail Description
Error	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.			1	IntelliSense	Active	Microsoft.CodeAnalysis.CSharp.Features	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: Microsoft.VisualStudio.CMake.Package
SyntaxTree: D:\VS\src\vc\projbld\CMake\Package\Telemetry\Telemetry.cs
SyntaxNode: Microsoft.VisualStudio.Workspace ... [MemberAccessExpressionSyntax]@[35955..36052) (794,35)-(794,132)

System.InvalidOperationException: Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'
   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)
   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion, Conversion newConversion)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel, CommonForEachStatementSyntax originalForEach, SemanticModel newModel, CommonForEachStatementSyntax newForEach)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement, TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(MemberAccessExpressionSyntax memberAccess, ExpressionSyntax reducedName, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(MemberAccessExpressionSyntax memberAccess, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression, SemanticModel semanticModel, TypeSyntax&amp; replacementNode, TextSpan&amp; issueSpan, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.CanSimplifyTypeNameExpressionCore(SemanticModel model, SyntaxNode node, OptionSet optionSet, TextSpan&amp; issueSpan, String&amp; diagnosticId, Boolean&amp; inDeclaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.SimplifyTypeNames.SimplifyTypeNamesDiagnosticAnalyzerBase`1.TrySimplifyTypeNameExpression(SemanticModel model, SyntaxNode node, AnalyzerOptions analyzerOptions, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.&lt;&gt;c__DisplayClass2_0.&lt;AnalyzeNode&gt;g__descendIntoChildren|1(SyntaxNode n)
   at Microsoft.CodeAnalysis.SyntaxNode.ChildSyntaxListEnumeratorStack.PushChildren(SyntaxNode node, Func`2 descendIntoChildren)
   at Microsoft.CodeAnalysis.SyntaxNode.&lt;DescendantNodesOnly&gt;d__167.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.SimplifyTypeNames.CSharpSimplifyTypeNamesDiagnosticAnalyzer.AnalyzeNode(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__50`1.&lt;ExecuteSyntaxNodeAction&gt;b__50_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
`</Code>
    <Description>#### Package Version

Latest VS Int.Preview

#### Diagnostic ID

CSharpSimplifyTypeNamesDiagnosticAnalyzer

#### Repro steps

On a line where not all the symbols are resolved (in this case due to a failed design-time build and assemblies are missing), we see analyzer exceptions, including this one:

#### Actual behavior

``</Description>
  </Issue>
  <Issue>
    <IssueID>35577</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>35577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move to namespace not supported on Visual Studio for Mac</Title>
    <CreatedDate>08/05/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>35577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>35577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#34223 was recently merged, which leaves Visual Studio for Mac incomplete since we do not have a UI for the code fix.

![image](

We end up with the code fix in the lightbulb menu, but we have no UI. Roslyn needs a mechanism to prevent populating the menu if there is no UI available to complete the fix.

Going forward we are aiming to move EditorFeatures.Cocoa to Roslyn itself for the new VS-Platform based editor, but in the mean time the ability to not populate the menu when we don't have the required UI is needed.</Description>
  </Issue>
  <Issue>
    <IssueID>35246</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>35246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS2019 syntax highlight (C#) - methods aren't colorized within nameof()</Title>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>35246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>35246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNWithin a class, when referencing a local method using `nameof()`, it isn't colorized according to Fonts and Colors rule for “User Members - Methods”. Method's declaration and its calls are correctly colorized._This issue has been moved from VSTS ticketId: 845546__These are the original issue comments:_Visual Studio Feedback System on 4/12/2019, 01:01 AM (12 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Visual Studio Feedback System on 4/15/2019, 06:44 PM (8 days ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35246</IssueID>
        <PullRequestID>35247</PullRequestID>
        <Title>Fix `nameof(MethodName)` not classifying MethodName</Title>
        <Description>Treat CandidateReason MemberGroup the same as Abiguous when classifyng NameSyntax

Fixes 


&lt;details&gt;&lt;summary&gt;Ask Mode template&lt;/summary&gt;

### Customer scenario

A customer uses a `nameof` expression to get the name of a method. The user expects to see the referenced method colorized the same as other method names, however the method name will be the default identifier color.

### Bugs this fixes



### Workarounds, if any

None

### Risk

Low

### Performance impact

Low

### Is this a regression from a previous update?

No

### Root cause analysis

When a method name is not referenced as part of an invocation expression the semantic classifier will not classify it. It will be syntactically classified as an Identifier.

### How was the bug found?

Reported through developer community against a preview release

&lt;/details&gt;</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35246</IssueID>
            <PullRequestID>35247</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35246</IssueID>
            <PullRequestID>35247</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>35237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Introduce 'using' statement" causes compilation error</Title>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var connection = new SqlConnection();
var command = connection.CreateCommand();
command.ExecuteNonQuery();


2. Go to the first line and type Ctrl+.
3. Select "Introduce 'using' statement"

**Expected Behavior**:

Code continues to compile after refactor.

csharp
using (var connection = new SqlConnection())
{
    var command = connection.CreateCommand();
    command.ExecuteNonQuery();
}


**Actual Behavior**:

The refactor causes a compiler error.

csharp
using (var connection = new SqlConnection())
{
    var command = connection.CreateCommand();
}
command.ExecuteNonQuery(); // Compiler error
`</Code>
    <Description>**Version Used**: VS 16.0.0, .NET Core 2.1

**Steps to Reproduce**:

1. Add the following code

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35237</IssueID>
        <PullRequestID>30106</PullRequestID>
        <Title>Introduce using statement</Title>
        <Description>/cc @CyrusNajmabadi </Description>
        <CreatedDate>22/09/2018</CreatedDate>
        <ClosedDate>02/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35237</IssueID>
            <PullRequestID>30106</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35237</IssueID>
            <PullRequestID>30106</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>35237</IssueID>
            <PullRequestID>30106</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>JoeRobich</FixedById>
            <PullRequestID>30106</PullRequestID>
            <IssueID>35237</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Namespace completion won't trigger between dots</Title>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>35236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Intellisense doesn't trigger on ctrl-space at $$ unless a character is typed, eg:
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>35233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implicit class-local object field for lock statement</Title>
    <CreatedDate>24/04/2019</CreatedDate>
    <ClosedDate>27/04/2019</ClosedDate>
    <IssueLabels />
    <Code>cs
lock
{
    // ...
}
`</Code>
    <Description>**Version Used**: C# 7

I use the `lock` statement a fair bit, and I find it very redundant that for every single time I have used it, across the span of years, I have, in all cases, had to write exactly one read-only object field in every class I use it with, and then reference that object as the object to lock on, only inside the class it was defined. I've never needed more than one object, I've never needed to pass the object outside of the class. Why is it that the lock statement can't simply take the form of
``
and just create a private internal object field in that class? For multiple statements, they would just refer to that same object. The old syntax would still be there for the edge cases of requiring a handle on the object, but for every case of the `lock` statement I've ever seen, it hasn't been needed in those cases. I don't see this case being any different from an auto-property versus a fully-written property with an explicitly-written backing field.

Sorry if this has already been suggested, but I couldn't find a suggestion already made for it. I would have done this years ago but I figured it was such an obvious idea that it was already suggested and just shot down. It's a complaint I see from new C# users all the time.</Description>
  </Issue>
  <Issue>
    <IssueID>35227</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>35227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support nullable variance in interface implementation</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>35227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Essentially, the work from  #23268 and #30958, but for interface implementation.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35227</IssueID>
        <PullRequestID>36663</PullRequestID>
        <Title>Support nullable variance in interface and partial method implementation.</Title>
        <Description>Closes #35227.</Description>
        <CreatedDate>21/06/2019</CreatedDate>
        <ClosedDate>24/06/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35227</IssueID>
            <PullRequestID>36663</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35227</IssueID>
            <PullRequestID>36663</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35224</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code Cleanup having trouble with switch expression</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>01/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>35224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(82,9,82,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(83,13,83,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(84,13,84,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(85,13,85,17): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\AbstractMoveToNamespaceCodeAction.cs(86,9,86,13): warning IDE0055: Fix formatting
1&gt;C:\github\roslyn\src\Features\Core\Portable\MoveToNamespace\MoveToNamespaceResult.cs(21,38,21,39): warning IDE0055: Fix formatting
`</Code>
    <Description>See the screenshot from Roslyn source below. The switch expression is flagged for IDE0055, but click "Run code clean up" in VS doesn't do anything.

``


![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>35222</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion is incorrect for lambda parameters</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>35222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Invoking completion here brings up the members of `Action&lt;Program&gt;`, not the members of `Program`, rendering completion completely useless. cc @ivanbasov.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35222</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35222</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35222</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>35222</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35222</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>35222</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35221</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Semicolon terminating a field declaration misplaced when typed</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

Place caret in the below code as indicated by `|` and type `;`.

``</Description>
  </Issue>
  <Issue>
    <IssueID>35216</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>preprocessor colorization is off</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>35216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>repro.

open ContainedDocument.cs

![image](

looks like preprocessor is not colorized correctly.</Description>
  </Issue>
  <Issue>
    <IssueID>35208</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate Constructor</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>25/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>35208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>35208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;When I use Ctrl+dot, and use the Generate Constructor option, it always creates a &lt;strong&gt;public&lt;/strong&gt; constructor. I think this should create a &lt;strong&gt;protected&lt;/strong&gt; constructor when the class is abstract.&lt;/p&gt;&lt;p&gt;public abstract class Example&lt;/p&gt;&lt;p&gt;{&lt;/p&gt;&lt;p&gt;     // Ctrl + dot here and select Generate constructor&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;_This issue has been moved from VSTS ticketId: 847234__These are the original issue comments:_Jono on 4/13/2019, 00:01 PM (9 days ago): &lt;p&gt;Oops. I meant to say use ctrl+dot on the &lt;strong&gt;class name&lt;/strong&gt; and select the Generate Constructor option.&lt;/p&gt;Jane Wu [MSFT] on 4/15/2019, 01:26 AM (8 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;We'll provide an update once the issue has been triaged by the product team.&lt;/p&gt;Kendra Havens [MSFT] on 4/18/2019, 02:28 PM (4 days ago): &lt;p&gt;If the abstract class is not marked public the code fix will generate a protected constructor. &lt;a target="_blank"&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;Just to clarify, you would like the constructor to be protected even when the abstract class is public?&lt;/p&gt;Jono on 4/22/2019, 09:57 PM (12 hours ago): &lt;p&gt;I believe that the constructors for all abstract classes should be protected by default, even if the class itself is public. This is because you can never create an instance of an abstract class. &lt;/p&gt;&lt;p&gt;So to answer &lt;a rel="user" href=" nodeid="44551"&gt;@Kendra Havens [MSFT]&lt;/a&gt;: Yes please :D&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>35204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>35204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] Errors that reported during build become stale if reported before "IntelliSense" category</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>25/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>35204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>35204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	Active


If I switch to Build category:


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	N/A


**Actual Behavior**:
Two errors in IntelliSense &amp; Build category

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	Active


If I switch to Build category (notice that the Suppression column is different to Expected):


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'ClassLibrary1.Foo' to 'System.IComparable'	ConsoleApp407	C:\Users\davkean\Source\Repos\ConsoleApp407\ConsoleApp407\Program.cs	10	
`</Code>
    <Description>I cannot repro this in 15.9, but cannot tell if that's because it doesn't repro or because its faster.

I'm running into this a lot in the large solution I'm working in.

**Version Used**: 
Version 16.1.0 [28728.66.d16.1stg]
Version 16.1.0 Preview 2.0 [28817.7.d16.1]

**Steps to Reproduce**:

1. Extract attached solution ([ClassLibrary1.zip](
2. Delete .vs folder (!important)
3. Open solution
4. In ClassLibrary1\Class1.cs remove the `IComparable` implementation from `Foo`
5. Immediately build via F6 so that the "Build" errors show up before the "IntelliSense" error (!important)

**Expected Behavior**:
Only a single error in IntelliSense &amp; Build category

``

If you re-add the `IComparable` implementation (without building), only the second error goes away and the other sticks around and becomes stale until the next build.

If you _wait_ until IntelliSense appears _and then_ build, only a single error appears.</Description>
  </Issue>
  <Issue>
    <IssueID>35203</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>35203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0059 false positive</Title>
    <CreatedDate>23/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>35203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    class Program
    {
        static void Main(string[] args)
        {
            GlobalImage globalImage = null;
            if (args[0] == "0")
            {
                globalImage = GetGlobalImage(0);
            }
            else
            {
                globalImage = GetGlobalImage(1);
            }

            if (globalImage != null)
            {
                Console.WriteLine(globalImage.ContentLength);
            }
        }

        static GlobalImage GetGlobalImage(int divisionId)
        {
            return null;
        }

        public class GlobalImage
        {
            public int ContentLength { get; set; }
        }
    }
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019 16.02 and .NET Core 3.0 preview4

**Steps to Reproduce**:

``
Will produce IDE0059 Value assigned to 'globalImage' is never used

**Expected Behavior**:
No IDE0059
**Actual Behavior**:
IDE0059
</Description>
  </Issue>
  <Issue>
    <IssueID>35190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>nullable reference non-nullability ignored on interface method call</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class HelloRequest
{
    public string? Value { get; set; }
}

[HttpPost]
public async Task&lt;IActionResult&gt; Hello([FromBody]HelloRequest hello)
{
    var value = await _grainFactory.GetGrain&lt;IHello&gt;(0).SayHello(hello.Value);
    return new JsonResult(new { value = value });
}

public interface IHello : Orleans.IGrainWithIntegerKey
{
    Task&lt;string&gt; SayHello(string greeting);
}
`</Code>
    <Description>**Version Used**: 
.NET Core 3.0 preview 4

**Steps to Reproduce**:
Using Microsoft Orleans 2.3
``

**Expected Behavior**:
Calling SayHello method would produce some sort of nullability warning because HelloRequest.Value is nullable reference type and SayHello parameter is non-nullable.

**Actual Behavior**:
No warning and it seems that even just calling `var value = await _grainFactory.GetGrain&lt;IHello&gt;(0).SayHello(null)` doesn't produce any warning.
</Description>
  </Issue>
  <Issue>
    <IssueID>35187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense does not insert parentheses at the end of suggested method.</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>35187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNFor example I have some variable &amp;quot;list&amp;quot; of IList&amp;lt;T&amp;gt; type.When I type &amp;quot;list.&amp;quot; IntelliSense suggest a &amp;quot;Find&amp;quot; method, then I press Enter key and then I get only &amp;quot;list.Find&amp;quot;, but not expected &amp;quot;list.Find();&amp;quot; . So then I have to add parentheses by myself. How can I fix this behaviour?I am currently using VS 2019 Community with no extensions installed._This issue has been moved from VSTS ticketId: 839865__These are the original issue comments:_Visual Studio Feedback System on 4/8/2019, 01:38 AM (14 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>35180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>petrroll</FixedById>
        <IssueID>35180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Offer codefixes on selections</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>35180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>## Scenario
Codefixes often don't show if code is selected as opposed to only having your cursor placed within a word.
*  **5 out of the 11 users struggled with this in user studies.** 
* One user **only** ever double-clicked when clicking around the editor. This means he saw fewer codefixes since double clicking always selects the word and we don't show available codefixes in the context. Some users are used to double-clicking around their codebase.

## Proposal
Enable the same codefixes to appear if a block is selected as would appear if the cursor was placed inside a specific name. If this improves discoverability of codefixes we can enable this on a case-by-case basis per refactoring. My study observed more issues with the 'pull members up to base type' refactoring than others though general struggling was observed with many refactorings.

**Example: Pull members up**
Codefix offered when cursor is in the name:
![image](

Codefix not offered if full line is selected:
![image](

**Example: Convert local function to method**
Offered if cursor is in name
![image](

Not offered when entire local function is selected
![image](

**Example: LINQ to Foreach conversions**
![image](

If semi-colon is included in selection the conversion does not appear:
![image](







</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35180</IssueID>
        <PullRequestID>36592</PullRequestID>
        <Title>Fix - local function - refactorings not available when selection is used </Title>
        <Description>WIP on fixing low-hanging fruits from #35180

Includes some new Helpers for determining whether current position/span is desirable for refactoring.</Description>
        <CreatedDate>19/06/2019</CreatedDate>
        <ClosedDate>25/06/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35180</IssueID>
            <PullRequestID>36592</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implied type parameter constraint of a partial method vs nullable context</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This issue relates to the implementation of the LDM resolution for  as discussed in the 2019-04-22 LDM and documented at 

For a partial type, the constraints (implied or explicit) for the various parts of a partial must agree.  This is an existing rule.  We extend this rule for nullability to say that they must agree in nullability annotations as well (or we produce an error for an annotated/unannotated disagreement).  We use the invariant merging rules to merge the constraints from the various parts.  The resulting merged constraints are used by the compiler in users of the type and within the body of the partial type.

For a partial method, callers of the method are analyzed against the declaration.  The body of the implementation is analyzed against the implementation's declared or implied constraints.  We produce a warning at the implementation if there is a mismatch of type parameter constraints of nullable annotations `annotated` vs `unannotated` (though a mismatch with `oblivious` is ignored).
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35272</PullRequestID>
        <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
        <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35272</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35017</PullRequestID>
        <Title>Simplify null checks using 'is null' and 'is object'</Title>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35017</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34563</PullRequestID>
        <Title>install servicehub json files in common7/servicehub folders</Title>
        <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35097</PullRequestID>
        <Title>Use Machine.Arm64 instead of raw value</Title>
        <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35097</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35094</PullRequestID>
        <Title>Add unit-tests for fixed issues.</Title>
        <Description>Closes #33276.
Closes #31676.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34763</PullRequestID>
        <Title>Update nullable attribute in docs</Title>
        <Description>Update nullable attribute in docs to show NullableFlags</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34581</PullRequestID>
        <Title>Fix the pull member up failure</Title>
        <Description>Related [issue](
So, null pointer exception happens when you try to make a property abstract like
``
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35116</PullRequestID>
        <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
        <Description>Fixes #35083.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35116</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34988</PullRequestID>
        <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
        <Description>Fix </Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35121</PullRequestID>
        <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
        <Description>Fixes 

Relates to  (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to  (umbrella for async-streams)</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>20/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35121</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34909</PullRequestID>
        <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
        <Description>Fixes #33952
</Description>
        <CreatedDate>10/04/2019</CreatedDate>
        <ClosedDate>15/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34909</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35024</PullRequestID>
        <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
        <Description>Fix for #34983 and #35126</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>22/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35009</PullRequestID>
        <Title>Add import placement codestyle, diagnostic, and fixer</Title>
        <Description>This PR is created to simplify the changes made in 

This PR includes the changes from both  &amp; 

![image](

![image](

</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35170</PullRequestID>
        <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Range</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35170</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35145</PullRequestID>
        <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
        <Description>Fixes #30081.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35189</PullRequestID>
        <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
        <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35189</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35213</PullRequestID>
        <Title>Only emit readonly attributes implicitly when feature enabled</Title>
        <Description>Resolves #35113</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35213</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35155</PullRequestID>
        <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
        <Description>Fix </Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34697</PullRequestID>
        <Title>Add spec for enhanced using</Title>
        <Description>Spec out the various parts of the enhanced using feature</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34697</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>32092</PullRequestID>
        <Title>Optimise DisplayClass Allocations</Title>
        <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to </Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>32092</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35234</PullRequestID>
        <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
        <Code>csharp
struct C {
    readonly e //suggest event here
}
`</Code>
        <Description>…member declaration.

``

See </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35265</PullRequestID>
        <Title>Re-enable symbol tests on mono</Title>
        <Description>Fixes </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35264</PullRequestID>
        <Title>Remove usage of QuietRestore</Title>
        <Code>
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
`</Code>
        <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

``

QuietRestore is a hack that is causing issues like </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35264</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34778</PullRequestID>
        <Title>Readonly struct metadata as source</Title>
        <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
        <CreatedDate>05/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35249</PullRequestID>
        <Title>Fix crash in pattern matching</Title>
        <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35249</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35254</PullRequestID>
        <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
        <Description>Fixes  (warn for potentially missing `[EnumeratorCancellation]`)
Closes  (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35254</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34889</PullRequestID>
        <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
        <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
        <CreatedDate>09/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34889</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35001</PullRequestID>
        <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
        <Description>Fixes #29894</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35001</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35018</PullRequestID>
        <Title>Make Generated syntax trees restore to project-level nullability</Title>
        <Description>Fixes #34094</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35018</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35212</PullRequestID>
        <Title>Focus first tabbable element in PMU dialog</Title>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34809</PullRequestID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on  Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes </Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34996</PullRequestID>
        <Title>Handly dynamic null checks against literal null</Title>
        <Description>Fixes #30939</Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34996</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35284</PullRequestID>
        <Title>Clean up an assertion in LambdaRewriter.</Title>
        <Description>Fixes #30069</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35284</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35351</PullRequestID>
        <Title>Fixup from bad merge.</Title>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Now</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35351</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35030</PullRequestID>
        <Title>Lambdas in array initializers checked in nullable walker</Title>
        <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35276</PullRequestID>
        <Title>Null inferences do not flow out of a finally block.</Title>
        <Description>Fixes #34018</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35336</PullRequestID>
        <Title>changed the way we report live analysis to task center</Title>
        <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](

new
![progress](
</Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35336</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35311</PullRequestID>
        <Title>Handle val escape for the switch expression.</Title>
        <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35311</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35016</PullRequestID>
        <Title>Additional Nullability checks for deconstruction:</Title>
        <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes </Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35016</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34973</PullRequestID>
        <Title>Correct nullability analysis in conditional access</Title>
        <Description>Fixes #29956</Description>
        <CreatedDate>13/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34973</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35344</PullRequestID>
        <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
        <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes  and  </Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>34831</PullRequestID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

## From 
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From 
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From 
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From 
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From 
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From 
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From 
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From 
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From 
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From 
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From 
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From 
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From 
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From 
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From 
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>34831</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35373</PullRequestID>
        <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
        <Description>FYI @jaredpar @agocke @stephentoub 

May fix  </Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35373</PullRequestID>
            <IssueID>35179</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35179</IssueID>
        <PullRequestID>35238</PullRequestID>
        <Title>Auto-generate assembly version of the build task assembly</Title>
        <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35179</IssueID>
            <PullRequestID>35238</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Allow setting/updating DefaultNamespace for project at workspace</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>19/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I tried to make omnisharp-roslyn to support new SyncNamespace refactoring ( However method  is internal. Is there other means to set default namespace for project at workspace?

Omnisharp-roslyn issue </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35173</IssueID>
        <PullRequestID>30920</PullRequestID>
        <Title>Implement Sync namespace and folder refactoring</Title>
        <Description>This is retargeting  to master, commits history were lost during the process so I kept the original PR/branch intact for review purpose and create this one to merge.

As mentioned in  this will not be provided for VB.

Remaining issues/work that will be addressed in separate PRs
- [ ] Fix "undo" for "move file to folder" refactoring
- [x] Enable this refactoring for CPS based project (this requires a crosscutting change between roslyn and project system)
- [x] refactor the language service to support "Move type to new namespace" and "change namespace (selected declaration only)" refactoring. (we might implement those for VB as well, still under discussion)</Description>
        <CreatedDate>01/11/2018</CreatedDate>
        <ClosedDate>16/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35173</IssueID>
            <PullRequestID>30920</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35173</IssueID>
            <PullRequestID>30920</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Committing import completions corrupts Razor cshtml files</Title>
    <CreatedDate>22/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
dev16.1-preview2 (after PR for import completions by @genlu )

**Steps to Reproduce**:

1. Open cshtml file
2. Type @, invoke intellisense 
3. Select and commit any import completion item

**Expected Behavior**:
a) Razor import directive added to current document
or
b) Import completions are disabled for cshtml files


**Actual Behavior**:
Text is removed at random position. Document becomes corrupted.

![2019-04-22_12-47-44](
</Description>
  </Issue>
  <Issue>
    <IssueID>35168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable reference types + Anonymous objects ... a couple rough edges</Title>
    <CreatedDate>21/04/2019</CreatedDate>
    <ClosedDate>11/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>35168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Check this out:

    string x = "";

    // This creates no warnings, but intellisense shows "a" as type "string?"
    x = new { a = "x" }.a;

    // This creates a warning
    x = new[] { new { a = "x" } }[0].a;

    // This creates a warning (the cast doesn't work)
    x = new[] { new { a = (string)"x" } }[0].a;

There's a few similar open issues, but I'm not expert enough to know if there's a complete overlap.  If so, sorry :)

This does seem to be a bug since the docs say the nullability of the arguments are inferred from the initializing expression:  

I came across this when accessing properties downline from a Select projection in a LINQ expression.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35168</IssueID>
        <PullRequestID>33562</PullRequestID>
        <Title>Track state in anonymous type fields</Title>
        <Description>Fixes #24018 (Inferred nullability should flow into anonymous type fields)
Fixes #29889 (Nullability mismatch is not reported for an assignment of Anonymous Types)
Fixes #29890 
Fixes #29891 (Missing ErrorCode.WRN_NullReferenceReceiver warning involving anonymous type)
Fixes #33007 (non-nullability of anonymous type properties in lambdas are messed up)
Fixes #31394 (Nullability of assigned anonymous type field ignored)
</Description>
        <CreatedDate>21/02/2019</CreatedDate>
        <ClosedDate>22/02/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35168</IssueID>
            <PullRequestID>33562</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35168</IssueID>
            <PullRequestID>33562</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35167</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SymbolFinder.FindReferencesAsync returns incorrect result in certain scenarios</Title>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
    <IssueLabels />
    <Description>By having the following projects:
- `NHibernate.Caches.Common`
	PackageReferences: `NHibernate`
- `NHibernate.Caches.StackExchangeRedis`
	PackageReferences: `StackExchange.Redis`, `NHibernate`
	ProjectReferences: `NHibernate.Caches.Common`

`SymbolFinder.FindReferencesAsync` will return partial results for types that are defined in `NHibernate` package and also for their derived types located in `NHibernate` or `NHibernate.Caches.StackExchangeRedis` assembly.
By removing `StackExchange.Redis` or `NHibernate.Caches.Common` reference from the project `NHibernate.Caches.StackExchangeRedis`, `SymbolFinder.FindReferencesAsync` starts working as expected.


**Version Used**: `3.0.0`, `2.10.0`, `2.7.0`

**Steps to Reproduce**:

1. Clone 
2. Run `RoslynTest` project

**Expected Behavior**:
`SymbolFinder.FindReferencesAsync` should return the same result for `ICache`, `CacheBase`, `FakeCache`, `HashtableCache`, `RedisCache`:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>35166</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warn if `CancellationToken` parameter of async-iterator lacks `[EnumeratorCancellation]`?</Title>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>35166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
Relates to  (umbrella for async-streams)</Description>
  </Issue>
  <Issue>
    <IssueID>35165</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>35165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Confirm/clarify rules for `[EnumeratorCancellation]` in OHI scenarios</Title>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>35165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>35165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>What are the implications with OHI and the cancellation token decision? Consider the case where I use the attribute on an abstract member or interface. Does that …
- Require the implementor to have the attribute?
- Does the compiler consult the definition or implementation when deciding how to handle the parameter?
- If the attribute has no effect on abstract methods, then do we issue a warning when it’s used?

Relates to  (umbrella for async-streams)</Description>
  </Issue>
  <Issue>
    <IssueID>35164</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>35164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Turning off all rules and then enabling desired rules</Title>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>26/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](

#### Package Version

Example: v2.9.2

#### Repro steps

1. Add package reference
1. Copy contents of `AllRulesDisabled.ruleset` to local file and reference from csproj
1. Compile

#### Expected behavior

No code analysis warnings because they're all disabled

#### Actual behavior

Code analysis warnings, e.g. warning CA2208: Call the ArgumentOutOfRangeException constructor that contains a message and/or paramName parameter.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35017</PullRequestID>
        <Title>Simplify null checks using 'is null' and 'is object'</Title>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35017</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34563</PullRequestID>
        <Title>install servicehub json files in common7/servicehub folders</Title>
        <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35097</PullRequestID>
        <Title>Use Machine.Arm64 instead of raw value</Title>
        <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35097</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35094</PullRequestID>
        <Title>Add unit-tests for fixed issues.</Title>
        <Description>Closes #33276.
Closes #31676.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34763</PullRequestID>
        <Title>Update nullable attribute in docs</Title>
        <Description>Update nullable attribute in docs to show NullableFlags</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34581</PullRequestID>
        <Title>Fix the pull member up failure</Title>
        <Description>Related [issue](
So, null pointer exception happens when you try to make a property abstract like
``
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35116</PullRequestID>
        <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
        <Description>Fixes #35083.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35116</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34988</PullRequestID>
        <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
        <Description>Fix </Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35121</PullRequestID>
        <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
        <Description>Fixes 

Relates to  (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to  (umbrella for async-streams)</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>20/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35121</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34909</PullRequestID>
        <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
        <Description>Fixes #33952
</Description>
        <CreatedDate>10/04/2019</CreatedDate>
        <ClosedDate>15/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34909</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35024</PullRequestID>
        <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
        <Description>Fix for #34983 and #35126</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>22/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35009</PullRequestID>
        <Title>Add import placement codestyle, diagnostic, and fixer</Title>
        <Description>This PR is created to simplify the changes made in 

This PR includes the changes from both  &amp; 

![image](

![image](

</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35170</PullRequestID>
        <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Range</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35170</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35145</PullRequestID>
        <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
        <Description>Fixes #30081.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35189</PullRequestID>
        <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
        <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35189</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35213</PullRequestID>
        <Title>Only emit readonly attributes implicitly when feature enabled</Title>
        <Description>Resolves #35113</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35213</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35155</PullRequestID>
        <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
        <Description>Fix </Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34697</PullRequestID>
        <Title>Add spec for enhanced using</Title>
        <Description>Spec out the various parts of the enhanced using feature</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34697</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>32092</PullRequestID>
        <Title>Optimise DisplayClass Allocations</Title>
        <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to </Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>32092</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35234</PullRequestID>
        <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
        <Code>csharp
struct C {
    readonly e //suggest event here
}
`</Code>
        <Description>…member declaration.

``

See </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35265</PullRequestID>
        <Title>Re-enable symbol tests on mono</Title>
        <Description>Fixes </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35264</PullRequestID>
        <Title>Remove usage of QuietRestore</Title>
        <Code>
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
`</Code>
        <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

``

QuietRestore is a hack that is causing issues like </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35264</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34778</PullRequestID>
        <Title>Readonly struct metadata as source</Title>
        <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
        <CreatedDate>05/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35249</PullRequestID>
        <Title>Fix crash in pattern matching</Title>
        <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35249</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35254</PullRequestID>
        <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
        <Description>Fixes  (warn for potentially missing `[EnumeratorCancellation]`)
Closes  (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35254</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34889</PullRequestID>
        <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
        <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
        <CreatedDate>09/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34889</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35001</PullRequestID>
        <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
        <Description>Fixes #29894</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35001</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35018</PullRequestID>
        <Title>Make Generated syntax trees restore to project-level nullability</Title>
        <Description>Fixes #34094</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35018</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35212</PullRequestID>
        <Title>Focus first tabbable element in PMU dialog</Title>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35272</PullRequestID>
        <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
        <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35272</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34809</PullRequestID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on  Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes </Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34996</PullRequestID>
        <Title>Handly dynamic null checks against literal null</Title>
        <Description>Fixes #30939</Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34996</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35284</PullRequestID>
        <Title>Clean up an assertion in LambdaRewriter.</Title>
        <Description>Fixes #30069</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35284</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35351</PullRequestID>
        <Title>Fixup from bad merge.</Title>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Now</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35351</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35030</PullRequestID>
        <Title>Lambdas in array initializers checked in nullable walker</Title>
        <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35276</PullRequestID>
        <Title>Null inferences do not flow out of a finally block.</Title>
        <Description>Fixes #34018</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35336</PullRequestID>
        <Title>changed the way we report live analysis to task center</Title>
        <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](

new
![progress](
</Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35336</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35311</PullRequestID>
        <Title>Handle val escape for the switch expression.</Title>
        <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35311</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35016</PullRequestID>
        <Title>Additional Nullability checks for deconstruction:</Title>
        <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes </Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35016</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34973</PullRequestID>
        <Title>Correct nullability analysis in conditional access</Title>
        <Description>Fixes #29956</Description>
        <CreatedDate>13/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34973</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35344</PullRequestID>
        <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
        <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes  and  </Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>34831</PullRequestID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

## From 
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From 
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From 
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From 
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From 
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From 
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From 
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From 
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From 
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From 
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From 
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From 
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From 
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From 
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From 
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>34831</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35373</PullRequestID>
        <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
        <Description>FYI @jaredpar @agocke @stephentoub 

May fix  </Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35373</PullRequestID>
            <IssueID>35164</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>35164</IssueID>
        <PullRequestID>35238</PullRequestID>
        <Title>Auto-generate assembly version of the build task assembly</Title>
        <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>35164</IssueID>
            <PullRequestID>35238</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>35163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>pre-selection should favor in-scope symbols</Title>
    <CreatedDate>20/04/2019</CreatedDate>
    <ClosedDate>07/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>35163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From [feedback](

&gt; For some reason it tends to pre-select import completions over regular ones.
&gt;
&gt;![image](

It seems the reason unimport one is favored in this case is because it's considered a better match based on current algorithm (which takes suffix "&lt;&gt;" in to account as well)

</Description>
  </Issue>
  <Issue>
    <IssueID>35159</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>35159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Warn if `[EnumeratorCancellation]` is specified on two parameters?</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>02/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>35159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>35159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; Iter(int value, [DefaultCancellation] CancellationToken token1, [DefaultCancellation] CancellationToken token2)`

Relates to  (PR implementing the attribute)

Relates to  (umbrella for async-streams)</Description>
  </Issue>
  <Issue>
    <IssueID>35157</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Typeless tuples hit debug assert in nullable walker</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
class C
{
    void M()
    {
        _ = (null, 2);
    }
}


Hits this:
&lt;details&gt;


[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       System.InvalidOperationException : 
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       Stack Trace:
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Test\Utilities\Portable\ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceListener.Fail(String message)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceInternal.Fail(String message)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.Debug.Assert(Boolean condition)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(1898,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.GetImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(958,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(848,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Binder\Semantics\Conversions\ConversionsBase.cs(89,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet`1&amp; useSiteDiagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(3592,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.GenerateConversion(Conversions conversions, BoundExpression sourceExpression, TypeSymbol sourceType, TypeSymbol destinationType, Boolean fromExplicitCast, Boolean extensionMethodThisArgument)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(4303,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.ApplyConversion(BoundExpression node, BoundExpression operandOpt, Conversion conversion, TypeWithAnnotations targetTypeWithNullability, TypeWithState operandType, Boolean checkConversion, Boolean fromExplicitCast, Boolean useLegacyWarnings, AssignmentKind assignmentKind, ParameterSymbol target, Boolean reportTopLevelWarnings, Boolean reportRemainingWarnings, Boolean extensionMethodThisArgument, Optional`1 stateForLambda, Boolean trackMembers, Location location)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(3814,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitOptionalImplicitConversion(BoundExpression expr, TypeWithAnnotations targetTypeOpt, Boolean useLegacyWarnings, Boolean trackMembers, AssignmentKind assignmentKind)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(4744,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitAssignmentOperator(BoundAssignmentOperator node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(1506,0): at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(329,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(1483,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(223,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(204,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(321,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(784,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1101,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionStatement(BoundExpressionStatement node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(2986,0): at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(613,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(1536,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1089,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(1081,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs(2636,0): at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(367,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(370,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean&amp; badRegion)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\AbstractFlowPass.cs(390,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(495,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Conversions conversions, DiagnosticBag diagnostics, Boolean useMethodSignatureParameterTypes, MethodSymbol methodSignatureOpt, ArrayBuilder`1 returnTypes, VariableState initialState, Dictionary`2 analyzedNullabilityMapOpt)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\NullableWalker.cs(385,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\DefiniteAssignment.cs(381,0): at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(CSharpCompilation compilation, MethodSymbol member, BoundNode node, DiagnosticBag diagnostics, Boolean requireOutParamsAssigned)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\FlowAnalysisPass.cs(133,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\FlowAnalysis\FlowAnalysisPass.cs(42,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Rewrite(MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics, Boolean hasTrailingExpression, Boolean originalBodyNested)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(1015,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(498,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(388,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs(136,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.InnerInvoke()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.Execute()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         --- End of stack trace from previous location where exception was thrown ---
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(303,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs(144,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2334,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2303,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2218,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs(2212,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Test\Utilities\Portable\Diagnostics\DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\Users\frsilb\Documents\git\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\NullableReferenceTypesTests.cs(46349,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.Semantics.NullableReferenceTypesTests.TupleTypeInference_08()
`</Code>
    <Description>``

&lt;/details&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>35151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Reinfer GetEnumerator type based on input type.</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>35151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

This test should have warnings on the `foreach`s indicated. In addition to the `GetEnumerator` reinference, this also exposes that when we do the visit of the `foreach` expression, we need to explicitly remove implicit conversions from the expression and call `ApplyConversion` ourselves.</Description>
  </Issue>
  <Issue>
    <IssueID>35147</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generic constraints doesn't respect nullable annotations when contraint is a base type constraint</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>35147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class C {
    public void M&lt;T&gt;(T a) where T : class? {
    }
}


This correctly emmits a `NullableAttribute(2)` in the generic parameter.

However if I do:
cs
public class C {
    public void M&lt;T&gt;(T a) where T : Attribute? {
    }
}
`</Code>
    <Description>**Version Used**: 
latest from master in sharplab.

**Steps to Reproduce**:
``

This will not even generate a `NullableAttribute` into the generic param.



cc: @dotnet/nullablefc @chsienki @jaredpar @cston 
</Description>
  </Issue>
  <Issue>
    <IssueID>35146</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>35146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler doesn't take readonly members into account for span safety rules</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>21/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The language currently disallows you from passing a `Span&lt;T&gt;` to an instance method of a ref struct, unless that ref struct is also `readonly` or an `in` extension method.

The compiler should presumably also take into consideration whether a given member is itself `readonly` on a mutable instance struct and allow that as well.

For reference: </Description>
  </Issue>
  <Issue>
    <IssueID>35140</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>35140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`#error version` should display product version</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>35140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The compiler version in Core 3 preview 4 shows as '3.100.19.20907 (01f3eb10)' when I include `#error version` in the code of a simple console app.

But when I look at the Roslyn commit 01f3eb10

I see that the version number should be 3.1.0 beta2 or something.


When I look at the binary "C:\Program Files\dotnet\sdk\3.0.100-preview4-011223\Roslyn\bincore\Microsoft.CodeAnalysis.dll" I see both 3.100 and 3.1:
 ![file-version](

Expected:
`#error version` should display `3.1.0-beta2-...`

Proposal: 
`#error version` should pull the version number from `AssemblyInformationalVersionAttribute` instead:
`[assembly: AssemblyInformationalVersion("3.1.0-beta1-19162-08+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3")]`</Description>
  </Issue>
  <Issue>
    <IssueID>35139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Find References results should distinguish direct and indirect references</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>14/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>35139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>35139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See discussion in #34617.

Currently Find All References on a named type returns references to both the type itself and references to the constructor(s). In this and similar cases, the `FinderLocation` should indicate whether the location is a direct reference to the symbol passed to Find All References, or to a related symbol.

The Find All References presenter should be updated to not show references to a related symbol on the searched symbol whenever the related symbol will also be shown in the results. For example the following image shows a reference location that should not have been presented because it is a duplicate:

![image](

Related to #32738</Description>
  </Issue>
  <Issue>
    <IssueID>35136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code fix for CS8421: Pass 'item' as an argument</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>35136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>35136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>35136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
int Method(int x) {
  return Convert();

  static int Convert() =&gt; x + 1;
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.0

🔗 Related to #35135 

**Steps to Reproduce**:

``

**Expected Behavior**:

* CS8421: A static local function cannot contain a reference to 'x'.
* A code fix is presented which offers to explicitly pass `x` as an argument.

**Actual Behavior**:

The error is reported, but the code fix must be applied manually.
</Description>
  </Issue>
  <Issue>
    <IssueID>35135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>35135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>New refactoring: Make local function static</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>35135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>35135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>35135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This refactoring would add the `static` modifier to a local function, and automatically add parameters to the local function for each item previously captured by the function.</Description>
  </Issue>
  <Issue>
    <IssueID>35142</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Using range operator causes InvalidProgramException</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description># Issue Title

Using range operator causes InvalidProgramException in the latest dotnet core preview

# General

Donet Core Version: 3 Preview 4
Visual Studio: 16.0.2

Running an MsTest v2 that targets netcore3.0 which tests another netcore3.0 library that uses the new range operator causes an `InvalidProgramException`

Example code used in the library:
`var index = query[0..^1] + (char)(query[^1] + 1);`

Example that worked
`var index = query.Substring(0, query.Length - 1) + query[query.Length - 1];`

Exception:
``</Description>
  </Issue>
  <Issue>
    <IssueID>35131</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>35131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deconstruct KeyValuePair failing with nullable warning</Title>
    <CreatedDate>19/04/2019</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>35131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>35131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    public readonly struct KeyValuePair&lt;TKey, TValue&gt;
    {
        private readonly TKey key; // Do not rename (binary serialization)
        private readonly TValue value; // Do not rename (binary serialization)

        public KeyValuePair(TKey key, TValue value)
        {
            this.key = key;
            this.value = value;
        }

        public TKey Key
        {
            get { return key; }
        }

        public TValue Value
        {
            get { return value; }
        }

        public override string ToString()
        {
            return KeyValuePair.PairToString(Key, Value);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        public void Deconstruct(out TKey key, out TValue value)
        {
            key = Key;
            value = Value;
        }
    }


Then we create a `Dictionary&lt;string, ResourceManager&gt;` which in its `Enumerator` returns a `KeyValuePair&lt;string, ResourceManager&gt;`. We should be able to use this as follows:

cs
            Dictionary&lt;string, ResourceSet&gt; localResourceSets = _resourceSets;

            // If any calls to Close throw, at least leave ourselves in a
            // consistent state.
            _resourceSets = new Dictionary&lt;string, ResourceSet&gt;();
            _lastUsedResourceCache = new CultureNameResourceSetPair();

            lock (localResourceSets)
            {
                foreach ((_, ResourceSet resourceSet) in localResourceSets)
                {
                    resourceSet.Close();
                }
            }
`</Code>
    <Description>We have the following `KeyValuePair` struct:

``

We get a warning in the foreach loop: `shared\System\Resources\ResourceManager.cs(307,26): error CS8619: Nullability of reference types in value of type 'KeyValuePair&lt;string, ResourceSet&gt;' doesn't match target type 'ResourceSet'.`

Correct me if this regression was not caused by this change, but we're getting this warning as we updated the compiler version to: 
`3.100.19.21705 (79b8271f)`

This is currently blocking: 

Maybe this was broken by: 

cc: @dotnet/nullablefc @chsienki @cston </Description>
  </Issue>
  <Issue>
    <IssueID>33975</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compilation error "csc.dll" exited with code 139 on ARMv7l</Title>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>33975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@NicolasDorier commented on [Thu Mar 07 2019](## Steps to reproduce

On
``

## Expected  behavior

Build succeed.

## Actual behavior

User reported compilation error "csc.dll" exited with code 134 on ARM.
The msbuild seems show error 139 from csc.dll.

## Environment data

@enorrmann can you provide precise `dotnet --version` here?

He tried with SDK `2.1.504` and `2.2.104` with same error it seems.

![image](


[msbuild.binlog](

Orignally reported on 

It seems same issue as  . I opened a new issue because this one happen on ARM32v7.





</Description>
  </Issue>
  <Issue>
    <IssueID>33965</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`System.TypedReference` should be treated as managed</Title>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33965</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Even once the [corefx issue]( (adding a dummy `object` field to the ref assembly for `TypedReference`) is fixed, we're not sure that the compiler will honor it properly. We may have to add a special case to recognize `TypedReference`.

The goal is that `var x = stackalloc TypedReference[10];` should be an error (because `TypedReference` is managed).

More [context](</Description>
  </Issue>
  <Issue>
    <IssueID>33963</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>33963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Generate constructor' should not add null checks for nullable parameters.</Title>
    <CreatedDate>08/03/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    public C(string foo, int? bar)
    {
        Foo = foo ?? throw new ArgumentNullException(nameof(foo));
        Bar = bar ?? throw new ArgumentNullException(nameof(bar));
    }

    public string Foo { get; }
    public int? Bar { get; }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 RC.1 SVC 1

'Generate constructor' with 'Add null checks' currently generates parameters which are pointlessly nullable, since the constructor throws if `null` is actually passed:

``

I'd expect nullable parameters to be passed over. I don't know what happens when you nullable reference types at it, but right now I really care about the experience with nullable value types.</Description>
  </Issue>
  <Issue>
    <IssueID>33953</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Complete Statement should not move semicolons through "[" and "]"</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>33953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![completestatement](

1. Have a method with an attribute.
2. Try to define a field above the method.
3. Typing a semicolon moves it after the attribute which is confusing.

This happens because before the semicolon is typed, the `[Attribute]` is parsed as `ElementAccessExpression `and belongs to the field definition.

Source: 

I hope that the user used custom Roslyn bits and this is not shipped yet for 16.0 but need to verify with the user.</Description>
  </Issue>
  <Issue>
    <IssueID>33952</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please reorder NullableAnnotation values to be in lattice order</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33952</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33952</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The values of NullableAnnotation are not in the order that they appear in the lattice.  Please reorder them so that they are in lattice order; that would permit a much simpler implementation of Meet and Join.</Description>
  </Issue>
  <Issue>
    <IssueID>33949</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unused Assignment false positive</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - Flow Analysis</Name>
        <IssueID>33949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class A
{
    public static void M(int? x)
    {
        A a = new A();
        a = M2(x ?? 1, a);
    }

    private static A M2(int? x, A a)
    {
        return a;
    }
}
`</Code>
    <Description>

This is flagged as an unused assignment, but it is used.

Update: I got a minimal repro, which requires a conditional expression as an argument prior to the read.

``</Description>
  </Issue>
  <Issue>
    <IssueID>33945</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33945</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regression in stackalloc array of ref struct (dotnet core 3 preview 3)</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33945</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33945</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33945</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;8.0&lt;/LangVersion&gt;
    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;


### Class1.cs
C#
using System;
using System.Runtime.InteropServices;

namespace test
{
    ref struct S
    {
    }

    public class Class1
    {
        public unsafe void M()
        {
            var x = stackalloc S[10];
        }
    }
}


### dotnet core 3 preview 2

$ dotnet build
Microsoft (R) Build Engine version 16.0.385-preview+g966cdf2ac6 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /home/david/tmp/test/test.csproj...
  Restore completed in 115.53 ms for /home/david/tmp/test/test.csproj.
/home/david/bin/dotnet2/sdk/3.0.100-preview-010184/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]
  test -&gt; /home/david/tmp/test/bin/Debug/netstandard2.0/test.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.22


### dotnet core 3 preview 3

$ dotnet build
Microsoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Persisting no-op dg to /home/david/tmp/test/obj/test.csproj.nuget.dgspec.json
  Restore completed in 127.26 ms for /home/david/tmp/test/test.csproj.
/home/david/bin/dotnet/sdk/3.0.100-preview3-010431/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]
Class1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]

Build FAILED.

Class1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]
    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:01.21
`</Code>
    <Description>This sample code builds successfully in dotnet core 3 preview 2 and earlier (including dotent core 2.x) but fails in dotnet core 3 preview 3

### test.csproj
``

Perhaps this is an unintended side effect of </Description>
  </Issue>
  <Issue>
    <IssueID>33944</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Build.cmd tries to build ibc training data when run locally</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>33944</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
~\source\repos\roslyn-alt [master ≡]&gt; .\Build.cmd
Roslyn.sln:
  RunTests -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\RunTests\Debug\net472\RunTests.exe
  CompilersBoundTreeGenerator -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\CompilersBoundTreeGenerator\x6
  4\Debug\netcoreapp2.1\BoundTreeGenerator.dll

...

  Microsoft.VisualStudio.IntegrationTest.Setup -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\VSSetup\Debug\Mic
  rosoft.VisualStudio.IntegrationTest.Setup.vsix
  Microsoft.VisualStudio.LanguageServices.IntegrationTests -&gt; C:\Users\jorobich\source\repos\roslyn-alt\artifacts\bin\M
  icrosoft.VisualStudio.LanguageServices.IntegrationTests\Debug\net472\Microsoft.VisualStudio.LanguageServices.Integrat
  ionTests.dll
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018: The "GenerateTrainingInputFiles" task failed unexpectedly. [C:\Users\jorobich\.nuget\
packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\Users\jor
obich\source\repos\roslyn-alt\artifacts\OptProf\Debug\Data\XamlOptProf\Configurations\Microsoft.Test.Performance.XamlOp
tProfCreateTests.UwpCreateProject_DesignerIsolated\csMicrosoft.VisualStudio.LanguageServices.SolutionExplorer.resources
.0.IBC.json'. [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj
]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\Users\j
orobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32
rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String
 msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\Users\jorobich\.nuget\packages\microsoft.dotn
et.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileS
hare share) [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri
es(IbcEntry[] ibcEntries, String outDir) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingIn
putFiles.cs:line 144 [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigni
ng.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri
es(OptProfTrainingTest[] tests, IbcEntry[] ibcEntries) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/Gene
rateTrainingInputFiles.cs:line 122 [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\to
ols\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.ExecuteImp
l() in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 84 [C:\Users\jorobic
h\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.Execute()
in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 42 [C:\Users\jorobich\.n
uget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutio
nHost.Execute() [C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.pr
oj]
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\VisualStudio.BuildIbcTrainingInp
uts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.&lt;ExecuteInstantiatedTask&gt;d__26.MoveNext() [
C:\Users\jorobich\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19127.8\tools\AfterSigning.proj]

Build succeeded.
`</Code>
    <Description>Steps to reproduce
- Check out master
- Run git clean -xfd
- Run Restore.cmd
- Run Build.cmd

``</Description>
  </Issue>
  <Issue>
    <IssueID>33941</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove BoundExpressionExtensions.GetTypeAndNullability and GetNullableAnnotation</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Remove `BoundExpressionExtensions.GetTypeAndNullability` and `BoundExpressionExtensions.GetNullableAnnotation`.

The methods are only used for setting the nullability of inferred locals in initial binding, but initial binding should not infer nullability.</Description>
  </Issue>
  <Issue>
    <IssueID>33937</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33937</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0059 doesn't realize assignment before rethrow is read in finally block</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33937</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33937</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33937</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

public static class Program
{
    public static void Main()
    {
        try
        {
            Test();
        }
        catch (Exception)
        {
        }
    }

    public static void Test()
    {
        var exceptionThrown = false;
        try
        {
            throw new Exception();
        }
        catch
        {
            // The `exceptionThrown` token is incorrectly greyed out in the IDE
            // IDE0059 Value assigned to 'exceptionThrown' is never used
            exceptionThrown = true;
            throw;
        }
        finally
        {
            // Breakpoint on this line is hit and 'true' is printed
            Console.WriteLine(exceptionThrown);
        }
    }
}
`</Code>
    <Description>**Version Used**: VS 2019 RC.1 SVC 1

``
</Description>
  </Issue>
  <Issue>
    <IssueID>33924</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33924</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Conditional expression should compute nullable result state from result state of operands</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33924</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33924</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33924</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently the computation is done in terms of nullable annotations.  But that is not correct, for example, with unconstrained type parameters that are known not to be null.  That fact is not representable in annotations, only in the nullable flow state.

See also #33664</Description>
  </Issue>
  <Issue>
    <IssueID>33923</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>There should be no "Possible dereference of a null reference" warnings for expression tree lambdas</Title>
    <CreatedDate>07/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>33923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Linq.Expressions;

namespace CSharp8Test
{
    class Program
    {
        static void Main(string[] args)
        {
            var ep = new ExpressionProcessor&lt;Outer&gt;();
            ep.ProcessExpression(o =&gt; o.Inner.S); //"Possible dereference of a null reference" warning
        }

        class ExpressionProcessor&lt;T&gt; 
        {
            public void ProcessExpression&lt;TProperty&gt;(Expression&lt;Func&lt;T, TProperty&gt;&gt; expression)
            {
            }
        }

        public class Outer
        {
            public Inner? Inner { get; set; }
        }

        public class Inner 
        {
            public string S { get; set; } = "";
        }
    }
}
`</Code>
    <Description>When calling a method which expects an expression tree (Expression&lt;Func&lt;T, TProperty&gt;&gt; parameter), and one of the properties in the expression tree is nullable, the compiler produces a nullable reference warning that cannot be worked around.

The following example code is based on a validation framework and simplified:
``
For 
`ep.ProcessExpression(o =&gt; o.Inner.S);`
I get a warning saying "Possible dereference of a null reference" because o.Inner might be null.
However, when working with Expressions I'm not dereferencing the object members, and I think the warning makes no sense here.

Using a null propagating operator like this: `ep.ProcessExpression(o =&gt; o.Inner?.S);` is not supported by the compiler.

**Version Used**: 
.NET Core 3.0.0-preview3-27503-5

**Expected Behavior**:
No warnings for expression tree lambda expressions (my preference)
OR
Support for null propagating operator in expression tree lambda expressions

**Actual Behavior**:
"Possible dereference of a null reference" warning</Description>
  </Issue>
  <Issue>
    <IssueID>33915</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Symbol completion doesn't trigger in switch expression</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>33915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the example depicted, I would expect `BinaryOperatorKind` to get offered, but no completion is offered.

![image](

FYI @gafter 
</Description>
  </Issue>
  <Issue>
    <IssueID>33913</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33913</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support `inlineDescription` parameter for `AssertSelectedCompletionItem` in ModernCompletionTestState</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>04/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33913</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33913</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>33913</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The parameter `inlineDescription` was added to `AssertSelectedCompletionItem` in  We should support modern equivalent in ModernCompletionTestState (
</Description>
  </Issue>
  <Issue>
    <IssueID>33912</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Don't run the nullable walker when the feature is not enabled</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>17/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33912</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33912</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>33912</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In a body of code where there are no warnings enabled for the nullable feature, we should not run the nullable walker.</Description>
  </Issue>
  <Issue>
    <IssueID>33910</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect formatter behavior in implicit conversions to a tuple</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33910</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Currently, the formatter wants to insert a space between the type and the argument list here. It should not, like all other conversions.</Description>
  </Issue>
  <Issue>
    <IssueID>33909</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>33909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>StackOverflow when compiling CoreCLR</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Building CoreCLR using either the Desktop compiler on Windows or the core compiler on OSX results in a stackoverflow: 

Stack trace is [stacktrace.txt](</Description>
  </Issue>
  <Issue>
    <IssueID>33908</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>33908</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>StackOverflow when compiling CoreFX</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33908</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33908</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Trying to move to the current Arcade toolset results in a stackoverflow when compiling CoreFX: 

Stack trace is 
[stacktrace2.txt]( -- Worth noting it exceeds the number of stack frames VS supports. I also have a dump locally, but it is 500mb.

Compiler version is `3.1.0-beta1-19127-06`, which corresponds to </Description>
  </Issue>
  <Issue>
    <IssueID>33905</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33905</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suppress nullable diagnostics in unreachable code</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33905</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33905</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Per LDM 2019-03-06, we should suppress nullable diagnostics in unreachable code.</Description>
  </Issue>
  <Issue>
    <IssueID>33901</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ConstructorArguments and NamedArguments fail to return arguments for attributes</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**:  2.10.0

**Steps to Reproduce**:

1. Compile and run the following code: 

**Expected Behavior**:

``
attribute.ConstructorArguments for HttpGet attribute should return a list with 1 argument and
attribute.NamedArguments should also return a dictionary of 1 argument.


**Actual Behavior**:

attribute.ConstructorArguments for both cases return empty list even though attributes in the code contain arguments.
attribute.NamedArguments also returns an empty list when it should return 1 entry.

![image](




</Description>
  </Issue>
  <Issue>
    <IssueID>33898</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Parameter used in XML literal reported as unused</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&gt; @mavasani This parameter is incorrectly reported as unused.

_Originally posted by @sharwell in </Description>
  </Issue>
  <Issue>
    <IssueID>33894</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async Completion: autocomplete for `override` sometimes missing an newline</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
        }

2. Add an new line after `Equals`, and type the below code(without comment), wait 1sec and press Enter to autocomplete GetHashCode()

            override G/*press Enter here to get GetHashCode()*/

3. See an new line is missing

NOTE: It sometimes may not reproduceable when press Ctrl+Z or just delete `GetHashCode()`  and repeat step 3, maybe remove all methods works.


**Expected Behavior**:
cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
            public override int GetHashCode()
            {
                return base.GetHashCode();
            }
        }


**Actual Behavior**:
cs
        public class XXX
        {
            public override bool Equals(object obj)
            {
                return base.Equals(obj);
            }
            public override int GetHashCode()
            {
                return base.GetHashCode();
            }        }
`</Code>
    <Description>**Version Used**: VS2019 Preview4/4.1

**Steps to Reproduce**:

1. switch `Async Completion` on
2. Type the below code(without comment)
``
</Description>
  </Issue>
  <Issue>
    <IssueID>33890</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>33890</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Sync namespace" doesn't fix references via extension methods defined in affected types</Title>
    <CreatedDate>06/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33890</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33890</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33890</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33890</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
namespace SyncExtMethods.Extensions
{
    public static class ExtensionClass
    {
        public static bool SyncExtMethods(this Class1 c1) =&gt; true;
    }
}


Then we'd expect the using in the file below would change to `using SyncExtMethods.Foo;`, which isn't the case however. 

cs
using SyncExtMethods.Extensions;

namespace SyncExtMethods
{
    public class Class1
    {
        public bool Foo() =&gt; this.SyncExtMethods();
    }
}
`</Code>
    <Description>If you try to change the namespace below to `SyncExtMethods.Foo` using "sync namespace" refactoring

``

Thanks @AbhitejJohn for reporting this issue!
FYI @jinujoseph </Description>
  </Issue>
  <Issue>
    <IssueID>33873</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>On private readonly field VS2019 Preview 4 suggest wrong style</Title>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>15/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>33873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWN``In the above code, VS2019 Preview 4 suggest to rename _connector to Connector with IDE1006 warning._This issue has been moved from VSTS ticketId: 806713__These are the original issue comments:_Visual Studio Feedback System on 3/3/2019, 11:46 PM (37 hours ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;Visual Studio Feedback System on 3/5/2019, 01:50 AM (11 hours ago): &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33867</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Constrained type parameter not treated as a value type for "in" extension method</Title>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33867</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33867</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        static void Test&lt;T&gt;(this in T o) where T : struct {}

is given the error message
 none
CS8338 The first parameter of an 'in' extension method 'Test' must be a value type.
`</Code>
    <Description>A method declared like this
``
This is inexplicable, given that it *is* a value type.
</Description>
  </Issue>
  <Issue>
    <IssueID>33862</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Revert workaround for "Restore original behavior of Shift+Enter during completion" when fix available</Title>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Revert #33828 when   will be available on the Editor side</Description>
  </Issue>
  <Issue>
    <IssueID>33860</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>33860</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move service hub code over to StreamJsonRpc v2.0</Title>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33860</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33860</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This would help derived unit testing services (live unit testing, source based discovery) to consume StreamJsonRpc v2.0.</Description>
  </Issue>
  <Issue>
    <IssueID>33858</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Move wrap/unwrap parameter to a sub-menu in the context menu</Title>
    <CreatedDate>05/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

I don't think these fixes are important enough to be the ordered first in the context menu.

![image](

I'd rather see them moved to `Change formatting` sub-menu, which should itself be the last item of the context menu.
</Description>
  </Issue>
  <Issue>
    <IssueID>33854</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>33854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>DesignerAttributeIncrementalAnalyzer needs to consume the new mechanism for registering "sub type" for CPS projects</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>24/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>33854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For performance reasons we opt'd DesignerAttributeIncrementalAnalyzer out of running for CPS projects: 

In  we've added a new mechanism for registering these attributes on a background thread and in a batch. This avoids CPS from evaluating and running design-time builds constantly while the analyzer is running. Roslyn needs to consume this new API so that our end-to-end for Windows Forms works.

@jinujoseph @heejaechang 

@lifengl @heejaechang What agreement did we come to for Rolsyn to actually consume the API? They don't have a dependency on CPS yet.</Description>
  </Issue>
  <Issue>
    <IssueID>33852</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019 Preview 4

**Steps to Reproduce**:

1. Paste VB code:

``

2. Remove the `$$` and type `[` at that location

**Expected Behavior**: Completion should show
**Actual Behavior**: Completion does not show

**Notes**:

This is related to a couple test failures for VB, including `TestCaretPlacement` and `OnlyClasses`.

Completion does work, but just not when triggered on `[`. For example, try triggering with `\` instead. In Old Completion, it correctly triggers on `[`.

I commented out the following line, and completion started triggering on `[` (but I don't know what else would go wrong as a result):


</Description>
  </Issue>
  <Issue>
    <IssueID>33851</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>33851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Semicolon typed mid-expression goes to an unexpected location</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019 Preview 4 Build 28701.123.d16.0

**Repro**: 
I hit &lt;kbd&gt;;&lt;/kbd&gt; between the two invocations in this declaration:

![semicolonweirdlocation](

**Expected**: The semicolon is inserted at that location. In my scenario, I could then continue typing a down arrow and then comment current line, thus reducing the declaration to just the first call.

**Actual**: The semicolon goes to the end of the entire declaration. Also, it's not done in a two-step undo, so ctrl+z doesn't put the semicolon back where I typed it.</Description>
  </Issue>
  <Issue>
    <IssueID>33847</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use distinct warning message for using `default` for unconstrained type parameter</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>33847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The existing warning is used for `null` plus `default` and reference types plus unconstrained type parameters. We should use distinct warnings to reduce confusion.
``</Description>
  </Issue>
  <Issue>
    <IssueID>33846</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Heavy allocations in UnboundLambdaState.CanonicallyCompareDiagnostics</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>17/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>33846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.9.7

:link: Originally filed as 

`UnboundLambdaState.CanonicallyCompareDiagnostics` is responsible for nearly 8GB of allocations (14% of total) in this trace. Nearly all of this number comes from `CSDiagnostic.ToString()` calling `DiagnosticFormatter.Format`. Nested within those we find:

* `CSharp.ErrorFacts.GetMessage` calls `Enum.ToString` (4.5GB)
* `DiagnosticFormatter.Format` calls `string.Format` (1.6GB)
* `DiagnosticInfo.GetMessage` calls `string.Format` (0.64GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.FormatSourceSpan` (0.4GB)
* `DiagnosticFormatter.Format` calls `DiagnosticFormatter.GetMessagePrefix` (0.4GB)
</Description>
  </Issue>
  <Issue>
    <IssueID>33845</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Renamer.RenameSymbolAsync should not rename the use of a delegate with a different number of type parameters.</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>33845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>33845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
       string originalCode = @"
         delegate void Action&lt;T1, T2&gt;(T1 t1, T2 t2);
    class Class1&lt;T&gt; 
    { 
        public static readonly Action&lt;Exception&gt; Throw = delegate(Exception ex) { throw ex; };
        private Action&lt;T&gt; _onNext;
        Class1(Action&lt;T&gt; onNext, Action&lt;Exception&gt; onError)
        {
            this._onNext = onNext;
        }
    }
        ";
            var expectedCode = @"
         delegate void Action2&lt;T1, T2&gt;(T1 t1, T2 t2);
    class Class1&lt;T&gt; 
    { 
        public static readonly Action&lt;Exception&gt; Throw = delegate(Exception ex) { throw ex; };
        private Action&lt;T&gt; _onNext;
        Class1(Action&lt;T&gt; onNext, Action&lt;Exception&gt; onError)
        {
            this._onNext = onNext;
        }
    }
        ";
            var workspace = new AdhocWorkspace();
            string projName = "NewProject";
            var projectId = ProjectId.CreateNewId();
            var versionStamp = VersionStamp.Create();
            var projectInfo = ProjectInfo.Create(projectId, versionStamp, projName, projName, LanguageNames.CSharp);
            var newProject = workspace.AddProject(projectInfo);
            var sourceText = SourceText.From(originalCode);

            var newDocument = workspace.AddDocument(newProject.Id, "NewFile.cs", sourceText);
            
            Document doc = newDocument;

            DelegateDeclarationSyntax decl = doc.GetSyntaxRootAsync().Result.
                DescendantNodes().
                OfType&lt;DelegateDeclarationSyntax&gt;().First(x =&gt; x.Identifier.Text == "Action");
            var semanticModel = doc.GetSemanticModelAsync().Result;
            var typeSymbol = semanticModel.GetDeclaredSymbol(decl);

            string oldName = typeSymbol.Name;
            string newName = oldName + "2";


            var newSolution = Renamer.RenameSymbolAsync(doc.Project.Solution, typeSymbol, newName, null).Result;
            var modifiedDoc = newSolution.Projects.First().Documents.First();

            ;
            Assert.Equal(expectedCode, modifiedDoc.GetTextAsync().Result.ToString());
        }
`</Code>
    <Description>**Version Used**: 
2.10.0
**Steps to Reproduce**:

``

**Expected Behavior**:
To rename only the definition of the delegate `delegate void Action&lt;T1, T2&gt;(T1 t1, T2 t2);` . The use of the `action&lt;T&gt;` delegate remains unchanged.
**Actual Behavior**:
The delegate definition is renamed to `Action2&lt;T1, T2&gt;`. And the references to the `action&lt;T&gt;` delegate to `Action2&lt;T&gt;` are renamed</Description>
  </Issue>
  <Issue>
    <IssueID>33843</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid IDE0059 (value never used) with using and local function capture</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>19/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
private class Disposable: IDisposable { public void Dispose() { } }
public int M()
{
    var result = 0;
    void append() =&gt; result += 1; // IDE0059 for 'result'
    using (var a = new Disposable())
        append();
    return result;
}


**Expected Behavior**:
No message, everything is used as expected.

**Actual Behavior**:
IDE0059 is triggered within the local function. Applying the code fix changes the local function to the invalid
csharp
void append() =&gt; 1;
`</Code>
    <Description>**Version Used**: 
16.0.0 RC

**Steps to Reproduce**:

``

Not only the using is required, but also the assignment within. Removing `var a = ` from the sample also removes IDE0059.</Description>
  </Issue>
  <Issue>
    <IssueID>33839</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intendation for switch expression is not good in expression bodied method</Title>
    <CreatedDate>04/03/2019</CreatedDate>
    <ClosedDate>15/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>33839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2019 RC
![image](
![image](
![image](
The first case should be considered mis-aligned, comparing to object initializer.</Description>
  </Issue>
  <Issue>
    <IssueID>33837</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing "Analyzer with Code Fix" project template in VS 2017 (15.9.7)</Title>
    <CreatedDate>03/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
    <IssueLabels />
    <Description>Visual Studio 2017 version 15.9.7: 

**Steps to Reproduce**:

1. Clean Visual Studio 2017 Install
2. Install "Visual Studio extension development" and ".NET Core cross-platform development" workloads
3. Launch VS2017 and navigate to new project wizard, extensibility folder, no projects for "Code Analyzer with Code Fix (.NET Standard)"

**Expected Behavior**: Code Analyzer project should be available to create a project.

**Actual Behavior**: Option missing.

Referencing:


Install Settings
`Microsoft Visual Studio Professional 2017 
Version 15.9.7
VisualStudio.15.Release/15.9.7+28307.423
Microsoft .NET Framework
Version 4.7.03056

Installed Version: Professional

Application Insights Tools for Visual Studio Package   8.14.20131.1
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2017   15.9.04012.0
ASP.NET and Web Tools 2017

ASP.NET Core Razor Language Services   15.8.31590
Provides languages services for ASP.NET Core Razor.

ASP.NET Web Frameworks and Tools 2017   5.2.60913.0
For additional information, visit 

Azure App Service Tools v3.0.0   15.9.03024.0
Azure App Service Tools v3.0.0

Azure Functions and Web Jobs Tools   15.9.02046.0
Azure Functions and Web Jobs Tools

C# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

JavaScript Language Service   2.0
JavaScript Language Service

Microsoft Azure Tools   2.9
Microsoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.0.0

Microsoft Continuous Delivery Tools for Visual Studio   0.4
Simplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft Library Manager   1.0
Install client-side libraries easily to any web project

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual Studio Tools for Containers   1.1
Develop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit &amp; refresh your app without having to rebuild the container.

NuGet Package Manager   4.6.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit 

ProjectServicesPackage Extension   1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

ResourcePackage Extension   1.0
ResourcePackage Visual Studio Extension Detailed Info

SQL Server Data Tools   15.1.61901.24070
Microsoft SQL Server Data Tools

TypeScript Tools   15.9.20918.2001
TypeScript Tools for Microsoft Visual Studio

Visual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
Visual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

Visual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.
Microsoft Visual F# Tools 10.2 for F# 4.5

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

Visual Studio Tools for Containers   1.0
Visual Studio Tools for Containers`
</Description>
  </Issue>
  <Issue>
    <IssueID>33829</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Typing at the start of a read-only document crashes the IDE</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2773f5e

Caught by integration test `BasicEditAndContinue.DocumentStateTrackingReadonlyInRunMode`.
</Description>
  </Issue>
  <Issue>
    <IssueID>33825</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Async completion fails to account for brace matching sessions</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>21/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2773f5e

Caught by integration test `CompletionUsesTrackingPointsInTheFaceOfAutomaticBraceCompletion`.
</Description>
  </Issue>
  <Issue>
    <IssueID>33823</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Commit on shift+enter fails for async completion</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2773f5e

Caught by integration test `CommitOnShiftEnter`.
</Description>
  </Issue>
  <Issue>
    <IssueID>33822</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async completion fails to scroll the caret into view</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2773f5e

Caught by integration test `EnsureTheCaretIsVisibleAfterALongEdit`.
</Description>
  </Issue>
  <Issue>
    <IssueID>33821</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>33821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>help message for langversion isn't updated</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>20/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>33821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

csc 3.0.19.12206 (ec366687)
(installed with Visual Studio 2019 RC)

**Steps to Reproduce**:

Show csc help message.

**Expected Behavior**:

Help message for `-langversion` should refer to `latestMajor` and `preview`, and describe `default` as latest including minor.

**Actual Behavior**:

The message isn't updated: 
</Description>
  </Issue>
  <Issue>
    <IssueID>33818</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>update refactoring provider to have something that we can use to order its listing in lightbulb</Title>
    <CreatedDate>02/03/2019</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>33818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public void RegisterCodeFix(CodeAction action, Diagnostic diagnostic)


and refactoring is done this way
http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringContext.cs,51

csharp
public void RegisterRefactoring(CodeAction action)


I suggest we add an overload (or its variation) for coderefactoring provider

csharp
public void RegisterRefactoring(CodeAction action, TextSpan span)
`</Code>
    <Description>currently, we distinguish refactoring and code fix but in reality, it doesn't matter much for users.

code fix can use diagnostic and caret location to figure out what's more important and then use priority to sort things in light bulb menu.

but refactoring doesn't have such mark (anchor) like diagnostic for code fix that we can use to place it in right place in menu.

so we do something like this - 

and distinguish refactoring and code fix. I believe this will be just a source of an endless tweak as new refactoring is added and we want to place it in a different place. 

I think we should fix the root cause not just keep changing ordering rules. also, we don't actually have tests for all different combinations of selection and refactorings and code fix mix so we actually have no idea how/what behavior got changed due to this kind of tweak.

we should discuss how we should address this once for all in a design meeting.

...

my suggestion will be making code refactoring and code fix to behave the same (this theme is consistent with this -  and order those without distinguishing two.

right now, the only difference between these 2 for ordering is the applicable span for suggestedactionset.

code fix has the applicable span from diagnostic it is fixing, but refactoring gets it from selection (which might or might not directly related to the refactoring and it get even wierdier if there is no explicit selection) 

due to that, ordering those 2 (code fix and code refactoring) without distinguishing them mess things up. and we had to do this hueristic based ordering we have even though we don't actually know whether selection is used for refactoring or not.

if we see code fix provider, code fix is registered this way (or variation of the API)


``

and we use that span for applicable span for suggestedActionSet and for those refactoring that added this way, we don't disthinguish it from code fixes when ordering.

also, another benefit of this is we no longer need to do the hard to discover "caret must be on this specific magic location for refactoring to show up in LB".

now we can include refactoring in menu if the span provided is on the line where caret is on, exact same behavior as code fix.

we can leave existing API as it is, so refactoring that truely depends on selection like extract method can still use it.  

...

the suggestion above is something I just think on top of my head so we can discuss more in design meeting.

</Description>
  </Issue>
  <Issue>
    <IssueID>33807</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AsyncCompletionService needs to allow to configure UseAsyncCompletion per view</Title>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>21/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSMac currently requires Roslyn to operate in legacy completion mode for some views, and UseAsyncCompletion for other views.

The code here prevents this in two ways:
1. it checks GlobalOptions instead of per-view options: 
2. it caches the value globally and doesn't re-query it per view

We need this so we can configure whether to use the legacy completion per view.</Description>
  </Issue>
  <Issue>
    <IssueID>33797</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration tests do not cover async completion</Title>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>03/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Async completion is completely disabled for integration testing, offering us no validation of the upcoming feature:

</Description>
  </Issue>
  <Issue>
    <IssueID>33783</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Different handling of unreachable code and default fallthrough in switch block</Title>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>33783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 RC (csc.exe 3.0.19.12206 (ec366687))

**Steps to Reproduce**:
Compile this code (I used `csc.exe Class1.cs -target:library -langversion:7.3`):

    int Foo(bool a)
    {
        switch (a)
        {
            case true:
                return 1;
            case false:
                return 2;
            default:
                return 3;
        }
    }

**Expected Behavior**:
No warnings.

**Actual Behavior**:
You'll get warning CS0162: Unreachable code detected. This wasn't the case with Visual Studio 2017 (csc.exe 2.10.0.0 (b9fb1610)). This warning is of course promoted to an error if warnings as errors is enabled, which is how I found it. Is this a problem? I realize that analysis may have improved.

However, 2019 then suggests replacing it with:

    int Foo(bool a)
    {
        switch (a)
        {
            case true:
                return 1;
            case false:
                return 2;
            default:
        }
    }

Which now compiles without warnings. This code *fails* with Visual Studio 2017:

    CS8070: Control cannot fall out of switch from final case label ('default')
    CS0161: 'Class1.Foo(bool)': not all code paths return a value

But I am using langversion 7.3 for both. Shouldn't the same language version mean that it should compile with the same result?</Description>
  </Issue>
  <Issue>
    <IssueID>33782</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Xmldoc with &lt;see cref="Foo{T}(T?)"/&gt; or similar fails to compile</Title>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>33782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Visual Studio 2019 RC (csc.exe version 3.0.19.12206 (ec366687))**: 

**Steps to Reproduce**:

Write this code. Note that Visual Studio helps you complete the `&lt;see cref...&gt;`. Enable XML documentation file and enable all warnings as errors.

    using System;
    namespace Repro2
    {
        /// &lt;summary/&gt;
        public class Class1
        {
            void Foo&lt;T&gt;(T t) where T : class { }
            void Foo&lt;T&gt;(T? t) where T : struct { }

            /// &lt;summary&gt;
            /// See &lt;see cref="Foo{T}(T?)"/&gt;
            /// &lt;/summary&gt;
            void Bar() { }
        }
    }

**Expected Behavior**:
It works.

**Actual Behavior**:
It fails with CS1580	Invalid type for parameter T? in XML comment cref attribute: 'Foo{T}(T?)'

If you change it to `&lt;see cref="Foo{T}(Nullable{T})"/&gt;` it works, but Visual Studio will now nag you to change it back to the version that doesn't :p.

This is a regression; both syntaxes worked in Visual Studio 2017. The old compiler produced the following in the document file:

    &lt;see cref="M:Repro2.Class1.Foo``1(System.Nullable{``0})"/&gt;

The new one produces:

    &lt;see cref="M:Repro2.Class1.Foo``1(``0)"/&gt;

(and warns/fails if warnings as errors is enabled.)</Description>
  </Issue>
  <Issue>
    <IssueID>33780</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetUnreferencedAssemblyIdentities and GetRequiredLanguageVersion</Title>
    <CreatedDate>01/03/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>33780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>we have these 2 new APIs

GetUnreferencedAssemblyIdentities ( and GetRequiredLanguageVersion (

1 is instance API and the other is a static method.

both of them work by going through all diagnostic arguments and see whether it has a certain type of arguments.

and we do that for every diagnostic that is reported.

GetUnreferencedAssemblyIdentities restrict the iteration by checking error code. 
GetRequiredLanguageVersion just do that for every diagnostic ever created.

since IDE needs IDiagnosticPropertiesService ( per language anyway and it is diagnostic.Arguements that is not exposed (internal) but not error code itself, it looks like we can make GetUnreferencedAssemblyIdentities as static method as well? and IDE side check error code before calling GetUnreferencedAssemblyIdentities ? 

another thing is iterating through arguments for every diagnostic ever created ( seems a potential perf bottleneck?

we might be able to either restrict or filter out diagnostics without blindly always iterate through all arguments by using properties of diagnostic?

we can also use a singleton property bag so that reducing allocations?




</Description>
  </Issue>
  <Issue>
    <IssueID>33407</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33407</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Convert to struct has errors on uninitiated members</Title>
    <CreatedDate>15/02/2019</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33407</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33407</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33407</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Class
{
    void MyMethod()
    {
        var tuple = (3, "string");
    }


2. Place cursor before open parenthesis and type (Ctrl+.) to open codefixes
![image](https://user-images.githubusercontent.com/8293542/52825445-a178d880-3071-11e9-822e-47189759e04c.png)

3. Select Convert to struct

**Expected Behavior**:
Generated struct gives no errors.

**Actual Behavior**:
Generated struct gives errors on uninitialized members Item1 and Item2.
![image](https://user-images.githubusercontent.com/8293542/52825427-9160f900-3071-11e9-92e5-3ecd00e1f702.png)

Adding these declarations fixes warnings:

internal struct NewStruct
{
    public int Item1 { get; }
    public string Item2 { get; }
...
`</Code>
    <Description>**Version Used**: Visual studio 2019

**Steps to Reproduce**:

1. Have code

``

@CyrusNajmabadi Julien mentioned you might want to take a look. :)</Description>
  </Issue>
  <Issue>
    <IssueID>33398</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove extra lambda binding in NullableWalker.ApplyConversion</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`NullableWalker.ApplyConversion` currently rebinds the lambda operand for `ConversionKind.AnonymousFunction`. Remove [this code]( if not needed.</Description>
  </Issue>
  <Issue>
    <IssueID>33394</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing CS8625 for constructor call on static field initialization</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
public class C
{
    public C(string a) { }
    public static C Empty = new C(null); // Missing CS8625
}
`</Code>
    <Description>**Version Used**: 
16.0.0 Preview 3.0

**Steps to Reproduce**:

``

**Expected Behavior**:
Calling `C`'s constructor with `null` should generate a warning

**Actual Behavior**:
It doesn't, but does when `static` is removed</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>33393</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inferred type should flow into discards</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact]
        public void Discard_03()
        {
            // https://github.com/dotnet/roslyn/issues/33393 Need to re-infer discards.
            // The types below should have non-oblivious type arguments in the expected results.
            var source =
@"class C&lt;T&gt;
{
" + NonNullTypesOn() + @"
    void F(bool b, object o1, object? o2, C&lt;object&gt; o3, C&lt;object?&gt; o4)
    {
        _ /*T:object?*/ = (b ? o1 : o2);
        _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o4); // 1
        _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o3); // 2
        _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o5);
        _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o5);
    }
" + NonNullTypesOff() + @"
    static C&lt;object&gt; o5 = null;
}";
            var comp = CreateCompilation(new[] { source });
            comp.VerifyDiagnostics(
                // (7,40): warning CS8619: Nullability of reference types in value of type 'C&lt;object?&gt;' doesn't match target type 'C&lt;object&gt;'.
                //         _ /*T:C&lt;object&gt;?*/ = (b ? o3 : o4); // 1
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "o4").WithArguments("C&lt;object?&gt;", "C&lt;object&gt;").WithLocation(7, 40),
                // (8,35): warning CS8619: Nullability of reference types in value of type 'C&lt;object?&gt;' doesn't match target type 'C&lt;object&gt;'.
                //         _ /*T:C&lt;object&gt;?*/ = (b ? o4 : o3); // 2
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "o4").WithArguments("C&lt;object?&gt;", "C&lt;object&gt;").WithLocation(8, 35)
                );
            comp.VerifyTypes();
        }
`</Code>
    <Description>In `_ = expr;` the result type of the discard remains the type from initial binding rather than the type of `expr` that is computed during the nullable walker.. See `Discard_03` below.  See also #29635.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>33391</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8618 (uninitialized field) when checking for null</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C
{
    readonly string s;
    C(bool a) // CS8618
    {
        if (a)
            s = "";
        if (s == null)
            throw new InvalidOperationException();
    }
}
`</Code>
    <Description>**Version Used**: 
16.0.0 Preview 3

**Steps to Reproduce**:

``
This is similar to #25529.
After possibly setting the the field, the code checks if the field is still default-initialized and throws if not. After that, `s` is definitely non-null.

**Expected Behavior**:
The constructor either initializes or throws, so there shouldn't be a warning.

**Actual Behavior**:
CS8618 for the constructor</Description>
  </Issue>
  <Issue>
    <IssueID>33390</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect quick fix suggestion with default parameters</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.NET Core 3 Preview 2 / VS 2019 Preview 3

When an optional parameter is combined with compound assignment, the analyzers show an incorrect suggestion to remove a redundant parameter:

![image](

Same code before changing to the compound assignment does not show any suggestions on the parameters:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>33388</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>33388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect usage of StructLayout attribute cause VS crash</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>33388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Create C# project and use this code:    using System.Runtime.InteropServices;    [StructLayout(LayoutKind.Sequential, Size = Marshal.SizeOf(Test))]    public struct Test    {    }or:    using System.Runtime.InteropServices;    [StructLayout(LayoutKind.Sequential, Pack = Marshal.SizeOf(Test))]    public struct Test    {    }_This issue has been moved from VSTS ticketId: 790164__These are the original issue comments:_Visual Studio Feedback System on 2/12/2019, 01:29 AM (2 days ago): &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33387</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>33387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>new T does not handle nullable property setters.</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#

        [Fact]
        public void New_04()
        {
            var source = @"
class C
{
    object Prop { get; set; }
    void M&lt;T&gt;() where T : C, new()
    {
        var c = new T() { Prop = null }; // 1
        _ = c.Prop.ToString(); // 2
    }
}";

            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
        }
`</Code>
    <Description>``

Currently, no warnings are reported, because we're not handling the object initializer for `BoundNewT` nodes.</Description>
  </Issue>
  <Issue>
    <IssueID>33385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inferred nullability of type parameters doesn't take nullability learnt from contract annotations into account</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System.Runtime.CompilerServices;

class C
{
  void Test1(string? s1)
  {
    var s2 = M(s1, s1);
    s1.ToString(); // no warnings, Roslyn knows that s1 cannot be null after M(s1, s1) call
    s2.ToString(); // false warning, the second argument is knonwn to be not null, therefore T is non-nullable string
    s2 = null;
  }

  static extern T M&lt;T&gt;([EnsuresNotNull] string? s, T t);
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}


**Expected Behavior**:
No warnings for the dereference of `s2`. Warning for assigning `null` to `s2`.
`s1` is known to be not null after the call. Therefore `C.M'T` should be inferred to be a non-nullable string and `s2` must be inferred to be a non-nullable string.

**Actual Behavior**:
`s2` is inferred to be a nullable string which is incorrect. No warnings for assigning it with `null` and false warnings on its derferences.

**Notes**
Similar example with explicit non-nullable value produces false warning for nullability mismatch in the variable's initializer
`string s2 = M(s1, s1);`

If I split assertion and type arguments inference into separate calls Roslyn is able to produce correct warnings e.g.
cs
#nullable enable
using System.Runtime.CompilerServices;

class C
{
  void Test1(string? s1)
  {
    AssertionOnly(s1);
    var s2 = InferenceOnly(s1);
    s2.ToString(); // no warnings
    s2 = null; // cannot assign null to a non-nullable target
  }

  static extern void AssertionOnly([EnsuresNotNull] string? s);
  static extern T InferenceOnly&lt;T&gt;(T t);
}

namespace System.Runtime.CompilerServices
{
  class EnsuresNotNullAttribute : System.Attribute { }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>33384</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Operator '&gt;' cannot be applied to operand 'default'</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    long foo;

    if (foo &gt; default) // CS8310
    {

    }
`</Code>
    <Description>**Version Used**:

VS2019 Preview 3.0
C# language version 7.3

**Steps to Reproduce**:

``

**Expected Behavior**:

This compiles, as `default` is syntactic sugar for `default(T)` (in this case, `default(long)`).

**Actual Behavior**:

It doesn't compile.</Description>
  </Issue>
  <Issue>
    <IssueID>33382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0054 "Use compound assignment" false positive in object initializer</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>19/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2019 Preview 3

**Steps to Reproduce**:

``

There is an IDE0054 "Use compound assignment" hint for `level = level - 1`, but this doesn't make sense in an object initializer.

![ide0054](</Description>
  </Issue>
  <Issue>
    <IssueID>33381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# XML comments displayed incorrectly when they contain a &lt; symbol</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>33381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the IDE when a C# file is loaded that contains an XMLComment and the comment contains a &amp;lt; within the comment text the line is incorrectly formated  Text before the &amp;lt; is Green by default the XMLDocument color. Everything the the &amp;lt; to the &amp;gt; is display as grey, then the text is again Green. I belive this is related to Roslyn Classifier or SyntaxWalker. I have attached a file from CorFX that displays the issue the best._This issue has been moved from VSTS ticketId: 783216__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33380</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Script generation slows down after many compilation/execution cycles</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>33380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>33380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
            var watch = new Stopwatch();
            watch.Start();
            for (int i = 0; i &lt; 5000; ++i)
            {
                var script = CSharpScript.Create&lt;int&gt;("1", ScriptOptions.Default);
                int foo = script.RunAsync().Result.ReturnValue;
                if (i % 250 == 0)
                {
                    watch.Stop();
                    Console.WriteLine(watch.ElapsedMilliseconds);
                    watch.Restart();
                }
            }



**Expected Behavior**:

Compilation time stays within a certain border, outputted numbers do not increase.

**Actual Behavior**:

Compilation time keeps increasing

Output of program:


1263
2435
2487
2509
2615
2665
2684
2711
2774
2824
2932
2971
3016
3046
3105
3172
3229
3374
3434
3410
`</Code>
    <Description>**Version Used**: 2.10.0 / master

**Steps to Reproduce**:

Tested with .NET Framework 4.7.2

*Example Program:*
``</Description>
  </Issue>
  <Issue>
    <IssueID>33379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>33379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractCommandHandlerTestState.WaitForAsynchronousOperationsAsync does not wait for async completion operations to complete</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>24/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>33379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Need to change WaitForAsynchronousOperationsAsync for async completion purposes to wait for completion: it is available either by waiting for session.GetComputedItems (for a specific text view) or by subscribing for events  IAsyncCompletionBroker.CompletionTriggered and then for session.ItemsUpdated.</Description>
  </Issue>
  <Issue>
    <IssueID>33378</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33378</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS becomes busy on switch expression</Title>
    <CreatedDate>14/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33378</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33378</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>33378</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
static int M(object x) =&gt; x switch
{
    int _ =&gt; 0,
};
`</Code>
    <Description>**Version Used**: 

Visual Studio 16.0.0 Preview 3.0
LangVersion 8.0

**Steps to Reproduce**:

``

**Expected Behavior**:

No error.

**Actual Behavior**:

The code completion gets wrong and Visual Studio becomes busy.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>33361</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Monodevelop doesn't works with roslyn when Visual Studio 2019 preview installed before</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>11/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio\2019\Preview\MSBuild\15.0\Bin\Roslyn

**Steps to Reproduce**:

1. Install Visual Studio 2019 Preview
2. Compile MonoDevelop as described in guide 
3. Create any c# project, compile and see an error:
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Microsoft.CSharp.CurrentVersion.targets(5,5): Error MSB4019: The imported project "C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets" was not found. Confirm that the path in the declaration is correct, and that the file exists on disk. (MSB4019) (MyGtkSample)

**Expected Behavior**:
The MonoDevelop should work with Visual Studio 2019 preview.

**Actual Behavior**:
I see an error
I created issue there:

@Therzok says that it's roslyn issue
![52564508-14cde080-2e0d-11e9-8c92-bc39b5a37b02 1](</Description>
  </Issue>
  <Issue>
    <IssueID>33359</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing possible dereference of a null reference warning for an unboxing conversion from an unconstrained type parameter type</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>10/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
class C
{
  interface I { }
  struct S : I {}

  static void Main()
  {
    M&lt;S, I?&gt;(null);
  }

  static void M&lt;T ,V&gt;(V v) where T : struct, V
  {
    var t = ((T) v);
  }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
``
**Expected Behavior**:
Warning `CS8602 Possible dereference of a null reference.` reported for the cast `(T) v`.
Roslyn does know that the variable `v` can contain null values and correctly warns about its usages in other usage scenarios e.g. `v.ToString()`


**Actual Behavior**:
No warnings. The program crashes at runtime at the line `var t = ((T) v);`</Description>
  </Issue>
  <Issue>
    <IssueID>33354</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Control Flow Graph : Invalid Operation Exception The feature "flow-analysis" is deactivated</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
 var source = @"
class C
{
    void M(int x)
    {
        x = 0;
    }
}";
            var tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("c", new[] { tree });
            var model = compilation.GetSemanticModel(tree, ignoreAccessibility: true);
            var methodBodySyntax = tree.GetCompilationUnitRoot().DescendantNodes().OfType&lt;BaseMethodDeclarationSyntax&gt;().Last();

            Console.WriteLine(tree);
        
            var cfgFromSyntax = ControlFlowGraph.Create(methodBodySyntax, model);

            var operation = (IMethodBodyOperation)model.GetOperation(methodBodySyntax);
            var cfgFromOperation = ControlFlowGraph.Create(operation);


**Expected Behavior**:
Create a control flow graph from the c# source code
**Actual Behavior**:
I get an error in the following code lines : 

var cfgFromSyntax = ControlFlowGraph.Create(methodBodySyntax, model);
var cfgFromOperation = ControlFlowGraph.Create(operation);
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis 2.10.0
**Code**:
``
the Error is : 

&gt; The feature "flow-analysis" is deactivated

**Solution i tried**:
I tried the solution suggested by Mavasani in the issue #2003  
 
but i still have the same problem
</Description>
  </Issue>
  <Issue>
    <IssueID>33347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Variables known to be non-null sometimes artifically restricted to one variable</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact]
        public void NestedNullConditionalAccess()
        {
            var source =
@"class Node
{
    public Node? Next = null;
    void M(Node node) { }
    private static void Test(Node? node)
    {
        node?.Next?.Next?.M(node.Next);
    }
}
";
            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());
            comp.VerifyDiagnostics();
        }


this test fails - the compiler incorrectly reports

 none

                // (7,29): warning CS8604: Possible null reference argument for parameter 'node' in 'void Node.M(Node node)'.
                //         node?.Next?.Next?.M(node.Next);
                Diagnostic(ErrorCode.WRN_NullReferenceArgument, "node.Next").WithArguments("node", "void Node.M(Node node)").WithLocation(7, 29)
`</Code>
    <Description>In a number of places in the `NullableWalker`, we set a single variable to the non-null state.  But in many of those cases, we should be using `GetSlotsToMarkAsNotNullable()` to mark more than one variable non-null.

Here is an example of a test for one of them:

``

Tests and comments in the code will refer to this issue.</Description>
  </Issue>
  <Issue>
    <IssueID>33346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect inference of nested nullability for arrays</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
    static void F(object[] a, object?[] b)
    {
        var c = new[] { a, b };
        c[0][0].ToString(); // missing error 2
        var d = new[] { a, b! };
        d[0][0].ToString(); // missing error 3
        var e = new[] { b!, a };
        e[0][0].ToString(); // missing error 4
    }
`</Code>
    <Description>Since arrays are covariant, we should use the lower-bound rule for merging (the element type) of two array types.  But we do not appear to do that. Here is an excerpt from `NullableReferenceTypeTests.ImplicitlyTypedArrayCreation_02` that shows the missing errors:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>33345</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code fix for "use pattern matching" should be removing blanks lines it introduces</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Unlike other code fixes, "use pattern matching" doesn't remove blank lines when it removes an assignment:

``

Hit in: 

Make sure it handles both the case where code _and_ trivia follows it.</Description>
  </Issue>
  <Issue>
    <IssueID>33344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NullableWalker fails to update type for a default expression</Title>
    <CreatedDate>13/02/2019</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>33344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        public override BoundNode VisitDefaultExpression(BoundDefaultExpression node)
        {
            Debug.Assert(!this.IsConditionalState);

            var result = base.VisitDefaultExpression(node);
            TypeSymbol type = node.Type;
            if (EmptyStructTypeCache.IsTrackableStructType(type))
            {
                int slot = GetOrCreateObjectCreationPlaceholderSlot(node);
                if (slot &gt; 0)
                {
                    this.State[slot] = NullableFlowState.NotNull;
                    InheritNullableStateOfTrackableStruct(type, slot, valueSlot: -1, isDefaultValue: true, isByRefTarget: false, slotWatermark: GetSlotWatermark());
                }
            }

            // PROTOTYPE(ngafter): this fails to produce an updated tuple type for a default expression
            // (with nullable element types where those element types were capable of containing null)
            _resultType = TypeWithState.ForType(type);
            return result;
        }
`</Code>
    <Description>In the following code in `NullableWalker`, the result tuple type is not updated to reflect that some of its element types may contain null.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>33335</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Check expression for null</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Customer request copying here.

**Version Used**: Visual Studio 2017

**Steps to Reproduce**:

&gt; 1. Have a potential nullreferenceexception 
![image](

&gt; 2. The variable attrib can be null and attrib.Value throws NullReferenceException. Resharper prompts an option to add null check or use ?. to avoid this exception.
![image](


**Expected Behavior**:
Receive warning on potential null reference exception.

**Actual Behavior**:
No warning is given.
</Description>
  </Issue>
  <Issue>
    <IssueID>33332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning reported for [CallerMemberName] argument default value</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A warning is reported for the `[CallerMemberName]` argument default value although the argument could be considered non-null.
``
Reported by @onovotny.</Description>
  </Issue>
  <Issue>
    <IssueID>33331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow type inference for class members</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
    <IssueLabels />
    <Description>I understand that using type inference for class members is a topic already raised in the past but here I want to show how the absence of it is highly detrimental to performance in some cases. In our code we have big auto-generated chunks with lots of lambdas passed as arguments. After removing all bottlenecks related to heap allocation, we are still stuck with delegates for lambdas heap-allocated upon instantiation of an object which significantly slows down the instantiation. We’d like to use class methods instead of lambdas called through static class methods to avoid the delegate allocations but in that case we would lose type inference which is no go for us. Please check the code below that presents the issue and the proposed solution.
`
        class Class1
        {
            bool b;

            static double F(Class1 c) { return c.f(); }
            static Func&lt;Class1, double&gt; _F = F;
            double f() { return this.b ? 10.0 : 20.0; }

            public Class1()
            {
                Class2.Create(this, () =&gt; this.b ? 10.0 : 20.0); // Type inference but heap allocation (assume hundreds of this)

                Class2.Create(this, _F); // No heap allocation but can't use type inference for class members

                // Proposal:
                // static var F(Class1 c) { return c.f(); }
                // static var _F = F;
                // var f() { return this.b ? 10.0 : 20.0; }
            }
        }

        class Class2
        {
            public static Class3&lt;T&gt; Create&lt;T&gt;(Class1 c, Func&lt;T&gt; f)
            {
                return new Class3&lt;T&gt;(c, f);
            }

            public static Class3&lt;T&gt; Create&lt;T&gt;(Class1 c, Func&lt;Class1, T&gt; f)
            {
                return new Class3&lt;T&gt;(c, f);
            }

            public class Class3&lt;T&gt;
            {
                public Class3(Class1 c, Func&lt;T&gt; f) { }
                public Class3(Class1 c, Func&lt;Class1, T&gt; f) { }
            }
        }`</Description>
  </Issue>
  <Issue>
    <IssueID>33330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable warnings reported for lifted operators when operands are not null</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
Reported by @onovotny.

When resolving this issue, please also track down any references to   (which was resolved as dupe of present issue).</Description>
  </Issue>
  <Issue>
    <IssueID>33324</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>dotnet-core MyGet gallery flags old version of package as latest</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <IssueLabels />
    <Description>@KexyBiscuit commented on [Mon Feb 11 2019](For example, [Microsoft.CSharp]( tells me that 4.6.0-preview1-27018-01 is the latest, but 4.6.0-preview.19111.6 is published today, why isn't that the latest? I wonder if there's some rule preventing ones from downloading the latest bit of these package, or it's just a operation mistake.---@livarcocc commented on [Tue Feb 12 2019](Moving this to Roslyn. We don't produce this package on the SDK.</Description>
  </Issue>
  <Issue>
    <IssueID>33322</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to interpret entries in roslynRemoteHost.log file</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>33322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We write a C# and VB.NET Roslyn Analyzer.

We have received some user questions about what is the content of this file and whether this was useful to report it back to us.

I have failed to find some useful information about this file and about its entries, so I am wondering whether you could help me have a clear understanding.

When is this file generated? What is the content (is it linked to performance?)?

Our ticket: </Description>
  </Issue>
  <Issue>
    <IssueID>33320</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compile fails in server mode on OSX involving defines</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33320</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft (R) Visual C# Compiler version 2.9.1.65535 (4d10ef64)
Copyright (C) Microsoft Corporation. All rights reserved.


**Steps to Reproduce**:

1. Open the attached solution
2. Open `Program.cs`
3. Implement the property `YourRoslynPathOnOSX`
4. Implement the property `PathToAnMscorlibOnOSX`  (You could probably cut out the /nostdlib and get rid of this part if you wanted to)
5. Compile the solution
6. Open a terminal and cd `RoslynDefineBug/bin/Debug`
7. Run `mono RoslynDefineBug.exe` (Mono has nothing to do with the bug, you could adjust the project to compile for .NET Core and use that if you wanted)

**Expected Behavior**:

No compile errors should occur

**Actual Behavior**:

The following errors will appear one or more times

Failed to compile assembly with csc:
common/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)

Failed to compile assembly with csc:
common/Executable.cs(3,7): error CS0246: The type or namespace name 'ONE' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(22,47): error CS0246: The type or namespace name 'IntegratedSubsystemDescriptor&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
common/Executable.cs(32,37): error CS0246: The type or namespace name 'IntegratedSubsystem&lt;&gt;' could not be found (are you missing a using directive or an assembly reference?)
`</Code>
    <Description>This is an intermittent bug that I am only seeing on OSX with roslyn server mode enabled.  I have *not* experienced this bug a single time on Windows.

Unity is hitting this bug in our UnityLinker test suite.  The UnityLinker test framework follows the same structure as   The scenario that seems to trigger this bug is compiling the same and/or similar files in the same location with almost identical command line arguments.  The difference that seems to be key in triggering the bug is specifying a define.

In case these clues are of any use, here are things I've done that make the bug go away
* Don't use server mode
* Use `mcs`
* Change `Run2` to use different output assembly file names than `Run1`

**Version Used**: 
``

[RoslynDefineBug.zip](



</Description>
  </Issue>
  <Issue>
    <IssueID>33316</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Local function hides functions declared in class</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>33316</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>33316</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

C# 7.3 (Visual Studio 2017 15.9.6

**Steps to Reproduce**:



    public class Mutator
    {
        public int Mutate(int a, int b)
        {
            bool IsSum(int x)
            {
                return true;
            }

            if (IsSum(a, b))
            {
                return a + b;
            }
            else
            {
                return a - b;
            }
        }

        public bool IsSum(int a, int b)
        {
            return false;
        }
    }




**Expected Behavior**:

Compilation without errors

**Actual Behavior**:

error CS1501: No overload for method 'IsSum' takes 2 arguments

</Description>
  </Issue>
  <Issue>
    <IssueID>33314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suppressions for CA1811:AvoidUncalledPrivateCode should be respected by IDE0051</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>33314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>33314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        /// &lt;summary&gt;
        /// Wires up this service to event notifications that it needs to respond to.
        /// &lt;/summary&gt;
        [ConfiguredProjectAutoLoad]
        [AppliesTo(ProjectCapabilities.Cps + " &amp; " + ProjectCapabilities.ProjectReferences)]
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called by MEF")]
        private void WireUp()
        {
            this.ShellServices.ProjectRenamedInSolution += this.ShellServices_ProjectRenamedInSolution;
            this.ShellServices.ProjectRemovedFromSolution += this.ShellServices_ProjectRemovedFromSolution;
        }


For these we get IDE0051:


Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0051	Private member 'ProjectReferenceMaintenanceService.WireUp' is unused.	Microsoft.VisualStudio.ProjectSystem.VS.Implementation	E:\CPS\src\Microsoft.VisualStudio.ProjectSystem.VS.Implementation\ProjectReferenceMaintenanceService.cs	106	Code Quality	Active
`</Code>
    <Description>CPS code base has a bunch of "unused" things that look like this:

``

IDE0051 is exactly the same rule as CA1811, except that it has been removed to the Roslyn tree and renamed. In FxCop days, when we merged rules, we had a mapping table so that existing suppressions would be respected by the new rule. Roslyn should have the same thing.

CPS code base has over 200 instances of this.</Description>
  </Issue>
  <Issue>
    <IssueID>33312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Remove redundant assignment" code fix moves variables above prepended trivia</Title>
    <CreatedDate>12/02/2019</CreatedDate>
    <ClosedDate>04/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>33305</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Navigate to Decompiled Sources Cancel</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There should be a way to cancel Navigate to Decompiled Sources in the dialog. Even selecting `No` will still open the metadata view.

**Steps to Reproduce**:

1. Ctrl+click on an external reference that triggers Navigate to Decompiled Sources. (The experimental Navigate to Decompiled sources setting in Tools &gt; Options would need to be on.)
2. Hit `No` in dialog
![image](

**Expected Behavior**:
Does not navigate to metadata, or there is an option to cancel navigating entirely.

**Actual Behavior**:
Navigates to metadata.

Originated from [customer tweet](</Description>
  </Issue>
  <Issue>
    <IssueID>33303</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>33303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable constraints not validated on tuple types inside method bodies</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
#nullable enable

namespace System
{
    // struct with two values
    public struct ValueTuple&lt;T1, T2&gt;
        where T1 : object
        where T2 : object
    {
        public T1 Item1;
        public T2 Item2;

        public ValueTuple(T1 item1, T2 item2)
        {
            this.Item1 = item1;
            this.Item2 = item2;
        }

        public override string ToString()
        {
            return "";
        }
    }

}

class C {
    void M((string?, string) a) {
        string? s = null;
        var x = ("", s);
    }
}
`</Code>
    <Description>Consider the following code: 

``

The compiler will issue a warning for the tuple inside the method signature but not inside the method body. </Description>
  </Issue>
  <Issue>
    <IssueID>33301</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>33301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>custom vs color scheme keeps reseting every upgrade of Dev16</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have the solarized light VS color scheme applied to my VS and everytime I update to the latest dogfood build, the syntax highlighting colors gets reset to the default color scheme (i.e. not my custom color scheme). My current workaround is to reapply my vssettings file, but this is getting old having to do this every time I update to the latest build.The vssettings file can be found at: _This issue has been moved from VSTS ticketId: 775477__These are the original issue comments:_John Schultz [MSFT] on 1/24/2019, 09:29 AM (18 days ago): &lt;p&gt;Update: &lt;/p&gt;&lt;p&gt;Not sure this has anything to do with upgrading now. I have noticed that it only impacts C# code (C++ always using my custom color scheme) and it seems to reoccur every time I restart VS. This is&lt;em&gt; incredibly&lt;/em&gt; annoying to have to re-import my custom colors every time I restart VS.&lt;/p&gt;John Schultz [MSFT] on 1/25/2019, 10:22 AM (17 days ago): &lt;p&gt;Further update:&lt;/p&gt;&lt;p&gt;It seems to be related to the Preview Feature "Use enhanced colors for C# and Basic". Once I turned this off, my custom color theme remained consistently applied between restarts/upgrades.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33299</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Wrong "Remove unused parameter" suggestion when using compound assigments</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
 public static byte[] Combine(this byte[] first, byte[] second)
        {
            first ??= new byte[0];
            second ??= new byte[0];

            var ret = new byte[first.Length + second.Length];
            Buffer.BlockCopy(first, 0, ret, 0, first.Length);
            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);
            return ret;
        }
`</Code>
    <Description>VSF_TYPE_MARKDOWN``The light bulp says `first` and `second` arguments are **unused** but they not._This issue has been moved from VSTS ticketId: 787940__These are the original issue comments:_cihanyakar on 2/11/2019, 02:25 AM (9 hours ago): &lt;p&gt;A small info: C# 8.0 nullable feature is enabled&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33298</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>33298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Block comment / uncomment</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>## Feature
Similar to other IDEs and languages, support for block comment / uncomment functionality would be useful.
Some examples:
 
 



## Proposal
In general, we are proposing a new 'toggle block comment' command.  This command will be mapped to a single shortcut and will only act on block comments (not single line comments).

### Command
The block commenting command will be a *toggle* based command.  If the span selected contains a block comment it will be removed; otherwise, a block comment will be added.  Details on the exact functionality will be explained below.  

It will be accessible through a keyboard shortcut which by default would be mapped to `Cntrl + Shift + /`.  This mapping is currently unused in a default visual studio installation.  

#### Notes
1.  Toggle behavior is almost universal across editors that have block comment functionality.  
2.  `Cntrl + Shift + /` happens to be the same command used by resharper for the same functionality.  We considered alternatives such as `Shift + Alt + A` (the VS Code block comment command) but it was unfortunately already in use by **Project.AddExistingItem**

### Functionality
The same command will both add and remove block comments depending on the context that the user has selected (highlighted).

#### Removing block comments
1.  The selection contains a block comment section (plus whitespace).  _Matches current uncomment behavior._  &lt;img width="767" alt="remove_entirely_within" src="
2.  The selection is contained entirely inside a block comment section.  _Matches current uncomment behavior.  Other toggle block comment features usually do nothing._  &lt;img width="748" alt="remove_comment_around" src="
3.  The caret is inside a block comment section.  _Matches current uncomment behavior._  &lt;img width="755" alt="caret_inside_remove" src="
4.  The caret is before the block comment open marker or after the block comment close marker on the same line with only whitespace.

#### Adding block comments
1.  The selection contains no block comments.  &lt;img width="742" alt="add_selection" src="
2.  The caret is not inside a block comment.  A block comment will be added after the caret at the next whitespace.  _Similar to R#._  &lt;img width="748" alt="add_caret" src="
3.  The selection contains all of a block comment plus other code.  &lt;img width="746" alt="code_plus_block" src="  In this case, the comment will be *extended* to cover the newly selected pieces with multiple comments blocks.  &lt;img width="741" alt="code_plus_block_result" src="  _This is similar to how intellij functions._
4.  The selection contains part of a block comment plus other code.  &lt;img width="749" alt="partial_code" src="  When this case happens, we will add additional comments to cover the extra code being selected.  &lt;img width="751" alt="partial_code_result" src="
5.  The caret is before (or after) the block comment open (or close) marker with only whitespace in between but on a different line.

#### Highlight
The comment section being added or removed will be selected once the command completes.  *Matches current behavior.*

### Changes to UI
No icon will be introduced for this command for the following reasons.
1.  Introducing a toggle block comment icon would not make sense unless the current comment / uncomment icons were made into a single toggle button.
2.  Adding two new icons to block comment or block uncomment would not work with a toggle command.  The preference is for toggle over add / remove.
3.  The existing icons and UI is rather unhelpful already.
4.  We guess that these icons are rarely ever used over the keyboard shortcuts (TBD is that data available?)

### Changes to existing comment / uncomment commands.
The existing comment / uncomment commands will be left as-is.  We want to avoid breaking users' existing workflows that they may be used to.  This means that
1.  The single line comment command can create a block comment when the selection is inside a single line.  &lt;img width="752" alt="within_line" src="
2.  The uncomment line comment command can uncomment block comments with similar functionality to block uncomment.

## Prior work

### Current VS Functionality
VS currently has separate comment and uncomment commands (comment: `Cntrl+K,Cntrl+C`, uncomment: `Cntrl+K,Cntrl+U`).  These commands also have representation in the UI.

![comment_selection](

Commenting a selection will comment all lines that the selection spans with a single line comment.  If the selection is inside one line, it will use a block comment on the selection.  
Uncommenting a selection tries the following steps in order.
1.  Uncomment a block comment span if the selected span exactly matches the block comment span.
2.  Uncomment any single line comment (or multiple single line comments) on the selected span's lines.
3.  Uncomment any block comment that surrounds the selected span.

### Resharper Functionality
Resharper has separate command *toggles* for dealing with single line comments and block comments.
`Cntrl+Alt+/` will comment and uncomment single line comments.  `Cntrl+Shift+/` will comment and uncomment block comments.  If there is a selection, it will add a block comment around the selection.  If the selection exactly matches a block comment, it will uncomment the selection.  If the selection is within a block comment it will do nothing.  If the *caret* is inside a block comment, it will uncomment the block.

### Intellij
Block comments are toggled in intellij with `Cntrl+Shift+/`.  It functions the same as resharper.

### VS Code
`Shift+Alt+A` toggles block comments in VS code.  This toggle looks at the *lines* of code to determine whether or not to comment or uncomment the block.  If the first and last line of the selection contain block comment characters, it will uncomment them.  Otherwise, it will add a comment (even inside an existing block).</Description>
  </Issue>
  <Issue>
    <IssueID>33296</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Keep all using imports within namespace</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>11/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Customer request:

&gt; My team code style is to keep all using imports within the scope of the namespace. VS 2017 auto import throws them wherever it wants. Sometimes inside the namespace, sometimes outside this scope (I think based on precedence of where they already exist?) 

&gt; I’d like to select a checkbox (like I can in ReSharper) import in deepest nested scope. Matching my team’s code style should be trivial with the help of an IDE. 

Our only editorconfig settings for imports are [organizing and sorting usings]( This would be a new editorconfig rule.
</Description>
  </Issue>
  <Issue>
    <IssueID>33292</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AddUsingExactMatchBeforeRenameTracking integration test needs order updated</Title>
    <CreatedDate>11/02/2019</CreatedDate>
    <ClosedDate>12/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`` needs to be added to suggested actions</Description>
  </Issue>
  <Issue>
    <IssueID>33157</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compile error with ref returns in latest roslyn package</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
/home/kate/Projects/mono/external/corert/src/System.Private.CoreLib/src/System/Array.cs(936,25): error CS1073: Unexpected token 'ref'
/home/kate/Projects/mono/external/corert/src/System.Private.CoreLib/src/System/Array.cs(937,24): error CS1073: Unexpected token 'ref'


I tested an older package and it works fine (3.1.0.1906016 | 6.89 MB | Thu, 10 Jan 2019 16:04:39 GMT). I checked and the correct langversion is being passed and csc is reporting support for 7.0, 7.1 and 7.2

The relevant section of the array.cs source:
csharp
#if __MonoCS__
            ref T p = ref Unsafe.As&lt;byte, T&gt;(ref array.GetRawSzArrayData());
            int i = index;
            int j = index + length - 1;
            while (i &lt; j)
            {
                T temp = Unsafe.Add(ref p, i);
                Unsafe.Add(ref p, i) = Unsafe.Add(ref p, j);
                Unsafe.Add(ref p, j) = temp;
                i++;
                j--;
            }
#else
            ref T first = ref Unsafe.Add(ref Unsafe.As&lt;byte, T&gt;(ref array.GetRawSzArrayData()), index);
            ref T last = ref Unsafe.Add(ref Unsafe.Add(ref first, length), -1);
            do
            {
                T temp = first;
                first = last;
                last = temp;
                first = ref Unsafe.Add(ref first, 1);
                last = ref Unsafe.Add(ref last, -1);
            } while (Unsafe.IsAddressLessThan(ref first, ref last));
#endif
        }

The errors are not on the first use of ref return, they're on the first = ...`</Code>
    <Description>Using the latest roslyn package from myget (3.1.0.1910509 | 6.92 MB | Tue, 05 Feb 2019 14:52:36 GMT) compiling mono from source fails:

`` in the loop.</Description>
  </Issue>
  <Issue>
    <IssueID>33155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>33155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Index expression ('^') should be a unary operator in IOperation and semantic model</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now there's a `IFromEndIndexOperation` in the IOperation tree, but the LDM decided this was just another type of unary operator and should be treated as such.</Description>
  </Issue>
  <Issue>
    <IssueID>33144</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33144</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio hangs with switch expression</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>10/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33144</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
string path = "" switch { }
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019 16.0 Preview 3 (28604.53.d16.0)

**Steps to Reproduce**:

1. Create a C# project
2. Write the following code that uses `switch` expression
``

**Expected Behavior**:
When typing `{`, Visual Studio should auto complete `}`, and the cursor should be in between the braces.

**Actual Behavior**:
Visual Studio hangs; and restarts automatically after around 2 minutes.
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>33142</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0051: Private member is unused when used in an XML literal in Visual Basic</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>22/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2019 Preview, Version 16.0.0 Preview 2.1

**Steps to Reproduce**:
``
Bar doesn't have to be a function, it can also be a property or a field.

**Expected Behavior**:
No message is shown.

**Actual Behavior**:
Message shown: `Private member 'UnusedBar.Bar' is unused.`</Description>
  </Issue>
  <Issue>
    <IssueID>33139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CodeRefactoringProvider is not loaded </Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-SDK and Samples</Name>
        <IssueID>33139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>33139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio VS2017 15.9.7
Microsoft.CodeAnalysis.Analyzers: 2.6.3
Microsoft.CodeAnalysis.CSharp.Workspaces: 2.10.0

**Steps to Reproduce**:

1. Create a project from "Code refactoring (.NETStandard)" or "Analyzer with CodeFix (.NETStandard)" templates in VS.
2. Run `%projectName%.Vsix` - the Refactoring/CodeFix is loaded and works
3. Add an item to the Vsix project: Add/Extensions/"Tool Window" via VS -- it will add a window and AsyncPackage to the Vsix project
4. Run `%projectName%.Vsix` again - the refactoring or CodeFix won't be loaded, breakpoints won't work

I tried different parameters in `source.extension.vsixmanifest` (in Asset node) but without luck.
This issue looks similiar to  but `Update` didn't help. Tried VS2017 15.9.6 and 15.9.7</Description>
  </Issue>
  <Issue>
    <IssueID>33136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ObjectReader possibly creates too many tasks</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Type in VSMac
2. Observe a lot of threads being started and finished

**Expected Behavior**:
ObjectReader should not be spinning tasks up recursively here: 

The thread creation is for these threadpool items.

**Actual Behavior**:
There's 2 scenarios which come to mind which can end up creating a lot of threads:
a) recursionDepth 50 -&gt; 49 -&gt; 50 -&gt; 49 -&gt; 50, etc.
b) recursionDepth 50 -&gt; ... -&gt; 100 -&gt; ... -&gt; 150 (creates nested task, this should definitely be eliminated)</Description>
  </Issue>
  <Issue>
    <IssueID>33135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisitGenericName in CSharpSyntaxWalker not always firing when expected</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.CSharp 2.10.0

**Steps to Reproduce**:

I'm using the `CSharpSyntaxWalker` to find usages of classes within C# files. For the most part it works brilliantly, but for some reason `VisitGenericName` isn't always firing. I'm looking for usages of a class `InvoiceDocumentUploaded`.

VisitGenericName **does** fire for the following line:

``

This feels like it might be a bug, but happy to be corrected if I'm not using it properly.

Any help appreciated.

Thanks.</Description>
  </Issue>
  <Issue>
    <IssueID>33134</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33134</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>.editorconfig - indexer brackets at call-site</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33134</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33134</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33134</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
array[index]


(b) produce no diagnostic, and VS would generate code as:
csharp
array[ index ]
`</Code>
    <Description>Is there a .editorconfig option to control the spacing between indexer brackets? The option I'm after would:

(a) produce a diagnostic and fix for:
``

though some people would want the exact opposite setting.</Description>
  </Issue>
  <Issue>
    <IssueID>33131</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Delegate allocations coming in from ConditionalWeakTable value creators</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)

**Steps to Reproduce**:

1. Run analyzers on a solution (in my case [this]( one)
2. Observe a lot of allocations coming in from SymbolTreeInfo.GetMetadataChecksum


**Expected Behavior**:
The lambdas should be static and use the key parameter being passed.

**Actual Behavior**:
A lot of allocations due to closures. They are coming in from [here](

``

This is a heavy contender of allocations in VSMac while typing</Description>
  </Issue>
  <Issue>
    <IssueID>33127</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio 2015 moves members to new line</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>33127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>33127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} private int _MyProperty; 


We prefer this greatly to a long list of member variables at the top for many reasons. 

1. You don't have to scroll up and down, you see it all right there. 
2. Variable doesn't get left on refactor when property is removed. 
3. When copy and pasting things around, you never forget to bring the member variable along. 
The problem: 

In Visual Studio 2013, there was no problem. 

Visual Studio 2015 is now moving the member variable to the next line when we Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;E&lt;/kbd&gt;, &lt;kbd&gt;D&lt;/kbd&gt; or choose Edit &amp;rarr; Advanced &amp;rarr; Format Document. 

csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} 
private int _MyProperty; 


I have played with the Tools &amp;rarr; Options &amp;rarr; Text Editor &amp;rarr; C# &amp;rarr; Formatting &amp;rarr; New Lines section. 

Anyone have any idea how to make visual studio stop moving the member variable to a new line? 

## Repro Steps

Create a property with a backing field on the last line, same as the last squirly brace: 

csharp
public int MyProperty 
{ 
get { return _MyProperty; } 
set { _MyProperty = value; } 
} private int _MyProperty; 
`</Code>
    <Description>**Version Used**: Originally filed against Visual Studio 2015

:link: Originally filed as 

## Problem Description 

Description: When we need to use a backing field for a property, we have a practice of combining the backing field with the property it goes to: 

``

Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;E&lt;/kbd&gt;, &lt;kbd&gt;D&lt;/kbd&gt; or choose Edit &amp;rarr; Advanced &amp;rarr; Format Document 



## Impact

We have large files, especially many with INotifyPropertyChanged implement or a lazy implementation where the object is instantiated on first get:. 

Our entire document is changing because so many properties are done this way. 

It causes significant issues with whitespace checkins. It is blocking us from using our required style. Engineers have to go back and fix the document.</Description>
  </Issue>
  <Issue>
    <IssueID>33126</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning 4014 (not awaited task) doesn't work properly when a method returns Task&lt;Task&gt;</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>14/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static Task ReturnTask() =&gt; Task.CompletedTask;
public static Task&lt;Task&gt; ReturnTaskOfTask() =&gt; Task.FromResult(Task.CompletedTask);


public async Task Main()
{
  ReturnTask(); // Gives warning - as expected
  ReturnTaskOfTask(); // Gives warning - as expected
  await ReturnTask(); // No warning - as expected
  await ReturnTaskOfTask(); // No warning - probably a bug
  await await ReturnTaskOfTask(); // No warning - as expected
}
`</Code>
    <Description>``

_This issue has been moved from 
VSTS ticketId: 748615_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33124</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Linux_Test CoreCLR Segmentation Fault during Microsoft.CodeAnalysis.CSharp.WinRT.UnitTests</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>33124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>33124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Saw in #33070 - [Build Logs]( Linux_Test CoreCLR Attempt 1

``</Description>
  </Issue>
  <Issue>
    <IssueID>33123</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33123</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Hang/deadlock in SmartIndent</Title>
    <CreatedDate>05/02/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33123</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33123</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>33123</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>33123</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken cancellationToken)

Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground&lt;Microsoft.CodeAnalysis.Options.DocumentOptionSet&gt;(System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Options.DocumentOptionSet&gt; task, System.Threading.CancellationToken cancellationToken) in /_/src/Workspaces/Core/Portable/Utilities/TaskExtensions.cs:83

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.AbstractIndentationService&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax&gt;.GetIndenter(Microsoft.CodeAnalysis.Document document, int lineNumber, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/AbstractIndentationService.cs:69

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.AbstractIndentationService&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax&gt;.GetDesiredIndentation(Microsoft.CodeAnalysis.Document document, int lineNumber, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/AbstractIndentationService.cs:35

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.SmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine lineToBeIndented, System.Threading.CancellationToken cancellationToken) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/SmartIndent.cs:47

Microsoft.CodeAnalysis.Editor.Implementation.SmartIndent.SmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine line) in /_/src/EditorFeatures/Core/Implementation/SmartIndent/SmartIndent.cs:26

Microsoft.VisualStudio.Text.Editor.Implementation.SmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.Implementation....TextView textView, Microsoft.VisualStudio.Text.Implementation.TextSnapshotLine line) in src/Editor/Text/Impl/BaseViewImpl/SmartIndentationService.cs:30

Microsoft.VisualStudio.Text.MultiSelection.ExtensionMethods.MapXCoordinate(Microsoft.VisualStudio.Text.Formatting.Implementation....FormattedLine textLine, Microsoft.VisualStudio.Text.Editor.Implementation....TextView textView, double xCoordinate, Microsoft.VisualStudio.Text.Editor.Implementation.SmartIndentationService smartIndentationService, bool userSpecifiedXCoordinate) /src/Editor/Text/Util/TextUIUtil/ExtensionMethods.cs:78
`</Code>
    <Description>**Version Used**: 
3.0.0-beta2-19055-09

**Steps to Reproduce**:

Clicking with the mouse on an empty line hangs the UI thread

``

It appears that the MultiSelectionBroker is calling into smart indentation service on the UI thread, and Roslyn's SmartIndent is then blocking the UI thread waiting on a task:


Have we seen this before? It appears that the synchronous version of the service is chosen. Any idea on how it's supposed to work?</Description>
  </Issue>
  <Issue>
    <IssueID>33112</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration test causes Recycle bin to launch</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Observed in 

This should not be happening.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>33111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration test causes Edge to launch</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Observed in 

This should not be happening.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>33108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>33108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline temp for interpolated string introduces an extra cast in &gt; C# 7.3</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This test fails on &gt; C# 7.

``</Description>
  </Issue>
  <Issue>
    <IssueID>33107</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code analysis is way slower than on VS2017</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
int test = 5;
test = 5;
`</Code>
    <Description>The first thing that I noticed after a few minutes of using VS2019 (in compare to 2017)
is that code analysis - showing errors on error list is a way slower than on prev. version

e.g we have code like this:

``

then we change  &amp;quot;test = 5;&amp;quot; to

test = &amp;quot;&amp;quot;;

and it's being shown as an error on error list after around 2-3sec

meanwhile on VS2017 it's like 0.5-1sec

Any ideas how to speed it up?

_This issue has been moved from 
VSTS ticketId: 740818_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 12/10/2018, 11:47 AM (56 days ago): &lt;p&gt;Thank you for your feedback! Just tried this in latest 16.0.PReview1 and seeing  the results almost immediately. &lt;/p&gt;&lt;p&gt;We created a set of instructions for providing additional information which will help us track down the true source of the problems. (&lt;a target="_blank"&gt;  &lt;/a&gt;)&lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Bart on 12/12/2018, 01:29 AM (54 days ago): Here's version with Visual Studio 2017
Bart on 12/12/2018, 01:29 AM (54 days ago): Here's version with VS 2019
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33105</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable flow annotations do not affect type arguments' inference in the annotated call</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>18/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>33105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System.Runtime.CompilerServices;
class C
{
  void M1(string? s1)
  {
    s1.NotNull();
    Generic(s1).ToString(); // ok, .NotNull() ensures s1 is not null, Generic.T is inferred to be a non-nullable string
  }

  void M2(string? s1)
  {
    s1.NotNull().ToString(); // false warning - s1.NotNull() should be inspected after applying EnsuresNotNull annotation knowledge
                             // inferring NotNull.T to be not nullable
  }

  void M3(string? s1)
  {
    Ext.NotNull(s1).ToString(); // false warning - NotNull(s1) should be inspected after applying EnsuresNotNull annotation knowledge
                                // inferring NotNull.T to be not nullable
  }

  extern T Generic&lt;T&gt;(T t);
}

static class Ext
{
  public static extern T NotNull&lt;T&gt;([EnsuresNotNull] this T t);
}

namespace System.Runtime.CompilerServices
{
  public class EnsuresNotNullAttribute : System.Attribute { }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile the following code:
``

**Expected Behavior**:
No warnings.
Roslyn should infer generic parameters to be a non-nullable T for all the examples above. Since the `NotNull` methods ensures that `s1` is not null the invocation should be reinterpreted with the knowledge that `s1` is a non-nullable string and infer its type argument to be non-nullable string thus allowing derferencing its result.

**Actual Behavior**:
`M2` and `M3` both have the following warning: `CS8602 Possible dereference of a null reference.`.
</Description>
  </Issue>
  <Issue>
    <IssueID>33103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration test BasicExtractMethod.SimpleExtractMethod is unreliable</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>ADO shows an overall pass rate of 65% for this test over the past 14 days.</Description>
  </Issue>
  <Issue>
    <IssueID>33095</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>33095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Report nullability mismatch in `ref` variable assignment</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Report warnings for the following:
``</Description>
  </Issue>
  <Issue>
    <IssueID>33092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code fix for sealing a class</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>33092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>InternalAsk</Name>
        <IssueID>33092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>33092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

📝 This was an internal feature request sent to the team. It is somewhat related to #31832, but does not deal with a specific compiler error.

**Steps to Reproduce**:

1. Create a class which is not sealed
2. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt; on the class name

**Expected Behavior**:

An option is provided to mark the class as `sealed`.

**Actual Behavior**:

No such option is provided.
</Description>
  </Issue>
  <Issue>
    <IssueID>33091</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Parallel async</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>09/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
async Task&lt;Result&gt; MyFunc(){
var result1 = await getResult1();
var result2 = await getResult2();
var result3 = await getResult3(result1);
return CombineResult(result2, result3);
}


it might be preprocessed to something like this. 

csharp
async Task&lt;Result&gt; MyFunc(){
var __result1 = getResult1();   //1
var result1 = await __result1;  
var __result2 = getResult2(); // 2
var result2 = await __result2;
var __result3 = getResult3(result1); //3
var result3 = await __result3;
return CombineResult(result2, result3);
}


suggestion is to make those function calls float up during preprocessing, until there is a curly bracket found or an assignment to variable used as a parameter to function call

csharp
async Task&lt;Result&gt;MyFunc(){
var __result1 = getResult1(); // 1
var __result2 = getResult2(); // 2
var result1 = await __result1;
var __result3 = getResult3(result1); // 3
var result2 = await __result2;
var result3 = await __result3;
return CombineResult(result2, result3);
}
`</Code>
    <Description>Typical function

``

Here 1 and 2 will automatically run in parallel, 3 will execute once 1 is finished.

This would be a breaking change, so new keyword might be used. Did not think it all through.</Description>
  </Issue>
  <Issue>
    <IssueID>33090</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] How to build runnable .NET Core console app using Roslyn?</Title>
    <CreatedDate>04/02/2019</CreatedDate>
    <ClosedDate>16/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;7.1&lt;/LangVersion&gt;
    &lt;PreserveCompilationContext&gt;true&lt;/PreserveCompilationContext&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="2.10.0" /&gt;
    &lt;PackageReference Include="Microsoft.Extensions.DependencyModel" Version="2.1.0" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;


2. Copy-paste following code:

cs
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyModel;

namespace BuildAndRunHelloWorld
{
    class Program
    {
        static void Main()
        {
            var runningProgramDirectoryPath = Path.GetDirectoryName(typeof(Program).Assembly.Location);
            var outputExecutablePath = Path.Combine(runningProgramDirectoryPath, "HelloWorld.exe");

            var (isSuccess, dependencies) = Compile(outputExecutablePath);

            if (isSuccess)
            {
                Copy(dependencies, runningProgramDirectoryPath);

                Run(outputExecutablePath);
            }
            
        }

        static (bool isSuccess, ImmutableArray&lt;string&gt; dependencies) Compile(string outputExecutablePath)
        {
            const string code = @"
using System;

namespace SomeNamespace
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(""Hello World!"");
        }
    }
}";
            var syntaxTree = CSharpSyntaxTree.ParseText(code);

            var compilationOptions = new CSharpCompilationOptions(
                outputKind: OutputKind.ConsoleApplication,
                optimizationLevel: OptimizationLevel.Release,
                allowUnsafe: true,
                platform: IntPtr.Size == 8 ? Platform.X64 : Platform.X86,
                deterministic: true);

            var dependencies = DependencyContext.Default.CompileLibraries
                .SelectMany(library =&gt; library.ResolveReferencePaths())
                .ToImmutableArray();

            var references = dependencies
                .Select(dependency =&gt; AssemblyMetadata.CreateFromFile(dependency).GetReference())
                .ToImmutableArray();

            var compilation = CSharpCompilation
                .Create(assemblyName: Path.GetFileName(outputExecutablePath))
                .AddSyntaxTrees(syntaxTree)
                .WithOptions(compilationOptions)
                .AddReferences(references);

            using (var executable = File.Create(outputExecutablePath))
            {
                var emitResult = compilation.Emit(executable);

                if (emitResult.Success)
                    return (true, dependencies);

                foreach (var compilationError in emitResult.Diagnostics.Where(diagnostic =&gt; diagnostic.IsWarningAsError || diagnostic.Severity == DiagnosticSeverity.Error))
                    Console.WriteLine($"{compilationError.Id}: {compilationError.GetMessage()}");

                return (false, default);
            }
        }

        private static void Copy(ImmutableArray&lt;string&gt; dependencies, string runningProgramDirectoryPath)
        {
            foreach (var dependency in dependencies)
            {
                var destinationPath = Path.Combine(runningProgramDirectoryPath, Path.GetFileName(dependency));
                if (!File.Exists(destinationPath))
                    File.Copy(dependency, destinationPath);
            }
        }

        private static void Run(string outputExecutablePath)
        {
            Console.WriteLine($"About to run {outputExecutablePath}");

            var startInfo = new ProcessStartInfo(outputExecutablePath)
            {
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                CreateNoWindow = true,
                UseShellExecute = false
            };

            using (var process = new Process { StartInfo =  startInfo })
            {
                var output = new List&lt;string&gt;();
                var error = new List&lt;string&gt;();

                process.OutputDataReceived += (sender, args) =&gt; output.Add(args.Data);
                process.ErrorDataReceived += (sender, args) =&gt; error.Add(args.Data);

                process.Start();

                process.BeginErrorReadLine();
                process.BeginOutputReadLine();

                process.WaitForExit();

                if (!output.Contains("Hello World!"))
                {
                    Console.WriteLine("The output did not contain \"Hello World!");
                    Console.WriteLine($"Output was: {string.Join(Environment.NewLine, output)}");
                    Console.WriteLine($"Error was: {string.Join(Environment.NewLine, error)}");
                }
            }
        }
    }
}

 
3. Run from console


dotnet run -c Release


**Expected Behavior**:

log
Hello World!


**Actual Behavior**:

log
Unhandled Exception: System.BadImageFormatException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058) ---&gt; System.BadImageFormatException: Cannot load a reference assembly for execution.
   --- End of inner exception stack trace ---
`</Code>
    <Description>BenchmarkDotNet is using Roslyn for compiling Full .NET Framework Code, now I am trying to validate if we could also use it for .NET Core. What I am trying to achieve is a possiblity to build and run console application.

**Version Used**:  `2.10.0`

**Steps to Reproduce**:

1. Create a project with following settings:

``

Please keep in mind that I am able to build the "Hello World" program, but I am not able to run it. I have tried different platforms: x64/x86/AnyCPU but it did not help. I am always getting `BadImageFormatException`.

Am I doing something wrong? What do I need to change to be able to run the app?

/cc @agocke @svick 
</Description>
  </Issue>
  <Issue>
    <IssueID>33083</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>33083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>An invocation of a delegate to a default interface implementation goes into an infinite loop when the underlying instance is a structure</Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>33083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The underlying CLR issue is tracked here 
A number of test scenarios are affected by this issue and relevant portions of unit-tests are temporarily disabled. Should be enabled once the underlying issue is fixed.</Description>
  </Issue>
  <Issue>
    <IssueID>33082</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Make method async' breaks overridden methods</Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>31/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2019 Preview 2.1

**Steps to Reproduce**:

``

**Actual Behavior**:
1. 'Make method async' is offered that changes the return type and renames the method.
2. 'Make method async (stay void) is offered that renames the method.

**Expected Behavior**:
1. Should not be offered as it is not really an option for an overridden method.
2. That is the quick fix I was looking for, but it should not rename the method as it breaks the override.

#20348
</Description>
  </Issue>
  <Issue>
    <IssueID>33080</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>33080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error opening form designer of deleted and re-created form in VS 2019 Preview 2.1</Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>33080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019 Preview 2.1

**Steps to Reproduce**:

1. Create Windows Form VB.NET (or C#) project. Form1.vb file is created and its designer window is opened correctly
2. Delete Form1.vb in Solution Explorer
3. Right-click the project and select Add &gt; Windows Form... menu
4. Type Form1.vb as the name (same name than deleted form)

**Expected Behavior**:
The designer window of Form1.vb should be opened without errors, like the time when it was created by default.

**Actual Behavior**:
The designer window shows the error "Error HRESULT E_FAIL has been returned from a call to a COM component.". See attached image. The call stack of that error shows:

at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.Exceptions.ThrowEFail() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.GetDocument() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.FileCodeModel.GetSyntaxRoot() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.NamespaceCollection.LookupNode() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.NamespaceCollection.CreateSnapshot() at Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.Collections.AbstractCodeElementCollection.GetEnumerator() at EnvDTE.CodeElements.GetEnumerator() at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomParser.Parse(TextReader codeStream) at Microsoft.VisualStudio.Design.Serialization.CodeDom.MergedCodeDomParser.System.CodeDom.Compiler.ICodeParser.Parse(TextReader stream) at System.CodeDom.Compiler.CodeDomProvider.Parse(TextReader codeStream) at Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.CodeDomDocDataAdapter.get_CompileUnit() at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager) at Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32 fReload)

![error](
</Description>
  </Issue>
  <Issue>
    <IssueID>33079</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>33079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Name can be simplified" suggestion doesn't respect nullability requirements.</Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider the following code:

    public interface IPossibleAsyncNull
    {
        Task&lt;string?&gt; Method();
    }

    public class TrivialAsyncNull : IPossibleAsyncNull
    {
        public Task&lt;string?&gt; Method()
        {
            return Task.FromResult("foo");
        }
    }

It gives this warning:

    warning CS8619: Nullability of reference types in value of type 'Task&lt;string&gt;'
     doesn't match target type 'Task&lt;string?&gt;'.

Trying to fix this:

            return Task.FromResult&lt;string?&gt;("foo");

Now gives no warning, but VS grays out the explicit argument and suggests "simplifying" the name back to the previous version, which produced a warning.

This is obviously incorrect; the analysis must respect nullability.

_This issue has been moved from 
VSTS ticketId: 784089_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33078</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Comparing types </Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>33078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>    
&lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.1.0-beta1-19102-01" /&gt;
&lt;PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="3.1.0-beta1-19102-01" /&gt;
`
**Steps to Reproduce**:
Compare two ConstructedNamedTypeSymbol in C#8 with NullableContext enabled:


 .AddProject( projectId, TestProjectName, TestProjectName, language)
                .WithProjectParseOptions(projectId, new CSharpParseOptions(LanguageVersion.CSharp8))
                .WithProjectCompilationOptions(projectId, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithNullableContextOptions(NullableContextOptions.Enable))



**Expected Behavior**:

The two types are equal, or, better, there is a way to construct a generic type with `TypeSymbolWithAnnotations`  (I'm doing it [like this](https://github.com/signumsoftware/framework/blob/master/Signum.Analyzer/Signum.Analyzer/ExpressionFieldAnalyzer.cs#L190))

**Actual Behavior**:

https://github.com/signumsoftware/framework/blob/master/Signum.Analyzer/Signum.Analyzer/ExpressionFieldAnalyzer.cs#L93
The constructed type (`expressionType`) lacks nullability information but the one from the member (?(`fieldSymbol.Type`) does have it, being not equal. 


NamedType System.Linq.Expressions.Expression&lt;System.Func&lt;Signum.Entities.Entity, System.Int32&gt;&gt;
NamedType System.Linq.Expressions.Expression&lt;System.Func&lt;Signum.Entities.Entity!, System.Int32&gt;!&gt;
`</Code>
    <Description>Trying to update a custom Roslyn Analyzer to C# 8 with NullableContext enable, while comparing two types that where equals, now they are not anymore. 

**Version Used**: 
VS2019 Preview 2.1 and     
``

I understand that they are not equal but I'm not aware of any public API to construct the type providing nullability information, amd TypeSymbolWithAnnotations is internal  

Thanks!
</Description>
  </Issue>
  <Issue>
    <IssueID>33077</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Implement Interface" quickfix doesn't respect nullability annotation</Title>
    <CreatedDate>03/02/2019</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VSF_TYPE_MARKDOWNConsider this code:    public interface IPossibleNull    {        string? Method();    }    public sealed class SomeNull : IPossibleNull    {    }The implementing class is missing the interface method. Showing the quick fixes at the interface implementation specification (where the squiggles are) shows the &amp;quot;Implement Interface&amp;quot; suggestion. Executing it results in this code being generated:    public sealed class SomeNull : IPossibleNull    {        public string Method()        {            throw new NotImplementedException();        }    }The return type has lost its nullable annotation and a warning is thus generated.The quick fix needs to respect nullability._This issue has been moved from VSTS ticketId: 784088__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>33074</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>33074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect nullability of `ref` variables</Title>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Warnings are reported for each dereference:
``</Description>
  </Issue>
  <Issue>
    <IssueID>33073</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>33073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0058 reported if type does not resolve</Title>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2019 Preview 2

**Steps to Reproduce**:

Write the following _without_ including an import for `System.Threading`.

``

**Expected Behavior**:

IDE0058 not reported.

**Actual Behavior**:

IDE0058 is reported, and the code fix adds `_ =` in front of the statement.
</Description>
  </Issue>
  <Issue>
    <IssueID>33072</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler gives CS8158 on certain ref return methods with ref parameters</Title>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>33072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
SDK 2.1.503 / Roslyn 2.10.0.0 (45b37117)

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>33069</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable reference types cannot be enabled with project-wide &lt;NullableReferenceTypes&gt; tag</Title>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
    <IssueLabels />
    <Code>csharp
using System;

class Program
{
    static T Foo&lt;T&gt;() =&gt; default;

    static void Main()
    {
    }
}
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.1
VisualStudio.16.Preview/16.0.0-pre.2.1+28529.54
Microsoft .NET Framework
Version 4.7.03190

C# Tools   3.0.0-beta2-19068-12+231aeb8be8357239499d45c0574e5a9a8c9174f0
C# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.

**Steps to Reproduce**:

1. Write this .NET Core console app using LangVersion = 8.0:

``

2. Add `#nullable enable` at the top of the source code. 
3. Get a compiler warning CS8603 for the function declaration.
4. Remove `#nullable enable` line and add `&lt;NullableReferenceTypes&gt;true&lt;/NullableReferenceTypes&gt;` in the project, right after the LangVersion 8.0 tag.

**Expected Behavior**:
The same compiler warning when `#nullable enable` was used.

**Actual Behavior**:
No compiler warnings, therefore nullable reference types are not enabled for the project.</Description>
  </Issue>
  <Issue>
    <IssueID>33068</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Auto Format: Don't align end-of-line comments</Title>
    <CreatedDate>02/02/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>33068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>33068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;I use auto-formatting to format my C# code in Visual Studio, but I find it extremely annoying how it insists on aligning end-of-line comments (those starting with //) from multiple consecutive lines horizontally with each other.  It drives me crazy when this situation arises which is frequent enough for me to post this suggestion.  Please add an option to allow me to turn off this annoying behavior!&lt;/p&gt;_This issue has been moved from VSTS ticketId: 774369__These are the original issue comments:_Jane Wu [MSFT] on 1/22/2019, 02:10 AM (10 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>33049</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>33049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IntelliSense isn't simplifying optional parameter defaults</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>33049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>33049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 28531.182.d16.0

**Steps to Reproduce**:
Paste this code into VS:
``
then get IntelliSense for the `Foo` method:
![image](
It shows `MyStruct s = default(MyStruct)` rather than `MyStruct s = default`, even though a) the method is defined with just `default` and b) my editorconfig settings are set to simplify, e.g. if I instead have the parameter declared as `MyStruct s = default(MyStruct)`, VS dutifully tells me I should simplify it:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>33047</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ArgumentException when trying to set property from ProjectBuildManager.s_defaultGlobalProperties</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>17/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-MSBuildWorkspace</Name>
        <IssueID>33047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a follow-up to #30174 where the advice is to set `ShouldUnsetParentConfigurationAndPlatform` to `false` when building in `Release` configuration.

On the other hand when I try to set this property in latest version (3.0.0-beta2-final) then ArgumentException is thrown.

Does it means that properties from `ProjectBuildManager.s_defaultGlobalProperties` are not meant to be set? If this is the case then it would be better to provide more meaningful exception message (and maybe throw earlier). If the properties can be set then `AddRange` cannot be used.



**Steps to Reproduce**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>33046</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Curious about Decimal implementation</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>33046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>33046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>33046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
                var dec1 = 100M;
                var dec2 = 100.00M;

                var ss1 = dec1.ToString();
                var ss2 = dec2.ToString();

`</Code>
    <Description>I see something unexpected with Decimal types, look at this code:

``
If you run this and look at the resulting strings you'll see that ss2 ends with ".00" and ss1 doesn't. So even though 100 is numerically identical to 100.00 somehow the decimal type stores these differently.

I don't think this is a side effect of the fact that compiler can see (and perhaps eliminate the dec vars) because I see the same thing when passing decimals to external libraries.

How/why is that done?

Thx
</Description>
  </Issue>
  <Issue>
    <IssueID>33039</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>33039</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>foreach keyword classification</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33039</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33039</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>33039</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Program
{
    static void Main()
    {
        foreach (var x in new[] { 1 }) ;
        foreach (var (x, y) in new[] { (1, 2) }) ;
    }
}
`</Code>
    <Description>**Version Used**: 
VS 2019 16.0.0 Preview 2.1

**Steps to Reproduce**:

``

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>33038</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>False positive IDE0047 : "Parentheses can be removed" in nested expression of interpolated string</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>33038</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33038</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>33038</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
var nl = System.Environment.NewLine;
var z = $@"
    {(string.IsNullOrEmpty(nl)
        ? ""
        : $"{(string.IsNullOrEmpty(nl) ? 1 : 2)}"
    )}
";
`</Code>
    <Description>**Version Used**:  Visual Studio 2017 (15.8.9)

**Steps to Reproduce**:
Analyze the following code
``
Looks like
&lt;img src=" width="400" /&gt;

Despite the uselessness of the code above, the inner interpolated expression should not be catched by the analyzer and marked with IDE0047. If one removes the parentheses, the compiler finds several errors.

The outer expression needs parentheses in order to get this false positive.


**Expected Behavior**:
No info/warning about superflous parentheses should be visible

**Actual Behavior**:
The inner expression is marked with IDE0047


</Description>
  </Issue>
  <Issue>
    <IssueID>33054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>33054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[x64](3.0.100-preview-010184) Switch expression bug</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>33054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  PngDecoder.cs(714, 38): [CS1003] Syntax error, ':' expected
  PngDecoder.cs(714, 70): [CS1002] ; expected
  PngDecoder.cs(714, 70): [CS1513] } expected
  PngDecoder.cs(718, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(774, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(793, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(842, 39): [CS1003] Syntax error, ',' expected
  PngDecoder.cs(878, 39): [CS1003] Syntax error, ',' expected
`</Code>
    <Description>Hi

Looks like the new pattern matching feature broke old style switch expression



Doesn't compile anymore 

``</Description>
  </Issue>
  <Issue>
    <IssueID>33035</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyze tuple conversions element-wise with W-warnings</Title>
    <CreatedDate>01/02/2019</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>33035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>33035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>33035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we treat tuples like generic `Pair&lt;T1, T2&gt;` during the conversion/assignment. This results in a redundant safety warning, since we already track the initial state of `Item1`/`Item2` in the case of tuples.

![image](

``

FYI @cston</Description>
  </Issue>
  <Issue>
    <IssueID>32749</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash on incomplete switch expression</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
(e switch {)
`</Code>
    <Description>Parsing the following expression causes the parser (or compiler) to crash with an out-of-memory exception

``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32749</IssueID>
        <PullRequestID>32755</PullRequestID>
        <Title>Fix compiler crash and remove spurious hidden sequence points for switch expression</Title>
        <Description>Fixes #32370

Fix parsing error recovery for incomplete switch expression
Fixes #32749 

See also  for shiproom purposes.

@dotnet/roslyn-compiler May I please have a couple of reviews?</Description>
        <CreatedDate>24/01/2019</CreatedDate>
        <ClosedDate>15/02/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32749</IssueID>
            <PullRequestID>32755</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>32749</IssueID>
            <PullRequestID>32755</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>32755</PullRequestID>
            <IssueID>32749</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>32755</PullRequestID>
            <IssueID>32749</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>32745</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Disable nullable analysis for generated code</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Disable nullable analysis for generated code unless the file contains explicit `#nullable enable`.</Description>
  </Issue>
  <Issue>
    <IssueID>32743</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Finalize the shape of the PragmaWarningDirectiveTriviaSyntax node around NullableKeyword</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now the shape of the node is following:
``

During code review a suggestion was made to generalize the name of the NullableKeyword property to be something like GroupKeyword - a keyword designating a group of warnings. Right now the only token that can be used in that place is NullableKeyword, but we will be able to expand the set if/when new groups will be added.</Description>
  </Issue>
  <Issue>
    <IssueID>32742</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should #nullable and #pragma nullable have effect on all warnings related to nullable feature rather than only on those reported by flow analysis?</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now `` settings?</Description>
  </Issue>
  <Issue>
    <IssueID>32739</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Convert to for' disappears when struct member is invoked on the foreach variable</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>22/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var test = new[] { new Foo() };
foreach (var foo in test)
{
    _ = foo.SomeProperty; // Remove `.SomeProperty` and 'Convert to for' comes back
    // Calling a struct method also scares it away.
    // Interestingly, calling .ToString() does not scare it away so long as it is `Object.ToString`
    // that is being called and not a struct override.
}

struct Foo
{
    public string SomeProperty { get; }
}
`</Code>
    <Description>**Version Used**: VS 2019 Preview 2.0

``

**Expected Behavior**: 'Convert to for' should be available. Otherwise I'm going to have to do this by hand, which has been nearly exclusively the case for me.

I don't care if the semantics change. Even if the struct was mutable and even if it mutated during calls in the loop body, that's not going to stop me from needing access to `i` and wanting to do this particular refactoring to get there.

**Actual Behavior**: Refactoring is not offered.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32739</IssueID>
        <PullRequestID>34384</PullRequestID>
        <Title>Remove data flow analysis from convert foreach to for refactoring</Title>
        <Description>Allow refactoring foreach loops to for loops even when the loop variable is written to. If dataflow analysis shows that it's written to a warning annotation is added to the refactoring to give the user a hint that semantics may change.

Adds two more tests to cover regressions in the scenario reported in #32739 </Description>
        <CreatedDate>23/03/2019</CreatedDate>
        <ClosedDate>24/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>34384</PullRequestID>
            <IssueID>32739</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34384</PullRequestID>
            <IssueID>32739</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>32738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code Lens reference count is broken</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported in Build :15.0.26206.0 


Pick any class that is used directly in code. Extract an interface for this class and pick some properties/methods to be part of the interface. Open the interface. Even though the interface is not referenced anywhere except by the implementing class, all properties and methods on the interface have multiple references. It looks like it is showing references to the properties/methods of any classes implementing the interface instead of actual references that use the interface. At best this is somehow useful to some people, at worst it's just plain wrong. Certainly it's not a reference. 

At the very least there should be an option to disable this behavior, or to show either/both &amp;quot;strict&amp;quot; and &amp;quot;loose&amp;quot; references.

_This issue has been moved from 
VSTS ticketId: 418871_
_These are the original issue comments:_

Morten Mertner on 7/19/2018, 06:15 AM (189 days ago): It's great to see that these issues are being monitored and acted upon. Or wait...
Alexander Martens on 8/8/2018, 09:56 AM (169 days ago): &lt;p&gt;The other Issue I saw on this were closed as by design. It's awful. Why on earth should every IDisposable Dispose() be linked...&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32732</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Breaking change in switches over a boolean value</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Runtime.InteropServices;

class C
{
  [StructLayout(LayoutKind.Explicit)]
  public class M
  {
    [FieldOffset(0)]
    public bool b;

    [FieldOffset(0)]
    public int i;
  }

  static void Main()
  {
    var b = new M() { i = 42 }.b;
    System.Console.WriteLine(Test(b));
  }

  static int Test(bool b)
  {
    switch(b)
    {
      case true: return 1;
      case false: return 2;
      default: return 3;
    }
  }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
``

**Expected Behavior**:
The code should print `3` as it does now in VS2013-2017 and VS 2019 preview 1.

**Actual Behavior**:
The code prints `1` since VS 2019 preview 2.</Description>
  </Issue>
  <Issue>
    <IssueID>32728</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error message for pattern-based using in C# 7.3</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

class Program
{
    static void Main()
    {
        var y = Console.ReadLine() switch { _ =&gt; 0 };
        // ↑ CS8370  Feature 'recursive patterns' is not available in C# 7.3. Please use language version 8.0 or greater.

        using (var x = new X()) { }
        // ↑ CS1674  'X': type used in a using statement must be implicitly convertible to 'System.IDisposable'
        // Why not CS8370?
    }

    ref struct X { public void Dispose() { } }
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 2019 Preview Version 16.0.0 Preview 2.0
LangVersion latest (C# 7.3)

**Steps to Reproduce**:

``

**Expected Behavior**:

CS8370 error in line 10.

**Actual Behavior**:

CS1674
</Description>
  </Issue>
  <Issue>
    <IssueID>32727</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>False positive for IDE0051 </Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>`csharp
using System.Runtime.InteropServices;

class Program
{
    private const int MAX_PATH = 260; // IDE0051 unused field

    [StructLayout(LayoutKind.Sequential)]
    internal struct ProcessEntry32
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MAX_PATH)]
        public string szExeFile;
    }
}
``</Code>
    <Description>**Version Used**: VS2019 Preview 2

**Steps to Reproduce**:

Minimal code to reproduce:

``

**Expected Behavior**:

`MAX_PATH` should not be reported as unused as there is a usage in the attribute `MarshalAs`.

**Actual Behavior**:

`MAX_PATH` is reported as unused.</Description>
  </Issue>
  <Issue>
    <IssueID>32724</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion for immediate window commands displays two popups</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1.  Start debugging
2.  Stop at a breakpoint
3. Go to Immediate Window
4. Type "&gt; a"

**Expected Behavior**:
See a legacy old command completion popup only

**Actual Behavior**:
See a legacy old command completion popup as well as a regular completion popup (both old and new completions).</Description>
  </Issue>
  <Issue>
    <IssueID>32723</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Enhanced colors feedback.</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Overall i like it.  Feels like vscode (which is good).  One thing i don't like at first blush is the bolded statics.  They just make things feel 'off balance' without there being a good reason for it.

i.e. 'bold' is generally used for emphasis or impact.  But i see no reason (and do not feel good about) statics having that.  This is quite likely because static stuff is generally *less* important to me.  It's stuff like helpers.  Or utilities.  And it ends up feeling like it's *more* important despite being stuff i care far less about.

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>32722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Adjust wording for ERR_NoConvToIDisp</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The current message when attempting to dispose something that is non disposable is incorrect (due to #32177) `'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'.` We should update to specifically mention `ref struct` patterns.

We should correspondingly update `ERR_NoConvToIDispWrongAsync` to match as needed.</Description>
  </Issue>
  <Issue>
    <IssueID>32721</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'return value is unused' is overly aggressive</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm getting a warning by default for writing code like this:

![image](

This is because i'm not bothering to look at the return value.  This is because the return value is pretty irrelevant to me.  All it has is:

![image](

However, i'm now forced to update my code to look much more ugly as:

![image](

Or to suppress the warning.  However, the original code was *the* idiomatic way to just call code and not have to worry about the return value. 

It seems like the feature is super aggressive here.  In our projects, we see literally thousands of these warnings, and i'm struggling to think how we could deal with them.  either:

1. we bulk-fix.  but that means if we're actually ignoring something we shouldn't be ignoring, then we're SOL.
2. we don't have this feature on.

It seems like the feature needs to be smarter.  Perhaps by having an understanding of which APIs it's very much a problem to ignore results from.</Description>
  </Issue>
  <Issue>
    <IssueID>32711</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>After configuration change in desktop csproj, project.OutputFilePath still points to old output path</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview Version 16.0.0 Preview 2.0 [28522.59.d16.0]

**Steps to Reproduce**:
We have a solution-crawler based analyzer (for source-based unit test discovery)  that detects and reacts to project configuration changes via the `IIncrementalAnalyzer.AnalyzeProjectAsync(Project project, bool projectConfigurationChanged, CancellationToken token)` API.

In a desktop csproj, after a solution-wide configuration change (i.e. change Debug -&gt; Release in VS drop-down), the solution crawler correctly calls the above method on our analyzer with `projectConfigurationChanged = true`. However `project.OutputFilePath` points to the old (Debug) output path instead of the new (Release) path.

On debugging, looks like `project.Solution.Workspace.CurrentSolution.Projects.First().OutputFilePath` is also set to the old (Debug) path. So looks like the output path is not being updated in Roslyn's internal project system abstractions after a configuration change.

**Expected Behavior**:
`project.OutputFilePath` should point to the new (Release) output path.

**Actual Behavior**:
`project.OutputFilePath` still points to the old (Debug) output path.
</Description>
  </Issue>
  <Issue>
    <IssueID>32707</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: `await using` doesn't ecognize `DisposeAsync` that returns an awaitable</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Relates to API change </Description>
  </Issue>
  <Issue>
    <IssueID>32705</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CodeRefactoring in nuget package doesn't work</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Microsoft.CodeAnalysis 1.0.0

**Steps to Reproduce**:

1. Install the nuget package for my Serilog Analyzer  from 
2. Attempt to invoke a CodeRefactoring like the ShowConfigCodeRefactoringProvider like shown here 

**Expected Behavior**:
Works as in the gif

**Actual Behavior**:
Nothing happens, Analyzers and CodeFixes work fine but CodeRefactorings only work in the VSIX version.
</Description>
  </Issue>
  <Issue>
    <IssueID>32703</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Not inferring nullability of non-nullable value compared to null</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should report warnings for `s.Length` and `c.F.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>32702</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 2019 Preview 1 is reporting members as unused when they are</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static partial class ContainerConfig
{
   static partial void Configure( ContainerBuilder builder, Assembly assembly )
    {
     builder.ConfigureMvcBindings()
                .ConfigureCoreBindings();
     builder.ConfigureLogging();
   }  

   //CodeLens says ref count = 1, method is marked as unused
   private static ContainerBuilder ConfigureCoreBindings( this ContainerBuilder builder )
   {
       return builder;
   }

   //CodeLens says ref count = 1, method is seen as used
   public static ContainerBuilder ConfigureMvcBindings( this ContainerBuilder builder )
   {
      return builder;
   }

   //CodeLens says ref count = 1, method is seen as unused
   private static ContainerBuilder ConfigureLogging( this ContainerBuilder builder )
   {
      return builder;
   }
}
`</Code>
    <Description>**Version Used**:  VS2019 Preview 1

**Steps to Reproduce**:

Note that this is hit or miss. It randomly seems fine with some methods but not others.

``

This seems to be working correctly in VS 2018 15.9.4. Closing and reopening VS doesn't change anything.

**Expected Behavior**:

Members that are being used are not marked as unused.

**Actual Behavior**:

Some members that are clearly being used in the same source file are still being marked as unused. The CodeLens reference count is correct but Roslyn doesn't seem to detect the reference.

![unusedmembers](
</Description>
  </Issue>
  <Issue>
    <IssueID>32701</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing warning for assigning an annotated possible null value to an unconstrained generic</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
class C
{
  static void Main()
  {
    string nonNullableString = "";
    M&lt;string&gt;(ref nonNullableString, null); 
    nonNullableString.ToString();
  }
  static void M&lt;T&gt;(ref T t, dynamic? d)
  {
    t = d; // missing warning
  }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
``



**Expected Behavior**:
Warning for possible null reference assignment to an unconstrained generic type. `d` is explicitly annotated as nullable and T can be substituted with non-nullable type. There should be a warning just as for e.g. `t = default`

**Actual Behavior**:
No warnings. The code compiles and fails at runtime with a `NullReferenceException`</Description>
  </Issue>
  <Issue>
    <IssueID>32698</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need nullability analysis of delegate creation expressions</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_DelegateCreation()
        {
            var source =
@"class C
{
    static void Main()
    {
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }!);
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }!);
        _ = new System.Func&lt;string, string&gt;(M1!);
        _ = new System.Func&lt;string?, string?&gt;(M2!);

        // without suppression
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }); // 1
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }); // 2
        _ = new System.Func&lt;string, string&gt;(M1); // 3
        _ = new System.Func&lt;string?, string?&gt;(M2); // 4
    }
    static string? M1(string? x) =&gt; throw null;
    static string M2(string x) =&gt; throw null;
}";

            // missing warnings

            // cover cases in BindDelegateCreationExpression
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue(TestOptions.DebugExe));
            comp.VerifyDiagnostics(
                );
            CompileAndVerify(comp);

            // Need to verify the semantic model
            // Tracked by https://github.com/dotnet/roslyn/issues/32661
        }
`</Code>
    <Description>
``</Description>
  </Issue>
  <Issue>
    <IssueID>32697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need to re-analyze method groups</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_LambdaInOverloadResolution()
        {
            var source =
@"class C
{
    static void Main(string? x)
    {
        var s = M(() =&gt; { return x; });
        s /*T:string?*/ .ToString(); // 1

        var s2 = M(() =&gt; { return x; }!); // suppressed
        s2 /*T:string?*/ .ToString(); // 2

        var s3 = M(M2);
        s3 /*T:string*/ .ToString(); // 3

        var s4 = M(M2!); // suppressed
        s4 /*T:string*/ .ToString(); // 4
    }
    static T M&lt;T&gt;(System.Func&lt;T&gt; x) =&gt; throw null;
    static string? M2() =&gt; throw null;
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyTypes();

            // TODO2
            // Missing warnings on s3 and s4
            comp.VerifyDiagnostics(
                // (6,9): warning CS8602: Possible dereference of a null reference.
                //         s /*T:string?*/ .ToString(); // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s").WithLocation(6, 9),
                // (9,9): warning CS8602: Possible dereference of a null reference.
                //         s2 /*T:string?*/ .ToString(); // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s2").WithLocation(9, 9)
                );
            CompileAndVerify(comp);
        }

`</Code>
    <Description>In `Binder.CreateConversion`, the bound method group node gets fixed to have a type (with oblivious annotations). During nullable analysis, we need to undo and re-do that with proper nullable annotation.

Note there is a parallel with lambda conversions. In `NullableWalker.GetUnboundLambda()` and `NullableWalker.ApplyConversion` we do this process for lambdas. I suspect we need something similar for method groups.

We should test all scenarios involving `NullableWalker.RemoveConversion()`. I suspect this logic of undoing effects of `Binder.CreateConversion` should be factored there. For example, `new[] { new Func&lt;string?&gt;(...), () =&gt; "" };`.

``</Description>
  </Issue>
  <Issue>
    <IssueID>32687</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go to All doesn't find methods with dot</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Go to All used to find methods using dot syntax, like ClassName.MethodName.

Repro steps:
1.Create a Console App Project
2. Open Edit-&gt;Go To-&gt;Go To All (Or press 'Ctrl+F')
3.Enter Program.Main, Go To All doesn't find methods. But after deleting last character 'n', Go To All can find the result.
Expect: Enter Program.Main, Go To All can find the result.

![d15ac2a6-da5c-4e05-8576-0ba23d98b98b](


_This issue has been moved from 
VSTS ticketId: 683494_
_These are the original issue comments:_

Sara Shi [MSFT] on 9/14/2018, 02:20 AM (130 days ago): &lt;p&gt;&lt;strong&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&lt;/strong&gt; &lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32676</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot build latest roslyn</Title>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels />
    <Description>I'm getting:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>32674</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect binding of suppressed target-typed array initializer</Title>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_TargetTypedArrayInitializer()
        {
            var comp = CreateCompilation(@"
class C
{
    void M()
    {
        string[] s = (new[] { null })!;
    }
}");
            comp.VerifyDiagnostics(
                // (6,22): error CS0029: Cannot implicitly convert type '?[]' to 'string[]'
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "(new[] { null })!").WithArguments("?[]", "string[]").WithLocation(6, 22),
                // (6,23): error CS0826: No best type found for implicitly-typed array
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_ImplicitlyTypedArrayNoBestType, "new[] { null }").WithLocation(6, 23)
                );
        }
`</Code>
    <Description>
``</Description>
  </Issue>
  <Issue>
    <IssueID>32670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>incorrect null coalescing ?? operator precedence with nullable int - int?</Title>
    <CreatedDate>21/01/2019</CreatedDate>
    <ClosedDate>21/01/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Reproducible with C# interactive x64, Microsoft (R) Roslyn C# Compiler version 2.10.0.0
Solution target framework is: 4.6.2
**Steps to Reproduce**:
int? x = null;
int? y = 1;
Write(x??0+y) // =&gt; prints 1, which is expected since 0 + 1 = 1

Now if you do this:
int? x = 1;
int? y = 1:
Write(x??0+y) // =&gt; prints 1???, although it should be 1+1 = 2, but due to a weird operator precedence with int? and ?? it resolves to 1.

The workaround is to put Parentheses around, like this:
Write((x??0)+y) // =&gt; now it prints 2 as you would expect.

**Expected Behavior**:
When using ?? operator over int?, I expect it to have higher precedence over the later operators, in this case the +

**Actual Behavior**:
int? x = 1;
int? y = 1:
Write(x??0+y) // results in 1, while it should be 2
</Description>
  </Issue>
  <Issue>
    <IssueID>32667</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose additonal compiler options to the scripting API</Title>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>32667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>32667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following compilation options [OptimizationLevel]( [AllowUnsafe]( [CheckOverflow]( [WarningLevel]( aren't exposed in the [scripting options API]( ([CSharpScriptCompiler](

Related issue: #1262</Description>
  </Issue>
  <Issue>
    <IssueID>32661</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify semantic model on suppressed expressions</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From discussion with Neal, we think the suppression expression should have matching `Type` and `ConvertedType`, which would be the converted type of the underlying expression.
In `(Delegate)(() = {}!)` and `Delegate x = () =&gt; {}!;`, the suppressed expressions would have type and converted type `Delegate`.

Other interesting scenarios involving conversions from expressions: `null`, `default`, lambdas, method groups, interpolated strings.

Look for uses of `BoundNode.Kind` and `BoundKind.MethodGroup` (for instance, `GetTypeInfoForNode`)</Description>
  </Issue>
  <Issue>
    <IssueID>32660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB does not produce an error when Conditional is placed on Function members</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

1. Copy the code below into a VB project.
2. Compile.

``

**Expected Behavior**: The code does not compile, because the Conditional attribute is placed on invalid members.

From the [docs](

&gt; You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.

**Actual Behavior**: The code compiles with warning BC41007 ("Attribute 'Conditional' is only valid on 'Sub' declarations"). No idea what would happen if a compiler consuming the assembly were to respect the attribute.</Description>
  </Issue>
  <Issue>
    <IssueID>32651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>invoke completion does not work at the beginning of partial symbol</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This happens with both existing and new completions.

**Steps to Reproduce**:

1. 

``

2.  press Ctrl+J or Ctrl+Space
3. completion popup appears.

**Expected Behavior**:
Bar is selected in the completion popup

**Actual Behavior**:
The first element is selected in the completion popup
</Description>
  </Issue>
  <Issue>
    <IssueID>32650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method C7 crash was not fixed successfully?</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels />
    <Description>This ExtractMethodCodeRefactoringProvider C7 crash was supposed to be fixed, but surprisingly it happened to me again today with VS 15.9.3.  Following is the code that caused it (with some names changed).

``

_Originally posted by @verelpode in 

and   </Description>
  </Issue>
  <Issue>
    <IssueID>32641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Text gets duplicated in Find References if there are multiple classifications</Title>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
        const int Foo = 42;
        const int Bar = Foo;
`</Code>
    <Description>**Steps to Reproduce**:

0. Be a part of the enhanced colors flight.
1. Copy this into a source file:
``
2. Invoke Find References on Foo.

**Actual Behavior**:

![image](

Observe the "BarBar". Since we now have two classifications on this span, we aren't handling it well. Also note the span for Foo (which should be highlighted as the thing we're search on) is all screwed up.</Description>
  </Issue>
  <Issue>
    <IssueID>32749</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash on incomplete switch expression</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>32749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
(e switch {)
`</Code>
    <Description>Parsing the following expression causes the parser (or compiler) to crash with an out-of-memory exception

``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32749</IssueID>
        <PullRequestID>32755</PullRequestID>
        <Title>Fix compiler crash and remove spurious hidden sequence points for switch expression</Title>
        <Description>Fixes #32370

Fix parsing error recovery for incomplete switch expression
Fixes #32749 

See also  for shiproom purposes.

@dotnet/roslyn-compiler May I please have a couple of reviews?</Description>
        <CreatedDate>24/01/2019</CreatedDate>
        <ClosedDate>15/02/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32749</IssueID>
            <PullRequestID>32755</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>32749</IssueID>
            <PullRequestID>32755</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>32755</PullRequestID>
            <IssueID>32749</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>32755</PullRequestID>
            <IssueID>32749</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>32745</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Disable nullable analysis for generated code</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Disable nullable analysis for generated code unless the file contains explicit `#nullable enable`.</Description>
  </Issue>
  <Issue>
    <IssueID>32743</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Finalize the shape of the PragmaWarningDirectiveTriviaSyntax node around NullableKeyword</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>03/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now the shape of the node is following:
``

During code review a suggestion was made to generalize the name of the NullableKeyword property to be something like GroupKeyword - a keyword designating a group of warnings. Right now the only token that can be used in that place is NullableKeyword, but we will be able to expand the set if/when new groups will be added.</Description>
  </Issue>
  <Issue>
    <IssueID>32742</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should #nullable and #pragma nullable have effect on all warnings related to nullable feature rather than only on those reported by flow analysis?</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>32742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now `` settings?</Description>
  </Issue>
  <Issue>
    <IssueID>32739</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Convert to for' disappears when struct member is invoked on the foreach variable</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>22/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>32739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var test = new[] { new Foo() };
foreach (var foo in test)
{
    _ = foo.SomeProperty; // Remove `.SomeProperty` and 'Convert to for' comes back
    // Calling a struct method also scares it away.
    // Interestingly, calling .ToString() does not scare it away so long as it is `Object.ToString`
    // that is being called and not a struct override.
}

struct Foo
{
    public string SomeProperty { get; }
}
`</Code>
    <Description>**Version Used**: VS 2019 Preview 2.0

``

**Expected Behavior**: 'Convert to for' should be available. Otherwise I'm going to have to do this by hand, which has been nearly exclusively the case for me.

I don't care if the semantics change. Even if the struct was mutable and even if it mutated during calls in the loop body, that's not going to stop me from needing access to `i` and wanting to do this particular refactoring to get there.

**Actual Behavior**: Refactoring is not offered.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32739</IssueID>
        <PullRequestID>34384</PullRequestID>
        <Title>Remove data flow analysis from convert foreach to for refactoring</Title>
        <Description>Allow refactoring foreach loops to for loops even when the loop variable is written to. If dataflow analysis shows that it's written to a warning annotation is added to the refactoring to give the user a hint that semantics may change.

Adds two more tests to cover regressions in the scenario reported in #32739 </Description>
        <CreatedDate>23/03/2019</CreatedDate>
        <ClosedDate>24/07/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>32739</IssueID>
            <PullRequestID>34384</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>34384</PullRequestID>
            <IssueID>32739</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34384</PullRequestID>
            <IssueID>32739</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>32738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code Lens reference count is broken</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>26/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported in Build :15.0.26206.0 


Pick any class that is used directly in code. Extract an interface for this class and pick some properties/methods to be part of the interface. Open the interface. Even though the interface is not referenced anywhere except by the implementing class, all properties and methods on the interface have multiple references. It looks like it is showing references to the properties/methods of any classes implementing the interface instead of actual references that use the interface. At best this is somehow useful to some people, at worst it's just plain wrong. Certainly it's not a reference. 

At the very least there should be an option to disable this behavior, or to show either/both &amp;quot;strict&amp;quot; and &amp;quot;loose&amp;quot; references.

_This issue has been moved from 
VSTS ticketId: 418871_
_These are the original issue comments:_

Morten Mertner on 7/19/2018, 06:15 AM (189 days ago): It's great to see that these issues are being monitored and acted upon. Or wait...
Alexander Martens on 8/8/2018, 09:56 AM (169 days ago): &lt;p&gt;The other Issue I saw on this were closed as by design. It's awful. Why on earth should every IDisposable Dispose() be linked...&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32732</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Breaking change in switches over a boolean value</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>32732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Runtime.InteropServices;

class C
{
  [StructLayout(LayoutKind.Explicit)]
  public class M
  {
    [FieldOffset(0)]
    public bool b;

    [FieldOffset(0)]
    public int i;
  }

  static void Main()
  {
    var b = new M() { i = 42 }.b;
    System.Console.WriteLine(Test(b));
  }

  static int Test(bool b)
  {
    switch(b)
    {
      case true: return 1;
      case false: return 2;
      default: return 3;
    }
  }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 2.0
VisualStudio.16.Preview/16.0.0-pre.2.0+28522.59
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
``

**Expected Behavior**:
The code should print `3` as it does now in VS2013-2017 and VS 2019 preview 1.

**Actual Behavior**:
The code prints `1` since VS 2019 preview 2.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32732</IssueID>
        <PullRequestID>45440</PullRequestID>
        <Title>Document https://github.com/dotnet/roslyn/issues/32732</Title>
        <Description>Closes #32732</Description>
        <CreatedDate>25/06/2020</CreatedDate>
        <ClosedDate>25/06/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32732</IssueID>
            <PullRequestID>45440</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>32732</IssueID>
            <PullRequestID>45440</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>45440</PullRequestID>
            <IssueID>32732</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>32732</IssueID>
        <PullRequestID>45347</PullRequestID>
        <Title>Add new public APIs to CompilationWithAnalyzers to fetch syntax and s…</Title>
        <Code>csharp
        /// &lt;summary&gt;
        /// Returns an &lt;see cref="AnalysisResult"/&gt; populated with &lt;see cref="AnalysisResult.SyntaxDiagnostics"/&gt; produced by all &lt;see cref="Analyzers"/&gt; from analyzing the given &lt;paramref name="tree"/&gt;.
        /// Depending on analyzers' behavior, some diagnostics that would be reported for the tree by an analysis of the complete compilation can be absent.
        /// &lt;/summary&gt;
        /// &lt;param name="tree"&gt;Syntax tree to analyze.&lt;/param&gt;
        /// &lt;param name="cancellationToken"&gt;Cancellation token.&lt;/param&gt;
        public Task&lt;AnalysisResult&gt; GetAnalysisResultAsync(SyntaxTree tree, CancellationToken cancellationToken);

        /// &lt;summary&gt;
        /// Returns an &lt;see cref="AnalysisResult"/&gt; populated with &lt;see cref="AnalysisResult.SyntaxDiagnostics"/&gt; produced by given &lt;paramref name="analyzers"/&gt; from analyzing the given &lt;paramref name="tree"/&gt;.
        /// Depending on analyzers' behavior, some diagnostics that would be reported for the tree by an analysis of the complete compilation can be absent.
        /// &lt;/summary&gt;
        /// &lt;param name="tree"&gt;Syntax tree to analyze.&lt;/param&gt;
        /// &lt;param name="analyzers"&gt;Analyzers whose diagnostics are required. All the given analyzers must be from the analyzers passed into the constructor of &lt;see cref="CompilationWithAnalyzers"/&gt;.&lt;/param&gt;
        /// &lt;param name="cancellationToken"&gt;Cancellation token.&lt;/param&gt;
        public Task&lt;AnalysisResult&gt; GetAnalysisResultAsync(SyntaxTree tree, ImmutableArray&lt;DiagnosticAnalyzer&gt; analyzers, CancellationToken cancellationToken);

        /// &lt;summary&gt;
        /// Returns an &lt;see cref="AnalysisResult"/&gt; populated with &lt;see cref="AnalysisResult.SemanticDiagnostics"/&gt; produced by all &lt;see cref="Analyzers"/&gt; from analyzing the given &lt;paramref name="model"/&gt;, optionally scoped to a &lt;paramref name="filterSpan"/&gt;.
        /// Depending on analyzers' behavior, some diagnostics that would be reported for the tree by an analysis of the complete compilation can be absent.
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;Semantic model representing the syntax tree to analyze.&lt;/param&gt;
        /// &lt;param name="filterSpan"&gt;An optional span within the tree to scope analysis.&lt;/param&gt;
        /// &lt;param name="cancellationToken"&gt;Cancellation token.&lt;/param&gt;
        public Task&lt;AnalysisResult&gt; GetAnalysisResultAsync(SemanticModel model, TextSpan? filterSpan, CancellationToken cancellationToken);

        /// &lt;summary&gt;
        /// Returns an &lt;see cref="AnalysisResult"/&gt; populated with &lt;see cref="AnalysisResult.SemanticDiagnostics"/&gt; produced by the given &lt;paramref name="analyzers"/&gt; from analyzing the given &lt;paramref name="model"/&gt;, optionally scoped to a &lt;paramref name="filterSpan"/&gt;.
        /// Depending on analyzers' behavior, some diagnostics that would be reported for the tree by an analysis of the complete compilation can be absent.
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;Semantic model representing the syntax tree to analyze.&lt;/param&gt;
        /// &lt;param name="filterSpan"&gt;An optional span within the tree to scope analysis.&lt;/param&gt;
        /// &lt;param name="analyzers"&gt;Analyzers whose diagnostics are required. All the given analyzers must be from the analyzers passed into the constructor of &lt;see cref="CompilationWithAnalyzers"/&gt;.&lt;/param&gt;
        /// &lt;param name="cancellationToken"&gt;Cancellation token.&lt;/param&gt;
        public Task&lt;AnalysisResult&gt; GetAnalysisResultAsync(SemanticModel model, TextSpan? filterSpan, ImmutableArray&lt;DiagnosticAnalyzer&gt; analyzers, CancellationToken cancellationToken);
`</Code>
        <Description>…emantic diagnostics for a specific tree, which are categorized by each analyzer that reported the diagnostic.

## Current APIs and IDE usage
We have existing APIs on `CompilationWithAnalyzers` that return the analyzers diagnostics for a given tree:



This is sufficient for the current IDE analyzer execution model for open files - run each analyzer sequentially on each open file by calling the above APIs with a single analyzer at a time.

## New proposed APIs and IDE usage
As part of  we are moving open file analyzer execution to OOP (outside devenv.exe). This allows us to execute all open file analysis concurrently in that process. However, the above APIs are not sufficient for this analysis model as we need to categorize diagnostics by each analyzer. The returned diagnostics for the above existing APIs are a single array `ImmutableArray&lt;Diagnostic&gt;` instead of a dictionary keyed by each analyzer. Additionally, the `AD0001` diagnostics reported for analyzer exceptions cannot be mapped to specific analyzer. This PR proposes adding overloads for `GetAnalysisResultAsync`, which are equivalent APIs that return `AnalysisResult` instead of `ImmutableArray&lt;Diagnostic&gt;`:

``
See  for additional details.

**NOTE:** I will send out a separate email to Roslyn API review committee to get an API approval and post an update here.</Description>
        <CreatedDate>21/06/2020</CreatedDate>
        <ClosedDate>25/06/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>32732</IssueID>
            <PullRequestID>45347</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>32732</IssueID>
            <PullRequestID>45347</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>32728</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error message for pattern-based using in C# 7.3</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>32728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

class Program
{
    static void Main()
    {
        var y = Console.ReadLine() switch { _ =&gt; 0 };
        // ↑ CS8370  Feature 'recursive patterns' is not available in C# 7.3. Please use language version 8.0 or greater.

        using (var x = new X()) { }
        // ↑ CS1674  'X': type used in a using statement must be implicitly convertible to 'System.IDisposable'
        // Why not CS8370?
    }

    ref struct X { public void Dispose() { } }
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 2019 Preview Version 16.0.0 Preview 2.0
LangVersion latest (C# 7.3)

**Steps to Reproduce**:

``

**Expected Behavior**:

CS8370 error in line 10.

**Actual Behavior**:

CS1674
</Description>
  </Issue>
  <Issue>
    <IssueID>32727</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>False positive for IDE0051 </Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>`csharp
using System.Runtime.InteropServices;

class Program
{
    private const int MAX_PATH = 260; // IDE0051 unused field

    [StructLayout(LayoutKind.Sequential)]
    internal struct ProcessEntry32
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MAX_PATH)]
        public string szExeFile;
    }
}
``</Code>
    <Description>**Version Used**: VS2019 Preview 2

**Steps to Reproduce**:

Minimal code to reproduce:

``

**Expected Behavior**:

`MAX_PATH` should not be reported as unused as there is a usage in the attribute `MarshalAs`.

**Actual Behavior**:

`MAX_PATH` is reported as unused.</Description>
  </Issue>
  <Issue>
    <IssueID>32724</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion for immediate window commands displays two popups</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>15/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1.  Start debugging
2.  Stop at a breakpoint
3. Go to Immediate Window
4. Type "&gt; a"

**Expected Behavior**:
See a legacy old command completion popup only

**Actual Behavior**:
See a legacy old command completion popup as well as a regular completion popup (both old and new completions).</Description>
  </Issue>
  <Issue>
    <IssueID>32723</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Enhanced colors feedback.</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Overall i like it.  Feels like vscode (which is good).  One thing i don't like at first blush is the bolded statics.  They just make things feel 'off balance' without there being a good reason for it.

i.e. 'bold' is generally used for emphasis or impact.  But i see no reason (and do not feel good about) statics having that.  This is quite likely because static stuff is generally *less* important to me.  It's stuff like helpers.  Or utilities.  And it ends up feeling like it's *more* important despite being stuff i care far less about.

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>32722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Adjust wording for ERR_NoConvToIDisp</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>32722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The current message when attempting to dispose something that is non disposable is incorrect (due to #32177) `'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'.` We should update to specifically mention `ref struct` patterns.

We should correspondingly update `ERR_NoConvToIDispWrongAsync` to match as needed.</Description>
  </Issue>
  <Issue>
    <IssueID>32721</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'return value is unused' is overly aggressive</Title>
    <CreatedDate>24/01/2019</CreatedDate>
    <ClosedDate>24/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm getting a warning by default for writing code like this:

![image](

This is because i'm not bothering to look at the return value.  This is because the return value is pretty irrelevant to me.  All it has is:

![image](

However, i'm now forced to update my code to look much more ugly as:

![image](

Or to suppress the warning.  However, the original code was *the* idiomatic way to just call code and not have to worry about the return value. 

It seems like the feature is super aggressive here.  In our projects, we see literally thousands of these warnings, and i'm struggling to think how we could deal with them.  either:

1. we bulk-fix.  but that means if we're actually ignoring something we shouldn't be ignoring, then we're SOL.
2. we don't have this feature on.

It seems like the feature needs to be smarter.  Perhaps by having an understanding of which APIs it's very much a problem to ignore results from.</Description>
  </Issue>
  <Issue>
    <IssueID>32711</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>After configuration change in desktop csproj, project.OutputFilePath still points to old output path</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview Version 16.0.0 Preview 2.0 [28522.59.d16.0]

**Steps to Reproduce**:
We have a solution-crawler based analyzer (for source-based unit test discovery)  that detects and reacts to project configuration changes via the `IIncrementalAnalyzer.AnalyzeProjectAsync(Project project, bool projectConfigurationChanged, CancellationToken token)` API.

In a desktop csproj, after a solution-wide configuration change (i.e. change Debug -&gt; Release in VS drop-down), the solution crawler correctly calls the above method on our analyzer with `projectConfigurationChanged = true`. However `project.OutputFilePath` points to the old (Debug) output path instead of the new (Release) path.

On debugging, looks like `project.Solution.Workspace.CurrentSolution.Projects.First().OutputFilePath` is also set to the old (Debug) path. So looks like the output path is not being updated in Roslyn's internal project system abstractions after a configuration change.

**Expected Behavior**:
`project.OutputFilePath` should point to the new (Release) output path.

**Actual Behavior**:
`project.OutputFilePath` still points to the old (Debug) output path.
</Description>
  </Issue>
  <Issue>
    <IssueID>32707</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: `await using` doesn't ecognize `DisposeAsync` that returns an awaitable</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>32707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Relates to API change </Description>
  </Issue>
  <Issue>
    <IssueID>32705</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CodeRefactoring in nuget package doesn't work</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>04/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Microsoft.CodeAnalysis 1.0.0

**Steps to Reproduce**:

1. Install the nuget package for my Serilog Analyzer  from 
2. Attempt to invoke a CodeRefactoring like the ShowConfigCodeRefactoringProvider like shown here 

**Expected Behavior**:
Works as in the gif

**Actual Behavior**:
Nothing happens, Analyzers and CodeFixes work fine but CodeRefactorings only work in the VSIX version.
</Description>
  </Issue>
  <Issue>
    <IssueID>32703</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Not inferring nullability of non-nullable value compared to null</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should report warnings for `s.Length` and `c.F.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>32702</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 2019 Preview 1 is reporting members as unused when they are</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static partial class ContainerConfig
{
   static partial void Configure( ContainerBuilder builder, Assembly assembly )
    {
     builder.ConfigureMvcBindings()
                .ConfigureCoreBindings();
     builder.ConfigureLogging();
   }  

   //CodeLens says ref count = 1, method is marked as unused
   private static ContainerBuilder ConfigureCoreBindings( this ContainerBuilder builder )
   {
       return builder;
   }

   //CodeLens says ref count = 1, method is seen as used
   public static ContainerBuilder ConfigureMvcBindings( this ContainerBuilder builder )
   {
      return builder;
   }

   //CodeLens says ref count = 1, method is seen as unused
   private static ContainerBuilder ConfigureLogging( this ContainerBuilder builder )
   {
      return builder;
   }
}
`</Code>
    <Description>**Version Used**:  VS2019 Preview 1

**Steps to Reproduce**:

Note that this is hit or miss. It randomly seems fine with some methods but not others.

``

This seems to be working correctly in VS 2018 15.9.4. Closing and reopening VS doesn't change anything.

**Expected Behavior**:

Members that are being used are not marked as unused.

**Actual Behavior**:

Some members that are clearly being used in the same source file are still being marked as unused. The CodeLens reference count is correct but Roslyn doesn't seem to detect the reference.

![unusedmembers](
</Description>
  </Issue>
  <Issue>
    <IssueID>32701</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing warning for assigning an annotated possible null value to an unconstrained generic</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>26/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
class C
{
  static void Main()
  {
    string nonNullableString = "";
    M&lt;string&gt;(ref nonNullableString, null); 
    nonNullableString.ToString();
  }
  static void M&lt;T&gt;(ref T t, dynamic? d)
  {
    t = d; // missing warning
  }
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2019 Preview
Version 16.0.0 Preview 1.1
VisualStudio.16.Preview/16.0.0-pre.1.1+28408.50
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code
``



**Expected Behavior**:
Warning for possible null reference assignment to an unconstrained generic type. `d` is explicitly annotated as nullable and T can be substituted with non-nullable type. There should be a warning just as for e.g. `t = default`

**Actual Behavior**:
No warnings. The code compiles and fails at runtime with a `NullReferenceException`</Description>
  </Issue>
  <Issue>
    <IssueID>32698</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need nullability analysis of delegate creation expressions</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_DelegateCreation()
        {
            var source =
@"class C
{
    static void Main()
    {
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }!);
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }!);
        _ = new System.Func&lt;string, string&gt;(M1!);
        _ = new System.Func&lt;string?, string?&gt;(M2!);

        // without suppression
        _ = new System.Func&lt;string, string&gt;((string? x) =&gt; { return null; }); // 1
        _ = new System.Func&lt;string?, string?&gt;((string x) =&gt; { return string.Empty; }); // 2
        _ = new System.Func&lt;string, string&gt;(M1); // 3
        _ = new System.Func&lt;string?, string?&gt;(M2); // 4
    }
    static string? M1(string? x) =&gt; throw null;
    static string M2(string x) =&gt; throw null;
}";

            // missing warnings

            // cover cases in BindDelegateCreationExpression
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue(TestOptions.DebugExe));
            comp.VerifyDiagnostics(
                );
            CompileAndVerify(comp);

            // Need to verify the semantic model
            // Tracked by https://github.com/dotnet/roslyn/issues/32661
        }
`</Code>
    <Description>
``</Description>
  </Issue>
  <Issue>
    <IssueID>32697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need to re-analyze method groups</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_LambdaInOverloadResolution()
        {
            var source =
@"class C
{
    static void Main(string? x)
    {
        var s = M(() =&gt; { return x; });
        s /*T:string?*/ .ToString(); // 1

        var s2 = M(() =&gt; { return x; }!); // suppressed
        s2 /*T:string?*/ .ToString(); // 2

        var s3 = M(M2);
        s3 /*T:string*/ .ToString(); // 3

        var s4 = M(M2!); // suppressed
        s4 /*T:string*/ .ToString(); // 4
    }
    static T M&lt;T&gt;(System.Func&lt;T&gt; x) =&gt; throw null;
    static string? M2() =&gt; throw null;
}";
            var comp = CreateCompilation(source, options: WithNonNullTypesTrue());
            comp.VerifyTypes();

            // TODO2
            // Missing warnings on s3 and s4
            comp.VerifyDiagnostics(
                // (6,9): warning CS8602: Possible dereference of a null reference.
                //         s /*T:string?*/ .ToString(); // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s").WithLocation(6, 9),
                // (9,9): warning CS8602: Possible dereference of a null reference.
                //         s2 /*T:string?*/ .ToString(); // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "s2").WithLocation(9, 9)
                );
            CompileAndVerify(comp);
        }

`</Code>
    <Description>In `Binder.CreateConversion`, the bound method group node gets fixed to have a type (with oblivious annotations). During nullable analysis, we need to undo and re-do that with proper nullable annotation.

Note there is a parallel with lambda conversions. In `NullableWalker.GetUnboundLambda()` and `NullableWalker.ApplyConversion` we do this process for lambdas. I suspect we need something similar for method groups.

We should test all scenarios involving `NullableWalker.RemoveConversion()`. I suspect this logic of undoing effects of `Binder.CreateConversion` should be factored there. For example, `new[] { new Func&lt;string?&gt;(...), () =&gt; "" };`.

``</Description>
  </Issue>
  <Issue>
    <IssueID>32687</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go to All doesn't find methods with dot</Title>
    <CreatedDate>23/01/2019</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Go to All used to find methods using dot syntax, like ClassName.MethodName.

Repro steps:
1.Create a Console App Project
2. Open Edit-&gt;Go To-&gt;Go To All (Or press 'Ctrl+F')
3.Enter Program.Main, Go To All doesn't find methods. But after deleting last character 'n', Go To All can find the result.
Expect: Enter Program.Main, Go To All can find the result.

![d15ac2a6-da5c-4e05-8576-0ba23d98b98b](


_This issue has been moved from 
VSTS ticketId: 683494_
_These are the original issue comments:_

Sara Shi [MSFT] on 9/14/2018, 02:20 AM (130 days ago): &lt;p&gt;&lt;strong&gt;Thanks for taking the time to report this issue to us. We’ve created a bug for this issue as internal tracking. The status on this Developer Community item will be updated as that bug is resolved. Thanks again for your feedback.&lt;/strong&gt; &lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32676</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot build latest roslyn</Title>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels />
    <Description>I'm getting:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>32674</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect binding of suppressed target-typed array initializer</Title>
    <CreatedDate>22/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void SuppressNullableWarning_TargetTypedArrayInitializer()
        {
            var comp = CreateCompilation(@"
class C
{
    void M()
    {
        string[] s = (new[] { null })!;
    }
}");
            comp.VerifyDiagnostics(
                // (6,22): error CS0029: Cannot implicitly convert type '?[]' to 'string[]'
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "(new[] { null })!").WithArguments("?[]", "string[]").WithLocation(6, 22),
                // (6,23): error CS0826: No best type found for implicitly-typed array
                //         string[] s = (new[] { null })!;
                Diagnostic(ErrorCode.ERR_ImplicitlyTypedArrayNoBestType, "new[] { null }").WithLocation(6, 23)
                );
        }
`</Code>
    <Description>
``</Description>
  </Issue>
  <Issue>
    <IssueID>32670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>incorrect null coalescing ?? operator precedence with nullable int - int?</Title>
    <CreatedDate>21/01/2019</CreatedDate>
    <ClosedDate>21/01/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Reproducible with C# interactive x64, Microsoft (R) Roslyn C# Compiler version 2.10.0.0
Solution target framework is: 4.6.2
**Steps to Reproduce**:
int? x = null;
int? y = 1;
Write(x??0+y) // =&gt; prints 1, which is expected since 0 + 1 = 1

Now if you do this:
int? x = 1;
int? y = 1:
Write(x??0+y) // =&gt; prints 1???, although it should be 1+1 = 2, but due to a weird operator precedence with int? and ?? it resolves to 1.

The workaround is to put Parentheses around, like this:
Write((x??0)+y) // =&gt; now it prints 2 as you would expect.

**Expected Behavior**:
When using ?? operator over int?, I expect it to have higher precedence over the later operators, in this case the +

**Actual Behavior**:
int? x = 1;
int? y = 1:
Write(x??0+y) // results in 1, while it should be 2
</Description>
  </Issue>
  <Issue>
    <IssueID>32667</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose additonal compiler options to the scripting API</Title>
    <CreatedDate>20/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>32667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>32667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following compilation options [OptimizationLevel]( [AllowUnsafe]( [CheckOverflow]( [WarningLevel]( aren't exposed in the [scripting options API]( ([CSharpScriptCompiler](

Related issue: #1262</Description>
  </Issue>
  <Issue>
    <IssueID>32661</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify semantic model on suppressed expressions</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>32661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From discussion with Neal, we think the suppression expression should have matching `Type` and `ConvertedType`, which would be the converted type of the underlying expression.
In `(Delegate)(() = {}!)` and `Delegate x = () =&gt; {}!;`, the suppressed expressions would have type and converted type `Delegate`.

Other interesting scenarios involving conversions from expressions: `null`, `default`, lambdas, method groups, interpolated strings.

Look for uses of `BoundNode.Kind` and `BoundKind.MethodGroup` (for instance, `GetTypeInfoForNode`)</Description>
  </Issue>
  <Issue>
    <IssueID>32660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB does not produce an error when Conditional is placed on Function members</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>32660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 16.0 Preview 1.1

**Steps to Reproduce**:

1. Copy the code below into a VB project.
2. Compile.

``

**Expected Behavior**: The code does not compile, because the Conditional attribute is placed on invalid members.

From the [docs](

&gt; You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.

**Actual Behavior**: The code compiles with warning BC41007 ("Attribute 'Conditional' is only valid on 'Sub' declarations"). No idea what would happen if a compiler consuming the assembly were to respect the attribute.</Description>
  </Issue>
  <Issue>
    <IssueID>32651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>invoke completion does not work at the beginning of partial symbol</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This happens with both existing and new completions.

**Steps to Reproduce**:

1. 

``

2.  press Ctrl+J or Ctrl+Space
3. completion popup appears.

**Expected Behavior**:
Bar is selected in the completion popup

**Actual Behavior**:
The first element is selected in the completion popup
</Description>
  </Issue>
  <Issue>
    <IssueID>32650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method C7 crash was not fixed successfully?</Title>
    <CreatedDate>19/01/2019</CreatedDate>
    <ClosedDate>22/01/2019</ClosedDate>
    <IssueLabels />
    <Description>This ExtractMethodCodeRefactoringProvider C7 crash was supposed to be fixed, but surprisingly it happened to me again today with VS 15.9.3.  Following is the code that caused it (with some names changed).

``

_Originally posted by @verelpode in 

and   </Description>
  </Issue>
  <Issue>
    <IssueID>32641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Text gets duplicated in Find References if there are multiple classifications</Title>
    <CreatedDate>18/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
        const int Foo = 42;
        const int Bar = Foo;
`</Code>
    <Description>**Steps to Reproduce**:

0. Be a part of the enhanced colors flight.
1. Copy this into a source file:
``
2. Invoke Find References on Foo.

**Actual Behavior**:

![image](

Observe the "BarBar". Since we now have two classifications on this span, we aren't handling it well. Also note the span for Foo (which should be highlighted as the thing we're search on) is all screwed up.</Description>
  </Issue>
  <Issue>
    <IssueID>32271</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Unhandled declaration pattern context" when using switch expressions </Title>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Affected Branch: master
Affected Build:  16.0.0 Preview 1.1+ 
Affected Product Language: C#  
Solution: \\\\mlangfs1\public\andrha\ConsoleApp1.zip 
Dump: \\\\mlangfs1\public\andrha\unhandled_decl_dump.dmp

Steps to reproduce:

1. Open zipped solution, specifically Program.cs. 
2. Run VS under debugger with debug Roslyn (I used f5 from Roslyn repo) 
</Description>
  </Issue>
  <Issue>
    <IssueID>32266</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC: support async-iterator methods</Title>
    <CreatedDate>09/01/2019</CreatedDate>
    <ClosedDate>31/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>32266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>32266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I noticed that there is some EnC for handling iterator and async methods, so there will likely be some handling for async-iterator methods too.

FYI @tmat @ivanbasov @jinujoseph 
Let me know what you think in terms of scheduling. If this could be looked at in preview3, then I don't need to block this scenario.
Thanks

Async-streams umbrella: </Description>
  </Issue>
  <Issue>
    <IssueID>32259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`TypeSymbolWithAnnotations.ToDisplayString` misplaces `?` on multidimensional arrays</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The implementation of `TypeSymbolWithAnnotations.ToDisplayString` places the `?` after a type. That placement is incorrect for multidimensional arrays, in which it should be placed after the first pair of brackets.

We probably need to handle arrays specially, as we do in `SymbolDisplayVisitor.VisitTypeSymbolWithAnnotations`.

For the moment I'm working around this by avoiding `TypeSymbolWithAnnotations` in diagnostics.</Description>
  </Issue>
  <Issue>
    <IssueID>32258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable array type improperly accepted in array creation</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
&gt; #nullable enable
&gt; public class C {
&gt;     public void M() {
&gt;     	_ = new C?(); // error 
&gt;         _ = new string[50]?; // no error (incorrect)
&gt;         _ = new string[50]?[,]; // no error (incorrect)
&gt;     }
&gt; }
&gt; `</Code>
    <Description>As pointed out in 

&gt; Another case where this is incorrectly accepted:
&gt; ``
&gt; Looks like the same issue.

See also  which shows that this is a breaking change.

</Description>
  </Issue>
  <Issue>
    <IssueID>32254</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>32254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Wiki] Mistake in markdown file </Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>32254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On page  mistake in markdown. 

Above the "General" header:
- **Expected**: `## Areas`
- **Actual**: `##Areas`

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>32252</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable ignoring explicit null checks when variable is considered nullable.</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Currently, no warning is reported for this code. This is especially bad for code with W warnings turned off, such that variable declarations not having annotations is considered normal.

/cc @MadsTorgersen, do you agree that we should have a safety warning here? This is related to the reachability topic I added to the agenda.</Description>
  </Issue>
  <Issue>
    <IssueID>32251</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[c# 7.3] cannot pass this with in? Seems like you should</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels />
    <Code>csharp
class A
{
    public string Name;
    public void MapObjectB(in B obj) { }
}

class B
{
    public string Name;
    public void DoWorkWithA(A obj) =&gt; obj.MapObjectB(in this);
}

class Program
{
    void Main()
    {
        var a = new A();
        var b = new B();
        a.Name = "Bob";
        b.DoWorkWithA(a);
    }
}
`</Code>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

1. Use the code below

``

**Expected Behavior**:

I could use `in this` as `this` is passed with `in`, it is read-only and not assignable.

**Actual Behavior**:

Error that you cannot pass `this` by `ref`</Description>
  </Issue>
  <Issue>
    <IssueID>32249</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Internal error in the C# compiler (Core Console) with trivial code</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>32249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>32249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Based on 
**Version Used**: 
Dev 16. Was able to reproduce
**Steps to Reproduce**:

1.  Create a standard C# .NET Core console app with the default code:
``

2.  Set a breakpoint at             `Console.WriteLine("Hello World!");`
3. In the Immediate Window, type `var test = "test";`

**Expected Behavior**:
Statement executed

**Actual Behavior**:
The immediate window displays "Internal error in the C# compiler"</Description>
  </Issue>
  <Issue>
    <IssueID>32247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Dev16]Error "Changes are not allowed while code is running" shows while ENC about VB framework app</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>16/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>32247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>32247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There are some VSO bugs / Feedback requests. Here are some of them: 


**[Machine]**

OS: Windows-10-Enterprise-RS4

Product: VS Enterprise ENU d16.0stg 28405.127
 

Steps to reproduce:


1. Create a VB Console app(.Net Framework) and add code as following:
``
2. Set a BP at line which contains string "Console.WriteLine("hello")" 
3. F5
4. Press "Enter" key on the end of the line while it hit BP

**[Expected]**
It could modify code successfully.

**[Actual]**
It cannot ENC(see Capture.PNG).

Microsoft Visual Studio
Changes are not allowed while code is running.
OK   
![image](


 [Investigate]

1. The issue cannot repro on VB core console app.</Description>
  </Issue>
  <Issue>
    <IssueID>32246</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: stepping through async-iterator seems wrong</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>32246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- If you repeatedly "step into", any code after an await will not show as steps. I expect that it would step inside the async-iterator method, through awaits and such. ~~I suspect this works for async methods because the VS debugger recognizes `AsyncMethodStateMachineAttribute`, but doesn't recognize the new `AsyncIteratorMethodStateMachineAttribute`.~~ It was a problem with `AsyncIteratorMethodBuilder` (fixed in [debugger]( for preview3)
- After an item was yielded to the foreach and you "step into" again, the last "yield return" will be highlighted. (fix 

``

![debug-stream](

FYI @stephentoub @tmat </Description>
  </Issue>
  <Issue>
    <IssueID>32243</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Breaking change in parsing array allocation on the left of a conditional operator</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
    class C
    {
        static void M(string[][] x, bool y, bool z)
        {
            if (x == new string[3][] ? y : z)
            {
            }
        }
    }
`</Code>
    <Description>The following code is accepted by the compiler in C# 7 but rejected by recent prototypes of C# 8. Although this particular example is slightly contrived, there are likely realistic examples that would be broken.
``
</Description>
  </Issue>
  <Issue>
    <IssueID>32242</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No warning dereferencing field of default struct instance</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Warnings should be reported dereferencing `S.F`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>32241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>can't run restore.cmd</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>32241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>32241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Can someone help? I apologize in advance if I'm missing something very obvious.

**Version Used**: latest `master`. I have powershell 3.0

**Steps to Reproduce**:

1. run `restore.cmd`

**Expected Behavior**: no error

**Actual Behavior**:
I get an error saying
``
</Description>
  </Issue>
  <Issue>
    <IssueID>32235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>32235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MessageArgs in CodeFixProvider</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>09/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>32235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>32235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>32235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>32235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
int intA;
double dobB;
decimal decC;
Random varD;
DataTable dttE;
string strF;


When I created the analyzer, to check if the prefix was correct I had to consult it. During the creation of the diagnosis, he was part of the MessageArgs (following code):

 c#
////////////////////////////////////
//Consider Prefix is already defined
////////////////////////////////////
private void AnalisaVariavelG(SyntaxNodeAnalysisContext obj)
{
    var varIden = ((FieldDeclarationSyntax)obj.Node).Declaration.Variables;
    for (int i = 0; i &lt; varIden.Count; i++) //For each attribute in declaration
    {
        var al = varIden[i].Identifier.Text;
        if (al.Length &lt;= 3 || Prefix != al.Substring(0, 3))
        {
            var diagnostic = Diagnostic.Create(Rule, varIden[i].Identifier.GetLocation(), al, Prefix);
            obj.ReportDiagnostic(diagnostic);
        }
    }
}


But when I try to access the arguments in CodeFixProvider, the list is always empty. If these arguments were received, I would avoid a new query.

 c#
public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)
{
    for (int i = 0; i &lt; context.Diagnostics.Length; i++)
    {
        ...
        var span = context.Diagnostics[i].Location.SourceSpan;
        context.RegisterCodeFix(CodeAction.Create("Corrigir prefixo", 
                        c =&gt; CorrigePrefixoAsync(context.Document, span, c)), 
                        context.Diagnostics[i]);
        //context.RegisterCodeFix(CodeAction.Create("Corrigir prefixo", 
                        c =&gt; CorrigePrefixoAsync(context.Document, span, c, context.Diagnostics[i].messageArgs)),
                         context.Diagnostics[i]); 
        //The commented would be ideal (By the way, messageArgs is protected for some reason (_messageArgs))
        ...
    }
}
`</Code>
    <Description>I am creating a rule that defines variable prefixes. Examples:

``</Description>
  </Issue>
  <Issue>
    <IssueID>32234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Access to type full name in analyzer</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>32234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>32234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>32234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
...
context.RegisterSyntaxNodeAction(ClassAttributesA, SyntaxKind.FieldDeclaration); //ClassAttributes
...
private void ClassAttributesA(SyntaxNodeAnalysisContext obj) 
{
	var declStr = obj.Node.ToString();
	var varDecl = ((FieldDeclarationSyntax) obj.Node).Declaration;
	//SemanticModel varSemantic = obj.SemanticModel; //Return something meaningless

	var fullType = obj.ContainingSymbol.OriginalDefinition;

	/*if (((Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol)obj.ContainingSymbol).Type.ToString() 
                == "Microsoft.")
        {

        }*/ //Comented since Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol is protected

	...
}


However, the only way to access the Type property of obj.ContainingSymbol is by converting obj.ContainingSymbol to Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol which is a protected class. Unfortunately I did not find another way. Basically, I need a way to access the type full name. If there is any other way of access to what I'm looking for, I'll be happy to know.

Examples:
 c# 
Random a; //Should return System.Random
int b; //Should return System.Int32
DataTable c; //Should return System.Data.DataTable
Microsoft.Win32.TimerElapsedEventArgs d; //Should return Microsoft.Win32.TimerElapsedEventArgs
TimerElapsedEventArgs e; //Should return Microsoft.Win32.TimerElapsedEventArgs
`</Code>
    <Description>I'm creating an analyzer and I want to analyze in a certain way variables from a specific namespace. To access the namespace, the only way I found was with the following code

``



</Description>
  </Issue>
  <Issue>
    <IssueID>32232</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>32232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Predefined type 'System.Object' is not defined or imported</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>19/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>32232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. MSBuild Upgrade to the15.7.9
2. Parse the project with Roslyn
3. Predefined type 'System.Object' or 'System.*'is not defined or imported
4.[mycode](
I test project is 
**Expected Behavior**:

**Actual Behavior**:
I've installed .net framwork 4.6 but
Unable to find .net framwork
If you can
Can you tell me how I can find .net framwork
Thanks.
</Description>
  </Issue>
  <Issue>
    <IssueID>32228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Remove unused parameter" doesn't handle VB's addressof</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 

``</Description>
  </Issue>
  <Issue>
    <IssueID>32227</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Remove unused parameter" doesn't recognize serialization constructors</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>08/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>32227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28507.140.d16.0stg]

**Steps to Reproduce**:

``

**Expected Behavior**:
No warning

**Actual Behavior**:
Severity	Code	Description	Project	File	Line	Category	Suppression State
Message	IDE0060	Remove unused parameter 'Context'	Microsoft.VisualStudio.AppDesigner	E:\project-system2\src\Microsoft.VisualStudio.AppDesigner\PropPageDesigner\PropertyPageSerializationService_Store.vb	127	Style	Active

</Description>
  </Issue>
  <Issue>
    <IssueID>32226</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Analyzer loader fails to load dll that lives next to analyzer</Title>
    <CreatedDate>08/01/2019</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Category	Suppression State	Detail Description
Warning	CS8032	An instance of analyzer Roslyn.Diagnostics.CSharp.Analyzers.CSharpCodeActionCreateAnalyzer cannot be created from C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.3-beta1.18614.2\analyzers\dotnet\cs\Roslyn.Diagnostics.CSharp.Analyzers.dll: Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..	Microsoft.VisualStudio.ProjectSystem.Managed.VS		1	Roslyn.HostError	Active	Could not load file or assembly 'Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
-----
Assembly manager loaded from:  C:\Windows\Microsoft.NET\Framework\v4.0.30319\clr.dll
Running under executable  C:\Program Files (x86)\Microsoft Visual Studio\2019\16.0stg\Common7\IDE\devenv.exe
--- A detailed error log follows. 

=== Pre-bind state information ===
LOG: DisplayName = Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
 (Fully-specified)
LOG: Appbase = file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/
LOG: Initial PrivatePath = NULL
Calling assembly : Roslyn.Diagnostics.CSharp.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
===
LOG: This bind starts in LoadFrom load context.
WRN: Native image will not be probed in LoadFrom context. Native image will only be probed in default load context, like with Assembly.Load().
LOG: Using application configuration file: C:\Users\davkean\AppData\Local\Microsoft\VisualStudio\16.0_afa0bdd1\devenv.exe.config
LOG: Using host configuration file: 
LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework\v4.0.30319\config\machine.config.
LOG: Post-policy reference: Roslyn.Diagnostics.Analyzers, Version=2.6.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PublicAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TemplateProviders/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/TestWindow/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Microsoft/XamlLanguageService/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/Debugger/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/CommonExtensions/Platform/DiagnosticsHub/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2019/16.0stg/common7/ide/PrivateAssemblies/DataCollectors/x86/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.DLL.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers.EXE.
LOG: Attempting download of new URL file:///C:/Users/davkean/AppData/Local/Temp/VS/AnalyzerAssemblyLoader/36ea2f77fde84a02b288afa6ce94ba22/12/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.EXE.

-----




If I look at the "shadow caching" (I presume), I see:


&gt; dir C:\Users\davkean\AppData\Local\Temp\VS\AnalyzerAssemblyLoader\36ea2f77fde84a02b288afa6ce94ba22\12

Roslyn.Diagnostics.CSharp.Analyzers.dll


If I look at the package, I see:


&gt; dir C:\Users\davkean\.nuget\packages\roslyn.diagnostics.analyzers\2.6.3-beta1.18614.2\analyzers\dotnet\cs

Roslyn.Diagnostics.Analyzers.dll
Roslyn.Diagnostics.CSharp.Analyzers.dll
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. git clone 
2. cd project-system
3. git checkout eacf50af576d7016b40e5b880c18cc93ee22f258
4. build
5. ProjectSystem.sln

**Expected Behavior**:
No errors about loading binaries

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>32216</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>An unnecessary control flow graph capture is introduced for a switch expression arm that is using ```&amp;&amp;```/```||``` operators within guard expression </Title>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>24/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>32216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [CompilerTrait(CompilerFeature.IOperation, CompilerFeature.Dataflow)]
        [Fact]
        public void SwitchExpression_Guard()
        {
            string source = @"
#pragma warning disable CS8509
public sealed class MyClass
{
    void M(bool result, int input, bool a, bool b)
    /*&lt;bind&gt;*/{
        result = input switch
            {
                1 when a &amp;&amp; b =&gt; false
            };
    }/*&lt;/bind&gt;*/
}
";
            var expectedDiagnostics = DiagnosticDescription.None;
            string expectedFlowGraph = @"
Block[B0] - Entry
    Statements (0)
    Next (Regular) Block[B1]
        Entering: {R1}

.locals {R1}
{
    CaptureIds: [0] [1]
    Block[B1] - Block
        Predecessors: [B0]
        Statements (1)
            IFlowCaptureOperation: 0 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'result')
              Value: 
                IParameterReferenceOperation: result (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'result')

        Next (Regular) Block[B2]
            Entering: {R2}

    .locals {R2}
    {
        CaptureIds: [2]
        Block[B2] - Block
            Predecessors: [B1]
            Statements (1)
                IFlowCaptureOperation: 2 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'input')
                  Value: 
                    IParameterReferenceOperation: input (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'input')

            Jump if False (Regular) to Block[B8]
                IIsPatternOperation (OperationKind.IsPattern, Type: System.Boolean) (Syntax: '1 when a &amp;&amp; b =&gt; false')
                  Value: 
                    IFlowCaptureReferenceOperation: 2 (OperationKind.FlowCaptureReference, Type: System.Int32, IsImplicit) (Syntax: 'input')
                  Pattern: 
                    IConstantPatternOperation (OperationKind.ConstantPattern, Type: null) (Syntax: '1') (InputType: System.Int32)
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Int32, Constant: 1) (Syntax: '1')
                Leaving: {R2}

            Next (Regular) Block[B3]
                Entering: {R3}

        .locals {R3}
        {
            CaptureIds: [3]
            Block[B3] - Block
                Predecessors: [B2]
                Statements (0)
                Jump if False (Regular) to Block[B5]
                    IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'a')

                Next (Regular) Block[B4]
            Block[B4] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'b')
                      Value: 
                        IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'b')

                Next (Regular) Block[B6]
            Block[B5] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'a')
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False, IsImplicit) (Syntax: 'a')

                Next (Regular) Block[B6]
            Block[B6] - Block
                Predecessors: [B4] [B5]
                Statements (0)
                Jump if False (Regular) to Block[B8]
                    IFlowCaptureReferenceOperation: 3 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'a &amp;&amp; b')
                    Leaving: {R3} {R2}

                Next (Regular) Block[B7]
                    Leaving: {R3}
        }

        Block[B7] - Block
            Predecessors: [B6]
            Statements (1)
                IFlowCaptureOperation: 1 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'false')
                  Value: 
                    ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False) (Syntax: 'false')

            Next (Regular) Block[B9]
                Leaving: {R2}
    }

    Block[B8] - Block
        Predecessors: [B2] [B6]
        Statements (0)
        Next (Throw) Block[null]
            IObjectCreationOperation (Constructor: System.InvalidOperationException..ctor()) (OperationKind.ObjectCreation, Type: System.InvalidOperationException, IsImplicit) (Syntax: 'input switc ... }')
              Arguments(0)
              Initializer: 
                null
    Block[B9] - Block
        Predecessors: [B7]
        Statements (1)
            IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'result = in ... };')
              Expression: 
                ISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: System.Boolean) (Syntax: 'result = in ... }')
                  Left: 
                    IFlowCaptureReferenceOperation: 0 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'result')
                  Right: 
                    IFlowCaptureReferenceOperation: 1 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'input switc ... }')

        Next (Regular) Block[B10]
            Leaving: {R1}
}

Block[B10] - Exit
    Predecessors: [B9]
    Statements (0)
";
            VerifyFlowGraphAndDiagnosticsForTest&lt;BlockSyntax&gt;(source, expectedFlowGraph, expectedDiagnostics);
        }


Note the following region:

        .locals {R3}
        {
            CaptureIds: [3]
            Block[B3] - Block
                Predecessors: [B2]
                Statements (0)
                Jump if False (Regular) to Block[B5]
                    IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'a')

                Next (Regular) Block[B4]
            Block[B4] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'b')
                      Value: 
                        IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Boolean) (Syntax: 'b')

                Next (Regular) Block[B6]
            Block[B5] - Block
                Predecessors: [B3]
                Statements (1)
                    IFlowCaptureOperation: 3 (OperationKind.FlowCapture, Type: null, IsImplicit) (Syntax: 'a')
                      Value: 
                        ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: False, IsImplicit) (Syntax: 'a')

                Next (Regular) Block[B6]
            Block[B6] - Block
                Predecessors: [B4] [B5]
                Statements (0)
                Jump if False (Regular) to Block[B8]
                    IFlowCaptureReferenceOperation: 3 (OperationKind.FlowCaptureReference, Type: System.Boolean, IsImplicit) (Syntax: 'a &amp;&amp; b')
                    Leaving: {R3} {R2}

                Next (Regular) Block[B7]
                    Leaving: {R3}
        }


This region and the capture [3] are unnecessary, there is no reason to calculate result of a &amp;&amp; b into the capture and then branch based on that value. An appropriate branch can be taken based on individual tests for a and b, as we would do for an if`</Code>
    <Description>`` statement, or a conditional expression.

I think, this is caused by the fact that ControlFlowGraphBuilder.VisitSwitchExpression builds conditional branches manually rather than using VisitConditionalBranch helper, which is used for every other construct where a conditional logic is based on a general boolean expression, including handling of switch statement in ControlFlowGraphBuilder.VisitSwitch.   </Description>
  </Issue>
  <Issue>
    <IssueID>32215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Auto generated ref assemblies does not include xml documentations.</Title>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>32215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

latest with .NET Core 3 and Visual Studio 2017 15.9.4 Preview 1.

**Steps to Reproduce**:

1. Create a package and setup reference assemblies similar to how it is done for 
2. build and package
3. Install it with a new project then try to use the package’s classes, and the members of the classes.

**Expected Behavior**:
For Visual Studio, Rider or any other ide to display xml documentation according from the metadata of the reference assemblies.

**Actual Behavior**:
No xml documentation is added to the metadata and no xml documentation file for the reference assembly is generated either.

cc: @jcouv </Description>
  </Issue>
  <Issue>
    <IssueID>32209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title> Completion window tooltip for constants/extension methods always shows as "..."</Title>
    <CreatedDate>07/01/2019</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>32209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.0.0 Preview 3.0 [28505.103.d16.0stg]

**Steps to Reproduce**:

1. Drop the completion window at $$$

``
**Expected Behavior**:
15.9:
![image](

**Actual Behavior**:
16.0:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>32205</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Syntax Highlighting gets messed up when using string interpolation in a url.</Title>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>32205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Syntax Highlighting gets messed up when using string interpolation in a url.

Example:
var someVariable = &amp;quot;hello&amp;quot;;
var url =$&amp;quot; &amp;quot;world&amp;quot;)}&amp;quot;;


![image](


_This issue has been moved from 
VSTS ticketId: 512911_
_These are the original issue comments:_

Rick Harker on 1/5/2019, 10:48 PM (2 hours ago): This bug still happens as of Visual Studio 2017 15.9.4.The entire hyperlink is visible as a continuous blue link, reguardless of the interpolations.Can we get this fixed, please?
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Selecting a named parameter from intelisense list not inserting the colon</Title>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>32204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;When adding a method’s parameters and using named parameters, I’ll see the parameters in the list twice, one with a colon and one without.  When you scroll down in the list and select the parameter with the colon and press tab/enter to select/insert the parameter, the named parameters are always without the necessary colon as expected.&lt;/p&gt;_This issue has been moved from VSTS ticketId: 736597__These are the original issue comments:_Cytheria Ji [MSFT] on 11/29/2018, 05:08 PM (37 days ago): &lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide your project type and language?  We look forward to hearing from you!&lt;/p&gt;Daniel Doris on 11/30/2018, 08:43 AM (36 days ago): &lt;p&gt;Thanks for following up.  &lt;/p&gt;&lt;p&gt;Version: VS 2017 15.8.8&lt;br&gt;Project type: C# old .Net (not Core) solution contains a mix of DLLs and a console app.&lt;br&gt;Environment Settings: (General/C#/VB/Web)  i'm using C# Development Settings.&lt;br&gt;&lt;br&gt;Can't think of anything else that will impact the behavior but will provide if you need anything else.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32203</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Disable CS8170 and CS8157 ("escaping this") for `ref struct` types</Title>
    <CreatedDate>06/01/2019</CreatedDate>
    <ClosedDate>06/01/2019</ClosedDate>
    <IssueLabels />
    <Description>As I understand it, the point of `ref struct` is essentially to publish limitations on the value-type's use that redound as a guarantee that its `this` pointer is in some way fixed, typically in an upper stack frame, or perhaps unmanaged memory, but never boxed or otherwise GC heap-bound.

If this is the correct, then it seems like there's significantly less danger, if any, to allowing the escape of `this`  from a value-type's instance methods (and isn't doing so the whole point anyway?) when it is marked as a `ref struct`. As such, the following errors should be either demoted to warnings or not emitted at all from within instance methods of `ref struct` types.

&lt;code&gt;error CS8170: Struct members cannot return 'this' or other instance members by reference&lt;/code&gt;

&lt;code&gt;error CS8157: Cannot return 'x' by reference because it was initialized to a value that cannot be returned by reference&lt;/code&gt;

The problem with these (and perhaps others of their ilk), is that they are prone to false-positives. There are numerous cases where special knowledge that the compiler can't see or infer in fact ensures that the escaping `this` is previously, ultimately, or in some other way correctly contained.

Furthermore, owing to the use limitations, `ref struct` can really only be deployed in pretty advanced situations requiring experts, and these types of developers are likely to have less need or desire for the aggressive static analysis of **CS8170** / **CS8157**, as they currently stand.
</Description>
  </Issue>
  <Issue>
    <IssueID>32179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should warn about nullability of assigning `default` to a struct with non-nullable fields</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>32179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Note: this is one more reason why reference assemblies should either include all fields, or at least keep a "representative" set of fields.

FYI @cston </Description>
  </Issue>
  <Issue>
    <IssueID>32176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>32176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactor handling of OLECMD in KeybindingResetDetector</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As discussed here: </Description>
  </Issue>
  <Issue>
    <IssueID>32174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Auto-complete does not include `static` for local function</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Inside `Main`, type `static&lt;space&gt;`. Auto-complete will complete to `System.ContextStaticAttribute` rather than `static`.
``</Description>
  </Issue>
  <Issue>
    <IssueID>32172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unexpected error CS8107: Feature 'nullable reference types' is not available in C# 7.0. for a #nullable directive in disabled code</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>32170</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Build correctness leg should prevent "PROTOTYPE" markers in master branch</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>15/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>32170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>32170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>FYI @jaredpar </Description>
  </Issue>
  <Issue>
    <IssueID>32169</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler permits creation of nullable array type</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
#nullable enable
public class C {
    public void M() {
    	_ = new C?(); // error (correct)
        _ = new string[50]?; // no error (incorrect)
        _ = new string[50]?[,]; // no error (incorrect)
    }
}
`</Code>
    <Description>In  it is reported that the compiler permits creation of a nullable array type:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>32168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using Declarations should be a rude edit-and-continue edit</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>32168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As per 

We should check that edit-and-continue works correctly with using declarations. Suspect it wont, and we should make using declarations a rude-edit.</Description>
  </Issue>
  <Issue>
    <IssueID>32161</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Parenthesized switch case expressions rejected in master with langver 7</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>32161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>32161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
switch (notesColumn)
{
    case (-1):
        {
            // not found, do nothing;
            break;
        }
    case (0):
        {
            // root column, add to Items
            item.Text = justification.Text;
            break;
        }
    default:
        {
            // add to sub items
            item.SubItems[notesColumn].Text = justification.Text;
            break;
        }
}
`</Code>
    <Description>The following C# code is reportedly rejected in `master` with language version 7. This is a breaking change.

``

</Description>
  </Issue>
  <Issue>
    <IssueID>32158</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>roperty is an enum</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>05/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>32158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>32151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Wrap every parameter/unwrap and indent all paramaters" is higher than "create/initialize parameter"</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>These new code fixes have been given a higher priority than "create/initialize parameter" which feels wrong because the former is something you probably do once, the latter I do all the time just after I've written a parameter:

![image](

Can we change the priority of this?</Description>
  </Issue>
  <Issue>
    <IssueID>32146</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>The ability to collapse a #region at #regionend</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>32146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>32146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>32146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;Just so you don't have to scroll up to look for the start of the region, a minus box at #endregion would be nice.&lt;/p&gt;&lt;p&gt;I suppose that would extend to brackets as well, but I haven't run into that need.&lt;/p&gt;_This issue has been moved from VSTS ticketId: 753515__These are the original issue comments:_Jane Wu [MSFT] on 12/18/2018, 11:46 PM (15 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>32142</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Revisit warnings flags to `NullableWalker.ApplyConversion`</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32142</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we pass two flags to control warnings: `reportTopLevelWarnings` and `reportRemainingWarnings`.
`reportTopLevelWarnings` controls outer top-level warnings, while `reportRemainingWarnings` controls the rest (including top-level warnings involved in user-defined conversions).

There are only few scenarios where we set one flag, but not the other. I think we should review those scenarios in light of user-defined conversions. 
It is possible that the flags may be wrong (not reflecting the semantics we need) or that they could be merged.


FYI @cston </Description>
  </Issue>
  <Issue>
    <IssueID>32141</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Breaking parsing change in nullable reference types for arrays</Title>
    <CreatedDate>04/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>32141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
a ? x is A[][] ? b : c

Can be considered to mean
 c#
a ? (x is A[][]? b) : c

But it could also be followed by a couple of additional tokens (`: d`)and taken to mean
 c#
a ? ((x is A[][]) ? b : c)
  : d

We would have to know the context (of the enclosing expression) in order to know how to parse the array type deep down inside of it.  I don’t see a straightforward way to disambiguate at parse time. The latter interpretation was the correct interpretation in C# 5 code.  The parser changes for nullable types therefore broke compatibility here, as this code is now attempted (and failing) to parse as the first interpretation.

Similarly, the expression
 c#
x is A[][] ? b &amp;&amp; c

Can be considered to mean
 c#
(x is A[][]? b) &amp;&amp; c

But it could also be followed by a couple of additional tokens (`: d`) and taken to mean
 c#
(x is A[][]) ? b &amp;&amp; c
    : d
`</Code>
    <Description>There is an unfortunate ambiguity in parsing an array type introduced by the addition of the nullable feature.  This prefix of an expression
``
Similarly, the latter interpretation was the correct interpretation in C# 5 code but is now rejected in the parser due to parsing changes for nullable types.

See also #32025 and #31911 which are symptoms of this problem.

Note that we would not have this ambiguity if we had taken a different decision on how to parse the nullable annotations on an array type.  For example, if we parsed array types using the natural order rather than the inside-out order, the first interpretation is not a valid parse because we would never accept a nullable type as the type of a declaration pattern.  I suggest that this should motivate the LDM to reconsider how nullable annotations of array types are parsed.

</Description>
  </Issue>
  <Issue>
    <IssueID>32138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add accessibility modifier quick fix removes extern</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>32138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);


3. Run the quick fix "Add accessibility modifiers"


**Expected Behavior**:
csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);


**Actual Behavior**:

csharp
[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
private static int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);
`</Code>
    <Description>**Version Used**: VS 2019 Preview 1

**Steps to Reproduce**:

1. Use .editorconfig that requires accessibility modifiers
2. Put this in a class:

``
The `extern` was removed.</Description>
  </Issue>
  <Issue>
    <IssueID>32135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactor: Extract Local Function</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>28/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>InternalAsk</Name>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>32135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;public void Add(){    var radius = 1.23;    var area = 3.14 * radius * radius}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;When&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&amp;quot;Quick Actions and Refactorings&amp;quot; menu is opened and &amp;quot;Extract Local Function&amp;quot; is selected&lt;br&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Then&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;public void Add(){    var radius = 1.23;    NewLocalFunction();    void NewLocalFunction()    {        var area = 3.14 * radius * radius;    }}&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 707648__These are the original issue comments:_Fiona Niu[MSFT] on 10/17/2018, 07:11 PM (77 days ago): &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&amp;nbsp;You will hear from us in about a week on our next steps. &lt;/p&gt;Kendra Havens [MSFT] on 10/31/2018, 00:53 PM (64 days ago): &lt;p&gt;Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input&lt;/p&gt;Kendra Havens [MSFT] on 1/3/2019, 00:35 PM (58 min ago): &lt;p&gt;To clarify, is this request specifically for providing an option for the extracted method to be local as opposed to the current &lt;a target="_blank"&gt;extract method refactoring&lt;/a&gt;? Would you prefer both options to appear in the Quick Actions drop down all the time or only in a specific context? I appreciate any details that help explain your preferred experience.&lt;/p&gt;Lopez Marc Rainier on 1/3/2019, 00:51 PM (42 min ago): &lt;p&gt;The request is specifically for providing an additional option for the extracted method to be local in addition to the current extract method refactoring. Both options appearing in the Quick Actions if the code to extract is inside a regular method and not already in a local function is my preferred experience.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>32133</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>drewnoakes</FixedById>
        <IssueID>32133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>32133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0060 (remove unused parameter) should not fire for deserialization constructor</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
internal sealed class NonSerializable
{
    private readonly string _value;
    public NonSerializable(string value) =&gt; _value = value;
    public string Value =&gt; _value;
}

[Serializable]
internal sealed class CustomSerializingType : ISerializable
{
    private readonly NonSerializable _nonSerializable;

    public CustomSerializingType(SerializationInfo info, StreamingContext context) // IDE0060 wants to remove 'context'
    {
        _nonSerializable = new NonSerializable(info.GetString("KEY"));
    }

    public void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        info.AddValue("KEY", _nonSerializable.Value);
    }
}
`</Code>
    <Description>**Version Used**: 

28502.214.d16.0stg

**Steps to Reproduce**:

``

**Expected Behavior**:

No diagnostic.

**Actual Behavior**:

Diagnostic.</Description>
  </Issue>
  <Issue>
    <IssueID>32132</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigate to has an error when open two solutions one by one</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>32132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Affected Branch:** d16.0stg 
**Affected Build:** 28419.233
**Steps to reproduce:**
1. Open a new and then open a solution1
2. Close solution1 and open a solution2
3. Search "Main" in navigate to box

**Expect:** Only one result

**Actual:** There are two results, including solution1 result

![image](

Note: This issue worked well on early d16.0stg[28417.116]</Description>
  </Issue>
  <Issue>
    <IssueID>32129</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# simplify intitialiation does not understand that 'default(T)' is equivalent to new 'T()'</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>32129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>32129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>32129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class T { public int f; }


For the following, you get the suggestion to simplify init. That's good.

csharp
var t = new T();
t.f = 0;


For the following (equivalent) code, you do not get that suggestion. That's bad.

csharp
var t = default(T);
t.f = 0;
`</Code>
    <Description>For exposition purposes:

``

Please give that latter case some TLC.

_This issue has been moved from 
VSTS ticketId: 748847_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32125</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>32125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Complete statement should return early for multiple caret and/or rectangular selection</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>08/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>32125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Follow-up issue for 

Complete statement should return early when multiple carets, non-empty selections, and/or rectangular selection are active.</Description>
  </Issue>
  <Issue>
    <IssueID>32121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>32121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error list sometimes doesn't clear on solution close</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>32121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Observed in some recent integration test runs.

⚠️ The following workaround should be removed when this issue is fixed:

</Description>
  </Issue>
  <Issue>
    <IssueID>32113</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>32113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A Tuple of Actions gets formatted with extra newlines incorrectly</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>12/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
(Action, Action, Action) tuple = (
	() =&gt; { },   
	() =&gt; { },			
	() =&gt; { });


and it gets formatted as such:

csharp
(Action, Action, Action) tuple = (
	() =&gt; { }
,
	() =&gt; { }
,
	() =&gt; { }
);
`</Code>
    <Description>In Visual Studio 15.9.3 the following tuple gets formatted weirdly. This is the initial tuple:

``

_This issue has been moved from 
VSTS ticketId: 739232_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>32111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Adjust pattern-based lookup for `await foreach`</Title>
    <CreatedDate>03/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>32111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>32111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Pattern-based 'await foreach' should find 'GetAsyncEnumerator' and 'MoveNextAsync' by binding them with no arguments.

So `GetAsyncEnumerator(params int[] x)` or `GetAsyncEnumerator(int optional = 0)` would be recognized, in addition to `GetAsyncEnumerator()` and `GetAsyncEnumerator(CancellationToken token = default)`.

</Description>
  </Issue>
  <Issue>
    <IssueID>32105</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider warning for `?` clashing with `!`</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>32105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>32105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>32105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the following example, it is possible that `!` is suppressing a bug which I didn't intend. Maybe I know that `field` is not null, but that `c` could be null.

``
Found in </Description>
  </Issue>
  <Issue>
    <IssueID>32103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>32103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Issue with tuples and unmanaged constraint</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>28/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Program
{
    static void DoSomething&lt;T&gt;() where T : unmanaged { }
    struct MyStruct {  public (int, int) Value; }
    static void Main(string[] args)
    {
        DoSomething&lt;MyStruct&gt;();    // → OK
        DoSomething&lt;(int, int)&gt;();  // → Shows compile-time error
    }
}
`</Code>
    <Description>

``

Reported by @johnkellyoxford</Description>
  </Issue>
  <Issue>
    <IssueID>32100</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support BoundUsingLocalDeclarations in IOperation and CFG</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - Flow Analysis</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>32100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>BoundUsingLocalDeclarations are currently implemented as OperationKind.None, and return the List of local declarations as its children. We should implement this correctly with an Operation node.

We should also support CFG correctly with using declarations. Currently we report the using declaration as OperationKind.None in a single block, and thus don't report the actual underlying block structure generated by lowering. 

[jcouv update:] When fixing this, let's also verify IDE behavior got fixed. For example </Description>
  </Issue>
  <Issue>
    <IssueID>32097</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Items added to s_structuresTable are never removed</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>32097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>32097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>32097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The values of `s_structuresTable` always contain strong references to their keys, so items added to the table will never be removed. See dotnet/corefx#19765.</Description>
  </Issue>
  <Issue>
    <IssueID>32096</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>32096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extra ':' added when typing named argument</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>03/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>32096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>16.0 build 28501:

In a compiler unit test, say `LocalFunctionTests.RefReturningAsyncLocalFunction`, enter:
``

Result:
&lt;img width="401" alt="extracharacter" src="</Description>
  </Issue>
  <Issue>
    <IssueID>32093</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Style preferences to include `this.` don't work in ctor</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>08/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>32093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Base{
  public string Name{get;}
  public Base(string name){...}
}

public class Child: Base{  
  public Child():
     base(AppContext.GetValueFor(nameof(this.Name)){
}
`</Code>
    <Description>A constructor calling its base class' constructor can't use `this.`, but auto-formatting applies the chage.

``

_This issue has been moved from 
VSTS ticketId: 757067_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 1/1/2019, 05:31 PM (17 hours ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32089</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>32089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>If I remove the space from { 0}, to {0}, it works perfectly. </Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>32089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With this statement: Console.WriteLine(&amp;quot;char.IsWhiteSpace('Hello There',5): { 0}&amp;quot;,char.IsWhiteSpace(&amp;quot;Hello There&amp;quot;, 5));I get:Unhandled Exception: System.FormatException: Input string was not in a correct format.   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)   at System.IO.TextWriter.WriteLine(String format, Object arg0)   at System.IO.TextWriter.SyncTextWriter.WriteLine(String format, Object arg0)   at System.Console.WriteLine(String format, Object arg0)   at WriteTextFile.WriteTextFile.CharFunctionality() in C:\Users\qetuo\Documents\Visual Studio 2018\WriteTextFile\WriteTextFile\Program.cs:line 182If I remove the space from { 0}, to {0}, it works perfectly. Having the space should not be a problem._This issue has been moved from VSTS ticketId: 739988__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32088</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Problem with simplify suggestion var</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>32088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>    static class Program
    {
        static void Main(string[] args)
        {
            if (!_data.TryGetValue(0, out List&lt;(int X, int Y)&gt; value))
                return;

            var x = value.FirstOrDefault().X;
        }

        private static Dictionary&lt;int, List&lt;(int, int)&gt;&gt; _data =
            new Dictionary&lt;int, List&lt;(int, int)&gt;&gt;();
    }


In this code `List&lt;(int X, int Y)&gt;` is faded with suggestion to simplify name to `var`. Although simplifying leads to compile time error

_This issue has been moved from 
VSTS ticketId: 739018_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32086</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>32086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash "Visual Studio" at rename variable in code</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>32086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;If the code contains a line with an error, and you are trying to rename the variable, the development environment crashes and Visual Studio restarts.

Visual Studio Verion 15.9.3 
Simple code: (Console app, Visual Basic)

``

_This issue has been moved from 
VSTS ticketId: 736894_
_These are the original issue comments:_

Fiona Niu[MSFT] on 11/29/2018, 06:20 PM (32 days ago): &lt;p&gt;Thank you for your feedback. In order for us to investigate this further, could you please give us a dump file so that we can conduct further research? &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 1. Please follow the instructions below, especially &amp;quot;Provide a trace and heap dump&amp;quot; section to record the issue you are experiencing.&lt;/p&gt;&lt;p&gt; 2.   &lt;/p&gt;&lt;p&gt; 3. The recorded files can be found under %TEMP%\Microsoft\VSFeedbackCollector.&lt;/p&gt;&lt;p&gt; 4. Upload the files to this ticket by choosing insert file tag on add comment field then submit.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;

Тютрюмов Максим on 11/29/2018, 08:42 PM (32 days ago): &lt;p&gt;Sent a record. Is that what you wanted?&lt;/p&gt;&lt;p&gt;Memory_8252_1543552764291.dmp 669 100 Kb (O_O). This is madness.&lt;/p&gt;

Fiona Niu[MSFT] on 11/29/2018, 11:32 PM (32 days ago): &lt;p&gt;Thank you for providing the information. We are forwarding the issue to the engineering team for investigating. The engineer will investigate the issue and keep you posted. &lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32085</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>32085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>remove unnecessary parentheses causes compile error</Title>
    <CreatedDate>02/01/2019</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I surround my code with parentheses, after completeing code VS mark two pair of parentheses in a line unnecessary, when cursor is on first one and allow VS to &amp;quot;remove unnecessary parentheses&amp;quot; with &amp;quot;Alt + Enter&amp;quot; the second pair is now NOT unnecessary, and if cursor is on second one and allow VS to  &amp;quot;remove unnecessary parentheses&amp;quot; causes compile error

Line 59 in screenshot

_This issue has been moved from 

![image](

VSTS ticketId: 756627_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32083</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>32083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Go to implementation not working in Visual Studio Community 2017</Title>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>29/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>32083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>DC Priority 1 issue 

When I try Go to implementation on an interface(through mouse right click as well as keywboard shortcut F12), it throws an error first time. On subsequent attempts nothing happens.
I am attaching the screenshot of the error and the activity log as well. Below is the error section from ActivityLog.xml generated in roaming profile for VS:

&amp;lt;entry&amp;gt;
    &amp;lt;record&amp;gt;2116&amp;lt;/record&amp;gt;
    &amp;lt;time&amp;gt;2018/12/20 11:25:51.813&amp;lt;/time&amp;gt;
    &amp;lt;type&amp;gt;Error&amp;lt;/type&amp;gt;
    &amp;lt;source&amp;gt;Editor or Editor Extension&amp;lt;/source&amp;gt;
    &amp;lt;description&amp;gt;System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;d__9.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__48.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__47.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsWorkerAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__3.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__2.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__0.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.StreamingGoToImplementation(Document document, Int32 caretPosition, IFindUsagesService findUsagesService, IStreamingFindUsagesPresenter streamingPresenter, CancellationToken cancellationToken, String&amp;amp;amp; messageToShow)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(Document document, Int32 caretPosition, IFindUsagesService streamingService, CommandExecutionContext context)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.GoToImplementation.GoToImplementationCommandHandler.ExecuteCommand(GoToImplementationCommandArgs args, CommandExecutionContext context)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&amp;amp;lt;&amp;amp;gt;c__DisplayClass14_1`1.&amp;amp;lt;Execute&amp;amp;gt;b__1()&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;d__9.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__48.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__47.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsWorkerAsync&amp;amp;gt;d__4.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__3.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.FindUsagesHelpers.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__2.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.FindUsages.AbstractFindUsagesService.&amp;amp;lt;FindImplementationsAsync&amp;amp;gt;d__0.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.AggregateException: One or more errors occurred. ---&amp;amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;#x000D;&amp;amp;#x000A;   --- End of inner exception stack trace ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;AddSourceTypesInProjectAsync&amp;amp;gt;d__29.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesInProjectAsync&amp;amp;gt;d__19.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTypesAsync&amp;amp;gt;d__17.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;FindTransitivelyImplementingTypesWorkerAsync&amp;amp;gt;d__14.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;amp;lt;&amp;amp;gt;c__DisplayClass9_0.&amp;amp;lt;&amp;amp;lt;FindTypesFromCacheOrComputeAsync&amp;amp;gt;b__0&amp;amp;gt;d.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;---&amp;amp;gt; (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.&amp;amp;lt;CreateIndexAsync&amp;amp;gt;d__8.MoveNext()&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown ---&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;amp;lt;---&amp;amp;#x000D;&amp;amp;#x000A;&amp;lt;/description&amp;gt;
  &amp;lt;/entry&amp;gt;

_This issue has been moved from 
VSTS ticketId: 754985_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32081</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>32081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>PopulateSwitchCodeFixProvider encountered an error and has been disabled</Title>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I am trying to play with a new C# 8 language feature using switch.  The compiler doesn't like what I have done and adds a red squiggle to the &amp;quot;switch&amp;quot; keyword. When I put the cursor on it and then click the light bulb, I get a message in the yellow info bar at the top that says:

'PopulateSwitchCodeFixProvider' encountered an error and has been disabled

It then has a link to &amp;quot;Show Stack Trace&amp;quot; (I have included it below) and 2 buttons, &amp;quot;Enable&amp;quot; and &amp;quot;Enable and ignore future errors&amp;quot;.

If I click on &amp;quot;Enable&amp;quot; and then on the light bulb, it does the same thing again.

The code I am trying to write is:

``

_This issue has been moved from 
VSTS ticketId: 757882_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>32080</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MoveTypeCodeRefactoringProvider encounted an error</Title>
    <CreatedDate>01/01/2019</CreatedDate>
    <ClosedDate>04/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>32080</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>when I ctrl-dot on a class or interface that is in the file of a different piece of code, and then press down to select &amp;quot;move to ...&amp;quot; I get an error that tells me &amp;quot;MoveTypeCodeRefactoringProvider encounted an error and has been disabled&amp;quot;.The stacktrace is:``_This issue has been moved from VSTS ticketId: 757134__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ArgumentOutOfRangeException in Snippet.ExpansionFilter.OnCaretChange</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.0.0 Preview 1

**Steps to Reproduce**:

I am not entirely sure what the repro is, I was typing a constructor...
``
</Description>
  </Issue>
  <Issue>
    <IssueID>31688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nested collection initializer doesn't capture the collection in a temp</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>11/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;
public class C {
    List&lt;int&gt; P {get;}
    public void M() {
        new C {P={1,2}};
    }
}


**Expected Behavior**:
cs
C c = new C();
List&lt;int&gt; p = c.P;
p.Add(1);
p.Add(2);

**Actual Behavior**:
cs
C c = new C();
c.P.Add(1);
c.P.Add(2);
`</Code>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

``


This was surprising to me, because `P` is appeared once in the source, so I'd expect a single call to it.
</Description>
  </Issue>
  <Issue>
    <IssueID>31686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>open and reopen same solution doesn't create new solution in Roslyn</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>repro

1. create solution1
2. close the solution1
3. reopen the same solution1

when a solution is opened and closed and then reopen, Roslyn used to consider them as 2 different solutions. now we are considering them as the same solution

we should tweak code below to make roslyn to consider them as 2 different solutions.


I am not sure what user facing impact this would have. but features/component that tracks solution through solutionId and IVsSolution events will have state tracking messed up since IVsSolution will raise close solution events, but solution id stays same and we will never get SolutionRemoved events.

</Description>
  </Issue>
  <Issue>
    <IssueID>31685</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda type parameter lowering for implicit cast to ReadOnlySpan&lt;T&gt; appears to be incorrect</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Don't know. I know it happened as of the build of Roslyn that was used to compile several of the most recently released versions of ML.NET (0.7 and 0.8)

**Steps to Reproduce**:

1. Build the  repo
2. Examine Microsoft.ML.Transforms.dll
3. Examine the  lambda body associated with  Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec&lt;TSrc&gt;.
4. The translation of the lambda incorrectly handles the method generic parameter associated with the implicit conversion to a ReadOnlySpan.

The problematic line of code is line 563 of HashJoiningTransform.cs ( see  ) 

**Expected Behavior**:

The above C# line is translated into
``
Note... the difference is that the broken line specifies a method generic parameter not the necessary type generic parameter.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>2698</PullRequestID>
        <Title>Fix alpha-substitution for nested lambdas in a generic context.</Title>
        <Description>Fixes #2549 @agocke @AlekseyTs @VSadov please review&lt;!---@huboard:{"order":2514.5}--&gt;</Description>
        <CreatedDate>13/05/2015</CreatedDate>
        <ClosedDate>13/05/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Resolution-Fixed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>2698</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>24621</PullRequestID>
        <Title>Refer directly to static data when ReadOnlySpan wraps arrays of bytes.</Title>
        <Description>Refer directly to static data when ReadOnlySpan wraps strings or arrays of primitive literals.
No need to allocate anything in this case.

Fixes:#23358
Related:dotnet/corefx#25413

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>03/02/2018</CreatedDate>
        <ClosedDate>05/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>35463</PullRequestID>
        <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
        <Code> c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
`</Code>
        <Description>Fixes #31685

The problem to be solved is to generate good code for
``

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</Description>
        <CreatedDate>03/05/2019</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB SematicModel doesn’t return Symbol information for a compound assignment</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From @JoeRobich:
For my classification work, I am looking to classify compound assignment that use overloaded operators separately than those that use the built in. This was not an issue in C# because I was able to use the SemanticModel to get SymbolInfo for AssignmentExpressions. In VB.NET I am having a harder time because SematicModel doesn’t return information for AssignmentStatements. Is there an API where I can get the Symbol information for an AssignmentStatement in VB?</Description>
  </Issue>
  <Issue>
    <IssueID>31676</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regression with Nullable&lt;T&gt; and a generic type constraint on base</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}


The derived type looks like this.

 csharp
public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>With the attached solution, we (the EF team) are getting the following errors:

&gt; error CS8320: Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater.
&gt; error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
&gt; error CS0115: 'QueryAsserter&lt;TContext&gt;.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)': no suitable method found to override
&gt; error CS0534: 'QueryAsserter&lt;TContext&gt;' does not implement inherited abstract member 'QueryAsserterBase.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)'

The base type looks like this. (Our actual codebase uses `TResult?` here too but it reproed more consistently with `Nullable&lt;TResult&gt;`)

``

Putting the classes in the same file makes the issue go away as do other seemingly unrelated changes. Possibly an ordering issue or a race condition. Only repros on later versions of Roslyn (VS 2019 and .NET Core SDK 3.0).

cc @maumar @ajcvickers @Eilon

[Repro.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>31675</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Additional nullability tests for conversions with type parameters constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See:

</Description>
  </Issue>
  <Issue>
    <IssueID>31673</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect nullability when converting to type parameter type constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
#nullable enable

abstract class A&lt;T&gt;
{
    internal abstract void F&lt;U&gt;(T t) where U : T;
}

class B : A&lt;int?&gt;
{
    internal override void F&lt;U&gt;(int? t)
    {
        U u = (U)(object?)t;
        u.ToString(); // may be null
    }
}
`</Code>
    <Description>Should report a warning for `u.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>31672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing compiler required member 'System.Collections.IEnumerator.MoveNext'</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>15/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using a custom mscorlib with some of my projects. This has been working fine until the latest update(s) of VS. As of sudden, I'm starting to get the message above (plus other two about get_Current and GetEnumerator) on every foreach loop.Please note that the interface/methods are correctly implemented and as I noted, this was working fine before. It seems that for some reason, VS/Roslyn are not picking the methods.While on the library I'm providing the methods are explicitly implemented, I already tried change them to implicit implementations but the problem still persists.Any guidance on how to make this works again will be appreciated._This issue has been moved from VSTS ticketId: 729511__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31671</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>nullable reference and linq syntax strips nullability</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;Given:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = new List&amp;lt;string?&amp;gt;();&lt;/pre&gt;This should produce a null dereference warning:&lt;br&gt;&lt;pre&gt;var y = from a in x        where a.Length != 0        select a;&lt;/pre&gt;But it doesn't. The nullability of `a` is stripped away immediately by `from ... in`.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744186__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Editor completion: move references to EditorOperations from the new completion </Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here we added some usage of editor operations by CommitManager  We need to consider moving them out to of Roslyn to the Editor side.</Description>
  </Issue>
  <Issue>
    <IssueID>31669</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>when mixed /**/ and //, uncomment will uncomment // first.</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
/*
    public class A
    {
     // this is a class
    }
*/


When I press ctrl K + ctrl U to uncomment the code block above, I get my code like this:

csharp
/*
    public class A
    {
     this is a class   -&gt; uncomment
    }
*/


but I expect my code to be this:

csharp
public class A
    {
     // this is a class
    }
`</Code>
    <Description>Example:

``

_This issue has been moved from 
VSTS ticketId: 740677_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31666</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8107 Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This error reported for this sequence of code         public static byte[] ConvertToByteArray(object value)        {            return                value is byte[] ? (byte[])value :                value == null ? null :                    Util.Convert.ToByteArray(value);        }_This issue has been moved from VSTS ticketId: 742071__These are the original issue comments:_Alexey Kuznetsov on 12/7/2018, 01:15 AM (3 days ago): The similar problem.The code the something like that:object value = new string[0];object resultValue = value is string[]? value as string[] : new[] \{ value.ToString() };Lang c#7. Works in VS 2017._These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31665</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A switch inside an if .. else .. can confuse the debugger</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;

namespace ConsoleApp1
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            var s = "1";
            if (true)
                switch (s)
                {
                    case "1":
                        Console.Out.WriteLine("Input was 1");
                        break;
                    default:
                        throw new Exception("Default case");
                }
            else
                Console.Out.WriteLine("Too many inputs");
        }
    }
}
`</Code>
    <Description>Moved from 

I reconstructed the problem in the following code:

``

If this code is debugged, the active statement marker will jump from the break; statement, to the throw... statement.

The throw statement will not be executed, but it had me confused for a couple of hours.
</Description>
  </Issue>
  <Issue>
    <IssueID>31660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>anonymous type in linq query</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;This should not produce a warning:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = from a in new[] { 0 }        let b = new { m = &amp;quot;hi&amp;quot; }        where b.m.Length != 0        select b;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;But it does: `b.m` is nullable. It seems like members of anonymous types are deduced to be nullable, when they are created in linq syntax expressions.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744187__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31659</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Report HDN_ExpressionIsProbablyNeverNull for null-coalescing operator with nullable value type</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
#pragma warning disable 649

struct S
{
    internal int F;
}

class Program
{
    static void Main()
    {
        S? s = new S();
        int? i = s?.F;
        _ = i.Value;
    }
}
`</Code>
    <Description>Should report a hidden diagnostic that the implicit null check in `s?.F` is unnecessary. (The code could be simplified to `s.Value.F` or `s.GetValueOrDefault().F`.)
``
See </Description>
  </Issue>
  <Issue>
    <IssueID>31653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzers that throw in DiagnosticAnalyzer.Initialize bring down VS</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Description>Analyzers throw in DiagnosticAnalyzer.Initialize can bring down VS instead of showing a gold bar at the top of IDE. We should protect against that, see: 

</Description>
  </Issue>
  <Issue>
    <IssueID>31651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SymbolDeclaredEventAnalyzer crashed with InvalidOperationException</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Code>
Message: System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Linq.Enumerable.Single[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1+CompilationAnalyzer[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]..ctor(Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Microsoft.CodeAnalysis.Compilation, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].&lt;Initialize&gt;b__7_0(Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper+CollectCompilationActionsContext.RegisterCompilationStartAction(System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet.ComputeCompilationEndAnalyzer(Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(ProjectAnalysisData)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(ProjectAnalysisData)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;GetProjectAnalysisDataAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;AnalyzeAsync&gt;d__22.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.Task+WhenAllPromise`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeOutOfProcAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx+&lt;InvokeAsync&gt;d__13`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Remote.Extensions+&lt;InvokeAsync&gt;d__1`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;InvokeCoreAsync&gt;d__93`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;&gt;c__DisplayClass93_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;InvokeCoreAsync&gt;b__0(StreamJsonRpc.JsonRpcMessage)
   at StreamJsonRpc.JsonRpc+&lt;HandleRpcAsync&gt;d__103.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.AwaitExtensions+TaskSchedulerAwaiter+&lt;&gt;c.&lt;OnCompleted&gt;b__5_0(System.Object)
   at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

`</Code>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0 [28407.114.d16.0stg]

**Steps to Reproduce**:

Do not know the repro.
``

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>31650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to select TFM in editor</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using dev16 preview1 on Roslyn (`Compilers.sln`).

I expect that I can change the TFM and the source would become active/colorized. But instead the TFM reverts itself back to its original selection.

![select-tfm](

@jinujoseph for triage/routing</Description>
  </Issue>
  <Issue>
    <IssueID>31643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] default(T) behavior in the context of generic types</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static void TestMethod()
{
    new string[0].AllEquals();
    new int[0].AllEquals();
}

/// &lt;summary&gt;
/// Check if all items of an enumerable are equals, using an optional comparer
/// &lt;/summary&gt;
public static bool AllEquals&lt;T&gt;(this IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer = null)
{
    comparer = comparer ?? EqualityComparer&lt;T&gt;.Default;

    T first = default(T);   // Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    bool isFirst = true;
    foreach (var item in items)
    {
        if (isFirst)
        {
            first = item;
            isFirst = false;
            continue;
        }
        if (!comparer.Equals(first, item))
        {
            return false;
        }
    }
    return true;
}
`</Code>
    <Description>**Version Used**: VS2019 16.0 Pre1

**Steps to Reproduce**:

Given the following code:

``

**Expected Behavior**:
Not sure what to expect here, I do not how to resolve this aside from disabling nullables... if it's unconstrained, should there be a way to tell that T can be nullable for references, and cannot be for value types? Should an explicit `where T:object?` change this behavior [if it were valid]( ?

**Actual Behavior**:
`Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.` on assignation from `default`.</Description>
  </Issue>
  <Issue>
    <IssueID>31642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] Infer throw statements from extension methods</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
struct TwoEnumeratorListStack
{
    private readonly ArrayBuilder&lt;Which&gt;? _discriminatorStack;

    public Which PeekNext()
    {
        // Possible dereference of a null reference
        return _discriminatorStack[_discriminatorStack.Count - 1];
    }
}


To prevent the warning you can do:

 csharp
public Which PeekNext()
{
    if (_discriminatorStack == null)
        throw new InvalidOperationException();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}


Which removes the warning. However trying to capture the check in a general-purpose extension method:

 csharp
internal static void ThrowInvalidIfNull&lt;T&gt;(this T? argument) where T : class
{
    if (argument == null)
        throw new InvalidOperationException();
}

public Which PeekNext()
{
    _discriminatorStack.ThrowInvalidIfNull();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Simplified definition:

``
Doesn't remove the warning anymore and requires additional `!` to both array indexer and `.Count`
</Description>
  </Issue>
  <Issue>
    <IssueID>31641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Potentially understand Try* pattern flow better</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public bool TryGetSomething (out ReferenceType result)
{
    if (someCondition)
    {
        result = /* non-null value */;
        return true;
    }
    else
    {
        result = default;
        return false;
    }
}


With nullable types because `default` is used you will end up converting the out parameter to `ReferenceType?`.

It would be nice on the caller side if subsequently this would be supported:


if (TryGetSomething (out var result))
     // result is not null and thus doesn't trigger "Possible deference of a null reference" warning
     result.DoSomething ();


Today this doesn't seem to be the case with the following (real) code sample

 csharp
// Caller site
public bool TryGetNextInSpan(in TextSpan span, out SyntaxNode? value)
{
    if (_stack == null) {
        value = default;
        return false;
    }
    while (_stack[_stackPtr].TryMoveNextAndGetCurrent(out value))
    {
        if (IsInSpan(in span, /* `value` shows the dereference warning --&gt; */ value.FullSpan))
        {
            return true;
        }
    }

    _stackPtr--;
    return false;
}

// Defined in class used by `_stack`
internal bool TryMoveNextAndGetCurrent(out SyntaxNode? current)
{
    if (!MoveNext())
    {
        current = default;
        return false;
    }

    // ItemInternal returns a non-nullable type
    current = ItemInternal(_node, _childIndex);
    return true;
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

When doing a Try pattern like this:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unclear whether EmbeddedText with empty filePath is allowed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The documentation on `EmbeddedText` says that empty file path is allowed. But there is no way to create an `EmbeddedText` with an empty file path.

In EmbeddedText:
``


Tagging @tmat 

For context, I am trying to modify our test helper `CompileAndVerify` to embed symbols and source into the produced assembly.

Relates to  (Proposal: Embed sources in PDBs)</Description>
  </Issue>
  <Issue>
    <IssueID>31639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Infer non-nullablity with array `?.Length` check</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
protected GreenNode(SyntaxKind kind, int fullWidth, DiagnosticInfo[]? diagnostics, SyntaxAnnotation[]? annotations)
    : this(kind, fullWidth)
{
    if (diagnostics?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsDiagnostics;
        diagnosticsTable.Add(this, diagnostics);
    }
    if (annotations?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsAnnotations;
        annotationsTable.Add(this, annotations);
    }
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools   2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Take following code block:

``
Currently the parameters to `Add` (both `diagnostics` and `annotations`) are flagged as "Possible null reference argument for parameter" however because of the form of the if check it should be possible to infer that those arguments are non-null at that stage.</Description>
  </Issue>
  <Issue>
    <IssueID>31638</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Semantic classification doesn't always refresh</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version used: 16.0 preview 1

It just happened to me that after opening the Roslyn solution, I was waiting for all types to get colorized to be sure that everything is loaded, but it seemed to take a little longer than usual. When I tried hovering over an uncolored type, I actually got quick info, which means everything was fully bound after all. I just had to close and reopen the document to see the colorization.
Screenshot:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31637</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Turning on Nullable references crashes VS with analyzers installed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source) in f:\dd\ndp\fx\src\Core\System\Linq\Enumerable.cs:line 1174
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 77
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\CSharp\CSharpSymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 26
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 46
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 351
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 43
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 311
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateSet.cs:line 269
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext() in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs:line 112
`</Code>
    <Description>**Version Used**: 16.0.0 Preview 2.0 [28407.111.d16.0stg]

**Steps to Reproduce**:

Install Roslyn.Diagnostics.Analyzers on a project with Nullable references turned on.


**Expected Behavior**:

No Crash

**Actual Behavior**:

Visual Studio Crashes with the following fail fast exception:

  | Name | Value | Type
-- | -- | -- | --
◢ | $exception | {"Sequence contains no elements"} | System.InvalidOperationException



[Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)](

``


Dump available at `\mlangfs1\public\jmarolf\Dumps\crash.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>31632</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposed "Nullability Side Car Representation"</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Specification</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We're considering supporting an additional input file to the C# compiler that would inform the compiler about nullability annotations that should be considered to apply to external program entities.  These annotations replace what the programmer considers to be either missing or incorrect annotations from an imported library.

## Nullability "Side Car" Representation

This document proposes a particular representation for the signature information that augments a program that may lack signature information in its program elements or referenced assemblies.  We call this the "C# nullability signature" file, or CSNS.  When one is present as part of a compilation, the signatures of program entities are augmented with nullability annotations appearing in it.

The CSNS file format is a subset of the C# programming language, and is intended to support only enough of the C# language to express the program element signatures and the nullability annotations that apply to them.  We borrow from C# so that we can assume C# syntax and semantics unless described otherwise.

Each CSNS file is self-contained. It is interpreted independently of the program or other CSNS files. Its interpretation is used to associate a fully-qualified name (without namespace qualification) to each type name appearing in it, and those are used to associate an annotated program element with a corresponding program entity (if any). It is not an error for there to be program elements in the CSNS file that do not correspond to any symbols in the program.

The CSNS file format is the same as a C# program except as follows:
- No modifiers are permitted (not even `public`, `private`, `override`, `new`, `params`, `this`, `partial`, parameter `ref`, `in`, or `out`, etc).
- *variance_annotations* (`in` and `out`) on type parameters are not permitted.
- Method bodies (and ctor-initializers) are forbidden. Each method declaration should end in a semicolon.
- Similarly, constructor, operator, property, and other function member bodies are omitted.
- Default parameter values are forbidden in method declarations.
- Attributes are permitted, but only without attribute arguments.
- tuple element names are forbidden in tuple types
- `dynamic` is forbidden.  `object` is used instead.
- Static constructors and constants may not be declared.
- Explicit interface implementations are forbidden.
- Enum declarations are forbidden.
- No preprocessing directives are permitted, except for #nullable
- No `extern alias` directives, but only in the compilation unit (not in a namespace)
- No `using` directives (except `using` alias directives)

To be clear, the following are permitted:
- comments, including documentation comments (which are ignored)
- `using` alias directives
- `namespace` declarations
- type declarations, including `class`, `struct`, `interface`, and `delegate` declarations.
- `enum` declarations (without a base type or members)
- field, property, method, operator, indexer, constructor, destructor, and event declarations, as well as member declarations of properties and events, but without bodies.
- type parameter constraints

Semantically, there are some differences from C#:
- Type names appearing in a CSNS file bind to a type declared by that name from the CSNS file. The fully-qualified name of the type that is found is used to match it to a type in the annotated program.
- It is an error for a type not to be found, with two exceptions. Language keywords such as `string`, `int` and `double` can be used to refer to fully-qualified names that are considered to always be found. A fully-qualified name written with a `global::` qualifier need not be found. In both cases the language construct naturally provides the fully-qualified name.
- A type declaration in CSNS is not considered to declare a type, so it does not have the same constraints as ordinary C#
  - The requirements that a concrete type implements its interfaces or its base type's abstract members does not apply to a type declared in CSNS
- Pointer types are permitted even without the `unsafe` modifier.


## Alternatives
- We could aim to make the file format suitable for generation of a reference assembly, but that would require that type names bind. We want to use a single CSNS for more than one platform, so we prefer looser semantics.
- We could permit modifiers (and variance annotations, default parameters, `object`, and tuple names) to make it easier to copy-and-paste into a CSNS file. In that case we need to decide what to do with them
  - [x] Forbid them (proposed above)
  - [ ] Ignore them
  - [ ] Require them to match the annotated entity; if they do not match
    - [ ] Produce a diagnostic; or
    - [ ] Consider the CSNS declaration not to annotate that entity


## Open Questions
- What kinds of changes can a CSNS annotated program element make to a program symbol
  1. It can only change an *oblivious* annotation to something else; or
  2. The annotations in a CSNS file fully override the annotations from the program
- Can annotations from one CSNS file "override" those from another?  How do we decide which one to use?  Is there a priority order?
- Do CSNS annotations apply to symbols that are declared in the program itself (that is, in source)? Or are annotations directly in source the only supported way to annotate a symbol in the C# programming language?
</Description>
  </Issue>
  <Issue>
    <IssueID>31630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deterministic build fails to find ModifyVsixManifest tool</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>31625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Dotnet-Format Found project reference without a matching metadata reference</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
`</Code>
    <Description>**Version Used**: dotnet: 2.2.200-preview-009648 ; dotnet-format: 2.11.0-beta2-63603-03+b2ae9bbaa55e93f255b111c68e65d9c538351095

**Steps to Reproduce**:

1. Clone 
2. checkout `feature/mrtk_packageManager`
3. dotnet-format -w .\build\Build.sln

**Expected Behavior**:

Formats all code/projects without error

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31621</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>‘Convert to foreach’ overzealously removes the foreach iteration variable</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>23/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
foreach (var item in list)
{
}


You get:

cs
for (var i = 0; i &lt; list.Length; i++)
{
}


But now I have to write this myself (the actual expression is quite a bit longer than `list`):

cs
    var item = list[i];
`</Code>
    <Description>Visual Studio 2019 Preview 1

If you invoke ‘Convert to 'foreach'’ on:
``

I'm not happy about this. Just because I haven't typed the statement yet that will use `item` does not mean `item` should be discarded. It just so happens that I want `i` in scope before I start typing the first statement that uses `item`.</Description>
  </Issue>
  <Issue>
    <IssueID>31620</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Field nullability incorrect in lambda</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>13/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following should compile without warnings:
``
cc @pilchie
</Description>
  </Issue>
  <Issue>
    <IssueID>31617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EE: Avoid expanding certain nodes when NoSideEffects is set</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Check `InspectionContext.EvaluationFlags` and avoid expanding certain nodes when `DkmEvaluationFlags.NoSideEffects` is set.

In particular, avoid expanding "Results View" and "Native View".</Description>
  </Issue>
  <Issue>
    <IssueID>31616</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Live Unit Testing With C# 8</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[20:03:02.349 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()


---

Moved from dotnet/csharplang:
When using C# 8 nullable references with Visual Studio 2019, the Live Unit Testing feature doesn't work. The build always fails with error messages like "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.". I realize this is probably because I have the "Treat warnings as error" turned on but the solution builds fine as I have the nullable references turned on for all projects in the .csproj file.

Adding "#nullable enable" to the files with nullable references changes this error to:

[20:03:16.156 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()
`</Code>
    <Description>**Version Used**: 
Not sure, using Visual Studio 2018 Preview 1.0 and C# 8

**Steps to Reproduce**:

1.  Create a project with C# 8 enabled and use nullable reference types
2.  Create NUnit test project and test a class using the nullable reference types
3.  Include the test project in Live Unit Testing

**Expected Behavior**:
VS shows the normal tested/untested passing/failing icons based on the unit test results.

**Actual Behavior**:
It fails to build during the Live Unit Testing with error: "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context".
When the classes using nullable references have the "#nullable enabled" declaration it fails with this error:
``

I have C# 8 set as the language for all projects.

I've been asked to tag @ManishJayaswal 
</Description>
  </Issue>
  <Issue>
    <IssueID>31615</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS1717 'Assignment made to same variable' should offer 'this.' fix</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Foo
{
    private object bar;

    public Foo(object bar)
    {
        // CS1717 Assignment made to same variable; did you mean to assign something else?     
        bar = bar;
    }
}
`</Code>
    <Description>VS 2019 Preview 1

``

This happens during refactoring enough that it would be nice to detect the field in scope with the unqualified name 'bar' and offer a fix to qualify the left-hand side. (Qualifying the right hand side would not be offered because it's a safe assumption that the parameter `bar` should have its value observed, and even if observed earlier, not overwritten.)

Something similar could be done for a field named `_bar`, if that's your cup of tea.

If the statement is in constructor and the field is readonly or the constructor is initializing a struct, that's another strong hint (CS0171 in the latter case) that this fix should be offered. </Description>
  </Issue>
  <Issue>
    <IssueID>31612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CI feed for Roslyn</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a prerelease feed for the Microsoft.Net.Compilers NuGet package which could be mentioned at 

What I'm looking for is a way to reference the Microsoft.Net.Compilers package which contains the same version of Roslyn as in VS2019 Preview 1.</Description>
  </Issue>
  <Issue>
    <IssueID>31611</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Building VB console app fails, unable to find "%TEMP%\.NETFramework,Version=v4.6.AssemblyAttributes.vb" file</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/12/2018</ClosedDate>
    <IssueLabels />
    <Description>_From @AArnott on December 7, 2018 16:13_Building [a trivially simple VB console app]( fails with:

&gt;vbc : error BC2001: file 'C:\Users\andarno\AppData\Local\Temp\.NETFramework' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]
vbc : error BC2001: file 'D:\git\SPSS.NET\src\SimpleDemo\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]

The VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:

![image](

This repros on 15.8, 15.9, and 16.0 Preview 1._Copied from original issue: dotnet/sdk#2731_</Description>
  </Issue>
  <Issue>
    <IssueID>31610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>is operator confuses non-nullable references analyzer</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
namespace Test_CS8600
{
    public class ClassBase
    {
    }

    public class ClassDerived : ClassBase
    {

    }

    public class Class1
    {
        public void Test(ClassBase a)
        {
            var x = a;

            if(a is ClassDerived d)
            {

            } else
            {
                x = a; // CS8600
            }
        }
    }
}
`</Code>
    <Description>Using the 'is' operator within an if statement appears to confuse the non-nullable references analyzer and variables it previously knew to be non-null are subsequently considered to be possibly null.

**Version Used**: .net core 2.2.200-preview-009648

**Steps to Reproduce**:

Compile the following code
``

**Expected Behavior**:
Build outputs no warnings

**Actual Behavior**:
Build outputs `Class1.cs(23,21): warning CS8600: Converting null literal or possible null value to non-nullable type. `
</Description>
  </Issue>
  <Issue>
    <IssueID>31609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`ConfiguredAsyncEnumerable` in netcoreapp3.0 preview is not acceptable with await foreach (CS8142)?</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. using System.Threading.Tasks;
2. await foreach (var z in /*IAsyncEnumerable&lt;T&gt;*/.ConfigureAwait(false))

**Expected Behavior**:
See this on  but seems not see this on #24037, is it still available?

**Actual Behavior**:
CS8412
</Description>
  </Issue>
  <Issue>
    <IssueID>31608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: IAsyncEnumerable&lt;T&gt; without async crashes `csc` when build</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static IAsyncEnumerable&lt;int&gt; Test002()//VS2019 remove the `async` here with quick fix for `CS1998`
        {
            yield return 1;
        }

2. VS2019 show an quick fix for `CS1998`, and remove the `async` keyword with that.
3. Build.

**Expected Behavior**:
At least not crash. Show an error and suppress `CS1998` in the case if async must be needed. Or build success if async is not needed.

**Actual Behavior**:
csc crash with the below message

 FailFast: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
  
    at System.Environment.FailFast(System.String, System.Exception) 
    at System.Environment.FailFast(System.String, System.Exception) 
    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.IteratorStateMachine ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() 
    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) 
    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) 
    at System.Threading.ThreadPoolWorkQueue.Dispatch() 
  
 Exception details: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
`</Code>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. Write an `async IAsyncEnumerable&lt;T&gt; XXX()` method without await
``

May be also covered by #31113? But with different behavior and testcase.</Description>
  </Issue>
  <Issue>
    <IssueID>31606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Lack of warning for not nullable field like array initialization with null literal</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class FooBar
{
    // No warning
    public string[] Ss { get; } = new string[] { null };
}

class FooBar2
{
    // Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    public string[] Ss { get; } = new string[] { null };

    // Defining empty constructor "forces" the warning to appear.
    public FooBar2()
    {               
    }
}
`</Code>
    <Description>**Version Used**: 
VS2019 Preview

``</Description>
  </Issue>
  <Issue>
    <IssueID>31598</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need to make sure all speculative APIs on Semantic model properly pick up nullable context for the position where the speculation occurs</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See NonNullTypesContext_22 through NonNullTypesContext_37 for inspiration</Description>
  </Issue>
  <Issue>
    <IssueID>31589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LicenseUrl is depricated</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We use LicenseUrl in our NuGet packages. We should move to packaging the License.txt file and using that, but we need support for `PackageLicenseFile` which is only available in `2.1.600-preview-009426` or newer. 
</Description>
  </Issue>
  <Issue>
    <IssueID>31588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2017 Enterprise 15.0.28307.145 says it's incompatible with .NET Compiler Platform SDK</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>06/12/2018</ClosedDate>
    <IssueLabels />
    <Description>I tried to follow the steps to implement a Code Fixer today, on a just-updated copy of VS 2017 Enterprise.

After I installed the .NET Compiler Platform SDK (either from  or from Tools -&gt; Extensions and Updates), VS reports that the SDK is incompatible with Visual Studio.

Is a release coming that will work?
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ArgumentOutOfRangeException in Snippet.ExpansionFilter.OnCaretChange</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.0.0 Preview 1

**Steps to Reproduce**:

I am not entirely sure what the repro is, I was typing a constructor...
``
</Description>
  </Issue>
  <Issue>
    <IssueID>31688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nested collection initializer doesn't capture the collection in a temp</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>11/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;
public class C {
    List&lt;int&gt; P {get;}
    public void M() {
        new C {P={1,2}};
    }
}


**Expected Behavior**:
cs
C c = new C();
List&lt;int&gt; p = c.P;
p.Add(1);
p.Add(2);

**Actual Behavior**:
cs
C c = new C();
c.P.Add(1);
c.P.Add(2);
`</Code>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

``


This was surprising to me, because `P` is appeared once in the source, so I'd expect a single call to it.
</Description>
  </Issue>
  <Issue>
    <IssueID>31686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>open and reopen same solution doesn't create new solution in Roslyn</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>repro

1. create solution1
2. close the solution1
3. reopen the same solution1

when a solution is opened and closed and then reopen, Roslyn used to consider them as 2 different solutions. now we are considering them as the same solution

we should tweak code below to make roslyn to consider them as 2 different solutions.


I am not sure what user facing impact this would have. but features/component that tracks solution through solutionId and IVsSolution events will have state tracking messed up since IVsSolution will raise close solution events, but solution id stays same and we will never get SolutionRemoved events.

</Description>
  </Issue>
  <Issue>
    <IssueID>31685</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda type parameter lowering for implicit cast to ReadOnlySpan&lt;T&gt; appears to be incorrect</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Don't know. I know it happened as of the build of Roslyn that was used to compile several of the most recently released versions of ML.NET (0.7 and 0.8)

**Steps to Reproduce**:

1. Build the  repo
2. Examine Microsoft.ML.Transforms.dll
3. Examine the  lambda body associated with  Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec&lt;TSrc&gt;.
4. The translation of the lambda incorrectly handles the method generic parameter associated with the implicit conversion to a ReadOnlySpan.

The problematic line of code is line 563 of HashJoiningTransform.cs ( see  ) 

**Expected Behavior**:

The above C# line is translated into
``
Note... the difference is that the broken line specifies a method generic parameter not the necessary type generic parameter.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>2698</PullRequestID>
        <Title>Fix alpha-substitution for nested lambdas in a generic context.</Title>
        <Description>Fixes #2549 @agocke @AlekseyTs @VSadov please review&lt;!---@huboard:{"order":2514.5}--&gt;</Description>
        <CreatedDate>13/05/2015</CreatedDate>
        <ClosedDate>13/05/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Resolution-Fixed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>2698</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>24621</PullRequestID>
        <Title>Refer directly to static data when ReadOnlySpan wraps arrays of bytes.</Title>
        <Description>Refer directly to static data when ReadOnlySpan wraps strings or arrays of primitive literals.
No need to allocate anything in this case.

Fixes:#23358
Related:dotnet/corefx#25413

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>03/02/2018</CreatedDate>
        <ClosedDate>05/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>35463</PullRequestID>
        <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
        <Code> c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
`</Code>
        <Description>Fixes #31685

The problem to be solved is to generate good code for
``

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</Description>
        <CreatedDate>03/05/2019</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB SematicModel doesn’t return Symbol information for a compound assignment</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From @JoeRobich:
For my classification work, I am looking to classify compound assignment that use overloaded operators separately than those that use the built in. This was not an issue in C# because I was able to use the SemanticModel to get SymbolInfo for AssignmentExpressions. In VB.NET I am having a harder time because SematicModel doesn’t return information for AssignmentStatements. Is there an API where I can get the Symbol information for an AssignmentStatement in VB?</Description>
  </Issue>
  <Issue>
    <IssueID>31676</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regression with Nullable&lt;T&gt; and a generic type constraint on base</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}


The derived type looks like this.

 csharp
public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>With the attached solution, we (the EF team) are getting the following errors:

&gt; error CS8320: Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater.
&gt; error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
&gt; error CS0115: 'QueryAsserter&lt;TContext&gt;.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)': no suitable method found to override
&gt; error CS0534: 'QueryAsserter&lt;TContext&gt;' does not implement inherited abstract member 'QueryAsserterBase.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)'

The base type looks like this. (Our actual codebase uses `TResult?` here too but it reproed more consistently with `Nullable&lt;TResult&gt;`)

``

Putting the classes in the same file makes the issue go away as do other seemingly unrelated changes. Possibly an ordering issue or a race condition. Only repros on later versions of Roslyn (VS 2019 and .NET Core SDK 3.0).

cc @maumar @ajcvickers @Eilon

[Repro.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>31675</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Additional nullability tests for conversions with type parameters constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See:

</Description>
  </Issue>
  <Issue>
    <IssueID>31673</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect nullability when converting to type parameter type constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
#nullable enable

abstract class A&lt;T&gt;
{
    internal abstract void F&lt;U&gt;(T t) where U : T;
}

class B : A&lt;int?&gt;
{
    internal override void F&lt;U&gt;(int? t)
    {
        U u = (U)(object?)t;
        u.ToString(); // may be null
    }
}
`</Code>
    <Description>Should report a warning for `u.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>31672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing compiler required member 'System.Collections.IEnumerator.MoveNext'</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>15/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using a custom mscorlib with some of my projects. This has been working fine until the latest update(s) of VS. As of sudden, I'm starting to get the message above (plus other two about get_Current and GetEnumerator) on every foreach loop.Please note that the interface/methods are correctly implemented and as I noted, this was working fine before. It seems that for some reason, VS/Roslyn are not picking the methods.While on the library I'm providing the methods are explicitly implemented, I already tried change them to implicit implementations but the problem still persists.Any guidance on how to make this works again will be appreciated._This issue has been moved from VSTS ticketId: 729511__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31671</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>nullable reference and linq syntax strips nullability</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;Given:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = new List&amp;lt;string?&amp;gt;();&lt;/pre&gt;This should produce a null dereference warning:&lt;br&gt;&lt;pre&gt;var y = from a in x        where a.Length != 0        select a;&lt;/pre&gt;But it doesn't. The nullability of `a` is stripped away immediately by `from ... in`.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744186__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Editor completion: move references to EditorOperations from the new completion </Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here we added some usage of editor operations by CommitManager  We need to consider moving them out to of Roslyn to the Editor side.</Description>
  </Issue>
  <Issue>
    <IssueID>31669</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>when mixed /**/ and //, uncomment will uncomment // first.</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
/*
    public class A
    {
     // this is a class
    }
*/


When I press ctrl K + ctrl U to uncomment the code block above, I get my code like this:

csharp
/*
    public class A
    {
     this is a class   -&gt; uncomment
    }
*/


but I expect my code to be this:

csharp
public class A
    {
     // this is a class
    }
`</Code>
    <Description>Example:

``

_This issue has been moved from 
VSTS ticketId: 740677_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31666</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8107 Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This error reported for this sequence of code         public static byte[] ConvertToByteArray(object value)        {            return                value is byte[] ? (byte[])value :                value == null ? null :                    Util.Convert.ToByteArray(value);        }_This issue has been moved from VSTS ticketId: 742071__These are the original issue comments:_Alexey Kuznetsov on 12/7/2018, 01:15 AM (3 days ago): The similar problem.The code the something like that:object value = new string[0];object resultValue = value is string[]? value as string[] : new[] \{ value.ToString() };Lang c#7. Works in VS 2017._These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31665</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A switch inside an if .. else .. can confuse the debugger</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;

namespace ConsoleApp1
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            var s = "1";
            if (true)
                switch (s)
                {
                    case "1":
                        Console.Out.WriteLine("Input was 1");
                        break;
                    default:
                        throw new Exception("Default case");
                }
            else
                Console.Out.WriteLine("Too many inputs");
        }
    }
}
`</Code>
    <Description>Moved from 

I reconstructed the problem in the following code:

``

If this code is debugged, the active statement marker will jump from the break; statement, to the throw... statement.

The throw statement will not be executed, but it had me confused for a couple of hours.
</Description>
  </Issue>
  <Issue>
    <IssueID>31660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>anonymous type in linq query</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;This should not produce a warning:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = from a in new[] { 0 }        let b = new { m = &amp;quot;hi&amp;quot; }        where b.m.Length != 0        select b;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;But it does: `b.m` is nullable. It seems like members of anonymous types are deduced to be nullable, when they are created in linq syntax expressions.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744187__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31659</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Report HDN_ExpressionIsProbablyNeverNull for null-coalescing operator with nullable value type</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
#pragma warning disable 649

struct S
{
    internal int F;
}

class Program
{
    static void Main()
    {
        S? s = new S();
        int? i = s?.F;
        _ = i.Value;
    }
}
`</Code>
    <Description>Should report a hidden diagnostic that the implicit null check in `s?.F` is unnecessary. (The code could be simplified to `s.Value.F` or `s.GetValueOrDefault().F`.)
``
See </Description>
  </Issue>
  <Issue>
    <IssueID>31653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzers that throw in DiagnosticAnalyzer.Initialize bring down VS</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Description>Analyzers throw in DiagnosticAnalyzer.Initialize can bring down VS instead of showing a gold bar at the top of IDE. We should protect against that, see: 

</Description>
  </Issue>
  <Issue>
    <IssueID>31651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SymbolDeclaredEventAnalyzer crashed with InvalidOperationException</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Code>
Message: System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Linq.Enumerable.Single[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1+CompilationAnalyzer[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]..ctor(Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Microsoft.CodeAnalysis.Compilation, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].&lt;Initialize&gt;b__7_0(Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper+CollectCompilationActionsContext.RegisterCompilationStartAction(System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet.ComputeCompilationEndAnalyzer(Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(ProjectAnalysisData)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(ProjectAnalysisData)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;GetProjectAnalysisDataAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;AnalyzeAsync&gt;d__22.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.Task+WhenAllPromise`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeOutOfProcAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx+&lt;InvokeAsync&gt;d__13`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Remote.Extensions+&lt;InvokeAsync&gt;d__1`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;InvokeCoreAsync&gt;d__93`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;&gt;c__DisplayClass93_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;InvokeCoreAsync&gt;b__0(StreamJsonRpc.JsonRpcMessage)
   at StreamJsonRpc.JsonRpc+&lt;HandleRpcAsync&gt;d__103.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.AwaitExtensions+TaskSchedulerAwaiter+&lt;&gt;c.&lt;OnCompleted&gt;b__5_0(System.Object)
   at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

`</Code>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0 [28407.114.d16.0stg]

**Steps to Reproduce**:

Do not know the repro.
``

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>31650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to select TFM in editor</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using dev16 preview1 on Roslyn (`Compilers.sln`).

I expect that I can change the TFM and the source would become active/colorized. But instead the TFM reverts itself back to its original selection.

![select-tfm](

@jinujoseph for triage/routing</Description>
  </Issue>
  <Issue>
    <IssueID>31643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] default(T) behavior in the context of generic types</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static void TestMethod()
{
    new string[0].AllEquals();
    new int[0].AllEquals();
}

/// &lt;summary&gt;
/// Check if all items of an enumerable are equals, using an optional comparer
/// &lt;/summary&gt;
public static bool AllEquals&lt;T&gt;(this IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer = null)
{
    comparer = comparer ?? EqualityComparer&lt;T&gt;.Default;

    T first = default(T);   // Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    bool isFirst = true;
    foreach (var item in items)
    {
        if (isFirst)
        {
            first = item;
            isFirst = false;
            continue;
        }
        if (!comparer.Equals(first, item))
        {
            return false;
        }
    }
    return true;
}
`</Code>
    <Description>**Version Used**: VS2019 16.0 Pre1

**Steps to Reproduce**:

Given the following code:

``

**Expected Behavior**:
Not sure what to expect here, I do not how to resolve this aside from disabling nullables... if it's unconstrained, should there be a way to tell that T can be nullable for references, and cannot be for value types? Should an explicit `where T:object?` change this behavior [if it were valid]( ?

**Actual Behavior**:
`Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.` on assignation from `default`.</Description>
  </Issue>
  <Issue>
    <IssueID>31642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] Infer throw statements from extension methods</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
struct TwoEnumeratorListStack
{
    private readonly ArrayBuilder&lt;Which&gt;? _discriminatorStack;

    public Which PeekNext()
    {
        // Possible dereference of a null reference
        return _discriminatorStack[_discriminatorStack.Count - 1];
    }
}


To prevent the warning you can do:

 csharp
public Which PeekNext()
{
    if (_discriminatorStack == null)
        throw new InvalidOperationException();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}


Which removes the warning. However trying to capture the check in a general-purpose extension method:

 csharp
internal static void ThrowInvalidIfNull&lt;T&gt;(this T? argument) where T : class
{
    if (argument == null)
        throw new InvalidOperationException();
}

public Which PeekNext()
{
    _discriminatorStack.ThrowInvalidIfNull();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Simplified definition:

``
Doesn't remove the warning anymore and requires additional `!` to both array indexer and `.Count`
</Description>
  </Issue>
  <Issue>
    <IssueID>31641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Potentially understand Try* pattern flow better</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public bool TryGetSomething (out ReferenceType result)
{
    if (someCondition)
    {
        result = /* non-null value */;
        return true;
    }
    else
    {
        result = default;
        return false;
    }
}


With nullable types because `default` is used you will end up converting the out parameter to `ReferenceType?`.

It would be nice on the caller side if subsequently this would be supported:


if (TryGetSomething (out var result))
     // result is not null and thus doesn't trigger "Possible deference of a null reference" warning
     result.DoSomething ();


Today this doesn't seem to be the case with the following (real) code sample

 csharp
// Caller site
public bool TryGetNextInSpan(in TextSpan span, out SyntaxNode? value)
{
    if (_stack == null) {
        value = default;
        return false;
    }
    while (_stack[_stackPtr].TryMoveNextAndGetCurrent(out value))
    {
        if (IsInSpan(in span, /* `value` shows the dereference warning --&gt; */ value.FullSpan))
        {
            return true;
        }
    }

    _stackPtr--;
    return false;
}

// Defined in class used by `_stack`
internal bool TryMoveNextAndGetCurrent(out SyntaxNode? current)
{
    if (!MoveNext())
    {
        current = default;
        return false;
    }

    // ItemInternal returns a non-nullable type
    current = ItemInternal(_node, _childIndex);
    return true;
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

When doing a Try pattern like this:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unclear whether EmbeddedText with empty filePath is allowed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The documentation on `EmbeddedText` says that empty file path is allowed. But there is no way to create an `EmbeddedText` with an empty file path.

In EmbeddedText:
``


Tagging @tmat 

For context, I am trying to modify our test helper `CompileAndVerify` to embed symbols and source into the produced assembly.

Relates to  (Proposal: Embed sources in PDBs)</Description>
  </Issue>
  <Issue>
    <IssueID>31639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Infer non-nullablity with array `?.Length` check</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
protected GreenNode(SyntaxKind kind, int fullWidth, DiagnosticInfo[]? diagnostics, SyntaxAnnotation[]? annotations)
    : this(kind, fullWidth)
{
    if (diagnostics?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsDiagnostics;
        diagnosticsTable.Add(this, diagnostics);
    }
    if (annotations?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsAnnotations;
        annotationsTable.Add(this, annotations);
    }
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools   2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Take following code block:

``
Currently the parameters to `Add` (both `diagnostics` and `annotations`) are flagged as "Possible null reference argument for parameter" however because of the form of the if check it should be possible to infer that those arguments are non-null at that stage.</Description>
  </Issue>
  <Issue>
    <IssueID>31638</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Semantic classification doesn't always refresh</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version used: 16.0 preview 1

It just happened to me that after opening the Roslyn solution, I was waiting for all types to get colorized to be sure that everything is loaded, but it seemed to take a little longer than usual. When I tried hovering over an uncolored type, I actually got quick info, which means everything was fully bound after all. I just had to close and reopen the document to see the colorization.
Screenshot:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31637</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Turning on Nullable references crashes VS with analyzers installed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source) in f:\dd\ndp\fx\src\Core\System\Linq\Enumerable.cs:line 1174
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 77
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\CSharp\CSharpSymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 26
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 46
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 351
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 43
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 311
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateSet.cs:line 269
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext() in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs:line 112
`</Code>
    <Description>**Version Used**: 16.0.0 Preview 2.0 [28407.111.d16.0stg]

**Steps to Reproduce**:

Install Roslyn.Diagnostics.Analyzers on a project with Nullable references turned on.


**Expected Behavior**:

No Crash

**Actual Behavior**:

Visual Studio Crashes with the following fail fast exception:

  | Name | Value | Type
-- | -- | -- | --
◢ | $exception | {"Sequence contains no elements"} | System.InvalidOperationException



[Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)](

``


Dump available at `\mlangfs1\public\jmarolf\Dumps\crash.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>31632</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposed "Nullability Side Car Representation"</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Specification</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We're considering supporting an additional input file to the C# compiler that would inform the compiler about nullability annotations that should be considered to apply to external program entities.  These annotations replace what the programmer considers to be either missing or incorrect annotations from an imported library.

## Nullability "Side Car" Representation

This document proposes a particular representation for the signature information that augments a program that may lack signature information in its program elements or referenced assemblies.  We call this the "C# nullability signature" file, or CSNS.  When one is present as part of a compilation, the signatures of program entities are augmented with nullability annotations appearing in it.

The CSNS file format is a subset of the C# programming language, and is intended to support only enough of the C# language to express the program element signatures and the nullability annotations that apply to them.  We borrow from C# so that we can assume C# syntax and semantics unless described otherwise.

Each CSNS file is self-contained. It is interpreted independently of the program or other CSNS files. Its interpretation is used to associate a fully-qualified name (without namespace qualification) to each type name appearing in it, and those are used to associate an annotated program element with a corresponding program entity (if any). It is not an error for there to be program elements in the CSNS file that do not correspond to any symbols in the program.

The CSNS file format is the same as a C# program except as follows:
- No modifiers are permitted (not even `public`, `private`, `override`, `new`, `params`, `this`, `partial`, parameter `ref`, `in`, or `out`, etc).
- *variance_annotations* (`in` and `out`) on type parameters are not permitted.
- Method bodies (and ctor-initializers) are forbidden. Each method declaration should end in a semicolon.
- Similarly, constructor, operator, property, and other function member bodies are omitted.
- Default parameter values are forbidden in method declarations.
- Attributes are permitted, but only without attribute arguments.
- tuple element names are forbidden in tuple types
- `dynamic` is forbidden.  `object` is used instead.
- Static constructors and constants may not be declared.
- Explicit interface implementations are forbidden.
- Enum declarations are forbidden.
- No preprocessing directives are permitted, except for #nullable
- No `extern alias` directives, but only in the compilation unit (not in a namespace)
- No `using` directives (except `using` alias directives)

To be clear, the following are permitted:
- comments, including documentation comments (which are ignored)
- `using` alias directives
- `namespace` declarations
- type declarations, including `class`, `struct`, `interface`, and `delegate` declarations.
- `enum` declarations (without a base type or members)
- field, property, method, operator, indexer, constructor, destructor, and event declarations, as well as member declarations of properties and events, but without bodies.
- type parameter constraints

Semantically, there are some differences from C#:
- Type names appearing in a CSNS file bind to a type declared by that name from the CSNS file. The fully-qualified name of the type that is found is used to match it to a type in the annotated program.
- It is an error for a type not to be found, with two exceptions. Language keywords such as `string`, `int` and `double` can be used to refer to fully-qualified names that are considered to always be found. A fully-qualified name written with a `global::` qualifier need not be found. In both cases the language construct naturally provides the fully-qualified name.
- A type declaration in CSNS is not considered to declare a type, so it does not have the same constraints as ordinary C#
  - The requirements that a concrete type implements its interfaces or its base type's abstract members does not apply to a type declared in CSNS
- Pointer types are permitted even without the `unsafe` modifier.


## Alternatives
- We could aim to make the file format suitable for generation of a reference assembly, but that would require that type names bind. We want to use a single CSNS for more than one platform, so we prefer looser semantics.
- We could permit modifiers (and variance annotations, default parameters, `object`, and tuple names) to make it easier to copy-and-paste into a CSNS file. In that case we need to decide what to do with them
  - [x] Forbid them (proposed above)
  - [ ] Ignore them
  - [ ] Require them to match the annotated entity; if they do not match
    - [ ] Produce a diagnostic; or
    - [ ] Consider the CSNS declaration not to annotate that entity


## Open Questions
- What kinds of changes can a CSNS annotated program element make to a program symbol
  1. It can only change an *oblivious* annotation to something else; or
  2. The annotations in a CSNS file fully override the annotations from the program
- Can annotations from one CSNS file "override" those from another?  How do we decide which one to use?  Is there a priority order?
- Do CSNS annotations apply to symbols that are declared in the program itself (that is, in source)? Or are annotations directly in source the only supported way to annotate a symbol in the C# programming language?
</Description>
  </Issue>
  <Issue>
    <IssueID>31630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deterministic build fails to find ModifyVsixManifest tool</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>31625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Dotnet-Format Found project reference without a matching metadata reference</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
`</Code>
    <Description>**Version Used**: dotnet: 2.2.200-preview-009648 ; dotnet-format: 2.11.0-beta2-63603-03+b2ae9bbaa55e93f255b111c68e65d9c538351095

**Steps to Reproduce**:

1. Clone 
2. checkout `feature/mrtk_packageManager`
3. dotnet-format -w .\build\Build.sln

**Expected Behavior**:

Formats all code/projects without error

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31621</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>‘Convert to foreach’ overzealously removes the foreach iteration variable</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>23/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
foreach (var item in list)
{
}


You get:

cs
for (var i = 0; i &lt; list.Length; i++)
{
}


But now I have to write this myself (the actual expression is quite a bit longer than `list`):

cs
    var item = list[i];
`</Code>
    <Description>Visual Studio 2019 Preview 1

If you invoke ‘Convert to 'foreach'’ on:
``

I'm not happy about this. Just because I haven't typed the statement yet that will use `item` does not mean `item` should be discarded. It just so happens that I want `i` in scope before I start typing the first statement that uses `item`.</Description>
  </Issue>
  <Issue>
    <IssueID>31620</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Field nullability incorrect in lambda</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>13/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following should compile without warnings:
``
cc @pilchie
</Description>
  </Issue>
  <Issue>
    <IssueID>31617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EE: Avoid expanding certain nodes when NoSideEffects is set</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Check `InspectionContext.EvaluationFlags` and avoid expanding certain nodes when `DkmEvaluationFlags.NoSideEffects` is set.

In particular, avoid expanding "Results View" and "Native View".</Description>
  </Issue>
  <Issue>
    <IssueID>31616</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Live Unit Testing With C# 8</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[20:03:02.349 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()


---

Moved from dotnet/csharplang:
When using C# 8 nullable references with Visual Studio 2019, the Live Unit Testing feature doesn't work. The build always fails with error messages like "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.". I realize this is probably because I have the "Treat warnings as error" turned on but the solution builds fine as I have the nullable references turned on for all projects in the .csproj file.

Adding "#nullable enable" to the files with nullable references changes this error to:

[20:03:16.156 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()
`</Code>
    <Description>**Version Used**: 
Not sure, using Visual Studio 2018 Preview 1.0 and C# 8

**Steps to Reproduce**:

1.  Create a project with C# 8 enabled and use nullable reference types
2.  Create NUnit test project and test a class using the nullable reference types
3.  Include the test project in Live Unit Testing

**Expected Behavior**:
VS shows the normal tested/untested passing/failing icons based on the unit test results.

**Actual Behavior**:
It fails to build during the Live Unit Testing with error: "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context".
When the classes using nullable references have the "#nullable enabled" declaration it fails with this error:
``

I have C# 8 set as the language for all projects.

I've been asked to tag @ManishJayaswal 
</Description>
  </Issue>
  <Issue>
    <IssueID>31615</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS1717 'Assignment made to same variable' should offer 'this.' fix</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Foo
{
    private object bar;

    public Foo(object bar)
    {
        // CS1717 Assignment made to same variable; did you mean to assign something else?     
        bar = bar;
    }
}
`</Code>
    <Description>VS 2019 Preview 1

``

This happens during refactoring enough that it would be nice to detect the field in scope with the unqualified name 'bar' and offer a fix to qualify the left-hand side. (Qualifying the right hand side would not be offered because it's a safe assumption that the parameter `bar` should have its value observed, and even if observed earlier, not overwritten.)

Something similar could be done for a field named `_bar`, if that's your cup of tea.

If the statement is in constructor and the field is readonly or the constructor is initializing a struct, that's another strong hint (CS0171 in the latter case) that this fix should be offered. </Description>
  </Issue>
  <Issue>
    <IssueID>31612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CI feed for Roslyn</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a prerelease feed for the Microsoft.Net.Compilers NuGet package which could be mentioned at 

What I'm looking for is a way to reference the Microsoft.Net.Compilers package which contains the same version of Roslyn as in VS2019 Preview 1.</Description>
  </Issue>
  <Issue>
    <IssueID>31611</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Building VB console app fails, unable to find "%TEMP%\.NETFramework,Version=v4.6.AssemblyAttributes.vb" file</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/12/2018</ClosedDate>
    <IssueLabels />
    <Description>_From @AArnott on December 7, 2018 16:13_Building [a trivially simple VB console app]( fails with:

&gt;vbc : error BC2001: file 'C:\Users\andarno\AppData\Local\Temp\.NETFramework' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]
vbc : error BC2001: file 'D:\git\SPSS.NET\src\SimpleDemo\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]

The VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:

![image](

This repros on 15.8, 15.9, and 16.0 Preview 1._Copied from original issue: dotnet/sdk#2731_</Description>
  </Issue>
  <Issue>
    <IssueID>31610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>is operator confuses non-nullable references analyzer</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
namespace Test_CS8600
{
    public class ClassBase
    {
    }

    public class ClassDerived : ClassBase
    {

    }

    public class Class1
    {
        public void Test(ClassBase a)
        {
            var x = a;

            if(a is ClassDerived d)
            {

            } else
            {
                x = a; // CS8600
            }
        }
    }
}
`</Code>
    <Description>Using the 'is' operator within an if statement appears to confuse the non-nullable references analyzer and variables it previously knew to be non-null are subsequently considered to be possibly null.

**Version Used**: .net core 2.2.200-preview-009648

**Steps to Reproduce**:

Compile the following code
``

**Expected Behavior**:
Build outputs no warnings

**Actual Behavior**:
Build outputs `Class1.cs(23,21): warning CS8600: Converting null literal or possible null value to non-nullable type. `
</Description>
  </Issue>
  <Issue>
    <IssueID>31609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`ConfiguredAsyncEnumerable` in netcoreapp3.0 preview is not acceptable with await foreach (CS8142)?</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. using System.Threading.Tasks;
2. await foreach (var z in /*IAsyncEnumerable&lt;T&gt;*/.ConfigureAwait(false))

**Expected Behavior**:
See this on  but seems not see this on #24037, is it still available?

**Actual Behavior**:
CS8412
</Description>
  </Issue>
  <Issue>
    <IssueID>31608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: IAsyncEnumerable&lt;T&gt; without async crashes `csc` when build</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static IAsyncEnumerable&lt;int&gt; Test002()//VS2019 remove the `async` here with quick fix for `CS1998`
        {
            yield return 1;
        }

2. VS2019 show an quick fix for `CS1998`, and remove the `async` keyword with that.
3. Build.

**Expected Behavior**:
At least not crash. Show an error and suppress `CS1998` in the case if async must be needed. Or build success if async is not needed.

**Actual Behavior**:
csc crash with the below message

 FailFast: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
  
    at System.Environment.FailFast(System.String, System.Exception) 
    at System.Environment.FailFast(System.String, System.Exception) 
    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.IteratorStateMachine ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() 
    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) 
    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) 
    at System.Threading.ThreadPoolWorkQueue.Dispatch() 
  
 Exception details: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
`</Code>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. Write an `async IAsyncEnumerable&lt;T&gt; XXX()` method without await
``

May be also covered by #31113? But with different behavior and testcase.</Description>
  </Issue>
  <Issue>
    <IssueID>31606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Lack of warning for not nullable field like array initialization with null literal</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class FooBar
{
    // No warning
    public string[] Ss { get; } = new string[] { null };
}

class FooBar2
{
    // Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    public string[] Ss { get; } = new string[] { null };

    // Defining empty constructor "forces" the warning to appear.
    public FooBar2()
    {               
    }
}
`</Code>
    <Description>**Version Used**: 
VS2019 Preview

``</Description>
  </Issue>
  <Issue>
    <IssueID>31598</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need to make sure all speculative APIs on Semantic model properly pick up nullable context for the position where the speculation occurs</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See NonNullTypesContext_22 through NonNullTypesContext_37 for inspiration</Description>
  </Issue>
  <Issue>
    <IssueID>31589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LicenseUrl is depricated</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We use LicenseUrl in our NuGet packages. We should move to packaging the License.txt file and using that, but we need support for `PackageLicenseFile` which is only available in `2.1.600-preview-009426` or newer. 
</Description>
  </Issue>
  <Issue>
    <IssueID>31588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2017 Enterprise 15.0.28307.145 says it's incompatible with .NET Compiler Platform SDK</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>06/12/2018</ClosedDate>
    <IssueLabels />
    <Description>I tried to follow the steps to implement a Code Fixer today, on a just-updated copy of VS 2017 Enterprise.

After I installed the .NET Compiler Platform SDK (either from  or from Tools -&gt; Extensions and Updates), VS reports that the SDK is incompatible with Visual Studio.

Is a release coming that will work?
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ArgumentOutOfRangeException in Snippet.ExpansionFilter.OnCaretChange</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>06/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.0.0 Preview 1

**Steps to Reproduce**:

I am not entirely sure what the repro is, I was typing a constructor...
``
</Description>
  </Issue>
  <Issue>
    <IssueID>31688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nested collection initializer doesn't capture the collection in a temp</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>11/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;
public class C {
    List&lt;int&gt; P {get;}
    public void M() {
        new C {P={1,2}};
    }
}


**Expected Behavior**:
cs
C c = new C();
List&lt;int&gt; p = c.P;
p.Add(1);
p.Add(2);

**Actual Behavior**:
cs
C c = new C();
c.P.Add(1);
c.P.Add(2);
`</Code>
    <Description>**Version Used**: 7.3

**Steps to Reproduce**:

``


This was surprising to me, because `P` is appeared once in the source, so I'd expect a single call to it.
</Description>
  </Issue>
  <Issue>
    <IssueID>31686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>open and reopen same solution doesn't create new solution in Roslyn</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>02/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>repro

1. create solution1
2. close the solution1
3. reopen the same solution1

when a solution is opened and closed and then reopen, Roslyn used to consider them as 2 different solutions. now we are considering them as the same solution

we should tweak code below to make roslyn to consider them as 2 different solutions.


I am not sure what user facing impact this would have. but features/component that tracks solution through solutionId and IVsSolution events will have state tracking messed up since IVsSolution will raise close solution events, but solution id stays same and we will never get SolutionRemoved events.

</Description>
  </Issue>
  <Issue>
    <IssueID>31685</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda type parameter lowering for implicit cast to ReadOnlySpan&lt;T&gt; appears to be incorrect</Title>
    <CreatedDate>11/12/2018</CreatedDate>
    <ClosedDate>07/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31685</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Don't know. I know it happened as of the build of Roslyn that was used to compile several of the most recently released versions of ML.NET (0.7 and 0.8)

**Steps to Reproduce**:

1. Build the  repo
2. Examine Microsoft.ML.Transforms.dll
3. Examine the  lambda body associated with  Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec&lt;TSrc&gt;.
4. The translation of the lambda incorrectly handles the method generic parameter associated with the implicit conversion to a ReadOnlySpan.

The problematic line of code is line 563 of HashJoiningTransform.cs ( see  ) 

**Expected Behavior**:

The above C# line is translated into
``
Note... the difference is that the broken line specifies a method generic parameter not the necessary type generic parameter.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>2698</PullRequestID>
        <Title>Fix alpha-substitution for nested lambdas in a generic context.</Title>
        <Description>Fixes #2549 @agocke @AlekseyTs @VSadov please review&lt;!---@huboard:{"order":2514.5}--&gt;</Description>
        <CreatedDate>13/05/2015</CreatedDate>
        <ClosedDate>13/05/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Resolution-Fixed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>2698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>2698</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>24621</PullRequestID>
        <Title>Refer directly to static data when ReadOnlySpan wraps arrays of bytes.</Title>
        <Description>Refer directly to static data when ReadOnlySpan wraps strings or arrays of primitive literals.
No need to allocate anything in this case.

Fixes:#23358
Related:dotnet/corefx#25413

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>03/02/2018</CreatedDate>
        <ClosedDate>05/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>24621</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31685</IssueID>
        <PullRequestID>35463</PullRequestID>
        <Title>Fix lambda lowering for cast to generic ReadOnlySpan&lt;T&gt;</Title>
        <Code> c#
ReadOnlySpan&lt;byte&gt; s = new byte[] { 1, 2, 3 };
`</Code>
        <Description>Fixes #31685

The problem to be solved is to generate good code for
``

There is an implicit conversion operator declared in `ReadOnlySpan&lt;T&gt;` that converts from `T[]` to `ReadOnlySpan&lt;T&gt;`.  However, in the particular case above we would like to elide creation of the array and create a read-only span that wraps the underlying data in the assembly.  There are primitives for doing this.

This was previously done in the compiler by eliding the lowering of the conversion to a bound call.  Lowering would instead preserve the user-defined conversion in the tree.  Then, in emit we would recognize that particular conversion and either perform the optimization if possible, or simply produce a call to the conversion method.  However, that had an unfortunate side-effect (bug), which this PR addresses.

Normally, the lowering phase would translate an invocation of a user-defined conversion operator into a `BoundCall`.  Subsequent phases of the compiler that need to rewrite symbols (such as lambda lowering and iterator rewriting, when the enclosing method is generic) would inherit the proper handling of rewriting symbols from the bound tree rewriter that is generated from `BoundNodes.xml`.  Unfortunately, the symbol appearing inside the conversion is not rewritten by that generated code, and there is no simple way to make it do so.  The bug report #31685 describes symptoms of this underlying issue.

There are a number of approaches one could take to address this issue:
1. Attempt to rehabilitate the original approach by extending the generated rewriter to handle conversions that may contain symbols.  That would require extending a few internal APIs and the bound tree rewriter.
2. Have the emit phase recognize a call to this particular conversion operator, and perform the optimization on that basis.
3. Add a new `BoundNode` that represents this particular optimizable pattern (which we would lower to), and let the generated bound node rewriter handle the contained symbol in subsequent phases where needed.

The approach here takes the third approach.  We back out the implementation of the optimization and add a new implementation based on a newly added bound node.
</Description>
        <CreatedDate>03/05/2019</CreatedDate>
        <ClosedDate>07/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>31685</IssueID>
            <PullRequestID>35463</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35463</PullRequestID>
            <IssueID>31685</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB SematicModel doesn’t return Symbol information for a compound assignment</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From @JoeRobich:
For my classification work, I am looking to classify compound assignment that use overloaded operators separately than those that use the built in. This was not an issue in C# because I was able to use the SemanticModel to get SymbolInfo for AssignmentExpressions. In VB.NET I am having a harder time because SematicModel doesn’t return information for AssignmentStatements. Is there an API where I can get the Symbol information for an AssignmentStatement in VB?</Description>
  </Issue>
  <Issue>
    <IssueID>31676</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regression with Nullable&lt;T&gt; and a generic type constraint on base</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>18/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>31676</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}


The derived type looks like this.

 csharp
public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>With the attached solution, we (the EF team) are getting the following errors:

&gt; error CS8320: Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater.
&gt; error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
&gt; error CS0115: 'QueryAsserter&lt;TContext&gt;.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)': no suitable method found to override
&gt; error CS0534: 'QueryAsserter&lt;TContext&gt;' does not implement inherited abstract member 'QueryAsserterBase.AssertQueryScalar&lt;TItem1, TResult&gt;(Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt;)'

The base type looks like this. (Our actual codebase uses `TResult?` here too but it reproed more consistently with `Nullable&lt;TResult&gt;`)

``

Putting the classes in the same file makes the issue go away as do other seemingly unrelated changes. Possibly an ordering issue or a race condition. Only repros on later versions of Roslyn (VS 2019 and .NET Core SDK 3.0).

cc @maumar @ajcvickers @Eilon

[Repro.zip](
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35094</PullRequestID>
        <Title>Add unit-tests for fixed issues.</Title>
        <Description>Closes #33276.
Closes #31676.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35017</PullRequestID>
        <Title>Simplify null checks using 'is null' and 'is object'</Title>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35017</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34563</PullRequestID>
        <Title>install servicehub json files in common7/servicehub folders</Title>
        <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35097</PullRequestID>
        <Title>Use Machine.Arm64 instead of raw value</Title>
        <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35097</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34763</PullRequestID>
        <Title>Update nullable attribute in docs</Title>
        <Description>Update nullable attribute in docs to show NullableFlags</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34581</PullRequestID>
        <Title>Fix the pull member up failure</Title>
        <Description>Related [issue](
So, null pointer exception happens when you try to make a property abstract like
``
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35116</PullRequestID>
        <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
        <Description>Fixes #35083.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35116</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34988</PullRequestID>
        <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
        <Description>Fix </Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35121</PullRequestID>
        <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
        <Description>Fixes 

Relates to  (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to  (umbrella for async-streams)</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>20/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35121</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34909</PullRequestID>
        <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
        <Description>Fixes #33952
</Description>
        <CreatedDate>10/04/2019</CreatedDate>
        <ClosedDate>15/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34909</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35024</PullRequestID>
        <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
        <Description>Fix for #34983 and #35126</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>22/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35009</PullRequestID>
        <Title>Add import placement codestyle, diagnostic, and fixer</Title>
        <Description>This PR is created to simplify the changes made in 

This PR includes the changes from both  &amp; 

![image](

![image](

</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35170</PullRequestID>
        <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Range</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35170</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35145</PullRequestID>
        <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
        <Description>Fixes #30081.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35189</PullRequestID>
        <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
        <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35189</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35213</PullRequestID>
        <Title>Only emit readonly attributes implicitly when feature enabled</Title>
        <Description>Resolves #35113</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35213</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35155</PullRequestID>
        <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
        <Description>Fix </Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34697</PullRequestID>
        <Title>Add spec for enhanced using</Title>
        <Description>Spec out the various parts of the enhanced using feature</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34697</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>32092</PullRequestID>
        <Title>Optimise DisplayClass Allocations</Title>
        <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to </Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>32092</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35234</PullRequestID>
        <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
        <Code>csharp
struct C {
    readonly e //suggest event here
}
`</Code>
        <Description>…member declaration.

``

See </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35265</PullRequestID>
        <Title>Re-enable symbol tests on mono</Title>
        <Description>Fixes </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35264</PullRequestID>
        <Title>Remove usage of QuietRestore</Title>
        <Code>
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
`</Code>
        <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

``

QuietRestore is a hack that is causing issues like </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35264</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34778</PullRequestID>
        <Title>Readonly struct metadata as source</Title>
        <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
        <CreatedDate>05/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35249</PullRequestID>
        <Title>Fix crash in pattern matching</Title>
        <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35249</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35254</PullRequestID>
        <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
        <Description>Fixes  (warn for potentially missing `[EnumeratorCancellation]`)
Closes  (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35254</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34889</PullRequestID>
        <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
        <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
        <CreatedDate>09/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34889</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35001</PullRequestID>
        <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
        <Description>Fixes #29894</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35001</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35018</PullRequestID>
        <Title>Make Generated syntax trees restore to project-level nullability</Title>
        <Description>Fixes #34094</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35018</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35212</PullRequestID>
        <Title>Focus first tabbable element in PMU dialog</Title>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35272</PullRequestID>
        <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
        <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35272</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34809</PullRequestID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on  Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes </Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34996</PullRequestID>
        <Title>Handly dynamic null checks against literal null</Title>
        <Description>Fixes #30939</Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34996</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35284</PullRequestID>
        <Title>Clean up an assertion in LambdaRewriter.</Title>
        <Description>Fixes #30069</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35284</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35351</PullRequestID>
        <Title>Fixup from bad merge.</Title>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Now</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35351</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35030</PullRequestID>
        <Title>Lambdas in array initializers checked in nullable walker</Title>
        <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35276</PullRequestID>
        <Title>Null inferences do not flow out of a finally block.</Title>
        <Description>Fixes #34018</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35336</PullRequestID>
        <Title>changed the way we report live analysis to task center</Title>
        <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](

new
![progress](
</Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35336</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35311</PullRequestID>
        <Title>Handle val escape for the switch expression.</Title>
        <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35311</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35016</PullRequestID>
        <Title>Additional Nullability checks for deconstruction:</Title>
        <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes </Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35016</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34973</PullRequestID>
        <Title>Correct nullability analysis in conditional access</Title>
        <Description>Fixes #29956</Description>
        <CreatedDate>13/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34973</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35344</PullRequestID>
        <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
        <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes  and  </Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>34831</PullRequestID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

## From 
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From 
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From 
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From 
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From 
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From 
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From 
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From 
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From 
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From 
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From 
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From 
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From 
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From 
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From 
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>34831</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35373</PullRequestID>
        <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
        <Description>FYI @jaredpar @agocke @stephentoub 

May fix  </Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35373</PullRequestID>
            <IssueID>31676</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31676</IssueID>
        <PullRequestID>35238</PullRequestID>
        <Title>Auto-generate assembly version of the build task assembly</Title>
        <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>31676</IssueID>
            <PullRequestID>35238</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31675</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Additional nullability tests for conversions with type parameters constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See:

</Description>
  </Issue>
  <Issue>
    <IssueID>31673</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect nullability when converting to type parameter type constrained to Nullable&lt;T&gt;</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
#nullable enable

abstract class A&lt;T&gt;
{
    internal abstract void F&lt;U&gt;(T t) where U : T;
}

class B : A&lt;int?&gt;
{
    internal override void F&lt;U&gt;(int? t)
    {
        U u = (U)(object?)t;
        u.ToString(); // may be null
    }
}
`</Code>
    <Description>Should report a warning for `u.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>31672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing compiler required member 'System.Collections.IEnumerator.MoveNext'</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>15/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using a custom mscorlib with some of my projects. This has been working fine until the latest update(s) of VS. As of sudden, I'm starting to get the message above (plus other two about get_Current and GetEnumerator) on every foreach loop.Please note that the interface/methods are correctly implemented and as I noted, this was working fine before. It seems that for some reason, VS/Roslyn are not picking the methods.While on the library I'm providing the methods are explicitly implemented, I already tried change them to implicit implementations but the problem still persists.Any guidance on how to make this works again will be appreciated._This issue has been moved from VSTS ticketId: 729511__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31671</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>nullable reference and linq syntax strips nullability</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;Given:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = new List&amp;lt;string?&amp;gt;();&lt;/pre&gt;This should produce a null dereference warning:&lt;br&gt;&lt;pre&gt;var y = from a in x        where a.Length != 0        select a;&lt;/pre&gt;But it doesn't. The nullability of `a` is stripped away immediately by `from ... in`.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744186__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Editor completion: move references to EditorOperations from the new completion </Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here we added some usage of editor operations by CommitManager  We need to consider moving them out to of Roslyn to the Editor side.</Description>
  </Issue>
  <Issue>
    <IssueID>31669</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>when mixed /**/ and //, uncomment will uncomment // first.</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
/*
    public class A
    {
     // this is a class
    }
*/


When I press ctrl K + ctrl U to uncomment the code block above, I get my code like this:

csharp
/*
    public class A
    {
     this is a class   -&gt; uncomment
    }
*/


but I expect my code to be this:

csharp
public class A
    {
     // this is a class
    }
`</Code>
    <Description>Example:

``

_This issue has been moved from 
VSTS ticketId: 740677_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31666</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8107 Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This error reported for this sequence of code         public static byte[] ConvertToByteArray(object value)        {            return                value is byte[] ? (byte[])value :                value == null ? null :                    Util.Convert.ToByteArray(value);        }_This issue has been moved from VSTS ticketId: 742071__These are the original issue comments:_Alexey Kuznetsov on 12/7/2018, 01:15 AM (3 days ago): The similar problem.The code the something like that:object value = new string[0];object resultValue = value is string[]? value as string[] : new[] \{ value.ToString() };Lang c#7. Works in VS 2017._These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31665</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A switch inside an if .. else .. can confuse the debugger</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;

namespace ConsoleApp1
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            var s = "1";
            if (true)
                switch (s)
                {
                    case "1":
                        Console.Out.WriteLine("Input was 1");
                        break;
                    default:
                        throw new Exception("Default case");
                }
            else
                Console.Out.WriteLine("Too many inputs");
        }
    }
}
`</Code>
    <Description>Moved from 

I reconstructed the problem in the following code:

``

If this code is debugged, the active statement marker will jump from the break; statement, to the throw... statement.

The throw statement will not be executed, but it had me confused for a couple of hours.
</Description>
  </Issue>
  <Issue>
    <IssueID>31660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>anonymous type in linq query</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;p&gt;This should not produce a warning:&lt;br&gt;&lt;/p&gt;&lt;pre&gt;var x = from a in new[] { 0 }        let b = new { m = &amp;quot;hi&amp;quot; }        where b.m.Length != 0        select b;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;But it does: `b.m` is nullable. It seems like members of anonymous types are deduced to be nullable, when they are created in linq syntax expressions.&lt;/p&gt;&lt;/pre&gt;_This issue has been moved from VSTS ticketId: 744187__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31659</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Report HDN_ExpressionIsProbablyNeverNull for null-coalescing operator with nullable value type</Title>
    <CreatedDate>10/12/2018</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
#pragma warning disable 649

struct S
{
    internal int F;
}

class Program
{
    static void Main()
    {
        S? s = new S();
        int? i = s?.F;
        _ = i.Value;
    }
}
`</Code>
    <Description>Should report a hidden diagnostic that the implicit null check in `s?.F` is unnecessary. (The code could be simplified to `s.Value.F` or `s.GetValueOrDefault().F`.)
``
See </Description>
  </Issue>
  <Issue>
    <IssueID>31653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzers that throw in DiagnosticAnalyzer.Initialize bring down VS</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Description>Analyzers throw in DiagnosticAnalyzer.Initialize can bring down VS instead of showing a gold bar at the top of IDE. We should protect against that, see: 

</Description>
  </Issue>
  <Issue>
    <IssueID>31651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SymbolDeclaredEventAnalyzer crashed with InvalidOperationException</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels />
    <Code>
Message: System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Linq.Enumerable.Single[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1+CompilationAnalyzer[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]..ctor(Microsoft.CodeAnalysis.INamedTypeSymbol, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Microsoft.CodeAnalysis.Compilation, Microsoft.CodeAnalysis.INamedTypeSymbol)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].&lt;Initialize&gt;b__7_0(Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper+CollectCompilationActionsContext.RegisterCompilationStartAction(System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext&gt;)
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1[[Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet.ComputeCompilationEndAnalyzer(Microsoft.CodeAnalysis.Project, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;AnalyzeProjectAsync&gt;d__88.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(ProjectAnalysisData)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ProjectAnalysisData, Microsoft.CodeAnalysis.Features, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(ProjectAnalysisData)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;GetProjectAnalysisDataAsync&gt;d__5.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;ComputeDiagnosticsAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+Executor+&lt;AnalyzeAsync&gt;d__22.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeAsync&gt;d__4.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.Task+WhenAllPromise`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+InProcOrRemoteHostAnalyzerRunner+&lt;AnalyzeOutOfProcAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx+&lt;InvokeAsync&gt;d__13`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2&lt;System.__Canon,Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;)
   at Microsoft.CodeAnalysis.Remote.Extensions+&lt;InvokeAsync&gt;d__1`1[[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResultMap`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult, Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis.Workspaces, Version=2.11.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;InvokeCoreAsync&gt;d__93`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Threading.Tasks.TaskCompletionSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at StreamJsonRpc.JsonRpc+&lt;&gt;c__DisplayClass93_1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;InvokeCoreAsync&gt;b__0(StreamJsonRpc.JsonRpcMessage)
   at StreamJsonRpc.JsonRpc+&lt;HandleRpcAsync&gt;d__103.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.AwaitExtensions+TaskSchedulerAwaiter+&lt;&gt;c.&lt;OnCompleted&gt;b__5_0(System.Object)
   at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

`</Code>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0 [28407.114.d16.0stg]

**Steps to Reproduce**:

Do not know the repro.
``

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>31650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to select TFM in editor</Title>
    <CreatedDate>09/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using dev16 preview1 on Roslyn (`Compilers.sln`).

I expect that I can change the TFM and the source would become active/colorized. But instead the TFM reverts itself back to its original selection.

![select-tfm](

@jinujoseph for triage/routing</Description>
  </Issue>
  <Issue>
    <IssueID>31643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] default(T) behavior in the context of generic types</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static void TestMethod()
{
    new string[0].AllEquals();
    new int[0].AllEquals();
}

/// &lt;summary&gt;
/// Check if all items of an enumerable are equals, using an optional comparer
/// &lt;/summary&gt;
public static bool AllEquals&lt;T&gt;(this IEnumerable&lt;T&gt; items, IEqualityComparer&lt;T&gt; comparer = null)
{
    comparer = comparer ?? EqualityComparer&lt;T&gt;.Default;

    T first = default(T);   // Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    bool isFirst = true;
    foreach (var item in items)
    {
        if (isFirst)
        {
            first = item;
            isFirst = false;
            continue;
        }
        if (!comparer.Equals(first, item))
        {
            return false;
        }
    }
    return true;
}
`</Code>
    <Description>**Version Used**: VS2019 16.0 Pre1

**Steps to Reproduce**:

Given the following code:

``

**Expected Behavior**:
Not sure what to expect here, I do not how to resolve this aside from disabling nullables... if it's unconstrained, should there be a way to tell that T can be nullable for references, and cannot be for value types? Should an explicit `where T:object?` change this behavior [if it were valid]( ?

**Actual Behavior**:
`Error CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.` on assignation from `default`.</Description>
  </Issue>
  <Issue>
    <IssueID>31642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref Types] Infer throw statements from extension methods</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
struct TwoEnumeratorListStack
{
    private readonly ArrayBuilder&lt;Which&gt;? _discriminatorStack;

    public Which PeekNext()
    {
        // Possible dereference of a null reference
        return _discriminatorStack[_discriminatorStack.Count - 1];
    }
}


To prevent the warning you can do:

 csharp
public Which PeekNext()
{
    if (_discriminatorStack == null)
        throw new InvalidOperationException();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}


Which removes the warning. However trying to capture the check in a general-purpose extension method:

 csharp
internal static void ThrowInvalidIfNull&lt;T&gt;(this T? argument) where T : class
{
    if (argument == null)
        throw new InvalidOperationException();
}

public Which PeekNext()
{
    _discriminatorStack.ThrowInvalidIfNull();
    return _discriminatorStack[_discriminatorStack.Count - 1];
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Simplified definition:

``
Doesn't remove the warning anymore and requires additional `!` to both array indexer and `.Count`
</Description>
  </Issue>
  <Issue>
    <IssueID>31641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Potentially understand Try* pattern flow better</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>31641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
public bool TryGetSomething (out ReferenceType result)
{
    if (someCondition)
    {
        result = /* non-null value */;
        return true;
    }
    else
    {
        result = default;
        return false;
    }
}


With nullable types because `default` is used you will end up converting the out parameter to `ReferenceType?`.

It would be nice on the caller side if subsequently this would be supported:


if (TryGetSomething (out var result))
     // result is not null and thus doesn't trigger "Possible deference of a null reference" warning
     result.DoSomething ();


Today this doesn't seem to be the case with the following (real) code sample

 csharp
// Caller site
public bool TryGetNextInSpan(in TextSpan span, out SyntaxNode? value)
{
    if (_stack == null) {
        value = default;
        return false;
    }
    while (_stack[_stackPtr].TryMoveNextAndGetCurrent(out value))
    {
        if (IsInSpan(in span, /* `value` shows the dereference warning --&gt; */ value.FullSpan))
        {
            return true;
        }
    }

    _stackPtr--;
    return false;
}

// Defined in class used by `_stack`
internal bool TryMoveNextAndGetCurrent(out SyntaxNode? current)
{
    if (!MoveNext())
    {
        current = default;
        return false;
    }

    // ItemInternal returns a non-nullable type
    current = ItemInternal(_node, _childIndex);
    return true;
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools 2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

When doing a Try pattern like this:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unclear whether EmbeddedText with empty filePath is allowed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The documentation on `EmbeddedText` says that empty file path is allowed. But there is no way to create an `EmbeddedText` with an empty file path.

In EmbeddedText:
``


Tagging @tmat 

For context, I am trying to modify our test helper `CompileAndVerify` to embed symbols and source into the produced assembly.

Relates to  (Proposal: Embed sources in PDBs)</Description>
  </Issue>
  <Issue>
    <IssueID>31639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable ref types] Infer non-nullablity with array `?.Length` check</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
protected GreenNode(SyntaxKind kind, int fullWidth, DiagnosticInfo[]? diagnostics, SyntaxAnnotation[]? annotations)
    : this(kind, fullWidth)
{
    if (diagnostics?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsDiagnostics;
        diagnosticsTable.Add(this, diagnostics);
    }
    if (annotations?.Length &gt; 0)
    {
        this.flags |= NodeFlags.ContainsAnnotations;
        annotationsTable.Add(this, annotations);
    }
}
`</Code>
    <Description>**Version Used**: VisualStudio.16.int.d16.0stg/16.0.0-pre.2.0+28408.101.d16.0stg
C# Tools   2.11.0-beta2-63529-05+66aa49da81717aa54090a9e94c2f575ddb1959bb

**Steps to Reproduce**:

Take following code block:

``
Currently the parameters to `Add` (both `diagnostics` and `annotations`) are flagged as "Possible null reference argument for parameter" however because of the form of the if check it should be possible to infer that those arguments are non-null at that stage.</Description>
  </Issue>
  <Issue>
    <IssueID>31638</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Semantic classification doesn't always refresh</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>31638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version used: 16.0 preview 1

It just happened to me that after opening the Roslyn solution, I was waiting for all types to get colorized to be sure that everything is loaded, but it seemed to take a little longer than usual. When I tried hovering over an uncolored type, I actually got quick info, which means everything was fully bound after all. I just had to close and reopen the document to see the colorization.
Screenshot:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31637</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Turning on Nullable references crashes VS with analyzers installed</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31637</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source) in f:\dd\ndp\fx\src\Core\System\Linq\Enumerable.cs:line 1174
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 77
   at Roslyn.Diagnostics.CSharp.Analyzers.CSharpSymbolDeclaredEventAnalyzer.GetCompilationAnalyzer(Compilation compilation, INamedTypeSymbol symbolType) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\CSharp\CSharpSymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 26
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.&lt;Initialize&gt;b__7_0(CompilationStartAnalysisContext compilationContext) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 46
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CollectCompilationActionsContext.RegisterCompilationStartAction(Action`1 action) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 351
   at Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.Initialize(AnalysisContext context) in E:\A\_work\59\s\src\Roslyn.Diagnostics.Analyzers\Core\SymbolDeclaredEventMustBeGeneratedForSourceSymbols.cs:line 43
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.IsCompilationEndAnalyzer(DiagnosticAnalyzer analyzer, Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/AnalyzerHelper.cs:line 311
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.StateSet.ComputeCompilationEndAnalyzer(Project project, Compilation compilation) in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.StateSet.cs:line 269
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;AnalyzeProjectAsync&gt;d__88.MoveNext() in /_/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer_IncrementalAnalyzer.cs:line 112
`</Code>
    <Description>**Version Used**: 16.0.0 Preview 2.0 [28407.111.d16.0stg]

**Steps to Reproduce**:

Install Roslyn.Diagnostics.Analyzers on a project with Nullable references turned on.


**Expected Behavior**:

No Crash

**Actual Behavior**:

Visual Studio Crashes with the following fail fast exception:

  | Name | Value | Type
-- | -- | -- | --
◢ | $exception | {"Sequence contains no elements"} | System.InvalidOperationException



[Roslyn.Diagnostics.Analyzers.SymbolDeclaredEventAnalyzer`1.CompilationAnalyzer..ctor(INamedTypeSymbol symbolType, INamedTypeSymbol compilationType)](

``


Dump available at `\mlangfs1\public\jmarolf\Dumps\crash.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>31632</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposed "Nullability Side Car Representation"</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>08/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Specification</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31632</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We're considering supporting an additional input file to the C# compiler that would inform the compiler about nullability annotations that should be considered to apply to external program entities.  These annotations replace what the programmer considers to be either missing or incorrect annotations from an imported library.

## Nullability "Side Car" Representation

This document proposes a particular representation for the signature information that augments a program that may lack signature information in its program elements or referenced assemblies.  We call this the "C# nullability signature" file, or CSNS.  When one is present as part of a compilation, the signatures of program entities are augmented with nullability annotations appearing in it.

The CSNS file format is a subset of the C# programming language, and is intended to support only enough of the C# language to express the program element signatures and the nullability annotations that apply to them.  We borrow from C# so that we can assume C# syntax and semantics unless described otherwise.

Each CSNS file is self-contained. It is interpreted independently of the program or other CSNS files. Its interpretation is used to associate a fully-qualified name (without namespace qualification) to each type name appearing in it, and those are used to associate an annotated program element with a corresponding program entity (if any). It is not an error for there to be program elements in the CSNS file that do not correspond to any symbols in the program.

The CSNS file format is the same as a C# program except as follows:
- No modifiers are permitted (not even `public`, `private`, `override`, `new`, `params`, `this`, `partial`, parameter `ref`, `in`, or `out`, etc).
- *variance_annotations* (`in` and `out`) on type parameters are not permitted.
- Method bodies (and ctor-initializers) are forbidden. Each method declaration should end in a semicolon.
- Similarly, constructor, operator, property, and other function member bodies are omitted.
- Default parameter values are forbidden in method declarations.
- Attributes are permitted, but only without attribute arguments.
- tuple element names are forbidden in tuple types
- `dynamic` is forbidden.  `object` is used instead.
- Static constructors and constants may not be declared.
- Explicit interface implementations are forbidden.
- Enum declarations are forbidden.
- No preprocessing directives are permitted, except for #nullable
- No `extern alias` directives, but only in the compilation unit (not in a namespace)
- No `using` directives (except `using` alias directives)

To be clear, the following are permitted:
- comments, including documentation comments (which are ignored)
- `using` alias directives
- `namespace` declarations
- type declarations, including `class`, `struct`, `interface`, and `delegate` declarations.
- `enum` declarations (without a base type or members)
- field, property, method, operator, indexer, constructor, destructor, and event declarations, as well as member declarations of properties and events, but without bodies.
- type parameter constraints

Semantically, there are some differences from C#:
- Type names appearing in a CSNS file bind to a type declared by that name from the CSNS file. The fully-qualified name of the type that is found is used to match it to a type in the annotated program.
- It is an error for a type not to be found, with two exceptions. Language keywords such as `string`, `int` and `double` can be used to refer to fully-qualified names that are considered to always be found. A fully-qualified name written with a `global::` qualifier need not be found. In both cases the language construct naturally provides the fully-qualified name.
- A type declaration in CSNS is not considered to declare a type, so it does not have the same constraints as ordinary C#
  - The requirements that a concrete type implements its interfaces or its base type's abstract members does not apply to a type declared in CSNS
- Pointer types are permitted even without the `unsafe` modifier.


## Alternatives
- We could aim to make the file format suitable for generation of a reference assembly, but that would require that type names bind. We want to use a single CSNS for more than one platform, so we prefer looser semantics.
- We could permit modifiers (and variance annotations, default parameters, `object`, and tuple names) to make it easier to copy-and-paste into a CSNS file. In that case we need to decide what to do with them
  - [x] Forbid them (proposed above)
  - [ ] Ignore them
  - [ ] Require them to match the annotated entity; if they do not match
    - [ ] Produce a diagnostic; or
    - [ ] Consider the CSNS declaration not to annotate that entity


## Open Questions
- What kinds of changes can a CSNS annotated program element make to a program symbol
  1. It can only change an *oblivious* annotation to something else; or
  2. The annotations in a CSNS file fully override the annotations from the program
- Can annotations from one CSNS file "override" those from another?  How do we decide which one to use?  Is there a priority order?
- Do CSNS annotations apply to symbols that are declared in the program itself (that is, in source)? Or are annotations directly in source the only supported way to annotate a symbol in the C# programming language?
</Description>
  </Issue>
  <Issue>
    <IssueID>31630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deterministic build fails to find ModifyVsixManifest tool</Title>
    <CreatedDate>08/12/2018</CreatedDate>
    <ClosedDate>09/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>31625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Dotnet-Format Found project reference without a matching metadata reference</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit\MixedReality.Toolkit.csproj
  Unable to load workspace.
  Found project reference without a matching metadata reference: C:\Users\andrha\source\repos\ryzn_mrtk\build\MixedReality.Toolkit.SDK\MixedReality.Toolkit.SDK.csproj
  Unable to load workspace.
`</Code>
    <Description>**Version Used**: dotnet: 2.2.200-preview-009648 ; dotnet-format: 2.11.0-beta2-63603-03+b2ae9bbaa55e93f255b111c68e65d9c538351095

**Steps to Reproduce**:

1. Clone 
2. checkout `feature/mrtk_packageManager`
3. dotnet-format -w .\build\Build.sln

**Expected Behavior**:

Formats all code/projects without error

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31621</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>‘Convert to foreach’ overzealously removes the foreach iteration variable</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>23/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
foreach (var item in list)
{
}


You get:

cs
for (var i = 0; i &lt; list.Length; i++)
{
}


But now I have to write this myself (the actual expression is quite a bit longer than `list`):

cs
    var item = list[i];
`</Code>
    <Description>Visual Studio 2019 Preview 1

If you invoke ‘Convert to 'foreach'’ on:
``

I'm not happy about this. Just because I haven't typed the statement yet that will use `item` does not mean `item` should be discarded. It just so happens that I want `i` in scope before I start typing the first statement that uses `item`.</Description>
  </Issue>
  <Issue>
    <IssueID>31620</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Field nullability incorrect in lambda</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>13/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following should compile without warnings:
``
cc @pilchie
</Description>
  </Issue>
  <Issue>
    <IssueID>31617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EE: Avoid expanding certain nodes when NoSideEffects is set</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>31617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Check `InspectionContext.EvaluationFlags` and avoid expanding certain nodes when `DkmEvaluationFlags.NoSideEffects` is set.

In particular, avoid expanding "Results View" and "Native View".</Description>
  </Issue>
  <Issue>
    <IssueID>31616</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Live Unit Testing With C# 8</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[20:03:02.349 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()


---

Moved from dotnet/csharplang:
When using C# 8 nullable references with Visual Studio 2019, the Live Unit Testing feature doesn't work. The build always fails with error messages like "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.". I realize this is probably because I have the "Treat warnings as error" turned on but the solution builds fine as I have the nullable references turned on for all projects in the .csproj file.

Adding "#nullable enable" to the files with nullable references changes this error to:

[20:03:16.156 Error] - FatalError - System.ArgumentException: Inconsistent language versions
Parameter name: syntaxTrees
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonLanguageVersion(ImmutableArray`1 syntaxTrees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation..ctor(String assemblyName, CSharpCompilationOptions options, ImmutableArray`1 references, CSharpCompilation previousSubmission, Type submissionReturnType, Type hostObjectType, Boolean isSubmission, ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations, AsyncQueue`1 eventQueue)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.Update(ReferenceManager referenceManager, Boolean reuseReferenceManager, SyntaxAndDeclarationManager syntaxAndDeclarations)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonAddSyntaxTrees(IEnumerable`1 trees)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.CompilationComparer.GetUpdatedCompilation(Compilation compilation, CommandLineArguments arguments, Logger logger, BuildDifference&amp; differences)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.EmitHelper.&lt;EmitAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LiveUnitTesting.BuildManagement.BuildService.&lt;EmitSingleProjectAsync&gt;d__51.MoveNext()
`</Code>
    <Description>**Version Used**: 
Not sure, using Visual Studio 2018 Preview 1.0 and C# 8

**Steps to Reproduce**:

1.  Create a project with C# 8 enabled and use nullable reference types
2.  Create NUnit test project and test a class using the nullable reference types
3.  Include the test project in Live Unit Testing

**Expected Behavior**:
VS shows the normal tested/untested passing/failing icons based on the unit test results.

**Actual Behavior**:
It fails to build during the Live Unit Testing with error: "error CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context".
When the classes using nullable references have the "#nullable enabled" declaration it fails with this error:
``

I have C# 8 set as the language for all projects.

I've been asked to tag @ManishJayaswal 
</Description>
  </Issue>
  <Issue>
    <IssueID>31615</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS1717 'Assignment made to same variable' should offer 'this.' fix</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>31615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Foo
{
    private object bar;

    public Foo(object bar)
    {
        // CS1717 Assignment made to same variable; did you mean to assign something else?     
        bar = bar;
    }
}
`</Code>
    <Description>VS 2019 Preview 1

``

This happens during refactoring enough that it would be nice to detect the field in scope with the unqualified name 'bar' and offer a fix to qualify the left-hand side. (Qualifying the right hand side would not be offered because it's a safe assumption that the parameter `bar` should have its value observed, and even if observed earlier, not overwritten.)

Something similar could be done for a field named `_bar`, if that's your cup of tea.

If the statement is in constructor and the field is readonly or the constructor is initializing a struct, that's another strong hint (CS0171 in the latter case) that this fix should be offered. </Description>
  </Issue>
  <Issue>
    <IssueID>31612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CI feed for Roslyn</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a prerelease feed for the Microsoft.Net.Compilers NuGet package which could be mentioned at 

What I'm looking for is a way to reference the Microsoft.Net.Compilers package which contains the same version of Roslyn as in VS2019 Preview 1.</Description>
  </Issue>
  <Issue>
    <IssueID>31611</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Building VB console app fails, unable to find "%TEMP%\.NETFramework,Version=v4.6.AssemblyAttributes.vb" file</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/12/2018</ClosedDate>
    <IssueLabels />
    <Description>_From @AArnott on December 7, 2018 16:13_Building [a trivially simple VB console app]( fails with:

&gt;vbc : error BC2001: file 'C:\Users\andarno\AppData\Local\Temp\.NETFramework' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]
vbc : error BC2001: file 'D:\git\SPSS.NET\src\SimpleDemo\Version=v4.6.AssemblyAttributes.vb' could not be found [D:\git\SPSS.NET\src\SimpleDemo\SimpleDemo.vbproj]

The VB compiler can't find *two* files, neither of which exist. Looking at the msbuild.binlog file, I can see that *one* file is added with assembly attributes by the SDK, but that file has a comma in it, which isn't properly escaped (somewhere) evidently, since by the time it is fed into the vbc.exe tool, it interprets it as two separate files, as shown here:

![image](

This repros on 15.8, 15.9, and 16.0 Preview 1._Copied from original issue: dotnet/sdk#2731_</Description>
  </Issue>
  <Issue>
    <IssueID>31610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>is operator confuses non-nullable references analyzer</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
namespace Test_CS8600
{
    public class ClassBase
    {
    }

    public class ClassDerived : ClassBase
    {

    }

    public class Class1
    {
        public void Test(ClassBase a)
        {
            var x = a;

            if(a is ClassDerived d)
            {

            } else
            {
                x = a; // CS8600
            }
        }
    }
}
`</Code>
    <Description>Using the 'is' operator within an if statement appears to confuse the non-nullable references analyzer and variables it previously knew to be non-null are subsequently considered to be possibly null.

**Version Used**: .net core 2.2.200-preview-009648

**Steps to Reproduce**:

Compile the following code
``

**Expected Behavior**:
Build outputs no warnings

**Actual Behavior**:
Build outputs `Class1.cs(23,21): warning CS8600: Converting null literal or possible null value to non-nullable type. `
</Description>
  </Issue>
  <Issue>
    <IssueID>31609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`ConfiguredAsyncEnumerable` in netcoreapp3.0 preview is not acceptable with await foreach (CS8142)?</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. using System.Threading.Tasks;
2. await foreach (var z in /*IAsyncEnumerable&lt;T&gt;*/.ConfigureAwait(false))

**Expected Behavior**:
See this on  but seems not see this on #24037, is it still available?

**Actual Behavior**:
CS8412
</Description>
  </Issue>
  <Issue>
    <IssueID>31608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async-streams: IAsyncEnumerable&lt;T&gt; without async crashes `csc` when build</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>10/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>31608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static IAsyncEnumerable&lt;int&gt; Test002()//VS2019 remove the `async` here with quick fix for `CS1998`
        {
            yield return 1;
        }

2. VS2019 show an quick fix for `CS1998`, and remove the `async` keyword with that.
3. Build.

**Expected Behavior**:
At least not crash. Show an error and suppress `CS1998` in the case if async must be needed. Or build success if async is not needed.

**Actual Behavior**:
csc crash with the below message

 FailFast: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
  
    at System.Environment.FailFast(System.String, System.Exception) 
    at System.Environment.FailFast(System.String, System.Exception) 
    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;) 
    at Microsoft.CodeAnalysis.FatalError.Report(System.Exception) 
    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.IteratorStateMachine ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() 
    at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) 
    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread) 
    at System.Threading.ThreadPoolWorkQueue.Dispatch() 
  
 Exception details: 
 System.InvalidOperationException: Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType' 
    at Microsoft.CodeAnalysis.CSharp.IteratorRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, IteratorStateMachine&amp; stateMachineType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() 
`</Code>
    <Description>**Version Used**: The one in VS2019 Preview1 and dotnet sdk 3.0.100-preview-009812

**Steps to Reproduce**:

1. Write an `async IAsyncEnumerable&lt;T&gt; XXX()` method without await
``

May be also covered by #31113? But with different behavior and testcase.</Description>
  </Issue>
  <Issue>
    <IssueID>31606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Lack of warning for not nullable field like array initialization with null literal</Title>
    <CreatedDate>07/12/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class FooBar
{
    // No warning
    public string[] Ss { get; } = new string[] { null };
}

class FooBar2
{
    // Cannot convert null literal to non-nullable reference or unconstrained type parameter.
    public string[] Ss { get; } = new string[] { null };

    // Defining empty constructor "forces" the warning to appear.
    public FooBar2()
    {               
    }
}
`</Code>
    <Description>**Version Used**: 
VS2019 Preview

``</Description>
  </Issue>
  <Issue>
    <IssueID>31598</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need to make sure all speculative APIs on Semantic model properly pick up nullable context for the position where the speculation occurs</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>31598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See NonNullTypesContext_22 through NonNullTypesContext_37 for inspiration</Description>
  </Issue>
  <Issue>
    <IssueID>31589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LicenseUrl is depricated</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>18/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We use LicenseUrl in our NuGet packages. We should move to packaging the License.txt file and using that, but we need support for `PackageLicenseFile` which is only available in `2.1.600-preview-009426` or newer. 
</Description>
  </Issue>
  <Issue>
    <IssueID>31588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2017 Enterprise 15.0.28307.145 says it's incompatible with .NET Compiler Platform SDK</Title>
    <CreatedDate>06/12/2018</CreatedDate>
    <ClosedDate>06/12/2018</ClosedDate>
    <IssueLabels />
    <Description>I tried to follow the steps to implement a Code Fixer today, on a just-updated copy of VS 2017 Enterprise.

After I installed the .NET Compiler Platform SDK (either from  or from Tools -&gt; Extensions and Updates), VS reports that the SDK is incompatible with Visual Studio.

Is a release coming that will work?
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31197</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify ref assembly behavior regarding embedded resources</Title>
    <CreatedDate>15/11/2018</CreatedDate>
    <ClosedDate>15/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From discussion with Neal, the expected behavior is that resources should not be embedded into secondary assemblies:
- refout: main assembly has resources, ref assembly doesn't
- refonly: ref assembly has resources

@jonathanpeppers [reported]( that updating resources causes the ref assembly to change.

A quick look at the implementation and tests make me unsure about the current behavior, so I'll investigate further.

Ref assembly spec: 
Ref assembly main PR: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31197</IssueID>
        <PullRequestID>19417</PullRequestID>
        <Title>Merging ref assemblies feature into master</Title>
        <Description>**Customer scenario**
Produce reference assemblies.
See feature doc: 

**Bugs this fixes:**
Relates to  (test plan) and  (work items)

**Risk**
Low. This has been integrated with Domino, MSBuild and part of Windows build, as validation.

**Performance impact**
The performance hit for generating reference assemblies is small because we re-use most of the work that has already been done, and the reference assemblies themselves are much smaller.
Also, this is pay-per-play (no performance cost unless you choose to emit the ref assembly).

**Known issues**
There is one issue from Windows that I'm investigating, but that I don't think is caused by the compiler.
There are some follow-up issues post-C#-7.1, for further refining the filtering of metadata in ref assemblies.

@gafter FYI</Description>
        <CreatedDate>10/05/2017</CreatedDate>
        <ClosedDate>12/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31197</IssueID>
            <PullRequestID>19417</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>31197</IssueID>
            <PullRequestID>19417</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>19417</PullRequestID>
            <IssueID>31197</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>19417</PullRequestID>
            <IssueID>31197</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31197</IssueID>
        <PullRequestID>31244</PullRequestID>
        <Title>Resources should not be emitted into ref assemblies</Title>
        <Description>Currently, resources are emitted into ref assemblies produced with `/refout`. The impact is that modifying a resource file causes dependent projects to re-compile un-necessarily.

Fixes 

Update (12/5/2018):
From discussion with Jared and Neal, we will not include resources in ref assemblies produced by `/refonly` either. We would like to hear from customer that need that. If there are some and we decide we need to include resources in that scenario after all, we'll have to design some solution (`/refout:&lt;option&gt;` or something).

Update (12/6/2018):
There is still some discussion about the `/refonly` case (

Update (1/10/2019):
From discussion with Eric StJohn and other BCL folks, we think it is safe to remove the resources. I'll still document as a breaking change though.</Description>
        <CreatedDate>18/11/2018</CreatedDate>
        <ClosedDate>15/01/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31197</IssueID>
            <PullRequestID>31244</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>31244</PullRequestID>
            <IssueID>31197</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31196</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>31196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Naming for the new suppression scope</Title>
    <CreatedDate>15/11/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>31196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> added a new namespace scope to suppress diagnostics in namespace and all its descendants. The current naming is "NamespaceAndChildren", but we probably want a better name that is easier to understand.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31196</IssueID>
        <PullRequestID>31092</PullRequestID>
        <Title>Add a new SuppressMessageAttribute target scope to suppress diagnosti…</Title>
        <Description>…cs in a namespace and all its descendant symbols

Fixes #486

This SuppressMessageAttribute feature has been requested for a very long time and still gets frequent customer requests to date.

The current "Namespace" target scope for SuppressMessageAttribute suppresses diagnostics only in nodes directly contained within the namespace, but not in any of it's descendant symbols. This makes it very tedious to suppress certain analyzer diagnostics in entire namespace as one needs to add suppressions to individual types/namespaces within the namespace. This also creates a maintenance nightmare.

This PR adds a new target scope "NamespaceAndChildren" which suppresses diagnostics on the corresponding namespace and all its descendant symbols/members. Better naming suggestions for this scope name are welcome!

Example: `[assembly: SuppressMessage("Test", "Declaration", Scope="NamespaceAndChildren", Target="N.N1")]`</Description>
        <CreatedDate>10/11/2018</CreatedDate>
        <ClosedDate>15/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>31196</IssueID>
            <PullRequestID>31092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>31196</IssueID>
            <PullRequestID>31092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31196</IssueID>
            <PullRequestID>31092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>31092</PullRequestID>
            <IssueID>31196</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31192</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"using" alias directive adds assembly reference even if the aliased type is not used. </Title>
    <CreatedDate>15/11/2018</CreatedDate>
    <ClosedDate>06/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31192</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>31192</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Microsoft (R) Visual C# Compiler version 2.6.0.62309 (d3f6b8e7)

**Steps to Reproduce**:

1.  Build this `HelloWorld.cs` file using `csc HelloWorld.cs`:

``

2. Inspect the assembly references in the resulting `HelloWorld.exe` using ILSpy or similar tools.

**Expected Behavior**:

`HelloWorld.exe` should not reference `System.Xml`, because nothing from `System.Xml` is _actually_ being used (even though we have declared this alias: `using sxn = System.Xml.XmlNode;`).

**Actual Behavior**:

`HelloWorld.exe` contains an assembly reference to `System.Xml`.

**Comments**

It is not clear to me if this should be considered a bug, as I don't know if this behavior is specified anywhere. But:

1. This is a regression in behavior from Xamarin's `mcs` compiler, which will not emit such a reference in this case.

2. This is causing issues for us (Unity) further down the line, as we use Mono's IL Linker (or our fork of it) to remove unused code to optimize build sizes. In a case like this, it will detect that the referenced assembly is not actually being used, and remove it. Now we end up with a reference to a missing assembly, which causes issues in other tooling. We can work around these issues, but at the core, I feel that this may be incorrect behavior in roslyn.
</Description>
  </Issue>
  <Issue>
    <IssueID>31191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"using </Title>
    <CreatedDate>15/11/2018</CreatedDate>
    <ClosedDate>15/11/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>31190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>31190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] Go To Definition, Go To Implement, Find All References do nothing</Title>
    <CreatedDate>15/11/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigating</Name>
        <IssueID>31190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.0.0 Preview 2.0 [28314.107.d16.0stg]

**Steps to Reproduce**:

1. Create Console App (.NET Framework)
2. Click on Main and choose Find All References

**Expected Behavior**:
Find Results window to show

**Actual Behavior**:
Nothing
</Description>
  </Issue>
  <Issue>
    <IssueID>31179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>31179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Immediate window language version</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>31179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Even if the project is using the latest version of the C# language, the immediate window does not take this setting.For example if I try to use the following extension method in the immediate window:public static T[] ToArray&amp;lt;T&amp;gt; (this ref System.Buffers.ReadOnlySequence&amp;lt;T&amp;gt; sequence);I get this error:sequence.ToArray()error CS8107: Feature 'ref extension methods' is not available in C# 7.0. Please use language version 7.2 or greater.Please enable the latest version of the C# language in the immediate window. There is not even reason to limit the usage to the same version of the currently debugged project._This issue has been moved from VSTS ticketId: 721644__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Invalid nuget licenses</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>15/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>31173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>


Shouldn't it be MIT? Correct me if I'm wrong.</Description>
  </Issue>
  <Issue>
    <IssueID>31167</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Pattern switch expression crash in emit</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>17/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact]
        public void NonExhaustiveBoolSwitchExpression()
        {
            var source = @"using System;
class Program
{
    static void Main()
    {
        new Program().Start();
    }
    void Start()
    {
        Console.Write(M(true));
        try
        {
            Console.Write(M(false));
        }
        catch (Exception)
        {
            Console.Write("" throw"");
        }
    }
    public int M(bool b) 
    {
        return b switch
        {
           true =&gt; 1
        }; 
    }
}
";
            var compilation = CreatePatternCompilation(source);
            compilation.VerifyDiagnostics(
                // (22,18): warning CS8509: The switch expression does not handle all possible inputs (it is not exhaustive).
                //         return b switch
                Diagnostic(ErrorCode.WRN_SwitchExpressionNotExhaustive, "switch").WithLocation(22, 18)
                );
            CompileAndVerify(compilation, expectedOutput: "1 throw");
        }
`</Code>
    <Description>The following test fails, crashing in emit.

``

Reported by @jcouv 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31167</IssueID>
        <PullRequestID>31169</PullRequestID>
        <Title>Do not mark a switch expression as erroneous just because it wasn't exhaustive.</Title>
        <Description>Fixes #31167</Description>
        <CreatedDate>14/11/2018</CreatedDate>
        <ClosedDate>16/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31167</IssueID>
            <PullRequestID>31169</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>31167</IssueID>
            <PullRequestID>31169</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>31167</IssueID>
            <PullRequestID>31169</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>31169</PullRequestID>
            <IssueID>31167</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>31169</PullRequestID>
            <IssueID>31167</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31165</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Are nullable annotations part of array specifiers?</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Current meaning:
- `string[]?[] a1; // outer array is nullable`
- `string[][]? a2; // inner array is nullable`
- `string?[][] a3; // element is nullable`

This makes sense per current language design, but has problems.
Raised by @gafter, so created a tracking issue.</Description>
  </Issue>
  <Issue>
    <IssueID>31163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>31163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] Go To All is broken in recent builds</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigating</Name>
        <IssueID>31163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Version 16.0.0 Preview 2.0 [28312.106.d16.0stg]

**Steps to Reproduce**:

1. File -&gt; New Console App (.NET Framework)
2. CTRL + T
3. Enter t Program

**Expected Behavior**:
Program type to show up

**Actual Behavior**:
No results

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31160</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullableAnnotation lattice structure is unclear</Title>
    <CreatedDate>14/11/2018</CreatedDate>
    <ClosedDate>05/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>31160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
    internal enum NullableAnnotation : byte
    {
        Unknown,     // No information. Think oblivious.
        NotNullable, // For string, int, T
        Nullable,    // For string?, T? where T : class; and for int?, T? where T : struct.
        NotNullableBasedOnAnalysis, // Explicitly set by flow analysis
        NullableBasedOnAnalysis, // Explicitly set by flow analysis
    }
`</Code>
    <Description>Both flow analysis and (nullable) type inference require that the set of nullable states form a (mathematical) lattice. With that lattice we can perform an intersection of states for flow analysis, which is the same operation as the nullability computed for the common lower bound for type inference.  Similarly, the union of states for flow analysis is the same as the nullability computed for the common upper bound for type inference.

The current definition of the nullable state does not have a clear top or bottom to its lattice, which means it is ambiguous.  We need a clear top and bottom to give us confidence (e.g. proof by induction on the global state) that analysis converges.

Here is the current enum:
``

In addition, I propose that the intersection and union operations should be shared (implemented as a separate extension method on NullableAnnotation) rather than being implemented independently, inline, everywhere they are used.

Note [jcouv]: I referenced this issue in code. Search for those references before closing the issue.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31160</IssueID>
        <PullRequestID>26</PullRequestID>
        <Title>Added “SemanticModel.WithSuppressAccessChecks” extension method.</Title>
        <Description>The `WithSupressAccessChecks` method creates a SemanticModel that ignores accessibility rules when answering semantic questions.This allows consumers to ask semantic questions using the same semantic rules as the ones used in debugger’s Expression Evaluator, where accessibility rules do not matter. This API is an absolute necessity for 3rd parties (such as OzCode) who want to create debugger-related productivity tools on top of Roslyn.Added unit tests for C# and VB.NET to cover both regular and speculative analysis.fixes #378&lt;!---@huboard:{"order":514.0,"milestone_order":26,"custom_state":""}--&gt;</Description>
        <CreatedDate>18/01/2015</CreatedDate>
        <ClosedDate>19/02/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>26</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>26</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Concept-API</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>26</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>26</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>31160</IssueID>
        <PullRequestID>33648</PullRequestID>
        <Title>Revise NullableWalker to use a two-state solution</Title>
        <Description>The NullableWalker is revised so that the inferred state of an expression is either `NotNull` or `MaybeNull` (represented by the new type `NullableFlowState`).  There is no longer such as thing as an oblivious rvalue.  There are four kinds of lvalues:
- oblivious lvalues read as NotNull but null can be written to them
- annotated lvalues read as MaybeNull and null can be written to them
- unannotated lvalues read as NotNull and null may not be written to them
- unconstrained type parameters read as MaybeNull but null may not be written to them

In order to preserve the safety in the face of such unconstrained type parameters, we warn immediately when a null value of such a type is introduced.  This is a safety warning.  The contexts in which such a warning are given are
- `default` and `default(T)`
- `null` conversion to `T` (when `T` is known to be ref type)
- `e?.M()` when the return type is `T`
- dynamic conversion or cast to `T` when the dynamic might be null
- explicit conversion to `T`
- `e as T` when there is not an implicit conversion from the type of `e` to `T`
- a call to a method like `FirstOrDefault()` that is annotated with `[MaybeNull] (not yet implemented)

We remove the hidden diagnostics previously computed by the NullableWalker.

We add debugger display support for a number of types used by the NullableWalker.  The display for `NullableWalker` summarizes the computed nullability of variables in a nice compact form.

We remove support for definite assignment in the NullableWalker.  Some scenarios involving the use of not-definitely-assigned variables may cause cascaded diagnostics.  We might remove them in the future by initializing all vaiables to the `NotNull` state when they enter scope.

We overhaul and simplify the inplementation of conversions, the null-conditional operator, and result inference for lifted operators.

We simplify the Meet and Join operations so that they form a lattice on both the NullableAnnotation and NullableFlowState.

Catch variables are now initialized to a non-null state on entry to the catch block.

In unreachable code, every expression produces a non-null rvalue.  An erroneous expression produces a non-null rvalue (to suppress cascaded diagnostics).</Description>
        <CreatedDate>24/02/2019</CreatedDate>
        <ClosedDate>01/03/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>33648</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>31160</IssueID>
            <PullRequestID>33648</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>33648</PullRequestID>
            <IssueID>31160</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>33648</PullRequestID>
            <IssueID>31160</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>31145</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ensure test coverage of pattern-matching implementation</Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>30/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ensure that the unit and regression tests cover the code of the pattern-matching implementation.
</Description>
  </Issue>
  <Issue>
    <IssueID>31144</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>31144</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Throw MatchFailureException when match expression fails.</Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>01/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31144</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>31144</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If `MatchFailureException` doesn't exist on the framework, throw its base class, `InvalidOperationException`.
</Description>
  </Issue>
  <Issue>
    <IssueID>31139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>31139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No warnings for field initializer with implicit constructor</Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class A
{
    object x = F(null); // warning
    A() { }
    static object F(object o) =&gt; o;
}
class B
{
    object y = F(null); // no warning
    static object F(object o) =&gt; o;
}
`</Code>
    <Description>A warning is reported for `A.x` but no warning is reported for `B.y`.
``</Description>
  </Issue>
  <Issue>
    <IssueID>31136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>async completion. Perf. GetHighlightedList provides highlights for all items. Consider making this for visible items only.</Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>09/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>31135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>async completion. check if need to support the original completion code from HandleDeletionTrigger </Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The code under
           ``

is not available in the new completion. Need to check if there are scenarios we need to use this code.</Description>
  </Issue>
  <Issue>
    <IssueID>31131</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>async completion. re-consider changes TestNavigationBeforeCompletedComputation </Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>31131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>31130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need completion and indentation for `#nullable`</Title>
    <CreatedDate>13/11/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>31130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [x] If you type `#nullable` I would expect completion for "nullable" (as we do for `#region` as depicted below) and `enable`/`disable` 
- [x] After you type `#nullable ...` and hit return, I expect `#nullable ...` to indent to the margin. I expect the same would happen if you format the document. (I verified that is already the case)
- [x] Completion for `restore` after `#nullable`

![image](

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>31121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should nullability analysis skip bound nodes with errors?</Title>
    <CreatedDate>12/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>31121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>31121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void Yield_IEnumerableT_ErrorValue()
        {
            var source = @"
class C
{
    System.Collections.Generic.IEnumerable&lt;string&gt; M()
    {
        yield return bad;
    }
}";
            CreateCompilation(new[] { source }, options: WithNonNullTypesTrue()).VerifyDiagnostics(
                // (6,22): error CS0103: The name 'bad' does not exist in the current context
                //         yield return bad;
                Diagnostic(ErrorCode.ERR_NameNotInContext, "bad").WithArguments("bad").WithLocation(6, 22),
                // (6,22): warning CS8619: Nullability of reference types in value of type '?' doesn't match target type 'string'.
                //         yield return bad;
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInAssignment, "bad").WithArguments("?", "string").WithLocation(6, 22)
                );
        }
`</Code>
    <Description>This would avoid cascading diagnostics like:

``</Description>
  </Issue>
  <Issue>
    <IssueID>31120</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Split-string-literal doesn't work if 'indent mode' is set to 'none'.</Title>
    <CreatedDate>12/11/2018</CreatedDate>
    <ClosedDate>30/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If i have this mode set:



And i have this text:

![image](

Pressing enter in the middle of the string produces:

![image](

Instead of:

![image](

That setting should only affect indentation.  It shouldn't cause features to no longer work.</Description>
  </Issue>
  <Issue>
    <IssueID>31110</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>31110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>bad using statement and extern alias crashes Visual Studio</Title>
    <CreatedDate>11/11/2018</CreatedDate>
    <ClosedDate>14/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>31110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
extern alias Whatever;
using Whatever

namespace ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Whatever::System.Diagnostics.Debug.WriteLine("hi");
        }
    }
}



At the end of line 2, type an &amp;quot;=&amp;quot;. If Visual Studio is all caught up as far as background work, it will instantly and immediately close. 

A stack trace appears in the Event Log. It is attached. Here are the first few lines: 

System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at System.Linq.ImmutableArrayExtensions.First[T](ImmutableArray`1 immutableArray)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResultSymbol(LookupResult result, String simpleName, Int32 arity, SyntaxNode where, DiagnosticBag diagnostics, Boolean suppressUseSiteDiagnostics, Boolean&amp;amp; wasError, NamespaceOrTypeSymbol qualifierOpt, LookupOptions options)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceAliasSymbol(IdentifierNameSyntax node, DiagnosticBag diagnostics)
`</Code>
    <Description>Create a new Console app (.NET Framework 4.7.2) and enter the following text in Program.cs: 

``

_This issue has been moved from 
VSTS ticketId: 722947_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>31108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[IDE0040 : Explicit visibility] CodeFix breaks the code</Title>
    <CreatedDate>11/11/2018</CreatedDate>
    <ClosedDate>11/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>31108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In VS 15.8.9 

Hi,

While looking at the possiblities the new EditorConfig and Code-Styles add to consistency, I think I stumble upon a bug with the rule about explicit visibility.

The rule in question (IDE0040) can be set to warn about leaving implicit visibility in the code and give the possibliity to fix it automaticaly.

But the codefix on external declaration, while adding the visibility, deletes the &amp;quot;extern&amp;quot; declaration, leaving the file unbuildable.

So the codefix actually broke the code :(

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>31107</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggest using ref conditional expression</Title>
    <CreatedDate>11/11/2018</CreatedDate>
    <ClosedDate>11/11/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
if (condition)
{
    a = Foo();
}
else
{
    b = Foo();
}

to
c#
(condition ? ref a : ref b) = Foo();
`</Code>
    <Description>I would like a code style option to suggest converting
``
(where possible)

In my opinion it would fit well alongside the existing two options for preferring a conditional expression:
![image](</Description>
  </Issue>
  <Issue>
    <IssueID>31104</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>31104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.ArgumentOutOfRangeException: Index was out of range</Title>
    <CreatedDate>11/11/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>31104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>31104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In 16.0.Preview1 

The app just closes unexpectendly when writing code.
What do I need to share to diagnose the problem?

_This issue has been moved from 

``</Description>
  </Issue>
  <Issue>
    <IssueID>31103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>31103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Remove unnecessary parentheses" removes necessary parens in assignment</Title>
    <CreatedDate>10/11/2018</CreatedDate>
    <ClosedDate>11/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>31103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>31103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    void M(bool x, int a, int b)
    {
        (x ? ref a : ref b) = 1;
    }
}


The parentheses are marked as unnecessary but removing them will break the syntax.
![image](https://user-images.githubusercontent.com/11444821/48305698-c66c2580-e52f-11e8-9209-5c8facb056f2.png)

After removing parentheses, the result is equivalent to this (which doesn't compile):
c#
        x ? ref a : ref (b = 1);
`</Code>
    <Description>Repro:
``</Description>
  </Issue>
  <Issue>
    <IssueID>31102</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add Editor Guideline on column</Title>
    <CreatedDate>10/11/2018</CreatedDate>
    <ClosedDate>11/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>31102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Customer Request from [twitter]( 

In referring to VSCode editor.ruler setting:
&gt; Can you get ruler lines natively in @VisualStudio as well? That would be awesome.

&gt; ...a line after 80 or 100 characters. I think in @Code they’re in settings as editor.Rulers. I’ve seen an extension that does it but nothing that’s as simple to set as in @Code.

Paul Harrington has a VS extension that does this: [Editor Guidelines](
![image](

VSCode Example:
![image](

VSCode Settings:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30568</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AsyncCompletion VSSDK should provide a subject buffer in all calls not just for commit.</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>06/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, a projections buffer is provided and this could cause issues.</Description>
  </Issue>
  <Issue>
    <IssueID>30566</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>30566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>30566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler exits with error code compiling Async Stream project</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>02/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>30566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>log
c:\users\darenmay\appdata\local\microsoft\visualstudio\15.0_641a84e6roslyndev\extensions\microsoft\roslyn compilers\42.42.42.4242424\Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.exe" exited with code -2146232797.
`</Code>
    <Description>**Version Used**: 
Branch Dev16.0.x

**Steps to Reproduce**:

See attached solution.

1.  Open attached solution.
2.  Compile.
3.  Compile fails - check output window, etc.

**Expected Behavior**:
Successfully compile, or report the issue with the code.

**Actual Behavior**:
Compiler fails with an error code.

``

@jcouv This is the issue we discussed.

[AsyncStreamRepro.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>30565</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider improving error recovery on parsing `foreach await` and `foreach using`</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>06/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>30565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We can probably look for `await` after `using` or `foreach` and parse it as a bad token. That way we can recover on the open paren. That would be nicer than what we do today.

It may also be good to add a fixer.</Description>
  </Issue>
  <Issue>
    <IssueID>30563</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>30563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should not report CS8602 for extension method delegate with nullable receiver</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>09/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
[module: System.Runtime.CompilerServices.NonNullTypes]

delegate void D();

class C
{
    void F1() { }
    static void F(C? x, C? y)
    {
        D d;
        d = x.F1; // warning
        d = y.F2; // ok
    }
}

static class E
{
    internal static void F2(this C? c) { }
}
`</Code>
    <Description>Should report CS8602 warning for the instance method but not the extension method:
``</Description>
  </Issue>
  <Issue>
    <IssueID>30562</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should not warn dereferencing collection after foreach</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>08/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>30562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
[module: System.Runtime.CompilerServices.NonNullTypes]
class Enumerable
{
    public System.Collections.IEnumerator GetEnumerator() =&gt; throw null;
}
class Program
{
    static void F1(object[]? x)
    {
        foreach (var i in x) { } // warning: possibly null
        foreach (var i in x) { } // ok
    }
    static void F2(Enumerable? y)
    {
        foreach (var i in y) { } // warning: possibly null
        foreach (var i in y) { } // ok
    }
}
`</Code>
    <Description>The second `foreach` in each case should not produce a warning since the collection cannot be null after the first dereference.
``</Description>
  </Issue>
  <Issue>
    <IssueID>30561</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>30561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Variable should be nullable outside try block if assigned nullable value inside try block</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
[System.Runtime.CompilerServices.NonNullTypes]
class C
{
    static void MayThrow()
    {
        throw null;
    }
    static int F()
    {
        string? s = "";
        try
        {
            s = null;
            MayThrow();
            s = "";
        }
        catch (System.Exception)
        {
        }
        return s.Length; // warning: possibly null
    }
}
`</Code>
    <Description>`s.Length` should result in a warning:
``
Reported by @gafter.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30561</IssueID>
        <PullRequestID>31082</PullRequestID>
        <Title>Track nullable state in try statements</Title>
        <Description>Fixes #30561</Description>
        <CreatedDate>09/11/2018</CreatedDate>
        <ClosedDate>13/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30561</IssueID>
            <PullRequestID>31082</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30561</IssueID>
            <PullRequestID>31082</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>30561</IssueID>
            <PullRequestID>31082</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30561</IssueID>
            <PullRequestID>31082</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>31082</PullRequestID>
            <IssueID>30561</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>31082</PullRequestID>
            <IssueID>30561</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30558</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inline temporary variable doesn't inline and creates invalid code instead</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>15/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>30558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static IObservable&lt;object&gt; Create()
{
    object build(string a, double b) =&gt; null;

    IObservable&lt;string&gt; first = null;
    IObservable&lt;double&gt; second = null;

    var observable = first.CombineLatest(second, build); // run here
    return observable;
}
`</Code>
    <Description>**Version Used**: 
15.8.7

**Steps to Reproduce**:
``
Run the "Inline temporary variable" code fix on the marked line

**Expected Behavior**:
The return statement should just be moved and `observable` should be removed.

**Actual Behavior**:
The code fix generates invalid code:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Change feature name in language version error</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>19/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Current:
`error CS8107: Feature 'static null checking' is not available in C# 7.0. Please use language version 8.0 or greater.`

Proposed:
`error CS8107: Feature 'nullable reference types' is not available …` </Description>
  </Issue>
  <Issue>
    <IssueID>30553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>make extract method not to show info bar if it is called from code refactoring not from command handler</Title>
    <CreatedDate>17/10/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>30553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>30553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>currently extract method gets called automatically even though user didn't ask for it when there is a selection in the editor through code refactoring.

we should stop showing info bar when it is called from refactoring but only show it when it is called explicitly from command handler reducing noise.

</Description>
  </Issue>
  <Issue>
    <IssueID>30548</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SemanticModel.AnalyzeDataFlow returns invalid states</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp39
{
    class Program
    {
        void Method(out object test)
        {
            test = null;

            var a = test != null;
            [|if (a)
            {
                return;
            }

            if (A == a)
            {
                test = new object();
            }|]
        }
    }
}
`</Code>
    <Description>``

for the span [| - |], SemanticModel.AnalyzeDataFlow returns the symbol "test"
in DataFlowsIn, but NOT in ReadInside which shouldn't happen.

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30548</IssueID>
        <PullRequestID>30550</PullRequestID>
        <Title>add workaround on extract method on https://github.com/dotnet/roslyn/…</Title>
        <Description>…issues/30548</Description>
        <CreatedDate>16/10/2018</CreatedDate>
        <ClosedDate>18/10/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30548</IssueID>
            <PullRequestID>30550</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30547</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>First run experience tooltip for screwdrivers says "Light Bulb"</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>17/10/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

16.0stg

**Steps to Reproduce**:

1. Open Visual Studio for the first time
2. Have some code that shows a screwdriver
3. Check the tooltip

**Expected Behavior**:

Tooltip should refer to the screwdriver as a screwdriver.

**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30544</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intermittent integration test failures: BasicNavigationBar.CodeSpit and BasicNavigationBar.VerifyNavBar</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.CodeSpit [STARTING]
      System.NullReferenceException : Object reference not set to an instance of an object.
      Stack Trace:
        
        Server stack trace: 
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.ReflectionExtensions.ObjectExtensions.GetFieldValue(Object instance, String fieldName)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.ReflectionExtensions.ObjectExtensions.GetFieldValue[FieldType](Object instance, String fieldName)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetNavigationBarComboBoxes(IWpfTextView textView)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.&lt;&gt;c__DisplayClass54_0.&lt;GetSelectedNavBarItem&gt;b__0(IWpfTextView v)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass9_0`1.&lt;ExecuteOnActiveView&gt;b__0()
           at System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore()
           at System.Windows.Threading.DispatcherOperation.InvokeImpl()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke[TResult](Func`1 callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke[TResult](Func`1 callback, DispatcherPriority priority)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread[T](Func`1 action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView[T](Func`2 action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetSelectedNavBarItem(Int32 comboBoxIndex)
           at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
           at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)
        
        Exception rethrown at [0]: 
           at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
           at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetSelectedNavBarItem(Int32 comboBoxIndex)
        /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Editor_OutOfProc.cs(279,0): at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Editor_OutOfProc.GetTypeNavBarSelection()
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicNavigationBar.cs(104,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyLeftSelected(String expected)
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicNavigationBar.cs(80,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.CodeSpit()
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.CodeSpit [FINISHED] Time: 0.572537s



    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyNavBar [STARTING]
      System.NullReferenceException : Object reference not set to an instance of an object.
      Stack Trace:
        
        Server stack trace: 
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.ReflectionExtensions.ObjectExtensions.GetFieldValue(Object instance, String fieldName)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.ReflectionExtensions.ObjectExtensions.GetFieldValue[FieldType](Object instance, String fieldName)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetNavigationBarComboBoxes(IWpfTextView textView)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.&lt;&gt;c__DisplayClass54_0.&lt;GetSelectedNavBarItem&gt;b__0(IWpfTextView v)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass9_0`1.&lt;ExecuteOnActiveView&gt;b__0()
           at System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore()
           at System.Windows.Threading.DispatcherOperation.InvokeImpl()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke[TResult](Func`1 callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke[TResult](Func`1 callback, DispatcherPriority priority)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread[T](Func`1 action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView[T](Func`2 action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetSelectedNavBarItem(Int32 comboBoxIndex)
           at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
           at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)
        
        Exception rethrown at [0]: 
           at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
           at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Editor_InProc.GetSelectedNavBarItem(Int32 comboBoxIndex)
        /_/src/VisualStudio/IntegrationTest/TestUtilities/OutOfProcess/Editor_OutOfProc.cs(279,0): at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Editor_OutOfProc.GetTypeNavBarSelection()
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicNavigationBar.cs(104,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyLeftSelected(String expected)
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicNavigationBar.cs(40,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyNavBar()
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicNavigationBar.VerifyNavBar [FINISHED] Time: 0.4626095s
`</Code>
    <Description>See 

``</Description>
  </Issue>
  <Issue>
    <IssueID>30543</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>30543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Delete dead comment in MethodTypeInference.cs</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
            // If the argument is a TYPEORNAMESPACEERROR and the pSource is an
            // error type, then we want to set it to the generic error type 
            // that has no name text. This is because of the following scenario:
            //
            // void M&lt;T&gt;(T t) { }
            // void Goo()
            // {
            //     UnknownType t;
            //     M(t);
            //     M(undefinedVariable);
            // }
            //
            // In the first call to M, we'll have an EXPRLOCAL with an error type,
            // which is correct - we want the parameter help to display that we've
            // got an inferred type of UnknownType, which is an error type since 
            // its undefined.
            //
            // However, for the M in the second call, we DON'T want to display parameter
            // help that gives undefinedVariable as the type parameter for T, because
            // there is no parameter of that name, let alone that type. This appears
            // as an EXPRTYPEORNAMESPACEERROR with an ErrorType. We create a new error sym
            // without the type name.

            // UNDONE: if (pExpr-&gt;isTYPEORNAMESPACEERROR() &amp;&amp; pSource-&gt;IsErrorType())
            // UNDONE:{
            // UNDONE:    pSource = GetTypeManager().GetErrorSym();
            // UNDONE:}
`</Code>
    <Description>The following comment in `MethodTypeInference.cs` is obsolete - it doesn't refer to anything the code does now or ever will do in the future.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>30542</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VSSDK better name for IFeatureServiceFactory</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>25/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>30542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>30541</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Publish FormattingAnalyzer to MyGet</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>05/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>30541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We need to ensure this package gets published to MyGet as part of the signed build process.

&gt; This analyzer will be published as a nuget package?
&gt; If so when?

_Originally posted by @MarcoRossignoli in </Description>
  </Issue>
  <Issue>
    <IssueID>30540</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>30540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make nullable common type rules associative</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>29/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  for details.

This change should be done after #29727 has been merged to minimize churn and because that PR implements the current LDM decision. It is a single line implementation change (plus probably lots of test changes). It would probably be worth adding a test corresponding to the test program in  .
</Description>
  </Issue>
  <Issue>
    <IssueID>30538</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method C7 crash</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels />
    <Description>Was editing and got:

``

This was in:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30535</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>stackalloc initializers can have incorrect behavior when a large number of the outputs are explicitly zeroed</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels />
    <Code>csharp
public unsafe class TestClass
{
    public static void Test4(byte value)
    {
        var pResult = stackalloc byte[4]
        {
            value,
            0,
            0,
            0,
        };
    }
}


It produces IL similar to:
il
.method public hidebysig static 
    void Test4 (
        uint8 'value'
    ) cil managed 
{
    // Method begins at RVA 0x2050
    // Code size 12 (0xc)
    .maxstack 4
    .locals init (
        [0] uint8*
    )

    IL_0000: nop
    IL_0001: ldc.i4.4
    IL_0002: conv.u
    IL_0003: localloc
    IL_0005: dup
    IL_0006: ldc.i4.0
    IL_0007: ldc.i4.4
    IL_0008: initblk
    IL_000a: stloc.0
    IL_000b: ret
}
`</Code>
    <Description>### Summary
A quick view of the issue can be seen by looking at: 

### Repro

Compile and look at the IL for the following code:

``

### Expected Behavior

The generated IL should end up doing `pResult[0] = value`

### Actual Behavior

The generated IL only zeroes out `pResult` and never consumes arg 0</Description>
  </Issue>
  <Issue>
    <IssueID>30534</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Represent unknown nullability from initial binding as "not computed"</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>18/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30534</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30534</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>30534</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>30530</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No Option to Disable C# Code Style</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>26/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>30530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>30530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In text editor &amp;gt; c#-&amp;gt; code style there is no option in severity column to disable specific check. Minimum severity is &amp;quot;refactoring only&amp;quot;. In my opinion, code are always recommendations to developers style checks IDE from authors and IDE MUST have to option to disable any of this check._This issue has been moved from VSTS ticketId: 694566__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>30529</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue with object initializers and csharp_new_line_before_open_brace in editorconfig</Title>
    <CreatedDate>16/10/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi!I'm using the editorconfig file to fine-tune the coding style settings across multiple visual studio instances. Specifically, I want to configure the placement of the open brace. The csharp_new_line_before_open_brace setting gives me some headache:When I setcsharp_new_line_before_open_brace = allI get new lines for Object Initializers like so:            var foo = new Foo            {                Name = &amp;quot;Hello World&amp;quot;,                Id = 0,            };When I explicitly specify the individual settings, (which I want, because I'd like to disable specific things like the new line for control statements) like so:csharp_new_line_before_open_brace = accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection_array_initializers, properties, typesthe code formatter produces this (the opening brace is _not_ (!) placed on new line):            var foo = new Foo {                Name = &amp;quot;Hello World&amp;quot;,                Id = 0,            };Note, I enabled all available values according to So, AFAICT this should be the same as &amp;quot;all&amp;quot;.Am I missing something, or is this an issue within VS?Thanks, david_This issue has been moved from VSTS ticketId: 699427__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>30523</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow initializing property from constructors</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>30523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public abstract class Foo
{
    public int SomePublicProperty { get; }

    protected Foo(int somePublicProperty)
    {
        SomePublicProperty = somePublicProperty;

        // Some manually-written constructor logic
    }
}
`</Code>
    <Description>Say you have this class:

``

And it's time to add a protected property. The intuitive thing to do would be to write the property and Ctrl+. to initialize it from the constructor, but Roslyn doesn't seem to have a refactoring for this. You either have to delete the existing constructor and generate from scratch, losing custom logic and exception messages, or you have to start by finding and navigating to an existing constructor and writing the parameter and generating a property. Then you have to navigate to the generated property and fix it by making it `protected` among other customizations you may have had in mind from the beginning, such as XML documentation or attributes or setter existence and visibility.

I would like to be allowed to start by writing out the higher-information property declaration and generating the constructor parameter in the correct position based on that instead of vice versa.

If there are multiple constructors, ones that assign other properties or fields should also assign the new one. Constructors that delegate field/property initialization to another constructor should simply pass the parameter value along to the chained `this` call.</Description>
  </Issue>
  <Issue>
    <IssueID>30521</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>30521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash when compiling switch (int? ?? await Task&lt;int&gt;)</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>21/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
    //fails with int, does not fail with double
    using System;
    using System.Threading.Tasks;
    public class C {
        
        public async Task&lt;int&gt; Get() {
            return 1;
        }
        
        public async Task FAILS(int? val) {
                switch (val ?? await Get())
                { 
                    case 1:
                    default:
                        throw new NotImplementedException("This crashes csc.exe");
                }
            }
    
    }


you can also try this online: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+B6bAzCASwBsoACAd0JgAszCA7GAWACg2ABABjI4EYA3Jx78ArENYcAzLwBMZAMJkA3mzLqyajdN4AOXgDYAPIxgA+MgHE4MABQBKFVo3aA7GUHOyAXy9edHPocBmQAYgCCAJIAMgDKtqYA/GQAbhDEjqqsLjkaUFQwAMZ0tmnEZInJHACcVjYO9l656sqa2c0dhdBwHiBNHRoocAQArsQwfe0DA7QIAPYUZAxwiwByczCRYAAOxHBgcExwKACiAB6FcNswhHMMtgBEACo0hOSFCNA0cO9QhQB0cDOcAe9gk03UvimOShbG8QA==

this is the double version which does not crash: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+B6bKD2cUABAHb4zEBmEAlgDbEDutMAFsQQK7D1wCEAWABQIgAIAGYmICMAbnFTZAVgXCxAZmkAmYgGFiAbxHFTxE2c3SAHNIBsAHm684APmIBxODAAUASiMLM0sAdmIZADoJNWCAXyDzYWCrMVsxO2IAMQBBAEkAGQBlH2c+AH5iADcIegDjJODG0ygWGABjDh9qxjKKsQBOT29/PwSm00NE8eniNug4cJAxmdMUOBouehglhpXp9gR8JjI4Y4A5ClywAAc+MDhSeBQAUQAPNrhrmFp8Uh8AIgAKmxaCQ2ghoGwiLMoG0InBXnB/n4Ynt4rtGuiRLEgA===

**Expected Behavior**:
No crash, compiles the code.

**Actual Behavior**:
 none
System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary. at System.Collections.Generic.Dictionary`2.get_Item(TKey key) at Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.RecordVarWrite(LocalSymbol local) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\CodeGen\Optimizer.cs:line 1859 
...
`</Code>
    <Description>Compiler crashes (csc.exe invokes FailFast) when compiling the below.

What's very strange, this does not happen if int is replaced with double (and return 1.0; in Get method below). Does not happen with double. Happens with other types (tried with int-based enum)

**Version Used**: 
master Oct 13 2018. Observed this also in stock VS 2017 where it crashes csc.exe.

**Steps to Reproduce**:

1. compile the below
``

Crashes csc.exe. 
</Description>
  </Issue>
  <Issue>
    <IssueID>30520</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature Request] Quick Fix gets confused by property setting  {} blocks.</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>26/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>30520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>(From VSTS  705108)

Steps to reproduce:

1. New Xamarin.iOS Project
2. Open ViewController.cs
3. Paste these lines after base.ViewDidLoad 


            UIButton button = new UIButton (new CoreGraphics.CGRect (0, 0, 0, 0))
            {
                Frame = new CoreGraphics.CGRect (1, 1, 1, 1)
            }
            View.AddSubview (button);

4. Note the missing ; after the property setting block.
5. Right click the red error on the last } and note both quick fixes are assuming {} are a block and not property setting (iterate using foreach or put inside using.

In this case, and in this case:


            button.Frame = new CoreGraphics.CGRect ()

We should offer "insert ;" option.

---- the user requests an insert ; code fix provider.</Description>
  </Issue>
  <Issue>
    <IssueID>30518</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Applying suggested changes "IDE0018 Variable declaration can be inlined" generates non-compilable code</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>REPRODUCTION STEPS

 - latest Visual Studio 2017 version
 - create new Visual Studio Project of type &amp;quot;Console App (.NET Framework)&amp;quot; (.NET Framework 4.7)
 - paste the following code into the generated Main method body (Program.cs attached)

            var actionArray = new[] 
            {
                new Action(() =&gt;
                {
                    var someValue = "2";
                    int valueAsInt; // suggested changes in this line
                    if (int.TryParse(someValue, out valueAsInt))
                    {
                        Console.WriteLine(valueAsInt);
                    }
                })
            };

 - apply suggested changes &amp;quot;IDE0018 Variable declaration can be inlined&amp;quot; in the line &amp;quot;int valueAsInt;&amp;quot;
 - the line below is changed to &amp;quot;if (int.TryParse(someValue, out intvalueAsInt))&amp;quot; which will produce a build error
 - the line should be &amp;quot;if (int.TryParse(someValue, out int valueAsInt))&amp;quot;

_This issue has been moved from 
VSTS ticketId: 690311_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_

Jinu Joseph [MSFT] solved on 10/14/2018, 05:04 PM (8 hours ago), 0 votes: &lt;p&gt;Thank you for your feedback! This issue appears to be identical to  &lt;a target='_blank' href="  We recommend that you vote on and follow the earlier reported issue for updates and fix notifications.&lt;/p&gt;

</Description>
  </Issue>
  <Issue>
    <IssueID>30516</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code fix for CS0822 (Implicitly-typed variables cannot be constant)</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30516</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30516</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    void M()
    {
        const var v = ""; // CS0822: Implicitly-typed variables cannot be constant
    }
}

to
c#
class C
{
    void M()
    {
        const string v = "";
    }
}
`</Code>
    <Description>There should be a code fix to use explicit type when this compiler error occurs:
``</Description>
  </Issue>
  <Issue>
    <IssueID>30515</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>The execution Restore.cmd has an exception</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used*Roslyn15.8 VS2017*: 

**Steps to Reproduce**:

1. The following figure:MSBUILD : error MSB1008: Only one project can be specified.
2. 
![2](

3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>30514</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Interface is not an option on a class that extends an abstract / generic class</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>30514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>30514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm not sure the exact cause, but I have the following class:public abstract class UsageHelper&amp;lt;T&amp;gt; where T : ISharedContentUsage {}And one that implements it:public class AttachmentSectionRuleUsageHelper : UsageHelper&amp;lt;AttachmentSectionRuleUsage&amp;gt; {}And when I open Quick Actions and Refactoring, &amp;quot;Extract interface...&amp;quot; is not an option._This issue has been moved from VSTS ticketId: 695628__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>30513</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Document format problem with operators ++/--</Title>
    <CreatedDate>15/10/2018</CreatedDate>
    <ClosedDate>15/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>30513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Code to format: var x = val1+++++val2;Corect result: var x = val1++ + ++val2;VS17 result: var x = val1++++ + val2;Also if we give code: var x = val1+++val2;VS17 format it as var x = val1++ + val2;But there is another correct formating:var x = val1 + ++val2;Here we have ambiguity between these two formatings, as both ar valid. But the final code produces different results, so i think that VS must inform the user._This issue has been moved from VSTS ticketId: 701563__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>30508</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Repeating error message CS1624 for each surrounding block </Title>
    <CreatedDate>14/10/2018</CreatedDate>
    <ClosedDate>19/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>30508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>30508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# 7.3

**Steps to Reproduce**:
Minimalistic example:
``. This happens both in the error list and in the error popup. In the example above, you will get 4x a CS1624 error. The blocks here can be any kind of block: for, foreach, while, etc. And it happens with any non-iterator return type.





</Description>
  </Issue>
  <Issue>
    <IssueID>30505</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect determination of an unused using directive</Title>
    <CreatedDate>14/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>30505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,

In the **Visual Stuio 15.8.1** (I didn't find that the issue below was fixed at the latest versions), If using directive is used only in the xml doc comments visual studio considers that it's unused and can be fade out. So after formatting a document/selection it will remove this using(fade out is enable) and it will lost a symbol of this usages in the xml doc comment.

Before formatting:
![fadeout](
And after:
![fadeout2](

If this issue should be moved to the [Visual Studio Community]( instead of Roslyn repository, let me know about it.
</Description>
  </Issue>
  <Issue>
    <IssueID>30503</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Interpret string interpolation as constant expression if it can be defined during compile time</Title>
    <CreatedDate>14/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels />
    <Code> csharp
[Display(Name = $"My constant test {12345}")] // using a numberic static value
public string MyProperty { get; set; }

 csharp
public const int MyConstValue = 12345;

[Display(Name = $"My constant test {MyConstValue}")] // using a const value
public string MyProperty { get; set; }

 csharp
public class MyClass
{
    [Display(Name = $"{nameof(MyClass)}_{nameof(MyProperty)}")] // using the 'nameof(..)' function
    public string MyProperty { get; set; }
}
`</Code>
    <Description>**Version Used**: 2.9.0.63208 / VS2017 15.8.6

When I use a [string interpolation]( for a string field in a attribute definition, I get the following error:
`An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type`

But when I use only _interpolated expressions_ which are constant (can be interpreted during compile time), I think the compiler should be able to handle this.

### Samples:
``

### Other sample
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30501</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ade m´
</Title>
    <CreatedDate>14/10/2018</CreatedDate>
    <ClosedDate>14/10/2018</ClosedDate>
    <IssueLabels />
  </Issue>
  <Issue>
    <IssueID>30483</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer creates error in code for fixed array</Title>
    <CreatedDate>12/10/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>30483</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
private unsafe struct Byte20
    {  // Example bad formatting
    private fixed byte _bytes[20]; // Note fixed modifier
}


**Expected Behavior**:
The document is formatted.
csharp
private unsafe struct Byte20
{  // Fixed bad formatting
    private fixed byte _bytes[20];
}


**Actual Behavior**:
The `fixed` modifier is removed and the `readonly` modifier is added, making it invalid.
csharp
private unsafe struct Byte20
{  // Fixed bad formatting
    private readonly byte _bytes[20]; // Note readonly
}

`Compiler Error CS0650: Bad array declarator`
`Compiler Error CS0270: Array size cannot be specified in a variable declaration`

**Workaround**
Though it's not practical - formatting a document is supposed to be innocuous.
csharp
private unsafe struct Byte20
{
#pragma warning disable IDE0044 // Add readonly modifier
    private fixed byte _bytes[20];
#pragma warning restore IDE0044 // Add readonly modifier
}


**Proposed Fix**
Analyzer should detect if a field is a fixed array, and not action it in such a manner.

**Other info**
xml
&lt;PackageReference Include="Microsoft.Net.Compilers" Version="2.9.0" PrivateAssets="All" /&gt;
&lt;PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.6.2" PrivateAssets="All" /&gt;
`</Code>
    <Description>**V2017 v 15.8.7**: 

When formatting a document, one of the analyzers (and/or `.editorconfig`) changes the code so as to make it invalid.

I am using a nested class for memory marshalling. It has a `fixed` array declared in it. 

**Steps to Reproduce**:

1. Paste the following code anywhere, even as a nested class
2. Format the document (Ctrl-E, Ctrl-D)
``</Description>
  </Issue>
  <Issue>
    <IssueID>30480</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>30480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No nullability warning for type inference with lambda argument</Title>
    <CreatedDate>12/10/2018</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Runtime.CompilerServices;
[module: NonNullTypes]
interface I&lt;T&gt; { }
class C
{
    static void F&lt;T&gt;(Func&lt;bool, T&gt; f)
    {
    }
    static void G(I&lt;object&gt; x, I&lt;object?&gt; y)
    {
        F(b =&gt; { if (b) return x; else return y; }); // warning: cannot infer nullability
    }
}
`</Code>
    <Description>Method type inference should report a warning that nullability could not be inferred:
``</Description>
  </Issue>
  <Issue>
    <IssueID>30475</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider reordering Extract-Method and Introduce-Variable</Title>
    <CreatedDate>12/10/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>30475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now, when you select some code, you will get up to 4 actions to 'introduce variable', and up to one action to 'extract method'.  i.e.:

![image](

If you want to actually extract a method, you then need to skip over up to 4 other actions to make the selection.

I think it would make sense to reorder these.  First, i personally believe extract-method is used more than introduce-variable.  Second, it just makes selection more pleasant since, at worse, you only need to skip over one action you don't want, instead of up to four.

--

Note: i think this decision should also be telemetry driven.  If Introduce-Variable is more heavily used thatn Extract-Method, then we can leave this alone.  However, if it's not (as my hunch indicates), then flipping this makes a lot of sense.

Previously Kasey could figure this out.  But i'm not sure who is now reviewing this data.  </Description>
  </Issue>
  <Issue>
    <IssueID>30472</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove use of workspaces layer by Formatting Analyzer during compilation</Title>
    <CreatedDate>12/10/2018</CreatedDate>
    <ClosedDate>27/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>30472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The code style layer should not embed workspaces assemblies in the NuGet package or load them during compilation scenarios.

&gt; This feels fairly hacky. We should be tracking the removal of this with a bug link.
&gt; 
&gt; ---
&gt; In reply to: [222536172]( [](ancestors = 222536172)
&gt; 

_Originally posted by @jaredpar in </Description>
  </Issue>
  <Issue>
    <IssueID>30459</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AnalyzerEngine reporting OperationCanceledExceptions.</Title>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>30459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File
Error	AD0001	Analyzer 'Microsoft.VisualStudio.Threading.Analyzers.VSTHRD001UseSwitchToMainThreadAsyncAnalyzer' threw an exception of type 'System.Exception' with message 'Analyzer failure while processing syntax at C:\GitHub\roslyn\src\EditorFeatures\CSharp\Wrapping\CSharpParameterWrappingCodeRefactoringProvider.cs(55,31): System.OperationCanceledException The operation was canceled.. Syntax: token.Parent.GetAncestors()
                                          .FirstOrDefault(n =&gt; generator.GetParameterListNode(n) != null)'.	Microsoft.CodeAnalysis.CSharp.EditorFeatures	
`</Code>
    <Description>Not sure if this has already been reported/fixed.  But i'm getting these all over the place:

``

Are we just catching all exeptions, and not ignoring System.OperationCanceledException?</Description>
  </Issue>
  <Issue>
    <IssueID>30453</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Handle null descriptor in DiagnosticAnalyzer.SupportedDiagnostics</Title>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>30453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.ComputeDescriptors(DiagnosticAnalyzer analyzer, AnalyzerExecutor analyzerExecutor)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.GetOrComputeDescriptors(DiagnosticAnalyzer analyzer, AnalyzerExecutor analyzerExecutor)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.GetSupportedDiagnosticDescriptors(DiagnosticAnalyzer analyzer, AnalyzerExecutor analyzerExecutor)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, Func`2 isCompilerAnalyzer, AnalyzerExecutor analyzerExecutor)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, AnalyzerManager analyzerManager, AnalyzerExecutor analyzerExecutor)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;GetAnalyzerActionsAsync&gt;d__105.MoveNext()
`</Code>
    <Description>Likely cause of intermittent FailFast in integration tests: 

``</Description>
  </Issue>
  <Issue>
    <IssueID>30452</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Allow internal interface members</Title>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>30452</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public interface IThreadPoolWorkItem
{
    void Execute();
}

The problem is that we want a type to implement `IThreadPoolWorkItem.Execute` (e.g. `System.Threading.Tasks.Task`), but prevent code outside corefx from calling directly the `Execute` method because it would yield undefined behavior.

# Proposal

Allow the `internal` keyword on interface members. Internal members can be implemented but can't be used outside of the assembly where the interface is defined.

c#
public interface IFoo
{
    internal void Bar();
}

public class Foo : IFoo
{
    // An internal interface member can only be explicitly implemented
    void IFoo.Bar()
    {
    }
}

Foo o = new Foo();

// Only allowed if IFoo is declared in the current assembly
o.Bar();
`</Code>
    <Description># Context
When using interfaces, you may want to allow the implementation of an interface publicly but restrict the usage of some members to the assembly that defined the interface.

See the discussion in this issue about IThreadPoolWorkItem:


``

cc @stephentoub </Description>
  </Issue>
  <Issue>
    <IssueID>30450</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0007 conversion method detection heuristic does not take generics into account</Title>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>11/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>30450</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = false:warning

2. Write a statement that declares and initializes a variable with a LINQ expression ending in `ToList()` e.g.:
csharp
public static bool Test(Dictionary&lt;string, int&gt; items)
{
    List&lt;KeyValuePair&lt;string, int&gt;&gt; results = items.Where(x =&gt; x.Key != "foo").ToList();

3. Give the analyzers time to kick in, and it will recommend that you use `var` with an IDE0007 

**Expected Behavior**:
This should not suggest `var`, because our `.editorconfig` settings say only to use `var` when the type is already apparent from the expression. It is not.

**Actual Behavior**:
It recommend `var`.


The problem here is that `TypeStyleHelper.IsPossibleConversionMethod` contains this code:

csharp
return methodSymbol.Name.Equals("To" + returnTypeName, StringComparison.Ordinal);
`</Code>
    <Description>**Version Used**: 
Version 15.8.6

**Steps to Reproduce**:

1. Choose the following settings in an `.editorconfig`:
``

and by the time this runs, `returnTypeName` seems to be the simplified type name, even if the actual type is generic. So in this case, the type is `List&lt;KeyValuePair&lt;string, int&gt;&gt;`, but `returnTypeName` has simplified this to just `List`. So this rule sees the `ToList` method call and decides that the type name is apparent. In fact, just part of the type name is apparent.

This is unhelpful because the whole reason we use the editor config settings shown above is to facilitate PR-based code reviews, in which we need to be able to work out what code is doing by looking at it. We don't want to be forced to perform type inference in our heads, which is why we prefer not to use `var` in these scenarios.

While it's true that the use of `ToList` means it's apparent that there's going to be a `List&lt;something&gt;` there, the `something` is *not* apparent, and that's the bit of type inference we don't want to be forced to do in our heads.

Ideally, this whole mechanism would take generics into account properly. E.g., if the expression ended with `ToList&lt;Foo&gt;()`, then I'd be perfectly happy for it to suggest `var` instead of `List&lt;Foo&gt;`. (And by the same token, code such as `IBar bar = serviceProvider.GetRequired&lt;IBar&gt;();` should also get it to recommend `var`.) But in places where the generic type argument is implied, it should be treated as not being apparent.</Description>
  </Issue>
  <Issue>
    <IssueID>30449</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>DiagnosticIncrementalAnalyzer allocates large amounts of memory just finding/figuring out analyzers</Title>
    <CreatedDate>11/10/2018</CreatedDate>
    <ClosedDate>25/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>30449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>30449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the SDK version of   the following is responsible for ~12% of the trace (330 MB). GC is at 18.9% of the total CPU.

![image](

Digging in - there seems to be lots of overhead in just getting figuring out what analyzers to run, for example, there's 40 MB in just creating type names:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30114</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>30114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add refactorings to split and merge consecutive if statements</Title>
    <CreatedDate>24/09/2018</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
if (a) return;
if (b) return;


Refactoring:

c#
if (a || b) return;
`</Code>
    <Description>Very similar to #29347, but the `||` version:

``

And vice versa. I probably use this during refactoring the same amount as #29347.</Description>
  </Issue>
  <Issue>
    <IssueID>30109</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>30109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MoveNextAsync should guard against out-of-order invocation</Title>
    <CreatedDate>23/09/2018</CreatedDate>
    <ClosedDate>21/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>30109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If a promise is already pending, the caller of the state machine should not be calling `MoveNextAsync()`.</Description>
  </Issue>
  <Issue>
    <IssueID>30108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0032 code fix breaks code when writing to the field in lambda in constructor</Title>
    <CreatedDate>23/09/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

class Test
{
    int foo; // IDE0032 "Use auto property" is suggested here
    int Foo =&gt; this.foo;

    Test()
    {
        Action x = () =&gt;
        {
            this.foo = 1;
        };
    }

    static void Main() { }
}

4. Apply IDE0032 code fix

**Expected Behavior**:
The analyzer doesn't break the code.
Resulting code will something like this:
cs
using System;

class Test
{
    int Foo { get; set; }

    Test()
    {
        Action x = () =&gt;
        {
            this.Foo = 1;
        };
    }

    static void Main() { }
}


**Actual Behavior**:
The analyzer breaks the code.
cs
using System;

class Test
{
    int Foo { get; }

    Test()
    {
        Action x = () =&gt;
        {
            this.Foo = 1; // CS0200 Property or indexer 'Test.Foo' cannot be assigned to -- it is read only
        };
    }

    static void Main() { }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio Community 2017 Version 15.8.4

**Steps to Reproduce**:
1.  Open `Options`, select `Text Editor` -&gt; `C#` -&gt; `Code Style` tab, activate `Prefer auto properties`'s preference
2. Create new C# project
3. Copy and paste the following code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>30102</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Implement abstract class' misbehaves when ending generic angle bracket is missing</Title>
    <CreatedDate>22/09/2018</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>30102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
abstract class A&lt;T&gt;
{
    public abstract void AbstractMethod();
}

class B : A&lt;int
{

}


When 'Implement abstract class' is invoked:

c#
abstract class A&lt;T&gt;
{
    public abstract void AbstractMethod();
}

class B : A&lt;int
{
{
    public override void AbstractMethod()
    {
        throw new NotImplementedException();
    }
}

}
`</Code>
    <Description>Visual Studio 15.8.5

``

Would be nice to at least keep from adding the duplicate braces if possible.</Description>
  </Issue>
  <Issue>
    <IssueID>30101</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Restore.cmd fails</Title>
    <CreatedDate>22/09/2018</CreatedDate>
    <ClosedDate>22/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>30101</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30101</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>30101</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>30101</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Repo Dir C:\Users\neme1\Source\Repos\roslyn
Binaries Dir C:\Users\neme1\Source\Repos\roslyn\Binaries
Running restore
Restore using dotnet at C:\Program Files\dotnet\dotnet.exe
Restoring Roslyn Toolset
Restoring RepoToolset
Restoring Roslyn
Command failed to execute: C:\Program Files\dotnet\dotnet.exe restore --verbosity quiet Roslyn.sln
System.Management.Automation.RuntimeException: Command failed to execute: C:\Program Files\dotnet\dotnet.exe restore --verbosity quiet Roslyn.sln
at Exec-CommandCore, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build-utils.ps1: line 68
at Exec-Console, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build-utils.ps1: line 100
at Restore-Project, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build-utils.ps1: line 405
at Restore-Packages, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build.ps1: line 200
at &lt;ScriptBlock&gt;, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build.ps1: line 620


And this is the output of running Restore.cmd from regular cmd:

Repo Dir C:\Users\neme1\Source\Repos\roslyn
Binaries Dir C:\Users\neme1\Source\Repos\roslyn\Binaries
Downloading vswhere
Downloading RoslynTools.MSBuild
Running restore
Restore using dotnet at C:\Program Files\dotnet\dotnet.exe
Restoring Roslyn Toolset
Restoring RepoToolset
Exception calling "Start" with "0" argument(s): "The system cannot find the file specified"
System.Management.Automation.MethodInvocationException: Exception calling "Start" with "0" argument(s): "The system cannot find the file specified" ---&gt; System.ComponentModel.Win32Exception: The system cannot find the file specified
   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)
   at CallSite.Target(Closure , CallSite , Object )
   --- End of inner exception stack trace ---
   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)
   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
at Exec-CommandCore, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build-utils.ps1: line 45
at Exec-Console, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build-utils.ps1: line 100
at Run-MSBuild, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build.ps1: line 182
at Restore-Packages, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build.ps1: line 196
at &lt;ScriptBlock&gt;, C:\Users\neme1\Source\Repos\roslyn\build\scripts\build.ps1: line 620
`</Code>
    <Description>After getting latest master branch (as of 1060b7c1bfabc92ee01738bff8afcb33daf9985c) and having a clean repo, this is what I get when running Restore.cmd using Developer Command Prompt:

``</Description>
  </Issue>
  <Issue>
    <IssueID>30100</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature request merge ifs refactoring</Title>
    <CreatedDate>22/09/2018</CreatedDate>
    <ClosedDate>24/09/2018</ClosedDate>
    <IssueLabels />
    <Code>cs
if (a)
{
[|  if(b)|]
    {
        ...
    }
}


After:
cs
if (a &amp;&amp; b)
{
    ...
}
`</Code>
    <Description>Before:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>30099</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable: Fixer to add `#nullable` and project-level setting</Title>
    <CreatedDate>22/09/2018</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- Handle presence of existing `#nullable disable`
- Allow setting project-level option
  - [ ] code fixer
  - [ ] project system property or API </Description>
  </Issue>
  <Issue>
    <IssueID>30097</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>30097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion MRU alternates two most recently used items</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>04/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30097</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
branch `asynccompletion` at ` 

**Steps to Reproduce**:

`public double Ma(double m) =&gt; m;`
type the following on the keyboard: `M(M(M(M(`

**Expected Behavior**:

![image](

**Actual Behavior**:

The two MRU items don't alternate, and I get `Ma(Ma(Ma(Ma(` with `Ma` selected as the top completion item</Description>
  </Issue>
  <Issue>
    <IssueID>30094</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>30094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OpenSolutionAsync failed if DebugSymbols/DebugType isn't defined</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>19/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var workspace = MSBuildWorkspace.Create();
await workspace.OpenSolutionAsync(path);

Loading will fail with exception

System.ArgumentNullException
Value cannot be null.

cs
protected void ReadDebugInfo()
{
    var emitDebugInfo = Project.ReadPropertyBool(PropertyNames.DebugSymbols);
    if (emitDebugInfo)
    {
        var debugType = Project.ReadPropertyString(PropertyNames.DebugType);

        if (s_debugTypeValues.TryGetValue(debugType, out var value))
        {
            Add("debug", value);
        }
    }
}
`</Code>
    <Description>Version: 2.9 

Solution with project without DebugSymbols/DebugType properties defined.
Load solution
``
dubugType is null.
Not sure why emitDebugInfo is True there.

There is no such issue using version 2.8.2.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30094</IssueID>
        <PullRequestID>30209</PullRequestID>
        <Title>fixed DebugType ArgumentNullException in CommandLineArgumentReader</Title>
        <Code>csharp
        public static async Task ReproduceDebugTypeError()
        {
            var workspace = Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.Create();
            var solution = await workspace.OpenSolutionAsync(@"C:\Repros\ProjectLoadErrorOnMissingDebugTypeRepro\ProjectLoadErrorOnMissingDebugTypeRepro.sln");
        }
`</Code>
        <Description>in the situation where DebugType is mising and the DebugSymbols property is set to true when loading project information using CommandLineArgumentReader, the TryGetValue method of the s_debugTypeValues dictionary would throw an exception


reproduceable using the following method on the attached solution:

``

[ProjectLoadErrorOnMissingDebugTypeRepro.zip](
</Description>
        <CreatedDate>28/09/2018</CreatedDate>
        <ClosedDate>09/10/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30094</IssueID>
            <PullRequestID>30209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>30094</IssueID>
            <PullRequestID>30209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>30209</PullRequestID>
            <IssueID>30094</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>XML escaped sequences should be unescaped in hover info</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>30092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static (Stream, Stream) CreatePair()
        {
            var pipe1 = new Pipe();
            var pipe2 = new Pipe();

            var party1 = new PipeExtensions.DuplexPipe(pipe1.Reader, pipe2.Writer);
            var party2 = new PipeExtensions.DuplexPipe(pipe2.Reader, pipe1.Writer);

            return (party1.AsStream(), party2.AsStream());
        }
`</Code>
    <Description>**Version Used**: VS 28112.50.d15.9

**Steps to Reproduce**:

1. Enter the following code in a C# file:

``

2. Hover over the first or second `Stream` in the return type of the method.

**Expected Behavior**:

A properly displayed hover info.

**Actual Behavior**:

The apostrophe in the text reveals an xml escaping sequence.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>30091</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AbstractRemoveUnusedVariableCodeFixProvider exception</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>27/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
ERROR [2018-09-16 20:41:23Z]: Roslyn error: Extension_Exception CSharpRemoveUnusedVariableCodeFixProvider : Sequence contains more than one element
  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00071] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/external/corefx/src/System.Linq/src/System/Linq/Single.cs:46 
  at System.Linq.ImmutableArrayExtensions.Single[T] (System.Collections.Immutable.ImmutableArray`1[T] immutableArray) [0x00007] in &lt;36486b016d234fca8cd67892bf29c7b5&gt;:0 
  at Microsoft.CodeAnalysis.RemoveUnusedVariable.AbstractRemoveUnusedVariableCodeFixProvider`3[TLocalDeclarationStatement,TVariableDeclarator,TVariableDeclaration].RegisterCodeFixesAsync (Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context) [0x00014] in /_/src/Features/Core/Portable/RemoveUnusedVariable/AbstractRemoveUnusedVariableCodeFixProvider.cs:35 
  at Microsoft.CodeAnalysis.CodeFixes.CodeFixService+&lt;GetCodeFixesAsync&gt;d__15.MoveNext () [0x0006f] in /_/src/EditorFeatures/Core/Implementation/CodeFixes/CodeFixService.cs:293 
`</Code>
    <Description>**Version Used**: 
2.9.0-beta4-63001-02

See work item 685771

**Steps to Reproduce**:

1. Not sure exactly, came in via twitter - 

**Expected Behavior**:
The code fix should work.

**Actual Behavior**:
``

I'll submit a PR, just wanted a bug logged.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30091</IssueID>
        <PullRequestID>30113</PullRequestID>
        <Title>Revert "Fix #30091 throwing exceptions"</Title>
        <Description>Reverts dotnet/roslyn#30093

I committed without knowing it was targetting 15.9.x</Description>
        <CreatedDate>24/09/2018</CreatedDate>
        <ClosedDate>24/09/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30091</IssueID>
            <PullRequestID>30113</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30091</IssueID>
            <PullRequestID>30113</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30090</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot include resources in Script compilination options.</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>05/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>30090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>30090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
// Main() method
AppDomain.CurrentDomain.UnhandledException += UnhandledException;
var scriptTask = CSharpScript.Create(
    File.OpenRead($"{Environment.CurrentDirectory}{Path.DirectorySeparatorChar}Scripts{Path.DirectorySeparatorChar}Main.csx"),
    ScriptOptions.Default.WithFilePath($"{Environment.CurrentDirectory}{Path.DirectorySeparatorChar}Scripts{Path.DirectorySeparatorChar}Main.csx")).RunAsync();

// seems to throw the exception here.
if (scriptTask.Result.Exception != null)
{
}

private static void UnhandledException(object sender, UnhandledExceptionEventArgs e)
{
    var ex = (Exception)e.ExceptionObject;
    MessageBox.Show($"{ex.InnerException.Message}{Environment.NewLine}{ex.InnerException.StackTrace}", "Script Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
    Console.WriteLine($"{ex.InnerException.Message}{Environment.NewLine}{ex.InnerException.StackTrace}");
    Application.Exit();
}

And this on the script:
cs
public class Test
{
    public Test()
    {
        // exception should be from this line.
        System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Test));
    }
}

3. Hit F5
4. Observe the following exception similar to this one:
cs
System.Resources.MissingManifestResourceException: Could not find any resources appropriate for the specified culture or the neutral culture.  Make sure "Form1.resources" was correctly embedded or linked into assembly "R*a720db28-a50b-47d6-a97f-4547c24066a1#1-0" at compile time, or that all the satellite assemblies required are loadable and fully signed.
   at System.Resources.ManifestBasedResourceGroveler.HandleResourceStreamMissing(String fileName)
   at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark&amp; stackMark)
   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark&amp; stackMark)
   at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)
   at System.Resources.ResourceManager.GetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)
   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet&amp; resourceSet)
   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet&amp; resourceSet)
   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet&amp; resourceSet)
   at System.ComponentModel.ComponentResourceManager.ApplyResources(Object value, String objectName, CultureInfo culture)
   at System.ComponentModel.ComponentResourceManager.ApplyResources(Object value, String objectName)
   at Submission#0.Form1.InitializeComponent()
   at Submission#0.Form1..ctor()
   at Submission#0.&lt;&lt;Initialize&gt;&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.&lt;RunSubmissionsAsync&gt;d__9`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Scripting.Script`1.&lt;RunSubmissionsAsync&gt;d__21.MoveNext()
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at System.Threading.Tasks.Task`1.get_Result()
   at TestImageZooming.Program.Main() in C:\Users\User\Desktop\TestImageZooming\Program.cs:line 29
`</Code>
    <Description>**Version Used**: Latest from nuget

**Steps to Reproduce**:

1. Create a new C# Console App
2. Set the contents of the program to
``

**Expected Behavior**:
To be able to embed the resources into the compilation of the scripts.
**Actual Behavior**:
No way to include them currently.</Description>
  </Issue>
  <Issue>
    <IssueID>30089</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatically close block comment on /</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
/*
 * Typed some text and then pressed enter...
 * |


**Expected Behavior**:

csharp
/*
 * Typed some text and then pressed enter...
 */


**Actual Behavior**:

csharp
/*
 * Typed some text and then pressed enter...
 * /
`</Code>
    <Description>I was encouraged by work from @Neme12 in #30074, so I'm resurrecting a *very* old feature request of mine. 😄 

**Steps to Reproduce**:

Press &lt;kbd&gt;/&lt;/kbd&gt; in the location marked with `|`:

``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30089</IssueID>
        <PullRequestID>30074</PullRequestID>
        <Title>Command handler to replace `@$"` with `$@"` when typing interpolated verbatim string</Title>
        <Description>Fixes #30012
relates to 

Looks like this:
![autofixer](

replacement happens immediately after typing `"`

tagging @jcouv @CyrusNajmabadi @sharwell </Description>
        <CreatedDate>20/09/2018</CreatedDate>
        <ClosedDate>01/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30089</IssueID>
            <PullRequestID>30074</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>30089</IssueID>
            <PullRequestID>30074</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>30089</IssueID>
            <PullRequestID>30074</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>30074</PullRequestID>
            <IssueID>30089</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>sharwell</FixedById>
            <PullRequestID>30074</PullRequestID>
            <IssueID>30089</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30088</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.Build.Tasks.CodeAnalysis.dll does not specify an NgenApplication</Title>
    <CreatedDate>21/09/2018</CreatedDate>
    <ClosedDate>24/09/2018</ClosedDate>
    <IssueLabels />
    <Description>`Microsoft.Build.Tasks.CodeAnalysis` does not specify which application settings should be used for ngen:



Typically this is specified like this:


@ManishJayaswal 	@jinujoseph 	@tmat 	this is blocking OptProf generation.

@jaredpar 	@agocke 	I assume the build tasks should use MSBuild.exe as the application config for assembly resolution?</Description>
  </Issue>
  <Issue>
    <IssueID>30086</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>30086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add support for generating current naming rules/options in the editorconfig generator</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>19/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>30086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See the discussion here:  Current editorconfig file generation only handles formatting and code style options, but we should extend it to generate entries for naming rules as well.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30086</IssueID>
        <PullRequestID>30043</PullRequestID>
        <Title>Add support to save current tools options into an .editorconfig file</Title>
        <Description>This ports  that went into the `editorconfig-ide` feature branch, into `dev16.0.x` branch with following additional refactorings/enhancements:

1. Generated .editorconfig file has all localized string as comments.
2. No hardcoding of individual options in the editorconfig file generator. Instead, each `EditorConfigStorageLocation` now requires to provide a delegate to convert a given option value into the .editorconfig string representation (basically complimentary of the parsing delegate that was already required).
3. Introduce concept of `OptionGroup` to enable grouping options in the same feature (such as CodeStyleOptions, CSharpCodeStyleOptions, FormattingOptions, CSharpFormattingOptions, etc.) into sub-features or groups (such as "this. preferences", "expression-level preferences", etc.). This enables the editorconfig generation to group the related options, without explicit knowledge of each option group.
4. Expose `AllOptions` from each of CodeStyleOptions, CSharpCodeStyleOptions, FormattingOptions, CSharpFormattingOptions, etc., so that the corresponding `IOptionProvider` always stays in sync with implemented options.

![image](
</Description>
        <CreatedDate>20/09/2018</CreatedDate>
        <ClosedDate>22/09/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30086</IssueID>
            <PullRequestID>30043</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30086</IssueID>
            <PullRequestID>30043</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30081</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Re-enable asserts in (PETypeParameterSymbol/SourceTypeParameterSymbolBase).GetBounds</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>30081</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35145</PullRequestID>
        <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
        <Description>Fixes #30081.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35017</PullRequestID>
        <Title>Simplify null checks using 'is null' and 'is object'</Title>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35017</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34563</PullRequestID>
        <Title>install servicehub json files in common7/servicehub folders</Title>
        <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35097</PullRequestID>
        <Title>Use Machine.Arm64 instead of raw value</Title>
        <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35097</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35094</PullRequestID>
        <Title>Add unit-tests for fixed issues.</Title>
        <Description>Closes #33276.
Closes #31676.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34763</PullRequestID>
        <Title>Update nullable attribute in docs</Title>
        <Description>Update nullable attribute in docs to show NullableFlags</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34581</PullRequestID>
        <Title>Fix the pull member up failure</Title>
        <Description>Related [issue](
So, null pointer exception happens when you try to make a property abstract like
``
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35116</PullRequestID>
        <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
        <Description>Fixes #35083.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35116</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34988</PullRequestID>
        <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
        <Description>Fix </Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35121</PullRequestID>
        <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
        <Description>Fixes 

Relates to  (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to  (umbrella for async-streams)</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>20/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35121</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34909</PullRequestID>
        <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
        <Description>Fixes #33952
</Description>
        <CreatedDate>10/04/2019</CreatedDate>
        <ClosedDate>15/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34909</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35024</PullRequestID>
        <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
        <Description>Fix for #34983 and #35126</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>22/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35009</PullRequestID>
        <Title>Add import placement codestyle, diagnostic, and fixer</Title>
        <Description>This PR is created to simplify the changes made in 

This PR includes the changes from both  &amp; 

![image](

![image](

</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35170</PullRequestID>
        <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Range</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35170</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35189</PullRequestID>
        <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
        <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35189</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35213</PullRequestID>
        <Title>Only emit readonly attributes implicitly when feature enabled</Title>
        <Description>Resolves #35113</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35213</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35155</PullRequestID>
        <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
        <Description>Fix </Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34697</PullRequestID>
        <Title>Add spec for enhanced using</Title>
        <Description>Spec out the various parts of the enhanced using feature</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34697</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>32092</PullRequestID>
        <Title>Optimise DisplayClass Allocations</Title>
        <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to </Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>32092</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35234</PullRequestID>
        <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
        <Code>csharp
struct C {
    readonly e //suggest event here
}
`</Code>
        <Description>…member declaration.

``

See </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35265</PullRequestID>
        <Title>Re-enable symbol tests on mono</Title>
        <Description>Fixes </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35264</PullRequestID>
        <Title>Remove usage of QuietRestore</Title>
        <Code>
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
`</Code>
        <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

``

QuietRestore is a hack that is causing issues like </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35264</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34778</PullRequestID>
        <Title>Readonly struct metadata as source</Title>
        <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
        <CreatedDate>05/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35249</PullRequestID>
        <Title>Fix crash in pattern matching</Title>
        <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35249</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35254</PullRequestID>
        <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
        <Description>Fixes  (warn for potentially missing `[EnumeratorCancellation]`)
Closes  (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35254</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34889</PullRequestID>
        <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
        <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
        <CreatedDate>09/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34889</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35001</PullRequestID>
        <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
        <Description>Fixes #29894</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35001</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35018</PullRequestID>
        <Title>Make Generated syntax trees restore to project-level nullability</Title>
        <Description>Fixes #34094</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35018</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35212</PullRequestID>
        <Title>Focus first tabbable element in PMU dialog</Title>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35272</PullRequestID>
        <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
        <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35272</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34809</PullRequestID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on  Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes </Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34996</PullRequestID>
        <Title>Handly dynamic null checks against literal null</Title>
        <Description>Fixes #30939</Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34996</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35284</PullRequestID>
        <Title>Clean up an assertion in LambdaRewriter.</Title>
        <Description>Fixes #30069</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35284</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35351</PullRequestID>
        <Title>Fixup from bad merge.</Title>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Now</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35351</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35030</PullRequestID>
        <Title>Lambdas in array initializers checked in nullable walker</Title>
        <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35276</PullRequestID>
        <Title>Null inferences do not flow out of a finally block.</Title>
        <Description>Fixes #34018</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35336</PullRequestID>
        <Title>changed the way we report live analysis to task center</Title>
        <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](

new
![progress](
</Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35336</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35311</PullRequestID>
        <Title>Handle val escape for the switch expression.</Title>
        <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35311</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35016</PullRequestID>
        <Title>Additional Nullability checks for deconstruction:</Title>
        <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes </Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35016</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34973</PullRequestID>
        <Title>Correct nullability analysis in conditional access</Title>
        <Description>Fixes #29956</Description>
        <CreatedDate>13/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34973</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35344</PullRequestID>
        <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
        <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes  and  </Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>34831</PullRequestID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

## From 
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From 
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From 
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From 
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From 
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From 
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From 
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From 
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From 
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From 
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From 
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From 
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From 
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From 
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From 
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>34831</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35373</PullRequestID>
        <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
        <Description>FYI @jaredpar @agocke @stephentoub 

May fix  </Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35373</PullRequestID>
            <IssueID>30081</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>30081</IssueID>
        <PullRequestID>35238</PullRequestID>
        <Title>Auto-generate assembly version of the build task assembly</Title>
        <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>30081</IssueID>
            <PullRequestID>35238</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>30078</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Follow up on a PROTOTYPE comment in SourceComplexParameterSymbol.FlowAnalysisAnnotations</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>15/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>30078</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30076</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Infer Interface Implementation</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>21/09/2018</ClosedDate>
    <IssueLabels />
    <Code>csharp 
public class PocViewComponent : ViewComponent
{
	public Task&lt;IViewComponentResult&gt; InvokeAsync()
	{
		var model = new MyModel
		{
			Name = "Hello world"
		};

		//have to cast to IViewComponentResult otherwise I get a compile error:
		//Error CS0029  Cannot implicitly convert type
	 //'System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult&gt;'
		//to 
		//'System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IViewComponentResult&gt;'
		//ViewComponent Sync Test C:\Users\mdepouw\source\repos\Experiments\ViewComponent Sync Test\ViewComponent Sync Test\Views\Shared\Components\Poc\PocViewComponent.cs
		var result = (IViewComponentResult)View(model);
		return Task.FromResult(result);
	}
}


`View(model)` returns a `ViewViewComponentResult` and that class implements `IViewComponentResult`.  Shouldn't the compiler be able to figure that out?

Isn't this [covariance](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/covariance-contravariance/)?

csharp
namespace Microsoft.AspNetCore.Mvc
{
    //
    // Summary:
    //     A base class for view components.
    [ViewComponent]
    public abstract class ViewComponent
    {
         public ViewViewComponentResult View&lt;TModel&gt;(TModel model); 
        
         ...
    }
}


csharp
namespace Microsoft.AspNetCore.Mvc.ViewComponents
{
    //
    // Summary:
    //     A Microsoft.AspNetCore.Mvc.IViewComponentResult that renders a partial view when
    //     executed.
    public class ViewViewComponentResult : IViewComponentResult
    { ... }
}


[Full source: PocViewComponent.cs](https://dev.azure.com/spottedmahn/_git/Experiments?path=%2FViewComponent%20Sync%20Test%2FViewComponent%20Sync%20Test%2FViews%2FShared%2FComponents%2FPoc%2FPocViewComponent.cs&amp;version=GBmaster)

**Expected Behavior**:

csharp
public class PocViewComponent : ViewComponent
{
	public Task&lt;IViewComponentResult&gt; InvokeAsync()
	{
		var model = new MyModel
		{
			Name = "Hello world"
		};

		var result = View(model);
		return Task.FromResult(result);
	}
}
`</Code>
    <Description>**Version Used**: 
Visaul Studio 15.8.4

**Steps to Reproduce**:

Why do I have to cast the following result?

``

**Actual Behavior**:

I have to cast the result.

---

Forgive me if there is an existing issue for this.  I don't know the right keywords to track it down 😢</Description>
  </Issue>
  <Issue>
    <IssueID>30075</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Follow up on a PROTOTYPE comment in PETypeParameterSymbol.GetDeclaredConstraintTypes</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>19/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30072</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Figure out what AbstractTypeMap.SubstituteType method should do about NonNullTypes context</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30069</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>30069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Restore assertion in LambdaRewriter.SubstituteTypeArguments</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>29/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30068</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Figure out proper behavior of NamedTypeSymbol.GetTypeParametersAsTypeArguments API with regard to nullable reference types</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30067</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>30067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Review UnassignedFieldsWalker follow-up comments</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>11/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>30066</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Review NullableWalker.VisitAssignmentOperator</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30065</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Review NullableWalker.GetDefaultState</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>19/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30064</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Explicitly pass NunNullType context to NamedTypeSymbol.Construct API</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30061</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider adding factory method to TypeParameterBounds type</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30060</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ensure test coverage with different NonNullTypes contexts on Binder.UnwrapAlias</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>30/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#

        private NamespaceOrTypeOrAliasSymbolWithAnnotations UnwrapAlias(NamespaceOrTypeOrAliasSymbolWithAnnotations symbol, DiagnosticBag diagnostics, SyntaxNode syntax, ConsList&lt;Symbol&gt; basesBeingResolved = null)
        {
            if (symbol.IsAlias)
            {
                // PROTOTYPE(NullableReferenceTypes): test with different NonNullTypes contexts
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(NonNullTypesContext, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            }

            return symbol;
        }

        private NamespaceOrTypeOrAliasSymbolWithAnnotations UnwrapAlias(NamespaceOrTypeOrAliasSymbolWithAnnotations symbol, out AliasSymbol alias, DiagnosticBag diagnostics, SyntaxNode syntax, ConsList&lt;Symbol&gt; basesBeingResolved = null)
        {
            if (symbol.IsAlias)
            {
                // PROTOTYPE(NullableReferenceTypes): test with different NonNullTypes contexts
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(NonNullTypesContext, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out alias, diagnostics, syntax, basesBeingResolved));
            }

            alias = null;
            return symbol;
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30059</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Address PROTOTYPE comment for ```TypeSymbolExtensions. VisitType&lt;T&gt;``` method</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30058</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove NonNullTypesTrueContext and NonNullTypesFalseContext if possible</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>10/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Once we pass fine-grained context everywhere, we should be able to remove one of those two types, maybe even both.</Description>
  </Issue>
  <Issue>
    <IssueID>30057</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC in the presence of injected NonNullTypes attribute</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30057</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30057</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30057</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>30057</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
``</Description>
  </Issue>
  <Issue>
    <IssueID>30056</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Address PROTOTYPE comments for TypeSymbolExtensions.IsUnconstrainedTypeParameter method</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>31/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Address issues with implementations of Extensions.TypeSymbolWithAnnotations.Is API</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>30053</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>30053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for enhanced using and foreach</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>18/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Three features are included:
- `using` declaration 
- pattern-based `using` 
- extension-based `foreach` 

Some scenarios and test ideas:
- [ ] `StructRefEnumerator GetEnumerator&lt;T&gt;(this T[] @this)`
- [ ] pattern-based `Dispose` in foreach
- [ ] `await using var` declaration
- [ ] IDE: FindAllReferences on `Dispose` method or extension, and `GetEnumerator` extension
- [ ] handle EnC
- [ ] integrate with async-streams (
- [ ] verify sequence points and debugging experience

FYI @agocke @chsienki </Description>
  </Issue>
  <Issue>
    <IssueID>30052</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Should follow up on PROTOTYPE comments in TypeSymbolWithAnnotations.SubstituteTypeCore</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider an alternative design around TypeSymbolWithAnnotations.IsNullable property</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30050</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ensure proper use of factory method in TypeSymbolWithAnnotations </Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30044</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Build crashes in csc.exe since Visual Studio 15.8.x on multiple machines and build server</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>05/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30044</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>30044</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
1&gt;------ Build started: Project: ConsoleApp1, Configuration: Debug Any CPU ------
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error : Unhandled Exception: System.TypeLoadException: Could not load type 'Microsoft.CodeAnalysis.SeparatedSyntaxList`1' from assembly 'Microsoft.CodeAnalysis, Version=2.9.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.SeparatedSyntaxList`1.System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator()
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(IEnumerable`1 items)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbol.GetAttributesToBind(OneOrMany`1 attributeDeclarationSyntaxLists, AttributeLocation symbolPart, DiagnosticBag diagnostics, CSharpCompilation compilation, Func`2 attributeMatchesOpt, Binder rootBinderOpt, ImmutableArray`1&amp; binders)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(OneOrMany`1 attributesSyntaxLists, CustomAttributesBag`1&amp; lazyCustomAttributesBag, AttributeLocation symbolPart, Boolean earlyDecodingOnly, Binder binderOpt, Func`2 attributeMatchesOpt)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.EnsureAttributesAreBound()
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommonCompiler.CompileAndEmit(TouchedFileLogger touchedFilesLogger, Compilation&amp; compilation, ImmutableArray`1 analyzers, ImmutableArray`1 additionalTextFiles, ImmutableArray`1 embeddedTexts, DiagnosticBag diagnostics, CancellationToken cancellationToken, CancellationTokenSource&amp; analyzerCts, Boolean&amp; reportAnalyzer, AnalyzerDriver&amp; analyzerDriver)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommonCompiler.RunCore(TextWriter consoleOutput, ErrorLogger errorLogger, CancellationToken cancellationToken)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommonCompiler.Run(TextWriter consoleOutput, CancellationToken cancellationToken)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.&lt;&gt;c__DisplayClass1_0.&lt;Run&gt;b__0(TextWriter tw)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[T](Func`2 func)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(String[] args, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(String[] arguments, BuildPaths buildPaths, TextWriter textWriter)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(IEnumerable`1 originalArguments, BuildPaths buildPaths, TextWriter textWriter)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(IEnumerable`1 arguments, RequestLanguage language, CompileFunc compileFunc, IAnalyzerAssemblyLoader analyzerAssemblyLoader)
1&gt;C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(52,5): error :    at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)
1&gt;Done building project "ConsoleApp1.csproj" -- FAILED.
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========


As messages in the event viewer:

____________
Application: ServiceHub.RoslynCodeAnalysisService32.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an internal error in the .NET Runtime at IP 6F0CB2CA (6F0B0000) with exit code 80131506.
____________
Faulting application name: ServiceHub.RoslynCodeAnalysisService32.exe, version: 1.3.77.18573, time stamp: 0xdc9a59bf
Faulting module name: clr.dll, version: 4.7.3132.0, time stamp: 0x5b554329
Exception code: 0xc0000005
Fault offset: 0x0001b2ca
Faulting process id: 0x1954
Faulting application start time: 0x01d450f8e7465638
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\ServiceHub\Hosts\ServiceHub.Host.CLR.x86\ServiceHub.RoslynCodeAnalysisService32.exe
Faulting module path: C:\Windows\Microsoft.NET\Framework\v4.0.30319\clr.dll
Report Id: bb92a4e4-1d70-41fc-a636-2598dce4bcbc
Faulting package full name: 
Faulting package-relative application ID: 
____________
Application: csc.exe
Framework Version: v4.0.30319
Description: The process was terminated due to an unhandled exception.
Exception Info: System.TypeLoadException
   at Microsoft.CodeAnalysis.SeparatedSyntaxList`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator()
   at System.Collections.Immutable.ImmutableArray`1+Builder[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].AddRange(System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbol.GetAttributesToBind(Roslyn.Utilities.OneOrMany`1&lt;Microsoft.CodeAnalysis.SyntaxList`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;&gt;, Microsoft.CodeAnalysis.CSharp.Symbols.AttributeLocation, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.CSharpCompilation, System.Func`2&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,Boolean&gt;, Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Binder&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(Roslyn.Utilities.OneOrMany`1&lt;Microsoft.CodeAnalysis.SyntaxList`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;&gt;, Microsoft.CodeAnalysis.CustomAttributesBag`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.CSharpAttributeData&gt; ByRef, Microsoft.CodeAnalysis.CSharp.Symbols.AttributeLocation, Boolean, Microsoft.CodeAnalysis.CSharp.Binder, System.Func`2&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,Boolean&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.EnsureAttributesAreBound()
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(Microsoft.CodeAnalysis.SourceLocation, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(Microsoft.CodeAnalysis.SyntaxTree, System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;, System.Func`4&lt;System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;,Microsoft.CodeAnalysis.SyntaxTree,System.Nullable`1&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;,System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(Microsoft.CodeAnalysis.CompilationStage, Boolean, Microsoft.CodeAnalysis.DiagnosticBag, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.CompileAndEmit(Microsoft.CodeAnalysis.TouchedFileLogger, Microsoft.CodeAnalysis.Compilation ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.AdditionalTextFile&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.EmbeddedText&gt;, Microsoft.CodeAnalysis.DiagnosticBag, System.Threading.CancellationToken, System.Threading.CancellationTokenSource ByRef, Boolean ByRef, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver ByRef)
   at Microsoft.CodeAnalysis.CommonCompiler.RunCore(System.IO.TextWriter, Microsoft.CodeAnalysis.ErrorLogger, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.Run(System.IO.TextWriter, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc+&lt;&gt;c__DisplayClass1_0.&lt;Run&gt;b__0(System.IO.TextWriter)
   at Microsoft.CodeAnalysis.CommandLine.ConsoleUtil.RunWithUtf8Output[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`2&lt;System.IO.TextWriter,Int32&gt;)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(System.String[], Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(System.String[], Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter)
   at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;, Microsoft.CodeAnalysis.BuildPaths, System.IO.TextWriter)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;, Microsoft.CodeAnalysis.CommandLine.RequestLanguage, Microsoft.CodeAnalysis.CommandLine.CompileFunc, Microsoft.CodeAnalysis.IAnalyzerAssemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(System.String[])
____________
Faulting application name: csc.exe, version: 2.9.0.63208, time stamp: 0x970ce7d3
Faulting module name: KERNELBASE.dll, version: 10.0.16299.611, time stamp: 0x2ef5f131
Exception code: 0xe0434352
Fault offset: 0x00000000000450d8
Faulting process id: 0xa54
Faulting application start time: 0x01d450f8f2e6938f
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\csc.exe
Faulting module path: C:\WINDOWS\System32\KERNELBASE.dll
Report Id: ec5a9265-9ed1-4c5a-b982-420f7b352b23
Faulting package full name: 
Faulting package-relative application ID: 
`</Code>
    <Description>**Version Used**: 

Visual Studio 15.8.4 - all .NET framework versions are installed

We have this behavior on all 4 development machines (which have the same setup; with Windows 10; VS 15.8.x) and on two build servers with Windows Server 2016 and VS.
For us the issue occurs since Visual Studio 15.8

**Steps to Reproduce**:

1. Create New Project: Console App (.NET Core)
2. Build Project/Solution
3. Crash in CodeAnalysis (see errors below)

**Expected Behavior**:

No crashes / No error messages

**Actual Behavior**:

As Visual Studio output: ` Unhandled Exception: System.TypeLoadException: Could not load type 'Microsoft.CodeAnalysis.SeparatedSyntaxList'1' from assembly 'Microsoft.CodeAnalysis, Version=2.9.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.`

``</Description>
  </Issue>
  <Issue>
    <IssueID>30042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Certain C# code style options are defined in the core/shared code style options</Title>
    <CreatedDate>20/09/2018</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>30042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See the following three `CodeStyleOptions`:

1. [CodeStyleOptions.PreferDeconstructedVariableDeclaration]( `csharp_style_deconstructed_variable_declaration`
2. [CodeStyleOptions.PreferInlinedVariableDeclaration]( `csharp_style_inlined_variable_declaration`
3. [CodeStyleOptions.PreferThrowExpression]( `csharp_style_throw_expression`

Note that all the three options above have a `csharp_` editorconfig prefix, while the rest of the options in this type have `dotnet_` prefix. These options are defined as `PerLanguageOption`, while they are clearly specific to C#. These options should be moved to `CSharpCodeStyleOptions`, and in future if we have VB equivalents, they should be defined in `VisualBasicCodeStyleOptions`.</Description>
  </Issue>
  <Issue>
    <IssueID>30035</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>QuickInfo test TestNestedAnonymousType is skipped due to a PROTOTYPE comment</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30034</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EE unit-test EmitNullableAttribute_LambdaParameters is skipped due to a PROTOTYPE comment</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30033</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EE unit-test EmitNullableAttribute_ExpressionType is skipped due to a PROTOTYPE comment</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30031</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>30031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Follow up on PROTOTYPE comments in EE NetModuleDuplicateReferences unit-test</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30030</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>30030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Follow up on PROTOTYPE comments in EE ImportKinds unit-test</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30028</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CallerMemberNameAttribute does not work when passing a dynamic object as a parameter</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>24/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>30028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 15.8.1

**Steps to Reproduce**:

``

**Expected Behavior**:

Method "**GetCallerName**" should return the caller method name.

**Actual Behavior**:

Method "**GetCallerName**" returns "" (empty string).
</Description>
  </Issue>
  <Issue>
    <IssueID>30027</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>UpgradeAllProjectsToCSharp8_NullableReferenceType unit-test fails in src\EditorFeatures\CSharpTest\Diagnostics\UpgradeProject\UpgradeProjectTests.cs</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>12/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30026</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>FixOptionalParameter unit-test is failing in CSharpDeclareAsNullableCodeFixTests.cs</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>19/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30024</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>30024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add tests for ??= with non-nullable value types</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>24/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>PR #29985 brought up that we don't have any explicit tests to check that non-nullable value types (like Span&lt;T&gt;) are an invalid target for the LHS of the ??= operator. 

Currently we correctly error in this case, but we should add tests to ensure we keep the behavior covered, and thus never have to implement escape check logic for ??=</Description>
  </Issue>
  <Issue>
    <IssueID>30022</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected WRN_UninitializedNonNullableField warnings when ```this``` is assigned in constructor</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void StructAssignThis()
        {
            var source =
@"struct S
{
#pragma warning disable 0169
    private readonly string F;
    private string[] P { get; set; }
    internal S(S s)
    {
        this = s;
    }
}";
            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition }, parseOptions: TestOptions.Regular8);
            comp.VerifyDiagnostics();
        }


Observed:

                // (6,14): warning CS8618: Non-nullable property 'P' is uninitialized.
                //     internal S(S s)
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "S").WithArguments("property", "P").WithLocation(6, 14),
                // (6,14): warning CS8618: Non-nullable field 'F' is uninitialized.
                //     internal S(S s)
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "S").WithArguments("field", "F").WithLocation(6, 14)
`</Code>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>30021</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Confusing diagnostics reported for a scenario in GenericType_NonNullTypes unit-test</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void GenericType_NonNullTypes()
        {
            var source =
@"#pragma warning disable 0169
class A&lt;T&gt;
{
    T F1; // warning: uninitialized
    A() { }
}
class B&lt;T&gt; where T : class
{
    T F2; // warning: uninitialized
    T? F3;
    B() { }
}
class C&lt;T&gt; where T : struct
{
    T F4;
    T? F5;
    C() { }
}";

            // [NonNullTypes(true)]
            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition }, parseOptions: TestOptions.Regular8);
            comp.VerifyDiagnostics(
                // (11,5): warning CS8618: Non-nullable field 'F2' is uninitialized.
                //     B() { }
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "B").WithArguments("field", "F2").WithLocation(11, 5),
                // (5,5): warning CS8618: Non-nullable field 'F1' is uninitialized.
                //     A() { }
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "A").WithArguments("field", "F1").WithLocation(5, 5));

            // [NonNullTypes(false)]
            comp = CreateCompilation(new[] { source, NonNullTypesFalse, NonNullTypesAttributesDefinition }, parseOptions: TestOptions.Regular8);

            // PROTOTYPE(NullableReferenceTypes): It feels like the following warning is confusing 
            // (11,5): warning CS8618: Non-nullable field 'F3' is uninitialized.
            //     B() { }
            //
            // We might want to understand why the following error causes it
            // (10,8): error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
            //     T? F3;
            comp.VerifyDiagnostics(
                // (10,6): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //     T? F3;
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(10, 6),
                // (10,5): error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
                //     T? F3;
                Diagnostic(ErrorCode.ERR_NullableUnconstrainedTypeParameter, "T?").WithLocation(10, 5),
                // (5,5): warning CS8618: Non-nullable field 'F1' is uninitialized.
                //     A() { }
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "A").WithArguments("field", "F1").WithLocation(5, 5),
                // (11,5): warning CS8618: Non-nullable field 'F3' is uninitialized.
                //     B() { }
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "B").WithArguments("field", "F3").WithLocation(11, 5),
                // (11,5): warning CS8618: Non-nullable field 'F2' is uninitialized.
                //     B() { }
                Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "B").WithArguments("field", "F2").WithLocation(11, 5)
            );

            // [NonNullTypes] missing
            comp = CreateCompilation(source, parseOptions: TestOptions.Regular8);
            comp.VerifyDiagnostics(
                // (10,6): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //     T? F3;
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(10, 6),
                // (10,5): error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
                //     T? F3;
                Diagnostic(ErrorCode.ERR_NullableUnconstrainedTypeParameter, "T?").WithLocation(10, 5)
            );

            // https://github.com/dotnet/roslyn/issues/29976: Test with [NonNullTypes(Warnings=false)].
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30020</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>30020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Report WRN_UninitializedNonNullableField warnings for static fields.</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>25/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        // PROTOTYPE(NullableReferenceTypes): Report warnings for static fields.
        [Fact]
        public void StaticFields_DefaultConstructor()
        {
            var source =
@"class C
{
#pragma warning disable 0169
    private static object F1;
    private static object F2 = new object();
    private readonly static object F3;
    private readonly static object F4 = new object();
}";
            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition }, parseOptions: TestOptions.Regular8);
            comp.VerifyDiagnostics();
                //// (8,12): warning CS8618: Non-nullable field 'F3' is uninitialized.
                ////     static C()
                //Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "C").WithArguments("field", "F3").WithLocation(8, 12),
                //// (8,12): warning CS8618: Non-nullable field 'F1' is uninitialized.
                ////     static C()
                //Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "C").WithArguments("field", "F1").WithLocation(8, 12));
        }

        // PROTOTYPE(NullableReferenceTypes): Report warnings for static fields.
        [Fact]
        public void StaticFields_ExplicitConstructor()
        {
            var source =
@"class C
{
#pragma warning disable 0169
    private static object F1;
    private static object F2;
    private readonly static object F3;
    private readonly static object F4;
    static C()
    {
        F2 = new object();
        F4 = new object();
    }
}";
            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition }, parseOptions: TestOptions.Regular8);
            comp.VerifyDiagnostics();
                //// (8,12): warning CS8618: Non-nullable field 'F3' is uninitialized.
                ////     static C()
                //Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "C").WithArguments("field", "F3").WithLocation(8, 12),
                //// (8,12): warning CS8618: Non-nullable field 'F1' is uninitialized.
                ////     static C()
                //Diagnostic(ErrorCode.WRN_UninitializedNonNullableField, "C").WithArguments("field", "F1").WithLocation(8, 12));
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30019</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use "is null" quick action not working</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>25/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>30019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>30019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS 15.8.2VS is identifying a &amp;quot;ReferenceEquals(x,null)&amp;quot; and indicating it can be simplied.  The quick action pop-up lists &amp;quot;use is null&amp;quot; as an option.  But invoking it hasn't been doing anything for a short while now even under various different contexts.  Other quick actions, such as &amp;quot;implement interface&amp;quot; have been working._This issue has been moved from VSTS ticketId: 680149__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>30016</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>30016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>foreach (ref var) doesn't ref</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Threading;

class Program
{
    static void Main() { A(); B(); C(); D(); }

    static void A()
    {
        var items = new (int x, int y)[1];
        foreach (ref var t in items.AsSpan()) Interlocked.Exchange(ref t.x, 1);
        foreach (var (x, y) in items) Console.WriteLine(x); // expected: 1, actual 0
    }

    static void B() // No Exchange
    {
        var items = new (int x, int y)[1];
        foreach (ref var t in items.AsSpan()) t.x = 1;
        foreach (var (x, y) in items) Console.WriteLine(x); // 1
    }

    static void C() // "for" instead of "foreach(ref var)"
    {
        var items = new (int x, int y)[1];
        for (int i = 0; i &lt; items.Length; i++)
        {
            ref var t = ref items[i];
            Interlocked.Exchange(ref t.x, 1);
        }
        foreach (var (x, y) in items) Console.WriteLine(x); // 1
    }

    static void D() // No tuple
    {
        var items = new int[1];
        foreach (ref var x in items.AsSpan()) Interlocked.Exchange(ref x, 1);
        foreach (var x in items) Console.WriteLine(x); // 1
    }
}
`</Code>
    <Description>**Version Used**: 

VS 15.8.4
LangVersion: latest
TargetFrameworks: netcoreapp2.1 and net472 with System.Memory 4.5.1

**Steps to Reproduce**:

``

**Expected Behavior**:

`A` shows `1`.

**Actual Behavior**:

`A` shows `0`.
</Description>
  </Issue>
  <Issue>
    <IssueID>30015</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ApplyEditorConfigAndFixAllOccurrences and ApplyEditorConfigAndFormatDocument Failures in dev16.0.x</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>30015</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.ApplyEditorConfigAndFixAllOccurrences [STARTING]
      Assert.Equal() Failure
                                          (pos 31)
      Expected: Â·Â·Â·{\r\n    public int X1 =&gt; 3;\r\n\r\n    public int Y1 =&gt; 5;\r\n\r\n    Â·Â·Â·
      Actual:   Â·Â·Â·{\r\n    public int X1\r\n    {\r\n        get\r\n        {\r\n        Â·Â·Â·
                                          (pos 31)
      Stack Trace:
        /_/src/VisualStudio/IntegrationTest/IntegrationTests/CSharp/CSharpCodeActions.cs(220,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.ApplyEditorConfigAndFixAllOccurrences()
`</Code>
    <Description>This test is consistently failing in the debug builds of dev16.0.x, starting with this build:

``</Description>
  </Issue>
  <Issue>
    <IssueID>30012</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need auto-fixer for ordering of $@ versus @$</Title>
    <CreatedDate>19/09/2018</CreatedDate>
    <ClosedDate>01/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30012</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30012</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Discussed here: </Description>
  </Issue>
  <Issue>
    <IssueID>30010</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>30010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable attribute is not synthesized for the getter of the Current property emitted to "implement" iterator method </Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void EmitAttribute_Iterator_01()
        {
            var source =
@"using System.Collections.Generic;
class C
{
    static IEnumerable&lt;object?&gt; F()
    {
        yield break;
    }
}";
            CompileAndVerify(
                source,
                parseOptions: TestOptions.Regular8,
                options: TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All),
                symbolValidator: module =&gt;
                {
                    var property = module.ContainingAssembly.GetTypeByMetadataName("C").GetTypeMember("&lt;F&gt;d__0").GetProperty("System.Collections.Generic.IEnumerator&lt;System.Object&gt;.Current");
                    AssertNoNullableAttribute(property.GetAttributes());
                    var method = property.GetMethod;
                    // PROTOTYPE(NullableReferenceTypes): No synthesized attributes for this
                    // case which is inconsisten with IEnumerable&lt;object?[]&gt; in test below.
                    AssertNoNullableAttribute(method.GetReturnTypeAttributes());
                    AssertAttributes(method.GetAttributes(), "System.Diagnostics.DebuggerHiddenAttribute");
                });
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30009</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>UseCompoundAssignment refactoring should support `??=` operator</Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>30009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>30009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The null-coalescing compound operator is being merged to master (

Once that is done and [UseCompoundAssignment]( is merged, then it can be used for `??=` too. </Description>
  </Issue>
  <Issue>
    <IssueID>30005</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Building roslyn creates &gt;10GB of duplicated data.</Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>28/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>30005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After i build roslyn, i end up with &gt;10GB of data duplicated across my drive.  This is both an intensely large amount of IO generated, and it just takes up valuable space.  for example, i'm on a 128GB laptop, so just building ends up taking up a massive amount of space. 

Here's an image to show how bad it is:

![image](

As an example, there are over a dozen copies of Test.Resource.Proprietary, for &gt;1GB of space just for that single file.  

It would be great if Roslyn could be much better here.  Either just building to a single location, or having these files hardlink to themselves.</Description>
  </Issue>
  <Issue>
    <IssueID>30003</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing expected nullable mismatch warnings around constraints checks</Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void ConstraintCyclesFromMetadata_02()
        {
            var source0 =
@"using System;
public class A2&lt;T&gt; where T : class, IEquatable&lt;T?&gt; { }
";
            var source =
@"class B
{
    static void Main()
    {
        new A2&lt;string?&gt;(); // 2
        new A2&lt;string&gt;(); // 3
    }
}";
            // No [NullNullTypes]
            var comp0 = CreateCompilation(source0);
            comp0.VerifyDiagnostics(
                // (2,48): error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
                // public class A2&lt;T&gt; where T : class, IEquatable&lt;T?&gt; { }
                Diagnostic(ErrorCode.ERR_NullableUnconstrainedTypeParameter, "T?").WithLocation(2, 48),
                // (2,49): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                // public class A2&lt;T&gt; where T : class, IEquatable&lt;T?&gt; { }
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(2, 49)
                );

            MetadataReference ref0 = comp0.ToMetadataReference();
            var comp = CreateCompilation(source, references: new[] { ref0 });
            // PROTOTYPE(NullableReferenceTypes): Should report a nullability mismatch warning for A2&lt;string&gt;().
            comp.VerifyDiagnostics(
                // (5,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A2&lt;string?&gt;(); // 2
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(5, 22)
                );
            verifyTypeParameterConstraint("A2", "System.IEquatable&lt;T?&gt;");

            // [NullNullTypes(false)]
            comp0 = CreateCompilation(new[] { source0, NonNullTypesFalse, NonNullTypesAttributesDefinition });
            comp0.VerifyDiagnostics(
                // (2,48): error CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.
                // public class A2&lt;T&gt; where T : class, IEquatable&lt;T?&gt; { }
                Diagnostic(ErrorCode.ERR_NullableUnconstrainedTypeParameter, "T?").WithLocation(2, 48),
                // (2,49): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                // public class A2&lt;T&gt; where T : class, IEquatable&lt;T?&gt; { }
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(2, 49)
                );
            ref0 = comp0.ToMetadataReference();
            comp = CreateCompilation(source, references: new[] { ref0 });
            // PROTOTYPE(NullableReferenceTypes): Should report same warnings as other two cases.
            comp.VerifyDiagnostics(
                // (5,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A2&lt;string?&gt;(); // 2
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(5, 22)
                );
            verifyTypeParameterConstraint("A2", "System.IEquatable&lt;T?&gt;");

            // [NullNullTypes(true)]
            comp0 = CreateCompilation(new[] { source0, NonNullTypesTrue, NonNullTypesAttributesDefinition });
            ref0 = comp0.EmitToImageReference();
            comp = CreateCompilation(source, references: new[] { ref0 });
            // PROTOTYPE(NullableReferenceTypes): Should report a nullability mismatch warning for A2&lt;string&gt;().
            comp.VerifyDiagnostics(
                // (5,16): warning CS8634: The type 'string?' cannot be used as type parameter 'T' in the generic type or method 'A2&lt;T&gt;'. Nullability of type argument 'string?' doesn't match 'class' constraint.
                //         new A2&lt;string?&gt;(); // 2
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint, "string?").WithArguments("A2&lt;T&gt;", "T", "string?").WithLocation(5, 16),
                // (5,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A2&lt;string?&gt;(); // 2
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(5, 22)
                );
            verifyTypeParameterConstraint("A2", "System.IEquatable&lt;T?&gt;");

            void verifyTypeParameterConstraint(string typeName, string expected)
            {
                var type = comp.GetMember&lt;NamedTypeSymbol&gt;(typeName);
                var constraintType = type.TypeParameters[0].ConstraintTypesNoUseSiteDiagnostics[0];
                Assert.Equal(expected, constraintType.ToTestDisplayString());
            }
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>30001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NonNullTypes(true) context is getting dropped from unannotated type during construction, causing missing diagnostics</Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>23/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>30001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>30001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>30001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>30001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void ConstraintCyclesFromMetadata_01()
        {
            var source0 =
@"using System;
public class A0&lt;T&gt; where T : IEquatable&lt;T&gt; { }
public class A1&lt;T&gt; where T : class, IEquatable&lt;T&gt; { }

public class A3&lt;T&gt; where T : struct, IEquatable&lt;T&gt; { }
public class A4&lt;T&gt; where T : struct, IEquatable&lt;T?&gt; { }
public class A5&lt;T&gt; where T : IEquatable&lt;string?&gt; { }
public class A6&lt;T&gt; where T : IEquatable&lt;int?&gt; { }";
            var source =
@"class B
{
    static void Main()
    {
        new A0&lt;string?&gt;(); // 1
        new A0&lt;string&gt;();


        new A5&lt;string?&gt;(); // 4
        new A5&lt;string&gt;(); // 5
    }
}";
            // No [NullNullTypes]
            var comp0 = CreateCompilation(source0);
            var ref0 = comp0.EmitToImageReference();
            var comp = CreateCompilation(source, references: new[] { ref0 });

            var expectedDiagnostics = new[]
            {
                // (5,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A0&lt;string?&gt;(); // 1
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(5, 22),
                // (9,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A5&lt;string?&gt;(); // 4
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(9, 22)
            };

            comp.VerifyDiagnostics(expectedDiagnostics);
            verifyTypeParameterConstraint("A0", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A1", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A3", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A4", "System.IEquatable&lt;T?&gt;");
            verifyTypeParameterConstraint("A5", "System.IEquatable&lt;System.String?&gt;");
            verifyTypeParameterConstraint("A6", "System.IEquatable&lt;System.Int32?&gt;");

            // [NullNullTypes(false)]
            comp0 = CreateCompilation(new[] { source0, NonNullTypesFalse, NonNullTypesAttributesDefinition });
            ref0 = comp0.EmitToImageReference();
            comp = CreateCompilation(source, references: new[] { ref0 });
            comp.VerifyDiagnostics(expectedDiagnostics);
            verifyTypeParameterConstraint("A0", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A1", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A3", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A4", "System.IEquatable&lt;T?&gt;");
            verifyTypeParameterConstraint("A5", "System.IEquatable&lt;System.String?&gt;");
            verifyTypeParameterConstraint("A6", "System.IEquatable&lt;System.Int32?&gt;");

            // [NullNullTypes(true)]
            comp0 = CreateCompilation(new[] { source0, NonNullTypesTrue, NonNullTypesAttributesDefinition });
            ref0 = comp0.EmitToImageReference();
            comp = CreateCompilation(source, references: new[] { ref0 });
            // PROTOTYPE(NullableReferenceTypes): Should report a nullability mismatch warning for A0&lt;string?&gt;().
            comp.VerifyDiagnostics(
                // (5,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A0&lt;string?&gt;(); // 1
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(5, 22),
                // (9,22): warning CS8632: The annotation for nullable reference types should only be used in code within a '[NonNullTypes(true)]' context.
                //         new A5&lt;string?&gt;(); // 4
                Diagnostic(ErrorCode.WRN_MissingNonNullTypesContextForAnnotation, "?").WithLocation(9, 22),
                // (9,16): warning CS8631: The type 'string?' cannot be used as type parameter 'T' in the generic type or method 'A5&lt;T&gt;'. Nullability of type argument 'string?' doesn't match constraint type 'System.IEquatable&lt;string?&gt;'.
                //         new A5&lt;string?&gt;(); // 4
                Diagnostic(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint, "string?").WithArguments("A5&lt;T&gt;", "System.IEquatable&lt;string?&gt;", "T", "string?").WithLocation(9, 16)
                );
            verifyTypeParameterConstraint("A0", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A1", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A3", "System.IEquatable&lt;T&gt;");
            verifyTypeParameterConstraint("A4", "System.IEquatable&lt;T?&gt;");
            verifyTypeParameterConstraint("A5", "System.IEquatable&lt;System.String?&gt;");
            verifyTypeParameterConstraint("A6", "System.IEquatable&lt;System.Int32?&gt;");

            void verifyTypeParameterConstraint(string typeName, string expected)
            {
                var type = comp.GetMember&lt;NamedTypeSymbol&gt;(typeName);
                var constraintType = type.TypeParameters[0].ConstraintTypesNoUseSiteDiagnostics[0];
                Assert.Equal(expected, constraintType.ToTestDisplayString());
            }
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>29999</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected WRN_NullReferenceReceiver warnings</Title>
    <CreatedDate>18/09/2018</CreatedDate>
    <ClosedDate>13/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29999</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29999</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>29999</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>29999</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void ThisAndBaseMemberInLambda()
        {
            var source =
@"delegate void D();
class A
{
    internal string? F;
}
class B : A
{
    void M()
    {
        D d;
        d = () =&gt;
        {
            int n = this.F.Length; // 1
            this.F = string.Empty;
            n = this.F.Length;
        };
        d = () =&gt;
        {
            int n = base.F.Length; // 2
            base.F = string.Empty;
            n = base.F.Length;
        };
    }
}";
            // PROTOTYPE(NullableReferenceTypes): Should not report warning for
            // dereference of `this.F` or `base.F` after assignment.
            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition });
            comp.VerifyDiagnostics(
                // (13,21): warning CS8602: Possible dereference of a null reference.
                //             int n = this.F.Length; // 1
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "this.F").WithLocation(13, 21),
                // (15,17): warning CS8602: Possible dereference of a null reference.
                //             n = this.F.Length;
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "this.F").WithLocation(15, 17),
                // (19,21): warning CS8602: Possible dereference of a null reference.
                //             int n = base.F.Length; // 2
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "base.F").WithLocation(19, 21),
                // (21,17): warning CS8602: Possible dereference of a null reference.
                //             n = base.F.Length;
                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, "base.F").WithLocation(21, 17));
        }
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>29231</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>String Interpolation parses an expression as Text.</Title>
    <CreatedDate>11/08/2018</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: `Visual Basic Tools   2.9.0-beta8-63119-10`

**Steps to Reproduce**:

1. The is a repo of the issue. 
``
The classifier / parser thinks the `End.ToString()` is text and not an expression.
2.  Now escape the `End` eg `[End]`
3.  Classified / Parsed correctly

I'd expect the expression to be parsed correctly with and error diagnostic (to indicate the identifier `End` could not be found.). A possible additional diagnostic could be possible, to indicate an unescaped keyword identifier usage. </Description>
  </Issue>
  <Issue>
    <IssueID>29223</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>29223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replacement for managed EnC module updates</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>01/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>29223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>29223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>29223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Corresponding VSO bug: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>29223</IssueID>
        <PullRequestID>36727</PullRequestID>
        <Title>Move EnC manager implementation down to Features layer (16.3 P1)</Title>
        <Description>Replaces legacy EnC manager implementation with a new one.

The previous implementation of the EnC manager in the debugger communicated with language services via project system coupled interfaces (`IVsENCRebuildableProjectCfg*`). This had many limitations, including necessity to perform IO synchronously on UI thread, lack of support for multi-targeting, necessity to make buffers readonly while application is running and for projects whose modules were not loaded to the debugee process etc.

The new architecture completely removes the dependency on Project System. The debugger communicates with language services via a MEF component. Language services export
1) `IDebugStateChangeListener` 
The implementation of this interface receives callbacks from the debugger when the debug state changes:

``

2) `IEditAndContinueManagedModuleUpdateProvider`

The implementation responds to the debugger's requests for updates in managed modules. 
The debugger sends these requests when changes made in source files need to be applied due to a user action (e.g. "continue" in break mode, change current IP while in break mode, etc.).

### Avoiding read-only buffers ###
Previously we made buffers read only in scenarios where we couldn't apply the change at the end of the current edit session ("continue"). This could be for multiple reasons:

1) Changing source files while the application is running
Changes can only be applied when the debuggee is stopped. 

We let the user made changes while the debuggee is running. We report a warning for these changes notifying the user that the changes are not being applied while the debugee is running. 

When the debugger stops on a breakpoint in a modified source, the source won't match the one that's being executed so based on the settings the debugger may display a dialog saying so. We will follow up to improve that experience, but not going to block the change on it.

2) Changing source files of projects during edit session whose corresponding module is not loaded to the debugee
Since the modules are not loaded we can't apply the delta at the end of the edit session (there is no module in the debugee process to apply the delta to).

We calculate the EnC deltas for all projects changed during edit session regardless of whether their modules are loaded or not. At the end of the session we apply deltas only to modules that are loaded, but we remember all the deltas we calculated for next opportunity to apply changes. Such opportunity occurs when a module is loaded while the debuggee is running. At that point the debuggee is stopped while the even is processed and we can apply all deltas that were made to the project that corresponds to the module. Note that this also handles the case where multiple instances of the same module are loaded to the debuggee (e.g. to different AppDomains or AssemblyLoadContexts). The previous design didn't account for this scenario resulting in bugs like 

3) Other reasons that disallow EnC (e.g. being stopped at exception, the debuggee process not supporting EnC, etc.).

We do not block the user from making changes in the source files. Instead we report regular errors like we do for other Rude Edits. We use new APIs added to Concord to support querying for availability of EnC for specific module.

Fixes 
Fixes 
Fixes 
Fixes 
Fixes 
Fixes 
Fixes 
Fixes 
Fixes [DevDiv 750649](
Fixes [DevDiv 551604](

See also 
</Description>
        <CreatedDate>25/06/2019</CreatedDate>
        <ClosedDate>28/06/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>29223</IssueID>
            <PullRequestID>36727</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>29223</IssueID>
            <PullRequestID>36727</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Interactive-EnC</Name>
            <IssueID>29223</IssueID>
            <PullRequestID>36727</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>29222</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Variable scope computation is wrong when `o is string s == true` is used</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>13/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>29222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static void PatternMatchingSample1(object o)
{
    if (o is string s)
    {
        // Everything is fine: s is defined
        Console.WriteLine(s);
    }
}

static void PatternMatchingSample2(object o)
{
    if (o is string s == true) // or o is string s is true
    {
        // Local variable might not be initialized
        Console.WriteLine(s);
    }
}


These two programs generate exactly the same IL but the **second version fails to compile** with 'Local variable 's' might not be initialized'.

The reason why I think it makes sense to support the other patterns is to allow this (inverted) case:

csharp
static void PatternMatchingSample2(object o)
{
    if (o is string s is false)
    {
        return;
    }
    
    // Local variable 's' might not be initialized
    Console.WriteLine($"o is '{s}'");
}
`</Code>
    <Description>**Steps to Reproduce**:

Here are two equivalent C# programs (the compiler generates exactly the same IL):

``

IMO, ` if (o is string s is false)` is more readable than ` if (!(o is string)` but the case mentioned above fails to compile with the same reason: `s` variable might not be initialized.</Description>
  </Issue>
  <Issue>
    <IssueID>29218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>29218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>implement a combined use of IntelliSenseCommandHandler and editor VSCommanding.ICommandHandler(Of DownKeyCommandArgs)</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>18/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- TestKeepUserSelectedItem2 (SignatureHelp) requires IntelliSenseCommandHandler
- TestNamedParameterSortOrder (VisualBasicCompletionCommandHandlerTests)  requiresVSCommanding.ICommandHandler(Of DownKeyCommandArgs)</Description>
  </Issue>
  <Issue>
    <IssueID>29196</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Replace with method" only shows up if you are within the name of a property</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>29196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Unlike "Convert to full Property", "Replace with method" only shows up if you are within the name of a property.

1. Highlight between the $

``

Expected: 
Replace to method to show
![image](

Actual:
![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>29195</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Have to select an entire property/field body before you can generate a constructor from it</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>29195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>29195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>You have to be too precise to generate a constructor, you need to select all of a properties/fields body before you are offered to ability to generate a constructor that initializes it.

I ran into this while doing a talk, and so did Allison from the platform team: 

1. Place cursor anywhere within Foo

``


</Description>
  </Issue>
  <Issue>
    <IssueID>29194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csc.dll code 139 error when building project on .NET Core 2.1.302 Ubuntu 16.04 ARM64</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>21/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>29194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
nvidia@tegra-ubuntu:~$ dotnet --info
.NET Core SDK (reflecting any global.json):
 Version:   2.1.302
 Commit:    9048955601

Runtime Environment:
 OS Name:     ubuntu
 OS Version:  16.04
 OS Platform: Linux
 RID:         ubuntu.16.04-arm64
 Base Path:   /usr/share/dotnet/sdk/2.1.302/

Host (useful for support):
  Version: 2.1.2
  Commit:  811c3ce6c0

.NET Core SDKs installed:
  2.1.302 [/usr/share/dotnet/sdk]

.NET Core runtimes installed:
  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
nvidia@tegra-ubuntu:~$ 



However I am unable to run any dotnet application (even the hello world example) on my Jetson TX2.



nvidia@tegra-ubuntu:~$ dotnet new console -o myApp --force
The template "Console Application" was created successfully.

Processing post-creation actions...
Running 'dotnet restore' on myApp/myApp.csproj...
  Restoring packages for /home/nvidia/myApp/myApp.csproj...
  Generating MSBuild file /home/nvidia/myApp/obj/myApp.csproj.nuget.g.props.
  Generating MSBuild file /home/nvidia/myApp/obj/myApp.csproj.nuget.g.targets.
  Restore completed in 1.58 sec for /home/nvidia/myApp/myApp.csproj.

Restore succeeded.


nvidia@tegra-ubuntu:~/myApp$ dotnet run
/usr/share/dotnet/sdk/2.1.302/Roslyn/Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.dll" exited with code 139. [/home/nvidia/myApp/myApp.csproj]

The build failed. Please fix the build errors and run again.
`</Code>
    <Description>I have downloaded .NET Core SDK for linux ARM64 on my Jetson TX2 running ubuntu 16.04.

``


I wish to build iotedge for Jetson TX2 and dotnet Core 2.1 is a dependency for the same.</Description>
  </Issue>
  <Issue>
    <IssueID>29190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Do not get any code fixes when you highlight a parameter</Title>
    <CreatedDate>10/08/2018</CreatedDate>
    <ClosedDate>15/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Double-click on "value" to highlight it

``

2. Ctrl+.

Expected:

![image](

Actual:

Nothing
</Description>
  </Issue>
  <Issue>
    <IssueID>29189</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>29189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing error for ! on value type</Title>
    <CreatedDate>09/08/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>29189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>29189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

(WIP in `bang-value` branch)</Description>
  </Issue>
  <Issue>
    <IssueID>29186</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>29186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>StackOverflowException binding attribute with generic type argument</Title>
    <CreatedDate>09/08/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>29186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
class AAttribute : Attribute
{
    AAttribute(object o) { }
}
interface IA { }
interface IB&lt;T&gt; where T : IA { }
[A(typeof(IB&lt;IA&gt;))]
class C
{
}
`</Code>
    <Description>Compile with `-langversion:8`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>29175</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>need an option for output referenced assembly files to destination directory when build or publish a .netstandard project</Title>
    <CreatedDate>09/08/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>29175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 15.7.4
**Steps to Reproduce**:

1. Create a .Net Standard project
2. Add Some NuGet package, such as Newtonsoft.Json
3. Publish the project, and will generate only a .nupkg file

**Expected Behavior**:
Output all referenced assembly files like .net core project, and a .nupkg file
**Actual Behavior**:
Only a .nupkg file. </Description>
  </Issue>
  <Issue>
    <IssueID>29173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>29173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Escape character classification needs to be bikeshedded.</Title>
    <CreatedDate>09/08/2018</CreatedDate>
    <ClosedDate>20/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>29173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-User Friendly</Name>
        <IssueID>29173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Original PR: 

We need to think through the appropriate colors here for light/dark/contrast etc.  Notable, whatever we come up with for the dark theme needs to be integrated into the VS build.

Note: this also needs to be done for regexes.</Description>
  </Issue>
  <Issue>
    <IssueID>29172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>29172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify alt interpolated verbatim strings with VirtualChars</Title>
    <CreatedDate>08/08/2018</CreatedDate>
    <ClosedDate>14/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>29172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Follow up on PR  interacting with new C# 8 feature.</Description>
  </Issue>
  <Issue>
    <IssueID>29168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>29168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>29168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan: null coalescing assignment `a ??= b`</Title>
    <CreatedDate>08/08/2018</CreatedDate>
    <ClosedDate>28/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Language proposal: 
LDM notes: 
Implementation: 

- [x] Check language version 8.0
  - [x] Upgrade Project available
- [x] Parsing
  - [x] parses regardless of language version
  - [x] has same precedence as simple assignment
  - [x] associativity
  - [x] `??=` is a token
- [x] `a ??= b` is an r-value of type `A`, even if `A` is nullable and `B` is not
- [x] `a` must be a reference type or nullable value type or unconstrained type parameter
- [x] Test is `a is null`, `operator==` is ignored
- [x] Conversions of `b` only; no conversions of `A`
  - [x] implicit conversion from `B` to `A` or `A0` (where `A` is `A0?`)
  - [x] implicit user-defined conversion from `B` to `A` or `A0`
    - [x] `operator` can be defined in either `A` or `B`
  - [x] `null` conversion
  - [x] `default` conversion
    - [x] test conversion of `default` is to `A` not `A0`; issue warning since conversion to `Nullable&lt;A0&gt;` was probably not intended
- [ ] `a` is an l-value and r-value
  - [x] by-val or `ref` local, possibly captured
  - [x] by-val or `ref` parameter, possibly captured
  - [x] writable field
  - [x] read/write property or readable `ref` property
  - [x] read/write indexer or readable `ref` indexer
  - [x] read/write COM indexed property
  - [x] read/write event
  - [x] `ref` returning invocation
  - [x] member of `dynamic` receiver
  - [x] `this` is not allowed, for `class` and `struct`
  - [x] pointers are not allowed
- [x] `b` is an r-value expression including
  - [x] by-val or `ref` local, possibly captured
  - [x] by-val or `ref` parameter, possibly captured
- [x] `a ?? b` is supported for unconstrained type parameters (no reference or value type constraints)
  - [x] `A` is an unconstrained type parameter and `B` is implicitly convertible to `A`, with result type `A`
  - [x] `A` is an unconstrained type parameter and `A` is implicitly convertible to `B`, with result type `B`
  - [x] `A` is an unconstrained type parameter and `B` is `dynamic`, with result type `dynamic`
- [x] `a ??= b` is supported for unconstrained type parameters (no reference or value type constraints)
  - [x] `A` is an unconstrained type parameter and `B` is implicitly convertible to `A`, with result type `A`
- [x] `await` is supported within `a` and `b`
  - [x] with side-effects in `a` and `b`
- [x] `ref`
  - [x] `ref a ??= ref b; // error`
  - [x] `ref a ??= b; // error`
- [x] `in` parameter: `void M(in object x) { }`
  - [x] `M(a ??= b); // ok`
  - [x] `M(in (a ??= b)); // error`
- [x] `a ??= throw expr` is not allowed
- [x] Val escape
  - [x] `Span&lt;int&gt;? a = expr; a ??= stackAllocIntoSpan;`
- [x] Flow analysis
  - [x] Variables definitely assigned in `a` are definitely assigned before `b` and after expression
  - [x] Variables only assigned in `b` are not definitely assigned after expression
  - [x] `out var` in `b` is definitely assigned in remainder of `b`, but not definitely assigned after `??=`
- [x] Lowering
  - [x] `a ??= b` is lowered to `tmpA ?? (tmpA = b)`
  - [x] Side-effects are executed exactly once for `a`, even if `a ??= b` is used as an expression
  - [x] Side-effects are only executed for `b` if `a` is `null`
- [x] SemanticModel
  - [x] `GetTypeInfo` includes the type and converted type of `b`
  - [x] `IOperation`
  - [x] CFG
- [x] IDE
  - [x] Auto-formatting does not add space between `??` and `=`</Description>
  </Issue>
  <Issue>
    <IssueID>29164</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Covariance is not supported in generic class</Title>
    <CreatedDate>08/08/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>29164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>29164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;

namespace test
{
    class Program
    {
	static void Main()
	{
		Factory&lt;Entity&gt; f = null;
		Factory&lt;IEntity&gt; i;
	
		i = f;	
	}       
    }

	interface IEntity {}
	delegate TEntity Factory&lt;out TEntity&gt;() where TEntity : IEntity;

	class Entity : IEntity {}

	class FactoryClass&lt;TEntity&gt; where TEntity : IEntity {
	
		public void Create(Factory&lt;TEntity&gt; factory) 
		{
			Factory&lt;IEntity&gt; i;
		
			i = factory;
		}
	}
}

**Expected Behavior**:
The compilation should succeed as the Factory delegate is covariant.

Please observe that the three lines in Main compiles:
 c#
Factory&lt;Entity&gt; f = null;
Factory&lt;IEntity&gt; i;
i = f;	

**Actual Behavior**:
Compiler error:

Program.cs(27,8): error CS0029: Cannot implicitly convert type 'test.Factory&lt;TEntity&gt;' to 'test.Factory&lt;test.IEntity&gt;' [C:\Users\bc3586\Desktop\test\test.csproj]


Also explicit cast does not work either giving rise to the following error:

Program.cs(27,8): error CS0030: Cannot convert type 'test.Factory&lt;TEntity&gt;' to 'test.Factory&lt;test.IEntity&gt;' [C:\Users\bc3586\Desktop\test\test.csproj]
`</Code>
    <Description>**Version Used**: 
DotNet Core 2.1.202

**Steps to Reproduce**:
Compile the following code:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>29152</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warn on `null ?? ""`</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>07/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>29152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The C# language makes it illegal to have a null literal on the left-hand-side of a null coalescing expression, but the compiler permits it for compatibility with the native compiler, which also permitted it.

Because such code is not legal C#, we should produce a warning for this situation in a warning wave.
</Description>
  </Issue>
  <Issue>
    <IssueID>29150</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>29150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Revert "latest" and "default" and add "beta" tag</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>05/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [x] We need to have "default" = 7.0 (~~or 7.3?~~) and "latest" = 7.3.
- [ ] ~~We should still allow an explicit selection of "8.0-beta".~~ (we stuck with "8.0")
- [x] project-system change to display "8.0" and "beta" 

Note the project-system change ( will also need to include a beta label.</Description>
  </Issue>
  <Issue>
    <IssueID>29146</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>29146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Mechanism to annotate unconstrained type parameters</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>23/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>29146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>29146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>29146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>29146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We don't allow `T?` when `T` is unconstrained. But we need some other mechanism that is equivalent.
One scenario is:
``</Description>
  </Issue>
  <Issue>
    <IssueID>29145</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>29145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EnC allows adding explicit interface implementation methods</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>29/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>29145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>29145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
[ENCMetadataCrashTest.zip](

**Version Used**: 
VS 15.8 Preview

**Steps to Reproduce**:

See attached project, the issue repros with a subclass where it implements interfaces defined in another module, then adds explicit implementations of methods with the same signature from two different interfaces.

1.	Set a breakpoint in Main
2.	Make sure string IConflict.Get() and string IConflict2.Get() are commented out in SubClass
3.	Start debugging
4.	Uncomment string IConflict.Get() 
5.	Step once
6.	Uncomment string IConflict2.Get()
7.	Step once more
8.	AV in RegMeta::PreSave

**Expected Behavior**:
Rude edit is reported and user cannot proceed debugging

**Actual Behavior**:
VS crashes</Description>
  </Issue>
  <Issue>
    <IssueID>29143</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>29143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Debugging unhandled exceptions does not work well with async Main</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>29143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>29143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>29143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>29143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        throw new Exception();
    }
}
`</Code>
    <Description>**Version Used**: VS 15.7.6

When I have an unhandled exception in a regular `void Main` method, everything works as it should: I can see the call stack, the code is stopped at a reasonable point, etc.:

![](

But when the same thing happens with `async Task Main`, it's much worse: call stack offers no useful information, the code isn't stopped in my code, etc.:

![](

The code I used is:

``

Note that I'm specifically talking about what happens with unhandled exceptions. If "Break When Thrown" is set, it works well in both cases.

There's a good chance this is not the right repo for this issue. If that's the case, feel free to move it as appropriate.</Description>
  </Issue>
  <Issue>
    <IssueID>29130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>29130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Native PDB writer incorrectly assumes UTF8 3 character max encoding</Title>
    <CreatedDate>07/08/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>29130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>29130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
            if (str.Length &lt; maxLength / 3) //UTF-8 uses at most 3 bytes per char
            {
                return false;
            }
`</Code>
    <Description>The native PDB writer has a quick check on name length that assumes UTF8 can only use three bytes per character.

``



The UTF8 spec allows for four. 

</Description>
  </Issue>
  <Issue>
    <IssueID>28954</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>28954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Race condition in SourceEventSymbol</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> none
	at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
	at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
	at System.Threading.Tasks.Task.Wait()
	at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
	at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
	Symbols\Source\SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
	Symbols\Source\SourceModuleSymbol.cs(258,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
	Symbols\Source\SourceAssemblySymbol.cs(908,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
	Compilation\CSharpCompilation.cs(2332,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
	Compilation\CSharpCompilation.cs(2219,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
	Compilation\CSharpCompilation.cs(2155,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
	Compilation\CSharpCompilation.cs(2149,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
	Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
	Attributes\AttributeTests_WellKnownAttributes.cs(6944,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase()
	----- Inner Stack Trace -----
	ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)
	at System.Diagnostics.TraceListener.Fail(String message)
	at System.Diagnostics.TraceInternal.Fail(String message)
	at System.Diagnostics.Debug.Assert(Boolean condition)
	Symbols\Source\SourceEventSymbol.cs(184,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributesBag()
	Symbols\Source\SourceEventSymbol.cs(200,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributes()
	Symbols\Symbol_Attributes.cs(725,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteObsoleteAttribute()
	Symbols\Source\SourceMemberContainerSymbol_ImplementationChecks.cs(693,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckOverrideMember(Symbol overridingMember, OverriddenOrHiddenMembersResult overriddenOrHiddenMembers, DiagnosticBag diagnostics, Boolean&amp; suppressAccessors)
	Symbols\Source\SourceMemberContainerSymbol_ImplementationChecks.cs(463,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken)
	Symbols\Source\SourceMemberContainerSymbol_ImplementationChecks.cs(31,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken)
	Symbols\Source\SourceMemberContainerSymbol.cs(499,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
	Symbols\Symbol.cs(712,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
	Symbols\Source\SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass47_1.&lt;ForceComplete&gt;b__0(Int32 i)
	InternalUtilities\UICultureUtilities.cs(157,0): at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
	at System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1()
	at System.Threading.Tasks.Task.InnerInvoke()
	at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)
	at System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object )
`</Code>
    <Description>The test `Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase` failed once on my desktop with an assertion failure, likely indicating a race condition in the compiler. Here is the stack trace:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>28951</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing warning on tuple nullability</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>06/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>28951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>28949</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Poor error for using nullable type in pattern</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>30/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>28949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>28949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>28946</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# multi-line comments are indented too much</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>14/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28946</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28946</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>28946</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Updated (May 14, 2020): Fixed copy/paste error that persisted since 2018.**

**Version Used**: Visual Studio 2017 Professional 15.7.5
**Original report**: 

Moved to a new issue, suggested from here:


**Steps to Reproduce**:

1. Copy the following code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>28941</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Introduce Local isn't triggered when the selected expression is followed by an indexer</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>13/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>28941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>28941</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
byte[] getArray() =&gt; null;
void test()
{
    var foo = getArray()[0]; // select here
    var bar = getArray();
}
`</Code>
    <Description>**Version Used**: 
15.8.0 Preview 5.0

**Steps to Reproduce**:
``
In the `foo`-assignment-line, select the `getArray()` sub-expression and activate the code fixes.

**Expected Behavior**:
`Introduce Local` should be offered

**Actual Behavior**:
`Introduce Local` isn't offered

**Notes**
When I select the `getArray()` expression in the `bar`-line and activate "for all occurences", then the call in the `bar`-line is recognized correctly and extracted successfully.


![introduce-local-indexer](
</Description>
  </Issue>
  <Issue>
    <IssueID>28940</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Shyam-Gupta</FixedById>
        <IssueID>28940</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn no longer deploys after building locally.</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>15/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>28940</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28940</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>28940</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
----- Catalog construction errors -----
Error #1
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;&gt;c__DisplayClass62_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #2
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;&gt;c". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #3
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;&gt;c__DisplayClass63_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #4
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;ResetAsyncWorker&gt;d__74". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #5
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;ExecuteCodeAsync&gt;d__75". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #6
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.InteractiveEvaluator+&lt;SetPathsAsync&gt;d__80". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #7
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.AbstractSendToInteractiveSubmissionProvider+&lt;&gt;c". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #8
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.AbstractSendToInteractiveSubmissionProvider+&lt;&gt;c__DisplayClass5_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #9
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.AbstractSendToInteractiveSubmissionProvider+&lt;&gt;c__DisplayClass6_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #10
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.CodeAnalysis.Editor.Interactive.AbstractSendToInteractiveSubmissionProvider+&lt;ExpandSelectionAsync&gt;d__6". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #11
Microsoft.VisualStudio.Composition.PartDiscoveryException: ReflectionTypeLoadException while enumerating types in assembly "c:\users\cyrus\appdata\local\microsoft\visualstudio\15.0_d435a3f4roslyndev\extensions\microsoft\roslyn interactive components\42.42.42.42424\Microsoft.CodeAnalysis.InteractiveEditorFeatures.dll". Results will be incomplete. ---&gt; System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.
   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
   at System.Reflection.RuntimeModule.GetTypes()
   at System.Reflection.Assembly.GetTypes()
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.GetTypes(Assembly assembly)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass30_0.&lt;CreateAssemblyDiscoveryBlockChain&gt;b__0(Assembly a)
   --- End of inner exception stack trace ---
System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Features, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.EditorFeatures, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

Error #12
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.VisualStudio.LanguageServices.Implementation.Options.InternalOptionsControl+&lt;&gt;c__DisplayClass1_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #13
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Microsoft.VisualStudio.LanguageServices.Implementation.Options.InternalOptionsControl+&lt;&gt;c". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #14
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Roslyn.VisualStudio.DiagnosticsWindow.OptionsPages.PerformanceLoggersPage+&lt;&gt;c__DisplayClass3_0". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #15
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Roslyn.VisualStudio.DiagnosticsWindow.OptionsPages.PerformanceLoggersPage+&lt;GetLoggerTypes&gt;d__5". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #16
Microsoft.VisualStudio.Composition.PartDiscoveryException: ReflectionTypeLoadException while enumerating types in assembly "C:\USERS\CYRUS\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\15.0_D435A3F4ROSLYNDEV\EXTENSIONS\MICROSOFT\ROSLYN DIAGNOSTICS\42.42.42.42424\Roslyn.VisualStudio.DiagnosticsWindow.dll". Results will be incomplete. ---&gt; System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.
   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
   at System.Reflection.RuntimeModule.GetTypes()
   at System.Reflection.Assembly.GetTypes()
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.GetTypes(Assembly assembly)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass30_0.&lt;CreateAssemblyDiscoveryBlockChain&gt;b__0(Assembly a)
   --- End of inner exception stack trace ---
System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.VisualStudio.LanguageServices.Implementation, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

Error #17
Microsoft.VisualStudio.Composition.PartDiscoveryException: Failure while scanning type "Roslyn.Hosting.Diagnostics.Waiters.TestingOnly_WaitingService". ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Signature..ctor(IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
   at System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy()
   at System.Reflection.RuntimeConstructorInfo.GetParameters()
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__17`1.&lt;GetImportingConstructor&gt;b__17_2(ConstructorInfo ctor)
   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at Microsoft.VisualStudio.Composition.PartDiscovery.GetImportingConstructor[TImportingConstructorAttribute](Type type, Boolean publicOnly)
   at Microsoft.VisualStudio.Composition.AttributedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.CreatePart(Type partType, Boolean typeExplicitlyRequested)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass29_0.&lt;CreateDiscoveryBlockChain&gt;b__0(Type type)
   --- End of inner exception stack trace ---
Error #18
Microsoft.VisualStudio.Composition.PartDiscoveryException: ReflectionTypeLoadException while enumerating types in assembly "C:\USERS\CYRUS\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\15.0_D435A3F4ROSLYNDEV\EXTENSIONS\MICROSOFT\VISUAL STUDIO INTEGRATION TEST SUPPORT\42.42.42.42424\Roslyn.Hosting.Diagnostics.dll". Results will be incomplete. ---&gt; System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.
   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
   at System.Reflection.RuntimeModule.GetTypes()
   at System.Reflection.Assembly.GetTypes()
   at Microsoft.VisualStudio.Composition.PartDiscovery.CombinedPartDiscovery.GetTypes(Assembly assembly)
   at Microsoft.VisualStudio.Composition.PartDiscovery.&lt;&gt;c__DisplayClass30_0.&lt;CreateAssemblyDiscoveryBlockChain&gt;b__0(Assembly a)
   --- End of inner exception stack trace ---
System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.
File name: 'Microsoft.CodeAnalysis.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].

----- CompositionError level 1 ------
Microsoft.CodeAnalysis.Editor.TypeScript.ScriptContexts.DefaultTypeScriptWorkspace.ctor(typeScriptWorkspaceCore): expected exactly 1 export matching constraints:
    Contract name: Microsoft.CodeAnalysis.Editor.TypeScript.ScriptContexts.ITypeScriptWorkspaceCore
    TypeIdentityName: Microsoft.CodeAnalysis.Editor.TypeScript.ScriptContexts.ITypeScriptWorkspaceCore
but found 0.
   part definition Microsoft.CodeAnalysis.Editor.TypeScript.ScriptContexts.DefaultTypeScriptWorkspace

Microsoft.CodeAnalysis.Options.GlobalOptionService.ctor(optionProviders): is not assignable from exported MEF value Roslyn.VisualStudio.DiagnosticsWindow.Remote.RemoteHostClientFactoryOptionsProvider.
   part definition Microsoft.CodeAnalysis.Options.GlobalOptionService

----- CompositionError level 2 ------
Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister.ctor(optionService): expected exactly 1 export matching constraints:
    Contract name: Microsoft.CodeAnalysis.Options.IGlobalOptionService
    TypeIdentityName: Microsoft.CodeAnalysis.Options.IGlobalOptionService
but found 0.
   part definition Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister

Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.ctor(globalOptionService): expected exactly 1 export matching constraints:
    Contract name: Microsoft.CodeAnalysis.Options.IGlobalOptionService
    TypeIdentityName: Microsoft.CodeAnalysis.Options.IGlobalOptionService
but found 0.
   part definition Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister

Microsoft.CodeAnalysis.Options.OptionServiceFactory.ctor(globalOptionService): expected exactly 1 export matching constraints:
    Contract name: Microsoft.CodeAnalysis.Options.IGlobalOptionService
    TypeIdentityName: Microsoft.CodeAnalysis.Options.IGlobalOptionService
but found 0.
   part definition Microsoft.CodeAnalysis.Options.OptionServiceFactory
`</Code>
    <Description>I'm up to date in master.  I've git-cleaned.  I've deleted my nuget cache.  I've built fully.  I've deployed.  And i cannot launch roslyn because of the following:

![image](

My component model cache has this error log:

&lt;details&gt;

``

&lt;/details&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>28939</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>28939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Stale errors after rename in the editor</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>09/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>28939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.8.0 Preview 5.0

**Steps to Reproduce**:
I don't know specifically. I moved all code from a base class to the derived class, removed the base class, and changed the `protected` `const` and `readonly` fields to `private`. After that, squiggles appeared because those two fields started with a capital letter instead of lower case. I `F2`-renamed both fields to a lower case first letter and the two shown squiggle categories remained.

After the next edit (hitting `space` somewhere), the errors disappeared.

**Expected Behavior**:

No errors / squiggles. There's nothing wrong with the code and the errors refer to a situation that's not valid anymore or has never been valid.

**Actual Behavior**:
Squiggles.

`const` member:
![image](
`readonly` member:
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>28938</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>DebuggerDisplay is ineffective in Dictionary&lt;TKey, TValue&gt;</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>28938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>28938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>28938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017 15.7.5

**Steps to Reproduce**:

1. Type codes:
``
2. Debug it and break in the end of 'Main'

**Expected Behavior**: Always show 'demo'

**Actual Behavior**: show '3' in 'dic'
</Description>
  </Issue>
  <Issue>
    <IssueID>28937</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS tooltip should prioritize errors over warnings</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>30/07/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

VS 15.7.3

**Steps to Reproduce**:

Create a new Lib and enable the XML Documentation File.

The warning CS1591 hides the error CS0542 and the error is only visible after fixing the warning.

![grafik](

![grafik](

__Actual:__

It shows only the warning.

__Expected:__

Errors should have a higher priority than warnings, it should show either only the error, or both.</Description>
  </Issue>
  <Issue>
    <IssueID>28935</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>28935</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cannot override /features value cleanly</Title>
    <CreatedDate>30/07/2018</CreatedDate>
    <ClosedDate>02/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28935</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>28935</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>28935</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
    &lt;Features&gt;strict&lt;/Features&gt;

Now in one .csproj I want to not apply strict. In order to not wipe out whatever is in `&lt;Features&gt;` I would like to do something like one of these 
xml
    &lt;Features&gt;$(Features);strict=false&lt;/Features&gt;
    &lt;Features&gt;$(Features);strict-&lt;/Features&gt;

These do not work currently and I have to be a bit hacky:
xml
    &lt;Features&gt;$(Features.Replace('strict', '')&lt;/Features&gt;
`</Code>
    <Description>**Version Used**: 
2.8.0.62811 (9081e399)

**Steps to Reproduce**:

It appears to be not possible to override `/feature:strict` later in the command line. As a general rule it is helpful for command line parsers to allow flags to be overridable. Scenarios include overriding response file entries, or (in an MSBuild project) overriding inherited property values.

For example imagine I have a .props file that globally sets this in my source tree
``
Looking at the code here, it looked like `/feature:strict=false` might work:


however the internal flag is set only by the presence of `strict` in the features dictionary, without regard to its value:


**Expected Behavior**:

Allow features to be negated like ` /features:strict=false` or ` /features:strict-` or equivalent in MSBuild properties.

BTW `/features` is not documented in the output of `/?`


</Description>
  </Issue>
  <Issue>
    <IssueID>28932</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>28932</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>The imported project C:\…\v4.5\Microsoft.Expression.Blend.WPF.targets" was not found</Title>
    <CreatedDate>29/07/2018</CreatedDate>
    <ClosedDate>18/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>28932</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>28932</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was developing my WPF projects using Visual Studio 2013 in my old window 7. But when I installed new Windows 10 and also Visual Studio 2017 and tried to open my project; my project fail to load and got this error message:

the imported project "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Expression\Blend.NETFramework\v4.5\Microsoft.Expression.Blend.WPF.targets" was not found. Also, tried to fiend "Microsoft\Expression\Blend.NetFramework\v.4.5\Microsoft.Expression.Blend.WPF.targets in the fallback searchpath(s) for $(MSBuildExtensionsPath) - "C:\Progam Files (x86)\MSBuild" . These search paths are defined in "C:\Users\AdminPC\AppData\Local\Microsoft\VisualStudio\15.0_51bebed7\devenv.exe.config" . Confirm that the path in the declaration is correct , and that the file exists on the disk in one of the search paths. C:\Users\AdminPC\Documents\Visual Studio 2013\Projects\MyCustomMessages\MyCustomMessages.csproj

I Searched for some solutions I found I have to install BlendWPFSDKv4_en.msi Version 4, but still doesn't help also there is no BlendWPFSDKv4_en.msi version 4.5. What Should I do, Shall I install VS 2013 in order to fix this issue?

Thanks and Regards

The Error Message Displayed here:
</Description>
  </Issue>
  <Issue>
    <IssueID>28931</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Pressing Apply from Preview Changes for IntelliCode does nothing</Title>
    <CreatedDate>29/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>28931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>28931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>28931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm debugging and I notice that I have a &amp;quot;IDE0019 Use pattern matching&amp;quot; suggestion in the Visual Studio editor. I click Preview Changes so that I can look at the suggested changes. I like the changes, so I press Apply. Nothing happens. No changes are applied. This is because the file is locked during debugging, but VS didn't tell me that--it just acted as if it was ignoring my pressing the Apply button. Either it shouldn't offer to make changes or it should tell me when I try to apply them that it cannot do so while the file is locked for debugging._This issue has been moved from VSTS ticketId: 652498__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>28892</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>28892</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Follow up issues for #28587</Title>
    <CreatedDate>27/07/2018</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28892</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>28892</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There's some follow up work for #28587, which implements the first end-to-end compilation of the `using var` feature.

* [x] Need to support multiple declarations
* [x] Need to add binding check to see if the type can be used as a using
* [x] Need to store information from the `using` binder so we know which method to call and which conversion to do
* [x] Address diagnostic messages to be up to date:
* *  [x] ERR_NoConvToIAsyncDisp: async -&gt; asynchronous, to avoid implying an async using (see 
* * [x] ERR_NoConvToIAsyncDisp: seems incomplete (a public DisposeAsync() method works too) (see 
* * [x] ERR_NoConvToIDisp: confirm whether this message should say "instance" (see 
* * [ ] allow extension methods
* * [x] use ERR_NoConvToIAsyncDispWrongAsync (added in #30363)
* [x] Use CSharpTestBase.AsyncStreamsTypes instead of copying around the interface in tests</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28892</IssueID>
        <PullRequestID>28587</PullRequestID>
        <Title>Using Var Binding</Title>
        <Description>Covers most cases including multiples declarations and forbidding the using var within switch sections. Definite assignment is not covered within this PR.</Description>
        <CreatedDate>16/07/2018</CreatedDate>
        <ClosedDate>27/07/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>28587</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>28587</PullRequestID>
            <IssueID>28892</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28892</IssueID>
        <PullRequestID>31201</PullRequestID>
        <Title>Implement async pattern dispose</Title>
        <Description>Enable pattern async dispose: 
- Search for a task-like returning DisposeAsync when await is present
- Correctly lower awaitable pattern methods
- Add tests

Some basic declaration statement refactoring</Description>
        <CreatedDate>15/11/2018</CreatedDate>
        <ClosedDate>07/12/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>31201</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>31201</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>31201</PullRequestID>
            <IssueID>28892</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28892</IssueID>
        <PullRequestID>30363</PullRequestID>
        <Title>Async-streams: minimal test for IOperation and CFG. Improve diagnostics</Title>
        <Description>- Added a couple of tests to verify that IOperation/CFG doesn't crash on async `foreach`, async `using` or async-iterator method. Opened follow-up issue for proper design/implementation (
- Refined diagnostic for wrong "async-ness" to help users switch between regular `using` and async `using`</Description>
        <CreatedDate>07/10/2018</CreatedDate>
        <ClosedDate>09/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>30363</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>30363</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>30363</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>28892</IssueID>
            <PullRequestID>30363</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>30363</PullRequestID>
            <IssueID>28892</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28870</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot use MSBuildWorkspace in .NET Core Console Application</Title>
    <CreatedDate>27/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>28870</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm moving a project from .Net Framework 4.6.1 to .Net Core and I have a problem with MSBuildWorkspace 

**Version Used**: 2.7.0

**Steps to Reproduce**:

1. Create a new .NET Core Console Application project (VS Professional 2017 Version 15.7.5,  .Net Core 2.1.202) 
2. Install nuget-packages for **Microsoft.CodeAnalysis**
3. In the main method write code:
`var workspace = MSBuildWorkspace.Create();`


**Expected Behavior**:

MSBuildWorkspace should compile by using Microsoft.CodeAnalysis.MSBuild.

**Actual Behavior**:

**Compilation error** :  'MSBuildWorkspace' could not be found (are you missing a using directive or an assembly reference?)
`Microsoft.CodeAnalysis.MSBuild` is not present under Microsoft.CodeAnalysis package.</Description>
  </Issue>
  <Issue>
    <IssueID>28866</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer proposes invalid pattern matching suggestion.</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>24/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28866</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28866</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>28866</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.7.5

**Steps to Reproduce**:

1. Create a class like the following:

``

**Expected Behavior**:
The suggestion should not be made as the result is unreachable code within the `if`-statement.

**Actual Behavior**:
The suggestion is made to use pattern matching, resulting in drastically changed behavior of the code.</Description>
  </Issue>
  <Issue>
    <IssueID>28862</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>28862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>LambdaSymbol parameter with Locations[0] == null</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>12/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>28862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System.Linq;
class C
{
    static string F(object o) =&gt; throw null;
    static void G(object[] c)
    {
        var z = from x in c
            let y = F(x)
            where y != null
            select y;
    }
}
`</Code>
    <Description>Compiling the following, the `SourceParameterSymbol` for the  `LambdaSymbol` `y != null` has `Locations.Length == 1` and `Locations[0] == null`. `Locations` should contain non-`null` values only.
``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28862</IssueID>
        <PullRequestID>29221</PullRequestID>
        <Title>Ensure we have no `null` positions in source parameter symbols.</Title>
        <Description>No tests are added specifically for this fix, as the new assertions would be thrown on many existing tests.
Fixes #28862 

@dotnet/roslyn-compiler May I please have a couple of reviews for this tiny bug fix?
</Description>
        <CreatedDate>10/08/2018</CreatedDate>
        <ClosedDate>12/08/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28862</IssueID>
            <PullRequestID>29221</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>28862</IssueID>
            <PullRequestID>29221</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Resolution-Fixed</Name>
            <IssueID>28862</IssueID>
            <PullRequestID>29221</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>29221</PullRequestID>
            <IssueID>28862</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>29221</PullRequestID>
            <IssueID>28862</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28858</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose `-features` command-line option and valid values in help</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In order to find how to enable `strict` mode, one shouldn't have to navigate Roslyn code.</Description>
  </Issue>
  <Issue>
    <IssueID>28856</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Rosyln files locked during deployment(msdeploy) and fails with ERROR_FILE_IN_USE</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>28856</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- MVC 5
- .Net version 4.6.1
- Microsoft.CodeDom.Providers.DotNetCompilerPlatform 2.0.0
- Microsoft.Net.Compilers 2.8.2

- Windows Server 2016
- IIS 10.0.14393.0
- TeamCity 2018.1

**Steps to Reproduce**:
NOTE: I'm doing all this from TeamCity CI
1. Build and Deploy MVC5 project with roslyn compiler to IIS
2. Once step 1 is deployed, Deploy again (occasionally its successful and lot of times it errors )

**Expected Behavior**:
Successfully deployed the site to IIS

**Actual Behavior**:
Error Code: ERROR_FILE_IN_USE
[16:18:10]More Information: Web Deploy cannot modify the file 'csc.exe' on the destination because it is locked by an external process.  In order to allow the publish operation to succeed, you may need to either restart your application to release the lock, or use the AppOffline rule handler for .Net applications on your next publish attempt.  Learn more at: 

**Also:** Every file in bin\roslyn folder has same issue. It shows different files being locked on every deployment with that error. My razor views are also using c#6 features. </Description>
  </Issue>
  <Issue>
    <IssueID>28851</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>28851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>What is the good option to trace/log the custom analyzer implementation? </Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>21/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>28851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>28851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>28851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>28851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Roslyn v2.6.0

**Steps to Reproduce**:

1. We are getting intermittent crashes and additional file load issues from build machine. 
    Unfortunately this happens only in build machine where we run automated scripts.
2. This we are unable to trace as we don't have tracing or logging mechanism in place.

**Expected Behavior**:
This is not an issue reporting. But wanted to know what is the good option to log/trace analyzers for troubleshooting such scenarios. It would be great if we could get additional tracing/logs in the msbuild output.

**Actual Behavior**:
Currently we only have findings reported gets printed to msbuild log.

Regards
Basanth</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28851</IssueID>
        <PullRequestID>29448</PullRequestID>
        <Title>Try capturing exceptions using WPR during integration tests</Title>
        <CreatedDate>22/08/2018</CreatedDate>
        <ClosedDate>08/11/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>PR For Personal Review Only</Name>
            <IssueID>28851</IssueID>
            <PullRequestID>29448</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28848</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bug of .sln upgrade in VS2017</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>19/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>28848</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017 15.7.5

**Steps to Reproduce**:

1. Create Test.sln: [Test.zip](
``
2. Open it with VS2017(If there's no vs2005 in your pc, just double click it), VS2017 will show a form to upgrade .sln, just click OK.
3. Close VS2017, Test.sln has converted to vesion 15, reopen it, and will get an error:
`The selected file is a solution file, but appears to be corrupted and cannot be opened.`

**Expected Behavior**: VS2017 can convert it correctly

**Actual Behavior**: The new .sln file is corrupted.

I think the problem is:
Project("{E24C65DC-7377-472B-9ABA-BC803B73C61A}") = **"Test"**, "..\Websites\Test\"
=&gt;
Project("{E24C65DC-7377-472B-9ABA-BC803B73C61A}") = **""**, "..\Websites\Test\"
The original content is "Test", but the new .sln content here is empty.
If I modify the new .sln file here from "" to "Test", VS2017 can open it.

By the way, vs2017 will generate a folder named '.vs', if I copy it to the containing folder of the original Test.sln, and open the original Test.sln by vs2017, it can upgrade without problem.

</Description>
  </Issue>
  <Issue>
    <IssueID>28846</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>28846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Exception in ExtractMethodCodeRefactoringProvider: Matrix does not contain Key 'C6'</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Visual Studio Professional 2017 (v15.7.5)

Whenever I select the following part of code:
![image](

The following exception is thrown:
![image](

``

**I've recorded the video showing the error in action. Please contact me to get this record.**</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28846</IssueID>
        <PullRequestID>30554</PullRequestID>
        <Title>Do not crash ExtractMethod when we run into a dataflowanalysis result we didn't account for.</Title>
        <Description>Instead, just let the user know we weren't quite sure what is going on, but let them proceed on a best-effort basis.

Experience looks like this:

![image](


Test coming next.</Description>
        <CreatedDate>17/10/2018</CreatedDate>
        <ClosedDate>18/10/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28846</IssueID>
            <PullRequestID>30554</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>28846</IssueID>
            <PullRequestID>30554</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>heejaechang</FixedById>
            <PullRequestID>30554</PullRequestID>
            <IssueID>28846</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>30554</PullRequestID>
            <IssueID>28846</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28843</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>make sure FAR and NavigateTo cache builder doesn't run when OOP option is on</Title>
    <CreatedDate>26/07/2018</CreatedDate>
    <ClosedDate>27/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28843</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I think I made it so that it doesn't run inrpoc if OOP option is on. but it looks like something changed and it still run in proc even though FAR and Navigate To is set to run on OOP.</Description>
  </Issue>
  <Issue>
    <IssueID>28835</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue with delegate constraint not compiling</Title>
    <CreatedDate>25/07/2018</CreatedDate>
    <ClosedDate>25/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>28835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>C# 7.3

**Steps to Reproduce**:

	public class MyClass&lt;TDelegate&gt; : IMyInterface&lt;TDelegate&gt; where TDelegate : Delegate
	{
            // COMPILER COMPLAINS HERE about OnEvent needing to be a Delegate, which it kind of has to be, because of the constraint?
		private event TDelegate OnEvent;

		/// &lt;inheritdoc /&gt;
		public void Add(TDelegate handler)
		{
			throw new NotImplementedException();
		}

		/// &lt;inheritdoc /&gt;
		public void Remove(TDelegate handler)
		{
			throw new NotImplementedException();
		}
	}

	public interface IMyInterface&lt;TDelegate&gt; where TDelegate : Delegate
	{
		void Add(TDelegate handler);
		void Remove(TDelegate handler);
	}

**Expected Behavior**:
I would expect this to compile, unless i am using it wrong.

**Actual Behavior**:
It does not compile.

The project in question is configured as Crosscompile net40/net45/nestandard1.1 if that makes any difference (which i don't think it does anymore)</Description>
  </Issue>
  <Issue>
    <IssueID>28834</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Revert two step initialization of constraints and base type</Title>
    <CreatedDate>25/07/2018</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>28834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Revert recent changes for two step initialization of constraints and base type if those changes are no longer necessary.

Constraints: `TypeParameterSymbol.EnsureAllConstraintsAreResolved(bool early)` 
Base type: `PENamedTypeSymbol.GetDeclaredBaseType(bool ignoreNullability)` 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>27525</PullRequestID>
        <Title>Handle T? constraint</Title>
        <Description>Binding of constraints is now split into two steps: early and late.

In the early step, constraint types are bound but with no additional checks. In the late step, constraint types are checked for validity and duplicates, and type parameter "bounds" (`EffectiveBase` and `EffectiveInterface`) are calculated.

Most `TypeParameter` properties simply ensure both steps have completed (as before), but `IsValueType` and `IsReferenceType` now only ensure the early step has completed.

Fixes #27289.</Description>
        <CreatedDate>06/06/2018</CreatedDate>
        <ClosedDate>28/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>27525</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>27525</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>27525</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>28028</PullRequestID>
        <Title>Erase nullability from base and interfaces for types from unannotated assemblies</Title>
        <Description>Erase nullability from base and interfaces for types from unannotated assemblies.

Fixes #27967.</Description>
        <CreatedDate>20/06/2018</CreatedDate>
        <ClosedDate>30/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>28028</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>28028</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>28028</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35189</PullRequestID>
        <Title>Revert two step initialization of base type in PENamedTypeSymbol.</Title>
        <Description>Related to #28834.

Also, remove obsolete comments from a test. Closes #30003.</Description>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35189</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35189</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35017</PullRequestID>
        <Title>Simplify null checks using 'is null' and 'is object'</Title>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35017</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34563</PullRequestID>
        <Title>install servicehub json files in common7/servicehub folders</Title>
        <Description>we used to install servicehub json files in extension folder and servicehub recently added a new feature ("serviceOverride": true), where one can install its servicehub json files in Common7/ServiceHub folder (more stable) and keep existing F5 vsix experiences.

we are trying to see whether we can take advantage of this new feature so that regular VS user can get our OOP (servicehub services) from a more reliable location than extension folder. but still use private json files when dogfooding/developing.

this addresses one of our top 1 watson issue</Description>
        <CreatedDate>28/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34563</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35097</PullRequestID>
        <Title>Use Machine.Arm64 instead of raw value</Title>
        <Description>## Changes
- Use `Machine.Arm64` instead of raw value.

These cases were probably missed on #27023.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35097</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35094</PullRequestID>
        <Title>Add unit-tests for fixed issues.</Title>
        <Description>Closes #33276.
Closes #31676.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35094</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34763</PullRequestID>
        <Title>Update nullable attribute in docs</Title>
        <Description>Update nullable attribute in docs to show NullableFlags</Description>
        <CreatedDate>04/04/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34763</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34581</PullRequestID>
        <Title>Fix the pull member up failure</Title>
        <Description>Related [issue](
So, null pointer exception happens when you try to make a property abstract like
``
If try to make it abstract via the pull member up dialog, it will fail.

Reason:
It is due to CodeGenerationSymbolFactory.CreatePropertySymbol() takes SetMethod and GetMethod and the default value are both null.

I also add two additional tests to cover the cases which makes events abstract.
</Description>
        <CreatedDate>29/03/2019</CreatedDate>
        <ClosedDate>18/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34581</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35116</PullRequestID>
        <Title>`Equals` for generic methods should compare nullable annotations for type type arguments.</Title>
        <Description>Fixes #35083.</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35116</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35116</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35067</PullRequestID>
        <Title>Intellisense broken inside of methods that have delegates as arguments</Title>
        <Description>Fix </Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35067</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34988</PullRequestID>
        <Title>Regex Completion + Async Completion = Failure to trigger on `[` in VB</Title>
        <Description>Fix </Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>19/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-IntelliSense</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Regression</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34988</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35121</PullRequestID>
        <Title>Async-enumerator methods honor the EnumeratorCancellation attribute</Title>
        <Description>Fixes 

Relates to  (corefx API proposal for `EnumeratorCancellationAttribute` type)
Relates to  (umbrella for async-streams)</Description>
        <CreatedDate>18/04/2019</CreatedDate>
        <ClosedDate>20/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35121</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35121</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34909</PullRequestID>
        <Title>Remove the dependence between the order in NullableAnnotation and metadata attribute values</Title>
        <Description>Fixes #33952
</Description>
        <CreatedDate>10/04/2019</CreatedDate>
        <ClosedDate>15/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34909</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34909</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35024</PullRequestID>
        <Title>Fix complete statement's semicolon placement to better handle incomplete code</Title>
        <Description>Fix for #34983 and #35126</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>22/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35024</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35009</PullRequestID>
        <Title>Add import placement codestyle, diagnostic, and fixer</Title>
        <Description>This PR is created to simplify the changes made in 

This PR includes the changes from both  &amp; 

![image](

![image](

</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35009</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35170</PullRequestID>
        <Title>Add version check to enable the pattern-based Index &amp; Range indexers</Title>
        <CreatedDate>22/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Range</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35170</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35170</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35145</PullRequestID>
        <Title>Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.</Title>
        <Description>Fixes #30081.</Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>23/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35145</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35213</PullRequestID>
        <Title>Only emit readonly attributes implicitly when feature enabled</Title>
        <Description>Resolves #35113</Description>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35213</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35155</PullRequestID>
        <Title>VisualBasic semantic model does not recognize overloads at chained queries</Title>
        <Description>Fix </Description>
        <CreatedDate>19/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35155</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34697</PullRequestID>
        <Title>Add spec for enhanced using</Title>
        <Description>Spec out the various parts of the enhanced using feature</Description>
        <CreatedDate>02/04/2019</CreatedDate>
        <ClosedDate>24/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - enhanced using</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>34697</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>32092</PullRequestID>
        <Title>Optimise DisplayClass Allocations</Title>
        <Description>Merge display classes created for closures when it is safe to do so in order to reduce allocations.

Fix to </Description>
        <CreatedDate>02/01/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>32092</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>32092</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35234</PullRequestID>
        <Title>intellisense should suggest event after readonly in a struct member declaration</Title>
        <Code>csharp
struct C {
    readonly e //suggest event here
}
`</Code>
        <Description>…member declaration.

``

See </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35234</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>35234</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35265</PullRequestID>
        <Title>Re-enable symbol tests on mono</Title>
        <Description>Fixes </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35265</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35264</PullRequestID>
        <Title>Remove usage of QuietRestore</Title>
        <Code>
&gt;restore
Roslyn.sln:
  Restore completed in 43.27 ms for C:\Users\tomat\.nuget\packages\microsoft.dotnet.arcade.sdk\1.0.0-beta.19171.3\tools\Tools.proj.
  Restore completed in 40.41 ms for C:\R3\src\CodeStyle\VisualBasic\Analyzers\Microsoft.CodeAnalysis.VisualBasic.CodeStyle.vbproj.
  Restore completed in 41.87 ms for C:\R3\src\CodeStyle\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.CodeStyle.csproj.
...

&gt;build
Roslyn.sln:
  CompilersBoundTreeGenerator -&gt; C:\R3\artifacts\bin\CompilersBoundTreeGenerator\x64\Debug\netcoreapp2.1\BoundTreeGenerator.dll
  CSharpErrorFactsGenerator -&gt; C:\R3\artifacts\bin\CSharpErrorFactsGenerator\x64\Debug\netcoreapp2.1\CSharpErrorFactsGenerator.dll
  CSharpSyntaxGenerator -&gt; C:\R3\artifacts\bin\CSharpSyntaxGenerator\x64\Debug\netcoreapp2.1\CSharpSyntaxGenerator.dll
...
`</Code>
        <Description>Removes a workaround for nuget spewing a lot of output on restore. 
This has been now fixed in nuget. Restore now outputs a line per restored project, similarly to build.

``

QuietRestore is a hack that is causing issues like </Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35264</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34778</PullRequestID>
        <Title>Readonly struct metadata as source</Title>
        <Description>Implements part of #34650

- Metadata as source for readonly and ref struct
- Metadata as source for readonly members</Description>
        <CreatedDate>05/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34778</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35249</PullRequestID>
        <Title>Fix crash in pattern matching</Title>
        <Description>We relaxed the requirement for pattern matching open types to a
constant pattern to not require a conversion from the pattern expression
to the open type, but the pattern expression should be required to have
a constant value.

Fixes #34980</Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>25/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35249</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35254</PullRequestID>
        <Title>Warn for CancellationToken parameters missing [EnumeratorCancellation]</Title>
        <Description>Fixes  (warn for potentially missing `[EnumeratorCancellation]`)
Closes  (warn for `[EnumeratorCancellation]` in ineffective places)</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Async Streams</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35254</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35254</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34889</PullRequestID>
        <Title>Use of unannotated unconstrained type parameter in nullable diabled code</Title>
        <Description>A reference to an unconstrained type parameter in nullable-disabled code should be treated as *oblivious*, and therefore reading them should be considered to produce non-null values, and we are permitted to assign null values to them without a diagnostic.
Fixes #34842

Also disable the old WRN_DotOnDefault when the nullable feature is enabled.
Fixes #34855</Description>
        <CreatedDate>09/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34889</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34889</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35001</PullRequestID>
        <Title>Error for `typeof(T?)` when `T` is a reference type</Title>
        <Description>Fixes #29894</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35001</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35001</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35018</PullRequestID>
        <Title>Make Generated syntax trees restore to project-level nullability</Title>
        <Description>Fixes #34094</Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35018</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35212</PullRequestID>
        <Title>Focus first tabbable element in PMU dialog</Title>
        <CreatedDate>23/04/2019</CreatedDate>
        <ClosedDate>26/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35212</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35272</PullRequestID>
        <Title>Make sure nullability mismatch in constraints specified in different partial declarations (types/methods) are properly detected and reported.</Title>
        <Description>Fixes #30229.
Fixes #35179.

Implements the following LDM decision:

For partial types, the invariant matching from type inference and merging. A mismatch
between two non-oblivious candidates produces an error. No warnings are produced.

For partial methods, nullability has to match with exception for oblivious and we produce warnings.
For the result, we use the implementation signature inside the implementation, and the
declaration signature for the callers.</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35272</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34809</PullRequestID>
        <Title>Make compilation outputs available via a workspace service</Title>
        <Description>Based on discussion on  Instead of exposing paths/Streams on a project this change adds a workspace service that provides data from compiler output files.

The abstraction allows for the files to be in-memory or on a different machine. In the latter case it makes it possible to only transfer relevant parts of the output files rather then their entirety.

Fixes </Description>
        <CreatedDate>06/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34809</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34996</PullRequestID>
        <Title>Handly dynamic null checks against literal null</Title>
        <Description>Fixes #30939</Description>
        <CreatedDate>15/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34996</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34996</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35284</PullRequestID>
        <Title>Clean up an assertion in LambdaRewriter.</Title>
        <Description>Fixes #30069</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35284</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35284</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35351</PullRequestID>
        <Title>Fixup from bad merge.</Title>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Now</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35351</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35351</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35030</PullRequestID>
        <Title>Lambdas in array initializers checked in nullable walker</Title>
        <Description>Also fixes a corresponding issue in the switch expression
Fixes #34299
See also #35029</Description>
        <CreatedDate>17/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35030</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35030</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35276</PullRequestID>
        <Title>Null inferences do not flow out of a finally block.</Title>
        <Description>Fixes #34018</Description>
        <CreatedDate>25/04/2019</CreatedDate>
        <ClosedDate>29/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35276</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35276</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35336</PullRequestID>
        <Title>changed the way we report live analysis to task center</Title>
        <Description>previously, we listen to the diagnostic service to report progress. problem is that it only raises events if it found errors on a file. so what we report is actually the last file we found errors on rather than the file that we are analyzing.

this caused confusion since we report in task center that we are analyzing file "A" when it is actually "analyzed" not "analyzing"

another issue is since it only reports file that contains errors. we might not actually show anything in task center if there is no error, or show file "A" for a long time if that is only filed with errors.

this PR changes the experience closer to what users would expect. and now progress is for solution crawler not specifically on diagnostics.

now we report file that solution crawler is analyzing.

there is still caveat such as solution crawler can pause between processing a file if VS is busy. but it will still show file "A". or we will not update UI at least 200ms apart and etc.

since it is task center where we don't want to be too impactful to VS, based on feedback we will see whether we need to do more such as detect solution crawler pause and update task center to show a pause. or update task center to show different stage such as analyzing/analyzed.

or show in task center, what analyzer is actually running such as diagnostic, todo, designer attribute scan, find all reference cache and etc.

old
![progress2](

new
![progress](
</Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35336</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35311</PullRequestID>
        <Title>Handle val escape for the switch expression.</Title>
        <Description>Fixes #35278

@agocke @chsienki Could you review this please?
</Description>
        <CreatedDate>26/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35311</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>35311</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35016</PullRequestID>
        <Title>Additional Nullability checks for deconstruction:</Title>
        <Description>- Check 'this' param for extension deconstruct
- Re-infer the argument types for generic extension deconstruct
- Update return type with visited arguments
- Update tests

Closes </Description>
        <CreatedDate>16/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35016</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34973</PullRequestID>
        <Title>Correct nullability analysis in conditional access</Title>
        <Description>Fixes #29956</Description>
        <CreatedDate>13/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>34973</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35344</PullRequestID>
        <Title>Fix buttons for high contrast on PullMembersUpWarningDialog</Title>
        <Description>Use Button instead of vs:Button on warning dialog for PMU

Fixes  and  </Description>
        <CreatedDate>29/04/2019</CreatedDate>
        <ClosedDate>30/04/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35344</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>34831</PullRequestID>
        <Title>[master] Update dependencies from dotnet/arcade</Title>
        <Description>This pull request updates the following dependencies

## From 
- **Build**: 20190407.1
- **Date Produced**: 4/7/2019 12:56 PM
- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19207.1

## From 
- **Build**: 20190409.2
- **Date Produced**: 4/9/2019 12:54 PM
- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19209.2

## From 
- **Build**: 20190410.7
- **Date Produced**: 4/11/2019 3:17 AM
- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19210.7

## From 
- **Build**: 20190411.2
- **Date Produced**: 4/11/2019 10:43 PM
- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19211.2

## From 
- **Build**: 20190412.2
- **Date Produced**: 4/12/2019 4:37 PM
- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19212.2

## From 
- **Build**: 20190413.2
- **Date Produced**: 4/13/2019 9:02 PM
- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19213.2

## From 
- **Build**: 20190414.2
- **Date Produced**: 4/14/2019 4:07 PM
- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19214.2

## From 
- **Build**: 20190415.12
- **Date Produced**: 4/16/2019 12:12 AM
- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19215.12

## From 
- **Build**: 20190417.1
- **Date Produced**: 4/17/2019 7:32 AM
- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19217.1

## From 
- **Build**: 20190418.1
- **Date Produced**: 4/18/2019 8:10 AM
- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.1

## From 
- **Build**: 20190418.4
- **Date Produced**: 4/18/2019 10:50 PM
- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.4

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190418.7
- **Date Produced**: 4/19/2019 12:41 AM
- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19218.7

## From 
- **Build**: 20190422.2
- **Date Produced**: 4/22/2019 10:01 PM
- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19222.2

## From 
- **Build**: 20190423.2
- **Date Produced**: 4/24/2019 12:38 AM
- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19223.2

## From 
- **Build**: 20190424.9
- **Date Produced**: 4/25/2019 12:59 AM
- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19224.9

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190425.5
- **Date Produced**: 4/25/2019 6:25 PM
- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19225.5

## From 
- **Build**: 20190426.3
- **Date Produced**: 4/26/2019 5:53 PM
- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19226.3

## From 
- **Build**: 20190429.8
- **Date Produced**: 4/30/2019 5:30 AM
- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19229.8

## From 
- **Build**: 20190430.6
- **Date Produced**: 4/30/2019 10:17 PM
- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53
- **Branch**: refs/heads/master
- **Updates**:
  - **Microsoft.DotNet.Arcade.Sdk** -&gt; 1.0.0-beta.19230.6

</Description>
        <CreatedDate>08/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>34831</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35373</PullRequestID>
        <Title>Use more robust initialization for TypeWithAnnotations.Builder</Title>
        <Description>FYI @jaredpar @agocke @stephentoub 

May fix  </Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35373</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>35373</PullRequestID>
            <IssueID>28834</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35238</PullRequestID>
        <Title>Auto-generate assembly version of the build task assembly</Title>
        <Description>Opt into versioning policy that produces a different assembly version for every build.
This allows multiple versions of the task assembly to coexists within the same msbuild AppDomain.

Depends on Arcade change </Description>
        <CreatedDate>24/04/2019</CreatedDate>
        <ClosedDate>01/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35238</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28834</IssueID>
        <PullRequestID>35375</PullRequestID>
        <Title> Revert two step initialization of constraints</Title>
        <Description>Closes #28834.
Closes #30061.</Description>
        <CreatedDate>30/04/2019</CreatedDate>
        <ClosedDate>03/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35375</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>28834</IssueID>
            <PullRequestID>35375</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28226</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title># array long</Title>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>30/06/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>28225</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Assertion failed when running AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase</Title>
    <CreatedDate>29/06/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>28225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.AggregateException : Se han producido uno o varios errores.
---- System.InvalidOperationException : 
      
Stack Trace:
    en System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
    en System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
    en System.Threading.Tasks.Task.Wait()
    en System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)
    en System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
    en Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase()
----- Inner Stack Trace -----
    en Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)
    en System.Diagnostics.TraceListener.Fail(String message)
    en System.Diagnostics.TraceInternal.Fail(String message)
    en System.Diagnostics.Debug.Assert(Boolean condition)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributesBag()
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributes()
    en Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteObsoleteAttribute()
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckOverrideMember(Symbol overridingMember, OverriddenOrHiddenMembersResult overriddenOrHiddenMembers, DiagnosticBag diagnostics, Boolean&amp; suppressAccessors)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)
    en Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass47_1.&lt;ForceComplete&gt;b__0(Int32 i)
    en Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param)
    en System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1()
    en System.Threading.Tasks.Task.InnerInvoke()
    en System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)
    en System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object )
`</Code>
    <Description>Failure occurred during [this build]( of #28043.

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28225</IssueID>
        <PullRequestID>28043</PullRequestID>
        <Title>Change 'None' in code style options to 'Refactoring Only'</Title>
        <Description>* Rename 'None' in code style options to 'Refactoring Only'
* Add "refactoring" as an alias for "silent" in .editorconfig
* Remove special case handling of `ReportDiagnostic.Hidden`

![image](

### Customer scenario

The 15.8 release contains several changes to improve the overall experience for users with .editorconfig files. While the experience for users working exclusively with .editorconfig is consistent, and the experience for users working exclusively without .editorconfig is consistent, during the documentation effort for the new features several discrepancies were identified that would lead to inconsistent messaging:

1. The term 'none' means one thing in rule set files and .editorconfig, but has a very different meaning in Tools &amp;rarr; Options
2. The behavior of code style rules configured as 'Hidden' (rule set) / 'silent' (.editorconfig) / 'None' (Tools &amp;rarr; Options) is not consistent for all rules with respect to Fix All operations and Code Cleanup

To resolve these issues, we have tweaked the design of none and silent to have the a consistent description for all users.

### Bugs this fixes

N/A

### Workarounds, if any

Not include documentation, or write documentation knowing the current implementation does not adhere to the described behavior.

### Risk

This pull request is *mostly* a low-risk change to terminology. However, for a few built-in diagnostics that support Fix All operations, the Fix All will now fix certain items which were previously excluded. This change should only impact cases where *all* of the following are true:

1. The solution contains scoped code style configurations (e.g. per-project or per-document), and one or more scopes uses the same code style preference from the others but differs in the reported diagnostic severity.
2. One of the diagnostic severities from the previous item is 'Hidden' (rule set) / 'silent' (.editorconfig) / 'None' (Tools &amp;rarr; Options)
3. A Fix All operation is performed on a scope which includes diagnostics reported in multiple scopes, and the scopes containing diagnostics for the Fix All operation meet the conditions described for both (1) and (2).

### Performance impact

Performance is not changed aside from the increased scope of work described under **Risk**.

### Is this a regression from a previous update?

No.

### Root cause analysis

Our design provided self-consistent experiences for several different user stories, but we failed to provide clear messaging between these groups. While the groups are generally distinct (users each tend to prefer one approach over the others), clear and consistent messaging helps users adopt our features and communicate in public about successful use of our product to solve problems.

### How was the bug found?

Writing documentation.

### Test documentation updated?

No, but user documentation is being updated.
</Description>
        <CreatedDate>21/06/2018</CreatedDate>
        <ClosedDate>01/07/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28225</IssueID>
            <PullRequestID>28043</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28225</IssueID>
            <PullRequestID>28043</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Soon</Name>
            <IssueID>28225</IssueID>
            <PullRequestID>28043</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>dpoeschl</FixedById>
            <PullRequestID>28043</PullRequestID>
            <IssueID>28225</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28178</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning depending on static elements order - NullReferenceException</Title>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>30/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>28178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
namespace StaticObjectNullRef
{
    class ExampleClass1
    {
        int ArraySize = StrArray.Length;
        static string[] StrArray = { "" };
    }

    class ExampleClass2
    {
        static string[] StrArray = { "" };
        static int ArraySize = StrArray.Length;
    }

    class ExampleClass3
    {
        static int ArraySize = StrArray.Length;
        static string[] StrArray = { "" };
    }

    class Program
    {
        static void Main(string[] args)
        {
            var obj1 = new ExampleClass1(); // Class's static parts created first, then used at a dynamic part
            var obj2 = new ExampleClass2(); // Class's static parts created (and used) after each other
            var obj3 = new ExampleClass3(); // NullReferenceException
        }
    }
}
`</Code>
    <Description>**Version**:
Microsoft Visual Studio Community 2017 Version 15.7.4
Microsoft .NET Framework Version 4.7.03056
C# Tools v2.8.3-beta6-62923-07

**Example code**: 
_Build in Debug configuration!_
``

**Expected Behavior**:
Warning about the usage of an uninitialized object's property.

**Actual Behavior**:
NullReferenceException at the creation of the first instance.</Description>
  </Issue>
  <Issue>
    <IssueID>28176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Experimental "fix accessibility modifiers" option does not respect dotnet_style_require_accessibility_modifiers in editor config</Title>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>28176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>28176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When the following is set in the editor config: &amp;quot;dotnet_style_require_accessibility_modifiers = never&amp;quot;The new experiemental option in Visual Studio Preview &amp;quot;fix accessibility modifiers&amp;quot; adds accessbilitity modifiers despite being set to never.Note the option is located in: Options &amp;gt; Text Editor &amp;gt; C# &amp;gt; Code Style &amp;gt; Formatting &amp;gt; General_This issue has been moved from VSTS ticketId: 638951__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>28174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VBCSCompiler is still being treated as critical process</Title>
    <CreatedDate>28/06/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>According to  and  vbcscompiler should no longer be treated as critical process in 15.7. But testing on the latest internal build of 15.8, it still is.

**Version Used**: 
Setup: 1.17.1250.618
VS: Version 15.8.0 Preview 4.0 [27821.3001.d15.8stg]

**Steps to Reproduce**:

1. File -&gt; New Console App (.NET Framework)
2. Build
3. Close VS
4. Open Visual Studio Installer
5. In the same instance as above, modify installation by unchecking/checking an optional feature and choose Install

**Expected Behavior**:
Install to proceed without prompts

**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>28170</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Executing "Console.Read();" in the interactive window hangs</Title>
    <CreatedDate>27/06/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>28170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1. open C# interactive window
2. type `Console.Read();`
3. press enter

**Expected Behavior**:
?

**Actual Behavior**:
The interactive window becomes unresponsive.
</Description>
  </Issue>
  <Issue>
    <IssueID>28161</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>28161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AnalyzerRunner rocks!</Title>
    <CreatedDate>27/06/2018</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>28161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>28161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>28161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>No issue this time. Just wanted to express my happiness about AnalyzerRunner. It has enabled me very well to investigate analyzer performance. Command-line switches are useful and the logging too. I have been wishing for a tool like this for years!

Thanks a lot for creating and providing it!

Little suggestion: Maybe in time it can move to  and get distributed in binary form.

/cc @sharwell </Description>
  </Issue>
  <Issue>
    <IssueID>28156</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>28156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ChangeSignature loses trivia when removing a parameter</Title>
    <CreatedDate>27/06/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Invoke ChangeSignature on the following code, remove `arg1` and the indentation will change unexpectedly.
``

Before:
![image](


After:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>28148</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>28148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Auto format document with config styles sorts usings incorrectly</Title>
    <CreatedDate>27/06/2018</CreatedDate>
    <ClosedDate>27/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>28148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>28148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The .editorconfig has this line in it:dotnet_sort_system_directives_first = true:suggestionBut applying the new format document incorrectly sorts the usings to put the System in alphabetical order instead of the top._This issue has been moved from VSTS ticketId: 638859__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>28138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>28138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>close brace quick info does not adjust leading whitespace for comments</Title>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>17/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>28138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>28138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>28138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
                     if (true ||
                     /* 
                                hello
                     */ false)
                   {
`</Code>
    <Description>
``
![image](
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>28138</IssueID>
        <PullRequestID>27818</PullRequestID>
        <Title>fix quickinfo close brace</Title>
        <Description>&lt;details&gt;&lt;summary&gt;Fixed QuickInfo Close brace tooltip&lt;/summary&gt;

### Customer scenario
Close brace tooltip shows empty

### Bugs this fixes


### Workarounds, if any
No

### Risk
Low, it only affects the QuickInfo close brace scenario

### Performance impact
Low perf impact because no extra allocations/no complexity changes

### Is this a regression from a previous update?
Yes

### Root cause analysis
The unit tests are testing a different code path than the product code, and these tests still pass. 
Will update the tests to test the right code path as well.

### How was the bug found?
internal reported

### Test documentation updated?
No

&lt;/details&gt;
</Description>
        <CreatedDate>14/06/2018</CreatedDate>
        <ClosedDate>03/07/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>28138</IssueID>
            <PullRequestID>27818</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>28138</IssueID>
            <PullRequestID>27818</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Urgency-Soon</Name>
            <IssueID>28138</IssueID>
            <PullRequestID>27818</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>28133</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Null Refs from GetBucketSize</Title>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>13/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>28133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>28133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.NullReferenceException: Object reference not set to an instance of an object.
2018-06-20T23:18:00.2836133Z       at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket.GetBucketSize(ConstantValue startConstant, ConstantValue endConstant)
2018-06-20T23:18:00.2851556Z       at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket.BucketOverflow(ConstantValue startConstant, ConstantValue endConstant)
2018-06-20T23:18:00.2948469Z       at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket.MergeIsAdvantageous(SwitchBucket bucket1, SwitchBucket bucket2)
2018-06-20T23:18:00.2964203Z       at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.GenerateSwitchBuckets(Int32 startLabelIndex, Int32 endLabelIndex)
2018-06-20T23:18:00.2979387Z       at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.EmitJumpTable()
2018-06-20T23:18:00.2996510Z       at Microsoft.CodeAnalysis.CodeGen.ILBuilder.EmitIntegerSwitchJumpTable(KeyValuePair`2[] caseLabels, Object fallThroughLabel, LocalOrParameter key, PrimitiveTypeCode keyTypeCode)
2018-06-20T23:18:00.3014113Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSwitchHeader(BoundSwitchStatement switchStatement, BoundExpression expression, KeyValuePair`2[] switchCaseLabels, LabelSymbol fallThroughLabel)
2018-06-20T23:18:00.3151488Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSwitchStatement(BoundSwitchStatement switchStatement)
2018-06-20T23:18:00.3168245Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement)
2018-06-20T23:18:00.3184526Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(ImmutableArray`1 statements)
2018-06-20T23:18:00.3199833Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(BoundBlock block)
2018-06-20T23:18:00.3215563Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitTryStatement(BoundTryStatement statement, Boolean emitCatchesOnly)
2018-06-20T23:18:00.3311412Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement)
2018-06-20T23:18:00.3327126Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(ImmutableArray`1 statements)
2018-06-20T23:18:00.3342734Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(BoundBlock block)
2018-06-20T23:18:00.3358070Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement)
2018-06-20T23:18:00.3373822Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions(BoundStatement statement)
2018-06-20T23:18:00.3470004Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement(BoundSequencePoint node)
2018-06-20T23:18:00.3485625Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement)
2018-06-20T23:18:00.3501330Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(ImmutableArray`1 statements)
2018-06-20T23:18:00.3517485Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(BoundBlock block)
2018-06-20T23:18:00.3532247Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement)
2018-06-20T23:18:00.3548006Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl()
2018-06-20T23:18:00.3563711Z       at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate(Int32&amp; asyncCatchHandlerOffset, ImmutableArray`1&amp; asyncYieldPoints, ImmutableArray`1&amp; asyncResumePoints)
2018-06-20T23:18:00.3580885Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)
2018-06-20T23:18:00.3599569Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState)
2018-06-20T23:18:00.3614922Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
2018-06-20T23:18:00.3630347Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
2018-06-20T23:18:00.3646579Z       at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
2018-06-20T23:18:00.3661924Z       at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
2018-06-20T23:18:00.3681779Z    --- End of stack trace from previous location where exception was thrown ---
2018-06-20T23:18:00.3698443Z       at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)
2018-06-20T23:18:00.3716383Z    --- End of stack trace from previous location where exception was thrown ---
2018-06-20T23:18:00.3732232Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()
2018-06-20T23:18:00.3750706Z       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
2018-06-20T23:18:00.3768413Z       at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
2018-06-20T23:18:00.3786460Z       at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)
2018-06-20T23:18:00.3804613Z       at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken)
2018-06-20T23:18:00.3822068Z       at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String generatedCode)
2018-06-20T23:18:00.3838144Z       at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)
2018-06-20T23:18:00.3853552Z       at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)
2018-06-20T23:18:00.3870876Z    --- End of stack trace from previous location where exception was thrown ---
2018-06-20T23:18:00.3887348Z       at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)
2018-06-20T23:18:00.3902825Z       at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)
2018-06-20T23:18:00.3918580Z       at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)
2018-06-20T23:18:00.3934448Z       at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)
2018-06-20T23:18:00.3950038Z       at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)
2018-06-20T23:18:00.3974237Z       at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)
2018-06-20T23:18:00.3994694Z       at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)
2018-06-20T23:18:00.4010408Z       at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)
2018-06-20T23:18:00.4026808Z       at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)
2018-06-20T23:18:00.4046095Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
2018-06-20T23:18:00.4064218Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
2018-06-20T23:18:00.4079222Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
2018-06-20T23:18:00.4095221Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)
2018-06-20T23:18:00.4110645Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
2018-06-20T23:18:00.4126493Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
2018-06-20T23:18:00.4143368Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
2018-06-20T23:18:00.4159117Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)
2018-06-20T23:18:00.4174566Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
2018-06-20T23:18:00.4191927Z       at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
2018-06-20T23:18:00.4207351Z       at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
2018-06-20T23:18:00.4224131Z       at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
2018-06-20T23:18:00.4241365Z       at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
`</Code>
    <Description>**Version Used**: 2.8.0

**Stack:**
``

**Steps to Reproduce**:

1. Clone  on a linux machine
2. Run build.sh -ci

**Expected Behavior**: No Null-Refs, or a more descriptive error about what's going wrong.

**Actual Behavior**: `System.NullReferenceException: Object reference not set to an instance of an object.`
</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>28117</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>28117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ref-assigning to a non-ref parameter should be an error</Title>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>28117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>28117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C {
    void M(int a, ref int b) {
        int local = 0;
        
        a = ref b;           // no error
        local = ref b;       // CS8373: The left-hand side of a ref assignment must be a ref local or parameter.
    }
}
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>28114</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>What Code Analysis rules control whether the "Remove Unnecessary Usings" codefix is shown?</Title>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
    <IssueLabels />
    <Description>Visual Studio 2017 version 15.7.4, Windows 10 x64 version 1803 (build 17134.112)

We've tweaked the Code Analysis rules in our solution via a .ruleset file, and now we're no longer prompted to "Remove Unnecessary Usings". Since (apparently) ["Remove Unnecessary Usings" isn't implemented by a single CA rule]( which rules (and/or project build options) do I need to re-enable to get this functionality to come back? I've already tried IDE0005 with no effect.</Description>
  </Issue>
  <Issue>
    <IssueID>28113</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide a mechanism to skip over broken source code</Title>
    <CreatedDate>26/06/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>28113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>28113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>28113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As an analyzer author, it seems nearly impossible to know when syntax/symbol/operation properties can be `null`, as a result of source code that contains errors. Usually because the user is still typing.

Of course, I can be defensive and put a null check around *every* member access. But that makes the analyzer sources hard to read, so I would rather not do that.

I've tried a few analyzer packs in the past, and observed the yellow crash bar appear about every five minutes while writing code. I think analyzer authors are struggling with this.

Writing analyzer unit tests for broken code quickly becomes endless. And it's difficult to reconstruct what broken code leads to which properties being `null`. Lots of trial and error. Even dogfooding against large code bases does not help, because they do not contain broken code.

In the past I used `IOperation.HasErrors`, which has been removed [for various reasons](

Therefore it would help if a general mechanism would be available to only run analyzer callbacks on non-broken code. So that an analyzer author can safely assume that, for example, `ILocalSymbol.Name` will never be `null` or an empty string.

Another solution would be to document when members can be null and under which circumstances. For example, provide a snippet of broken code in the documentation comments of generated syntax nodes. However as implementations change over time (and documentation becomes outdated), putting such logic inside the compiler would probably be more future-proof.

/CC @mavasani </Description>
  </Issue>
  <Issue>
    <IssueID>27852</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>27852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Copy escape scope of pattern locals from source expressions [C# 8]</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>08/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>27852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We need to port #27803 to the `features/recursive-patterns` branch and extend it to all the other pattern-matching forms.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27852</IssueID>
        <PullRequestID>27803</PullRequestID>
        <Title>Copy escape scope of pattern locals from source expressions</Title>
        <Description>Fixes #27218 </Description>
        <CreatedDate>13/06/2018</CreatedDate>
        <ClosedDate>14/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>27852</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27852</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>27852</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27851</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Pattern matching should decide on how to deal with restricted types</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>27851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>27851</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A recent bug (#27803) revealed how pattern matching interacts with restricted types in interesting ways (when doing type checks).
We should discuss with LDM on whether this should be banned (like pointer types), and if there are actual use cases that need it.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27851</IssueID>
        <PullRequestID>27803</PullRequestID>
        <Title>Copy escape scope of pattern locals from source expressions</Title>
        <Description>Fixes #27218 </Description>
        <CreatedDate>13/06/2018</CreatedDate>
        <ClosedDate>14/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>27851</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27851</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>27851</IssueID>
            <PullRequestID>27803</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27850</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NavigateToItemProvider hurts Go To File performance by providing irrelevant results</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>27850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
27813.1 d15.8 (latest dogfood build) 

**Steps to Reproduce**:

1. Open big solution like Rolslyn
2. Invoke Go To File (Ctrl+Shift+T)
3. Type a file name to find

**Expected Behavior**:
Matching file names displayed and search has finished

**Actual Behavior**:
Matching file names displayed but search progress bar is going on because Roslyn's NavigateToItemProvider doesn't realize user is searching for a file and provides symbol results, whoch are being silently ignored.

The fix is to implement INavigateToItemProvider2, which lets providers express what kind of search they support and know what kind of search user initiated. </Description>
  </Issue>
  <Issue>
    <IssueID>27841</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Custom keywords support to be able to use Roslyn for "C#-like" DSLs</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Background**
I've successfully been using Roslyn to create DSLs of varying complexity. Usually, I want to keep the expression and statement syntax essentially identical to C# and work with the Roslyn syntax tree to generate the code I want (for example, I have created a C#-like shader language based on Roslyn that transpiles to HLSL/GLSL).

Another example of how I have used this is to create a serialization format where I allow C# expressions in some contexts, and where C# types are first class citizens. Using Roslyn for this turned out to be very easy and equally powerful.

While lower levels of the C# syntax tree is usually good as is, I tend to want to change the upper levels, such as whether to allow usings, namespace declarations, and so on (this is easy to do currently), but I would also like to change for example the class declaration syntax (in the above example, I would have liked to replace "class" with "shader").

**TL;DR**
Turns out, this is actually very easy to implement in Roslyn with only a small change to the lexer ( I don't know if this has been considered and rejected before, but I could not find anything relevant. What I have added is the possibility to add synonyms for built-in keywords. It is then up to me as a user of Roslyn to understand and do something intelligent with the result, but this way at least I get correct syntax trees.

This way the changes stay minimal, as it can only use already existing syntactic concepts, not invent new ones. I think this is reasonable as it would be hard to keep the current level of performance otherwise (compare with generated parsers for example). I also believe a lot of very powerful concepts can piggyback on existing syntax.

A more elegant solution would be to introduce new token types for places where it is suitable to create new keywords (e.g. a “CustomTypeKeyword” token instead of a ClassKeyword token), but it would not provide anything more in terms of functionality.

I realize this might be slightly beyond the scope of Roslyn, but I also believe this would add a powerful feature for developers of C# DSLs / syntactic sugar.</Description>
  </Issue>
  <Issue>
    <IssueID>27840</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Request: Support emitting structured data (for third-party tooling)</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>30/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27840</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>shell
$ dotnet build --message-format json


Which, upon error CS0539 (for example), would emit such a structure:


{
    "status": "error",
    "errors": [{
        "code": "CS0539",
        "message": "The type or namespace 'Foo' could not be found",
        "notes": [{ // can be used for things like "X is already declared &lt;here&gt;"
            "message": "Are you missing a using directive or an assembly reference?",
            "origin": null,
        }],
        "origin": {
            "relative_file_path": "rel/path/to/file.cs",
            "absolute_file_path": "/home/foo/foobar/rel/path/to/file.cs",
            "span": { // a byte range
                "start": 123,
                "end": 456
            }
        }
    }]
}
`</Code>
    <Description>Original ticket: 

---

This is a very general, wide-reaching request.

I envision an invocation similar to the following:

``

The resulting structured data could be used by foundation- and community-built tooling for many things (one example is error messages that include source code).

This request is inspired by [`cargo`]( `--message-format` functionality.

I fully realize that this is a *very large* request and the above structure is a minimal, illustrative example.</Description>
  </Issue>
  <Issue>
    <IssueID>27837</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide an option that forces accessibility modifiers, except on partial classes</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>04/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> C#

Parent.cs:

public sealed partial class Parent
{
   [...]
}

Parent.Nested.cs:

partial class Parent
{
   internal class Nested
   {
   }
}



I do this so that if I change the accessibility or other modifier of Parent I only need to change it one place. Unfortunately:


dotnet_style_require_accessibility_modifiers = always:warning
`</Code>
    <Description>I have a code style like the following:

``

Forces me to always specify a accessibility on second declaration of Parent.

Please give me a way that lets me force accessibility *everywhere* except on partial classes if another partial declaration has already specified it.
</Description>
  </Issue>
  <Issue>
    <IssueID>27836</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0044 (add readonly modifier) fires incorrectly for tuple assignment</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C
{
    private int field1; // IDE0044
    private int field2; // IDE0044

    void M()
    {
        (field1, field2) = GetTuple();

        Console.WriteLine($"{field1}, {field2}");
    }

    private (int, int) GetTuple() =&gt; throw null;
}
`</Code>
    <Description>**Version Used**: 
VS 2017 Community v15.7.3

**Steps to Reproduce**:
The next program reports IDE0044 with an empty description:
``

**Expected Behavior**:
No report of IDE0044, because an assignment is made outside of a constructor or initializer.

**Actual Behavior**:
IDE0044 reported on `field1` and `field2`. Lightbulk-menu has option "Add readonly modifier", which results in compile error CS0191: A readonly field cannot be assigned to.</Description>
  </Issue>
  <Issue>
    <IssueID>27834</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New Formatting Document Settings does not respect "Separate using directives groups"</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>27834</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:
1. 
![image](

![image](

2. Format Document on following:


``

Formatting Document should be equivalent to choosing Remove and Sort Usings.</Description>
  </Issue>
  <Issue>
    <IssueID>27832</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Creating analyzer package with referenced assembly</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels />
    <Description>Is there some story how to create the analyzer package, where the analyzer assembly is referencing some other assembly? Or is it expected the analyzer to always be one dll?

Should it go into directly `analyzers/dotnet/cs` (or similar) (works, but shows as another analyzer dll without any analyzer in it) or into `lib` (seems to cause warnings in VS with package restore).</Description>
  </Issue>
  <Issue>
    <IssueID>27831</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csc.exe FailFast exception on combination of implicit array cast, `await` and `in` keyword</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>27831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>27831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
public async Task A(object[] items)
{
    C(items, await B());
}

private async Task&lt;int&gt; B() =&gt; 0;

private void C(in IEnumerable&lt;object&gt; items, in int length)
{
}

2. Try to compile

**Expected Behavior**:
Successful compilation.

**Actual Behavior**:

Error	MSB6006	"csc.exe" exited with code -2146232797.	NetStandardConversionCrash	C:\Users\michaelc\.nuget\packages\microsoft.net.compilers\2.8.2\tools\Microsoft.CSharp.Core.targets	52	
`</Code>
    <Description>**Version Used**: 
Microsoft.Net.Compilers 2.8.2

**Steps to Reproduce**:

1. Checkout  (or add the following code:)
``

Further notes:
When the `in` keyword is removed from `items` in C, the crash is gone. When the `length` passed is a constant in `A`, the crash is gone.</Description>
  </Issue>
  <Issue>
    <IssueID>27824</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New Formatting Document Settings do not get applied to a selection</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>08/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27824</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27824</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>27824</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.8.0 Preview 3.0 [27812.3003.d15.8stg]

**Steps to Reproduce**:

1. File -&gt; New Console App (.NET Framework)
2. Change Program.cs to:

``

**Actual Behavior**:

It remains the same and nothing happens.</Description>
  </Issue>
  <Issue>
    <IssueID>27823</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Changing new Formatting Settings do not get applied until you modify an open file</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>27823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.8.0 Preview 3.0 [27812.3003.d15.8stg]

**Steps to Reproduce**:

1. File -&gt; New Console App (.NET Framework)
2. Change Program.cs to:

``

**Actual Behavior**:

It remains the same and nothing happens. You have to edit the document before Format document will respect the settings</Description>
  </Issue>
  <Issue>
    <IssueID>27821</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Format document should not add braces by default</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>18/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>27821</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Formatting a document by default now has started adding braces around single line blocks:

``

However there is no way to enforce whether or not braces are optional for single line statements in editorconfig. This is going to lead to unneeded changes to my tree without a way to enforce it. This option should be turned off by default unless there is a way to enforce it.</Description>
  </Issue>
  <Issue>
    <IssueID>27820</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Visual Studio crashes if you reopen Options with the code style page open</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>27820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.8.0 Preview 3.0 [27807.3004.d15.8stg] &amp; 15.8.0 Preview 3.0 [27812.3003.d15.8stg]

This does not repo in 15.8 Preview 2.0, however, is a 100% repro in the builds above.

**Steps to Reproduce**:

1. Tools -&gt; Options -&gt; Text Editor -&gt; C# -&gt; Code Style
2. Click OK
3. Tools -&gt; Options

-- Crash --

src\Editor\Text\Impl\WpfView\WpfTextView.cs

``</Description>
  </Issue>
  <Issue>
    <IssueID>27819</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Simplify name" has started enforcing var &amp; this. usage opposite to editorconfig settings</Title>
    <CreatedDate>14/06/2018</CreatedDate>
    <ClosedDate>30/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>27819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>27819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
csharp_style_var_for_built_in_types = true:none
csharp_style_var_elsewhere = true:none


**Steps to Reproduce**:

 C#
    class Program
    {
        static void Main(string[] args)
        {
            FileData curData = CreateData();
        }

        private static FileData CreateData()
        {
            throw new NotImplementedException();
        }
    }
`</Code>
    <Description>**Version Used**: 
Version 15.8.0 Preview 3.0 [27807.3004.d15.8stg]

This is a regression from 15.7. "Simplify name" (IDE0001) has started enforcing var usage, despite "use 'var' instead of explicit type" (IDE0007) already enforcing this.

It also isn't respecting var settings:

`` 

**Expected Behavior**:
![image](


**Actual Behavior**:
![image](

In my tree, this actually causing it to show up as error:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>27805</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>27805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash in Progression when node path contains illegal characters</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

We've seen crashes where a progression node has a path that looks like `C:\path\to\"some path\App.config"` including the illegal quote characters. We need to be more defensive.</Description>
  </Issue>
  <Issue>
    <IssueID>27804</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpRenameTrackingCodeFixProvider NullReferenceException when renaming a C# interface</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27804</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27804</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27804</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27804</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
`Version 15.7.3`

I was attempting to rename an interface in the solution.  I first tried the rename refactor, but every time I tried to apply the change, it would change the name back to the original.  I then renamed it manually, attempted to apply the rename code fix, and the following error occurred:
``</Description>
  </Issue>
  <Issue>
    <IssueID>27801</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csctoolpath no longer having value.</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>30/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.7.3

**Steps to Reproduce**:

1. Upgrade from version 15.7.2 to 15.7.3
2. Use the following as a target definition in your *.csproj:
``
3. Execute the target.
4. On 15.7.2 CscToolPath is set to a value. On 15.7.3 it evaluates to an empty string and the target tries to copy files like \pagefile.sys to the target folder instead of the actual roslyn files.

Might have been introduced by pull request 22487 (issue #22478).</Description>
  </Issue>
  <Issue>
    <IssueID>27800</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>27800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect spilling of RHS in dynamic compound addition/subtraction</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>24/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

This appears to be a bug since the initial implementation of roslyn, and is breaking change from the native compiler's behavior. Bug is here:  That should be after the LHS has been spilled, not before.</Description>
  </Issue>
  <Issue>
    <IssueID>27783</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Low perfomance?</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>16/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>27783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![35ff256d677f72565c72a10c0772083001d79bcdeac3908aa338fd729e7bf75d](

Really?  Why??</Description>
  </Issue>
  <Issue>
    <IssueID>27782</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to use the Create-API  in namespace "CSharpScript"?</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>13/06/2018</ClosedDate>
    <IssueLabels />
    <Code>C#
 var script = CSharpScript.Create&lt;Action&gt;(
     code, 
     ScriptOptions.Default.AddReferences(Assembly.GetEntryAssembly()),
     typeof(MyClass)
);
 script.Compile();
 return script.CreateDelegate();


Error:

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.ArgumentException: The script requires access to global variables but none were given
Parameter name: globals
   at Microsoft.CodeAnalysis.Scripting.Script`1.ValidateGlobals(Object globals, Type globalsType) in /_/src/Scripting/Core/Script.cs:line 560
   at Microsoft.CodeAnalysis.Scripting.Script`1.&lt;&gt;c__DisplayClass18_0.&lt;CreateDelegate&gt;b__0(Object globals, CancellationToken token) in /_/src/Scripting/Core/Script.cs:line 482
`</Code>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>27781</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>27781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS crashes after opening solution with "Cannot find service module info file '*/roslynRemoteHost.servicehub.service.json'" / Cannot execute 'discoverService'.</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>27781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>27781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I could find several similar issues but not identical.

Microsoft Visual Studio Enterprise 2017 ver 15.7.3 (27703.2026)
.NET Framework ver 4.7.02558
on fully updated Windows Server 2008 R2 Enterprise SP1 (64b)

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: StreamJsonRpc.RemoteInvocationException: Request locate failed with message: Cannot find service module info file '*/roslynRemoteHost.servicehub.service.json' in 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\ServiceHub\Services', using discovery services failed: 
``</Description>
  </Issue>
  <Issue>
    <IssueID>27775</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn applies new overload resolution rules no matter what the LangVersion is</Title>
    <CreatedDate>13/06/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>27775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;LangVersion&gt;2&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;


cs
using System;
using System.Threading.Tasks;

public static class Repro
{
    public static void Foo(Action&lt;int&gt; action)
    {
    }

    public static void Foo(Func&lt;int, Task&gt; asyncAction)
    {
    }

    public static void Surprise()
    {
        Foo(null);
    }
}
`</Code>
    <Description>This code compiles on Roslyn for all C# language versions but gives the expected CS0121 when compiled with `C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe`:

``

Repros in vs 15.7.3 and [SharpLab's 2.8.2]( as well as a [random branch from 2017](

Is this part of the overload resolution changes in C# 7.3? Why is it changing the compilation of C# code under versions 2 to 7.2?
</Description>
  </Issue>
  <Issue>
    <IssueID>27772</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>27772</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetInvocationEscapeScope() issue allows accessing invalid stack locations</Title>
    <CreatedDate>12/06/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27772</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27772</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
class C
{
  static void Main(string[] args)
  {
    ref long x = ref M(default); // get a reference to the stack which will be used for the next method
    M2(ref x); // break things
    Console.ReadKey();
  }

  public static ref long M(S reciever)
  {
    Span&lt;long&gt; ls = stackalloc long[0]; // change the length of this stackalloc to move the resulting pointer and break different things
    long x = 0;
    ref var y = ref x;
    {
      ref var z = ref reciever.M(ref y);
      return ref z;
    }
  }

  static void M2(ref long q)
  {
    Span&lt;long&gt; span = stackalloc long[50];
    var element = span[0]; // it was ok
    q = -1; // break things
    element = span[0]; // and not it's broken:
                       // System.AccessViolationException: 'Attempted to read or write protected memory. This is often an indication that other memory is corrupt.'
  }
}

ref struct S
{
  public ref long M(ref long x) =&gt; ref x;
}


This looks like a problem in `GetInvocationEscapeScope`
http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Binder/Binder.ValueChecks.cs,e627ff4c04c0ce8a


cs
            // check receiver if ref-like
            if (receiverOpt?.Type?.IsByRefLikeType == true)
            {
                return GetValEscape(receiverOpt, scopeOfTheContainingExpression);
            }
 
            return escapeScope;
`</Code>
    <Description>From @TessenR in #27218

Compile and run the following code in debug to get access violation exception:
``

If  the receiver is ref-like and the code did not return earlier (that's why an additional scope is required in the example above) the method completely ignores arguments' aggregated escape scope and just returns the receiver's value escape scope which is 'external scope' in this case.</Description>
  </Issue>
  <Issue>
    <IssueID>27268</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Formatting for positional pattern should drop a space</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>29/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
    Point p = new Point(3, 4);

you should write
 c#
    if (p is Point(3, 4)) ...

rather than
 c#
    if (p is Point (3, 4)) ...
`</Code>
    <Description>current formatting rule is to put a space between type and positional sub-pattern. I think it should be formatted like an invocation instead (ie. no space).

For example, given
``

The reason I suggest there should be no space is that the syntax was designed to mirror the construction syntax for objects (i.e. a constructor invocation), where there is no space.</Description>
  </Issue>
  <Issue>
    <IssueID>27256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Add parameter to constructor" adds weird whitespace</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>15/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>27256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class Foo
{
    public Foo(
        int t1,
        int t2
    )
    { }
}
public class Bar
{
    public void Test()
    {
        int t1 = 1, t2 = 2, t3 = 3, t4 = 4, t5 = 5;
        var foo = new Foo(t1, t2, t3, t4, t5); // run here
    }
}

Run "Add parameter to Foo()" once.

**Expected Behavior**:

cs
    public Foo(
        int t1,
        int t2,
        int t3
    )
    { }


**Actual Behavior**:
cs
    public Foo(
        int t1,
        int t2
,
        int t3)
    { }
`</Code>
    <Description>**Version Used**: 
15.7.2

**Steps to Reproduce**:

``
Note the lone `,` on a separate line.
</Description>
  </Issue>
  <Issue>
    <IssueID>27251</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>27251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect deconstructions suggestion in the Visual Studio for escaped field name of value tuple</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>17/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
...
// Doesn't matter what the type of escaped field
var collection = new List&lt;(int position, int @delegate)&gt;();
foreach (var item in collection)
{
    ...
}


Suggestion is given for the `item` and after applying I receive `delegate` variable without escaping and, of course, with compile time errors:

c#
var collection = new List&lt;(int position, int @delegate)&gt;();
foreach (var (position, delegate) in collection)
{
    ...
}
`</Code>
    <Description>Hi,

I'm used **Visual Studio 15.6.6** and it give to me incorrect suggestion at the light bulb for the code bellow:

``

If this issue should be moved to the [Visual Studio Community]( instead of Roslyn repository, let me know about it.

</Description>
  </Issue>
  <Issue>
    <IssueID>27248</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>27248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash message not reported, only error code</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>04/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
dotnet --version  2.1.200
macOS  10.13.4

**Steps to Reproduce**:

1. dotnet restore
2. dotnet build

.csproj
    TargetFramework = netcoreapp1.1
    PreserveCompilationContext = true
    OutputType = Exe
    RuntimeFrameworkVersion = 1.1.0
    PackageTargetFallback = $(PackageTargetFallback);dotnet5.6;portable-net45+win8

**Expected Behavior**:
Build SUCCESS.

**Actual Behavior**:
Build FAILED.

/usr/local/share/dotnet/sdk/2.1.200/Roslyn/Microsoft.CSharp.Core.targets(52,5): error MSB6006: "csc.dll" exited with code 134. [/Users/xyz/Documents/Github/xyz/src/xyz/xyz.csproj]
    0 Warning(s)
    1 Error(s)</Description>
  </Issue>
  <Issue>
    <IssueID>27247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Finding enclosing MethodDeclarationSyntax for a given SyntaxNode :help-wanted:</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>31/05/2018</ClosedDate>
    <IssueLabels />
    <Description> **Steps to Reproduce**:

I have the following source code:

    public void MethodAssignment_WithIndexQuery_1(Customer from1, Customer to1, decimal amount) 
    {
         var customers = _customerRepository.GetWhere(to1.Age);
         Customer indexCustomer1 = customers[(from1.Age + to1.Age)* to1.Age];
    }

and I have as a given the SyntaxNode: node = **from1.Age** of the expression in the index argument.

Doing this yields null:

    MethodDeclarationSyntax callingMethod = node
                    .GetLocation()
                    .SourceTree
                    .GetRoot()
                    .FindToken(location.SourceSpan.Start)
                    .Parent
                    .AncestorsAndSelf()
                    .OfType&lt;MethodDeclarationSyntax&gt;()
                    .FirstOrDefault();
 
Doing `node.Parent.Parent` returns `BinaryExpressionSyntax AddExpression from1.Age * to2.Age+ to1.Age * to2.Age` and doing *Parent* of that yields **null**.
 
How can I find the `MethodDeclaration` that encloses the given syntax node?
</Description>
  </Issue>
  <Issue>
    <IssueID>27240</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB make use of Iterators and Yield.</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Through the codebase there is a lot of comments or opportunities to use iterators to yield the values, rather than creating a new list and returning that, since the VB language didn't support that feature. 

Will convert `EditorFeatures\BasicEditorFeatures\Highlighting\KeywordHighlighters` over, then submit a pull request so the team can assess if the benefits of the change outweigh the costs.</Description>
  </Issue>
  <Issue>
    <IssueID>27239</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect "Cast is redundant"</Title>
    <CreatedDate>30/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;
public class C
{
    public static void Main()
    {
        object o = null;
        TypedReference r2 = (TypedReference)o;
    }
}
`</Code>
    <Description>``

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>27233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>27233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Analyze local functions in `NullableWalker`</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>27233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Program
{
    static void F(object? x)
    {
        object y;
        object z;
        f();
        if (x == null) return;
        g();
        y.ToString(); // warning: y may be null
        z.ToString(); // warning?

        void f() =&gt; y = x; // warning: x may be null
        void g() =&gt; z = x; // warning?
    }
}
`</Code>
    <Description>``
See [LDM-2018-06-04](</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27233</IssueID>
        <PullRequestID>40422</PullRequestID>
        <Title>Improve nullable analysis of local functions</Title>
        <Description>This design tries to meld better analysis of nullable reference types in
local functions with performance. To keep the common case one pass,
local functions are analyzed using the starting state that is an
intersection of all the states before its usages (calls, delegate
conversions, etc), but the results of variables made nullable or
non-nullable inside the local function do not propagate to the callers.</Description>
        <CreatedDate>16/12/2019</CreatedDate>
        <ClosedDate>08/01/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27233</IssueID>
            <PullRequestID>40422</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>40422</PullRequestID>
            <IssueID>27233</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>27228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS stack overflow crash on simple code with erroneous attributes</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>02/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
 
[AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
[C(new C[0])] // err
[C(new string[0])]
[C(new string[1])] // err
[C(new string[1] { null })]
[C(new string[2] { null })]
public class C : Attribute {
  public C(C[] xs) { }
  public C(object[] xs) { }
 
  public static void Main() { }
}
`</Code>
    <Description>**Version Used**: 

15.8 preview

**Steps to Reproduce**:

Paste the following code into VS editor:
``

**Expected Behavior**:

IDE is alive, compiler errors are reported.

**Actual Behavior**:

StackOverflowException somewhere inside Binder...</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27228</IssueID>
        <PullRequestID>33498</PullRequestID>
        <Title>Fix stack overflow where overload resolution gets parameter type attributes</Title>
        <Description>Fixes #33388 by refraining from normalizing task-like types when binding an attribute argument.

I'd like to make sure I completely understand the implications of this change. If we stop normalizing task-like parameters to attribute constructors, what user-facing consequences could possibly occur?</Description>
        <CreatedDate>19/02/2019</CreatedDate>
        <ClosedDate>27/02/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27228</IssueID>
            <PullRequestID>33498</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27223</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NRE from DocumentationCommentExtensions.IsMultilineDocComment</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>12/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>27223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[VS Feedback issue](

Repro:

Create a console app, place cursor in line 10 between `&lt;summary&gt;` and `&lt;/summary&gt;`, hit enter.

``</Description>
  </Issue>
  <Issue>
    <IssueID>27221</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>27221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NRE in CSharpUseImplicitTypeHelper.AssignmentSupportsStylePreference</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Got the following NRE while editing some broken code in Roslyn.sln, I don't have repro steps:

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27221</IssueID>
        <PullRequestID>27246</PullRequestID>
        <Title>UseType analyzers/fixers should handle ref types</Title>
        <Description>### Customer scenario
Use a `ref var` in a local declaration or foreach loop.
In 15.7, you would get a gold bar for an analyzer crash.
With this fix, the UseExplicitType and UseImplicitType analyzers and fixers can handle ref types (ie. only fix the type portion, leaving the `ref` alone).

### Bugs this fixes
Fixes 

### Risk
### Performance impact
Low. The core of this change is to strip the `ref` in a few places in the analysis logic.

### Is this a regression from a previous update?
No.

### Root cause analysis
The bug exists since C# 7.2 (VS 2017 version 15.5) which introduced ref locals. It was compounded by `foreach ref` loops in C# 7.3 (15.7).

### How was the bug found?
Reported by customer.

Tagging @CyrusNajmabadi @dotnet/roslyn-ide for review. Thanks</Description>
        <CreatedDate>30/05/2018</CreatedDate>
        <ClosedDate>31/05/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>27221</IssueID>
            <PullRequestID>27246</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>27221</IssueID>
            <PullRequestID>27246</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>27246</PullRequestID>
            <IssueID>27221</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>27246</PullRequestID>
            <IssueID>27221</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler allows code to ref return a reference to the current method's stack</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
class C
{
  static void Main(string[] args)
  {
    ref int x = ref M(); // get a reference to the stack which will be used for the next method
    M2(ref x); // break things
    Console.ReadKey();
  }

  static ref int M()
  {
    Span&lt;int&gt; outer = stackalloc int[100];
    if (outer is Span&lt;int&gt; inner) // copy stackalloc span to a pattern variable
    {
      return ref inner[50]; // return a reference to the current method's stack
    }

    throw null;
  }

  static void M2(ref int q)
  {
    q = -1;
    Console.WriteLine(q); // prints '-1'

    Span&lt;long&gt; span = stackalloc long[50]; // allocate something on the new stack

    Console.WriteLine(q); // prints '0', stackalloc zero-ed the memory

    long sum = 0;
    foreach(var x in span)
      sum+=x;
    Console.WriteLine(sum); // prints '0', all elements of stackalloc are zero

    q = -1; // here we actually write to the memory allocated by 'stackalloc'

    sum = 0;
    foreach(var x in span)
      sum+=x;
    Console.WriteLine(sum); // prints '4294967295', one of the element was set to '0xFFFFFFFF' and reinterpreted as long
  }
}

**Expected Behavior**:
Compiler error on the line `return ref inner[50]`
Error CS8352 Cannot use local 'inner' in this context because it may expose referenced variables outside of their declaration scope

**Actual Behavior**:
the code prints

-1
0
0
4294967295
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017 
Version 15.7.2
VisualStudio.15.Release/15.7.2+27703.2018
Microsoft .NET Framework
Version 4.7.03056

**Steps to Reproduce**:

Compile and run the following code:
``

you could break things in a more interesting way if you return an odd element of `stackalloc int[]` from the first method. E.g. returning the 25th element will print `-4294967296` instead.

</Description>
  </Issue>
  <Issue>
    <IssueID>27217</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Not working format for array initialization syntax</Title>
    <CreatedDate>29/05/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Affected Branch: [27623.0.d15.7]
Affected Build: 15.7.0 Preview 5.0
Affected Product Language: C#, VB

Steps to reproduce:

1. Create C# or VB application (in my case Console app)
2. Add following code to Main method:

``

3. Edit -&gt; Advanced -&gt; Format Document

Expected: code formatted 
Actual: code not formatted

[Gif-sharp, gif-vb.]([url](</Description>
  </Issue>
  <Issue>
    <IssueID>27214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# intellisense does not detect unused variable if assigned from function call</Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>31/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>27214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var one = 2;


This will report one as being a variable that was assigned but its value is never used.

If I assign a return value of a method into this variable, it will not report the same error. 

For example:

csharp
var two = giveMeAValue();


If I never touch 'two' after this line, it will still not report the same error. 

I think this is a mistake.

If you do not use the value of the variable, regardless of where that value came from, it should be flagged as an error.

Here is a complete example:

csharp
class Foobar {
	int giveMeAValue () {
		return 2;
	}

	public int test ( int c, int d ) {
		var one = 2;
		var two = giveMeAValue();

		return d + 1;
	}
}
`</Code>
    <Description>If I assign a value to a variable, but never use that variable, VS will report:

	The variable 'x' is assigned, but its value is never used. 

For example:

``

The variable 'one' gets flagged. The variable 'two' is not flagged. (And as a sidenote, the function argument 'c' is not flagged either as being unused).

_This issue has been moved from 
VSTS ticketId: 616340_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>27213</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>27213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0016 should not be dimming the text as that indicates the code is unused. </Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>27213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
_privateField = constructorParam ?? throw new ArgumentNullException(nameof(constructorParam)); 


but not for general use in a class where it wants to do take this... 

csharp
var someObject = new Thing();
var thingCandidateField = _controller.GetStuff(SomeOtherObject.SearchField);
if (thingCandidateField == null)
{
   throw new InvalidOperationException($"Cant make a new thing. The paramter {nameof(SomeOtherObject.SearchField)} had value {SomeOtherObject.SearchField} that returned no results.");
}
someObject.Prop1 = thingCandidateField;


and make this...

csharp
var someObject = new Thing();
var thingCandidateField = _controller.GetStuff(SomeOtherObject.SearchField);
someObject.Prop1 = thingCandidateField ?? throw new InvalidOperationException($"Cant make a new thing. The parameter {nameof(SomeOtherObject.SearchField)} had value {SomeOtherObject.SearchField} that returned no results.");
`</Code>
    <Description>I dont want to turn the inspection off, but it needs to have some other style of annotating the code. 

Also, the recommended action for these combines the property set with an exception throw, and that can makes the text harder to read by either causing line breaks to be added or makes for more scrolling.

I'm not sure if I want this feature at all or not. Its useful when its in a constructor and it can be used for something like

``

Sorry about the formatting if its bad.  That last statement should be one long single line. This feedback tool is still very hard to use when sharing code.

_This issue has been moved from 
VSTS ticketId: 618902_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>27210</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect 'name can be simplified' [replaces with var] </Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>28/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.Collections.Generic;

namespace N
{
    class Program
    {
        static void Main(string[] args)
        {
            var doubleList = new List&amp;lt;double&amp;gt;();
            foreach (var q in doubleList)
            {
            }
        }
    }
}
`</Code>
    <Description>1. Create new C# .NET Framework project.
2. Paste the following code:

``

3. Notice that `doubleList` in `foreach` is greyed out.
4. Ivoke 'Quick actions' menu on it (Ctrl+.)
5. Notice that it suggests &amp;quot;Simplify name 'doubleList'&amp;quot;.
6. Accept the suggestion, notice that `doubleList` is replaces with `var` and the code now is invalid.

_This issue has been moved from 
VSTS ticketId: 620703_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>27209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect IBinaryOperation.OperatorKind</Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>27209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>27209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
(i != null &amp;&amp; i &gt; 5)
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.8.0

**Steps to Reproduce**:
1. Obtain `IBinaryOperation` for the next expression (`i` is `int?`):
``

**Expected Behavior**:
`IBinaryOperation.OperatorKind` equals `BinaryOperatorKind.ConditionalAnd` (0x0d)

**Actual Behavior**:
`IBinaryOperation.OperatorKind` equals `BinaryOperatorKind.And` (0x0a)

Possibly caused at [CSharpOperationFactory.Helper.DeriveBinaryOperatorKind]( where the [Logical]( flag (0x0002_0000) is cut off by [OpMask]( (0x0000_FF00).</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27209</IssueID>
        <PullRequestID>24263</PullRequestID>
        <Title> An initial prototype to build a flow graph</Title>
        <CreatedDate>16/01/2018</CreatedDate>
        <ClosedDate>18/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27209</IssueID>
            <PullRequestID>24263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - Flow Analysis</Name>
            <IssueID>27209</IssueID>
            <PullRequestID>24263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>27209</IssueID>
            <PullRequestID>24263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27208</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>27208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ITryOperation.Finally.Syntax returns BlockSyntax instead of FinallyClauseSyntax</Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>27208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>27208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>27208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
try
{
}
catch (System.Exception ex)
{
}
finally
{
}

`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.8.0

**Steps to Reproduce**:
1. Obtain `ITryOperation` for the next `try` statement:
``
2. Inspect its `.Finally.Syntax` property
3. This returns a `BlockSyntax`, whose `.Parent` returns `FinallyClauseSyntax`

**Expected Behavior**:
`ITryOperation.Finally.Syntax` points to a `FinallyClauseSyntax`, similar to how `ITryOperation.Syntax` points to a `TryStatementSyntax` instead of its block.

**Actual Behavior**:
`ITryOperation.Finally.Syntax` points to a `BlockSyntax`.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27208</IssueID>
        <PullRequestID>22018</PullRequestID>
        <Title>Make certain untested/not yet design approved IOperation APIs internal</Title>
        <Description>In preparation for a merge of features/ioperation to dev15.5, we have decided to internalize all the IOperation APIs which are either not tested or not reviewed by the design team.

This includes the following APIs with bugs tracking reviewing/adding tests for them and making them public again: IArrayElementReferenceExpression(#22006), IAwaitExpression(#22007), ICatchClause(#22008), IEndStatement(#22004), IPlaceholderExpression(#21294), ISizeOfExpression(#21296), IStopStatement(#21297), ITryStatement(#22008), ITypeOfExpression(#22003), IWithStatement(#22005), IOperation.HasErrors (#22124)

This change also includes a simple API rename: IMethodBindingExpression renamed to IMethodReferenceExpression(#21289).
</Description>
        <CreatedDate>10/09/2017</CreatedDate>
        <ClosedDate>17/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>27208</IssueID>
            <PullRequestID>22018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>27208</IssueID>
            <PullRequestID>22018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>27208</IssueID>
            <PullRequestID>22018</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code auto-formating not working</Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>28/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
for (int i = 0; i &lt; 10; i++)
{                  int[] x = await Task.FromResult(new[] {
1 });
}


will be auto-formatted to:

csharp
for (int i = 0; i &lt; 10; i++)
{
    int[] x = await Task.FromResult(new[] {
1 });
}


However I would expect:

csharp
for (int i = 0; i &lt; 10; i++)
{
    int[] x = await Task.FromResult(new[] { 1 });
}
`</Code>
    <Description>This:

``

_This issue has been moved from 
VSTS ticketId: 592849_
_These are the original issue comments:_

Yuanlong Li-MSFT on 4/2/2018, 03:19 AM (55 days ago): &lt;p&gt;Thanks for your feedback, I am sorry for the issue you are experiencing, I try to reproduce your issue . but I still can’t reproduce it. For investigate this issue further, Would it possible to afford us with your repro video and more detailed steps so we can try to narrow down the issue?&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;We are looking forward to hearing you.&lt;/p&gt;

Yuanlong Li-MSFT on 4/3/2018, 11:28 PM (54 days ago): &lt;p&gt;Hello &amp;nbsp;&lt;a target='_blank' href=" target="_blank"&gt;segruds&lt;/a&gt;,&lt;/p&gt;&lt;p&gt;Thanks for taking the time to report this issue to us. I’ve filed a bug for this issue on the C++ team here. The status on this Developer Community item will be updated as that bug is looked at. Thanks again for reporting this to us.&lt;/p&gt;
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>27202</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxNode deserialization error in Entity Framework + Memorystream</Title>
    <CreatedDate>28/05/2018</CreatedDate>
    <ClosedDate>29/05/2018</ClosedDate>
    <IssueLabels />
    <Description>I think this is frowned upon but i do not want to make too many copies of this so here is the link. I will also post it in the Net Core project because i have no idea where the fault is.

</Description>
  </Issue>
  <Issue>
    <IssueID>27200</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>DocumentEditor.AddAttribute does not always add the assembly keyword.</Title>
    <CreatedDate>27/05/2018</CreatedDate>
    <ClosedDate>02/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>27200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>27200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>15.7.2: 

**Steps to Reproduce**:

1. Open a minimal C# console app in an `MSBuildWorkspace`.
2. Add an assembly-level attribute to one of the source files in the project, say `Program.cs`.
3. Get a `Document` instance for the file.
4. Get a `DocumentEditor` instance for the file.
5. Create an assembly-level attribute via the following:
``
6. Call `DocumentEditor.AddAttribute` on the `CompilationUnit` associated with the file, supplying the above attribute list.
7. Note that the `assembly` keyword is not added to the file.
8. Now remove any assembly-level attributes from the source file.
9. Repeat the experiment and note that the `assembly` keyword is properly added.

**Expected Behavior**:
The `assembly` keyword should always be added if the proper `AttributeTargetSpecifier` is included.

**Actual Behavior**:
The `assembly` keyword is only added if there are no other assembly-level attributes in the compilation unit.

See attached repro.
[RoslynTest.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>27198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add a command that can comment/uncomment depending on context</Title>
    <CreatedDate>27/05/2018</CreatedDate>
    <ClosedDate>12/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We currently have a command for comment and command for uncomment. R# has a single command that comments/uncomments based on the context. It would be nice if we add a similar one.

</Description>
  </Issue>
  <Issue>
    <IssueID>27197</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cannot turn off "'if' statement can be simplified"</Title>
    <CreatedDate>27/05/2018</CreatedDate>
    <ClosedDate>20/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>27197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
root = true

[*.{cs,vb}]
dotnet_style_prefer_conditional_expression_over_return = false


 C#
    class Program
    {
        public override bool Equals(object obj)
        {
            if (obj is string other)
            {
                return Equals(other);
            }

            return false;
        }
    }
}
 

**Expected Behavior**:
No suggestion

**Actual Behavior**:

Message	IDE0046	'if' statement can be simplified	ConsoleApp372	C:\Users\davkean\Source\Repos\ConsoleApp372\Program.cs	9	Active

`</Code>
    <Description>**Version Used**: 
Version 15.8.0 Preview 2.0 [27723.0.d15.8]

**Steps to Reproduce**:

1. Try flipping the setting back and forth from `false` to `true:suggestion` with a VS restart in between. The setting is being cached someone I cannot figure out.

.editorconfig
``

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>27197</IssueID>
        <PullRequestID>27280</PullRequestID>
        <Title>EditorConfig full refresh</Title>
        <Description>Fixes #15003 (no document edits required for refresh)
Fixes #19089

This pull request implements the IDE side of the complete .editorconfig experience. This implementation is a workaround since we were not able to unify the compiler, IDE, and project system to a single API which is currently under development. However, the user-facing behavior provided by this pull request should be difficult to distinguish from the final desired state.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>31/05/2018</CreatedDate>
        <ClosedDate>11/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>27197</IssueID>
            <PullRequestID>27280</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>27197</IssueID>
            <PullRequestID>27280</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>sharwell</FixedById>
            <PullRequestID>27280</PullRequestID>
            <IssueID>27197</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>27195</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Please stop adding opinionated style-based code analysis to the error list</Title>
    <CreatedDate>27/05/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\SettingsValueSerializer.vb	90	Active
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\SettingsValueSerializer.vb	145	Active
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\TypeEditorHostControl.vb	513	Active
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\TypeEditorHostControl.vb	551	Active
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\TypeEditorHostControl.vb	618	Active
Message	IDE0046	'If' statement can be simplified	Microsoft.VisualStudio.Editors	E:\project-system2\src\Microsoft.VisualStudio.Editors\SettingsDesigner\TypeEditorHostControl.vb	787	Active
Message	IDE0046	'if' statement can be simplified	Microsoft.VisualStudio.ProjectSystem.Managed.TestServices	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.TestServices\ProjectSystem\ProjectTreeParser\Tokenizer.cs	30	Active
Message	IDE0046	'if' statement can be simplified	Microsoft.VisualStudio.ProjectSystem.Managed.TestServices	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.TestServices\ProjectSystem\ProjectTreeParser\Tokenizer.cs	123	Active
Message	IDE0046	'if' statement can be simplified	Microsoft.VisualStudio.ProjectSystem.Managed.TestServices	E:\project-system2\src\Microsoft.VisualStudio.ProjectSystem.Managed.TestServices\ProjectSystem\ProjectTreeParser\Tokenizer.cs	145	Active


I looked at the changes it wanted to make here's one:

 VB
    If items.Length = 0 Then
        Return NativeMethods.S_OK
    End If
    Return VsUIShell2Service.SaveItemsViaDlg(CUInt(items.Length), items)


It wanted to change to:

 VB
Return If(items.Length = 0, NativeMethods.S_OK, VsUIShell2Service.SaveItemsViaDlg(CUInt(items.Length), items))
`</Code>
    <Description>I upgraded my build in 15.8, and Error List which was previous "clean" under all categories, had about ~500 of these 

``

I do not believe that it makes the code better or clearer, while I understand that some people like this form, I do not. That's what makes it a style choice. These style based should not appear in my Error List unless I've either got a setting that indicates what behavior I'd like (think var settings) **or** I'll deliberated opt'd in them. Show them as a ... in the editor or whatever, but my Error List are things that I need to address - I should haven't keep turning off rules every time I upgrade my VS.</Description>
  </Issue>
  <Issue>
    <IssueID>27189</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>These can be made Constants.</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following collection of string variables in [HelpKeywords]( can be made `const`. 

</Description>
  </Issue>
  <Issue>
    <IssueID>27187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>27187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Disassembly] body of method not shown after answering No and then Yes</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>27187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    public static int AbsoluteValue(int input)
    {
        var result = Math.Abs(input);
        return result;
    }
    `</Code>
    <Description>**Version Used**: 15.8 Preview 1.1

🔗 Copied from internal bug [600249](

### Steps to reproduce:

1. Create a C# Class Library (.NET Framework) with a method:

    ``

2. Build the library 
3. Close the current solution and create a new C# Class Library (.NET Framework) 
4. Add a reference to the DLL created in step 2 
5. Add a call to the public static method defined in step 1 
6. Place the caret on the call, and press F12 to navigate to the definition
7. Click No
8. Close opened decompiled library
9. Press F12 to navigate to the definition again
10. Click Yes
 
### Expected:

The AbsoluteValue method appears, and the body is shown with a call to Math.Abs

### Actual:

The AbsoluteValue method appears, but the body is not visible.</Description>
  </Issue>
  <Issue>
    <IssueID>27185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Failed windows_debug_es_unit32_prtest</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>31/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>27185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In PR #25565 `windows_debug_es_unit32_prtest` fails, but I am unable to access it to see why.
The link on jenkins says `Not Found`.
</Description>
  </Issue>
  <Issue>
    <IssueID>27181</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implementing abstract class should make method async if method returns a Task</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>24/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>27181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public override async Task MyMethodAsync()
        {
            throw new NotImplementedException();
        }


Snippet:

csharp
 public abstract class A
 {
        public abstract Task MyMethodAsync();
 }

    public class B : A
    {

    }
`</Code>
    <Description>From `B`, if you **Ctrl+.** to implement the abstract class, the override isn't marked as async:

![image](

**Expected**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>27180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS0201 (Only assignment, call....) doesn't mention await</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>01/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>27180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>27180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The old compiler used to report:
Only assignment, call, increment, decrement, **await**, and new object expressions can be used as a statement

Roslyn:
Only assignment, call, increment, decrement, and new object expressions can be used as a statement

reported here: </Description>
  </Issue>
  <Issue>
    <IssueID>27179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>27179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Code Style] Require or prevent usings inside a namespace</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>27179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>27179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Several people have asked to have either a Tools&gt;Options setting for this or an .editorconfig option. You can get this under StyleCopAnalyzers today.</Description>
  </Issue>
  <Issue>
    <IssueID>27174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Opening a misc file with a compiler error causes NullReferenceException in ProjectTypeLookupService</Title>
    <CreatedDate>26/05/2018</CreatedDate>
    <ClosedDate>26/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Open Visual Studio (make sure you've never opened a solution)
2. File -&gt; New File -&gt; C#
3. Introduce a syntax error.

Expected: Nothing
Actual:


``</Description>
  </Issue>
  <Issue>
    <IssueID>27172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>27172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider having the compiler find .editorconfig files instead of build task</Title>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>29/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>27172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now, the proposal is that a build task will find editorconfig files and pass them off to the compiler. It could be more efficient to have the compiler do this itself.

The primary change here would be a change to the command line, since instead of passing files, there would be a boolean flag to indicate the compiler would look for editorconfig files.</Description>
  </Issue>
  <Issue>
    <IssueID>27163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>27163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove `ConversionGroup`</Title>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>27163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>27163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>27163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Investigate removing `ConversionGroup` and simply walk the `BoundConversion` instances from initial binding in `NullableWalker.

See </Description>
  </Issue>
  <Issue>
    <IssueID>27154</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>XUnit build failures in 'prodcon/roslyn/master/' - '20180525.01'</Title>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>25/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>27154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@dotnet-mc-bot commented on [Fri May 25 2018](There were a set of failures during this build. Here is a summary of these:
* 
  - **Agent:** DDMBLDW149
  - **Error log:**Command: C:\Users\dlab14\.nuget\packages\xunit.runner.console\2.3.1\tools\net452\xunit.console.x86.exe "E:\A\_work\24\s\Binaries\Release\UnitTests\CSharpVisualStudioTest\Roslyn.VisualStudio.CSharp.UnitTests.dll"  -xml "E:\A\_work\24\s\Binaries\Release\UnitTests\CSharpVisualStudioTest\xUnitResults\Roslyn.VisualStudio.CSharp.UnitTests.dll.xml" -noshadow -verbose
xUnit output log: E:\A\_work\24\s\Binaries\Release\Logs\Roslyn.VisualStudio.CSharp.UnitTests.dll.out.log
xunit produced no error output but had exit code 1
Errors Roslyn.Services.Editor2.UnitTests.dll

@mmitche, @jaredpar 
</Description>
  </Issue>
  <Issue>
    <IssueID>27153</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>27153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2017 crash using local ref </Title>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>04/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>27153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have a method that takes a ref parameter (value type) like so:public void Method(ref ValueStruct value){}I went to type the following in the body of the method:_values[0] = ref value;As soon as I put in the &amp;quot;ref&amp;quot; keyword on the line above, visual studio 2017 froze and crashed to the desktop.I was able to reproduce this several times.  Using Windows 10.0.17134.48Visual Studio 2017 Pro (15.7.2, C# 7.3, .NET 4.7.1)_This issue has been moved from VSTS ticketId: 620928__These are the original issue comments:_messenger on 5/22/2018, 10:35 PM (2 days ago): Also, I disabled resharper and it still crashes.  So this is definitely something in VS2017._These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>27152</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Replace `NullableWalker.Result` with `TypeSymbolWithAnnotations`</Title>
    <CreatedDate>25/05/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>27152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>27152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Investigate calculating the type only at each `BoundExpression` in `NullableWalker`, replacing `Result` with `TypeSymbolWithAnnotations`. L-value "slots" would be calculated lazily, at the time of assignment.</Description>
  </Issue>
  <Issue>
    <IssueID>26907</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26907</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Simplify code for CInt(Math.Ceiling(x))</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>23/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26907</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>26907</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As a follow-on to the work for  the following additional opportunities for code improvement exist:
1. `CInt(Math.Truncate(x))` (drop call to `Truncate` and to `Round`)
2. `CInt(Math.Ceiling(x))` (drop the call to `Round`)
3. `CInt(Math.Floor(x))` (drop the call to `Round`)
4. `CInt(Math.Round(x))` (drop a duplicate call to `Round`)
5. `CInt(Int(x))` (drop the call to `Round`)

Please modify the VB compiler to produce improved code for these scenarios.
</Description>
  </Issue>
  <Issue>
    <IssueID>26897</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LLVM</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>30/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26897</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Not sure that is right repo for that kind of questions, sorry about that.

Recently Oracle has released GraalVM that opens lot's of possibilities to share code between languages. Like java and all supporting LLVM. This opens lot's of scenarios previously was not possible. Like when you write on the lang and lib you need is not available on that lang is not a problem anymore. That works fine for most of the popular languages but the C#/.NET. LLVM repo seems to be dead, unfortunately. If we could compile to the LLVM we will be able to:
1. Finally, mix Java&amp;.NET and actually LOT's of currently used languages in one process
2. Run .NET code on the GraalVM that is available on more platforms that Core right now 

That could bring a whole new wave of devs starting using .NET as it won't be "that different" anymore, and it won't need them to lock on the Microsoft universe anymore, as will let them to reuse whole world of already written libs on many languages.

</Description>
  </Issue>
  <Issue>
    <IssueID>26896</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft.CodeAnalysis.CSharp.PatternSwitchBinder.BindSwitchExpressionAndSections uses C# binder to bind sections that declare locals</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>20/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>26896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>26896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See Microsoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.ExpressionVariableInCase_1 unit-test for example

A BoundSwitchSection is created instead of BoundPatternSwitchSection, locals are not preserved in the bound tree and not exposed in IOperation tree. This is blocking CFG work </Description>
  </Issue>
  <Issue>
    <IssueID>26894</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0007 when enum name is the same as variable name</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>03/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26894</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion


Code:

c#
enum A { B, C };

public void Fun()
{
    A A = A.B;
}


**Expected Behavior**:

No IDE0007 and no suggested "code fix".

**Actual Behavior**:

It suggests to replace `A` with `var` but that would lead to code that won't compile (Cannot use local variable before it's declared).

After code fix:

c#
enum A { B, C };

public void Fun()
{
    var A = A.B;
}
`</Code>
    <Description>**Version Used**: 

Not sure what version is meant but I'm using Visual Studio 15.7.1, I hope that helps.

**Steps to Reproduce**:

Config:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26893</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0009 should not nag in static context</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>19/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26893</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26893</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26893</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
namespace RoslynSandbox
{
    using System;

    [Obsolete(nameof(Value))]
    class Foo
    {
        public int Value { get; set; }
    }
}



Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0009	Add 'this' or 'Me' qualification.	RoslynSandbox(net461)	C:\Git\RoslynSandbox\RoslynSandbox\Foo.cs	5	Active
`</Code>
    <Description>Repro code:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>26887</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Don't get offered to "fully qualify" a nested type in a field declaration if you haven't specified a name</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``

**Expected Behavior**:
![image](

**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26886</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider producing a info diagnostic for unnecessary suppression operator</Title>
    <CreatedDate>16/05/2018</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26886</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26886</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26886</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As part of the nullable dogfood, we're putting some suppression operators which will be removed after some fixes are made (for instance, I think that `GreenNode.GetSlot` should return a non-nullable, or throw).
It won't be trivial then to remove those suppression operators once the issue is fixed, so having a diagnostic (even with low severity) would be useful.
That would allow greying out the operator and offer a fixer to remove it (or remove all).</Description>
  </Issue>
  <Issue>
    <IssueID>26874</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Design assemblies should be built with a lower version of .NET</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>26874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Xamarin.Forms 3.0.0.446417
**Steps to Reproduce**:

1. Create a .NET 4.6.1 WPF app and reference Xamarin.Forms.Platform.WPF
2. Compile.
3. Observe warnings

**Expected Behavior**:
No warnings.

**Actual Behavior**:
``

The design projects are compiled with a .NET version that is too high. despite these projects saying v4.5 is supported. Design assemblies really shouldn't be running with versions higher than what the design assemblies they are building on top of are built for.

Example:
</Description>
  </Issue>
  <Issue>
    <IssueID>26873</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VenusCommandFilter/AbstractVsTextViewFilter uses incorrect buffer when providing values on hover over for cshtml files on debugging</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1.  Try to debug a CSHTML file with some C# code
2.  Hover over on a variable with C# object.

**Expected Behavior**:
See object type description and value.

**Actual Behavior**:
See object type description but no value.

**Analysis**
There could be some problems on VS side but Roslyn attempts to use an incorrect buffer to search for span.

1. [VenusCommandFilter calls]( AbstractVsTextViewFilter.GetDataTipTextImpl

2.  Then, [it gets]( a buffer from caret
`var subjectBuffer = WpfTextView.GetBufferContainingCaret();`

3. However, the caret can be in HTML but the item hovered over can be in C#. Then, the buffer is null. And we stop search for the span.</Description>
  </Issue>
  <Issue>
    <IssueID>26868</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Private field assigned in tuple notation should not produce IDE0044 (add readonly modifier)</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26868</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26868</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7.1

**Steps to Reproduce**:

1. In any class (or struct for that matter), define a private field only assigned by a tuple, as shown in the example

``

**Expected Behavior**: This should not give the specified message

**Actual Behavior**: The message IDE0044 (add readonly modifier) is given, even though following this advice will result in an error
![](
</Description>
  </Issue>
  <Issue>
    <IssueID>26864</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Behavior Differences in Extension Methods: this ref vs this in </Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2017 15.8 Preview 1, C# 7.3

**Steps to Reproduce**:
`static T Method&lt;T&gt;(this ref T it) =&gt; it; //CS8337 The first parameter of a 'ref' extension method 'Method' must be a value type or a generic type constrained to struct.`
`static T Method&lt;T&gt;(this ref T it) where T : struct =&gt; it; //OK`
`static T Method&lt;T&gt;(this in T it) =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`

**Expected Behavior**:
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //OK (struct is a value type)`

**Actual Behavior**:
`static T Method&lt;T&gt;(this in T it) where T : struct =&gt; it; //CS8338 The first parameter of an 'in' extension method 'Method' must be a value type.`</Description>
  </Issue>
  <Issue>
    <IssueID>26859</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26859</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Is with variable assignment should not check the value of a bool</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>26859</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26859</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26859</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26859</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Description**:

Generic type checking of a variable with assignment to another variable looks like this:

    if(genericVar is T outValue)

With this code I only want to check the type and not the value of the variable.
Currently this is not the case. If `T` is `bool` and the value of `genericVar` is `false`, then the `if` block is not executed. The `if` checks the value of the variable and not only the type.

**Version Used**: 
VS 15.8.0 Preview 1.1

**Steps to Reproduce**:

	public class Generic&lt;T&gt;
	{
		public T Value { get; set; }
	}

	public void GenericTest()
	{
		var t = new Generic&lt;bool&gt; { Value = true };
		var f = new Generic&lt;bool&gt; { Value = false };

		if (!(t.Value is bool tv))
			throw new Exception("t.Value is no bool");
		if (!(f.Value is bool fv))
			throw new Exception("f.Value is no bool");

		CheckTypeWithIs(t);
		CheckTypeWithIs(f);

		CheckTypeWithIsAndAssignment(t);
		CheckTypeWithIsAndAssignment(f);
	}

	private void CheckTypeWithIs&lt;T&gt;(Generic&lt;T&gt; g)
	{
		if (!(g.Value is T))
			throw new Exception($"g.Value ({g.Value}) is no T");
	}

	private void CheckTypeWithIsAndAssignment&lt;T&gt;(Generic&lt;T&gt; g)
	{
		if (!(g.Value is T gv))	  // the gv at the end is the only difference to the previous method
			throw new Exception($"g.Value ({g.Value}) is no T");
	}

**Expected Behavior**:

This code should run without throwing exceptions. I.e. if I check `if(x is T gv)` then only the type should be checked and not the value of the variable.

**Actual Behavior**:

In the very last case where `CheckTypeWithIsAndAssignment(f)` is called, the value of `gv` in the method seems to be evaluated and the exception is thrown.
It works fine if the type is `bool` and not a generic `T` or if there is no assignment to a variable.</Description>
  </Issue>
  <Issue>
    <IssueID>26858</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0032: "Use auto property" introduces an additional newline</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Foo
{
    private readonly object bar = new object();

    public object Bar =&gt; bar;
    public int Baz =&gt; 0;
}

Run the code fix for IDE0032 on the `bar` member.

**Expected Behavior**:
cs
class Foo
{

    public object Bar { get; } = new object();
    public int Baz =&gt; 0;
}


**Actual Behavior**:
cs
class Foo
{

    public object Bar { get; } = new object();

    public int Baz =&gt; 0;
}
`</Code>
    <Description>**Version Used**: 
15.7.1

**Steps to Reproduce**:
``
Note the additional empty line between `Bar` and `Baz`.

![ide0032-additional-newline](

Another thing that I saw in the gif: Why does VS scroll down the editor window by one line?
</Description>
  </Issue>
  <Issue>
    <IssueID>26854</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# 7.3 'unmanaged' cannot used by types with const size array fields [MarshalAs(UnmanagedType.ByValArray, SizeConst = xxx)]</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>24/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>26854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26854</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In Visual Studio 15.7.1, types with array fields with const size cannot be used in new methods with unmanaged constraint

For example
Old code

``

What is wrong?</Description>
  </Issue>
  <Issue>
    <IssueID>26852</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Syntax no longer shows up in Find All References </Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.8.0 Preview 1.1 (_Works_)
Version 15.8.0 Preview 2.0 [27713.0.d15.8] (_Broken_)

Similar to  except this occurs for every symbol.

**Steps to Reproduce**:

1. Right-click on Main and Find All References

``

**Expected Behavior**:
![image](


**Actual Behavior**:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>26850</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NullReferenceException in VisualBasicMakeFieldReadonlyCodeFixProvider</Title>
    <CreatedDate>15/05/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Repro steps**:
1. Create a VB console app.
2. Declare a variable without a type: `Dim age`
3. Press **Ctrl**+**.** or open the Quick Actions menu.

**Expected result**:
To be able to choose the 'Add readonly modifier' refactoring from the Quick Actions menu.

**Actual result**:
A yellow message bar appears saying that 'VisualBasicMakeFieldReadonlyCodeFixProvider' encountered an error and has been disabled. The stack trace is:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26842</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test failures in 'prodcon/roslyn/master/' - '20180510.01'</Title>
    <CreatedDate>14/05/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26842</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@dotnet-mc-bot commented on [Thu May 10 2018](There were a set of failures during this build. Here is a summary of these:
* 
  - **Agent:** DDMBLDW132
  - **Error log:** 1&gt;E:\A\_work\0\s\src\Tools\MicroBuild\Build.proj(0,0): error MSB3073: The command "powershell -noprofile -executionPolicy ByPass -file E:\A\_work\0\s\src\Tools\MicroBuild\microbuild.ps1 -restore -official -platform -branch refs/he...

@jcagme, @markwilkie
---@jcagme commented on [Thu May 10 2018](There were some test failures during this build. FYI @mmitche ---@jcagme commented on [Mon May 14 2018](Hit++: 

FYI: @jaredpar @mmitche ---@jaredpar commented on [Mon May 14 2018](@jasonmalinowski looks like an IDE failure here 

``</Description>
  </Issue>
  <Issue>
    <IssueID>26841</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SQLite is too slow</Title>
    <CreatedDate>14/05/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>26841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Open Roslyn.sln and I see devenv is consuming 1 CPU full more than 30 seconds and I see that is solely because Sqlite reading data from disk.

I think we should do some benchmark or test to see whether there is better option than Sqlite.

basically, I think Sqlite is just too slow for the way we use it (basically, we use it as key/value (blob) store not structured data store. and I dont think SQLite is good at this usage perf wise)</Description>
  </Issue>
  <Issue>
    <IssueID>26836</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected warning on null-coalescing operator on generic type</Title>
    <CreatedDate>14/05/2018</CreatedDate>
    <ClosedDate>10/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
[Example](

Tagging @cston. Feel free to close if this is a known issue or work item.
Found in nullable dogfood.</Description>
  </Issue>
  <Issue>
    <IssueID>26835</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider colorizing the suppression operator `!` to make it more visible</Title>
    <CreatedDate>14/05/2018</CreatedDate>
    <ClosedDate>10/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>26835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26830</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>QuickInfo doesn't display nullability on properties</Title>
    <CreatedDate>13/05/2018</CreatedDate>
    <ClosedDate>05/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26830</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26830</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26830</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Seems like I only fixed the problem for methods, but not other kinds of API.

![image](

Relates to 
Found in nullable dogfood.</Description>
  </Issue>
  <Issue>
    <IssueID>26827</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Q: How would I generate partial class for decorated target class</Title>
    <CreatedDate>13/05/2018</CreatedDate>
    <ClosedDate>14/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have a goal in mind: identify a *Target Class* with known *Attribute* decoration, then generate a partial class aligned within the *Target Class Namespace*.

In the past this might be considered an ``MSBuild`` target, which it still may be given the relative newness of ``Roslyn API``. But I think ``Roslyn`` has the potential to be a pretty good fit for the solution I have in mind.

The chief barrier I am encountering is an apparently rocky road on the migration path from ``Framework 4.x`` (i.e. ``4.6.2``) into the ``Core`` / ``Standard`` domain.

The next barrier I am encountering now are obscure naming conventions of the ``Roslyn API``, sparse documentation, if documented at all, identifying the desired language syntax, keywords, etc.

For instance, assuming ``KnownBase`` class.

``

Couple of nuances I expect to handle are:

1. Alignment to ``TargetClass`` ``Namespace``; may or may not preclude nesting within a class
1. Responding to refactor requests, i.e. to rename ``TargetClass``, and all that this implies, such as renaming/replacing generated code file
1. Should add the partial class to the ``TargetClass`` project, if possible as a child element of ``TargetClass``
1. Add auto-generated dislaimer comments to the class and/or overall file
1. And on from there...

I am building upon ``CodeGeneration.Roslyn``, but this is only a minor facade to the deeper ``Roslyn`` related questions.

Further, at least at the moment, I am also running in ``VS2015`` targeting ``NET Framework 4.6.2`` as at least a first draft. Potentially on a migration path into ``NET Standard``, but not right now, or at least not until Core/Standard is more proven. That said, I am not positive that I'm not faced with a ``2017`` migration sooner than later in order to be able to pursue this path.</Description>
  </Issue>
  <Issue>
    <IssueID>26814</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Line feeds inside the interpolated string parameter cause syntax error</Title>
    <CreatedDate>12/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS Enterprise 2017, 15.5.5

**Steps to Reproduce**:

This one compiles fine:

                    var jobMatchesAsString = string.Join(", ", bucket.Value.AssociatedJobs.Select(jmr =&gt;
                            $"{jmr.Job.Job.JobId} (on {string.Join(", ", jmr.MatchingKeywords.Select(mk =&gt; $"{mk.Keyword.Item1}: {mk.Keyword.Item2}: {mk.countOfUses}"))})"));

and this one with errors:

                    var jobMatchesAsString = string.Join(", ", bucket.Value.AssociatedJobs.Select(jmr =&gt;
                            $"{jmr.Job.Job.JobId} (on {string.Join(", ", jmr.MatchingKeywords.Select(mk =&gt;
                                $"{mk.Keyword.Item1}: {mk.Keyword.Item2}: {mk.countOfUses}"))})"));

1&gt;------ Build started: Project: AsyncJobHelper, Configuration: Debug x64 ------
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(212,26,212,28): error CS8076: Missing close delimiter '}' for interpolated expression started with '{'.
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(212,107,212,107): error CS1733: Expected expression
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(212,107,212,107): error CS1026: ) expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(212,107,212,107): error CS1003: Syntax error, ',' expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(213,94,213,95): error CS1002: ; expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(213,95,213,96): error CS1513: } expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(213,96,213,96): error CS1010: Newline in constant
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(213,100,213,100): error CS1002: ; expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,13,232,15): error CS1519: Invalid token 'if' in class, struct, or interface member declaration
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,17,232,18): error CS1031: Type expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,17,232,18): error CS8124: Tuple must contain at least two elements.
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,17,232,18): error CS1026: ) expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,17,232,18): error CS1519: Invalid token '!' in class, struct, or interface member declaration
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(232,36,232,37): error CS1519: Invalid token ')' in class, struct, or interface member declaration
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(234,34,234,35): error CS1519: Invalid token '(' in class, struct, or interface member declaration
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(234,35,234,36): error CS8124: Tuple must contain at least two elements.
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(234,36,234,37): error CS1519: Invalid token ';' in class, struct, or interface member declaration
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(237,5,237,6): error CS1022: Type or namespace definition, or end-of-file expected
1&gt;C:\CBP\Tools3\AsyncJobHelper\AsyncJobHelper\Analysis\TelemetryProcessor.cs(238,1,238,2): error CS1022: Type or namespace definition, or end-of-file expected
**Expected Behavior**:
Compile without errors

**Actual Behavior**:
Syntax errors.
</Description>
  </Issue>
  <Issue>
    <IssueID>26812</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect nullability for double assignment</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>07/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using static System.Console;
class C
{
    static void Main()
    {
        string? x;
        x = x = "";
        WriteLine(x.Length); // warning CS8602: Possible dereference of a null reference
        string? y;
        x = y = "";
        WriteLine(x.Length); // warning CS8602: Possible dereference of a null reference
        WriteLine(y.Length);
    }
}
`</Code>
    <Description>``
Reported by @bgrainger.</Description>
  </Issue>
  <Issue>
    <IssueID>26810</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26810</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Report warning for `lock (maybeNull)`</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26810</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26810</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26810</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26810</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    static void F(object? maybeNull)
    {
        lock (maybeNull)
        {
        }
    }
}
`</Code>
    <Description>Report warning for `lock (maybeNull)` when `System.Threading.Monitor.Enter(object)` parameter is annotated.
``
Reported by @bgrainger.</Description>
  </Issue>
  <Issue>
    <IssueID>26809</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26809</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Existing equality operators should take precedence over compiler lowering for tuple equality</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>14/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26809</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26809</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
namespace System
{
    struct ValueTuple&lt;T1, T2&gt;
    {
      void M(ValueTuple&lt;int, int&gt; t)
      {
        var x = t == t;
      }
      public static extern bool operator ==(ValueTuple&lt;T1, T2&gt; t1, ValueTuple&lt;T1, T2&gt; t2);
      public static extern bool operator !=(ValueTuple&lt;T1, T2&gt; t1, ValueTuple&lt;T1, T2&gt; t2);
    }
}


It compiles without an error since it's allowed to provide your own `System.ValueTuple` type.
Now upgrade to VS 15.7 and C# 7.3.

**Expected Behavior**:

Code still compiles and uses equality operators.

**Actual Behavior**:
There are multiple errors for missing tuple members.

error CS8128: Member 'Item1' was not found on type 'ValueTuple&lt;T1, T2&gt;' from assembly '_, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.
`</Code>
    <Description>Currently compiler lowers tuple equality to `t1.Item1 == t2.Item1 &amp;&amp; t1.Item2 == t2.Item2 &amp;&amp; ...` even when there is an existing and applicable equality operator.

While it might not be a big problem by itself as hopefully nobody writes their own `System.ValueTuple` I wonder how [extension everyting]( language feature would interact with this lowering since it would be possible to provide an extension equality operator for the `System.ValueTuple` type family.

**Steps to Reproduce**:

Compiler the following code with VS 15.6.x:
``
If you add these members you'll still get different behavior from the previous version since the equality expression will be lowered instead of applying the existing and applicable operator.
</Description>
  </Issue>
  <Issue>
    <IssueID>26800</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Branch with boostrap removed fails on ubuntu</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>26800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For the `features/NullableDogfood` branch, I need to disable the boostrap, because the branch is based off of master (so as no support for LangVersion 8 or nullable feature).

The error is: `20:32:59 /mnt/j/workspace/dotnet_roslyn/features_NullableDogfood/ubuntu_16_debug_prtest/Binaries/Tools/dotnet/sdk/2.1.300-preview2-008324/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : Could not find a part of the path '/mnt/j/workspace/dotnet_roslyn/features_NullableDogfood/ubuntu_16_debug_prtest/Binaries/Debug/Dlls/MSBuildTask/netcoreapp2.0/publish/runtimes'. ~~[/mnt/j/workspace/dotnet_roslyn/features_NullableDogfood/ubuntu_16_debug_prtest/src/NuGet/NuGetProjectPackUtil.csproj]`

Here's the PR that repro's the problem: 


From discussion with @jaredpar, the problem is in `build.sh`, which has some publishing logic conditionally on bootstrap flag being set.</Description>
  </Issue>
  <Issue>
    <IssueID>26799</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26799</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio crashes when opening unity solution</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26799</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26799</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26799</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26799</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I tried to open my unity solution after upgrading to VS 15.7.0 and it just crashes._This issue has been moved from VSTS ticketId: 612076__These are the original issue comments:_(no comments)_These are the original issue solutions:_Martin Midtgaard solved on 5/7/2018, 00:14 PM (3 days ago), 0 votes: &lt;p&gt;The problem seem to have gone away after I uninstalled the Roslyn Nullable References preview. (Roslyn_Nullable_References_Preview_March_2018)&lt;/p&gt; </Description>
  </Issue>
  <Issue>
    <IssueID>26792</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>26792</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn Syntax Visualizer is not working in VS 2017 15.7.0 and 15.7.1</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>11/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26792</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

15.7.0 and 15.7.1 (I have both)

**Steps to Reproduce**:

1. Install .NET Compiler Plarform SDK either from VS Marketplace of within VS 2017
2. Restart VS

**Expected Behavior**:

Syntax Visualizer works

**Actual Behavior**:

.NET Compiler Platform SDK is disabled because it's not compatible with VS 2017 15.7.0 and 15.7.1.

Screenshot:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>26791</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>26791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable Reference Types Preview installation failed.</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Acquisition</Name>
        <IssueID>26791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
The [latest 05/07/18] version.
**Steps to Reproduce**:

1. Run install.bat.

**Expected Behavior**:
Output installed successful.

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26783</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Confirm whether misused nullability attributes should produce diagnostics</Title>
    <CreatedDate>11/05/2018</CreatedDate>
    <ClosedDate>02/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For instance, `[EnsureNotNull]` on a value type parameter, or `[NotNullWhenFalse]` on a parameter whose containing method doesn't return a boolean.

We need to review this, as it poses a compatibility concern.
My personal view is that if we use brand new attributes in the `System.Runtime.CompilerServices` namespace, then such warnings/errors are fair game (users are not supposed to define types in `System`).

Tagging @gafter </Description>
  </Issue>
  <Issue>
    <IssueID>26767</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE should drop queued parsing requests for editing</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>26767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>26767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>IDE currently queues a parsing request for every key hit. For large files, when parsing can take more than a few milliseconds, these requests queue fast enough, causing unresponsiveness in the editor.
The IDE should be able to clear the queue once additional input is available from the user (making the queue obsolete).</Description>
  </Issue>
  <Issue>
    <IssueID>26766</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Making incremental parsing cancellable to improve perf for large files.</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>29/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>26766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The IDE calls into APIs like `SyntaxTree.WithChanges()` to incrementally parse changes as the user is typing. These APIs should accent a `CancellationToken` so that ongoing parsing requests can be cancelled if the user typed something else.</Description>
  </Issue>
  <Issue>
    <IssueID>26761</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Recognize annotations on methods that affect nullability analysis</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>20/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
// ensures arg is true
static void Assert([EnsuresTrue] bool b);

c#
// false if arg is not null
static bool IsNullOrEmpty([NotNullWhenFalse] string? s)

c#
// reference equality for null
[NullEquals] static bool Equals(object? x, object? y)

c#
// result nullability matches arg
static string? NormalizePath([NullInNullOut] string? path)

c#
// ref arg not reset to null
static void InitializeAndAdd&lt;T&gt;([NotNulled] ref List&lt;T&gt;? list, T item)
`</Code>
    <Description>Examples, with placeholder attributes:
``

(jcouv updated): We also need to handle:
- `Interlocked.CompareExchange`
- a ref parameter which has a non-null inbound value, but possibly null outbound value (see `FilterAndAppendAndFreeDiagnostics`). This way the caller would be warned if passing a maybe-null argument. (`Debug.Assert` would not do that)
- `TryGetValue` on `WeakReference`
- `object.ReferenceEquals`
- Would it be possible to hint that `AsNode()` is safe if `IsNode` is true?
- Should those attribute affect the inferred type? `var x = EnsuresNotNull(something);`
- What about `M(x = y, y)` where `EnsuresNotNull` is on the second parameter, or `M(y, x = y)` where it is on the first?

Filed  to track work to annotate the BCL and collect ideas of APIs needing annotations.

We should confirm whether the nullable attributes should be added to mono or not.</Description>
  </Issue>
  <Issue>
    <IssueID>26759</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Permit stackalloc in nested expressions</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>14/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Implement  by permitting `stackalloc` expressions to be used in nested expressions rather than only at the top-level.</Description>
  </Issue>
  <Issue>
    <IssueID>26755</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SymbolFinder.FindReferencesAsync throws ArgumentException</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26755</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26755</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>26755</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;FinalizeCompilationAsync&gt;d__30.MoveNext() in /_/src/Workspaces/Core/Portable/Workspace/Solution/SolutionState.CompilationTracker.cs:line 638
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;BuildCompilationInfoFromScratchAsync&gt;d__24.MoveNext() in /_/src/Workspaces/Core/Portable/Workspace/Solution/SolutionState.CompilationTracker.cs:line 478
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetOrBuildCompilationInfoAsync&gt;d__22.MoveNext() in /_/src/Workspaces/Core/Portable/Workspace/Solution/SolutionState.CompilationTracker.cs:line 407
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;GetCompilationSlowAsync&gt;d__19.MoveNext() in /_/src/Workspaces/Core/Portable/Workspace/Solution/SolutionState.CompilationTracker.cs:line 316
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__27.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine_ProjectProcessing.cs:line 86
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__26.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine_ProjectProcessing.cs:line 74
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectAsync&gt;d__25.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine_ProjectProcessing.cs:line 55
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessProjectsAsync&gt;d__24.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine_ProjectProcessing.cs:line 30
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;ProcessAsync&gt;d__11.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine.cs:line 110
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__10.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine.cs:line 67
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&lt;FindReferencesAsync&gt;d__10.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/FindReferences/FindReferencesSearchEngine.cs:line 72
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__26.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/SymbolFinder_FindReferences_Current.cs:line 37
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&lt;FindReferencesAsync&gt;d__29.MoveNext() in /_/src/Workspaces/Core/Portable/FindSymbols/SymbolFinder_FindReferences_Legacy.cs:line 33
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at CommitMap.Services.SemanticAnalyzer.&lt;FindCallersRecursively&gt;d__1.MoveNext() in C:\CommitMap\CommitMap\CommitMap.Services\SemanticAnalyzer.cs:line 51
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at CommitMap.Services.SemanticAnalyzer.&lt;FindAllCallers&gt;d__0.MoveNext() in C:\CommitMap\CommitMap\CommitMap.Services\SemanticAnalyzer.cs:line 32
`</Code>
    <Description>Version 2.8.0 

I have a solution which consists of a **WebAPI** (.NET Framework 4.7) project and a handful class libraries. I use **MSBuildWorkspace** class and **OpenSolutionAsync** in order to load the solution and iterate through documents. In addition to that I leverage SymbolFinder functionality to search for usages of different methods within the solution. The seach works perfect if usages are located between class libraries. But when a method is referenced from **WebAPI** project and I call **SymbolFinder.FindCallersAsync** or **SymbolFinder.FindReferencesAsync** then an **ArgumentException** from **CompilationTracker** is thrown. Could you please shed some light on what might be a root cause here?


**Expected Behavior**:
SymbolFinder.FindCallersAsync returns the list of usages of a method in case the usage is located on WebAPI project

**Actual Behavior**:
"An item with the same key has already been added" exception is thrown. The full stack trace:
``</Description>
  </Issue>
  <Issue>
    <IssueID>26752</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to consume C# 7.2 stack-only types in VB 15.5</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>13/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>26752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Porting over from VB language repo. ([issue](

&gt; @Nukepayload2
&gt; If I use stack only type in my VB code, error BC30668 will block compilation. I'm using VS2017 15.6.7.
&gt; 
&gt; **Steps to reproduce:**
&gt; Create a .NET Core VB Console project.
&gt; Edit the .vbproj file, add &lt;LangVersion&gt;Latest&lt;/LangVersion&gt; in &lt;PropertyGroup&gt;.
&gt; Create a .NET Standard 2.0 C# class library.
&gt; Create a new C# code file, and add public ref struct StackOnlyType {} in that .cs file.
&gt; Upgrade the C# project to 7.2 .
&gt; In the VB console app, add reference to that C# project.
&gt; Add Dim errorType As StackOnlyType to Sub Main.
&gt; Build the whole solution.
&gt; 
&gt; **Expected behavior:**
&gt; The code should compile, because I'm not trying to put a stack-only variable on the heap.
&gt; 
&gt; **Actual behavior:**
&gt; Error: BC30668 "Types with embedded references are not supported in this version of your compiler"</Description>
  </Issue>
  <Issue>
    <IssueID>26751</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to call C# 7.3 method with `unmanaged` type parameter</Title>
    <CreatedDate>10/05/2018</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>26751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
&gt; int SizeOf&lt;T&gt;() 
&gt;     where T : unmanaged
&gt; {
&gt;     return sizeof(T);
&gt; }
&gt; `</Code>
    <Description>Porting this issue over from the VB language forum. ([issue](

&gt; @Berrysoft 
&gt; I wrote a C# function like this:
&gt; 
&gt; ``
&gt; But when I tried to call this function in a VB project, the compiler threw a BC30649 exception said:
&gt; ` is an unsupported type`
&gt; What should I do to call this function?</Description>
  </Issue>
  <Issue>
    <IssueID>26749</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Should not report warning for second dereference of nullable value</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>26/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The second warning is redundant and incorrect:
``</Description>
  </Issue>
  <Issue>
    <IssueID>26748</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>26748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ArgumentException is thrown by foreach statement refactoring code</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>03/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If a foreach loop is used for a two-dimensional array and you apply the "convert to for" loop refactoring and then run the generated code, it throws an ArgumentException.

**Steps:**
1. Given the following C# code:

int[,] numbers2D = { { 9, 99 }, { 3, 33 }, { 5, 55 } };
foreach (int i in numbers2D) { System.Console.Write($"{i} "); }

2. Refactor it to a for loop using the refactoring:

int[,] numbers2D = { { 9, 99 }, { 3, 33 }, { 5, 55 } };

System.Collections.IList list = numbers2D;
for (int i1 = 0; i1 &lt; list.Count; i1++)
{
       int i = (int)list[i1];
System.Console.Write($"{i} ");
}

3. Run the code.

**Actual result**
An ArgumentException is thrown:

Unhandled Exception: System.ArgumentException: Array was not a one-dimensional array.
   at System.Array.GetValue(Int32 index)
   at System.Array.System.Collections.IList.get_Item(Int32 index)
   at csharp_console.Program.Print() in C:\Users\gewarren\source\repos\csharp-console\csharp-console\Program.cs:line 29
   at csharp_console.Program.Main(String[] args) in C:\Users\gewarren\source\repos\csharp-console\csharp-console\Program.cs:line 12

**Expected result**
No runtime exception from auto-generated code.</Description>
  </Issue>
  <Issue>
    <IssueID>26747</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Null-coalescing test should inform nullability</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Splitting issue out of 

Null-coalescing operators should affect the flow analysis of null values.
Here's an example reported by @bgrainger: 

``

Once fixed, please update this [speclet section](

Tagging @cston @gafter </Description>
  </Issue>
  <Issue>
    <IssueID>26746</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26746</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect nullability warning on conditional expression with enum</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>04/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26746</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26746</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26746</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26746</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@bgrainger reported this with a concise example:


``

I've run into this while dogfooding on Roslyn as well (`GetMarshallingType` method).</Description>
  </Issue>
  <Issue>
    <IssueID>26745</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Pattern test should inform nullability</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There should be no warning in the following, since `s is string` only matches if `s` isn't `null`.

``

Conversely, `s is null` should also inform nullability.
Also, `s = null!`.

(update: split the null-coalesing issue into separate issue: 

Once fixed, please update this [speclet section](

Tagging @cston @gafter </Description>
  </Issue>
  <Issue>
    <IssueID>26743</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# 7.3 allows unmanaged pointer to fixed field without pinning</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: C# 7.3 / VS 15.7.1

**Steps to Reproduce**:

Using an explicit `this` pointer to work around #26688, I am able to take the address of a fixed field, giving me an unmanaged pointer without pinning.  If I'm understanding the relaxed restrictions correctly, this should not be possible, as the pointer should only be useable as an indexer.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>26742</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>26742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Problems with vNext preview</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>26742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I downloaded [the vNext preview]( and tried to install it, but failed:

``

As far as I can tell, the issue is that the installer considers the two versions of VS I have (`VisualStudio/15.7.1+27703.2000` and `VisualStudioPreview/15.8.0-pre.1.1+27705.2000`) too new.

Looking at the `utils.ps1` scripts, it seems my VS 15.8.0 Preview is filtered out by the `vswhere` command (`-version [15.5,15.8)`) while my VS 15.7.1 is filtered out using `$maxVersion = New-Object System.Version "15.7.0"`.

Also note that while I downloaded the vNext preview, the script says that it's installing the nullable preview.</Description>
  </Issue>
  <Issue>
    <IssueID>26739</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Passing non-null string to nullable ref argument should not warn</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>26739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26739</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This warning is surprising.

``

Note: this is also a scenario where we think a special attribute could make sense (this method never sets the `ref` parameter to `null`).

Tagging @cston </Description>
  </Issue>
  <Issue>
    <IssueID>26738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable types fixer should handle 'as' expressions</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>11/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
Type type = obj as Type;
`</Code>
    <Description>**Version Used**: Nullable Reference Types Preview (7 May 2018)

**Steps to Reproduce**:

``

**Expected Behavior**:

A code fix is provided for converting `Type type` to `Type? type`.

**Actual Behavior**:

No code fix is provided.

@jcouv Following the initial handling of `null`, this appears to be the next most common case for me.</Description>
  </Issue>
  <Issue>
    <IssueID>26737</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability not tracked for is/cast pattern in switch</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>17/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
object? obj = null;
if (obj is Type)
{
  ((Type)obj).ToString();
}
`</Code>
    <Description>**Version Used**: Nullable Reference Types Preview (7 May 2018)

**Steps to Reproduce**:

``

**Expected Behavior**:

No nullability-related warning is reported for the expression `((Type)obj)`.

**Actual Behavior**:

CS8600 and CS8602 are reported for `((Type)obj)`.</Description>
  </Issue>
  <Issue>
    <IssueID>26736</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Gray out unnecessary non-null suppression operator</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>26736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
object? obj = new object();
var str = obj!.ToString();
`</Code>
    <Description>**Version Used**: Nullable Reference Types Preview (7 May 2018)

**Steps to Reproduce**:

``

**Expected Behavior**:

A warning is provided for the use of `!` where flow analysis already determines the expression cannot be null.

**Actual Behavior**:

No warning is provided.</Description>
  </Issue>
  <Issue>
    <IssueID>26735</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NRE in the CSharpUseImplicitTypeDiagnosticAnalyzer</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>29/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26735</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseImplicitTypeDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	[redacted](netstandard2.0)		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseImplicitTypeDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: [redacted]
SyntaxTree: [redacted]
SyntaxNode: ref var files = determineFiles( ... [VariableDeclarationSyntax]@[1473..1533) (45,16)-(47,53)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseImplicitTypeHelper.AssignmentSupportsStylePreference(SyntaxToken identifier, TypeSyntax typeName, ExpressionSyntax initializer, SemanticModel semanticModel, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpUseImplicitTypeHelper.TryAnalyzeVariableDeclaration(TypeSyntax typeName, SemanticModel semanticModel, OptionSet optionSet, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.TypeStyle.CSharpTypeStyleDiagnosticAnalyzerBase.HandleVariableDeclaration(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__43`1.&lt;ExecuteSyntaxNodeAction&gt;b__43_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.
`</Code>
    <Description>**Version Used**: 
15.7

**Steps to Reproduce**:

I don't know the steps. The warning appeared in VS' error list while editing source code:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>26733</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Add readonly modifier" doesn't fire if you read from field in constructor</Title>
    <CreatedDate>09/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

**Expected:**
Make readonly to fire

**Actual:**
Make readonly does not </Description>
  </Issue>
  <Issue>
    <IssueID>26730</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetSemanticSymbols does not support discard expressions</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.8

**Steps to Reproduce**:

1.  Create a new C# console app project
2.  Start typing `foreach(_ in new [] { 1,2})`
3. VS fails (hard crash) on processing the default case within GetSemanticSymbols for the `_` discard symbol.</Description>
  </Issue>
  <Issue>
    <IssueID>26729</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpCodeProvider vs Roslyn, round 2</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
``

**Steps to Reproduce**:

1. Create a fresh package with the packages above
2. create a CSharpCodeProvider object
3. Call CompileAssemblyFromFile()

**Expected Behavior**:
Compile.

**Actual Behavior**:
System.IO.DirectoryNotFoundException: 'Could not find a part of the path 'D:\Projects\MyProject\Bin\bin\roslyn\csc.exe'.'
(bin or roslyn folders aren't present in the D:\Projects\MyProject\Bin folder at all)</Description>
  </Issue>
  <Issue>
    <IssueID>26723</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No way to compile a VB NetModule that has InternalsVisibleTo access to a strong named assembly</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>26723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In C#, it is possible to compile a netmodule that has InternalsVisibleTo access to a strong named assembly. You just tell the compilation (for the netmodule) that the name of the assembly is the name of the final assembly into which it will be included. But that doesn't work in VB, because the netmodule doesn't have the correct strong name (you can't strong name a netmodule). We should adjust the VB compiler to permit this to work the same way it works in C#.
</Description>
  </Issue>
  <Issue>
    <IssueID>26721</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test failure: StaticNullChecking.SuppressNullableWarning_InvalidOperand</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>06/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft.CodeAnalysis.CSharp.UnitTests.Semantics.StaticNullChecking.SuppressNullableWarning_InvalidOperand (from Roslyn.Compilers.CSharp.Semantic.UnitTests)
Diff:
++&gt;                 Diagnostic(ErrorCode.ERR_BadArgType, \"F!\").WithArguments(\"1\", \"grupo de métodos!\", \"object\").WithLocation(5, 11),
--&gt;                 Diagnostic(ErrorCode.ERR_BadArgType, \"F!\").WithArguments(\"1\", \"method group!\", \"object\").WithLocation(5, 11),
                    Diagnostic(ErrorCode.ERR_PropertyLacksGet, \"c.P\").WithArguments(\"C.P\").WithLocation(6, 11)
`</Code>
    <Description>Test failure in windows_debug_spanish_unit32_prtest:
``</Description>
  </Issue>
  <Issue>
    <IssueID>26717</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>26717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE diagnostics should have HelpLinkUri set</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>26717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>26717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7

**Expected Behavior**:

All IDE diagnostics should provide a `HelpLinkUri` linking to information about the diagnostic.

**Actual Behavior**:

Many diagnostics do not have the `HelpLinkUri` set at all. The test for this property has been skipped in #26718.

Diagnostics without this URI result in high CPU usage due to COM overhead in `VisualStudioBaseDiagnosticListTable.GetHelpLinkToolTipText`.

🔗 </Description>
  </Issue>
  <Issue>
    <IssueID>26715</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Optimize function that could be Expression-bodied function</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels />
    <Code>csharp
int AddLambda(int a, int b) =&gt; a + b;
int Add(int a, int b) { return a + b; }

Two functions are exactly same, but compiler generate different IL code. Function `AddLambda` is optimized, but function `Add` is not.

IL
g__Add0_0:
IL_0000:  nop         
IL_0001:  ldarg.0     
IL_0002:  ldarg.1     
IL_0003:  add         
IL_0004:  stloc.0     
IL_0005:  br.s        IL_0007
IL_0007:  ldloc.0     
IL_0008:  ret         

g__AddLambda0_1:
IL_0000:  ldarg.0     
IL_0001:  ldarg.1     
IL_0002:  add         
IL_0003:  ret    
`</Code>
    <Description>**Version Used**: VS 15.7.0

**Steps to Reproduce**:

``

**Expected Behavior**:

If function can be reduced to expression-bodied function, they should be compiled and generate same IL code.

**Actual Behavior**:

But they don't.</Description>
  </Issue>
  <Issue>
    <IssueID>26714</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Changing to MIT license</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels />
    <Description>Is there any plan to change Roslyn's license from Apache 2.0 to MIT as [F#]( did a few months ago?</Description>
  </Issue>
  <Issue>
    <IssueID>26713</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support for "param" documentation tag for delegates is incomplete in Intellisense</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>24/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
/// &lt;summary&gt;Summary&lt;/summary&gt;
/// $$
delegate T SomeDelegate&lt;T&gt;(object parameter);

void M(SomeDelegate&lt;int&gt; theDelegate)
{
    theDelegate($$);
}
`</Code>
    <Description>**Version Used**: VS 15.7.0

**Steps to Reproduce**:

1. Paste the code below into a C# file.
2. Open autocompletion at the first marked location.
3. Write `&lt;param name="parameter"&gt;Parameter documentation&lt;/param&gt;` at that location.
4. Open Signature Help at the second location.

``

**Expected Behavior**:

1. For the first location: `param name="parameter"` should be suggested in the list.
2. For the second location: if the parameter is documented, the documentation is shown in the Signature Help popup.

Basically, the behaviour should be identical to that of method parameters.

**Actual Behavior**:

1. For the first location: `param name=""` autocompletions are never suggested.
2. For the second location: if parameter documentation is given, it does not show up in Signature Help.

Some notes:

* Documentation for type parameters is fully supported at both locations.
* If you remove all documentation for the delegate and then type `///` (to auto-generate documentation), the `param` tag is generated.
* The parameter documentation is shown in the Object Browser window.</Description>
  </Issue>
  <Issue>
    <IssueID>26709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need to update our Tasks dependency</Title>
    <CreatedDate>08/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>26709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Context Change: 

This PR added a reference to System.Threading.Tasks.Extensions in the MS.CA project. This effectively makes it a dependency of anything in Roslyn as that is our root most project. Yet our tooling did not catch three places where we needed to re-state our dependency on this DLL:

1. Microsoft.CodeAnalysis.swr (fixed by  
1. Microsoft.Net.Compilers.nuspec
1. Microsoft.NetCore.Compilers.nuspec
1. VS.Tools.Roslyn.nuspec 

I'm unsure that there is really tooling that can help us with 2 or 3 above. Need to add some consistency checks to ensure that everything else is updated in the case 2 / 3 is changed. 
</Description>
  </Issue>
  <Issue>
    <IssueID>26696</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`!` does not suppress warning for conversion from unconstrained type parameter to `object`</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>26696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>26694</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase_BaseCall Failed in test run</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
MESSAGE:
System.AggregateException : Se han producido uno o varios errores.
---- System.InvalidOperationException :
+++++++++++++++++++
STACK TRACE:
en System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) 
en System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) 
en System.Threading.Tasks.Task.Wait() 
en System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) 
en System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)
en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken) en Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected) 
en Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase_BaseCall() 
----- Inner Stack Trace ----- 
en Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage) 
en System.Diagnostics.TraceListener.Fail(String message) 
en System.Diagnostics.TraceInternal.Fail(String message) 
en System.Diagnostics.Debug.Assert(Boolean condition) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributesBag() 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceEventSymbol.GetAttributes() 
en Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteObsoleteAttribute() 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckOverrideMember(Symbol overridingMember, OverriddenOrHiddenMembersResult overriddenOrHiddenMembers, DiagnosticBag diagnostics, Boolean&amp; suppressAccessors) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) 
en Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.&lt;&gt;c__DisplayClass47_1.&lt;ForceComplete&gt;b__0(Int32 i) 
en Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass6_0`1.&lt;WithCurrentUICulture&gt;b__0(T param) 
en System.Threading.Tasks.Parallel.&lt;&gt;c__DisplayClass17_0`1.&lt;ForWorker&gt;b__1() 
en System.Threading.Tasks.Task.InnerInvoke() 
en System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) 
en System.Threading.Tasks.Task.&lt;&gt;c__DisplayClass176_0.&lt;ExecuteSelfReplicating&gt;b__0(Object )
`</Code>
    <Description>AttributeTests_WellKnownAttributes.ObsoleteOnVirtual_OnBase_BaseCall  [failed in this run](

With the following message

``</Description>
  </Issue>
  <Issue>
    <IssueID>26693</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpWinForms.RemoveEventHandler Failed in test run</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>21/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>26693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>26693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>26693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>First found in 

In [this integration run](

**Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.RemoveEventHandler** fails due to there being an error in the error-list but the build succeeded.

``

![image](

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>26692</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add flag to control nullable feature</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>23/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>26692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For the prototype, we're using LangVersion as the flag for both language version and nullable annotations.
At a minimum, we need an ability (separate from LangVersion) to disable nullable warnings.

From discussions with Chuck, we would have to decide whether this flag affects the symbols that we produce:
- pretty clearly, we would want to emit `string` (no nullable annotations)
- you type `string?` in source (with nullable warnings disabled), does QuickInfo show you `string?` back?
- maybe the IDE should grey out any `?`, since it is unnecessary. We can have a code fixer to remove the `?` or to turn on nullable warnings.

Some related questions, when the feature is turned off:
- What if you use `[NonNullTypes]` but the nullable feature is turned off? Warning?
- What about using `?` or `!`?

Tagging @cston @AlekseyTs 

Relates to </Description>
  </Issue>
  <Issue>
    <IssueID>26689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisualBasicCompilation.GetSemanticModel should check that the tree is valid</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>07/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
var tree1 = SyntaxFactory.ParseSyntaxTree("");
var tree2 = SyntaxFactory.ParseSyntaxTree(@"
Class C
    Sub M()
    End Sub
End Class");

var compilation = VisualBasicCompilation.Create(null).AddSyntaxTrees(tree1);

compilation.GetSemanticModel(tree2);
compilation.GetSemanticModel(null);
`</Code>
    <Description>**Version Used**: 2.8.0, master

**Steps to Reproduce**:

Try to get semantic model for syntax tree that's not part of the compilation or is null:

``

**Expected Behavior**: Both calls to `GetSemanticModel` throw an exception.

**Actual Behavior**: Both calls to `GetSemanticModel` succeed.

---

The relevant code:





Note that C# performs both checks:

</Description>
  </Issue>
  <Issue>
    <IssueID>26688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# 7.3 fixed field still requires pinning with implicit `this` reference</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  C# 7.3 / VS 15.7

**Steps to Reproduce**:

In reading through the proposal for relaxing the pinning requirement for fixed fields, I believe the following code should now be valid


``

Is there a reason these would be interpreted differently by the compiler?
</Description>
  </Issue>
  <Issue>
    <IssueID>26686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>26686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>New completion work to have prefix/suffix text is brittle and error prone.</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>19/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>@this and a "Full Display Text"  (local) Program.this (external)  Because the former is not contained in the latter, the bolding and whatnot simply cannot work consistently.

Note: we ran into this *exact* issue when doing highlighting in NavigateTo.  I addressed this by changing how things work and not having two distinct strings.  Instead, with NavigateTo, there are two strings, the "Name" and the "NameSuffix":

c#
        /// &lt;summary&gt;
        /// The name to pattern match against, and to show in a final presentation layer.
        /// &lt;/summary&gt;
        public string Name { get; }

        /// &lt;summary&gt;
        /// An optional suffix to be shown in a presentation layer appended to &lt;see cref="Name"/&gt;.
        /// Can be null.
        /// &lt;/summary&gt;
        public string NameSuffix { get; }
`</Code>
    <Description>From the conversation here:  

@dpoeschl Sorry it took me a while to get back to this.  Based on what you said, and based on the title of this issue, i think this is not the right way to code htings up.  Specifically, the purpose here is to be able to allow completion providers to provide prefix/suffix decorative text for a completion item, but for **matching** to only happen against the non-decorative 'middle' section of the display text.  

The problem is that with the approach taken here, there is nothing ensuring consistency between the "full display text" and the "display text for matching", even though it must be the case that the latter is always contained in the former.  It would be quite possible (and easy) for a client to end up screwing this up badly.  For example, producing a DisplayTextForMatching of ``

As you can see, only the name is pattern matched against, but then the client can specify a suffix to be provided with that name.  This ensures that pattern matching, and hte display shown to the user, are always in sync.  Because we will construct things so that hte Name part is always contained in the final display.

--

I think something similar should be done here.  If there is a need for just suffixes, then just add a DisplayTextSuffix property you look for in the bag.  If you also need prefixes, do something similar.  Then just produce the final DisplayText out of all three of these.  For bolding, you just pattern matching against hte DisplayText, but push the spans forward by whatever length the prefix is (if you have one).  

In hte future, we can then make DisplayTextSuffix and DisplayTextPrefix part of the standard API for a completion item, instead of digging them out of hte property bag.

Would it be possible for you to make this change?  If not, i would be willing to do it so we have the right internal data model and so we're protected against inconsistencies which *can* crash the IDE due to IndexOutOfRange exceptions and the like.

</Description>
  </Issue>
  <Issue>
    <IssueID>26682</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Proposal] Property access modifier to allow private setter access in object initializer (immutability)</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels />
    <Code>csharp
public class Foo
{
	public string A { get; immutable set; }
	public string B { get; immutable set; }
}


Would allow this:

csharp
var foo =  new Foo(){
	A = "a",
	B = "b"
}


but produce an error when trying to set the property elsewhere. For all intends and purposes it would be identical to the setter being public in an initializer and private anywhere else.

For anyone working with expressions or functional programming this has greate value. Besides the immutable classes themselves being cleaner and shorter, it maintains consistency when writing mapping expressions because currently you have do this (which is also not very intellisence friendly):

csharp
query
.Select(x =&gt; new Foo(
	a: x.SomeProp, 
	b: x.SomeOtherProp, 
	c: x.AnotherProp))


vs this: (for muttable classes)

csharp
query
.Select(x =&gt; new Foo {
	A = x.SomeProp, 
	B = x.SomeOtherProp, 
	C = x.AnotherProp})
`</Code>
    <Description>Object immutability is currently implemented in c# with the use of constructors. However, this creates code that is both difficult to write (long constructors) and read. It also makes it impossible to use mapping expressions to construct immutable objects.

The proposition here is a new access modifier that explicitly dictates that a value can be set in an object initializer. It could for example be named "immutable" or "readonly" or "initonly" or "init". 

Example:

``

Another issue with constructors is that you don't have an explicit map between the constructor parameter and the actual property it privately sets, so if you want to using dynamic mapping or cloning expressions with private setters you need to go by convention (name/sequence) or use attributes which means even more code or override the setter restrictions through reflection.

Finally this would make it very easy to refactor current code with immutability as it wouldn't need code changes other than the new accessor itself</Description>
  </Issue>
  <Issue>
    <IssueID>26680</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Use pattern matching' fails to handle multiple type checks in sequence</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>24/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26680</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26680</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26680</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
if (summaryNodes[0] is XText firstTextPartNode &amp;&amp; summaryNodes[1] is XElement classReferencePart &amp;&amp; summaryNodes[2] is XText secondTextPartNode)
{


**Actual Behavior**:

csharp
var classReferencePart = summaryNodes[1] as XElement;
var secondTextPartNode = summaryNodes[2] as XText;

if (summaryNodes[0] is XText firstTextPartNode &amp;&amp; classReferencePart != null &amp;&amp; secondTextPartNode != null)
{
`</Code>
    <Description>**Version Used**: 15.7 Preview 6

**Steps to Reproduce**:



**Expected Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26679</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Use pattern matching' fails to handle 'else if' condition</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>24/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
bool isImplementingExplicitly;

// Only methods, properties and events can implement an interface member
if (memberSymbol is IMethodSymbol methodSymbol)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = methodSymbol.ExplicitInterfaceImplementations.Any();
}
else if (memberSymbol is IPropertySymbol propertySymbol)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = propertySymbol.ExplicitInterfaceImplementations.Any();
}
else if (memberSymbol is IEventSymbol eventSymbol)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = eventSymbol.ExplicitInterfaceImplementations.Any();
}
else
{
    return false;
}


**Actual Behavior**:

csharp
IPropertySymbol propertySymbol;
IEventSymbol eventSymbol;
bool isImplementingExplicitly;

// Only methods, properties and events can implement an interface member
if (memberSymbol is IMethodSymbol methodSymbol)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = methodSymbol.ExplicitInterfaceImplementations.Any();
}
else if ((propertySymbol = memberSymbol as IPropertySymbol) != null)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = propertySymbol.ExplicitInterfaceImplementations.Any();
}
else if ((eventSymbol = memberSymbol as IEventSymbol) != null)
{
    // Check if the member is implementing an interface explicitly
    isImplementingExplicitly = eventSymbol.ExplicitInterfaceImplementations.Any();
}
else
{
    return false;
}
`</Code>
    <Description>**Version Used**: 15.7 Preview 7

**Steps to Reproduce**:



**Expected Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>26678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Full signing is broken again on Mono with Roslyn 2.8</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>26678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Roslyn 2.8.0 (e595ee27)

The regression was introduced with  / PR #25426.

**Steps to Reproduce**:

1. Try using full signing on Mono on Unix: `csc /keyfile:mykey.snk Program.cs`
2. It prints an mscoree.dll error

**Expected Behavior**:

No error.

**Actual Behavior**:

``

---

The new managed signing needs to be enabled when running on Mono too, not just on CoreCLR.

/cc @agocke </Description>
  </Issue>
  <Issue>
    <IssueID>26677</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Use pattern matching' code fix leaves blank lines</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
private void Method()
{
  var type = new object() as Type;

  if (type != null)
  {
    Console.WriteLine(type);
  }
}


**Expected Behavior**:

csharp
private void Method()
{
  if (new object is Type type)
  {
    Console.WriteLine(type);
  }
}


**Actual Behavior**:

csharp
private void Method()
{

  if (new object is Type type)
  {
    Console.WriteLine(type);
  }
}
`</Code>
    <Description>**Version Used**: 15.7 Preview 6

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>26672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>26672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Opening a Visual Basic file resulted in &gt;100 editor errors about NullReferenceException in DeferredContentFrameworkElementFactory.CreateElement</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>05/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>No repro, just opened a Visual Basic source file, resulting in:

``

Looked at [ActivityLog.zip]( and this was output about ~100 times.

</Description>
  </Issue>
  <Issue>
    <IssueID>26669</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompile uses C# syntax for Visual Basic projects resulting in broken navigation</Title>
    <CreatedDate>07/05/2018</CreatedDate>
    <ClosedDate>19/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. 
``

Expected: For the file to be decompiled in VB and to navigate to UnicodeText
Actual: The file is in C# syntax and it fails to navigate

_Copied from original issue: dotnet/project-system#3519_</Description>
  </Issue>
  <Issue>
    <IssueID>26663</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB: Editor inexplicably resets the "Highlight references/keywords under cursor" settings.</Title>
    <CreatedDate>06/05/2018</CreatedDate>
    <ClosedDate>05/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio Community 2017 v15.5.6

**Steps to Reproduce**:

I've been seeing this bug for quite a while now but couldn't report it because I don't know exactly what causes it. Under `Tools &gt; Options &gt; Text Editor &gt; Basic &gt; Advanced -&gt; Highlighting` we have two settings:

![vs_vb_highlight_references](

What happens is **I tick both options and the editor immediately begins to highlight references as expected**. I can close and open the IDE and find the settings exactly as I left them. I can clean the solution, rebuild, run, etc and find the settings exactly as I left them.

**However, some undefined period later (typically in the same coding session so we are talking a period of a few hours) I notice that highlighting no longer happens and when I go to the settings I see the options have been unticked.** I am the only one who uses this laptop and there are no ghosts (that I know of) in my office, so something is resetting those highlighting settings and for the life of me, I can't figure out what!

And this "ghost reset" only affects those two highlighting settings...everything else that I can notice in the editor (e.g. colour coding, automatic formatting, font sizes, etc) remains as configured.

A quick search in the Rosyln code reveals the [AbstractDocumentHighlightsService]( so I know this feature is powered by Rosyln. **In order to file a more actionable bug report, I would like to know how the IDE saves those highlighting settings when I press OK to close the Options window, and also how the editor reads those settings to enable/disable the documenting highlighting service** I suspect the bug can be found somewhere between those steps.

CC: @CyrusNajmabadi I note you are one of the contributors to the AbstractDocumentHighlightsService.cs file so perhaps you could help point me in the right direction for further investigation? Many thanks in advance :+1: </Description>
  </Issue>
  <Issue>
    <IssueID>26662</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Newer builds of features/dataflow branch</Title>
    <CreatedDate>06/05/2018</CreatedDate>
    <ClosedDate>14/05/2018</ClosedDate>
    <IssueLabels />
    <Description>I'm working on a prototype analyzer using the new IOperation based CFG APIs and currently, I'm using the version `2.8.0-dataflow-62824-01` from April 23rd. 

Since then there have been some changes (e.g. improved packing of cfg), but I cannot find newer builds on [MyGet.](  Is it possible to get them somewhere else (e.g. different feed od nuget...)? Or if the publishing of daily builds is not automated, could you please publish a newer version? Thanks</Description>
  </Issue>
  <Issue>
    <IssueID>26658</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Calling GetSemanticModel with the wrong tree resulting in confusing exception message</Title>
    <CreatedDate>05/05/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>26658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
var tree1 = SyntaxFactory.ParseSyntaxTree("");
var tree2 = SyntaxFactory.ParseSyntaxTree(@"class C
{
    void M() {}
}");

var compilation = CSharpCompilation.Create(null).AddSyntaxTrees(tree1);

compilation.GetSemanticModel(tree2);


**Actual Behavior**:


Unhandled Exception: System.ArgumentException: SyntaxTree 'class C
{
    void M() {}
}' not found to remove
Parameter name: syntaxTree
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSemanticModel(SyntaxTree syntaxTree, Boolean ignoreAccessibility)
   at Program.Main()
`</Code>
    <Description>**Version Used**: 2.8.0

**Steps to Reproduce**:

Execute the following code:

``

**Expected Behavior**:

Since the code is not removing anything, the exception message should not talk about removing.

The code that throws the exception is:



It seems it shares the message `CSharpResources.SyntaxTreeNotFoundTo` with two other methods, which actually do attempt to remove a SyntaxTree.

Also, the exception message probably shouldn't include the whole code of the `SyntaxTree`.

Putting the two issues together, the message could be just:

&gt; SyntaxTree not found</Description>
  </Issue>
  <Issue>
    <IssueID>26654</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should allow using `out y!` when `y` is un-assigned</Title>
    <CreatedDate>05/05/2018</CreatedDate>
    <ClosedDate>01/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Tagging @cston</Description>
  </Issue>
  <Issue>
    <IssueID>26653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InsertComment logic should respect line break setting (EditorConfig or local)</Title>
    <CreatedDate>05/05/2018</CreatedDate>
    <ClosedDate>11/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26653</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

Here it hardcodes "\r\n" and it should be properly getting the setting from either editor config or current file settings.</Description>
  </Issue>
  <Issue>
    <IssueID>26651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullability of static field doesn't seem to be tracked</Title>
    <CreatedDate>05/05/2018</CreatedDate>
    <ClosedDate>06/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[Example](

``

Found in nullable dogfood.
Tagging @cston </Description>
  </Issue>
  <Issue>
    <IssueID>26650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Pattern Matching type expressions don't work with covariant types</Title>
    <CreatedDate>05/05/2018</CreatedDate>
    <ClosedDate>05/05/2018</ClosedDate>
    <IssueLabels />
    <Code>csharp
public interface ITry&lt;out T&gt;    {    }

public class Success&lt;T&gt; : ITry&lt;T&gt; {
        public readonly T Value;
        public Success(T value) =&gt; Value = value;
}


**Expected Behavior**:
csharp
ITry&lt;object&gt; test = new Success&lt;string&gt;("test");
Assert.True(test is Success&lt;object&gt;);
`</Code>
    <Description>**Version Used**: 
C# 7.2

**Steps to Reproduce**:
``
The assert should pass.

**Actual Behavior**:
The assert fails.</Description>
  </Issue>
  <Issue>
    <IssueID>26649</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reached assertion in NodeMapBuilder.AddToMap</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>24/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
&gt;	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.NodeMapBuilder.AddToMap(Microsoft.CodeAnalysis.CSharp.BoundNode root, System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundNode&gt;&gt; map, Microsoft.CodeAnalysis.SyntaxNode node) Line 106	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GuardedAddBoundTreeAndGetBoundNodeFromMap(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.CSharp.BoundNode bound) Line 1328	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 1789	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 457	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode bindableNode, out Microsoft.CodeAnalysis.CSharp.BoundNode lowestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode highestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode boundParent) Line 1202	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetStatementOrRootOperation(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 1057	C#
 	Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 1002	C#
 	Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetOperationWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 186	C#
 	Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 469	C#
 	Microsoft.CodeAnalysis.SemanticModel.GetOperation(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 77	C#
 	Microsoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.GetContainingIfOperation(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Operations.IThrowOperation throwOperation, System.Threading.CancellationToken cancellationToken) Line 325	C#
 	Microsoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.AnalyzeOperation(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext context, Microsoft.CodeAnalysis.INamedTypeSymbol expressionTypeOpt) Line 77	C#
 	Microsoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.InitializeWorker.AnonymousMethod__1(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext operationContext) Line 57	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction.AnonymousMethod__44_0((System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt; action, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext context) data) Line 589	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock&lt;System.ValueTuple&lt;System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;&gt;(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action&lt;(System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)&gt; analyze, (System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1221	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows&lt;System.ValueTuple&lt;System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;&gt;(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action&lt;(System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)&gt; analyze, (System.Action&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext&gt;, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1190	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction(Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction operationAction, Microsoft.CodeAnalysis.IOperation operation, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 587	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(Microsoft.CodeAnalysis.IOperation operation, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1151	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; addDiagnostic, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1132	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActionsCore(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt, bool isGeneratedCode) Line 1104	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationActions(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operationsToAnalyze, System.Collections.Generic.IDictionary&lt;Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction&gt;&gt; operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.SyntaxReference declaration, int declarationIndex, Microsoft.CodeAnalysis.ISymbol declaredSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCode) Line 1075	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1819	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, System.Threading.CancellationToken cancellationToken) Line 1638	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 964	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 919	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEvent(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 906	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 893	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 823	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool usingPrePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 414	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 343	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt; eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken) Line 830	C#
 	Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Line 662	C#
 	System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;.InnerInvoke()	Unknown
 	System.Threading.Tasks.Task.Execute()	Unknown
 	System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown

`</Code>
    <Description>While working on the `features/NullableDogfood` branch using a RoslynDev hive loaded with `features/NullableReferenceTypes`.

`(object)existing[i] == added[i] || !(key is StatementSyntax)`. 
`(object)existing[i] == added[i]` is `false` and `key` is a block syntax (`{ throw new ArgumentException(e.Message, "Sources"); }`.

FYI @AlekseyTs since might relate to IOperation or you may have an idea.

``

</Description>
  </Issue>
  <Issue>
    <IssueID>26648</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>QuickInfo doesn't show nullability information from API</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When hovering over this invocation, I expect to see the signature of the API including nullability.
![image](

But no nullability is shown on `pathToDotnet` despite being there in the declaration.
![image](

Along with displaying `?`, it would be great if the popup could tell you that a method is "oblivious", or maybe even highlight it.

Found in nullable dogfood.</Description>
  </Issue>
  <Issue>
    <IssueID>26645</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggestion for nullable annotation: null-in null-out</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For instance, `NormalizePath` can return `null`, but only when it is given a `null` input.

Tagging @cston </Description>
  </Issue>
  <Issue>
    <IssueID>26644</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Some squiggles missing for nullable warnings</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>05/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using the RoslynDev hive, built from `features/NullableReferenceTypes`, and opening `Compilers.sln` from `features/NullableDogfood` branch.

I build one project (`MSBuildTask`) and look at the warnings that are produced. Some warnings work fine: I double-click on one in the Error List and it takes me to the squiggled source. But some warnings only take me to the source (no squiggles).

![image](


![image](

@heejaechang @CyrusNajmabadi Any idea how to troubleshoot this?</Description>
  </Issue>
  <Issue>
    <IssueID>26643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] C# Collection Initializers do not expose all arguments</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>26643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>26643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the VB IOperation tree for collection initializers, we expose nodes for default arguments and for param arrays. We do not do the same for C# collection initializers, so those trees only have the arguments that were actually specified in code.</Description>
  </Issue>
  <Issue>
    <IssueID>26642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>26642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Investigate removing a dependency on ImageCatalog/Imaging from EditorFeatures</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>26642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>EditorFeatures has a dependency on MS.VS.ImageCatalog.dll and we don't have it on Mac. This place: 
</Description>
  </Issue>
  <Issue>
    <IssueID>26640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>26640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid "Remove Unnecessary Cast" suggestion when casting any numeric type to object</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>13/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2017 15.6.7

**Steps to Reproduce**:

``

**Expected Behavior**:

No warnings.

**Actual Behavior**:

The two cast operators in Method1 are flagged as unnecessary. But they actually do have an effect. The code works as is. Without these cast operators, the cast in Method2 would fail because the value is int not byte.</Description>
  </Issue>
  <Issue>
    <IssueID>26639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Returning `null` from non-nullable local function should warn</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
``

Found in nullable dogfood.

Note: there are some IDE tests (in `CSharpDeclareAsNullableCodeFixTests`) for this bug, which should be unskipped. </Description>
  </Issue>
  <Issue>
    <IssueID>26631</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullability is ignored for `foreach` iterator variable</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>No warnings reported for `x.ToString()` or `y.ToString()`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>26628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`null` initializer for non-nullable property (or field) should warn</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Similar to 
``

Found in nullable dogfood.

Note: there are some IDE tests (in `CSharpDeclareAsNullableCodeFixTests`) for this bug, which should be unskipped. </Description>
  </Issue>
  <Issue>
    <IssueID>26626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`null` default value for non-nullable parameter should warn</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>17/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[Example](

``
Found in nullable dogfood.
Tagging @cston 

Note: there are some IDE tests (in `CSharpDeclareAsNullableCodeFixTests`) for this bug, which should be unskipped. </Description>
  </Issue>
  <Issue>
    <IssueID>26625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot resolve symbol when System.Threading.Tasks.Dataflow.dll used</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels />
    <Code>
public void Foo3()
{
    new BroadcastBlock&lt;bool&gt;(null);
}

2. 
Create compilation

AdhocWorkspace adhoc = new AdhocWorkspace();
ProjectInfo projectInfo = ProjectInfo.Create(ProjectId.CreateNewId(), VersionStamp.Default, "TestProject", "TestProject", "C#");
adhoc.AddProject(projectInfo);
adhoc.AddDocument(projectInfo.Id, className + ".cs", sourceText);
Document document = adhoc.CurrentSolution.Projects.Single().Documents.Single();
IDictionary&lt;Document, SyntaxTree&gt; syntaxTrees = new Dictionary&lt;Document, SyntaxTree&gt;();
SyntaxTree tree = doc.GetSyntaxTreeAsync().Result;
syntaxTrees.Add(document, tree);
// metadataRefences contain two values: mscorlib.dll and System.Threading.Tasks.Dataflow.dll
CSharpCompilation compilation = CSharpCompilation.Create("MyCompilation", syntaxTrees: syntaxTrees.Values, references: metadataReferences, options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
SemanticModel model = _compilation.GetSemanticModel(tree);
`</Code>
    <Description>**Version Used**: 
2.7.0

**Steps to Reproduce**:

1. 
``
3. 

**Expected Behavior**:
model.GetSymbolInfo() on "new BroadcastBlock&lt;bool&gt;(null);" returns proper SymbolInfo

**Actual Behavior**:
It returns SymbolInfo with OverloadResolutionFailure: candidate symbols are:
Method System.Threading.Tasks.Dataflow.BroadcastBlock&lt;System.Boolean&gt;..ctor(System.Func&lt;System.Boolean, System.Boolean&gt;[missing] cloningFunction)
Method System.Threading.Tasks.Dataflow.BroadcastBlock&lt;System.Boolean&gt;..ctor(System.Func&lt;System.Boolean, System.Boolean&gt;[missing] cloningFunction, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions)

It seems like there is a problem with Func type.


</Description>
  </Issue>
  <Issue>
    <IssueID>26624</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Dataflow analysis thinks that we could get back in a loop with `null` `node`</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>06/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26624</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Update:

A test like `c?.Count &gt; 0` should tell us that `c` is not-null in the when-true branch.

----
``

Found in nullable dogfood.
Tagging @cston </Description>
  </Issue>
  <Issue>
    <IssueID>26621</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need annotation for nullable property with non-nullable setter</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>10/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>26621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>26621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26621</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Let's bring this up with LDM.

``</Description>
  </Issue>
  <Issue>
    <IssueID>26620</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Some diagnostics include full path, but others only include filename or relative path</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>26620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the example below, that causes trouble because double-clicking on one of the lines with `Vbc.cs` opens the wrong `Vbs.cs` file. I think that having a full path would prevent that from happening.

![image](

This also repros from the command-line (using `msbuild /v:m /m src\Compilers\Core\MSBuildTask\MSBuildTask.csproj` in this specific case):

![image](

Tagging @gafter @cston as FYI
</Description>
  </Issue>
  <Issue>
    <IssueID>26618</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Adding `!` fails to suppress warning</Title>
    <CreatedDate>04/05/2018</CreatedDate>
    <ClosedDate>06/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The sample below shows two problems:
~~1. `T` is actually constrained to a class type, so `return null` should be ok~~
2. Adding `!` did not supress this warning


``</Description>
  </Issue>
  <Issue>
    <IssueID>26614</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>26614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Async method with nullable return type can return null</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, this produces a warning, but it should not.

``

Found in nullable dogfood. Assigned to @cston </Description>
  </Issue>
  <Issue>
    <IssueID>26613</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash on positional pattern `(a: 1)`</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>05/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>26613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
public class C {
    public void M() {
        _ = this is (a: 1);
    }
}


C#
System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionPattern(DeconstructionPatternSyntax node, TypeSymbol inputType, Boolean hasErrors, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Patterns.cs:line 517
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPattern(PatternSyntax node, TypeSymbol inputType, Boolean hasErrors, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Patterns.cs:line 102
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsPatternExpression(IsPatternExpressionSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Patterns.cs:line 30
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs:line 564
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs:line 329
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 1322
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs:line 404
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Expressions.cs:line 329
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 566
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 559
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 49
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 1599
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 43
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 3073
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs:line 3021
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, ValueTuple`3&amp; forSemanticModel) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 1619
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 943
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 494
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 384
   at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs:line 136
   at System.Threading.Tasks.Task.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 299
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 144
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs:line 2175
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs:line 2144
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs:line 2061
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GetAllDiagnosticsWithoutStateTrackingAsync&gt;d__50.MoveNext() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs:line 451
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GetAllDiagnosticsAsync&gt;d__43.MoveNext() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs:line 324
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Roslyn.RoslynSession.&lt;GetDiagnosticsAsync&gt;d__16.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Handlers.SlowUpdateHandler.&lt;ExecuteAsync&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessInternalAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessAsync&gt;d__12.MoveNext()

`</Code>
    <Description>[Repro](

``</Description>
  </Issue>
  <Issue>
    <IssueID>26610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>QuickInfo displays non-generic XML comments when highlighting completion item is a generic type</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 (27702.1.d15.8)

**Steps to Reproduce**:

1. Create a C# project
2. In the Main method, type `ImmutableArray`, or any identifier that has both non-generic and generic types (for example, `ValueTuple`)
3. Use the Down Arrow or mouse click to select the generic type in the IntelliSense items
4. A tooltip with type definition and XML comments (if any) will be displayed

**Expected Behavior**:
When non-generic type is highlighted, it should display XML comments from non-generic type declaration, when generic type is highlighted, it should display XML comments from generic type declaration.

**Actual Behavior**:
It displays non-generic type XML comments (the first match with the identifier,) for both non-generic and generic type definitions. See screenshot below.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inline refactoring isn't offered at usages of temporary variable</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        static void Main(string[] args)
        {
            string foo = "sfsf";

            Console.Write(foo);
        }
`</Code>
    <Description>**Version Used**: 
15.8 Int Preview 1

**Steps to Reproduce**:

1. Create C# project, as shown below
2. Set caret on 'foo' in 'Console.Write(foo);'
3. Press Ctrl+.

``

**Expected Behavior**:
LightBulb offers inline temporary variable 'foo' refactoring.

**Actual Behavior**:
Inline variable refactoring is only offered if you set the caret inside of the 'foo' in the variable declaration.

**Justification**
Since the temporary variable has to be declared before it can be used, I think the most likely scenario in which I'd use this fixer is 1) I create the temporary variable 2) I use it 3) I realize the variable is unneeded and want to inline it. It seems more useful to support inlining the variable at its usage than supporting it at its declaration.</Description>
  </Issue>
  <Issue>
    <IssueID>26607</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Semantic model not working for property sub pattern name.</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    void M2()
    {
        object o = null;
        _ = o switch { Blah { X: Y } =&gt; 0, _ =&gt; 0 }; // try GetSymbolInfo on either X or the entire subpattern element
    }

    class Blah
    {
        public int X;
    }
}
`</Code>
    <Description>``

Expected: get back the field symbol for Blah.X.  
Action: get back no symbol.

Note that Y is not defined.  But that should not impact if we return X or not.</Description>
  </Issue>
  <Issue>
    <IssueID>26605</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Metadata as Source broken for System.ValueTuple</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

Metadata as Source displays following:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26597</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suggestion: offer "generate Deconstruct method" fixer</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26597</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Type `(int x, string y) = e; // no Deconstruct method found` and get offered to generate such a method.
This could also apply to recursive patterns: `e is (1, "hello")`.</Description>
  </Issue>
  <Issue>
    <IssueID>26596</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>(pattern-matching code gen) Elide evaluation whose result is not used</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>21/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
using System;
public class C {
    public void M() {
        if (this is C(1)) {}
    }
    public void Deconstruct() =&gt; throw null;
    public void Deconstruct(out int x) =&gt; throw null;
}


Produces this code

 c#
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Permissions;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("0.0.0.0")]
public class C
{
    public void M()
    {
        if (this != null)
        {
            Deconstruct(out int _);
        }
    }

    public void Deconstruct()
    {
        throw null;
    }

    public void Deconstruct(out int x)
    {
        throw null;
    }
}
`</Code>
    <Description>We currently elide generating code for evaluations whose results are not used, but we appear to have missed a case. See [HERE](

This source

``

I believe the invocation of `Deconstruct` in `M()` should be elided.
</Description>
  </Issue>
  <Issue>
    <IssueID>26595</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Explicitly implementing an interface with a property shows property accessors</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>16/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.8.0-beta4-62827-02. Commit Hash: 362ec0eec4c1d61b122e271423840950fedf13ff

1. Create an interface with a property getter.
2. Create a class that implements the interface.
3. Manually write an explicit implementation of that property getter:

![image](

...that getter shouldn't be shown.</Description>
  </Issue>
  <Issue>
    <IssueID>26588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Camel case naming rule should ignore known prefixes</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7 Preview 5

:bulb: Several tests added for #26566 are skipped due to this issue.

**Steps to Reproduce**:

1. Create a naming rule that fields should be camelCase with no prefix
2. Define a field `m_field`

**Expected Behavior**:

A naming violation diagnostic is reported because `m_` is an unexpected prefix (see #26566 for common prefixes).

**Actual Behavior**:

No naming violation is reported, because `m` is a lowercase letter which meets the current expectations for camelCase names.</Description>
  </Issue>
  <Issue>
    <IssueID>26587</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>WeakReference Target is not collected on GC.Collect if accessed</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>26587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have encountered this behavior after updating to 15.6.7 Visual Studio.

**Version Used**: 
``

**Steps to Reproduce**:

1. Run the following tests
[WeakReferenceTests.zip](

**Expected Behavior**:
`Target` should be collected after `GC.Collect()` is called.

**Actual Behavior**:
`Target` is not collected till the end of method.
</Description>
  </Issue>
  <Issue>
    <IssueID>26586</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CodeGeneration produces unnecessary parentheses</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Test Name:	Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.ExpressionGenerationTests.TestAddExpression1
Test FullName:	Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.ExpressionGenerationTests.TestAddExpression1
Test Source:	C:\code\roslyn\src\EditorFeatures\Test\CodeGeneration\ExpressionGenerationTests.cs : line 129
Test Outcome:	Failed
Test Duration:	0:00:04,771

Result StackTrace:	
at Roslyn.Test.Utilities.AssertEx.Fail(String message) in C:\code\roslyn\src\Test\Utilities\Portable\Assert\AssertEx.cs:line 341
   at Roslyn.Test.Utilities.TokenUtilities.AssertTokensEqual(String expected, String actual, String language) in C:\code\roslyn\src\Test\Utilities\Portable\Syntax\TokenUtilities.cs:line 45
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.AbstractCodeGenerationTests.Test(Func`2 nodeCreator, String cs, String vb) in C:\code\roslyn\src\EditorFeatures\Test\CodeGeneration\AbstractCodeGenerationTests.cs:line 31
   at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.ExpressionGenerationTests.TestAddExpression1() in C:\code\roslyn\src\EditorFeatures\Test\CodeGeneration\ExpressionGenerationTests.cs:line 131
Result Message:	
Unexpected token.  Actual '^(^ 1 ) + ' Expected '^1^ + 2  '
Actual:
(1) + (2)
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Attempt to run CodeGeneration tests like:



**Expected Behavior**: The test passes.

**Actual Behavior**:

``

The test failure seems to be caused by unnecessary parentheses.</Description>
  </Issue>
  <Issue>
    <IssueID>26585</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"csc.exe" exited with code -2146232797</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>14/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
class E
{
  public class Enumerator
  {
    public ref readonly int Current =&gt; throw new NotImplementedException();
    public bool MoveNext() =&gt; throw new NotImplementedException();
  }
  public Enumerator GetEnumerator() =&gt; new Enumerator();
}
class C
{
  public async void M()
  {
    foreach (ref readonly int x in new E()) {}
  }
}


or 

cs
using System;
class E
{
  public class Enumerator
  {
    public ref readonly int Current =&gt; throw new NotImplementedException();
    public bool MoveNext() =&gt; throw new NotImplementedException();
  }
  public Enumerator GetEnumerator() =&gt; new Enumerator();
}
class C
{
  public System.Collections.Generic.IEnumerable&lt;int&gt;  M()
  {
    yield return 0;
    foreach (ref readonly int x in new E()) {}
  }
}


**Expected Behavior**:

Meaningful error.

**Actual Behavior**:

"csc.exe" exited with code -2146232797

Stacktrace from [sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDZICYgNQA+AAgAwAERAjANwCwAUEQExkCiDA3g2RQMwUtWAOwCuYRBBgB7BNzJd6PHkX4I4AMzJqI2KUIwBPMmiEwyAYREI1psgF4AfGRgALBFIDuZIXC8A5KRgASTAABww4cVM4bFYADwBjOFCYND0ACgBKOkUlFTJgKSkMMgBZKQA3OD84OJgs+ydXdy8ff0CQ8Mi4aNjE5NSM7LkAXzl84TEJaQQyAHE4GEnxBEkZBsdvXzZRFbWELJyxxhZzTnH+IgAOCgAWMqy5BSUydRk4CASXMnS1TW1dPojCYzHFjEItl5WFlMvJjjxjiMgA==)

    System.InvalidCastException: Unable to cast object of type 'ForEachLocalSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedLocal'.

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitAssignmentOperator(BoundAssignmentOperator node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 774

       at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 1245

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 97

       at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 225

       at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 206

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 82

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\AsyncRewriter\AsyncMethodToStateMachineRewriter.cs:line 252

       at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2693

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 9006

       at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2267

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\MethodToClassRewriter.cs:line 137

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 308

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2303

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 9266

       at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 4076

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\MethodToClassRewriter.cs:line 137

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 265

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2303

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitTryStatement(BoundTryStatement node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 801

       at Microsoft.CodeAnalysis.CSharp.BoundTryStatement.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 3489

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\MethodToClassRewriter.cs:line 137

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 308

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2303

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 9266

       at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 4076

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 37

       at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\MethodToClassRewriter.cs:line 137

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 265

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitBlock(BoundBlock node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 657

       at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Generated\BoundNodes.xml.Generated.cs:line 2303

       at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 87

       at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\MethodToStateMachineRewriter.cs:line 649

       at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(BoundStatement body, MethodSymbol moveNextMethod) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\AsyncRewriter\AsyncMethodToStateMachineRewriter.cs:line 120

       at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(SynthesizedImplementationMethod moveNextMethod) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\AsyncRewriter\AsyncRewriter.cs:line 248

       at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\AsyncRewriter\AsyncRewriter.cs:line 124

       at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\StateMachineRewriter\StateMachineRewriter.cs:line 106

       at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(BoundStatement body, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, AsyncStateMachine&amp; stateMachineType) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Lowering\AsyncRewriter\AsyncRewriter.cs:line 68

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 1326

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 1079

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 494

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 384

       at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\InternalUtilities\UICultureUtilities.cs:line 136

       at System.Threading.Tasks.Task.InnerInvoke()

       at System.Threading.Tasks.Task.Execute()

    --- End of stack trace from previous location where exception was thrown ---

       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 299

       at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 144

       at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\CSharp\Portable\Compilation\CSharpCompilation.cs:line 2533

       at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\Compilation\Compilation.cs:line 2195

       at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Compilers\Core\Portable\Compilation\Compilation.cs:line 2143

       at SharpLab.Server.Compilation.Compiler.&lt;TryCompileToStreamAsync&gt;d__0.MoveNext()

    --- End of stack trace from previous location where exception was thrown ---

       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)

       at SharpLab.Server.MirrorSharp.SlowUpdate.&lt;ProcessAsync&gt;d__7.MoveNext()

    --- End of stack trace from previous location where exception was thrown ---

       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

       at MirrorSharp.Internal.Handlers.SlowUpdateHandler.&lt;ExecuteAsync&gt;d__4.MoveNext()

    --- End of stack trace from previous location where exception was thrown ---

       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)

       at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessInternalAsync&gt;d__13.MoveNext()

    --- End of stack trace from previous location where exception was thrown ---

       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)

       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)

       at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessAsync&gt;d__12.MoveNext()
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Professional 2017 Preview (2)
Version 15.7.0 Preview 5.0
VisualStudio.15.Preview/15.7.0-pre.5.0+27625.0
Microsoft .NET Framework
Version 4.7.02556

**Steps to Reproduce**:

Try to compile a foreach cycle with a ref iterator variable in an async/iterator method
e.g.

``</Description>
  </Issue>
  <Issue>
    <IssueID>26584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Parenthesized expression is parsed as a cast if it's followed by 'switch'</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>12/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C {
    void M(bool t)  {
        Console.Write((t) switch {var x =&gt; x});
    }
}
`</Code>
    <Description>**Version Used**:  branch `features/recusrive-patterns`

**Steps to Reproduce**:

``


**Expected Behavior**:

No error.

**Actual Behavior**:

`error CS1525: Invalid expression term 'switch'`
`error CS0118: 't' is a variable but is used like a type`</Description>
  </Issue>
  <Issue>
    <IssueID>26579</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No results for some C#/VB options in quick launch</Title>
    <CreatedDate>03/05/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.8.0-beta4 (15.8 P1 Int Preview)

**Steps to Reproduce**:

1. Ctrl+Q (open Quick Launch)
2. Search for 'Decompiler'

Alternatively:
1. Tools &gt; Options
2. Search for 'Decompiler'

**Expected Behavior**:
There should be a search result for the page containing the _Tools &gt; Options &gt; Text Editor &gt; C# &gt; Advanced &gt; Enable Navigation to decompiled sources_ option.

**Actual Behavior**:
No results in quick launch:
![image](

No results in options dialog:
![image](

The fix is quite simple and just involves updating [this line]( its VB analog, and all of its localized versions with keywords for every supported C# and VB option.

I've only tested the 'decompiler' feature but given how obscure quick launch knowledge is, odds are there are other C# and VB options that don't have keywords, so I'd take some time to try searching for all C#/VB commands.

To prevent similar bugs in the future, I'd add a comment indicating this requirement to the [C# Options Page]( and to its VB analog.

Given the density of Tools Options, if an option isn't searchable, its discoverability is severely limited.</Description>
  </Issue>
  <Issue>
    <IssueID>26571</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>26571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Refactoring] Foreach to For doesn't preserve inline comments</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>05/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
	class Program {
		static void Main(string[] args) {
			List&lt;int&gt; myList = new List&lt;int&gt;(){1,3,5,6, };
			// comment 1
			foreach (var item /*comment 2*/ in myList) //comment 3 
		    {
				Console.WriteLine(item);
			}
		}
	}
`</Code>
    <Description> Comment 1 and 3 get preserved, but the existence of Comment 2 prevents the conversion from being offered:

``
 
</Description>
  </Issue>
  <Issue>
    <IssueID>26569</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis fails to load on `dotnet build` in a custom MSBuild task</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels />
    <Code>
.NET Command Line Tools (2.1.105)

Product Information:
 Version:            2.1.105
 Commit SHA-1 hash:  141cc8d976

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.16299
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.1.105\

Microsoft .NET Core Shared Framework Host

  Version  : 2.0.7
  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11


**Steps to Reproduce**:

1. `git clone https://github.com/pbalaga/TaskWithCodeAnalysisFailure.git`
2. `cd TaskWithCodeAnalysisFailure\TaskConsumerProject`
3. `dotnet build`

Important points about how the above repro repository was built:
- TaskLibrary.csproj
  * define a custom MsBuild task: `SampleTask`
  * `&lt;CopyLocalLockFileAssemblies&gt;true&lt;/CopyLocalLockFileAssemblies&gt;` in order to copy NuGet references to bin folder
- TaskConsumerProject.csproj
  * invoke SampleTask from TaskLibrary's bin folder:


&lt;UsingTask TaskName="TaskLibrary.SampleTask" AssemblyFile="..\TaskLibrary\bin\Debug\netstandard2.0\TaskLibrary.dll" /&gt;
&lt;Target Name="SampleTaskInvocation" BeforeTargets="Build"&gt;
    &lt;SampleTask&gt;&lt;/SampleTask&gt;
&lt;/Target&gt;
`</Code>
    <Description>**Version Used**: 
[Microsoft.CodeAnalysis 2.8.0](

`dotnet --info`:
``

**Expected Behavior**:
Project should build without errors.

**Actual Behavior**:
Build fails with the below error:
&gt;TaskConsumerProject\TaskConsumerProject.csproj(11,5): error MSB4018: System.IO.FileLoadException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Could not find or load a specific file. (Exception from HRESULT: 0x80131621)

**Remarks**:
- the same project builds without errors in Visual Studio 2017 and via MsBuild CLI
- commenting out [the line]( containing Microsoft.CodeAnalysis usage makes the problem disappear
- all projects are targeting netstandard2.0, no multi-targeting (so not the same issue as 
- I managed to attach a debugger to `SampleTask` before it throws an exception, but there is no more detail presented than in console output
- two additional dependencies were added to `SampleTask`: a project dependency and a NuGet dependency on a package different than Microsoft.CodeAnalysis to rule out possibility that this is a more general `dotnet`'s problem with dependency resolution. Only using Microsoft.CodeAnalysis causes the build to fail
- I tried other versions of Microsoft.CodeAnalysis, specifically: `2.8.0-beta4` and `2.7.0`, both of which produce exactly the same results</Description>
  </Issue>
  <Issue>
    <IssueID>26566</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Naming violation code fix should strip known common prefixes</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>26566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From 

&gt; For StyleCop Analyzers, we strip the prefixes `m_`, `s_`, `t_`, and `_` until there are no more *or* the next step would leave an empty string. Then we apply the expected naming convention to the result. In combination with an appropriate set of naming convention rules in .editorconfig, this approach would cover everything from the table except cases where multiple letters need to change from uppercase to lowercase.

:memo: This task is an easy improvement to the current naming fix heuristics which partially covers the cases requested in #26556.</Description>
  </Issue>
  <Issue>
    <IssueID>26565</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Find all references" Navigation using F8 does not show caret in text editor when a new file is activated</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>20/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>26565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
Visual Studio Enterprise 2017 15.6.6

**Steps to Reproduce**:
1. Pick any identifier in source that occurs at least twice, but in different files (any class from the System namespace such as `Guid` or C# identifier such as `string` works; not required to be a symbol from the project to trigger the issue)
2. Invoke "Find all references". It seems to make no difference which "Group by" option is active, but it does make a difference if "Find in Files" is used instead to locate a string (and not a reference).
3. Double-click the a result in one file, VS jumps to the result and puts the caret right next to the match. Do *not* single-click preview the file, because it leaves the focus on the Find result/references window and picks a different result instead of moving the caret in the text editor when using Up/Down/etc.
4. Hit F8 (`Edit.GoToNextLocation`) to get the next result. In case the result is in the same file, continue until a new file is activated (because the caret works just fine when it was visible before)

**Expected Behavior**:
VS jumps to the result, just as a double-click on the result would do.

**Actual Behavior**:
VS jumps to the result, but no caret is visible. Attempting to perform keyboard navigation (Up/Down/Left/Right as well as Page Up/Page Down) works, but is very difficult due to the caret not being visible at all. Might be my imagination, but it seems that identifier/keyword/brace highlighting takes a lot longer to complete (which could also be caused by the caret being somewhere else than I'd expect).</Description>
  </Issue>
  <Issue>
    <IssueID>26563</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Specialized fields get mistakenly added to MemberRef blob in output PE file</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
   public class NonGenericClass
   {
      private int _simplePrivateFieldNoReference;
      private int _simplePrivateFieldPublicReference;

      public void ReferencePrivateField()
      {
         var x1 = _simplePrivateFieldPublicReference;
      }
   }

   public class GenericClass&lt;T&gt;
   {
      private int _simplePrivateFieldNoReference;
      private int _simplePrivateFieldPublicReference;

      public void ReferencePrivateField()
      {
         var x1 = _simplePrivateFieldPublicReference;
      }
   }

**Expected Behavior**:

I do not think any of the private fields should be added to the MemberRef blob of the output file.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/4259011/39519354-b64b786a-4e06-11e8-853c-1c853a1464a5.png)

**Possible Fix**:

In MetadataWriter.cs, at the start of GetFieldHandle(), add these three statements:


     ISpecializedFieldReference specializedFieldReference =
                                                 fieldReference.AsSpecializedFieldReference;
     if (specializedFieldReference != null)
        fieldReference = specializedFieldReference.UnspecializedVersion;
`</Code>
    <Description>**Version Used**: Version currently used by Visual Studio 2017, and also current version on Master branch.

**Steps to Reproduce**:

Here's a simple test program:

``
In ReferenceIndexerBase.cs, in Visit(IFieldReference fieldReference), following the first four lines add the same three statements shown above.

Or, in the interests of DRY, combine these three statements and the following two statements which are common for the two locations into one new method in MetadataWriter.

If I'm right about this I'd love to submit a pull request, and join the ranks of Roslyn contributors.  :-)</Description>
  </Issue>
  <Issue>
    <IssueID>26560</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ObjectCreationInitializer completion doesn't escape keywords</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>15/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
   int @new { get; set; }
   void M()
   {
        _ = new C() { $$ }; // "@new" should be offered, but "new" is offered instead.
   }
}
`</Code>
    <Description>``

Follow-up on comment made in  about a related provider.</Description>
  </Issue>
  <Issue>
    <IssueID>26559</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Sharplab shows TypeInferenceService error on recursive-patterns branch</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>26559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
public class C {
    public void M() {
        _ = e is { };
    }
}


[Sharplab link](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRIMaOQSwG4SoAOsMECAdsgDQwhTIzUAmIA1AD4ACADAARcAjAG4AsACguAZgEAmPgGE+Abwl91AmVwAsfALIAKAJQq1G8wH0+AXj4Q+OZCr4BfMePMuJLoA=)



System.ArgumentNullException: Value cannot be null.
Parameter name: source
   at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService`1.AbstractTypeInferrer.Filter(IEnumerable`1 types, Boolean filterUnusable) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Workspaces\Core\Portable\LanguageServices\TypeInferenceService\AbstractTypeInferenceService.AbstractTypeInferrer.cs:line 72
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService`1.AbstractTypeInferrer.InferTypes(TExpressionSyntax expression, Boolean filterUnusable) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Workspaces\Core\Portable\LanguageServices\TypeInferenceService\AbstractTypeInferenceService.AbstractTypeInferrer.cs:line 52
   at Microsoft.CodeAnalysis.LanguageServices.TypeInferenceService.AbstractTypeInferenceService`1.InferTypes(SemanticModel semanticModel, SyntaxNode expression, String nameOpt, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Workspaces\Core\Portable\LanguageServices\TypeInferenceService\AbstractTypeInferenceService.cs:line 97
   at Microsoft.CodeAnalysis.Shared.Extensions.ITypeInferenceServiceExtensions.InferDelegateType(ITypeInferenceService typeInferenceService, SemanticModel semanticModel, SyntaxNode expression, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Workspaces\Core\Portable\Shared\Extensions\ITypeInferenceServiceExtensions.cs:line 31
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.TryInitializeSimpleName(TService service, SemanticDocument document, TSimpleNameSyntax simpleName, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Features\Core\Portable\GenerateMember\GenerateParameterizedMember\AbstractGenerateMethodService.State.cs:line 150
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.TryInitializeMethodAsync(TService service, SemanticDocument document, SyntaxNode node, CancellationToken cancellationToken) in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Features\Core\Portable\GenerateMember\GenerateParameterizedMember\AbstractGenerateMethodService.State.cs:line 64
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.State.&lt;GenerateMethodStateAsync&gt;d__0.MoveNext() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Features\Core\Portable\GenerateMember\GenerateParameterizedMember\AbstractGenerateMethodService.State.cs:line 25
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateMethodService`4.&lt;GenerateMethodAsync&gt;d__5.MoveNext() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Features\Core\Portable\GenerateMember\GenerateParameterizedMember\AbstractGenerateMethodService.cs:line 0
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.&lt;RegisterCodeFixesAsync&gt;d__0.MoveNext() in D:\$TC\work\c99972096bc51e45\!roslyn\sources\dotnet\src\Features\Core\Portable\CodeFixes\GenerateMember\AbstractGenerateMemberCodeFixProvider.cs:line 33
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Handlers.SlowUpdateHandler.&lt;GetCodeActionsAsync&gt;d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at MirrorSharp.Internal.Handlers.SlowUpdateHandler.&lt;SendSlowUpdateAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Handlers.SlowUpdateHandler.&lt;ExecuteAsync&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessInternalAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at MirrorSharp.Internal.Connection.&lt;ReceiveAndProcessAsync&gt;d__12.MoveNext()
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>26556</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Naming violation fixers need better heuristics</Title>
    <CreatedDate>02/05/2018</CreatedDate>
    <ClosedDate>18/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I find myself never using the default naming violation fixer - it almost always suggests nonsensical fixes for a code base as old as mine with various naming styles over the years.

We ran into exactly the same situation when we did naming rules with FxCop, and we added better heuristics to suggest more sensible name. 

As I fix up this Visual Basic code base, I'm going to add all the individual suggestions that I ignored from it:

Syntax|Suggested|What I actually renamed to|Issue
---|---|---|---
`Private Shared m_DefaultInstance As BuildEventCommandLineDialog`|s_m_DefaultInstance|s_defaultInstance|#26566
`m_CommandLine As String`|_m_CommandLine|_commandLine|#26566
`Private ReadOnly _ID As String`|_iD|_id|#31908
`Private _UIShellService As IVsUIShell`|_uIShellService|_uiShellService|#31908
`Protected m_ScalingCompleted As Boolean`|M_ScalingCompleted|ScalingCompleted|#26566
`Private Const s_anyCPUPlatformName As String = "Any CPU"`|S_anyCPUPlatformName|AnyCPUPlatformName|#26566
`Private _DTE As EnvDTE.DTE`|_dTE|_dte|#31908
`Private s_helpTopic As String`|s_helpTopic|_helpTopic|#26566
`Private Shared s_RFSSwitch`|s_rFSSwitch|s_rfsSwitch|#31908
`Private _DTEEvents As DTEEvents`|_dTEEvents|_dteEvents|#31908
`Private Const s_SERIALIZATION_DESCRIPTION As String = "Description"`|S_SERIALIZATION_DESCRIPTION|SERIALIZATION_DESCRIPTION|#26566, #31908

</Description>
  </Issue>
  <Issue>
    <IssueID>26548</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>convert `VerifyIL` calls to the form that prints out sequence points</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>11/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>26548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See




/cc @tmat </Description>
  </Issue>
  <Issue>
    <IssueID>26542</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IAssemblySymbol equality across languages</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@AlekseyTs believes that an `IAssemblySymbol` created by one language for a given assembly will not satisfy `object.Equals(...)` with an `IAssemblySymbol` created by another language for the same assembly. This bug could result in an incorrect result from the extension method [`ISymbolExtensions.IsAccessibleWithin`](</Description>
  </Issue>
  <Issue>
    <IssueID>26540</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consolidate recursive patterns to a single syntax node</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>21/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider revising the syntax nodes for recursive patterns so that there is a single syntax node.</Description>
  </Issue>
  <Issue>
    <IssueID>26539</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Refactor `if` to conditional</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Code that looks like `if (b) { return x; } return y;` can be refactored to `return b ? x : y;`</Description>
  </Issue>
  <Issue>
    <IssueID>26538</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>26538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update Roslyn /errorLog JSON output to SARIF v2</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn today emits SARIF v1 when log files are produced by the /errorLog switch. The SARIF v2 format is close to being finalized as a public standard driven by OASIS (Microsoft is on the technical committee and serves as project editor for the standard).

This is a tracking item request to update Roslyn's support when the standard is finalized. The TC will approve a draft for comment on 5/17.</Description>
  </Issue>
  <Issue>
    <IssueID>26533</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatic generation of comparison operators</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: C#6

**Steps to Reproduce**:

Can you make comparator operators automatically determined by the "CompareTo" method? Because the definition of these operators looks the same. However, this should not take away the ability to determine the comparison operators by yourself.

**Expected Behavior**:

    class Test : IComparable&lt;Test&gt;
    {
        private int i = 0;
        public int CompareTo(Test other)
        {
            return i.CompareTo(other.i);
        }
    }
Test t = new Test(), T = new Test();
            Console.WriteLine(t &lt; T);

**Actual Behavior**:

    class Test : IComparable&lt;Test&gt;
    {
        private int i = 0;
        public int CompareTo(Test other)
        {
            return i.CompareTo(other.i);
        }       
        public static bool operator ==(Test l, Test r)
        {
            //return l.Equals(r);
            return l.CompareTo(r) == 0;

        }
        public static bool operator !=(Test l, Test r)
        {
            //return !l.Equals(r);
            return l.CompareTo(r) != 0;
        }
        public static bool operator &gt;(Test l, Test r)
        {
            return l.CompareTo(r) &gt; 0;
        }
        public static bool operator &lt;(Test l, Test r)
        {
            return l.CompareTo(r) &lt; 0;
        }
        public static bool operator &gt;=(Test l, Test r)
        {
            return !(l &lt; r);
        }
        public static bool operator &lt;=(Test l, Test r)
        {
            return !(l &gt; r);
        }
    }</Description>
  </Issue>
  <Issue>
    <IssueID>26532</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Name can be simplified" fixer is not helpful</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> C#
using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        var debug1 = typeof(System.Diagnostics.Debug); &lt;-- Simplify "name" across Document
        System.Diagnostics.DiagnosticListener debug2;
        System.Diagnostics.DebuggableAttribute debug3;
        System.Diagnostics.DebuggerHiddenAttribute debug4;
        var debug5 = typeof(System.Diagnostics.Debugger);
        System.Diagnostics.DebuggerNonUserCodeAttribute debug6;
        System.Diagnostics.DebuggerVisualizerAttribute debug7;
        System.Diagnostics.DelimitedListTraceListener debug8;
    }
}
 

**Expected Behavior**:
 C#
using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        var debug1 = typeof(Debug);
        DiagnosticListener debug2;
        DebuggableAttribute debug3;
        DebuggerHiddenAttribute debug4;
        var debug5 = typeof(Debugger);
        DebuggerNonUserCodeAttribute debug6;
        DebuggerVisualizerAttribute debug7;
        DelimitedListTraceListener debug8;
    }
}


**Actual Behavior**:
 C#
using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        var debug1 = typeof(Debug);
        System.Diagnostics.DiagnosticListener debug2;
        System.Diagnostics.DebuggableAttribute debug3;
        System.Diagnostics.DebuggerHiddenAttribute debug4;
        var debug5 = typeof(System.Diagnostics.Debugger);
        System.Diagnostics.DebuggerNonUserCodeAttribute debug6;
        System.Diagnostics.DebuggerVisualizerAttribute debug7;
        System.Diagnostics.DelimitedListTraceListener debug8;
    }
}
`</Code>
    <Description>Current behavior of the Fix All for "names can be simplified" is not useful at all, it's faster to find and replace. 

**Steps to Reproduce**:

1. 
``
</Description>
  </Issue>
  <Issue>
    <IssueID>26526</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Use local function" introduces CS1503 when passed to an overload that takes both a delegate &amp; value</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>12/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> C#
using System;
using Moq;

class Program
{
    static void Main(string[] args)
    {
        Func&lt;IProjectTree, string&gt; getPath = tree =&gt; tree.FilePath; &lt;!-- Use local function

        var mock = new Mock&lt;IProjectTreeProvider&gt;();
        mock.Setup(p =&gt; p.GetPath(It.IsAny&lt;IProjectTree&gt;()))
            .Returns(getPath);

    }
}

internal interface IProjectTreeProvider
{
    string GetPath(IProjectTree projectTree);
}

internal interface IProjectTree
{
    string FilePath { get; set; }
}

**Expected Behavior**:

 C#
    static void Main(string[] args)
    {
        string getPath(IProjectTree tree) =&gt; tree.FilePath;

        var mock = new Mock&lt;IProjectTreeProvider&gt;();
        mock.Setup(p =&gt; p.GetPath(It.IsAny&lt;IProjectTree&gt;()))
            .Returns((Func&lt;IProjectTree, string&gt;)getPath);

    }


**Actual Behavior**:

 C#
    static void Main(string[] args)
    {
        string getPath(IProjectTree tree) =&gt; tree.FilePath;

        var mock = new Mock&lt;IProjectTreeProvider&gt;();
        mock.Setup(p =&gt; p.GetPath(It.IsAny&lt;IProjectTree&gt;()))
            .Returns(getPath);

    }




Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1503	Argument 1: cannot convert from 'method group' to 'string'	ConsoleApp299	C:\Users\davkean\Source\Repos\ConsoleApp299\ConsoleApp299\Program.cs	12	Active

`</Code>
    <Description>
**Steps to Reproduce**:

Couldn't break it down any further without Moq package installed:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26525</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature request: add breakpoints from Find All References Window</Title>
    <CreatedDate>01/05/2018</CreatedDate>
    <ClosedDate>02/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>26525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a scenario that I do a lot, and if it is common among other developers, it would be great to have it. I often find myself trying to:
* find why a certain error is reported
* which code path is using some type
* which code path is assigning a variable, etc

I currently do it by finding all references, manually click each reference I want, go to the line it is used at, then placing a break point, then I run the program or the test that might exercise these code paths to find which break point is being hit. It would be great if I've in the context menu of Find all references the option to place a break point at these lines (where applicable). It would save a lot of manual time:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26264</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Make field readonly" introduces error with deconstruction assignment</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    int i;
    int j;

    void M()
    {
        (i, j) = (1, 2);
    }
}
`</Code>
    <Description>``
Add readonly modifier should *not* be offered here.</Description>
  </Issue>
  <Issue>
    <IssueID>26262</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Make field readonly" introduces error on assignment</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>30/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    int i;

    void M()
    {
        (i) = 1;
    }
}
`</Code>
    <Description>``
Add readonly modifier is offer on 'i' and invoking it introduces a compiler error on the assignment.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>26262</IssueID>
        <PullRequestID>26303</PullRequestID>
        <Title>Fix issue where a write wasn't detected in make-readonly #2</Title>
        <Description>Followup to 

Fixes </Description>
        <CreatedDate>21/04/2018</CreatedDate>
        <ClosedDate>24/04/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>26262</IssueID>
            <PullRequestID>26303</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>26262</IssueID>
            <PullRequestID>26303</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>26258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Internal error in compiler C #</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS Community 2017 15.6.6
.Net Framework 4.0

I have ASP.NET project and dll project in solution. When I degugging (show watch) in asp.net project, is all ok. When I degugging in dll project, watch window not show variable value, but  (CZ lang) "Vnitřní chyba v kompilátoru C#"  "Internal error in compiler C#".

When I set option "Použít zastaralé vyhodnocovače výrazů C# a VB"   "Use obsolete C # and VB expressions" in settings, I can show variable value in dll project.

This behavior I have on two notebooks and last and previous VS version.
</Description>
  </Issue>
  <Issue>
    <IssueID>26256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Use auto property" code fix loses initialized value</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Version 15.7.0 Preview 4.0 [27612.3001.d15.7stg]

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26249</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Logic on deploying VSIX is suspect</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider this property group in Settings.props

``

This is conditioning the deployment of our VSIX on Dev15RC and Dev14 semantics. Neither of those are supported by our build environment today. This is likely the cause of @davkean deployment issues. This should be cleaned up for the VS environments we actually support. 
</Description>
  </Issue>
  <Issue>
    <IssueID>26247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flakey diagnostics tests</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Test Result (2 failures / +2)

Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests.TestCodeBlockAnalyzersForExpressionBody
    Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests.TestCodeBlockAction_OnlyStatelessAction


Tagging @dotnet/roslyn-infrastructure since this affects test flakeyness.  

Tagging @mavasani @heejaechang for visibility as this seems to be flakeyness with diagnostic analyzers.

Tagging @sharwell as the flakeyness has something to do with sync-contexts:


Stacktrace

MESSAGE:
System.Exception : Unfulfilled SynchronizationContext detected
+++++++++++++++++++
STACK TRACE:
en Roslyn.Test.Utilities.WpfTestSharedData.&lt;&gt;c.&lt;MonitorActiveAsyncTestSyncContext&gt;b__8_3(Object _) en Xunit.Sdk.AsyncTestSyncContext.&lt;&gt;c__DisplayClass7_0.&lt;Post&gt;b__1(Object _)
`</Code>
    <Description>Seen here:


``</Description>
  </Issue>
  <Issue>
    <IssueID>26238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler (VBCSCompiler.exe, *and* csc.exe) crashes when building</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 15.6.6
C# Tools   `2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80`

**Steps to Reproduce**:

1. Run MSBuild.exe with a custom project that builds a csproj.

**Expected Behavior**: successful compilation

**Actual Behavior**: compiler crashes with System.TypeLoadException.
``

I updated to VS 2017 15.6.6 this morning, and now my projects which previously built without issue are crashing the compiler with the above exception. What is odd to me, is that I didn't think I was installing a *beta* build, but the version listed for the C# tools says that it is "beta3". Is this expected? Both VBSCCompiler.exe and csc.exe present crash messages, also not sure if this is strange, or normal behavior.

</Description>
  </Issue>
  <Issue>
    <IssueID>26232</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler intermittently keeping strong name file locked during compilation causing build failures for proceeding projects</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>26232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
  Toolset 15.0 -- vbc.exe and csc.exe
**Steps to Reproduce**:
No specific reproduction steps have been discovered.  Failure appears intermittently.
**Expected Behavior**:
Project compiles successfully
**Actual Behavior**:
Project fails to compile reporting vbc : error BC36980: Error extracting public key from file '{filename}.snk': The process cannot access the file 'C:\Users\{userfolder}\AppData\Local\Temp\8465c7dc64a54c1995b784c2acab3192' because it is being used by another process. 

OR when csc.exe

Project fails reporting CSC : error CS7027: Error signing output with public key from file '{filename}.snk' -- The process cannot access the file because it is being used by another process. (Exception from HRESULT: 0x80070020)

---

This seems to be related to the original report with #2840 which appears to have drifted to a different discussion after original report.

We have attempted to update the UseSharedCompilation parameter for each project to false as a workaround.  This seems to be successful though we have one report of it not solving the issue.

Generally wailing, gnashing of teeth and keyboard smashing are utilized with a varying degree of success until the project compiles.</Description>
  </Issue>
  <Issue>
    <IssueID>26222</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to package analyzers?</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels />
    <Description>Hello, I would like to build Roslyn analyzers to be distributed with a C# library I work on. There seem to be two ways to do that:
1. Package the analyzers within the NuGet package for the library, at analyzers\dotnet\cs\ for example.
2. Package the analyzers in their own NuGet package (at the same path) and include that package as a package reference in the library.

Most examples I’ve seen (Roslyn included) seem to use option 2, but I see a few disadvantages (some minor) with this approach over option 1:
- Updating the analyzers takes more steps: with a separate package, you’d need to re-publish the new analyzer package, then update the reference to it in the target library, and then re-publish that library's package. By packaging them together, you only need to re-publish the one package.
- For projects including the NuGet package, Visual Studio shows the analyzers twice in the Dependencies node: once under Analyzers and a 2nd time under NuGet. When they are packaged together the analyzers are only under the Analyzers node.
- Users wanting to opt out of the analyzers need to include an extra reference (although this doesn’t seem to work currently anyway due to 
``

The only downside I can see with packaging everything together is if the analyzers and main library include assets in the same areas of the package, it would prevent someone from being able to selectively exclude just the assets from the analyzers. But if that’s isn’t the case, is there any other disadvantage I’m not seeing? If I picked option 1, is there anything that would prevent or make difficult a switch to option 2 in the future (splitting up the packages)?

I looked to the docs for guidance [here]( but they weren’t that clear. They say “Analyzers themselves are typically _packaged and distributed **as part of** the NuGet packages_ that implement the API or library in question”, which would seem like option 1 is being recommended, but then it says “For a good example, see the System.Runtime.Analyzers package…”, which is a standalone package of analyzers - option 2. I think the docs should have some better guidance here.

Thank you.</Description>
  </Issue>
  <Issue>
    <IssueID>26220</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Mutating readonly struct using embedded struct and pointers</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public unsafe struct FixedBytes
{
    // error CS0106: The modifier 'readonly' is not valid for this item
    private readonly fixed byte _bytes[8];
}


Which is fine, because the compiler can not prove that there would be potential mutations of the `_bytes` field in 'fixed' contexts.

But instead of using 'fixed' declaration, we can create a custom struct with the required size:

csharp
public unsafe readonly struct FixedBytes
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    private readonly struct FixedBuffer
    {
        public readonly byte FixedElementField;
    }

    private readonly FixedBuffer _bytes;
}

This is actually great (even desirable for my current project), but it means that the two very similar features are a bit inconsistent and the second version is actually allows us to create a mutable readonly struct:

csharp
public unsafe readonly struct FixedBytes
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    private readonly struct FixedBuffer
    {
        public readonly byte FixedElementField;
    }

    private readonly FixedBuffer _bytes;

    public byte this[int index]
    {
        get
        {
            fixed (byte* p = &amp;_bytes.FixedElementField)
            {
                return p[index];
            }
        }
        set
        {
            fixed (byte* p = &amp;_bytes.FixedElementField)
            {
                p[index] = value;
            }
        }
    }
}


And now you can see that the instance is mutable even though the struct declared as readonly:

csharp
var ro = new FixedBytes();
ro[0] = 42;
Console.WriteLine(ro[0]); // prints 42
`</Code>
    <Description>**Version Used**:  master

The C# compiler legitimately complains about the following code:
``

To be clear, I don't mind this hole. As I've mentioned above, I'm really glad that it exists (I'm going to use the version without the setter, so I'm not going to mutate readonly struct anyway).

**But I'm not quite sure is it a bug or the behavior for the second case is an expected one.** Can I expect this behavior to be the same in the future versions of the C# compiler?
</Description>
  </Issue>
  <Issue>
    <IssueID>26219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make Readonly doesn't have a description for the Error List</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

It shows Description as blank for IDE0044.</Description>
  </Issue>
  <Issue>
    <IssueID>26217</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Assertion failed in AnalyzerDriver.GetOperationsToAnalyze</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
    class C
    {
        public C(int x)
        {
        }
    }

	class Program : C
	{
        int a;

        Program() : base(1) =&gt; this.a = 1;

        static void Main(string[] args)
        {
            new Program();
        }
    }




---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Expected operation with kind 'Invocation' to be the root operation with null 'Parent', but instead it has a non-null Parent with kind 'ExpressionStatement'



   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.GetOperationsToAnalyze(ImmutableArray`1 operationBlocks)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean isGeneratedCodeSymbol, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEvent(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessCompilationEventsCoreAsync&gt;d__70.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessCompilationEventsAsync&gt;d__69.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ExecutePrimaryAnalysisTaskAsync&gt;d__46.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean usingPrePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;AttachQueueAndProcessAllEventsAsync&gt;d__44.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(AsyncQueue`1 eventQueue, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(AnalyzerDriver driver, AsyncQueue`1 eventQueue, AnalysisScope analysisScope, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass57_2.&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass57_2.&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1()

   at System.Threading.Tasks.Task`1.InnerInvoke()

   at System.Threading.Tasks.Task.Execute()

   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)

   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)

   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()

   at System.Threading.ThreadPoolWorkQueue.Dispatch()

   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()


---------------------------
Abort   Retry   Ignore   
---------------------------

`</Code>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

1. build Debug configuration of Roslyn.sln
2. `devenv /rootsuffix RoslynDev`
3. Create a console app with following code:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>26213</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Make readonly" doesn't appear for some simple cases</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static class Function1
    {

        private static HttpClient client = new HttpClient();

        private static IFaceServiceClient faceServiceClient = new FaceServiceClient("key", "https://westus.api.cognitive.microsoft.com/face/v1.0");

        public static IEnumerable&lt;FaceAttributeType&gt; faceAttributes = new FaceAttributeType[] { FaceAttributeType.Gender, FaceAttributeType.Age, FaceAttributeType.Smile, FaceAttributeType.Emotion, FaceAttributeType.Glasses, FaceAttributeType.Hair };

        [FunctionName("Function1")]
        public static async Task Run([BlobTrigger("samples-workitems/{name}", Connection = "")]Stream myBlob, string name, TraceWriter log)
        {
            try
            {
                Face[] faces = await faceServiceClient.DetectAsync(myBlob, returnFaceId: true, returnFaceLandmarks: false, returnFaceAttributes: faceAttributes);

                foreach (Face face in faces)
                {
                    var emotionScores = face.FaceAttributes.Emotion.Happiness;
                }
            }
            catch (FaceAPIException f)
            {
                log.Info($"{f.ErrorMessage}, {f.ErrorCode}");
            }
            catch (Exception e)
            {
                log.Info($"{e.Message}");
            }
        }
    }
`</Code>
    <Description>'Make readonly’ doesn't seem to work for a really simple case:

``

- “Make readonly” appears for the HttpClient
- “Make readonly” **does not appear** for IFaceServiceClient
</Description>
  </Issue>
  <Issue>
    <IssueID>26209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove source-build patch "Add VBCSCompiler to SourceBuild.sln"</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>patch
---
 SourceBuild.sln | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/SourceBuild.sln b/SourceBuild.sln
index f7a5c2d41a..5f914cce20 100644
--- a/SourceBuild.sln
+++ b/SourceBuild.sln
@@ -24,6 +24,10 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "vbc", "src\Compilers\Visual
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuildTask", "src\Compilers\Core\MSBuildTask\MSBuildTask.csproj", "{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}"
 EndProject
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "VBCSCompiler", "src\Compilers\Server\VBCSCompiler\VBCSCompiler.csproj", "{649CE05A-529C-40D7-A501-CA9BCFEE40DC}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Server", "Server", "{B57E7F86-EB16-4F60-A47C-F9D170F54400}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -106,6 +110,18 @@ Global
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x64.Build.0 = Release|x64
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x86.ActiveCfg = Release|x86
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x86.Build.0 = Release|x86
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x64.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x86.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|Any CPU.Build.0 = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x64.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x64.Build.0 = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x86.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(NestedProjects) = preSolution
 		{DDFAE591-7414-4CC9-AD99-427C2D153893} = {6D173F59-562E-4BAA-8D98-9A8F4901D99A}
@@ -118,5 +134,7 @@ Global
 		{E3CD2895-76A8-4D11-A316-EA67CB5EA42C} = {9EECE6A3-C098-44D0-8ACD-0D8691EC8C3F}
 		{8CE3A581-2969-4864-A803-013E9D977C3A} = {11F63FDD-6EB7-4993-8769-8C8DC5DA29C3}
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3} = {5DC491BA-E836-47C1-A4AA-3C770742718B}
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC} = {B57E7F86-EB16-4F60-A47C-F9D170F54400}
+		{B57E7F86-EB16-4F60-A47C-F9D170F54400} = {DDFAE591-7414-4CC9-AD99-427C2D153893}
 	EndGlobalSection
 EndGlobal
-- 
2.16.1.windows.4
`</Code>
    <Description>Source-Build needs `Microsoft.NETCore.Compilers`, which indirectly requires `VBCSCompiler` to be built. Adding `VBCSCompiler` to SourceBuild.sln builds it during source-build. (See more details in 

``

/cc @jaredpar @333fred </Description>
  </Issue>
  <Issue>
    <IssueID>26205</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpToBasic test has recurring failure</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>20/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Skipping because of recurring failure:
master/job/windows_release_vs-integration/53/testReport/junit/Roslyn.VisualStudio.IntegrationTests.CSharp/CSharpGenerateTypeDialog/CSharpToBasic/</Description>
  </Issue>
  <Issue>
    <IssueID>26204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpCodeActions/GenerateMethodInClosedFile Test Recurring failures</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>22/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Skipping Test because of recurring failures. The test has failed regularly on master/job/windows_release_vs-integration and master-vs-deps/job/window_release_vs-integration over the last week.
</Description>
  </Issue>
  <Issue>
    <IssueID>26199</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Review design for binding `string` with nullability off</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we bind `string` as `string!` when the nullability feature is on, but as `string~` (oblivious) when the feature is off (LangVersion=7 for example).

The scenario driving this is a C# 7.0 compilation being referenced in a C# 8.0 compilation. We want symbols from the compilation reference to be re-used, but we want the C# 8.0 compilation to treat them as oblivious.

A few options we discussed so far:
1. bind symbols differently depending on features being on/off (current design)
2. wrap symbols from compilation references in some cases, rather than re-use them directly (so a `string!` from a C# 7.0 compilation reference appears as oblivious to the C# 8.0 compilation)
3. have the caller be smart (you're given a source symbol, you should check if it comes from a compilation with nullability on/off). (this seems error-prone)</Description>
  </Issue>
  <Issue>
    <IssueID>26198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Review and finalize public APIs</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Note: we should remember to update the few places (marked with this issue's URL) where our code should make use of such APIs once they become available.

- `GetTypeInfo` should work on suppressed expression (relates to 

- semantic model should provide nullability information in LINQ queries (range variables)

- `ReferenceTypeConstraintIsNullable`
- `HasNotnullConstraint`

Should we expose through `ITypeParameterSymbol`?

- IncludeNonNullableTypeModifier

For testing, we need an option to show `!` (that's `IncludeNonNullableTypeModifier`). But we also need an option to control whether to show `string?` or `string`.
The IDE will definitely want to show `string?` in some cases (if not all). But if we just make that the default, then we'll be surprising existing clients of our APIs.

Two questions:
- should this option be public rather than internal?
- should this option be opt-in rather than opt-out?

``

Relates to 

Note: this option was renamed in the PR, and another option was added for using `ValueTuple` instead of `(...)` tuple syntax. We should also consider making the latter public.</Description>
  </Issue>
  <Issue>
    <IssueID>26196</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C#7.2 produces not verifiable il code when direct accessing field of readonly struct field</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017
LanguageVersion: C# 7.2

**Steps to Reproduce**:

1. Compile program in DEBUG with 'x1' or 'x2' uncommented:
``


**Additional information**
When using LanguageVersion: C# 7.1 both cases work
so I think this is a compiler bug and not a problem of PE verify.</Description>
  </Issue>
  <Issue>
    <IssueID>26195</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio crashes while analyzing provided code</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017, Version 15.6.6

**Steps to Reproduce**:
Create new solution and copy-paste sample code there:

``

**Expected Behavior**:
No crasg

**Actual Behavior**:
Visual studio crashes
</Description>
  </Issue>
  <Issue>
    <IssueID>26180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Why does IOperation not expose SematicModel?</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Seems like a reasonable thing to do. @mavasani 
Maybe it should be exposed from both `OperationAnalysisContext` and `IOperation`</Description>
  </Issue>
  <Issue>
    <IssueID>26177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Remove unused variable" should appear below "add using"</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>16/04/2018</ClosedDate>
    <IssueLabels />
    <Description>Getting "remove variable" as the first option is just not great:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>brettfo</FixedById>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio crashed in IncrementalAnalyzerProcessor</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7 Preview 3

**Steps to Reproduce**:

1. Opening any project/solution crashes VS

Stack trace:
&gt; Application: devenv.exe
&gt; Framework Version: v4.0.30319
&gt; Description: The application requested process termination through System.Environment.FailFast(string message).
&gt; Message: System.ObjectDisposedException: Cannot access a disposed object.
&gt; Object name: 'StreamJsonRpc.JsonRpc'.
&gt;    at Microsoft.Verify.NotDisposed(IDisposableObservable disposedValue, String message)
&gt;    at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__67`1.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.&lt;CreateWorkerAsync&gt;d__11.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.&lt;CreateAsync&gt;d__10.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientFactory.&lt;CreateAsync&gt;d__0.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.&lt;EnableAsync&gt;d__18.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;SynchronizePrimaryWorkspaceAsync&gt;d__23.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.NormalPriorityProcessor.&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt; Stack:
&gt;    at System.Environment.FailFast(System.String, System.Exception)
&gt;    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
&gt;    at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
&gt;    at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37, Microsoft.CodeAnalysis.Features, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ResetStatesAsync&gt;d__37 ByRef)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ResetStatesAsync()
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17, Microsoft.CodeAnalysis.Features, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ExecuteAsync&gt;d__17 ByRef)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ExecuteAsync()
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;ProcessAsync&gt;d__12.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
&gt;    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
&gt;    at System.Threading.Tasks.Task.FinishContinuations()
&gt;    at System.Threading.Tasks.Task.FinishStageThree()
&gt;    at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;WaitForIdleAsync&gt;d__11.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
&gt;    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
&gt;    at System.Threading.Tasks.Task.FinishContinuations()
&gt;    at System.Threading.Tasks.Task.FinishStageThree()
&gt;    at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Threading.Tasks.Task+DelayPromise.Complete()
&gt;    at System.Threading.Tasks.Task+&lt;&gt;c.&lt;Delay&gt;b__274_1(System.Object)
&gt;    at System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.TimerQueueTimer.CallCallback()
&gt;    at System.Threading.TimerQueueTimer.Fire()
&gt;    at System.Threading.TimerQueue.FireNextTimers()
&gt;    at System.Threading.TimerQueue.AppDomainTimerCallback()
&gt; 


I can share the repro machine/dump if required.</Description>
  </Issue>
  <Issue>
    <IssueID>26169</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to use Roslyn v2.6.0 built analyzers from Visual Studio 2017 v15.6.6 project in a .Net 4.7.1 installed machine</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis - v2.6.0
Visual Studio 2017 v15.6.6

**Steps to Reproduce**:

1. We have an analyzer assembly built using new CSPROJ structure and with netstandard2.0 + Roslyn v2.6.0
2. I am using this analyzer assembly in a .Net Framework 4.7 class library project an analyzer in it and that analyzer DLL in another project.
3. I am getting a warning and analyzer is loaded in VS2017
Warning	IDE1003	Analyzer assembly 'XXX.Analyzer.dll' depends on 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' but it was not found. Analyzers may not run correctly unless the missing assembly is added as an analyzer reference as well.

Another error found:
Warning	CS8034	Unable to load Analyzer assembly XXX.Analyzer.dll: Could not load file or assembly 'file:///C:\Users\XXX\AppData\Local\Temp\VS\AnalyzerAssemblyLoader\19af1c9f57f14308b952d8ce23aacc92\14\XXX&gt;Analyzerdll' or one of its dependencies. An attempt was made to load a program with an incorrect format.

Included analyzer assembly and dependencies:
![image](

In the VS2017 UI the analyzer assembly is shown under Analyzers but unable to expand to see analyzers included in the package.
![image](

Expected Behavior:
With .Net Framework 4.7.1 Installed which is having netstandard2.0 implemented we should not get these errors. 

Actual Behavior:
Shows above mentioned errors and it shows unable to create analyzer instance.

The same analyzer when I used older csproj format and Roslyn version 1.6 it worked fine.Any hint on why analyzer is not picking netstandard2.0 dependency from Visual Studio 2017.

Thanks
Basanth</Description>
  </Issue>
  <Issue>
    <IssueID>26168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0019 'use pattern matching' on IDictionary fails</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>var htmlAttributesDict = htmlAttributesObject as IDictionary&amp;lt;string, object&amp;gt;;                      RouteValueDictionary htmlAttributes = (htmlAttributesDict != null)            ? new RouteValueDictionary(htmlAttributesDict)            : HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributesObject);Reports:IDE0019	Use pattern matching	eCtdFtpAutomation.Web	C:\Users\mreri\source\repos\eCTDFTPAutomation\eCtdFtpAutomation.Web\Helpers\SiteHelpers.cs	143	ActiveThe corresponding fix resulting in the following uncompilable code:            RouteValueDictionary htmlAttributes = (htmlAttributesObject isIDictionary&amp;lt;string, object&amp;gt;htmlAttributesDict)            ? new RouteValueDictionary(htmlAttributesDict)            : HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributesObject);_This issue has been moved from VSTS ticketId: 597233__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>26163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Question: Can I use roslyn with .NET Core?</Title>
    <CreatedDate>15/04/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm trying to use roslyn with .NET Core on Mac and I'm not having much luck because most of the resources are for .NET Framework on Windows.

I've installed `Microsoft.CodeAnalysis.CSharp`, `Microsoft.CodeAnalysis.CSharp.Scripting`, and `Microsoft.CodeAnalysis.CSharp.Workspaces` but VSCode says that I am missing assembly references for `Microsoft.CodeAnalysis.CSharp.Scripting`.

Are there any resources or documentation for using roslyn with .NET Core?</Description>
  </Issue>
  <Issue>
    <IssueID>26151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reuse Tuple extraction code from Deconstructions in Declarations in CFG</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>26147</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Which branch can be compiled with Visual Studio 2015?</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>13/04/2018</ClosedDate>
    <IssueLabels />
    <Description>I need to compile roslyn in VS 2015, but I'm getting several compilation errors.

**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>26145</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException when displaying tooltip for the suggestion mode item</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6.5

**Steps to Reproduce**:

1. Ctrl+Alt+Space to activate suggestion mode
1. Type in the editor
1. Use the arrow up to navigate to the suggestion item

**Expected Behavior**:

Displaying the tooltip does not cause an error

**Actual Behavior**:

There is an error when creating tooltip for the suggestion item

``

Note that this will be fixed through the new completion API in #25770 via @dpoeschl </Description>
  </Issue>
  <Issue>
    <IssueID>26141</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Generate GetHashCode' generates a call to ValueType.GetHashCode</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>13/04/2018</ClosedDate>
    <IssueLabels />
    <Code>cs
struct Foo
{
    public Type FixtureType { get; }
    public MethodInfo Method { get; }

    public override int GetHashCode()
    {
        var hashCode = 662238274;
        hashCode = hashCode * -1521134295 + base.GetHashCode();
        hashCode = hashCode * -1521134295 + EqualityComparer&lt;Type&gt;.Default.GetHashCode(FixtureType);
        hashCode = hashCode * -1521134295 + EqualityComparer&lt;MethodInfo&gt;.Default.GetHashCode(Method);
        return hashCode;
    }
}
`</Code>
    <Description>VS 15.6.6.

If you use Roslyn's 'Generate GetHashCode...' suggestion on a struct, it asks you which properties to include, and then it generates code combining those with an additional hash, `base.GetHashCode()`:

``

Just like when inheriting from `System.Object`, inheritors from `System.ValueType` are always going to want to replace the base has calculation not combine it. Not only can this easily result in incorrect hashes which contradict the `Equals` implementation, many times the entire purpose of overriding `ValueType.GetHashCode` is to provide a better-performing implementation.</Description>
  </Issue>
  <Issue>
    <IssueID>26139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SemanticModel.GetSymbolInfo not working on property pattern names</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a bug in the `features/recursive-patterns` branch.

/cc @CyrusNajmabadi </Description>
  </Issue>
  <Issue>
    <IssueID>26264</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Make field readonly" introduces error with deconstruction assignment</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    int i;
    int j;

    void M()
    {
        (i, j) = (1, 2);
    }
}
`</Code>
    <Description>``
Add readonly modifier should *not* be offered here.</Description>
  </Issue>
  <Issue>
    <IssueID>26262</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Make field readonly" introduces error on assignment</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>30/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    int i;

    void M()
    {
        (i) = 1;
    }
}
`</Code>
    <Description>``
Add readonly modifier is offer on 'i' and invoking it introduces a compiler error on the assignment.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>26262</IssueID>
        <PullRequestID>26303</PullRequestID>
        <Title>Fix issue where a write wasn't detected in make-readonly #2</Title>
        <Description>Followup to 

Fixes </Description>
        <CreatedDate>21/04/2018</CreatedDate>
        <ClosedDate>24/04/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>26262</IssueID>
            <PullRequestID>26303</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>26262</IssueID>
            <PullRequestID>26303</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>26258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Internal error in compiler C #</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS Community 2017 15.6.6
.Net Framework 4.0

I have ASP.NET project and dll project in solution. When I degugging (show watch) in asp.net project, is all ok. When I degugging in dll project, watch window not show variable value, but  (CZ lang) "Vnitřní chyba v kompilátoru C#"  "Internal error in compiler C#".

When I set option "Použít zastaralé vyhodnocovače výrazů C# a VB"   "Use obsolete C # and VB expressions" in settings, I can show variable value in dll project.

This behavior I have on two notebooks and last and previous VS version.
</Description>
  </Issue>
  <Issue>
    <IssueID>26256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Use auto property" code fix loses initialized value</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Version 15.7.0 Preview 4.0 [27612.3001.d15.7stg]

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>26249</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Logic on deploying VSIX is suspect</Title>
    <CreatedDate>19/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider this property group in Settings.props

``

This is conditioning the deployment of our VSIX on Dev15RC and Dev14 semantics. Neither of those are supported by our build environment today. This is likely the cause of @davkean deployment issues. This should be cleaned up for the VS environments we actually support. 
</Description>
  </Issue>
  <Issue>
    <IssueID>26247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flakey diagnostics tests</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Test Result (2 failures / +2)

Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests.TestCodeBlockAnalyzersForExpressionBody
    Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.UnitTests.DiagnosticServiceTests.TestCodeBlockAction_OnlyStatelessAction


Tagging @dotnet/roslyn-infrastructure since this affects test flakeyness.  

Tagging @mavasani @heejaechang for visibility as this seems to be flakeyness with diagnostic analyzers.

Tagging @sharwell as the flakeyness has something to do with sync-contexts:


Stacktrace

MESSAGE:
System.Exception : Unfulfilled SynchronizationContext detected
+++++++++++++++++++
STACK TRACE:
en Roslyn.Test.Utilities.WpfTestSharedData.&lt;&gt;c.&lt;MonitorActiveAsyncTestSyncContext&gt;b__8_3(Object _) en Xunit.Sdk.AsyncTestSyncContext.&lt;&gt;c__DisplayClass7_0.&lt;Post&gt;b__1(Object _)
`</Code>
    <Description>Seen here:


``</Description>
  </Issue>
  <Issue>
    <IssueID>26238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler (VBCSCompiler.exe, *and* csc.exe) crashes when building</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 15.6.6
C# Tools   `2.7.0-beta3-62715-05. Commit Hash: db02128e6e3c4bdfc93e6ec425ac9162b4d4fe80`

**Steps to Reproduce**:

1. Run MSBuild.exe with a custom project that builds a csproj.

**Expected Behavior**: successful compilation

**Actual Behavior**: compiler crashes with System.TypeLoadException.
``

I updated to VS 2017 15.6.6 this morning, and now my projects which previously built without issue are crashing the compiler with the above exception. What is odd to me, is that I didn't think I was installing a *beta* build, but the version listed for the C# tools says that it is "beta3". Is this expected? Both VBSCCompiler.exe and csc.exe present crash messages, also not sure if this is strange, or normal behavior.

</Description>
  </Issue>
  <Issue>
    <IssueID>26232</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler intermittently keeping strong name file locked during compilation causing build failures for proceeding projects</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>26232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
  Toolset 15.0 -- vbc.exe and csc.exe
**Steps to Reproduce**:
No specific reproduction steps have been discovered.  Failure appears intermittently.
**Expected Behavior**:
Project compiles successfully
**Actual Behavior**:
Project fails to compile reporting vbc : error BC36980: Error extracting public key from file '{filename}.snk': The process cannot access the file 'C:\Users\{userfolder}\AppData\Local\Temp\8465c7dc64a54c1995b784c2acab3192' because it is being used by another process. 

OR when csc.exe

Project fails reporting CSC : error CS7027: Error signing output with public key from file '{filename}.snk' -- The process cannot access the file because it is being used by another process. (Exception from HRESULT: 0x80070020)

---

This seems to be related to the original report with #2840 which appears to have drifted to a different discussion after original report.

We have attempted to update the UseSharedCompilation parameter for each project to false as a workaround.  This seems to be successful though we have one report of it not solving the issue.

Generally wailing, gnashing of teeth and keyboard smashing are utilized with a varying degree of success until the project compiles.</Description>
  </Issue>
  <Issue>
    <IssueID>26222</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to package analyzers?</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels />
    <Description>Hello, I would like to build Roslyn analyzers to be distributed with a C# library I work on. There seem to be two ways to do that:
1. Package the analyzers within the NuGet package for the library, at analyzers\dotnet\cs\ for example.
2. Package the analyzers in their own NuGet package (at the same path) and include that package as a package reference in the library.

Most examples I’ve seen (Roslyn included) seem to use option 2, but I see a few disadvantages (some minor) with this approach over option 1:
- Updating the analyzers takes more steps: with a separate package, you’d need to re-publish the new analyzer package, then update the reference to it in the target library, and then re-publish that library's package. By packaging them together, you only need to re-publish the one package.
- For projects including the NuGet package, Visual Studio shows the analyzers twice in the Dependencies node: once under Analyzers and a 2nd time under NuGet. When they are packaged together the analyzers are only under the Analyzers node.
- Users wanting to opt out of the analyzers need to include an extra reference (although this doesn’t seem to work currently anyway due to 
``

The only downside I can see with packaging everything together is if the analyzers and main library include assets in the same areas of the package, it would prevent someone from being able to selectively exclude just the assets from the analyzers. But if that’s isn’t the case, is there any other disadvantage I’m not seeing? If I picked option 1, is there anything that would prevent or make difficult a switch to option 2 in the future (splitting up the packages)?

I looked to the docs for guidance [here]( but they weren’t that clear. They say “Analyzers themselves are typically _packaged and distributed **as part of** the NuGet packages_ that implement the API or library in question”, which would seem like option 1 is being recommended, but then it says “For a good example, see the System.Runtime.Analyzers package…”, which is a standalone package of analyzers - option 2. I think the docs should have some better guidance here.

Thank you.</Description>
  </Issue>
  <Issue>
    <IssueID>26220</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Mutating readonly struct using embedded struct and pointers</Title>
    <CreatedDate>18/04/2018</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>26220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public unsafe struct FixedBytes
{
    // error CS0106: The modifier 'readonly' is not valid for this item
    private readonly fixed byte _bytes[8];
}


Which is fine, because the compiler can not prove that there would be potential mutations of the `_bytes` field in 'fixed' contexts.

But instead of using 'fixed' declaration, we can create a custom struct with the required size:

csharp
public unsafe readonly struct FixedBytes
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    private readonly struct FixedBuffer
    {
        public readonly byte FixedElementField;
    }

    private readonly FixedBuffer _bytes;
}

This is actually great (even desirable for my current project), but it means that the two very similar features are a bit inconsistent and the second version is actually allows us to create a mutable readonly struct:

csharp
public unsafe readonly struct FixedBytes
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    private readonly struct FixedBuffer
    {
        public readonly byte FixedElementField;
    }

    private readonly FixedBuffer _bytes;

    public byte this[int index]
    {
        get
        {
            fixed (byte* p = &amp;_bytes.FixedElementField)
            {
                return p[index];
            }
        }
        set
        {
            fixed (byte* p = &amp;_bytes.FixedElementField)
            {
                p[index] = value;
            }
        }
    }
}


And now you can see that the instance is mutable even though the struct declared as readonly:

csharp
var ro = new FixedBytes();
ro[0] = 42;
Console.WriteLine(ro[0]); // prints 42
`</Code>
    <Description>**Version Used**:  master

The C# compiler legitimately complains about the following code:
``

To be clear, I don't mind this hole. As I've mentioned above, I'm really glad that it exists (I'm going to use the version without the setter, so I'm not going to mutate readonly struct anyway).

**But I'm not quite sure is it a bug or the behavior for the second case is an expected one.** Can I expect this behavior to be the same in the future versions of the C# compiler?
</Description>
  </Issue>
  <Issue>
    <IssueID>26219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make Readonly doesn't have a description for the Error List</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>26219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

It shows Description as blank for IDE0044.</Description>
  </Issue>
  <Issue>
    <IssueID>26217</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Assertion failed in AnalyzerDriver.GetOperationsToAnalyze</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
    class C
    {
        public C(int x)
        {
        }
    }

	class Program : C
	{
        int a;

        Program() : base(1) =&gt; this.a = 1;

        static void Main(string[] args)
        {
            new Program();
        }
    }




---------------------------
Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue
---------------------------
Expected operation with kind 'Invocation' to be the root operation with null 'Parent', but instead it has a non-null Parent with kind 'ExpressionStatement'



   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.GetOperationsToAnalyze(ImmutableArray`1 operationBlocks)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean isGeneratedCodeSymbol, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEvent(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessCompilationEventsCoreAsync&gt;d__70.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessCompilationEventsAsync&gt;d__69.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ExecutePrimaryAnalysisTaskAsync&gt;d__46.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean usingPrePopulatedEventQueue, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;AttachQueueAndProcessAllEventsAsync&gt;d__44.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(AsyncQueue`1 eventQueue, AnalysisScope analysisScope, AnalysisState analysisStateOpt, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(AnalyzerDriver driver, AsyncQueue`1 eventQueue, AnalysisScope analysisScope, CancellationToken cancellationToken)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass57_2.&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d.MoveNext()

   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine)

   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;&gt;c__DisplayClass57_2.&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1()

   at System.Threading.Tasks.Task`1.InnerInvoke()

   at System.Threading.Tasks.Task.Execute()

   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)

   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)

   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task&amp; currentTaskSlot)

   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)

   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()

   at System.Threading.ThreadPoolWorkQueue.Dispatch()

   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()


---------------------------
Abort   Retry   Ignore   
---------------------------

`</Code>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

1. build Debug configuration of Roslyn.sln
2. `devenv /rootsuffix RoslynDev`
3. Create a console app with following code:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>26213</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Make readonly" doesn't appear for some simple cases</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>08/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static class Function1
    {

        private static HttpClient client = new HttpClient();

        private static IFaceServiceClient faceServiceClient = new FaceServiceClient("key", "https://westus.api.cognitive.microsoft.com/face/v1.0");

        public static IEnumerable&lt;FaceAttributeType&gt; faceAttributes = new FaceAttributeType[] { FaceAttributeType.Gender, FaceAttributeType.Age, FaceAttributeType.Smile, FaceAttributeType.Emotion, FaceAttributeType.Glasses, FaceAttributeType.Hair };

        [FunctionName("Function1")]
        public static async Task Run([BlobTrigger("samples-workitems/{name}", Connection = "")]Stream myBlob, string name, TraceWriter log)
        {
            try
            {
                Face[] faces = await faceServiceClient.DetectAsync(myBlob, returnFaceId: true, returnFaceLandmarks: false, returnFaceAttributes: faceAttributes);

                foreach (Face face in faces)
                {
                    var emotionScores = face.FaceAttributes.Emotion.Happiness;
                }
            }
            catch (FaceAPIException f)
            {
                log.Info($"{f.ErrorMessage}, {f.ErrorCode}");
            }
            catch (Exception e)
            {
                log.Info($"{e.Message}");
            }
        }
    }
`</Code>
    <Description>'Make readonly’ doesn't seem to work for a really simple case:

``

- “Make readonly” appears for the HttpClient
- “Make readonly” **does not appear** for IFaceServiceClient
</Description>
  </Issue>
  <Issue>
    <IssueID>26209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove source-build patch "Add VBCSCompiler to SourceBuild.sln"</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>patch
---
 SourceBuild.sln | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/SourceBuild.sln b/SourceBuild.sln
index f7a5c2d41a..5f914cce20 100644
--- a/SourceBuild.sln
+++ b/SourceBuild.sln
@@ -24,6 +24,10 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "vbc", "src\Compilers\Visual
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuildTask", "src\Compilers\Core\MSBuildTask\MSBuildTask.csproj", "{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}"
 EndProject
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "VBCSCompiler", "src\Compilers\Server\VBCSCompiler\VBCSCompiler.csproj", "{649CE05A-529C-40D7-A501-CA9BCFEE40DC}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Server", "Server", "{B57E7F86-EB16-4F60-A47C-F9D170F54400}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -106,6 +110,18 @@ Global
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x64.Build.0 = Release|x64
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x86.ActiveCfg = Release|x86
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3}.Release|x86.Build.0 = Release|x86
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x64.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Debug|x86.Build.0 = Debug|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|Any CPU.Build.0 = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x64.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x64.Build.0 = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x86.ActiveCfg = Release|Any CPU
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(NestedProjects) = preSolution
 		{DDFAE591-7414-4CC9-AD99-427C2D153893} = {6D173F59-562E-4BAA-8D98-9A8F4901D99A}
@@ -118,5 +134,7 @@ Global
 		{E3CD2895-76A8-4D11-A316-EA67CB5EA42C} = {9EECE6A3-C098-44D0-8ACD-0D8691EC8C3F}
 		{8CE3A581-2969-4864-A803-013E9D977C3A} = {11F63FDD-6EB7-4993-8769-8C8DC5DA29C3}
 		{7AD4FE65-9A30-41A6-8004-AA8F89BCB7F3} = {5DC491BA-E836-47C1-A4AA-3C770742718B}
+		{649CE05A-529C-40D7-A501-CA9BCFEE40DC} = {B57E7F86-EB16-4F60-A47C-F9D170F54400}
+		{B57E7F86-EB16-4F60-A47C-F9D170F54400} = {DDFAE591-7414-4CC9-AD99-427C2D153893}
 	EndGlobalSection
 EndGlobal
-- 
2.16.1.windows.4
`</Code>
    <Description>Source-Build needs `Microsoft.NETCore.Compilers`, which indirectly requires `VBCSCompiler` to be built. Adding `VBCSCompiler` to SourceBuild.sln builds it during source-build. (See more details in 

``

/cc @jaredpar @333fred </Description>
  </Issue>
  <Issue>
    <IssueID>26205</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpToBasic test has recurring failure</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>20/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>26205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Skipping because of recurring failure:
master/job/windows_release_vs-integration/53/testReport/junit/Roslyn.VisualStudio.IntegrationTests.CSharp/CSharpGenerateTypeDialog/CSharpToBasic/</Description>
  </Issue>
  <Issue>
    <IssueID>26204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpCodeActions/GenerateMethodInClosedFile Test Recurring failures</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>22/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>26204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Skipping Test because of recurring failures. The test has failed regularly on master/job/windows_release_vs-integration and master-vs-deps/job/window_release_vs-integration over the last week.
</Description>
  </Issue>
  <Issue>
    <IssueID>26199</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Review design for binding `string` with nullability off</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>26199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we bind `string` as `string!` when the nullability feature is on, but as `string~` (oblivious) when the feature is off (LangVersion=7 for example).

The scenario driving this is a C# 7.0 compilation being referenced in a C# 8.0 compilation. We want symbols from the compilation reference to be re-used, but we want the C# 8.0 compilation to treat them as oblivious.

A few options we discussed so far:
1. bind symbols differently depending on features being on/off (current design)
2. wrap symbols from compilation references in some cases, rather than re-use them directly (so a `string!` from a C# 7.0 compilation reference appears as oblivious to the C# 8.0 compilation)
3. have the caller be smart (you're given a source symbol, you should check if it comes from a compilation with nullability on/off). (this seems error-prone)</Description>
  </Issue>
  <Issue>
    <IssueID>26198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Review and finalize public APIs</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>26198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Note: we should remember to update the few places (marked with this issue's URL) where our code should make use of such APIs once they become available.

- `GetTypeInfo` should work on suppressed expression (relates to 

- semantic model should provide nullability information in LINQ queries (range variables)

- `ReferenceTypeConstraintIsNullable`
- `HasNotnullConstraint`

Should we expose through `ITypeParameterSymbol`?

- IncludeNonNullableTypeModifier

For testing, we need an option to show `!` (that's `IncludeNonNullableTypeModifier`). But we also need an option to control whether to show `string?` or `string`.
The IDE will definitely want to show `string?` in some cases (if not all). But if we just make that the default, then we'll be surprising existing clients of our APIs.

Two questions:
- should this option be public rather than internal?
- should this option be opt-in rather than opt-out?

``

Relates to 

Note: this option was renamed in the PR, and another option was added for using `ValueTuple` instead of `(...)` tuple syntax. We should also consider making the latter public.</Description>
  </Issue>
  <Issue>
    <IssueID>26196</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C#7.2 produces not verifiable il code when direct accessing field of readonly struct field</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26196</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017
LanguageVersion: C# 7.2

**Steps to Reproduce**:

1. Compile program in DEBUG with 'x1' or 'x2' uncommented:
``


**Additional information**
When using LanguageVersion: C# 7.1 both cases work
so I think this is a compiler bug and not a problem of PE verify.</Description>
  </Issue>
  <Issue>
    <IssueID>26195</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio crashes while analyzing provided code</Title>
    <CreatedDate>17/04/2018</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017, Version 15.6.6

**Steps to Reproduce**:
Create new solution and copy-paste sample code there:

``

**Expected Behavior**:
No crasg

**Actual Behavior**:
Visual studio crashes
</Description>
  </Issue>
  <Issue>
    <IssueID>26180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Why does IOperation not expose SematicModel?</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>26180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Seems like a reasonable thing to do. @mavasani 
Maybe it should be exposed from both `OperationAnalysisContext` and `IOperation`</Description>
  </Issue>
  <Issue>
    <IssueID>26177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Remove unused variable" should appear below "add using"</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>16/04/2018</ClosedDate>
    <IssueLabels />
    <Description>Getting "remove variable" as the first option is just not great:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>26171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>brettfo</FixedById>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio crashed in IncrementalAnalyzerProcessor</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>02/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7 Preview 3

**Steps to Reproduce**:

1. Opening any project/solution crashes VS

Stack trace:
&gt; Application: devenv.exe
&gt; Framework Version: v4.0.30319
&gt; Description: The application requested process termination through System.Environment.FailFast(string message).
&gt; Message: System.ObjectDisposedException: Cannot access a disposed object.
&gt; Object name: 'StreamJsonRpc.JsonRpc'.
&gt;    at Microsoft.Verify.NotDisposed(IDisposableObservable disposedValue, String message)
&gt;    at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__67`1.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.&lt;CreateWorkerAsync&gt;d__11.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.&lt;CreateAsync&gt;d__10.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientFactory.&lt;CreateAsync&gt;d__0.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.&lt;EnableAsync&gt;d__18.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;SynchronizePrimaryWorkspaceAsync&gt;d__23.MoveNext()
&gt; --- End of stack trace from previous location where exception was thrown ---
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.NormalPriorityProcessor.&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt; Stack:
&gt;    at System.Environment.FailFast(System.String, System.Exception)
&gt;    at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
&gt;    at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
&gt;    at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
&gt;    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ResetStatesAsync&gt;d__37, Microsoft.CodeAnalysis.Features, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ResetStatesAsync&gt;d__37 ByRef)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ResetStatesAsync()
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor+&lt;ExecuteAsync&gt;d__17, Microsoft.CodeAnalysis.Features, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ExecuteAsync&gt;d__17 ByRef)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+NormalPriorityProcessor.ExecuteAsync()
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;ProcessAsync&gt;d__12.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
&gt;    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
&gt;    at System.Threading.Tasks.Task.FinishContinuations()
&gt;    at System.Threading.Tasks.Task.FinishStageThree()
&gt;    at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;)
&gt;    at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor+&lt;WaitForIdleAsync&gt;d__11.MoveNext()
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
&gt;    at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
&gt;    at System.Threading.Tasks.Task.FinishContinuations()
&gt;    at System.Threading.Tasks.Task.FinishStageThree()
&gt;    at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
&gt;    at System.Threading.Tasks.Task+DelayPromise.Complete()
&gt;    at System.Threading.Tasks.Task+&lt;&gt;c.&lt;Delay&gt;b__274_1(System.Object)
&gt;    at System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)
&gt;    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
&gt;    at System.Threading.TimerQueueTimer.CallCallback()
&gt;    at System.Threading.TimerQueueTimer.Fire()
&gt;    at System.Threading.TimerQueue.FireNextTimers()
&gt;    at System.Threading.TimerQueue.AppDomainTimerCallback()
&gt; 


I can share the repro machine/dump if required.</Description>
  </Issue>
  <Issue>
    <IssueID>26169</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to use Roslyn v2.6.0 built analyzers from Visual Studio 2017 v15.6.6 project in a .Net 4.7.1 installed machine</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>26169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis - v2.6.0
Visual Studio 2017 v15.6.6

**Steps to Reproduce**:

1. We have an analyzer assembly built using new CSPROJ structure and with netstandard2.0 + Roslyn v2.6.0
2. I am using this analyzer assembly in a .Net Framework 4.7 class library project an analyzer in it and that analyzer DLL in another project.
3. I am getting a warning and analyzer is loaded in VS2017
Warning	IDE1003	Analyzer assembly 'XXX.Analyzer.dll' depends on 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' but it was not found. Analyzers may not run correctly unless the missing assembly is added as an analyzer reference as well.

Another error found:
Warning	CS8034	Unable to load Analyzer assembly XXX.Analyzer.dll: Could not load file or assembly 'file:///C:\Users\XXX\AppData\Local\Temp\VS\AnalyzerAssemblyLoader\19af1c9f57f14308b952d8ce23aacc92\14\XXX&gt;Analyzerdll' or one of its dependencies. An attempt was made to load a program with an incorrect format.

Included analyzer assembly and dependencies:
![image](

In the VS2017 UI the analyzer assembly is shown under Analyzers but unable to expand to see analyzers included in the package.
![image](

Expected Behavior:
With .Net Framework 4.7.1 Installed which is having netstandard2.0 implemented we should not get these errors. 

Actual Behavior:
Shows above mentioned errors and it shows unable to create analyzer instance.

The same analyzer when I used older csproj format and Roslyn version 1.6 it worked fine.Any hint on why analyzer is not picking netstandard2.0 dependency from Visual Studio 2017.

Thanks
Basanth</Description>
  </Issue>
  <Issue>
    <IssueID>26168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0019 'use pattern matching' on IDictionary fails</Title>
    <CreatedDate>16/04/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>26168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>var htmlAttributesDict = htmlAttributesObject as IDictionary&amp;lt;string, object&amp;gt;;                      RouteValueDictionary htmlAttributes = (htmlAttributesDict != null)            ? new RouteValueDictionary(htmlAttributesDict)            : HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributesObject);Reports:IDE0019	Use pattern matching	eCtdFtpAutomation.Web	C:\Users\mreri\source\repos\eCTDFTPAutomation\eCtdFtpAutomation.Web\Helpers\SiteHelpers.cs	143	ActiveThe corresponding fix resulting in the following uncompilable code:            RouteValueDictionary htmlAttributes = (htmlAttributesObject isIDictionary&amp;lt;string, object&amp;gt;htmlAttributesDict)            ? new RouteValueDictionary(htmlAttributesDict)            : HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributesObject);_This issue has been moved from VSTS ticketId: 597233__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>26163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Question: Can I use roslyn with .NET Core?</Title>
    <CreatedDate>15/04/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>26163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm trying to use roslyn with .NET Core on Mac and I'm not having much luck because most of the resources are for .NET Framework on Windows.

I've installed `Microsoft.CodeAnalysis.CSharp`, `Microsoft.CodeAnalysis.CSharp.Scripting`, and `Microsoft.CodeAnalysis.CSharp.Workspaces` but VSCode says that I am missing assembly references for `Microsoft.CodeAnalysis.CSharp.Scripting`.

Are there any resources or documentation for using roslyn with .NET Core?</Description>
  </Issue>
  <Issue>
    <IssueID>26151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reuse Tuple extraction code from Deconstructions in Declarations in CFG</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>26151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>26147</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Which branch can be compiled with Visual Studio 2015?</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>13/04/2018</ClosedDate>
    <IssueLabels />
    <Description>I need to compile roslyn in VS 2015, but I'm getting several compilation errors.

**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>26145</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException when displaying tooltip for the suggestion mode item</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6.5

**Steps to Reproduce**:

1. Ctrl+Alt+Space to activate suggestion mode
1. Type in the editor
1. Use the arrow up to navigate to the suggestion item

**Expected Behavior**:

Displaying the tooltip does not cause an error

**Actual Behavior**:

There is an error when creating tooltip for the suggestion item

``

Note that this will be fixed through the new completion API in #25770 via @dpoeschl </Description>
  </Issue>
  <Issue>
    <IssueID>26141</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Generate GetHashCode' generates a call to ValueType.GetHashCode</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>13/04/2018</ClosedDate>
    <IssueLabels />
    <Code>cs
struct Foo
{
    public Type FixtureType { get; }
    public MethodInfo Method { get; }

    public override int GetHashCode()
    {
        var hashCode = 662238274;
        hashCode = hashCode * -1521134295 + base.GetHashCode();
        hashCode = hashCode * -1521134295 + EqualityComparer&lt;Type&gt;.Default.GetHashCode(FixtureType);
        hashCode = hashCode * -1521134295 + EqualityComparer&lt;MethodInfo&gt;.Default.GetHashCode(Method);
        return hashCode;
    }
}
`</Code>
    <Description>VS 15.6.6.

If you use Roslyn's 'Generate GetHashCode...' suggestion on a struct, it asks you which properties to include, and then it generates code combining those with an additional hash, `base.GetHashCode()`:

``

Just like when inheriting from `System.Object`, inheritors from `System.ValueType` are always going to want to replace the base has calculation not combine it. Not only can this easily result in incorrect hashes which contradict the `Equals` implementation, many times the entire purpose of overriding `ValueType.GetHashCode` is to provide a better-performing implementation.</Description>
  </Issue>
  <Issue>
    <IssueID>26139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SemanticModel.GetSymbolInfo not working on property pattern names</Title>
    <CreatedDate>13/04/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>26139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a bug in the `features/recursive-patterns` branch.

/cc @CyrusNajmabadi </Description>
  </Issue>
</Issues>