<Issues>
  <Issue>
    <IssueID>48109</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Unused private member" fires on private constants that are used by attributes</Title>
    <CreatedDate>28/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Code> C#
    [Export(ExportContractNames.Scopes.ConfiguredProject, typeof(IProjectDynamicLoadComponent))]
    [AppliesTo(LoadCapabilities)]
    internal partial class ConfiguredProjectImplicitActivationTracking : AbstractMultiLifetimeComponent&lt;ConfiguredProjectImplicitActivationTracking.ConfiguredProjectImplicitActivationTrackingInstance&gt;, IProjectDynamicLoadComponent
    {
        // NOTE: Ideally this component would be marked with 'AlwaysApplicable' so that we always load 
        // IImplicitlyActiveService instances in all project types regardless of exported capabilities, 
        // but  doing so would cause us to be loaded in lots of situations even when not needed. Instead, 
        // we explicitly we current hardcode the set of capabilities of all our  IImplicitlyActiveService 
        // services.
        private const string LoadCapabilities = ProjectCapability.DotNetLanguageService + " | " +
                                                ProjectCapability.PackageReferences;
   }


![image](https://user-images.githubusercontent.com/1103906/94389221-9ca76080-0192-11eb-9f38-b764021d3962.png)


**Expected Behavior**:
No message

**Actual Behavior**:

Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0051	Private member 'ConfiguredProjectImplicitActivationTracking.LoadCapabilities' is unused.	Microsoft.VisualStudio.ProjectSystem.Managed	C:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed\ProjectSystem\ConfiguredProjectImplicitActivationTracking.cs	19	Active

`</Code>
    <Description>**Version Used**: 
Version 16.8.0 Preview 4.0 [30524.111.main]

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>48108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>48108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No hash-resistant equality comparer available for type: Microsoft.CodeAnalysis.DocumentId</Title>
    <CreatedDate>28/09/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>48108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>48108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Version 16.9.0 Preview 1.0 [30527.11.main]

**Steps to Reproduce**:

1. Rename a method

**Stack Trace**

``

FYI @tmat in case this is a duplicate or known. Searched for the exception message ¯\\\_(ツ)_/¯</Description>
  </Issue>
  <Issue>
    <IssueID>48094</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>XmlDocCommentAttributeName classification type assigned to a leading whitespace trivia</Title>
    <CreatedDate>27/09/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>48094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>48094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>48094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: .NET 5 RC1, Microsoft.CodeAnalysis.CSharp.Workspaces version 3.7.0

**Steps to Reproduce**:

Debug the following code snippet and inspect the returned classifiedSpans object. Check for the classification type of the leading whitespace trivia of the XmlName identifier token (i.e. the space between "param" and "name" in the analysed string).

Couldn't get the code displayed correctly here, so I am attaching this snap (code borrowed and adapted from [here](
![snap](

**Expected Behavior**: The leading whitespace should be of XmlDocCommentText type.

**Actual Behavior**: The returned type of the whitespace is of XmlDocCommentAttributeName type.

**Implications**: Omnisharp, for instance, defines semantic types sent to the client for highlighting based on the classification types returned by Roslyn. Hence, if we want to create a color theme that underlines XmlDocComment attribute name (such as for example in JetBrains Darcula theme), the the leading whitespace also gets underlined. Example of this can be seen here:

![Screenshot 2020-09-26 195949](

</Description>
  </Issue>
  <Issue>
    <IssueID>48100</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>48100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>.NET 5 RC1 console app crashes with stackoverflow after calling ToString on a record</Title>
    <CreatedDate>27/09/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>48100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>48100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>48100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Relevant code:
``

To reproduce:
1. Create .NET 5 Console Project (I used Visual Studio 2019 Preview on Windows)
2. Replace code with Program.cs in [RecordDebugStackoverflow.zip](
3. Start Project
4. Program crash


I previously reported it at  but then noticed that this wasn't a debugging issue within Visual Studio.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>48100</IssueID>
        <PullRequestID>47868</PullRequestID>
        <Title>Exclude constant and static fields from record's PrintMembers</Title>
        <Description>Might fix #47867, will confirm after adding a test.

But:

1. Should constants be excluded?
2. Why constants currently cause a problem in the first place?</Description>
        <CreatedDate>19/09/2020</CreatedDate>
        <ClosedDate>20/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>48100</IssueID>
            <PullRequestID>47868</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Records</Name>
            <IssueID>48100</IssueID>
            <PullRequestID>47868</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47868</PullRequestID>
            <IssueID>48100</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>48100</IssueID>
        <PullRequestID>48104</PullRequestID>
        <Title>Add test for #48100</Title>
        <CreatedDate>28/09/2020</CreatedDate>
        <ClosedDate>28/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>48100</IssueID>
            <PullRequestID>48104</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Records</Name>
            <IssueID>48100</IssueID>
            <PullRequestID>48104</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>48104</PullRequestID>
            <IssueID>48100</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>48091</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB Change Signature when caller does not have trailing () fails</Title>
    <CreatedDate>27/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.1

**Steps to Reproduce**:

1. Create Extension with no additional parameters or only optional parameters, for example
``
3. Select Change Signature on WithTrailingEOL and add a required parameter

**Expected Behavior**:
X, Y and Z will all have the new parameter added
**Actual Behavior**:
Only lines with Y and Z have the new parameter added, line X is unchanged, I have not tried this with non extensions.</Description>
  </Issue>
  <Issue>
    <IssueID>48090</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB Change Signature incorrect when no () is in Caller</Title>
    <CreatedDate>27/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.1

**Steps to Reproduce**:

1. Create Extension with no additional parameters or only optional parameters, for example
``
3. Select Change Signature on WithTrailingEOL and add a required parameter

**Expected Behavior**:
X, Y and Z will all have the new parameter added
**Actual Behavior**:
Only lines with Y and Z have the new parameter added, line X is unchanged, I have not tried this with non extensions.</Description>
  </Issue>
  <Issue>
    <IssueID>48088</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>cannot override records's Equals</Title>
    <CreatedDate>27/09/2020</CreatedDate>
    <ClosedDate>27/09/2020</ClosedDate>
    <IssueLabels />
    <Code>
public record C {
    public override bool Equals(object o) =&gt; false;
}


**Expected Behavior**:

successful compilation

**Actual Behavior**:

&gt; error CS0111: Type 'C' already defines a member called 'Equals' with the same parameter types

(note that I can override `GetHashCode` without error)

**Motivation**:

I use a lot of records where all members are strongly immutable with value semantics. 
In this case I can guarantee that `GetHashCode` will always return the same value. I then want to cache this value and use it to shortcut `Equality` which can give huge speed gains. I tried to create a common base class for such records to inherit from like this:


public record RecBase  {  
  private int? _cachedHashCode = null;

  public override bool Equals(object obj) {
    if (obj is not RecBase o) return false;
    if (_cachedHashCode is null) _cachedHashCode = GetHashCode();
    if (o._cachedHashCode is null) o._cachedHashCode = o.GetHashCode();
    if (_cachedHashCode!=o._cachedHashCode) return false; // optimization, hash codes different -&gt; not equal
    return object.Equals(this, o);
  }
}

public record MyImmutableRecordWithValueSemantics  : RecBase {  
  ... lots of members ..
}
`</Code>
    <Description>**Version Used**: 16.8.0 Preview 2.1 `&lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;&lt;LangVersion&gt;preview&lt;/LangVersion&gt; &lt;Nullable&gt;enable&lt;/Nullable&gt;`

**Steps to Reproduce**:

``

But I get the error above.



</Description>
  </Issue>
  <Issue>
    <IssueID>48084</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'InlineTemporaryCodeRefactoringProvider' encountered an error and has been disabled</Title>
    <CreatedDate>26/09/2020</CreatedDate>
    <ClosedDate>26/09/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

The version used in the current master

**Steps to Reproduce**:

Hit this while debugging Roslyn.sln, but can't reproduce.

``</Description>
  </Issue>
  <Issue>
    <IssueID>48083</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS caches Source Generator aggressively - hinders iterative development</Title>
    <CreatedDate>26/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>I'm just started writing a source generator, and I'm finding that Visual Studio is caching source generators aggressively, and it's making it very hard to do iterative development. 

This is what I'm having to do to make even small changes. 

- Close Visual Studio (devenv.exe) instance in which the source generator project and its consumer (i.e., the project that `ProjectReference`'s the source generator)
- `pskill /t servicehub.roslyncodeanalysisservice`
- `del $env:TEMP\VS\AnalyzerAssemblyLoader -Recurse -Force` &lt;- This is where the source generator binaries seem to get cached. Both `devenv` and `servicehub.roslyncodeanalysisservice` seems to hold handles to files under this location

Am I missing something simple to get the development process working more seamlessly ? 

I'm on `5.0.100-rc.2.20473.20` + Visual Studio 2019 Enterprise `16.8.0 Preview 4.0 [30517.14.main`</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>48083</IssueID>
        <PullRequestID>47047</PullRequestID>
        <Title>Put generated files to disk:</Title>
        <Description>- Add new command line param 'GeneratedFilesOut'
- Route new param through tasks with defaults
- Write out generated files when requested to do so
- Rationalize post generation to avoid uncesseary work
- Add Tests for targets and emit

Fixes #47211</Description>
        <CreatedDate>21/08/2020</CreatedDate>
        <ClosedDate>25/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>48083</IssueID>
            <PullRequestID>47047</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Source Generators</Name>
            <IssueID>48083</IssueID>
            <PullRequestID>47047</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>47047</PullRequestID>
            <IssueID>48083</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>48082</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Function pointer invocation has "None" IOperation</Title>
    <CreatedDate>26/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Code>csharp
public class C {
    public unsafe void M(delegate*&lt;string, int, void&gt; ptr) {
        ptr("a", 1);
    }
}
`</Code>
    <Description>**Version Used**: 

master

**Steps to Reproduce**:

``

[SharpLab](

**Expected Behavior**:

InvocationExpression has a suitable operation.

**Actual Behavior**:

InvocationExpression has "None" operation.</Description>
  </Issue>
  <Issue>
    <IssueID>48080</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test coverage: ERR_InvalidFunctionPointerCallingConvention is not tested</Title>
    <CreatedDate>26/09/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels />
    <Description>Searching through the repo for ERR_InvalidFunctionPointerCallingConvention at the time of writing this doesn't give any single test results:


</Description>
  </Issue>
  <Issue>
    <IssueID>48071</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misleading diagnostic when using named arguments on function pointer call</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>48071</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>48071</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Function Pointers</Name>
        <IssueID>48071</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class C {
    public unsafe void M(delegate*&lt;string, int, void&gt; ptr) {
        ptr("a", arg1: 1);
    }
}
`</Code>
    <Description>**Version Used**: 6521491e7fbf9765797111faca482c9eb7f57116

**Steps to Reproduce**:

``

[sharplab](

**Expected Behavior**: An error is given indicating that function pointer invocations cannot have named arguments

**Actual Behavior**: `error CS8756: Function pointer 'delegate*&lt;string, int, void&gt;' does not take 2 arguments`
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>48071</IssueID>
        <PullRequestID>48081</PullRequestID>
        <Title>Improve error when named argument is used with function pointer</Title>
        <Description>Fixes #48071

@RikkiGibson Currently, the diagnostic is only produced for the first named argument only, let me know if you want to produce diagnostic for all named arguments and I'll give that a try.</Description>
        <CreatedDate>26/09/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>48071</IssueID>
            <PullRequestID>48081</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>48071</IssueID>
            <PullRequestID>48081</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Function Pointers</Name>
            <IssueID>48071</IssueID>
            <PullRequestID>48081</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>48070</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0059 (Remove redundant assignment) incorrectly copies leading trivia</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>48070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>48070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>48070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I do not know how to reproduce as this is the first time I have seen it BUT as can be seen in the attached screenshot it SHOULD be offering to remove the **_= null_** initialization but instead offers to add an **_#endregion_** instead which produces a compile error.---### Original Comments#### Feedback Bot on 9/23/2020, 08:17 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Feedback Bot on 9/25/2020, 02:42 PM: &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href=" In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href=" We’ll keep you posted on any updates to this feedback.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>48067</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>mark-shipped.ps1 doesn't produce stable results across OSes</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>48067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>48067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Our public APIs in release/dev16.7 were marked shipped via `scripts/PublicApi/mark-shipped.ps1` on a Linux machine. If we run the script again on Windows it produces this diff:


(running the script on Mac on release/dev16.7 branch produces no diff in the relevant paths.)

It also appears that the tool seems to reorder existing method overloads in undesirable ways across releases: for example, changing default parameter values on method overloads can cause the overloads to appear in a different order. 

Reordering members when running `marked-shipped.ps1` harms the reviewability of public API changes. Obviously there are likely problems around "when I change *this* about an overload, do we consider it the same method as before?" but it feels like at least things which do not change the signature of a method from the runtime point of view should not affect sort order.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>48067</IssueID>
        <PullRequestID>48059</PullRequestID>
        <Title>Mark APIs as shipped</Title>
        <Description>Mark all APIs as shipped for the 16.8 release.</Description>
        <CreatedDate>25/09/2020</CreatedDate>
        <ClosedDate>29/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>48067</IssueID>
            <PullRequestID>48059</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>48067</IssueID>
            <PullRequestID>48059</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>48059</PullRequestID>
            <IssueID>48067</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>48065</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2019: Cannot replace multi-line selection with a new line in VB.Net editor.</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:It's more difficult to complete my work] [regression]
The issue occurs in Visual Studio 2019, Version 16.7.4 when I'm editing a Visual Basic.NET code file.Steps to Reproduce:1) Select multiple lines of code.2) Hit the Enter key.Expected Behavior:The multi-line selection is replaced with a single, unselected new line. (This is the behavior of Notepad, Word and Outlook.)Actual Behavior:A carriage return is inserted _AFTER_ the selection, and the lines are deselected, forcing me to reselect the lines and delete them.---### Original Comments#### Feedback Bot on 9/24/2020, 03:42 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>48064</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate Method code fix in an await foreach context creates an IEnumerable&lt;&gt; method instead of an IAsyncEnumerable&lt;&gt; method</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>26/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>48064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>48064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>48064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:Other]
When I'm in this code context:`await foreach (var item in _someInterface.GetItems())`The GetItems() method does not currently exists in the interface so I get the codefix to add it. But executing it creates an IEnumerable returning method, instead of the expected IAsyncEnumerable:`IEnumerable&lt;object&gt; GetItems()`It should have created this:`IAsyncEnumerable&lt;object&gt; GetItems()`---### Original Comments#### Feedback Bot on 9/23/2020, 08:25 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>48063</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio can't find an installed version from MSBuild</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>&gt; The project file cannot be opened. Version 5.0.100-rc.1.20452.10 of the .NET Core SDK requires at least version 16.8.0 of MSBuild. The current available version of MSBuild is 16.7.0.37604. Change the .NET Core SDK specified in global.json to an older version that requires the MSBuild version currently available.


I hit this error in Visual Studio while I can't build from the command line without any problems.

I tried to run `dotnet msbuild -version` from the command line and got the following output:

``

So MSBuild 16.8 already exists on my machine (but not VS 16.8). Why Visual Studio can't detect the existing MSBuild 16.8 and use it?</Description>
  </Issue>
  <Issue>
    <IssueID>48062</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Drop "Core" from a VS error</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>26/09/2020</ClosedDate>
    <IssueLabels />
    <Description>&gt; The project file cannot be opened. Version 5.0.100-rc.1.20452.10 of the .NET Core SDK requires at least version 16.8.0 of MSBuild. The current available version of MSBuild is 16.7.0.37604. Change the .NET Core SDK specified in global.json to an older version that requires the MSBuild version currently available.

I think the ".NET Core SDK" should be only ".NET SDK". Not sure if this change should be only for &gt;= 5.0 or all sdks.</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>48058</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Supported API warning doesn't work on overloads</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
VisualStudio.16.IntPreview/16.8.0-pre.4.0+30525.21.main
C# Tools   3.8.0-4.20464.1+56f747b362e15a0763bad5ce4702a9b7c8949d7e

**Steps to Reproduce**:

1. dotnet new lib
2. make it cross-target: `&lt;TargetFrameworks&gt;netstandard2.0;net5.0&lt;/TargetFrameworks&gt;`
3. Open in VS.
4. Try to use `ThreadPool.ThreadCount` and observe intellisense tooltip.  It's correctly flagged as not supported on `netstandard2.0`
![image](
5. Try to use `ThreadPool.QueueUserWorkItem&lt;TState&gt;` and observe tooltip.

**Expected Behavior**:
Similarly to `ThreadCount` this overload of `QueueUserWorkItem` should be flagged.

**Actual Behavior**:
No warning  
![image](

![image](

Build results in error:

Severity | Code | Description | Project | File | Line | Suppression State
-|-|-|-|-|-|-
Error | CS1501 | No overload for method 'QueueUserWorkItem' takes 3 arguments | nslib (netstandard2.0) | C:\scratch\nslib\Class1.cs | 10 | Active

Repro project:
[nslib.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>48057</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Restore.cmd should produce Restore.binlog</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>When building on a clean machine from cmd via Restore.cmd I want to see Restore.binlog in `artifacts\log\Debug`.

I"ve added -binaryLog to Restore.cmd but I see `Build.binlog` being hardcoded in a few places. The Build.binlog from the build overwrites the Build.binlog from Restore. We should have both.

I don't know which one of these locations needs to be updated to produce either Restore.binlog or Build.binlog depending on which phase is building:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>48052</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Optimize pattern matching over large tuple literals</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>48052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Code Gen Quality</Name>
        <IssueID>48052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>48052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>48052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
public class C
{
    public static void Main()
    {
        int x = (1, 2, 3, 4, 5, 6, 7, 8) switch
        {
            (1, 2, 3, 4, 5, 6, 7, 8) =&gt; 1,
            _ =&gt; -1,
        };
        Console.WriteLine(x);
    }
}


**Expected Behavior**: Emitted code does not use ValueTuple, except to throw `SwitchExpressionException(object)`, if applicable. This is what is done for smaller tuple literals. The optimization in [RewriteTupleInput](https://github.com/dotnet/roslyn/blob/2881d4c15e93f97c31869c82308add83b110faa0/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter.PatternLocalRewriter.cs#L485) instead creates locals for the fields of the tuple literal.

**Actual Behavior**: Emitted code uses ValueTuple:

il
{
  // Code size      110 (0x6e)
  .maxstack  9
  .locals init (int V_0,
                System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt; V_1)
  IL_0000:  ldloca.s   V_1
  IL_0002:  ldc.i4.1
  IL_0003:  ldc.i4.2
  IL_0004:  ldc.i4.3
  IL_0005:  ldc.i4.4
  IL_0006:  ldc.i4.5
  IL_0007:  ldc.i4.6
  IL_0008:  ldc.i4.7
  IL_0009:  ldc.i4.8
  IL_000a:  newobj     ""System.ValueTuple&lt;int&gt;..ctor(int)""
  IL_000f:  call       ""System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;..ctor(int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;)""
  IL_0014:  ldloc.1
  IL_0015:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item1""
  IL_001a:  ldc.i4.1
  IL_001b:  bne.un.s   IL_0065
  IL_001d:  ldloc.1
  IL_001e:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item2""
  IL_0023:  ldc.i4.2
  IL_0024:  bne.un.s   IL_0065
  IL_0026:  ldloc.1
  IL_0027:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item3""
  IL_002c:  ldc.i4.3
  IL_002d:  bne.un.s   IL_0065
  IL_002f:  ldloc.1
  IL_0030:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item4""
  IL_0035:  ldc.i4.4
  IL_0036:  bne.un.s   IL_0065
  IL_0038:  ldloc.1
  IL_0039:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item5""
  IL_003e:  ldc.i4.5
  IL_003f:  bne.un.s   IL_0065
  IL_0041:  ldloc.1
  IL_0042:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item6""
  IL_0047:  ldc.i4.6
  IL_0048:  bne.un.s   IL_0065
  IL_004a:  ldloc.1
  IL_004b:  ldfld      ""int System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Item7""
  IL_0050:  ldc.i4.7
  IL_0051:  bne.un.s   IL_0065
  IL_0053:  ldloc.1
  IL_0054:  ldfld      ""System.ValueTuple&lt;int&gt; System.ValueTuple&lt;int, int, int, int, int, int, int, System.ValueTuple&lt;int&gt;&gt;.Rest""
  IL_0059:  ldfld      ""int System.ValueTuple&lt;int&gt;.Item1""
  IL_005e:  ldc.i4.8
  IL_005f:  bne.un.s   IL_0065
  IL_0061:  ldc.i4.1
  IL_0062:  stloc.0
  IL_0063:  br.s       IL_0067
  IL_0065:  ldc.i4.m1
  IL_0066:  stloc.0
  IL_0067:  ldloc.0
  IL_0068:  call       ""void System.Console.WriteLine(int)""
  IL_006d:  ret
}
`</Code>
    <Description>Follow-up to #47878

**Version Used**: f33a0fd1d5e9e1387e2bc3879b0ee1b14bd0a5a7

**Steps to Reproduce**:

Compile the following program:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>48051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MSBuildWorkspace: Unable to open Solution/Project/Documents</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Code>
    MSBuildLocator.RegisterMSBuildPath(@"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin");
    var mSBuildWorkspace = MSBuildWorkspace.Create();
    mSBuildWorkspace.WorkspaceFailed += MSBuildWorkspace_WorkspaceFailed;
    Solution solution = mSBuildWorkspace.OpenSolutionAsync(tempSolutionPath).Result;
    

**Expected Behavior**:
Solution / project should load and list all c# documents

**Actual Behavior**:


System.AggregateException
  HResult=0x80131500
  Message=One or more errors occurred. (The type initializer for 'Microsoft.Build.Shared.FileUtilities' threw an exception.)
  Source=System.Private.CoreLib
  StackTrace:
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at TestHelper.DiagnosticVerifier.CreateProjectAsync(String[] sourceFile, String language) in 

Inner Exception 1:
TypeInitializationException: The type initializer for 'Microsoft.Build.Shared.FileUtilities' threw an exception.

Inner Exception 2:
TypeInitializationException: The type initializer for 'Microsoft.Build.Shared.FileSystem.FileSystems' threw an exception.

Inner Exception 3:
TypeLoadException: Could not load type 'System.Runtime.InteropServices.OSPlatform' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019
**Steps to Reproduce**:

1. Create a MSTest Project and add references to Microsoft.Build.Locator, Microsoft.Build(15.1.548) / Task.Core / Utilities.Core, Microsoft.CodeAnalysis.Analyzers (3.3.0), Microsoft.CodeAnalysis.CSharp.Workspaces (3.7.0), MSBuild (3.7.0)
2. then create a sample C# project with dotnet framework 462 having folders and c# documents added to those folders
3. try to load/open Solution/project created in step2 using following lines

    ``
</Description>
  </Issue>
  <Issue>
    <IssueID>48048</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Request] Improve "Code Lens - Dock Popup" result window</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>Hello, when I open "Code Lens"
![2020-09-25 11_52_25-](


and then I click on "Dock popup", I get this **minimalist** window
![2020-09-25 11_48_47-PowerCalculator](

I would be nice, when we can get the same window that we become when we click on `Find all references`
![2020-09-25 11_49_22-PowerCalculator](
</Description>
  </Issue>
  <Issue>
    <IssueID>48047</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8602: Dereference of a possibly null reference.  False positive in format string</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>25/09/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Using .Net 5 (5.0.100-rc.1.20452.10)
Using Roslyn Analysis (was FxCop in .Net Core3.1)
Using StyleCop 1.1.118

**Steps to Reproduce**:
First off, it's always difficult to determine which Analyzer reported the issue....was it FxCop or StyleCop.  That might help the community direct issues to the correct team.

So, I have a .Net 5 ASP.NET MVC application.  I have nullables enabled.

I have the following Controller Action:
``
(note, the "?" for accessing the first property).

Obviously, the "?" shouldn't be there, but it shouldn't make the accessing of the second property throw the warning imo.

**Expected Behavior**:
I would expect to not get a CS8602 warning about nulls since it can't be null.

**Actual Behavior**:
I am seeing a false positive warning about a null.</Description>
  </Issue>
  <Issue>
    <IssueID>48042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpAddParameterCodeFixProvider crashes on activation</Title>
    <CreatedDate>25/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:It's more difficult to complete my work]Adding an optional parameter to a function, immediately after pressing Ctrl-'.' the `CSharpAddParameterCodeFixProvider` crashes.Getting this stacktrace: ``---### Original Comments#### Feedback Bot on 9/24/2020, 06:40 PM: Thank you for reporting this issue to us. We have changed the title to better describe the problem so others can find and engage with it.#### Feedback Bot on 9/24/2020, 06:40 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>48036</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>PrintMembers produces unnecessary casts and calls to .ToString()</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>25/09/2020</ClosedDate>
    <IssueLabels />
    <Code>csharp
        public StringBuilder Append(object? value) =&gt; (value == null) ? this : Append(value.ToString());
`</Code>
    <Description>If the printable member is of type `String`, the generated code casts it to object first. Then, `Append` method calls `.ToString()` on it in runtime:

``

This creates extra unneeded steps.

The current behavior calls `.ToString` on value types, and casts to `object` for reference types. Why not just pass the member as is?</Description>
  </Issue>
  <Issue>
    <IssueID>48035</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>48035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error reported for explicit conversion from native integer to enum</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>48035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Native Int</Name>
        <IssueID>48035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Explicit conversions should be allowed from native integers to enum values.
``</Description>
  </Issue>
  <Issue>
    <IssueID>48031</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer suggestion: unnecessary use of `unsafe`</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>48031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>48031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>48031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Brief description:**

We frequently find ourselves initially writing some method to use unsafe code / pointers, and so annotate the method as `unsafe`.  Later, generally as `Span&lt;T&gt;` is employed more or as new framework APIs are utilized to improve the method, the method no longer uses pointers, but we sometimes forget to remove the `unsafe` keyword.  It would be nice-to-have if there were an analyzer we could enable to flag such uses of `unsafe` that could be removed.

**Languages applicable:**

C#

**Code example that the analyzer should report:**

``</Description>
  </Issue>
  <Issue>
    <IssueID>48030</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Azure Agent timeout </Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>&lt;!-- runfo report start --&gt;
|Definition|Build|Kind|Job Name|
|---|---|---|---|
|[roslyn-CI]( 48173]( release_64|
|[roslyn-CI]( 48202]( release_32|
|[roslyn-CI]( 48192]( release_32|
|[roslyn-integration-CI]( 48139]( release_32|
|[roslyn-CI]( 48139](
|[dotnet-crank-ci-public]( 10.14|
|[dotnet-linker-tests]( 42829]( OSX x64 release Runtime_Release|
|[runtime]( 42829]( Android arm64 Debug AllSubsets_Mono|
|[runtime]( 42829]( iOS arm64 Debug AllSubsets_Mono|
|[runtime]( 42759]( Browser wasm Release AllSubsets_Mono_RuntimeTests|
|[runtime]( 40435]( Browser wasm Release AllSubsets_Mono_RuntimeTests|
|[dotnet-linker-tests]( 42819]( OSX x64 release Runtime_Release|
|[runtime]( 42819]( iOS arm Release AllSubsets_Mono|
|[runtime]( 42819]( OSX x64 Release AllSubsets_Mono_LLVMJIT|
|[runtime-coreclr outerloop](  Pri1 Runtime Tests Run R2R Windows_NT arm64 checked|
|[dotnet-linker-tests]( 39203]( Linux x64 release Runtime_Release|
|[runtime]( 39203](  Product Build Linux x64 debug|
|[runtime]( 39203]( Build Linux_musl arm Release|
|[runtime]( 39203](  Product Build Linux x64 release|
|[runtime]( 39203](  Product Build Linux arm64 release|
|[runtime]( 42619]( iOS x64 Release AllSubsets_Mono|
|[source-build-CI]( 1761]( Production|
|[runtime]( 42812]( Build and Test coreclr  FreeBSD_x64 Release|
|[runtime]( 42435]( Test Run checked coreclr Linux_musl x64 Debug|
|[runtime]( 39996]( tvOS arm64 Release AllSubsets_Mono|
|[runtime](  Product Build OSX x64 checked|
|[runtime]( 39996](  Product Build OSX x64 checked|
|[runtime]( 42671]( tvOS x64 Debug AllSubsets_Mono|
|[runtime]( 40786]( OSX x64 Release AllSubsets_Mono_LLVMJIT|
|[runtime-live-build]( 42788]( OSX x64 release Runtime_Debug|
|[dotnet-linker-tests]( 40691]( OSX x64 release Runtime_Release|
|[runtime]( 42770](  Product Build OSX x64 checked|
|[runtime](  Product Build OSX x64 checked|
|[runtime]( tvOS x64 Release AllSubsets_Mono|
|[runtime-coreclr jitstress-isas-x86](  Pri1 Runtime Tests Run  OSX x64 checked|
|[runtime-coreclr ilasm](  Pri1 Runtime Tests Run  OSX x64 checked|
|[aspnetcore-quarantined-tests]( Helix ARM64|
|[runtime-coreclr jitstress2-jitstressregs](  Pri1 Runtime Tests Run  OSX x64 checked|
|[aspnetcore-helix-matrix]( Helix ARM64 matrix|
|[runtime-coreclr jitstressregs](  Pri1 Runtime Tests Run  OSX x64 checked|
|[runtime]( 39996]( iOS x64 Release AllSubsets_Mono|
|[runtime]( 39996](  Product Build OSX x64 checked|
|[runtime]( 40691](  Product Build OSX x64 checked|
|[runtime]( tvOS x64 Release AllSubsets_Mono|
|[runtime]( 42741]( Test Run checked coreclr Windows_NT x86 Release|
|[runtime]( 42377]( tvOS arm64 Release AllSubsets_Mono|
|[runtime]( tvOS x64 Release AllSubsets_Mono|
|[runtime]( 42666]( OSX x64 Release AllSubsets_Mono_LLVMJIT|
|[dotnet-linker-tests]( 42435]( OSX x64 release Runtime_Release|
|[runtime]( 42689]( tvOS arm64 Release AllSubsets_Mono|
|[runtime]( 42689]( iOS x64 Release AllSubsets_Mono|
|[runtime]( 42685]( Common Pri0 Test Build AnyOS AnyCPU release|
|[runtime]( 42685]( Test Run release mono Linux x64 Debug|
|[runtime]( 42685]( Build and Test coreclr  Linux_x64 Release|
|[roslyn-CI]( debug_32|
|[roslyn-CI]( debug_64|
|[roslyn-CI]( release_64|
|[roslyn-CI]( release_32|
|[roslyn-CI]( 47960]( release_32|


&lt;!-- runfo report end --&gt;




































































































































































Number of jobs are failing with the following error:

&gt; We stopped hearing from agent NetCorePublic-Pool 76. Verify the agent machine is running and has a healthy network connection. Anything that terminates an agent process, starves it for CPU, or blocks its network access can cause this error. For more information, see: 

This is an issue in AzDO that is impacting our jobs. 

[Runfo Query](
</Description>
  </Issue>
  <Issue>
    <IssueID>48027</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpImplementImplicitlyCodeRefactoringProvider crash</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>48027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>48027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>48027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.InvalidOperationException : Sequence contains no elements
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at System.Linq.ImmutableArrayExtensions.First[T](ImmutableArray`1 immutableArray)
   at async Microsoft.CodeAnalysis.CSharp.ImplementInterface.AbstractChangeImplementionCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)


Repro code (try invoke codeactions at $$):
cs
using System;
using System.Collections;


namespace Foo
{
    public class Bar
    {

        IEnumerator $IEnumerable$.GetEnumerator()
        {
            throw new NotImplementedException();
        }
    }
}

`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>48026</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Move method to partial</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---Add function to Code refactoring. The function is like:split class to partial classes and make them in a folder.Just like the Winform partial classes.Form1.cs/Form1.Designer.cs are in a folderwe need this function sometimes, especially when we create many tabpages,we want to split the Main class(like Form1.cs) to Form1.tabPage1.cs, Form1.tabPage2.cs, ...---### Original Comments#### Jane Wu [MSFT] on 8/22/2019, 02:21 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>48025</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add a reference to System.Linq automatically when LINQ is used</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---VS2019 has brought in an extremely helpful feature; if you use an item (for example an attribute) that's in a non-referenced namespace, the approprtiate 'using' statement is automatically added.It would be great if VS could automatically add 'using System.Linq' In a similar fashion, if you start to write a Linq statement.---### Original Comments#### Feedback Bot on 5/18/2020, 03:46 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>48024</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add automation to try building dotnet/runtime with a dev compiler</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>48024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We often make changes whose impact needs to be validated by trying to build dotnet/runtime. We should add an automation which lets us take a local dev compiler and try to use it to build dotnet/runtime (e.g. by creating a PR to dotnet/runtime.)

The biggest hurdle to simply using a dev compiler in a PR to dotnet/runtime is probably publishing. Perhaps we can identify a NuGet feed where we can publish "ephemeral" dev compilers and simply start referencing them in PRs to dotnet/runtime.

/cc @dotnet/roslyn-infrastructure </Description>
  </Issue>
  <Issue>
    <IssueID>48023</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add `?` mark on generic types when marked `MayBeNullAttribute`</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Code>csharp
[return: MayBeNull]
T FirstOrDefault&lt;T&gt;(IEnumerable&lt;T&gt; @this, Predicate&lt;T&gt; condition);
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Sometimes we may use the method `T FirstOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)`. However, the generic type `T` may be `null` when the list doesn't contain any elements satisfied the condition specified as a parameter of type `Predicate&lt;T&gt;`.If we marked the return value `MayBeNullAttribute` to specify the return value may be null, the tooltip will add a may-be-null suffix symbol `?` following with the type. In this way we can get the nullability of the type more clearly.For example, if the signature of the method `FirstOrDefault` is like:``We can see the symbol `?` when we call this method. The display result will be like the code as the attachment file DisplayInfo.png.In addition, if the generic-typed argument is marked `MayBeNullAttribute`, `MayBeNullWhenAttribute` or `NotNullWhenAttribute`, the argument should also be marked `?` suffix symbol, because we can't tell the nullability of these parameters for sure.&gt; I'm so sorry that I don't know how to append pictures here.Thanks!---### Original Comments#### Dada Huo [MSFT] on 9/18/2020, 03:24 AM: &lt;p&gt;Just double confirm with you, what language is used to describe this question? Is the screenshot you provided in debugger status?&lt;/p&gt;#### 齐天 张 on 9/18/2020, 05:26 PM: &lt;p&gt;C#... :)&lt;/p&gt;&lt;p&gt;Yep, this screenshot is in debugger status.&lt;/p&gt;#### Dada Huo [MSFT] on 9/20/2020, 06:59 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>48021</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Improve IntelliSense function parameter completion</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---Given a function declaration in C#:``however that would result in compile error because the parameter is missing the `out` keyword.My suggestion would be to improve IntelliSense to include the out keyword in it's suggestions (ex. it would suggest "out exitCode") OR to make it automatically add the out keyword (and "ref" and "in") when a function parameter suggestion is accepted because it's mandatory as per the function declaration and not adding it will always result in error.---### Original Comments#### Feedback Bot on 9/21/2020, 03:47 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>48020</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>fix formatting suggestion for cast</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>48020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I set IDE0055 as a warning in .editorconfig because I don't want any formatting issues in my project. It works fine except for one case. It suggests me to add space inside cast, which is something that I totally don't want to do. There is no way to set my preferences to not get this formatting suggestion. Please provide a way how to disable suggestion for inserting space after opening ( and before closing ).---### Original Comments#### Feedback Bot on 9/21/2020, 03:47 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>48019</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>When invoking a method: optionally automatically fill in argument names &amp; create local variables for them.</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;As the architecture in our code-bases develops, we find that method-calls are getting larger.&lt;/p&gt; &lt;p&gt;Initially we had simple methods like&lt;/p&gt;&lt;pre&gt;someObject.SomeMethod(int someNumber, double someDouble);&lt;/pre&gt; &lt;p&gt;Now we can have 20 or 30 arguments in a method call.&lt;/p&gt; &lt;p&gt;So we then have to fill in numerous argument-names by hand and create local variables for them all.&lt;/p&gt; &lt;p&gt;This is laborious and can easily be automated.&lt;/p&gt; &lt;p&gt;I would really like it if there was some hotkey or lightbulb option for &lt;strong&gt;&amp;quot;Fill in method arguments &amp;amp; create local variables&amp;quot;&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;So I would type&lt;/p&gt;&lt;pre&gt;someObject.SomeMethod(); // fails to compile, as no arguments given&lt;/pre&gt;&lt;p&gt;and then when the hotkey/lightbulb was used it would expand to:&lt;/p&gt;&lt;pre&gt;// variables createdstring someString = ; // no value given, so it won't compile until completedint someInteger = ; // dittodouble someDouble = ; // ditto...decimal theLastArgumment ; // ditto - maybe the 30th argument variable// method now has arguments in placesomeObject.SomeMethod(someString, someInteger, someDouble, ... , theLastArgument);&lt;/pre&gt; &lt;p&gt;This would save us lots of time and enable us to focus on business logic rather than boilerplate.&lt;/p&gt; &lt;p&gt;I suspect it would be quite easy, too.&lt;/p&gt; &lt;p&gt;How about it?&lt;/p&gt;---### Original Comments#### Feedback Bot on 9/24/2020, 00:19 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>48018</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csharp_style_expression_bodied_methods: only non-void methods</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>24/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>48018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>48018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;It would be nice to have style option to prefer expression bodies only for methods that actually return a value.  Expression bodies for void functions don't make a lot of sense, since they are not actually expressions. This can cause confusion as the =&amp;gt; without {} implies (at least to me) a return value.&lt;/p&gt; &lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;---### Original Comments#### Feedback Bot on 9/24/2020, 00:19 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>48016</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetDocumentTextChangesAsync is failing in rolling builds</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>48016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>48016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>48016</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;!-- runfo report start --&gt;
|Build|Definition|Kind|Run Name|
|---|---|---|---|
|[835554]( 48164]( Desktop Spanish|
|[835392]( Desktop Release Test32|
|[831995]( Desktop Debug Test64|
|[831595]( 48059]( Desktop Release Test64|
|[828171]( Desktop Release Test64|
|[820226]( Desktop Release Test32|
|[805559]( Desktop Debug Test32|


&lt;!-- runfo report end --&gt;












































































































































































</Description>
  </Issue>
  <Issue>
    <IssueID>48011</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0008 when combining "type apparent" expressions with null-coalescing operator</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>25/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>48011</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>48011</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> ini
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:warning

a false-positive IDE0008 is generated when combining two "type is apparent" expressions with the null-coalescing operator `??`, for example:

 csharp
var myList = enumerableOfInt as List&lt;int&gt; ?? enumerableOfInt.ToList();

No warning is generated when using the expressions either side of the `??` in isolation.

**Version Used**: 
Microsoft Visual Studio Enterprise 2019
Version 16.7.3
VisualStudio.16.Release/16.7.3+30503.244
Microsoft .NET Framework
Version 4.8.04084

**Steps to Reproduce**:

1. Create a new console app project
2. Add a new .editorconfig file and ensure the options for `charp_style_var_*` are set as follows:
 ini
[*.cs]
# var preferences
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:warning

3. Add the following code to `Main`
 csharp
IEnumerable&lt;int&gt; empty = Enumerable.Empty&lt;int&gt;();

var emptyAsList = empty as List&lt;int&gt;;
var emptyToList = empty.ToList();
var emptyAsListOrToList = empty as List&lt;int&gt; ?? empty.ToList();
`</Code>
    <Description>With the following settings:
``

**Expected Behavior**:
No IDE0008, because `csharp_style_var_when_type_is_apparent  = true:suggestion`

**Actual Behavior**:
IDE0008 on third example of `var` because `csharp_style_var_elsewhere = false:warning`</Description>
  </Issue>
  <Issue>
    <IssueID>48010</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer for possible wrong Roslyn API usage, and improve exception</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Code>csharp
var statements = new SyntaxList&lt;StatementSyntax&gt;();
statements = statements.Add(SyntaxFactory.ReturnStatement(SyntaxFactory.LiteralExpression(SyntaxKind.TrueKeyword)));


It throws ArgumentOfRangeException, which was a bit unclear to me.

Suggestions:

1. Improve the exception thrown.
2. Add an analyzer to point to this mistake. I was only saved by @KirillOsenkov's RoslynQuoter to know that I should have used `SyntaxKind.TrueLiteralExpression`


I also think using:


statements.Add(SyntaxFactory.ReturnStatement(SyntaxFactory.LiteralExpression(SyntaxKind.TrueKeyword)));
`</Code>
    <Description>I had the following code fragment:

``

is a candidate for another analyzer too. (the above line does nothing, it creates a new list which is just thrown away and not used)</Description>
  </Issue>
  <Issue>
    <IssueID>48009</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxGenerator.GetStatements returns 0 for expression-bodied member</Title>
    <CreatedDate>24/09/2020</CreatedDate>
    <ClosedDate>24/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>48009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>48009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:



**Expected Behavior**: Returns 1 statement.

**Actual Behavior**: Returns 0 statement.
</Description>
  </Issue>
  <Issue>
    <IssueID>47588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>47588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reconsider use of EndListening in ListenAndDispatchConnections</Title>
    <CreatedDate>10/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>47588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  for context.</Description>
  </Issue>
  <Issue>
    <IssueID>47586</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash when trying to turn a variable into a parameter</Title>
    <CreatedDate>10/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:I'm somewhat annoyed. A fix would be nice]
Consider the attached recording. Some code creation plug-in crashes when I try to use the _Ctrl ._ tool to promote a variable to a parameter.---### Original Comments#### Feedback Bot on 9/3/2020, 03:12 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47585</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Invalid "Use of unassigned variable".</Title>
    <CreatedDate>10/09/2020</CreatedDate>
    <ClosedDate>15/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
private static string? FindRequestValue(HttpRequest? request, string value)
{
	if (request?.Headers?.TryGetValue(value, out var headers) != true)
	{
		return null;
	}

	return headers.Count &gt; 0 ? headers[0] : null;
}
`</Code>
    <Description>**Version Used**: 
Using .net5/preview 8

**Steps to Reproduce**:
The following code was compiling just fine with the 3.1 sdk:
``

**Expected Behavior**:
Code compiles

**Actual Behavior**:
Error compiling: _Use of unassigned local variable 'headers'_ in the return line.
</Description>
  </Issue>
  <Issue>
    <IssueID>47577</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Find All References returns sometimes returns zero results</Title>
    <CreatedDate>10/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>47577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>47577</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 4.0 [30507.17.main]

I sometimes get into a state maybe a few times a day where Find All References returns zero results multiple times in a row. If I search a minute later than it returns results. Its very frustrating, as I need to fall back to CodeLens to get the results.

Trace: [internalshare]\public\davkean\Roslyn\47577.zip.




</Description>
  </Issue>
  <Issue>
    <IssueID>47571</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IOException setting Console.OutputEncoding</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>47571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>47571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Failed to launch 'c:\users\sam\appdata\local\microsoft\visualstudio\16.0_80a394a5roslyndev\extensions\microsoft\roslyn language services\42.42.42.4242424\InteractiveHost\Desktop\InteractiveHost64.exe' process (exit code: 1) with output: 
System.IO.IOException: The handle is invalid.
   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   at System.Console.set_OutputEncoding(Encoding value)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service..ctor(Func`2 invokeOnMainThread) in C:\dev\roslyn\src\Interactive\Host\Interactive\Core\InteractiveHost.Service.cs:line 143
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.&lt;RunServerAsync&gt;d__18.MoveNext() in C:\dev\roslyn\src\Interactive\Host\Interactive\Core\InteractiveHost.Service.cs:line 236
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Interactive.InteractiveHostEntryPoint.&lt;Main&gt;d__0.MoveNext() in C:\dev\roslyn\src\Interactive\HostProcess\InteractiveHostEntryPoint.cs:line 46
`</Code>
    <Description>**Version Used**: 20760c9123e7734d338f6f21071782b612bd45ae

**Steps to Reproduce**:

Run dotnet/roslyn integration tests.

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>47569</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE1006 fires on discard parameters</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2019
Version 16.6.3

**Steps to Reproduce**:

1.  Create a function with an unused parameter (I used _ and _1 to handle multiple discarded parameters)
`public object DiscardParameter(string _1)`
2. Define .editorconfig rule
dotnet_naming_rule.parameter_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameter_should_be_camelcase.symbols = parameter
dotnet_naming_rule.parameter_should_be_camelcase.style = camelcase

**Expected Behavior**:
No warning

**Actual Behavior**:

Severity | Code | Description | Project | File | Line | Suppression   State | Priority
-- | -- | -- | -- | -- | -- | -- | --
Message | IDE1006 | Naming   rule violation: Prefix '_' is not expected | *** | *** | 903 | Active | Normal



Reference:

&gt;This rule does not flag parameters that are named with the discard symbol, for example, _, _1, and _2

Incompatible rules are confusing</Description>
  </Issue>
  <Issue>
    <IssueID>47565</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate constructor refactoring should be available inside the class</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
VS2019 16.8 P2.1

**Steps to Reproduce**:

1. Create empty class
2. Invoke bulb menu _inside_ the class

**Expected Behavior**:
Generate constructor refactoring should be available, same as it happens with other Generate refactorings (overrides, Equals, GetHashCode)

**Actual Behavior**:
Generate constructor is available only on type definition, but not inside.

![tmOh2tSJFR](

</Description>
  </Issue>
  <Issue>
    <IssueID>47564</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[loc][query] Assistance with translation</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>47564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
String Resource ID | 0; "ERR_CannotSpecifyManagedWithUnmanagedSpecifiers"
-- | --
Source String | 'managed' calling convention cannot be combined with unmanaged calling convention specifiers.
Filename | Compilers\CSharp\Portable\xlf\CSharpResources.xlf
Question | Is "managed" localizable?


</Description>
  </Issue>
  <Issue>
    <IssueID>47562</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Interactive host packages the wrong version of StreamJsonRpc, which subsequently fails to load</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

There seem to be multiple failures.

``
([link](
</Description>
  </Issue>
  <Issue>
    <IssueID>47559</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make SerializableConflictResolution immutable struct</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`SerializableSymbolAndProjectId`
`SerializableSearchResult`
`IRemoteEncapsulateFieldService.EncapsulateFieldsAsync` return type</Description>
  </Issue>
  <Issue>
    <IssueID>47558</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IRemoteRenamerService.ResolveConflictsAsync us unused</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>47557</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>RenameSymbolAsync: Do not fall back to in-proc</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47557</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47557</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47557</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently rename falls back to in-proc implementation if

- `SerializableSymbolAndProjectId.TryCreate(symbol, solution, cancellationToken, out var serializedSymbol)` returns false
- `IRemoteRenamerService.(RenameSymbolAsync | FindRenameLocationsAsync | ResolveConflictsAsync)` returns null
- RPC fails

Rename should never fall back to in-proc if OOP service is available.

The same for `DependentTypeFinder.FindTypesAsync`. 
</Description>
  </Issue>
  <Issue>
    <IssueID>47553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense completion in DateTime doesn;t work for nullable DateTime.</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>25/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:I'm somewhat annoyed. A fix would be nice]
In [Visual Studio 2019 version 16.7.0]( there was added IntelliSense completion for DateTime.It doesn't work when the DateTime is nullable and I use "?." operator. For example forobj. StartDate.Value.ToString("d") // I get IntelliSence with format suggestionsobj. StartDate?. ToString("d") //I don't get this nice intellisense like above---### Original Comments#### Feedback Bot on 9/7/2020, 04:07 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47551</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>47551</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extension methods with EditorBrowsable(Never) defined in a referenced assembly show up in VS intellisense</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>11/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47551</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47551</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47551</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47551</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 16.7.3

**Steps to Reproduce**:

1. Create a library project with a public extension method. Put `[EditorBrowsable(EditorBrowsableState.Never)]` on it.
2. Build the project.
3. Create a second library project and reference the `bin/Debug` assembly that was created by building the first project.
4. See the never-browsable extension method showing up in intellisense for the second library project where it offers to autocomplete extension methods that are in an unimported namespace.

**Expected Behavior**: The extension methods should stop polluting intellisense. They can't be removed without causing binary-breaking changes and they should remain extension methods so that code that used them gets the obsoletion message rather than a "method does not exist" compiler error.

**Actual Behavior**: The extension methods did not stop polluting intellisense.</Description>
  </Issue>
  <Issue>
    <IssueID>47550</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxFactory.TypeCref(type) delves into comments and includes comment</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>47550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 3.6

**Steps to Reproduce**:

1. Parse following snippet:
`` 
5. Inspect `result`.

**Expected Behavior**:
`result` should be `cref="IXyz"`

**Actual Behavior**:
`result` is `cref="    /// &lt;summary&gt;
    /// Blah &lt;see cref="Xyz"/&gt; blah.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    IXyz"`
</Description>
  </Issue>
  <Issue>
    <IssueID>47549</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>47549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Frequent crashes of Visual Studio Community 2019 16.7.x</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
[severity:I'm unable to use this version of Visual Studio]
 
``

---
### Original Comments

#### Feedback Bot on 8/12/2020, 00:07 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Thomas Stützer on 8/26/2020, 06:11 AM: 

&lt;p&gt;same crash here, pls fix&lt;/p&gt;

#### Manuel Eisenschink on 9/9/2020, 01:52 AM: 

&lt;p&gt;I can reproduce this 100% with a specific file. Initially I thought this was a ReSharper issue but creating a WinDbg log and dump turned out it was Roslyn. Would be highly appreciated if this was fixed soon as it really limits usability. Since Visual Studio crashes without any error and quite unexpectedly, it often results in data loss.&lt;/p&gt;


---
### Original Solutions
(no solutions)

----
Seems we also have some Watson reports: </Description>
  </Issue>
  <Issue>
    <IssueID>47587</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New analyzer suggestion: Apply same params modifier to subclass methods</Title>
    <CreatedDate>09/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Code such as

        private abstract class C
        {
            protected abstract void Call2(params string[] arr);
        }
        private class D : C
        {
            protected override void Call2(string[] arr)
            {
                throw new NotImplementedException();
            }
        }

should honor the same modifier for base and subclasses. An analyzer could easily support such a scenarion, the fixer would simply make them identical in terms of modifiers</Description>
  </Issue>
  <Issue>
    <IssueID>47538</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>47538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use readonly structs for RPC contracts</Title>
    <CreatedDate>08/09/2020</CreatedDate>
    <ClosedDate>19/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Once we switch to MessagePack immutable structs perform the best.</Description>
  </Issue>
  <Issue>
    <IssueID>47533</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove custom immutable collection message pack serialization</Title>
    <CreatedDate>08/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Track removing ImmutableCollectionMessagePackResolver once the following issues are fixed:


</Description>
  </Issue>
  <Issue>
    <IssueID>47522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Records: clarify spec regarding error on explicit declaration with unexpected signature </Title>
    <CreatedDate>08/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>47522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``

This should be an error based on the proposal [here](

&gt; The PrintMembers method can be declared explicitly. It is an error if the explicit declaration does not match the expected signature or accessibility, or if the explicit declaration doesn't allow overriding it in a derived type and the record type is not sealed.</Description>
  </Issue>
  <Issue>
    <IssueID>47521</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0066 produces (arguably) less readable code for enums when changing to switch expression using or patterns</Title>
    <CreatedDate>08/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
enum E
{
    A,
    B,
    C,
    D,
    E,
    F,
}

class C
{
    static E Foo(E e)
    {
        switch (e)
        {
            case E.A:
            case E.B:
            case E.C:
            case E.D:
                return E.E;
            default:
                return E.F;
        }
    }
}


`IDE0066` will be suggested on the `switch` statement.

**Actual Behavior**:

csharp
    static E Foo(E e)
    {
        return e switch
        {
            E.A or E.B or E.C or E.D =&gt; E.E,
            _ =&gt; E.F,
        };
    }


You can see how this quickly gets out of hand for `switch` statements that are handling 30+ values in the non-`default` arm and where the names are not contrived. For some perspective, one example of this suggestion triggering in real code:

csharp
                public override bool CanParse(SyntaxToken token)
                {
                    switch (token.Kind)
                    {
                        case SyntaxTokenKind.MultiplicativeOperator:
                        case SyntaxTokenKind.AdditiveOperator:
                        case SyntaxTokenKind.ShiftOperator:
                        case SyntaxTokenKind.BitwiseOperator:
                        case SyntaxTokenKind.Hash:
                        case SyntaxTokenKind.OpenParen:
                        case SyntaxTokenKind.OpenBracket:
                        case SyntaxTokenKind.OpenBrace:
                        case SyntaxTokenKind.AssertKeyword:
                        case SyntaxTokenKind.BreakKeyword:
                        case SyntaxTokenKind.CondKeyword:
                        case SyntaxTokenKind.ExcKeyword:
                        case SyntaxTokenKind.FnKeyword:
                        case SyntaxTokenKind.ForKeyword:
                        case SyntaxTokenKind.FreezeKeyword:
                        case SyntaxTokenKind.IfKeyword:
                        case SyntaxTokenKind.LetKeyword:
                        case SyntaxTokenKind.LoopKeyword:
                        case SyntaxTokenKind.MatchKeyword:
                        case SyntaxTokenKind.MutKeyword:
                        case SyntaxTokenKind.NotKeyword:
                        case SyntaxTokenKind.RaiseKeyword:
                        case SyntaxTokenKind.RecKeyword:
                        case SyntaxTokenKind.RecvKeyword:
                        case SyntaxTokenKind.ReturnKeyword:
                        case SyntaxTokenKind.TryKeyword:
                        case SyntaxTokenKind.UseKeyword:
                        case SyntaxTokenKind.WhileKeyword:
                        case SyntaxTokenKind.ModuleIdentifier:
                        case SyntaxTokenKind.ValueIdentifier:
                        case SyntaxTokenKind.NilLiteral:
                        case SyntaxTokenKind.BooleanLiteral:
                        case SyntaxTokenKind.AtomLiteral:
                        case SyntaxTokenKind.IntegerLiteral:
                        case SyntaxTokenKind.RealLiteral:
                        case SyntaxTokenKind.StringLiteral:
                            return true;
                        default:
                            return false;
                    }
                }
`</Code>
    <Description>**Version Used**: VS Code (`ms-dotnettools.csharp` 1.23.2, `omnisharp` 1.37.2-beta.2) + .NET 5 Preview 8

**Steps to Reproduce**:

``

The readability of this code is certainly not improved by applying the transformation above.

(I have several other similar cases in this same code base.)

**Expected Behavior**:

There are a lot of factors to consider here and I see multiple possible solutions, but I have no idea which is more practical. All I can say for sure is that in all of the cases where I've run into this suggestion, the readability of the code is worsened. Obviously the general suggestion to use `switch` expressions is great, but when it involves `enum`s in patterns like this, the suggestion is not helpful.</Description>
  </Issue>
  <Issue>
    <IssueID>47514</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider using HashCode.Combine for the auto-generated definition in records</Title>
    <CreatedDate>07/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I didn't dive into the implementation details of HashCode.Combine, but it's always advised to use it.</Description>
  </Issue>
  <Issue>
    <IssueID>47513</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Records: warn if either Equals or GetHashCode is redefined, but not both</Title>
    <CreatedDate>07/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
public sealed record C {
    public object Data;
    public bool Equals(C c) { return false; }
   // Compiler generated GetHashCode considers Data and is not in agreement with Equals
}
`</Code>
    <Description>If you redefine one method, the other gets immediately out of sync and you don't get any warning.
``



</Description>
  </Issue>
  <Issue>
    <IssueID>47512</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>47512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Source generators and nullable reference types, how to combine?</Title>
    <CreatedDate>07/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>At the moment, source generators must have the following target:

``
(`Version` and `PublicKeyToken` are different with `net5`)

So, is there a way to use nullable reference types in source generators? 

(Sorry if I place this issue at the incorrect repository)

Thank you!</Description>
  </Issue>
  <Issue>
    <IssueID>47508</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>davidwengier</FixedById>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE1006 thinks positional parameters on records are parameters and properties</Title>
    <CreatedDate>07/09/2020</CreatedDate>
    <ClosedDate>21/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>47508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When defining a record with positional parameters, IDE1006 will tell you to format names as properties, and then tell you to format them back to parameters.

``

**Actual Behavior**:
![image](
and then
![image](


**Expected Behavior**:
My proposal is that IDE1006 simply ignores parameters of record declarations as their usage matches property semantics.
</Description>
  </Issue>
  <Issue>
    <IssueID>47506</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove the three unnecessary using statements from the c# new class template</Title>
    <CreatedDate>06/09/2020</CreatedDate>
    <ClosedDate>11/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;When creating a new c# class this is what happens by default:&lt;/p&gt;&lt;p&gt;- Ctrl+Shift+A - to create a new class&lt;br&gt;- Roslyn &amp;amp; Intellisense kick in, automagically parse my new class and pop up a light bulb telling me to remove the three unused using statements.&lt;/p&gt; &lt;p&gt;- I hit Ctrl+R, G to remove them.&lt;/p&gt; &lt;p&gt;- I go to the default new c# class template and remove the using statements to stop this happening again.&lt;/p&gt; &lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Could you consider tweaking the c# new class template so it doesn't include three unnecessary using statements that are just going to trigger Visual Studio intellisense wizardry anyway?&lt;/p&gt;---### Original Comments#### Jane Wu [MSFT] on 10/11/2019, 07:59 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>47505</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Green build shows as "had test failures"</Title>
    <CreatedDate>06/09/2020</CreatedDate>
    <ClosedDate>06/09/2020</ClosedDate>
    <IssueLabels />
    <Description>See 

The commit with message "Add WRN_EqualityWithNaN_Title"

![image](

How can that happen??

---



![image](

The failing test is: TestCutDismissesCompletion

---



![image](

---</Description>
  </Issue>
  <Issue>
    <IssueID>47504</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>cref output in the public API reference isn't expected</Title>
    <CreatedDate>06/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>47504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

Note: the behavior is correct here. But probably isn't what was intended to appear. So, this is a request to update the documentation rather than saying that doc comment output is wrong.

`cref="float"` was probably intended to appear as "float". But it appears as System.Single, which kind of useless as it's just the same member name. I know it's very clear that float is the same as System.Single. But I believe the original author of these comment was intending this to appear as "float".</Description>
  </Issue>
  <Issue>
    <IssueID>47499</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>WebApplicationError CS1061 'int' does not contain a definition for 'Visible' and no extension method 'Visible' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?)</Title>
    <CreatedDate>06/09/2020</CreatedDate>
    <ClosedDate>06/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace WebApplicationHello
{
    public partial class _Default : Page
    {
        private int Imagecamera;

        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void Buttonhello_Click(object sender, EventArgs e)
        {
            Imagecamera.Visible = !Imagecamera.Visible;
            if (TxtFirstname.Text !="" &amp;&amp; TxtFirstname.Text!="")
            {
                LabelOutput.Text= "Hello" + TxtFirstname.Text +" " +
                    TxtSecondname.Text + ",where is the bear?";
            }
        }

        protected void TxtFirstname_TextChanged(object sender, EventArgs e)
        {

        }

        protected void TxtSecondname_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
`</Code>
    <Description>``

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1061	'int' does not contain a definition for 'Visible' and no extension method 'Visible' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?)	WebApplicationHello	C:\Users\user\OneDrive\awd mrjoel\WebApplicationHello\WebApplicationHello\Default.aspx.cs	21	Active
</Description>
  </Issue>
  <Issue>
    <IssueID>47496</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Outdated/incorrect XML doc on private method</Title>
    <CreatedDate>06/09/2020</CreatedDate>
    <ClosedDate>11/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>47496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

The comment says it returns "true if not contextual". However, it returns "true" for nint and nuint which are contextual.

Changing the behavior to match documentation breaks tests (</Description>
  </Issue>
  <Issue>
    <IssueID>47490</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability analysis in constructor - no warning if autoproperty assigned to itself</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>12/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47490</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47490</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47490</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>47490</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**16.8.0preview2.1 / net5.0preview8**: 

**Steps to Reproduce**:

No error or warning is issued if in the constructor property `A` is assigned to itself (in this case it was a typo- silly me!):
``

Again no error or warning, even if `A` and `B` are fields!

**Expected Behavior**:

A warning should be issued that an uninitialized member is used.

**Actual Behavior**:

No warning or error.
</Description>
  </Issue>
  <Issue>
    <IssueID>47488</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning CS8073's message is confusing</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47488</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>47488</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public void M(DateTime dateTime)
{
    if (dateTime == null) // warning CS8073
    {
        return;
    }
}
`</Code>
    <Description>As per a [blog post]( .NET 5 introduces new warning message `CS8073`.

The following code from the blog post:

``

will produce the following warning after upgrading Analysis Level to 5 as per the blog post:

&gt; Warning CS8073: The result of the expression is always 'false' since the value of type 'DateTime' is never equal to 'null' of type 'DateTime?'

Personally, I would be quite confused by the part `of type ‘DateTime?’` as there is no `DateTime?` mentioned in the code. As there is nothing else in the sample, I guess that `DateTime?` refer to the `null` check as `null` is a valid value for `DateTime?` but not for `DateTime`.

As such, I suggest to reword the message to replace the part `of type ‘DateTime?’` into a suggestion to either remove the condition or change the type of `dateTime` to `DateTime?`. Alternatively, reword it so it is clear what the ending refers to.</Description>
  </Issue>
  <Issue>
    <IssueID>47487</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>47487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect IL generated for function pointer call with `in` parameter</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>30/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Function Pointers</Name>
        <IssueID>47487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>47487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    unsafe class Program
    {
        static void Main(string[] args)
        {
            delegate*&lt;in int, ref char, void&gt; F = &amp;Test;
            char c = 'a';
            F(int.MaxValue, ref c);
        }

        public static void Test(in int b, ref char c)
        {
            Console.WriteLine($"b = {b}, c = {c}");
        }
    }


**Expected Behavior**:
`b = 2147483647, c = a`

**Actual Behavior**:

Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at CSharpCore.Program.Test(Int32 ByRef, Char ByRef)
   at CSharpCore.Program.Main(System.String[])


The IL code passes `int.MaxValue` directly, when it should be passing the address of a temporary.

il
	IL_0000: nop
	IL_0001: ldarg.0
	IL_0002: ldfld method void *(uint8&amp; modreq([System.Runtime]System.Runtime.InteropServices.InAttribute), char&amp;) CSharpCore.FunctionPointersWithRefParams::F1 /* 04000003 */
	IL_0007: stloc.0
	IL_0008: ldc.i4.1
	IL_0009: ldarga.s c
	IL_000b: ldloc.0
	IL_000c: calli void(uint8&amp; modreq([System.Runtime]System.Runtime.InteropServices.InAttribute), char&amp;) /* 11000004 */
	IL_0011: nop
	IL_0012: ret
`</Code>
    <Description>**Version Used**: Visual Studio 2019 16.8.0 Preview 2.1

**Steps to Reproduce**:
``

Note: removing the `ref char c` parameter causes the `in int b` parameter to be passed correctly.</Description>
  </Issue>
  <Issue>
    <IssueID>47485</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>BadImageFormatException when running RoslynDeployment</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>07/09/2020</ClosedDate>
    <IssueLabels />
    <Code>
System.BadImageFormatException
  HResult=0x80131018
  Message=Could not load file or assembly 'Microsoft.CodeAnalysis.CSharp.Workspaces, Version=42.42.42.42, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The module was expected to contain an assembly manifest.
  Source=mscorlib
  StackTrace:
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)
   at Microsoft.VisualStudio.ExtensibilityHosting.FaultCatchingAssemblyLoader.&lt;&gt;c__DisplayClass17_0.&lt;LoadAssembly&gt;b__0(AssemblyName assemblyNameParam)
   at Microsoft.VisualStudio.ExtensibilityHosting.Utilities.SafeGetOrAdd[TKey,TValue](IDictionary`2 dictionary, TKey key, Object lockObj, Func`2 valueFactory)
   at Microsoft.VisualStudio.ExtensibilityHosting.FaultCatchingAssemblyLoader.LoadAssembly(AssemblyName assemblyName)
   at Microsoft.VisualStudio.Composition.Reflection.ResolverExtensions.GetManifest(Resolver resolver, AssemblyName assemblyName)
   at Microsoft.VisualStudio.Composition.Reflection.ResolverExtensions.TryUseFastReflection(TypeRef typeRef, Module&amp; manifest)
   at Microsoft.VisualStudio.Composition.Reflection.ResolverExtensions.Resolve(MethodRef methodRef)
   at Microsoft.VisualStudio.Composition.Reflection.MethodRef.Resolve()
   at Microsoft.VisualStudio.Composition.Reflection.MemberRef.get_MemberInfo()
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.ExportProvider.&lt;&gt;c__DisplayClass55_0.&lt;CreateExport&gt;b__0()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.VisualStudio.Composition.ExportProvider.&lt;&gt;c__DisplayClass71_1`2.&lt;GetExports&gt;b__1()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.CodeAnalysis.Host.Mef.MefLanguageServices.GetService[TLanguageService]() in C:\Users\Youssef1313\Desktop\roslyn\src\Workspaces\SharedUtilitiesAndExtensions\Workspace\Core\Workspace\Mef\MefLanguageServices.cs:line 55
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2.PrimeLanguageServiceComponentsOnBackground() in C:\Users\Youssef1313\Desktop\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractLanguageService`2.cs:line 202
   at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2.&lt;Setup&gt;b__35_0() in C:\Users\Youssef1313\Desktop\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractLanguageService`2.cs:line 106
   at Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.&lt;&gt;c__DisplayClass7_0.&lt;CreateTaskBody&gt;b__0(IVsTask task, IVsTask[] parents)
   at Microsoft.VisualStudio.Shell.VsManagedTaskBody.DoWork(IVsTask pTask, UInt32 dwCount, IVsTask[] pParentTasks, Object&amp; pResult)
   at Microsoft.VisualStudio.Services.VsTask.&lt;&gt;c__DisplayClass118_0.&lt;GetCallbackForMultipleParent&gt;b__0(Task`1[] _)
`</Code>
    <Description>### Repro steps:

1.  (Currently, the latest commit in my PR,  My PR only adds an analyzer and codefix provider, so the changes seem to be unrelated to the exception, correct me if wrong please)
2. Open Roslyn.sln
3. F5 to run RoslynDeployment
4. Create new project
5. See exception:

   ![image](

``

Clicking "Continue" keeps showing other few exceptions in other several places.</Description>
  </Issue>
  <Issue>
    <IssueID>47481</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>For non-annotated APIs please assume reference types returned could be null</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>06/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: netcoreapp3.1 / VS16.7.2

**Steps to Reproduce**:
1. Create a .NET Core WPF project (which isn't null-annotated).
2. Create a ContentPresenter.
3. Access the ContentPresenter.Content property and use it without a null-check. For example: `var stringValue = new ContentPresenter().Content.ToString();`
4. Notice that no nullabilty warning is presented. This despite intellisense literally tells me that's its default value.

![image](

**Expected Behavior**:
Return-values from non-annotated APIs assume reference types could be null.
Perhaps a specific warning that I can always choose to turn off?

**Actual Behavior**:
Analyzer insists this isn't null and never will be. However it'll still allow me to assign it to null: `new ContentPresenter().Content = null;`

In general it would be nice to be able to use nullability annotations but not blindly assume things can't be null when using APIs not annotated yet.</Description>
  </Issue>
  <Issue>
    <IssueID>47478</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>47478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generated razor document text is not registered with a workspace</Title>
    <CreatedDate>05/09/2020</CreatedDate>
    <ClosedDate>30/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>CloudEnv</Name>
        <IssueID>47478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For a generated razor document backing an open razor document, roundtripping from document -&gt; source text -&gt; document (using GetOpenDocumentInCurrentContextWithChanges) fails because the source text of the generated razor file is associated with a Workspace_Registration with a null workspace.  This is because generated razor documents never go through the workspace Open APIs as they are not truly open.  

This fails in a few completion scenarios as it passes SourceText to providers which sometimes jump back to document, e.g. 

We may need to consider manually registering their text with a workspace.</Description>
  </Issue>
  <Issue>
    <IssueID>47471</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>47471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find All References infinitely searches when Unity project Assembly-CSharp has a circular reference through assembly AOTGenerated</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>11/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>47471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This issue tracks the bug report at  (Microsoft-internal)

Apparently the compiler is going through a very slow path (which may include allocations) in `ReuseAssemblySymbols` when the project contains an indirect circular reference. 5GB allocations within code that doesn't accept a cancellation token (entry point is `CSharpCompilation.CommonAssembly`).
</Description>
  </Issue>
  <Issue>
    <IssueID>47470</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Avoid reporting IDE0059 when CS0168 will be reported</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
void Method() {
  try {
    Call();
  } catch (Exception ex) {
  }
}
`</Code>
    <Description>The following code produces IDE0059 and CS0168 for the local variable `ex`:

``

It would be better if IDE0059 was not reported for the specific subset of cases where CS0168 is already going to be reported.

🔗 Originally reported by @ericwj in </Description>
  </Issue>
  <Issue>
    <IssueID>47469</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>47469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Follow up on fire &amp; forget in EditAndContinueSaveFileCommandHandler.OnSourceFileUpdatedAsync</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- what happens with exceptions here? does this trigger the unhandled exception codepaths?
 this pattern will not work for integrationtests/asyncwaiters. this should likely take in the appropriate integration test IAsyncListener stuff and have that be threaded through here. that way you could actually write an integration test that saves, then waits for EnC work to finish, then validates the result.</Description>
  </Issue>
  <Issue>
    <IssueID>47467</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>47467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetDeclaredSymbol in top-level statements</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>10/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        [Fact]
        public void Test()
        {
            var comp = CreateCompilation(@"
#nullable enable
T GetDefault&lt;T&gt;(T defaultValue = default) =&gt; defaultValue;
", options: TestOptions.ReleaseExe);

            var tree = comp.SyntaxTrees[0];
            var localFunction = tree.GetRoot().DescendantNodes().OfType&lt;LocalFunctionStatementSyntax&gt;().Single();
            var model = comp.GetSemanticModel(tree);

            AssertEx.Equal("", model.GetDeclaredSymbol(localFunction).ToTestDisplayString());
        }



    System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol' to type 'Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedSimpleProgramEntryPointSymbol'.
    Stack Trace:
       at Microsoft.CodeAnalysis.CSharp.Binder.BindSimpleProgram(CompilationUnitSyntax compilationUnit, DiagnosticBag diagnostics) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs:line 3315
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Binder/Binder_Statements.cs:line 3306
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MethodBodySemanticModel.cs:line 104
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.&lt;EnsureNullabilityAnalysisPerformedIfNecessary&gt;g__bind|131_0(CSharpSyntaxNode root, DiagnosticBag diagnosticBag, Binder&amp; binder, &lt;&gt;c__DisplayClass131_0&amp; ) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 1979
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.EnsureNullabilityAnalysisPerformedIfNecessary() in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 1955
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetRemappedSymbol[T](T originalSymbol) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 704
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredLocalFunction(LocalFunctionStatementSyntax declarationSyntax) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 697
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(LocalFunctionStatementSyntax declarationSyntax, CancellationToken cancellationToken) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/MemberSemanticModel.cs:line 604
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(LocalFunctionStatementSyntax declarationSyntax, CancellationToken cancellationToken) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/SyntaxTreeSemanticModel.cs:line 1507
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolCore(SyntaxNode node, CancellationToken cancellationToken) in /home/fred/git/roslyn/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs:line 5014
   at Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolForNode(SyntaxNode declaration, CancellationToken cancellationToken) in /home/fred/git/roslyn/src/Compilers/Core/Portable/Compilation/SemanticModel.cs:line 397
   at Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(SemanticModel semanticModel, SyntaxNode declaration, CancellationToken cancellationToken) in /home/fred/git/roslyn/src/Compilers/Core/Portable/Compilation/Extensions.cs:line 134
   at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenFunctionPointersTests.Test() in /home/fred/git/roslyn/src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenFunctionPointersTests.cs:line 9825
`</Code>
    <Description>This test crashes:

``</Description>
  </Issue>
  <Issue>
    <IssueID>47465</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Refactoring: inline method group</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
int M() { return 1; }
Func&lt;int&gt; a = M; // inline

-&gt;
cs
Func&lt;int&gt; a = () =&gt; { return 1; };
`</Code>
    <Description>&lt;sub&gt;Moved from 


``
cc @Cosifne</Description>
  </Issue>
  <Issue>
    <IssueID>47463</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>47463</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Conditional Local Functions are considered unused</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47463</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47463</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Diagnostics;

public class C {
    public void M() {
        local();
        
        [Conditional("DEBUG")]
        static void local() {} // Warning: unused local function
    }
}
`</Code>
    <Description>``

This reproes when compiling for release mode.</Description>
  </Issue>
  <Issue>
    <IssueID>47460</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS incorrectly handles Checked name in if statement</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>47460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---If you have C# class Foo with Checked property and you type``Expected behavior is cursor going after closing brace.---### Original Comments#### Feedback Bot on 9/4/2020, 01:40 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47455</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler Deficiency: ConditionalAttribute not allowed for local functions</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Whatever comes with VS 16.7.2.

**Steps to Reproduce**:

1. Create a class. Let's call it `C`.
2. Create a method in `C`. Let's call it `method1`.
3. Create a local function in `method1`. Let's call it `method2`.
4. Decorate `method1` with `[Conditional("DEBUG")]`.
4.1 Note how this produces no errors (given correct `using`'s).
5. Decorate `method2` with `[Conditional("DEBUG")]`.

**Expected Behavior**:
No CS8783. Conditional applied as per user-expectations.

**Actual Behavior**:
After step 5, produces CS8783, claiming "must be 'static' in order to use the Conditional attribute".


According to documentation at
 

"Local functions are private methods"
without any mention that statement would only apply to `static` local function.

Since a local function, regardless of static or not, is a `method`, it follows they should allow the attempted attribute decoration.

That the compiler generates helper-class(es) for local non-static functions is not a valid excuse for not handling this scenario.</Description>
  </Issue>
  <Issue>
    <IssueID>47451</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Sort properties of a class through the solution manager and apply to the project code.</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has a corresponding [ticket on Developer Community]( Please vote and comment there to make sure your voice is heard._

---
Create a drop-down menu after multiple selection of items to sort properties of a class through the Solution Explorer, immediately applying changes to the project code to increase maintenance productivity, as we can have classes with more than 100 properties to be serialized and consumed by our consumers. 

Thank you!
&lt;p&gt;&lt;a href=" Image:126248-sort-propertier-a-class.png&lt;/a&gt;&lt;/p&gt;

---
### Original Comments

#### Feedback Bot on 4/1/2020, 08:20 PM: 

Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47449</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpSyntaxTree.ParseText not returning MethodDeclarationSyntax</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**3.7.0**: 

**Steps to Reproduce**:

``
**Expected Behavior**:
methodDeclarationSyntax should have a value. It works on 3.6.0 and older versions.
**Actual Behavior**:
methodDeclarationSyntax is null.
</Description>
  </Issue>
  <Issue>
    <IssueID>47448</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Mark `public` modifier on interface methods as unnecessary</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30427.284.main]

**Steps to Reproduce**:

``

**Expected Behavior**:

`public` is marked as unnecessary.

**Actual Behavior**:


</Description>
  </Issue>
  <Issue>
    <IssueID>47447</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go to Implementation should show containing type for nested types</Title>
    <CreatedDate>04/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>47447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30427.284.main]

**Steps to Reproduce**:

Invoke "Go To Implementation" on `NestedType` and `M`.

``

**Actual Behavior**:

![image](

![image](

**Expected Behavior**:

In both cases the containing type should be part of the displayed name. It's missing from nested types.</Description>
  </Issue>
  <Issue>
    <IssueID>47446</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>47446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Debugging latest master fails to load MS.VS.LanguageServer.Protocol.dll</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>47446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.IO.FileLoadException: 'Could not load file or assembly 'Microsoft.VisualStudio.LanguageServer.Protocol, Version=16.8.5.21822, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'


This seems to only occur during debugging as I am attempting to load a different version of this assembly than the one inserted into VS.

### Pkgdef in the hive
The locally built extension pkgdef contains the following entry at C:\Users\dabarbet\AppData\Local\Microsoft\VisualStudio\16.0_b2f0f458RoslynDev\Extensions\Microsoft\Roslyn Language Services\42.42.42.4242424

[$RootKey$\RuntimeConfiguration\dependentAssembly\codeBase\{FB6340FB-E686-1705-828D-71624B1708D6}]
"name"="Microsoft.VisualStudio.LanguageServer.Protocol"
"publicKeyToken"="b03f5f7f11d50a3a"
"culture"="neutral"
"version"="16.8.5.21822"
"codeBase"="$PackageFolder$\Microsoft.VisualStudio.LanguageServer.Protocol.dll"

This is the correct version.

### Pkgdef in the VS install directory
The base VS install I'm using has this pkgdef, which is the correct version for the base VS install (comes from the master-vs-deps branch)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Main\Common7\IDE\CommonExtensions\Microsoft\ManagedLanguages\VBCSharp\LanguageServices

[$RootKey$\RuntimeConfiguration\dependentAssembly\codeBase\{C3566752-8BA5-EF97-4C46-8CEF568A85E1}]
"name"="Microsoft.VisualStudio.LanguageServer.Protocol"
"publicKeyToken"="b03f5f7f11d50a3a"
"culture"="neutral"
"version"="16.8.52.10791"
"codeBase"="$PackageFolder$\Microsoft.VisualStudio.LanguageServer.Protocol.dll"


### Hive devenv.exe.config
The devenv.exe.config for the hive ends up with the following incorrect codebase - it should be 16.8.5.21822 since I deployed the new roslyn extension to that hive

&lt;dependentAssembly&gt;
	&lt;assemblyIdentity name="Microsoft.VisualStudio.LanguageServer.Protocol" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/&gt;
	&lt;codeBase version="16.8.52.10791" href="c:\program files (x86)\microsoft visual studio\2019\main\common7\ide\commonextensions\microsoft\managedlanguages\vbcsharp\languageservices\Microsoft.VisualStudio.LanguageServer.Protocol.dll"/&gt;
&lt;/dependentAssembly&gt;
`</Code>
    <Description>On 



``

I do not know how long this has been like this, but I believe it previously used to work because the probing path contained the version of the dll we were looking for (from typescript).  This version has changed so now it picks the wrong version.  I'm pretty sure that this also used to pick up the correct version from the extension, rather than the main VS install.</Description>
  </Issue>
  <Issue>
    <IssueID>47445</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>47445</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CodeLens doesn't work on records</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47445</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>47445</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47445</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47445</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Person
{
    public string Name { get; init; }
}

public record PersonRecord
{
    public string Name { get; init; }
}

public static class Factory
{
    public static Person MakePerson(string name)
        =&gt; new() { Name = name };

    public static PersonRecord MakeRecord(string name)
        =&gt; new() { Name = name };
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 16.8.0 Preview 2.1
.NET SDK 5.0.100-preview.8.20417.9
Compiler version: '3.8.0-2.20418.7 (0276b9b7)'. Language version: 9.0.

**Steps to Reproduce**:

Enter the following code:

``

**Expected Behavior**:

Code Lens shows number of references above `PersonRecord` and `PersonRecord.Name`.

**Actual Behavior**:

Code Lens is missing for record type and its members:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>47444</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unobtrusive Inline Parameter Name Hints (like Rider)</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47444</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;Would be great to have unobtrusive inline parameter name hints shown in VS as an alternative to C# named parameters (which are too obtrusive and create clutter). Would be great if these could be turned on for all function calls apart from single parameter function calls (where parameter name/purpose is usually implicit from function name). This would actually be better than Rider where inline parameter name hints are only supported for certain parameter types. NB: I am not requesting any source code changes, just hints that are inline (see &lt;a href="---### Original Comments#### Feedback Bot on 5/6/2020, 05:04 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47443</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Quick Watch: Find Field</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>47443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>47443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;The quick watch window should have a find field feature.&lt;/p&gt; &lt;p&gt;It should work as a filter system, filtering out all fields which don't match the quick find criteria (as in stricmp).&lt;/p&gt;---### Original Comments#### Feedback Bot on 3/17/2020, 10:42 PM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47442</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>47442</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Object initializer block for target-typed new is not indented correctly in an expression-bodied method</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47442</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47442</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>47442</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Target-Typed New</Name>
        <IssueID>47442</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Person
{
    public string Name { get; set; }

    public static Person Create(string name)
        =&gt; new()
        {
            Name = name
        };
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 16.8.0 Preview 2.1
.NET SDK 5.0.100-preview.8.20417.9
Compiler version: '3.8.0-2.20418.7 (0276b9b7)'. Language version: 9.0.

**Steps to Reproduce**:

1. Write an expression-bodied member that uses target-typed new and an object initializer:

``

2. Let the document auto-format or you manually invoke it by running Code Cleanup or with Edit &gt; Advanced &gt; Format Document

**Expected Behavior**:

The indentation remains the same as the code snippet is written above.

**Actual Behavior**:

The initializer block is indented one less than it should be:

![image](

Note that it works as expected for normal block-bodied methods and for expression-bodied methods using traditional new syntax.

This might be related to #47438, but I'm filing it separately since they're two different language features.</Description>
  </Issue>
  <Issue>
    <IssueID>47441</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Convert to Full Property with option for Backing Variable or MyBase</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>47441</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Visual Basic 2019When converting to Full Property give the user a choice of using the MyBase property or a separate Backing Variable.``---### Original Comments(no comments)</Description>
  </Issue>
  <Issue>
    <IssueID>47440</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Auto fix semicolon missing issue</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;If the compiler detect there is a semicolon missing in line {N}, It should add a semicolon itself, currently it gives error.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CS1002 ; expected&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;---### Original Comments#### Feedback Bot on 7/12/2020, 08:55 PM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47439</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow to read and update an xlsx file</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;I want to read and update an xlsx file in Community with Visual Basic.&lt;/p&gt;---### Original Comments#### Feedback Bot on 5/11/2020, 10:44 PM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47438</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>47438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Object initializer block for `with` statement on record is not indented correctly in an expression-bodied method</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>14/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>47438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static class Test
{
    public static MyRecord WithNameSuffix(this MyRecord record, string nameSuffix)
        =&gt; record with
        {
            Name = record.Name + nameSuffix
        };
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 16.8.0 Preview 2.1
.NET SDK 5.0.100-preview.8.20417.9
Compiler version: '3.8.0-2.20418.7 (0276b9b7)'. Language version: 9.0.

**Steps to Reproduce**:

1. Write an expression-bodied member that uses `with` on a record type:

``

2. Let the document auto-format or you manually invoke it by running Code Cleanup or with Edit &gt; Advanced &gt; Format Document

**Expected Behavior**:

The indentation remains the same as the code snippet is written above.

**Actual Behavior**:

The initializer block is indented one less than it should be:

![image](

Note that it works as expected for normal block-bodied methods. Also demonstrated is that is works as expected with a switch expression.

This might be related to #47442, but I'm filing it separately since they're two different language features.</Description>
  </Issue>
  <Issue>
    <IssueID>47437</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow Signature Help API documentation's URL to be clickable</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;An image would explain it better here:&lt;/p&gt;&lt;p&gt;&lt;a href=" Image:113587-read.png&lt;/a&gt;&lt;br&gt;I would like to be able to click on that link on the function's documentation.&lt;/p&gt;---### Original Comments#### Feedback Bot on 1/14/2020, 00:24 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47436</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>When implementing an interface, methods should already have "inheritdoc" </Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When I implement an interface in a new class and ask VS to implement the missing methods, I would hope VS would also see which ones have comments and automatically add "/// &lt;inheritdoc/&gt;" at the top of those methods. If I'm pulling an interface, it should already be documented from the parent class.Even if I change their design, having some documentation exposed to the methods is better than none.---### Original Comments#### Feedback Bot on 5/6/2020, 03:58 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47435</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>StackOverflowException on self reference</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
I made a silly error and was surprised that the compiler didn't catch it.  I self-referenced a class and it crashed with a StackOverflowException.  It was actually kinda hard to find because the class doesn't get instantiated until you're deep in my system.

``

In the constructor I had a request for the same class's interface.  So, when DI started it created an endless instantiation loop.  This is a request to have the build engine be a better programmer than I am.
Thanks,
Joel

---
### Original Comments

#### Feedback Bot on 7/1/2020, 01:02 AM: 

Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47434</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Need new Editor Error</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47434</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47434</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---In C#, the compiler allows and builds :               ``Can you give an error at edit time and prevent compiling?---### Original Comments#### Feedback Bot on 3/26/2020, 07:30 PM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47433</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intellisense warning: Not all code paths return a value. I think it shouldnot show the warning in my code snippet.</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I have a code snippet:enum E{	A, B, C}class Test{	int Method(E e)	{		switch (e)		{			case E.A: return 0;			case E.B: return 1;			case E.C: return 2;		}	}}There will be an error at "Method" line: "Not all code paths return a value".But i think the compiler/the IDE should know exactly that the Method WILL ALWAYS RETURN A VALUE.And therefore there will have no error at all.Sorry if i was wrong. Thank you for reading---### Original Comments#### Feedback Bot on 1/6/2020, 00:47 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47432</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Adobe Indesign Object Model</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>04/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Is it possible to Import the Adobe InDesign Object Model?I would like to be able to develop Adobe InDesign VBScripts in Visual Studio.---### Original Comments#### Feedback Bot on 6/28/2020, 00:18 AM: We have converted this feedback item from problem to idea. This change was done to better reflect the feedback's nature.#### Feedback Bot on 6/29/2020, 00:48 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47431</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Avoid BadImageFormatException with compile-time checking</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47431</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---It seems like it would be possible to perform a compile-time check of referenced DLLs to ensure the CPU architectures are compatible. As it stands now, if an x64 process attempts to call an x86 DLL (or vice-versa) a BadImageFormatException occurs at runtime. This is obviously less than ideal.---### Original Comments#### Feedback Bot on 7/2/2020, 10:37 PM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47430</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>47430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intellisense does not work within a with initializer block when the record is a generic type</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>15/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47430</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public abstract record MyRecord
{
    public string Name { get; init; }
}

public static class Test
{
    public static TRecord WithNameSuffix&lt;TRecord&gt;(this TRecord record, string nameSuffix)
        where TRecord : MyRecord
        =&gt; record with
        {
            $$
        };
}
`</Code>
    <Description>**Version Used**:

Visual Studio 16.8.0 Preview 2.1
.NET SDK 5.0.100-preview.8.20417.9
Compiler version: '3.8.0-2.20418.7 (0276b9b7)'. Language version: 9.0.

**Steps to Reproduce**:

With the following code with the cursor at `$$`, invoke Intellisense:

``

**Expected Behavior**:

Intellisense suggests the `Name` property.

**Actual Behavior**:

Intellisense gets confused and gives generic results:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>47427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suppress with attribute adds a blank line between members with xml doc comments</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30431.218.main]

**Steps to Reproduce**:

``

Try to suppress the `unused` parameter.

**Expected Behavior**:
The attribute is added.

**Actual Behavior**:
The attribute is added, and an extra blank line is added between x and Method.
</Description>
  </Issue>
  <Issue>
    <IssueID>47424</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NRE in Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitConditionalOperatorCore</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable

struct C
{
    (C?, C?) M()
    {
        return (true ? new C() : (C?)null, null);
    }
}



&gt; Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.


Exception occurred with following context:
SyntaxNode: (C?)null [CastExpressionSyntax]@[91..99) (6,33)-(6,41)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitConditionalOperatorCore(BoundExpression node, Boolean isRef, BoundExpression condition, BoundExpression originalConsequence, BoundExpression originalAlternative)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitUnconvertedConditionalOperator(BoundUnconvertedConditionalOperator node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.&lt;&gt;c.&lt;VisitTupleExpression&gt;b__206_0(BoundExpression a, NullableWalker w)
   at System.Collections.Immutable.ImmutableArray.CreateRange[TSource,TArg,TResult](ImmutableArray`1 items, Func`3 selector, TArg arg)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitTupleExpression(BoundTupleExpression node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitTupleLiteral(BoundTupleLiteral node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitConvertedTupleLiteral(BoundConvertedTupleLiteral node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitOptionalImplicitConversion(BoundExpression expr, TypeWithAnnotations targetTypeOpt, Boolean useLegacyWarnings, Boolean trackMembers, AssignmentKind assignmentKind)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitReturnStatement(BoundReturnStatement node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`2.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(NullableWalker walker, Symbol symbol, DiagnosticBag diagnostics, VariableState initialState, Builder snapshotBuilderOpt)
   at Microsoft.CodeAnalysis.CSharp.NullableWalker.AnalyzeAndRewriteSpeculation(Int32 position, BoundNode node, Binder binder, SnapshotManager originalSnapshots, SnapshotManager&amp; newSnapshots, ImmutableDictionary`2&amp; remappedSymbols)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.EnsureNullabilityAnalysisPerformedIfNecessary()
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ReplacementChangesSemanticsForNodeLanguageSpecific(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Simplification.Simplifiers.CastSimplifier.IsCastSafeToRemove(ExpressionSyntax castNode, ExpressionSyntax castedExpressionNode, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.Simplifiers.CastSimplifier.IsUnnecessaryCast(ExpressionSyntax cast, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IsUnnecessaryCast(SemanticModel model, ExpressionSyntax cast, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnnecessaryCast.AbstractRemoveUnnecessaryCastDiagnosticAnalyzer`2.TryRemoveCastExpression(SemanticModel model, TCastExpression node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.RemoveUnnecessaryCast.AbstractRemoveUnnecessaryCastDiagnosticAnalyzer`2.AnalyzeSyntax(SyntaxNodeAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__62`1.&lt;ExecuteSyntaxNodeAction&gt;b__62_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
`</Code>
    <Description>**Version Used**: 16.8.0-p2.1

Repro:

``</Description>
  </Issue>
  <Issue>
    <IssueID>47419</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No documents in projects</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47419</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>47419</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-MSBuildWorkspace</Name>
        <IssueID>47419</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.7 (Microsoft.CodeAnalysis)
**Steps to Reproduce**:

1. Create a solution
2. Add some projects  (.NET Core: Console, WPF, XUnit Test) to it and some CSharp/XAML files to the projects
3. Create another project into the solution and load the complete solution using roslyn
4. Iterate over projects and check the HasDocument and DocumentIds.
5. Verify the HasDocument = false and DocumentsIds.Count() = 0.

Code used to open solution:

        public async Task&lt;Solution&gt; OpenSolution(string path)
        {
            MSBuildWorkspace workSpace = MSBuildWorkspace.Create();
            Solution solution = await workSpace.OpenSolutionAsync(path);
            return solution;
        }


**Expected Behavior**:
All XAML/CS files should be recognized. All other files like config, images, etc should also be accessible.
`solution.Projects.All(x =&gt; x.HasDocuments);` //should evaluate to true

**Actual Behavior**:
No documents found.
`solution.Projects.All(x =&gt; x.HasDocuments);` //evaluates to false

Edit:
After printing the diagnotics of the workspace, I come across the following error message:

&gt; The SDK 'Microsoft.NET.Sdk.WindowsDesktop' specified could not be found.
or
&gt; The SDK 'Microsoft.NET.Sdk' specified could not be found. 

based on the project type. Well, on some github repos and stackoverflow pages, I found that you should set MsBuildSdkPath to the location of the .NET Core SDK. Wellllll.... although it doesn't make any sense, I did it, but it didn't work for me.</Description>
  </Issue>
  <Issue>
    <IssueID>47415</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>BringIntoView doesn't work from the CodeLens if the document is closed.</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>47415</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Class1.Test();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
        }
    }
}



Class1.cs:
C#
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    class Class1
    {
        public static void Demo()
        {
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Class1.Test();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
        }

        public static void Test()
        {

        }
    }
}
`</Code>
    <Description>**Version Used**: 16.7.2

**Steps to Reproduce**:

1. Create a Console Application with the following 2 files:

Program.cs:
``
2. Click `2 references` of method `Class1.Test` in CodeLens and click `Dock Popup`
3. Close All Tabs
4. DoubleClick `Class1.Test();` in CodeLens

**Expected Behavior**: `Class1.Test();` is in the vision when open the document

**Actual Behavior**:`Class1.Test();` isn't in the vision when open the document:
![image](

Here, VS try to navigate the result in the bottom of the document, but it must make some mistakes in calculating, it's better to show result in the center of the document (like `Find All References` do)

</Description>
  </Issue>
  <Issue>
    <IssueID>47414</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis.Common dependency warning</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47414</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Microsoft Visual Studio Community 2019 Preview
Version 16.8.0 Preview 2.0

.Net 5.0.100-preview.8.20417.9
Microsoft.CodeAnalysis.Common 3.8.0-2.final

**Steps to Reproduce**:

1. Build a project using Microsoft.CodeAnalysis.Common

**Expected Behavior**:

No Build Warning

**Actual Behavior**:

warning NU1603: Microsoft.CodeAnalysis.Common 3.8.0-2.final depends on System.Collections.Immutable (&gt;= 5.0.0-preview.8.20371.14) but System.Collections.Immutable 5.0.0-preview.8.20371.14 was not found. An approximate best match of System.Collections.Immutable 5.0.0-preview.8.20407.11 was resolved.</Description>
  </Issue>
  <Issue>
    <IssueID>47413</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>RegisterCompilationEndAction not getting called</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47413</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47413</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
public override void Initialize(AnalysisContext context)
{
         context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | 
                                                                                 GeneratedCodeAnalysisFlags.ReportDiagnostics);
            context.EnableConcurrentExecution();
            
            context.RegisterCompilationStartAction(ctx =&gt;
            {
                var analyzerContext = new AnalyzerContext(ctx.Compilation);
                ctx.RegisterSymbolAction(analyzerContext.AnalyzeNamedTypeSymbol, SymbolKind.NamedType);
                ctx.RegisterCompilationEndAction(analyzerContext.AnalyzeCompilationEnd);
            });
}
.....
.....

.....
public void AnalyzeCompilationEnd(CompilationAnalysisContext context)
{
     ......
     ......
}
`</Code>
    <Description>**Version Used**: 
3.7.0

**Steps to Reproduce**:

1. Using Visual Studios 2019 16.7.2 version.
2. Following code : 

``
**Expected Behavior**:
AnalyzeCompilationEnd method should be called after Compilation End.

**Actual Behavior**:
AnalyzeCompilationEnd is never called.</Description>
  </Issue>
  <Issue>
    <IssueID>47411</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>47411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>(CSharpScript + linq + await) will compile errors!</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>47411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Rolsyn: 3.7.0
.NET Core: 3.1

**Steps to Reproduce**:

``

**Expected Behavior**:

Compile normally!

**Actual Behavior**:

Compile error!
</Description>
  </Issue>
  <Issue>
    <IssueID>47410</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky test - TestConcurrentGetAnalyzerDiagnostics_SymbolStartAnalyzer</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>47410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>47410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.InvalidOperationException : \r\n


Stack trace:

at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage) in /_/src/Test/Utilities/Portable/ThrowingTraceListener.cs:line 26
   at System.Diagnostics.TraceListener.Fail(String message)
   at System.Diagnostics.TraceInternal.Fail(String message)
   at System.Diagnostics.Debug.Assert(Boolean condition)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.VerifyNewEntryForPendingMemberSymbolsMap(ISymbol symbol, HashSet`1 dependentSymbols) in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.AnalyzerExecutionContext.cs:line 226
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.&lt;&gt;c__DisplayClass14_0.&lt;GetSymbolAnalysisScopeAsync&gt;g__getSymbolAnalysisScopeCore|2() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.AnalyzerExecutionContext.cs:line 160
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.AnalyzerExecutionContext.&lt;&gt;c__DisplayClass14_0.&lt;GetSymbolAnalysisScopeAsync&gt;b__1() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.AnalyzerExecutionContext.cs:line 140
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsAsync&gt;d__67.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs:line 846
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.&lt;GetSymbolAnalysisScopeCoreAsync&gt;d__9.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs:line 108
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.&lt;GetSymbolAnalysisScopeAsync&gt;d__8.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs:line 97
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__13.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerManager.cs:line 182
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;&lt;GetPerSymbolAnalyzerActionsAsync&gt;g__getSymbolActionsCoreAsync|148_2&gt;d.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 2140
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;&lt;GetPerSymbolAnalyzerActionsAsync&gt;g__getAllActionsAsync|148_0&gt;d.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 2097
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__148.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 2088
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;GetPerSymbolAnalyzerActionsAsync&gt;d__147.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 2049
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;TryProcessSymbolDeclaredAsync&gt;d__132.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 1603
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;TryProcessEventCoreAsync&gt;d__131.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 1565
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessEventAsync&gt;d__129.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 1479
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.&lt;ProcessCompilationEventsCoreAsync&gt;d__128.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/AnalyzerDriver.cs:line 1466
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GetAnalyzerSemanticDiagnosticsCoreAsync&gt;d__65.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs:line 674
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GetAnalyzerSemanticDiagnosticsAsync&gt;d__60.MoveNext() in /_/src/Compilers/Core/Portable/DiagnosticAnalyzer/CompilationWithAnalyzers.cs:line 615
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CSharp.UnitTests.GetDiagnosticsTests.&lt;TestConcurrentGetAnalyzerDiagnostics_SymbolStartAnalyzer&gt;d__20.MoveNext() in /_/src/Compilers/CSharp/Test/Semantic/Diagnostics/GetDiagnosticsTests.cs:line 666
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>Microsoft.CodeAnalysis.CSharp.UnitTests.GetDiagnosticsTests.TestConcurrentGetAnalyzerDiagnostics_SymbolStartAnalyzer

Failing build: 
(I've also seen this test fail a few times over the last few days.)

Error:
``</Description>
  </Issue>
  <Issue>
    <IssueID>47408</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Solution Crawler should suspend operations during solution close</Title>
    <CreatedDate>03/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>47408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Close</Name>
        <IssueID>47408</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In  we suspended turning project references -&gt; binary references during solution close. 

@sharwell had a further suggestion:

&gt; For me, this change drops solution close from ~12 seconds to ~8 seconds. Significant work is still done by custom COM handling in the running document table. If Roslyn wanted to make further changes, we could suspend the Solution Crawler as soon as we get a Solution Closing notification.

This bug is representing that suggestion.</Description>
  </Issue>
  <Issue>
    <IssueID>47399</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misleading type error with implicit operator in generic type, from generic argument type to that generic type, when the generic argument is an interface</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47399</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>47399</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;
public class BadError&lt;T&gt; {
   public static implicit operator BadError&lt;T&gt;(T value) =&gt; new BadError&lt;T&gt;();
}
public class GoodError {
   // user-defined conversions to or from an interface are not allowed
   public static implicit operator GoodError(IReadOnlyList&lt;int&gt; value) =&gt; new GoodError();
}
public static class ObBoi {
   public static void Main()
   {
      IReadOnlyList&lt;int&gt; list = new List&lt;int&gt;();
      // Cannot implicitly convert type 'System.Collections.Generic.IReadOnlyList&lt;int&gt;' to 'BadError&lt;System.Collections.Generic.IReadOnlyList&lt;int&gt;&gt;'. An explicit conversion exists (are you missing a cast?)
      BadError&lt;IReadOnlyList&lt;int&gt;&gt; a = list;
   }
}
`</Code>
    <Description>---
**Issue moved from dotnet/core#3939**
- Please respond to @markonius.

---

_From @markonius on Sunday, December 1, 2019 7:16:44 PM_

Fedora 31, dotnet 3.0.100

When using an implicit operator from a type variable `T` to a concrete type, if the type argument is an interface, a misleading error is shown: `Cannot implicitly convert type 'SomeType' to 'SomeGeneric&lt;SomeType&gt;'. An explicit conversion exists (are you missing a cast?)`
There is no explicit cast.

Here is a minimal example:

``</Description>
  </Issue>
  <Issue>
    <IssueID>47396</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS2019 doesn’t want to respect my solution’s .editorconfig’s C# tab settings when it auto formats code</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>47396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Direct customer ask copying here: 

&gt;o	It uses spaces still. Even after I configured the C# Text Editor settings to use tabs as well
o	I generated the .editorconfig initially using the IntelliCode generator, then changed the indent style to tabs
o	When I type the ‘}’ character and it ends up auto formatting to try and place my cursor in between the {} on a empty line. I have to Ctrl Z to get out of the auto formatting
o	When I use refactoring suggestions, like converting a switch statement to a pattern matching statement, all the converted code is using spaces
o	If I format document/selection, VS correctly uses tabs
o	This almost feels like a passive aggressive way to try and convert me to spaces. Do not want 😊
</Description>
  </Issue>
  <Issue>
    <IssueID>47394</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Interface extension method not found by VS</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47394</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:Other]
HiIt's legal in c# to define an extension method for an interface. A class implementing this interface must be able to call that method. Strangely, this works properly for `this. CallExtensionMethod()`, but VS displays an error for `CallExtensionMethod()`, i.e. when `this` gets omitted. See code below for a better explanation: ``---### Original Comments#### Feedback Bot on 9/2/2020, 00:02 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47393</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Find All References does not find implicitly typed usage</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>47393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When using Find All References on a type (specifically a class), my expectation is that this will list all code where the type is used. If the type is used implicitly, by being inferred by the compiler, Find All References will not list that usage.For example, either of the below will be listed:``From a functional point of view, this is not a distinction I make when I want to Find All References to a type. I want to see where the type is used, not where the name is typed out explicitly.---### Original Comments#### Feedback Bot on 9/1/2020, 07:18 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47390</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Disable reference conversion during Solution Close operations</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>47390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Close</Name>
        <IssueID>47390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a tracking bug for the work to disable P2P -&gt; assembly reference conversion when closing a project during solution close (since obviously all projects are going to be closed). Thanks for the fast turnaround!</Description>
  </Issue>
  <Issue>
    <IssueID>47387</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB should emit PreserveBaseOverridesAttribute on methods with methodimpl for a class override</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>47387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Covariant Returns</Name>
        <IssueID>47387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If and when the VB compiler produces a methodimpl entry for an override of a class method (see `OverrideHidingHelper.RequiresExplicitOverride(implementingMethod)`), it should also produce the attribute `PreserveBaseOverridesAttribute` on the method. This is per recent runtime specification changes (see  and to ensure that the runtime behavior aligns with the language behavior in binary compat scenarios. (This is independent of whether or not covariant returns are used)</Description>
  </Issue>
  <Issue>
    <IssueID>47386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[loc][query] Assistance with translation</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>47386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:


String Resource ID | 0; "IDS_Return"
-- | --
Source String | return
Subtenant | dotnet_roslyn
Source Control Link |  
Filename | Compilers\CSharp\Portable\xlf\CSharpResources.xlf
Question | Please, could you confirm if "return" can be translated in this case? If yes, could you confirm if it is a verb or a noun?



**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>47385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Question] csproj's DefineConstants</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>



Are both `,` and `;` supported? or one of the above is buggy?

To me, it seems like the `,` is buggy.

See </Description>
  </Issue>
  <Issue>
    <IssueID>47384</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>47384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>.editorconfig diagnostic suppressions don't apply to source-generated files</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Editor Config</Name>
        <IssueID>47384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47384</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The failures in  demonstrate this, I think. We have this set in our .editorconfig:



When we had the file checked in explicitly, then I'm guessing this took effect; when it's converted to source generator output, we're now getting warnings from the source-generated file.

It's not clear to me if the real fix here is we need to switch some of those settings to be global suppressions so they apply everywhere.</Description>
  </Issue>
  <Issue>
    <IssueID>47382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Introduce Local" refactoring hard-coded to use CRLF</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>47382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

**Expected Behavior**: Refactoring following EOL convention of document.

**Actual Behavior**: Refactoring is hard-coded to introduce CRLF, turning LF-only documents into "MIXED" EOL sequence.


The referenced code was just an obvious bug location I spotted while reseaching this bug. Unknown if it's reproduced in other places.</Description>
  </Issue>
  <Issue>
    <IssueID>47381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Brace completion on target-typed-new introduces a new line</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Target-Typed New</Name>
        <IssueID>47381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I intend to type `C c = new() { ... };` but a newline gets introduced, which is pretty annoying.

![target-typed-new-completion](

Relates to 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47381</IssueID>
        <PullRequestID>47383</PullRequestID>
        <Title>Trigger completion in 'new()' expression</Title>
        <Description>Fixes #46397
Fixes #47381 </Description>
        <CreatedDate>02/09/2020</CreatedDate>
        <ClosedDate>09/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>47381</IssueID>
            <PullRequestID>47383</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>47381</IssueID>
            <PullRequestID>47383</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Target-Typed New</Name>
            <IssueID>47381</IssueID>
            <PullRequestID>47383</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>sharwell</FixedById>
            <PullRequestID>47383</PullRequestID>
            <IssueID>47381</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47383</PullRequestID>
            <IssueID>47381</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47380</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Simple Program: Synthesized simple program entry point must take nullable context into account</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
throw null!;


**Expected Behavior**:
csharp



[CompilerGenerated]
internal static class &lt;Program&gt;$
{
    [System.Runtime.CompilerServices.NullableContext(1)]
    private static void &lt;Main&gt;$(string[] args)
    {
        throw null;
    }
}

**Actual Behavior**:
Entry point isn't annotated with `[System.Runtime.CompilerServices.NullableContext(1)]`:

csharp
[CompilerGenerated]
internal static class &lt;Program&gt;$
{
    private static void &lt;Main&gt;$(string[] args)
    {
        throw null;
    }
}
`</Code>
    <Description>**Version Used**: 
Compiler version: '3.8.0-ci (&lt;developer build&gt;)'. Language version: preview.
Branch: master
Latest commit e7bad77 

**Steps to Reproduce**:
Compile the following program:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>47378</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Operator overloading of concrete IDictionary, IReadOnlyDictionary and both is inconsistent depending on whether the type arguments of the interfaces are concrete</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47378</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: latest master (e7bad77)

**Steps to Reproduce**:


Change the call in `Main` from `M` to `M2`.

**Expected Behavior**: The output stays the same: `3` regardless of `M` and `M2`.

**Actual Behavior**: `3` is outputted when calling `M`, and `error CS0121: The call is ambiguous between the following methods or properties: 'C.M2&lt;TKey, TValue&gt;(IDictionary&lt;TKey, TValue&gt;)' and 'C.M2&lt;TKey, TValue&gt;(IReadOnlyDictionary&lt;TKey, TValue&gt;)'` when calling `M2`.
</Description>
  </Issue>
  <Issue>
    <IssueID>47376</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature Request]: Highlight TODO comments</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It would be nice if TODO comments are highlighted in a different color. If this is accepted, I'll be glad to implement this, but will need a starting point on how this should be done.</Description>
  </Issue>
  <Issue>
    <IssueID>47374</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cdbl() throws InvalidCastException on convertible object</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47374</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 v16.7.2 (Net Framework 7.4.2 / NetStandard 2.0 / NetCore 3.1)

**Steps to Reproduce**:

1. Create a NetStandard 2.0 class library project 
1. Create a class A that implements IConvertible and returns double as its typecode
2. Create a method that returns Object and returns an instance of class A
3. Call Cdbl() on the object returned by previous method

**Expected Behavior**:

The value should be converted acording to our implementation of IConvertible.ToDouble()

**Actual Behavior**:

An InvalidCastException is raised.

Looking further using DnSpy, it appears the code for Microsoft.VisualBasic.CompilerServices has found itself embedded in our dll.
However, it is NOT the code that is normally in the corresponding class in the separate library. It makes no provisions for checking IConvertible and fails becuase not correct conversion is found.

Here is the code that has been embedded:
``

We have no idea what triggered the embedding of this in our project. Creating a new minimal project from scratch with VS2019 works and the problem does not appear.
I tracked this exact same code to the Microsoft.VisaulBasic nuget package.
I also found it in the repository here under src/Compilers/VisualBasic/Portable/Symbols/EmbeddedSymbols/VbCoreSourceText.vb, but I do not understand what triggers its inclusion in our dll when a brand new (simple) project does not have it.

I am logging this here because I imagine this is a compiler-related feature that embedded this strange code.
Would really appreciate some help...</Description>
  </Issue>
  <Issue>
    <IssueID>47366</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Internal code comments are put in triple-slash doc comments</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>05/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

&gt; Remarks
&gt; TODO: This should probably be reimplemented with ChildThatContainsPosition(Int32)

I don't believe such a comment should be a doc comment.

There will probably be more occurrences of this. At least, I'd search with `///.+?TODO` regex in the repo to detect some of these issues.</Description>
  </Issue>
  <Issue>
    <IssueID>47365</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Youssef1313</FixedById>
        <IssueID>47365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0047 false positive in dynamic expression</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>47365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;

namespace ConsoleApp2
{
    internal class Program
    {
        private static void Main()
        {
            dynamic i = 1;
            dynamic s = "s";
            Console.WriteLine(s + (1 + i)); // &lt;= IDE0047 reported
        }
    }
}
`</Code>
    <Description>**Version Used**:

Microsoft Visual Studio Enterprise 2019
Version 16.7.2, 16.8.0 Preview 2.1

**Steps to Reproduce**:

Enter the following code in the code editor:

``

**Expected Behavior**:

No suggestion.

**Actual Behavior**:

IDE0047 is reported suggesting removal of the parentheses. This is a false positive, because doing so changes the meaning of the code (`s11` is printed instead of `s2`).

![afbeelding](</Description>
  </Issue>
  <Issue>
    <IssueID>47364</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Signature help should use SymbolDisplayMiscellaneousOptions.AllowDefaultLiteral</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>11/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

It's less noisy if IntelliSense just shows `default` instead of `default(CancellationToken)`.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47364</IssueID>
        <PullRequestID>33056</PullRequestID>
        <Title>Use default literal for parameters in symbol display</Title>
        <Description>Fixes #33049</Description>
        <CreatedDate>01/02/2019</CreatedDate>
        <ClosedDate>05/03/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47364</IssueID>
            <PullRequestID>33056</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>sharwell</FixedById>
            <PullRequestID>33056</PullRequestID>
            <IssueID>47364</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47363</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NormalizeWhitespace breaks XML attributes in comments</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>47363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
string code = @"
/// &lt;example&gt;
///   &lt;code lang=""cs"" source=""foo.cs"" /&gt;
/// &lt;/example&gt;
class Foo {}";

var tree = SyntaxFactory.ParseSyntaxTree(code);
tree = tree.WithRootAndOptions(tree.GetRoot().NormalizeWhitespace(), tree.Options.WithDocumentationMode(DocumentationMode.Diagnose));
var compilation = CSharpCompilation.Create(null)
	.WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
	.AddSyntaxTrees(tree)
	.AddReferences(MetadataReference.CreateFromFile(typeof(object).Assembly.Location));
var diagnostics = compilation.GetDiagnostics();


**Expected Behavior**:

No warnings.

**Actual Behavior**:

&gt; warning CS1570: XML comment has badly formed XML -- ''source' is an unexpected token. Expecting whitespace. Line 2, position 32.'

This seems to happen because `NormalizeWhitespace()` changes the code to:

c#
/// &lt;example&gt;
///   &lt;code lang = "cs"source = "foo.cs"/&gt;
/// &lt;/example&gt;
class Foo
{
}
`</Code>
    <Description>**Version Used**: 3.7.0

**Steps to Reproduce**:

Run the following code:

``

Notice how there is no space before the `source` attribute, which is invalid XML.

Also, when running this code under a Debug build of the compiler on .Net Core, the following assertion is triggered:

</Description>
  </Issue>
  <Issue>
    <IssueID>47357</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>47357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rename record results in extremely odd behavior</Title>
    <CreatedDate>02/09/2020</CreatedDate>
    <ClosedDate>21/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>47357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 16.8 preview 2

**Steps to Reproduce**:

When renaming a record in visual studio, it replaces the parameter list with a duplicate of the record name:

![rename-record](

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47357</IssueID>
        <PullRequestID>47715</PullRequestID>
        <Title>Change `Location` of record's primary constructor to point to record's identifier.</Title>
        <Description>Related to #47357.</Description>
        <CreatedDate>15/09/2020</CreatedDate>
        <ClosedDate>16/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47357</IssueID>
            <PullRequestID>47715</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Records</Name>
            <IssueID>47357</IssueID>
            <PullRequestID>47715</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47715</PullRequestID>
            <IssueID>47357</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Parameter default values should be accessible from bound nodes and/or symbols</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>47352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Related to 

Basically, the "true" default values for optional parameters depend on a variety of factors, including the call site and attributes used on the parameter. Many of these factors aren't resolved until lowering of a call. It feels like nullable analysis among other things could be more accurate if the following changes were made:

1. A BoundCall should contain child nodes for the implicitly passed default arguments. The constant values of those default arguments are the same as what we will produce during emit.
2. A BoundMethodBody should contain child nodes for parameters with default values. These can simply be visited as part of EnterParameters without needing to synthesize and cache bound nodes on-the-fly and work around debug verification of the bound tree.
    - It's not as clear how to handle call-site-dependent attributes in this case. I think attributes like CallerMemberName or CallerLineNumber could be "skipped", since there is no caller in that context, but call-site-independent attributes like `[DefaultParameterValue]` should be respected.

/cc @333fred</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47352</IssueID>
        <PullRequestID>47171</PullRequestID>
        <Title>Join in state from parameter default value</Title>
        <Description>Closes #40818
Closes #40975
Closes #47344
Closes #43399

2 notable changes from this PR:
- diagnostics for bad parameter default values are now CS8600 (non-safety warning). This is a consequence of the "simulate an assignment" approach. We join in the bad state and we will receive warnings on usage of the parameter. I think this is probably a good (if not very significant) change.
- diagnostics for bad parameter default values on partial implementations are gone. Such default values are actually ignored in the language and produce warnings, so this seems OK.</Description>
        <CreatedDate>27/08/2020</CreatedDate>
        <ClosedDate>03/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47352</IssueID>
            <PullRequestID>47171</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>47352</IssueID>
            <PullRequestID>47171</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47171</PullRequestID>
            <IssueID>47352</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NRE in Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.MakeExplicitInterfaceImplementationMap</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Errors
    CSC error AD0001: Analyzer 'Microsoft.NetCore.Analyzers.Security.DoNotCallDangerousMethodsInDeserialization' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'. [C:\dotnet\winforms\src\System.Windows.Forms.Primitives\src\System.Windows.Forms.Primitives.csproj]
Exception occurred with following context:
Compilation: System.Windows.Forms.Primitives
System.NullReferenceException: Object reference not set to an instance of an object.
at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PEMethodSymbol.get_ExplicitInterfaceImplementations()
at Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.GetExplicitInterfaceImplementations(Symbol member)
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.MakeExplicitInterfaceImplementationMap()
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetExplicitImplementationForInterfaceMember(Symbol interfaceMember)
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationForInterfaceMember(Symbol interfaceMember, TypeSymbol implementingType, DiagnosticBag diagnostics, Boolean ignoreImplementationInInterfaces, Boolean&amp; implementationInInterfacesMightChangeResult)
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationAndDiagnosticsForInterfaceMember(Symbol interfaceMember, Boolean ignoreImplementationInInterfaces, Boolean&amp; implementationInInterfacesMightChangeResult)
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMemberInNonInterfaceWithDiagnostics(Symbol interfaceMember, Boolean ignoreImplementationInInterfacesIfResultIsNotReady)
at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMember(Symbol interfaceMember)
at Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(ISymbol interfaceMember)
at Analyzer.Utilities.Extensions.IMethodSymbolExtensions.IsImplementationOfInterfaceMethod(IMethodSymbol method, ITypeSymbol typeArgument, INamedTypeSymbol interfaceType, String interfaceMethodName)
at Analyzer.Utilities.Extensions.IMethodSymbolExtensions.IsDisposeImplementation(IMethodSymbol method, INamedTypeSymbol iDisposable)
at Microsoft.NetCore.Analyzers.Security.DoNotCallDangerousMethodsInDeserialization.&lt;&gt;c__DisplayClass8_0.&lt;Initialize&gt;b__2(CompilationAnalysisContext compilationAnalysisContext)
at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteCompilationActionsCore&gt;b__48_1(ValueTuple`2 data)
at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
Suppress the following diagnostics to disable this analyzer: CA5360
`</Code>
    <Description>I haven't had luck getting a repro with a debugger attached, but the I don't think the root cause is in the analyzer.

To repro, I've had to run `build.cmd`, touch src\System.Windows.Forms.Primitives\src\System.Windows.Forms.Primitives.csproj, then `build.cmd` again. If I just invoke dotnet.exe exec ...\csc.dll @args.txt, no luck for me. Nor with adding another analyzer just to add a Debugger.Launch().

The extra context in msbuild log from the repro is:

``

_Originally posted by @dotpaul in </Description>
  </Issue>
  <Issue>
    <IssueID>47350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>47350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Analyzers should be invoked only in a single phase when compiling Razor projects</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Analyzer

**Diagnostic ID**: RS0016: `Symbol '{0}' is not part of the declared API.`

### Analyzer source

**NuGet Package**: [Microsoft.CodeAnalysis.PublicApiAnalyzers](

**Version**: v3.3.0 (Latest)

### Describe the bug

Razor projects have a two phase compile, where a project is compiled once, then that is used to generate more code, and then compiled again with the new code.  The problem is that some of the generated code is public, and the analyzers seems to run both times.  This means that the analyzer either reports errors during the first phase (because the baseline include API from the second phase), or the second phase (because it doesn't).

Additionally, the VS experience doesn't offer to generate any of the API from that generated public API.

### Steps To Reproduce

1. Make a new ASP.NET Core Web Application project of the "Web Application" variety.
2. 

### Expected behavior
Can generate a baseline for the API generated from the razor file, and have it work.

### Actual behavior
Errors about either missing APIs, or too many APIs.

## Additional context
 Affecting dotnet/aspnetcore's ability to capture our public api using the analyzer in 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47350</IssueID>
        <PullRequestID>25386</PullRequestID>
        <Title>Fix netcoreapp2.0 use in TestUtilities</Title>
        <Description>The Roslyn code base defaults to enabling the
`&lt;DisableImplicitFrameworkReferences&gt;` property and instead specifies manual
references. This is mostly an artifact of our code base evolution from
the project.json days where implicit references weren't an option.

This means that even though TestUtilities specified netcoreapp2.0 as a
TF it was still mostly targeting netstandard1.3. This is because
implicit references weren't expanded and we were manually adding only a
subset of the available packages.

Enabled implicit references here, conditioned the explicit ones to
netstandard1.3 and now we can remove a number of `#if` uses.

closes #25228

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

### Bugs this fixes

(either VSO or GitHub links)

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.

&lt;/details&gt;
</Description>
        <CreatedDate>09/03/2018</CreatedDate>
        <ClosedDate>12/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47350</IssueID>
            <PullRequestID>25386</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47348</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>DefaultParameterArgument value can't be suppressed</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System.Runtime.InteropServices;

public class C {
    public void M1([Optional, DefaultParameterValue(null!)] object obj) // error
    {
        obj.ToString();
    }
}
`</Code>
    <Description>**Version Used**: e7bad77

**Steps to Reproduce**:

``

**Expected Behavior**: No errors or warnings

**Actual Behavior**: error CS8017: The parameter has multiple distinct default values.

Related to #43399 </Description>
  </Issue>
  <Issue>
    <IssueID>47347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>47347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove dependency on IVsXMLMemberIndexService for quick info</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

To be able to move quick info OOP, we need to remove the dependency on the IVsXMLMemberIndexService for metadata references.  The editor team is also planning on either deprecating this package or re-writing in managed code depending on how many clients need it.

We'll need to either write our own or use the new managed version.

cc @gundermanc @tmat @CyrusNajmabadi </Description>
  </Issue>
  <Issue>
    <IssueID>47346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable warning isn't emitted when passing default to a struct parameter</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
#nullable enable

public class Person
{
    public string Name { get; }
    
    public Person(string name) =&gt;
        Name = name ?? throw new ArgumentNullException(nameof(name));
}

public struct MyStruct
{
    public Person person;
}

public static class Program
{
    public static void Foo(MyStruct s)
    {
        Console.WriteLine(s.person.Name);
    }
    
    public static void Main() =&gt; Foo(default); // Expected warning here. Because MyStruct contains a non-nullable reference type.
}
`</Code>
    <Description>Repro:

``

The previous example throws NullReferenceException.

I think any struct containing a non-nullable reference type should have a warning when it takes the value "default".</Description>
  </Issue>
  <Issue>
    <IssueID>47345</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ensure diagnostics from build are hookued up to the descriptor properties</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ah, so CA1724 is a CompilationEndAction: 

It will never run on live analysis, only on build, so it is the issue I initially thought. This will need a Roslyn feature request to ensure diagnostics from build are hooked up to the the descriptor properties.

_Originally posted by @mavasani in </Description>
  </Issue>
  <Issue>
    <IssueID>47344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>47344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Record parameters of generic types should give safety warnings on default values</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable

var rec = new Rec1&lt;string&gt;();
rec.t.ToString(); // NRE at runtime

record Rec1&lt;T&gt;(T t = default) // no warning
{
}
`</Code>
    <Description>**Version Used**: e7bad77

**Steps to Reproduce**:

``

**Expected Behavior**: A safety warning is given on the implicit assignment to the synthesized property `Rec1&lt;T&gt;.t`.

**Actual Behavior**: No warnings are given.

**Remarks**:

Once we implement non-safety warnings for unconstrained generics in C# 9 we will be halfway there, but to handle this scenario correctly we need to figure out how to distinguish compiler-generated nodes that we care about (e.g. record synthesized constructors) from compiler-generated nodes that we don't care about (e.g. synthesized default arguments at call sites).

If we just start warning on all compiler generated assignments, we will also get an undesirable warning at the `new Rec1` creation site, since we synthesize an argument for the optional parameter for flow analysis purposes.</Description>
  </Issue>
  <Issue>
    <IssueID>47341</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>OOP doesn't synchronize non-C#/VB projects.</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47341</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>47341</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Found while investigating a crash when a .js/.ts file is added to an asp.net project.

We make an oop call to ask about a specific document (in this case, a .ts file).  OOP tehn synchronizes with VS.  However, it has the following code in it:



This checks explicitly if the project is C#/VB and just ignores it otherwise.  This means that calls from VS to oop can pass along valid date, but have it be invalid on the OOP side.

This is fixable with filtering on the VS side.  But is better fixed by having OOP actually respect the full solution snapshot syncing.</Description>
  </Issue>
  <Issue>
    <IssueID>47340</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB preferred modifiers order is inconsistent with C#</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Partial is set to be the first modifier in visual_basic_preferred_modifier_order 

Opening per </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47340</IssueID>
        <PullRequestID>47148</PullRequestID>
        <Title>Enforce more code style in Compilers area</Title>
        <CreatedDate>26/08/2020</CreatedDate>
        <ClosedDate>10/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47340</IssueID>
            <PullRequestID>47148</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47340</IssueID>
            <PullRequestID>47148</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47148</PullRequestID>
            <IssueID>47340</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47338</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>47338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Debug.Assert hitting in SemanticClassificationCacheIncrementalAnalyzer</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>22/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

VS Build: Version 16.8.0 Preview 3.0 [30431.218.main]
Roslyn Commit Hash: 5c2cacb26035caaf4f36da78195453747c5559b7</Description>
  </Issue>
  <Issue>
    <IssueID>47335</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>System.InvalidOperationException: This program location is thought to be unreachable in  Binder.BindInitializerExpression</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>47335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Clone [this analyzer source](
2. Run the ObjectParamsCall_SingleFix test case
3. See output

**Expected Behavior**:
The new syntax root should be used
**Actual Behavior**:
System.InvalidOperationException is thrown for unreachable code in Binder.BindInitializerExpression

Stack Trace: 
    Binder.BindInitializerExpression(InitializerExpressionSyntax syntax, TypeSymbol type, SyntaxNode typeSyntax, DiagnosticBag diagnostics) line 3843
    Binder.BindObjectCreationExpression(ObjectCreationExpressionSyntax node, DiagnosticBag diagnostics) line 3558
    Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) line 396
    Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed) line 329
    Binder.BindPossibleArrayInitializer(ExpressionSyntax node, TypeSymbol destinationType, BindValueKind valueKind, DiagnosticBag diagnostics) line 1555
    Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode) line 924
    Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics) line 650
    Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) line 46
    Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics) line 1610
    Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics) line 43
    Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics) line 3084
    Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics) line 3041
    MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, ValueTuple`3&amp; forSemanticModel) line 1622
    MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) line 943
    MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) line 497
    MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg) line 375
    MethodCompiler.CompileNamespace(NamespaceSymbol symbol) line 349
    MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg) line 329
    MethodCompiler.CompileNamespace(NamespaceSymbol symbol) line 349
    MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) line 144
    CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken) line 2249
    CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken) line 2209
    CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken) line 2125
    CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsWithoutStateTrackingAsync(CancellationToken cancellationToken) line 411
    CompilationWithAnalyzers.GetAnalyzerDiagnosticsWithoutStateTrackingAsync(ImmutableArray`1 analyzers, CancellationToken cancellationToken) line 381
    CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync(CancellationToken cancellationToken) line 276
    --- End of inner exception stack trace ---
    Task`1.GetResultCore(Boolean waitCompletionNotification)
    DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer analyzer, Document[] documents) line 61
    CodeFixVerifier.VerifyFix(String language, DiagnosticAnalyzer analyzer, CodeFixProvider codeFixProvider, String oldSource, String newSource, Nullable`1 codeFixIndex, Boolean allowNewCompilerDiagnostics) line 99
    CodeFixVerifier.VerifyCSharpFix(String oldSource, String newSource, Nullable`1 codeFixIndex, Boolean allowNewCompilerDiagnostics) line 46
    UnitTest.ObjectParamsCall_SingleFix() line 108</Description>
  </Issue>
  <Issue>
    <IssueID>47331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>" is a type not supported by the language</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>47331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS19: Version 16.8.0 Preview 2.1
.Net:  5.0.100-preview.8.20417.9

**Steps to Reproduce**:

1. I'm trying to build somebodies project (TerraFX) in VS. This is one of a few bugs being reported.

**Expected Behavior**:

No errors, other's are not reporting this issue.

**Actual Behavior**:

I get some errors - with this error being one of them...

1. " is a type not supported by the language
2. Cannot take the address of, get the size of, or declare a pointer to a managed type ('WndClassExW')

`            ThrowExternalExceptionIfFalse(nameof(GetClassInfoExW), GetClassInfoExW(
                HINSTANCE.NULL,
                lpszClass: desktopClassName,
                lpwcx: &amp;desktopWindowClass // error 1, error 2
            ));`

3. 'WndClassExW.lpfnWndProc' is not supported by the language

`                    var wndClassEx = new WNDCLASSEXW {
                        cbSize = SizeOf&lt;WNDCLASSEXW&gt;(),
                        style = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS,
                        lpfnWndProc = wndProc, // error 3
                        cbClsExtra = 0,
                        cbWndExtra = 0,
                        hInstance = EntryPointModule,
                        hIcon = HICON.NULL,
                        hCursor = GetDesktopCursor(),
                        hbrBackground = (IntPtr)(COLOR_WINDOW + 1),
                        lpszMenuName = null,
                        lpszClassName = (ushort*)lpszClassName,
                        hIconSm = HICON.NULL
                    };`

4. " is a type not supported by the language
5. Cannot take the address of, get the size of, or declare a pointer to a managed type ('WndClassExW')

`classAtom = RegisterClassExW(&amp;wndClassEx); // error 4, error 5`</Description>
  </Issue>
  <Issue>
    <IssueID>47329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Internal error in the Basic compiler" and Some Stepping Not Working</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have been using Visual Studio 2017 for years in a large solution.  Today, for the first time, the Immediate window started showing "Internal error in the Basic compiler" some of the time when I tried to evaluate or modify variables.  Also, I was able to step into only some of the code.  One DLL into which I have stepped many times no longer allows it.  I tried cleaning the solution, deleting the .vs directory, rebooting the computer, and building the solution again.  Nothing worked.  I am now trying "Options &gt; Debugging &gt; General &gt; Use the legacy C# and VB expression evaluators".  This is preventing me from doing my work.  I have Microsoft Visual Studio Enterprise 2017, Version 15.7.2, running on Windows 10.
</Description>
  </Issue>
  <Issue>
    <IssueID>47328</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Completion support for conditional constants</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>08/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47328</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47328</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47328</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>By default, legacy and SDK-based projects provide "built-in" conditional constants that are given to projects by default. 

In legacy, this was easier to remember as it was "DEBUG" or "RELEASE".
In SDK-based projects, this is much harder to remember as there are more.  For example if you are targeting .NET Framework 4.5, you get: `NETFRAMEWORK`; `NET45`; `DEBUG` (Debug) and `NETFRAMEWORK`; `NET45`; `RELEASE` (Release). With OS support coming in .NET 5.0, even more will be added.

It would be so helpful if we just provided completion for them so that I don't have to look at the command-line args we pass to the compiler to figure them out.

![image](

Stretch goal would be to combined them across all "contexts" similar to API completion so that you see a union of them all when targeting multi-frameworks.</Description>
  </Issue>
  <Issue>
    <IssueID>47324</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OpenSolutionAsync fails with IBuildEngine7 could not be loaded</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-MSBuildWorkspace</Name>
        <IssueID>47324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        static void Main(string[] args)
        {
            MSBuildLocator.RegisterDefaults();
            var lWs = MSBuildWorkspace.Create();
            lWs.WorkspaceFailed += LWs_WorkspaceFailed;
            var a = lWs.OpenSolutionAsync(@"..\..\..\..\Foo1\Foo1.sln").Result;
        }

        private static void LWs_WorkspaceFailed(object sender, WorkspaceDiagnosticEventArgs e)
        {
            throw new NotImplementedException();
        }

2.  Foo1 is a solution with default class library (.NET Framework) containing class1.cs
 
**Expected Behavior**:
Can load the solution without error.

**Actual Behavior**:
Workspace failed reports:
`MSBuild-Fehler beim Verarbeiten der Datei "C:\@Server2018\ReportError\Foo1\Foo1\Foo1.csproj" mit der Meldung: C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets: (1177, 5): There was a failure retrieving the attributes for parameters in the "GetReferenceAssemblyPaths" task. Der Typ "Microsoft.Build.Framework.IBuildEngine7" in der Assembly "Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" konnte nicht geladen werden..`

**More info**
* This code worked with VS16.2 and 

  &lt;package id="Microsoft.Build" version="16.5.0" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.Build.Framework" version="16.5.0" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.Build.Locator" version="1.2.6" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Common" version="3.3.1" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp" version="3.3.1" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp.Workspaces" version="3.3.1" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Workspaces.Common" version="3.3.1" targetFramework="net472" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Workspaces.MSBuild" version="3.3.1" targetFramework="net472" /&gt;
`</Code>
    <Description>**Version Used**: 
Visual Studio 16.7.0
"Microsoft.Build" version="16.6.0" 
"Microsoft.Build.Engine" version="16.6.0" 
"Microsoft.Build.Framework" version="16.6.0" 
"Microsoft.Build.Locator" version="1.2.6" 
"Microsoft.CodeAnalysis" version="3.7.0"

**Steps to Reproduce**:

Use: [ReportError.zip](

1. The main code:
``
* Made a VS 16.7 repair

**Others**
Same error report: #44427 </Description>
  </Issue>
  <Issue>
    <IssueID>47323</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>47323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>When the CodeAnalysis service hub disappears the IDE becomes unusable with no indication of what went wrong</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>47323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30431.102.main]
Logs: [61651F3E-ManagedLanguage.IDE.RemoteHostClient-34884-z51jey5n-1.zip](

My Visual Studio become pretty usable and I had no idea what was wrong, things I experienced:

1) Errors stopped being populated in the Error List

2) Compilers errors from build never appeared in the Error List under either Build or IntelliSense (perhaps Roslyn should tell project-system this by throwing from IVsLanguageServiceBuildErrorReporter2 so it can at least populate these)

3) Find all References started returning no results
![image](

4) Test Window became unusable

![image](

I tried reloading the solution and it didn't resolve the problem. I work on Visual Studio and didn't make the connection between above and the service hub process disappearing until after I reached out to the IDE team.




</Description>
  </Issue>
  <Issue>
    <IssueID>47322</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>davidwengier</FixedById>
        <IssueID>47322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigating back and forth between documents quickly NullRefs</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>17/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>47322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30431.102.main]

**Steps to Reproduce**:

1.  No repro, but it happens a few times a day when I quickly switch between documents using Back and Forth on my mouse

**Expected Behavior**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>47613</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>record Equals/GetHashCode - use CompilerGenerated attribute</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a reason why the compiler generated Equals and GetHashCode for C# 9 records are not annotated with [CompilerGenerated] ?

Can this be added ?

</Description>
  </Issue>
  <Issue>
    <IssueID>47318</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Pressing tab should take me out of the parenthesis after invoking a method</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>01/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;[severity:I’m somewhat annoyed. A fix would be nice]&lt;br&gt;Please take a look at the attached videos for a clear explaination.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Current behavior:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When writing a method name and then writing `(`, VS writes `)`. Then when you press tab, VS writes the first intellisense suggestion inside the parenthesis.&lt;/p&gt;&lt;p&gt;&lt;br&gt;vs-actual.mp4&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Expected behavior:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When writing a method name and then writing `(`, VS writes `)`. Then when you press tab, VS takes you outside the parenthesis so you can continue to the next line.&lt;/p&gt;&lt;p&gt;vs-expected.mp4&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;More context: &lt;a href="---### Original Comments#### Feedback Bot on 8/30/2020, 11:56 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Feedback Bot on 8/31/2020, 09:44 AM: &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href=" In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href=" We’ll keep you posted on any updates to this feedback.&lt;/p&gt;#### Gen Lu [MSFT] on 8/31/2020, 05:15 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="103807"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a rel="user" href=" nodeid="103807"&gt;@Muhammad Azeez&lt;/a&gt; Thanks for your feedback. I think this might be related to a recent change we made on the trigger condition for intellisense.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Could you please go to Tools -&amp;gt; Options -&amp;gt; Text Editor -&amp;gt; C# -&amp;gt; IntelliSense and disable "Automatically show completion list in argument lists" to see if it reverts back to the old behavior?&lt;/p&gt;&lt;p&gt;&lt;img alt=""&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47317</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS2019 suggests null-coalescing operator rejected by compiler</Title>
    <CreatedDate>01/09/2020</CreatedDate>
    <ClosedDate>01/09/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 16.7.2

&lt;details&gt;
&lt;summary&gt;Full Versions&lt;/summary&gt;

``
VS reports `CS0019: Operator '??' cannot be applied to operands of type 'int' and 'int'` 

**Expected Behavior**:

Case 1. The suggestion is not given **OR** the code compiles after accepting the suggestion.
Case 2. The suggestion is not offered on this code.

**Actual Behavior**:

Case 1. The suggestion is offered and the code fails with `error CS8652: The feature 'coalescing assignment' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.`
Case 2. The incorrect code has the IDE0074 suggestion to make it `a = b ??= 1`. Applying the suggestion causes compilation to fail with error CS8652, while the line is still annotated with `CS0019: Operator '??=' cannot be applied to operands of type 'int' and 'int'`</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47317</IssueID>
        <PullRequestID>44798</PullRequestID>
        <Title>Only offer 'Use coalesce expression' in C#8 and above.</Title>
        <Description>Fixes </Description>
        <CreatedDate>02/06/2020</CreatedDate>
        <ClosedDate>02/06/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47317</IssueID>
            <PullRequestID>44798</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47269</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decide on the bar for IDE suggestions and refactorings offered for code style (IDE analyzers) and quality (CA analyzers)</Title>
    <CreatedDate>30/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47269</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47269</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Design Notes</Name>
        <IssueID>47269</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>47269</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Starting with .NET5 SDK, both code style (IDE analyzers) and code quality analyzer (CA analyzers) packages are installed with the .NET SDK, which makes the user experience consistent inside Visual Studio for .NET users:
   - .NET users will get code style and code quality suggestions/refactorings by default when targeting .net5 or later. 
   - Any CA or IDE diagnostic ID set to warning/error in editorconfig will run on build/CI and break user's build (for IDE analyzers, MSBuild property `EnforceCodeStyleOnBuild` needs to be explicitly set to `true`, in future it might be turned on by default)

Given that the end user would no longer distinguish between a suggestion and a refactoring coming from an IDE rule (Roslyn repo) or CA rule (Roslyn-analyzers repo), we need to make sure that we have _consistent bar set for both repos in terms of whether a rule should be enabled by default as a suggestion, refactoring or disabled by default_. We are getting lot of new CA analyzer suggestions off late, and it would be good to have a set bar for the default severity/enabled state for these analyzers.

## Proposal
Below is my proposal for bucketing:

### IDE refactoring
**This includes both hidden diagnostic analyzer + code fix AND code refactorings**
   1. Bar should not differ for hidden diagnostic + code fix versus a code refactoring. End users do not see a difference between them and even though FixAll is only applicable for code fixes today, we plan to add this support soon for code refactorings, so both of these should have the same bar.
   2. A refactoring is _allowed to change the public API surface_ of code. Given there is no visual cue for refactorings (no `...` in the editor or an error list entry), we are not driving the user towards making this change, but just offering them quick actions to avoid manual work. For example:
      1. Code refactorings to change public API signatures, adds/removes/changes parameters, etc.
      2. [CA1802]( `Use literals where appropriate`
   3. A refactoring is _allowed to introduce new compiler warnings/errors_ in existing code. Such a refactoring should explicitly not support FixAll. We try our very best to not break user code in refactorings, but that is not a strict requirement for a refactoring. Code refactoring should show a warning annotation in preview for such scenarios. We have few code IDE code refactorings that do this.

### IDE suggestion
**Info severity diagnostic with a `...` in the editor to draw user's attention and an explicit message entry in error list**
   1. An analyzer would be a candidate for a suggestion when we know for sure that existing _code quality will be improved_. For example:
      1. [CA1012]( `Abstract type constructors should not have public modifier, instead it should be protected`
      2. [CA1813]( `Public, non-abstract, attribute types should be marked as sealed`
      3. IDE0060: `Remove unused parameter` or IDE0051: `Remove unused private member`
   2. An analyzer would be a candidate for a suggestion if it flags a potential _functional bug_ in user code, but is not a strong enough assertion to be a build warning by default to break build. For this case, it will be fine even if the analyzer does not have an associated code fix, because it might need non-trivial changes to user code to fix the issue. Goal is to draw user's attention that _something is wrong_ with the current code, they may have to read up more and identify the correct fix themselves. For example:
      1. [CA1012]( `Use ValueTasks correctly`
      2. [CA2008]( `Do not create tasks without passing a TaskScheduler`.

   I believed this bucket would only apply to CA rules, it is highly unlikely that above will apply for any IDE style analyzers. We can take couple of routes for this bucket of rules:
   1. **Conservative**: Do not enable such rules by default in the IDE, primary concern would be users might get confused on how to fix these and these might add noise to their editor experience.
   2. **Aggressive**: It is fine to let users know about potential mistakes/improvements in their code, even if the fix is not trivial. They have the option to ignore the suggestion or suppress it in editorconfig if they do not value it. If it turns out too noisy, they will report an issue.

   I would personally recommend the aggressive route as I feel this is the core benefit from having CA rules in the box - help user write better code or introduce them to new code quality areas that they are unaware of.

### Disabled by default
   1. If an analyzer needs _expensive analysis_, say a dataflow analysis, it must be disabled by default. This likely applies only to CA rules. For example, all DFA based security rules.
   2. If an analyzer can produce known set of _false positives_, where the reported diagnostic is invalid, say for example it is a heuristic based analyzer, then it must be disabled by default. For example, few ported CA rules use naming heuristics like look for specific symbol names.

   I believed disabled by default bucket only applies to CA rules, it is highly unlikely that above will apply for any IDE style analyzers.</Description>
  </Issue>
  <Issue>
    <IssueID>47268</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS1584, CS1658 from `inheritdoc cref` when referencing method with value tuple parameter</Title>
    <CreatedDate>30/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
public class C {
    /// &lt;param name="progress"&gt;&lt;inheritdoc cref="M2(IProgress{int})" path="/param[@name='progress']" /&gt;&lt;/param&gt;
    public void M(IProgress&lt;int&gt; progress) {
    }
    
    /// &lt;param name="progress"&gt;Some progress&lt;/param&gt;
    private void M2(IProgress&lt;int&gt; progress) {
    }
    
    /// &lt;param name="progress"&gt;&lt;inheritdoc cref="N(IProgress{(int,int)})" path="/param[@name='progress']" /&gt;&lt;/param&gt;
    public void N(IProgress&lt;int&gt; progress) {
    }
    
    /// &lt;param name="progress"&gt;Some progress&lt;/param&gt;
    private void N2(IProgress&lt;(int,int)&gt; progress) {
    }    
}


**Expected**

no warnings

**Actual**


warning CS1584: XML comment has syntactically incorrect cref attribute 'N(IProgress{(int,int)})'
warning CS1658: Identifier expected. See also error CS1001.
warning CS1658: Syntax error, '&gt;' expected. See also error CS1003.
warning CS1658: ) expected. See also error CS1026.
`</Code>
    <Description>When `&lt;inheritdoc cref="..."/&gt;` refers to a member with a parameter whose type is a ValueTuple intrinsic, the completion list will help select the member while typing the cref attribute's value, but then C# will emit several warnings around the xml being invalid and the member not being found.

[Repro on SharpLab.io](

``</Description>
  </Issue>
  <Issue>
    <IssueID>47266</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Readme links go to non-accessible wiki</Title>
    <CreatedDate>30/08/2020</CreatedDate>
    <ClosedDate>31/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>47266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Most of the "Get started" section. and also "How to Contribute"</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47266</IssueID>
        <PullRequestID>47270</PullRequestID>
        <Title>Update stale URLs in the readme</Title>
        <Description>Most of these links were pointing to the wiki. I also updated the MSDN Magazine URLs to their archived location in docs.microsoft.com in case the legacy redirect for them goes away.

I did not make any effort to determine if the documentation is still worth linking to at all since I felt like that would be too subjective and might warrant further discussion. The primary motivation here was to fix URLs broken by the wiki going away in 

Fixes #47266</Description>
        <CreatedDate>30/08/2020</CreatedDate>
        <ClosedDate>31/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>47266</IssueID>
            <PullRequestID>47270</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47261</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CI doesn't validate changes pushed to master</Title>
    <CreatedDate>29/08/2020</CreatedDate>
    <ClosedDate>30/08/2020</ClosedDate>
    <IssueLabels />
    <Description>Ok, I think I don't know the terminologies very well. But here is the thing:

1. Two PRs,  "A" and "B", are created from master.
1. PR "B" got merged to master.
1. The branch of PR "A" builds successfully on its own. But it won't build successfully when merged with master because of changes introduced in PR "B". However, the CI passes for PR "A", and errors are only discovered after merging to master.

I think that's what happened with  and  (the branch of #47222 doesn't have the new file created in #46949)

The CI passed with #47222, but the master has build error after merging it. (see 

If my analysis is correct, you may consider updating the CI to somehow build the result of merging the PR with master.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47261</IssueID>
        <PullRequestID>47222</PullRequestID>
        <Title>Update generator public API names:</Title>
        <Description>- Rename SourceGeneratorContext -&gt; GeneratorExecutionContext
- Rename IntializationContext -&gt; GeneratorIntializtionContext
- Rename RunFullGeneration -&gt; RunGeneratorsAndUpdateCompilation
- Add 'Create' static methods to make unit testing easier
- Update tests + documentation

Note: this is mostly a mechanical refactoring of names, but also keeps the original type names as empty types with `[Obsolete]` attributes; this gives users a chance to see what the type was renamed to. We'll remove the obsolete types in the next preview (tracked by #46623)</Description>
        <CreatedDate>28/08/2020</CreatedDate>
        <ClosedDate>29/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47261</IssueID>
            <PullRequestID>47222</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Feature - Source Generators</Name>
            <IssueID>47261</IssueID>
            <PullRequestID>47222</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>chsienki</FixedById>
            <PullRequestID>47222</PullRequestID>
            <IssueID>47261</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47261</IssueID>
        <PullRequestID>46949</PullRequestID>
        <Title>Enable go to definition for source generated files </Title>
        <Description>This allows go to definition (and similar features) to open the outputs from a source generator as a "virtual" file. The file updates as changes happen in near-real-time.

This commit is ignoring for now the problem of how we want to represent source generated files as Documents in the Workspace; this isn't a big deal bit a helper method (TryGetGeneratorAndHint) is added to easily check if a SyntaxTree came from a generator, and if so gives you the information you need to locate the generated file in a later run of the generator. The majority of this pull request doesn't really change once we have that working, so this isn't throw-away work. It does mean though that we don't have a good way to link the generated file back up to the generating project, so you only get a Miscellanous Files experience in the generated document for now.

This is also doing a somewhat icky hack where we still have to put an empty file onto disk, and fill it in once the file is open. The
challenge being that Visual Studio really doesn't give us any way to have a moniker that isn't a file that passes through the system at this point.

## Pending Work

- [x] Show a gold bar message to indicate if the document disappeared from the Compilation.
- [x] Figure out why the debugger insists the files don't match, when they do.
- [x] Add an integration test to cover this scenario.
- [ ] Write a complete test plan for this work.
</Description>
        <CreatedDate>19/08/2020</CreatedDate>
        <ClosedDate>29/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47261</IssueID>
            <PullRequestID>46949</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>46949</PullRequestID>
            <IssueID>47261</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect XML summary doc</Title>
    <CreatedDate>29/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>47258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

"TryPart" in the previous snippet is outdated. See:

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47258</IssueID>
        <PullRequestID>47259</PullRequestID>
        <Title>Fix casing in XML doc and correct statement</Title>
        <Description>Fixes #47258</Description>
        <CreatedDate>29/08/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>47258</IssueID>
            <PullRequestID>47259</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>47258</IssueID>
            <PullRequestID>47259</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>davidwengier</FixedById>
            <PullRequestID>47259</PullRequestID>
            <IssueID>47258</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47292</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Source generators can't access binary files</Title>
    <CreatedDate>29/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As far as I can see, source generators only have access to files specified as `AdditionalFiles`. However, this means that binary files can't be used for generating code. Adding a binary file as an `AdditionalFiles` will result in a `CS2015` error. I've personally had some use cases for generating source code based on binary files, so I'm curious if this was intended, or alternatively, if I missed something in the specifications.</Description>
  </Issue>
  <Issue>
    <IssueID>47255</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Get the CSharpSourceGenerators integration test passing</Title>
    <CreatedDate>29/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For some reason it always fails in CI, and always passes locally. This is a tracking bug to resolve that obvious conundrum.</Description>
  </Issue>
  <Issue>
    <IssueID>47254</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>47254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add tests for local diagnostics</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There were a couple issues with razor diagnostics we caused inadvertently.  We should add tests for these scenarios:
See </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47254</IssueID>
        <PullRequestID>47617</PullRequestID>
        <Title>Add razor integration tests for diagnostics and cross document</Title>
        <Description>navigation

Note that these will fail until integration test machines are upgrade to p3 (some product bug fixes are needed).

Resolves </Description>
        <CreatedDate>11/09/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>47254</IssueID>
            <PullRequestID>47617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47250</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test failures: Microsoft.CodeAnalysis.CompilerServer.UnitTests.NamedPipeClientConnectionHostTests.EndListenClosesQueuedConnections</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>28/08/2020</ClosedDate>
    <IssueLabels />
    <Description>&lt;!-- runfo report start --&gt;|Build|Kind|Run Name||---|---|---||[792182]( 47232]( Desktop Spanish||[790443]( 47192]( CoreClr Release||[790415]( 46826]( Desktop Debug Test64||[788764]( 47157]( Desktop Spanish||[788070]( 47141]( CoreClr Release||[787597]( 47120]( Desktop Spanish|&lt;!-- runfo report end --&gt;</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47250</IssueID>
        <PullRequestID>47232</PullRequestID>
        <Title>Merge master to master-vs-deps</Title>
        <Description>This is an automatically generated pull request from master into master-vs-deps.``Once all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯</Description>
        <CreatedDate>28/08/2020</CreatedDate>
        <ClosedDate>28/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47232</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47232</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47250</IssueID>
        <PullRequestID>47157</PullRequestID>
        <Title>Merge master to master-vs-deps</Title>
        <Description>This is an automatically generated pull request from master into master-vs-deps.``Once all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯</Description>
        <CreatedDate>26/08/2020</CreatedDate>
        <ClosedDate>26/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47157</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47157</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47250</IssueID>
        <PullRequestID>47120</PullRequestID>
        <Title>Merge master to master-vs-deps</Title>
        <Description>This is an automatically generated pull request from master into master-vs-deps.``Once all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯</Description>
        <CreatedDate>25/08/2020</CreatedDate>
        <ClosedDate>26/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47120</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47250</IssueID>
            <PullRequestID>47120</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[API Proposal] Expose KindText in SyntaxNodeOrToken</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I think it's useful to expose the private property `KindText` to be public:



It will make things much much easier to get the KindText without worrying about the language and having to handle the same thing twice.

Related to #47238</Description>
  </Issue>
  <Issue>
    <IssueID>47243</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Possible documentation bug in naming conventions</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>28/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>47243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>



The doc states:

&gt; The following list shows the allowable values, and you can specify multiple values by separating them with a comma.
&gt;
&gt; - * (use this value to specify all symbols)
&gt; - namespace
&gt; - class
&gt; - struct
&gt; - interface
&gt; - enum
&gt; - property
&gt; - method
&gt; - field
&gt; - event
&gt; - delegate
&gt; - parameter
&gt; - type_parameter
&gt; - local
&gt; - **local_function**

However, from the code above, it seems like the correct value is **local_functions**, not **local_function**.</Description>
  </Issue>
  <Issue>
    <IssueID>47238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] What's the proper way to get KindText for a SyntaxNode</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>28/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The approach I know to do that is call `.Kind()` extension method, then call `.ToString()`.
The problem with that is there are 2 `Kind` extension method, one for C# and one for VB.

Is there other way instead of checking the language first, then call the appropriate .Kind method given that I want the Text at the end?

If there is no way currently, consider this issue as an API proposal.</Description>
  </Issue>
  <Issue>
    <IssueID>47237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Braces indentation, closing bracket for anonymous methods indented incorrectly.</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>47237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:I'm frustrated, but able to complete my work]
Automatic formatting messes up the code indentation and it has to be fixed manually.In Visual Studio options.Text Editor -&gt; C# -&gt; Code Style -&gt; Formatting -&gt; IndentationEnable "Indent open and close brackets". Text Editor -&gt; C# -&gt; Code Style -&gt; Formatting -&gt; New LinesEnable "Place open brace on new line for anonymous methods".As you can see in the preview, opening bracket is indented correctly, but following body and closing bracket are indented wrong.---### Original Comments#### Feedback Bot on 8/27/2020, 03:59 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>47236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Duplicate code fixes offered for IDE0082 (convert typeof to nameof)</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>15/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest 16.8 dogfood build

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>47235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>davidwengier</FixedById>
        <IssueID>47235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move to Next or Previous Highlighted Reference hotkeys work unreliable in C# editor</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>47235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---In C# code editor when the caret is sitting on an identifier, pressing to "Ctrl+Shift+Up" or "Ctrl+Shift+Down" usually moves the caret to a next or a previous reference.But when the caret is not sitting on a identifier it flies away to somewhere else. In fact it goes to the Navigation Bar upwards or to the Issue Bar downwards, but it looks exactly like the caret has just disappeared and you don't understand what's happened. So you have to waste the time for investigation and getting the caret back.It's very annoying behaviour, especially when IntelliSense is a bit slow and is not recognizing the text as an identifier at the moment. I suggest to assign this behavior to another hotkeys to keep the "Ctrl+Shift+Up" and "Ctrl+Shift+Down" hotkeys always do the only job and do it reliable.---### Original Comments#### Feedback Bot on 8/27/2020, 02:03 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>47234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IncrementallyParse fails for certain text changes</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.8 IntPreview 3

**Steps to Reproduce**:

🔗 [AB#1180669](
🔗 [AB#1193786](
🔗 [AB#1216814](
🔗 [AB#1217030](
🔗 [AB#1217491](
🔗 [AB#1220119](
🔗 [AB#1221787](

1. Create a Xunit test project(.NET core)
2. Add test property and priority label to the method

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47234</IssueID>
        <PullRequestID>39258</PullRequestID>
        <Title>Fix SourceText.GetChanges exception on merging certain changes</Title>
        <Description>Closes #22289
Closes #26305

See #22289 for full details on the bug.

#### Summary
After certain `WithChanges` calls, `SourceText.GetChanges` is no longer able to handle the `SourceText` state and throws `ArgumentOutOfRangeException` when called.

#### Notes
- Three of the new tests are failing without my change, other tests added just in case.
- I didn't follow "Hello World" pattern in tests, sorry. I found it a bit hard to remember the offsets when using actual words.
- Not fully confident in the change even though the tests pass. The flow is quite complicated and I feel the current coverage might be insufficient.</Description>
        <CreatedDate>13/10/2019</CreatedDate>
        <ClosedDate>20/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47234</IssueID>
            <PullRequestID>39258</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>47234</IssueID>
            <PullRequestID>39258</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>RikkiGibson</FixedById>
            <PullRequestID>39258</PullRequestID>
            <IssueID>47234</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test failures: Microsoft.CodeAnalysis.CompilerServer.UnitTests.NamedPipeClientConnectionHostTests.EndListenClosesQueuedConnections</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>28/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;!-- runfo report start --&gt;|Build|Kind|Run Name||---|---|---||[791688]( 47148]( Desktop Spanish||[791605]( Desktop Spanish||[791582]( Desktop Spanish||[790557]( 45599]( Desktop Release Test64||[790443]( 47192]( CoreClr Release||[790439]( 47165]( Desktop Spanish||[790415]( 46826]( Desktop Debug Test64||[789574]( 46949]( Desktop Spanish||[789574]( 46949]( Desktop Spanish|&lt;!-- runfo report end --&gt;</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47233</IssueID>
        <PullRequestID>47148</PullRequestID>
        <Title>Enforce more code style in Compilers area</Title>
        <CreatedDate>26/08/2020</CreatedDate>
        <ClosedDate>10/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47233</IssueID>
            <PullRequestID>47148</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47233</IssueID>
            <PullRequestID>47148</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>47148</PullRequestID>
            <IssueID>47233</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47233</IssueID>
        <PullRequestID>45599</PullRequestID>
        <Title>Move EnC to OOP</Title>
        <Description>Moves EnC workspace service OOP.

The services that remain in-proc are ActiveStatementTrackingService and EditAndContinueDiagnosticAnalyzer. The former needs to be in-proc due to dependency on the editor tracking spans. Once the editor provides remote syncing capabilities we'll be able to move it OOP. The latter is a simple analyzer proxy that calls to OOP to perform the actual analysis. We'll be able to remove this once we move to diagnostic pull model.

EditAndContinueWorkspaceService is called via RemoteEditAndContinueServiceProxy. The proxy either calls the local service (if Roslyn runs w/o OOP) or serializes calls to RemoteEditAndContinueService, which in turn deserializes the inputs and calls remote instance of EditAndContinueWorkspaceService.

Fixes 

Includes 



</Description>
        <CreatedDate>01/07/2020</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Interactive</Name>
            <IssueID>47233</IssueID>
            <PullRequestID>45599</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47233</IssueID>
        <PullRequestID>47165</PullRequestID>
        <Title>Move to .NET 5 Preview 8 SDK</Title>
        <Description>Moves us to .NET 5 Preview 8, including the P8 SCI and SRM binaries.</Description>
        <CreatedDate>26/08/2020</CreatedDate>
        <ClosedDate>18/09/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>auto-merge</Name>
            <IssueID>47233</IssueID>
            <PullRequestID>47165</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>47165</PullRequestID>
            <IssueID>47233</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>333fred</FixedById>
            <PullRequestID>47165</PullRequestID>
            <IssueID>47233</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>47233</IssueID>
        <PullRequestID>46949</PullRequestID>
        <Title>Enable go to definition for source generated files </Title>
        <Description>This allows go to definition (and similar features) to open the outputs from a source generator as a "virtual" file. The file updates as changes happen in near-real-time.

This commit is ignoring for now the problem of how we want to represent source generated files as Documents in the Workspace; this isn't a big deal bit a helper method (TryGetGeneratorAndHint) is added to easily check if a SyntaxTree came from a generator, and if so gives you the information you need to locate the generated file in a later run of the generator. The majority of this pull request doesn't really change once we have that working, so this isn't throw-away work. It does mean though that we don't have a good way to link the generated file back up to the generating project, so you only get a Miscellanous Files experience in the generated document for now.

This is also doing a somewhat icky hack where we still have to put an empty file onto disk, and fill it in once the file is open. The
challenge being that Visual Studio really doesn't give us any way to have a moniker that isn't a file that passes through the system at this point.

## Pending Work

- [x] Show a gold bar message to indicate if the document disappeared from the Compilation.
- [x] Figure out why the debugger insists the files don't match, when they do.
- [x] Add an integration test to cover this scenario.
- [ ] Write a complete test plan for this work.
</Description>
        <CreatedDate>19/08/2020</CreatedDate>
        <ClosedDate>29/08/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>47233</IssueID>
            <PullRequestID>46949</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>46949</PullRequestID>
            <IssueID>47233</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>47231</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>47231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test failures: Microsoft.CodeAnalysis.CompilerServer.UnitTests.NamedPipeClientConnectionHostTests.EndListenClosesQueuedConnections</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>01/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;!-- runfo report start --&gt;
|Build|Kind|Run Name|
|---|---|---|
|[791688]( 47148]( Desktop Spanish|
|[791605]( Desktop Spanish|
|[791582]( Desktop Spanish|
|[790557]( 45599]( Desktop Release Test64|
|[790443]( 47192]( CoreClr Release|
|[790439]( 47165]( Desktop Spanish|
|[790415]( 46826]( Desktop Debug Test64|
|[789574]( 46949]( Desktop Spanish|
|[789574]( 46949]( Desktop Spanish|

&lt;!-- runfo report end --&gt;

[Runfo Query](</Description>
  </Issue>
  <Issue>
    <IssueID>47230</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>davidwengier</FixedById>
        <IssueID>47230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio crashes</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>10/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>47230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2019 Preview
Version 16.8.0 Preview 2.0

**Steps to Reproduce**:

1. Add the attached file to a newly created C# project
2. open the file
3. type { in line 152 just before the existing brace

**Expected Behavior**:
Brace appears in the editor

**Actual Behavior**:
Visual Studio crashes</Description>
  </Issue>
  <Issue>
    <IssueID>47228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No (obvious) way to enforce a file header with a block comment</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Design Notes</Name>
        <IssueID>47228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>47228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.8.0 Preview 3.0 [30427.246.main]

I'm in a code base with a block comment header. According to the spec it seems like it was thought, but it's very unobvious how to make that work:  and  don't indicate how to support his.

**Steps to Reproduce**:

.editorconfig with:
``</Description>
  </Issue>
  <Issue>
    <IssueID>47226</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected CS8602 in nested lambda expression</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
using System;

namespace ConsoleApp1
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.WriteLine(Func(() =&gt; "Bla")()());
        }

        private static Func&lt;Func&lt;string?&gt;&gt; Func(Func&lt;string&gt; c)
        {
            return () =&gt; c switch
            {
                 {} s =&gt; () =&gt; s(), // &lt;== warning CS8602: Dereference of a possibly null reference.
                _ =&gt; () =&gt; null
            };
        }
    }
}

`</Code>
    <Description>**Version Used**: 

5.0.100-preview.8.20417.9

**Steps to Reproduce**:

Build the following (simplified) program using `dotnet build`, targeting `net5.0`:

``
**Expected Behavior**:

No warning, since there is no way `s` can be `null`.

**Actual Behavior**:

"warning CS8602: Dereference of a possibly null reference." at the line indicated</Description>
  </Issue>
  <Issue>
    <IssueID>47225</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Field doesn't need to be volatile</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>IDE0044 suggests the field to be readonly, which can't be used together with volatile.



It seems reasonable that volatile can be omitted. The field is only set in the constructor. How can multiple threads modify it?</Description>
  </Issue>
  <Issue>
    <IssueID>47221</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>47221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unexpected warning passing nullable argument to annotated indexer</Title>
    <CreatedDate>28/08/2020</CreatedDate>
    <ClosedDate>29/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable
public class A
{
    public string? this[string x, string? y] =&gt; null;
    public static A F(string? s) =&gt; new A();
    public static A F(string x, string? y) =&gt; new A();
}

B.cs:
C#
#nullable enable
class B
{
    static void Main()
    {
        string? s = null;
        var a = A.F("");
        _ = a["", s];
    }
}


Compile:

csc /t:library A.cs
csc /r:A.dll B.cs

Result:

B.cs(8,19): warning CS8604: Possible null reference argument for parameter 'y' in 'string? A.this[string x, string y]'.
`</Code>
    <Description>A.cs:
``

</Description>
  </Issue>
  <Issue>
    <IssueID>47219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[loc][query] translation question.</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
String Resource ID | 0; "Name_is_not_a_valid_0_identifier"
-- | --
Source String | Name is not a valid {0} identifier.
Subtenant | dotnet_roslyn
Source Control Link |  
Filename | VisualStudio\Core\Def\xlf\ServicesVSResources.xlf
Question | Please clarify the placeholder.


</Description>
  </Issue>
  <Issue>
    <IssueID>47215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Source generated files should show the read only lock icon in the tab</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>47214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>47214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Diagnostics in razor files are mapped incorrectly</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>29/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>47214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently using 16.8preview 2 with latest roslyn master bits

Moving diagnostics to OOP breaks diagnostics in razor files (when using the non-LSP powered razor editor).  The cause of the issue is the following:


In the OOP scenario, the IWorkspaceVenusSpanMappingService is not present.  This makes sense as it needs access to the buffers to map between the primary and secondary buffers -  and so likely cannot be available OOP.

This can be easily repro'd.  Create a .net framework MVC razor application and replace the text in Index.cshtml with
``

Use the "Use 64-bit process for code analysis" checkbox - when unchecked (running inproc) the service is not null and returns the correct line mappings:
![cshtml_working](

When checked (running oop), the service is null in the OOP process and the line mappings are incorrect
![cshtml_broken](

It seems like the mappings need to be calculated in the in-proc portion.
</Description>
  </Issue>
  <Issue>
    <IssueID>47212</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Source generator temporary files don't get deleted</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>47211</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>47211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Change the file name that source generators write into the PDB</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>28/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently the filename that is written into the PDB for a source generated file is an underscore-delimited combination of:

1. The MVID of the module containing the source generator itself.
2. The name of the source generator.
3. The hint file (suffixed with .cs if necessary.)

This creates a few issues for the IDE, since we need to match this naming convention to make the debugger work:

1. The MVID means any time a generator is updated, all the existing files we have open are now invalid or need to be renamed.  It also means places that show the full file name (like debugger breakpoints) have to show something which is pretty huge.
2. Since we're using underscores as a delimiter, looking at a file name by itself makes it hard to tell what part is the generator name and what part is the hint name, since both could contain an embedded underscore.</Description>
  </Issue>
  <Issue>
    <IssueID>47210</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Metadata as Source files and source generated files let you copy the file path to the temporary file</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We should disable Copy Full Path and Open Containing Folder.</Description>
  </Issue>
  <Issue>
    <IssueID>47208</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generators generating inconsistent line endings shows a warning if the file is open</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>47207</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>47207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion can be triggered in Metadata as Source and Generated Source files</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Source Generators</Name>
        <IssueID>47207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If you open either a Metadata as Source file or a file from a source generator, you can trigger the completion list:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>47201</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>47201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>About Visual Studio 2019 version 16.6.3</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>02/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>47201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;Return the text color of class and function like the previous version, this all white text is very confusing!&lt;/p&gt;---### Original Comments#### Feedback Bot on 7/13/2020, 10:50 PM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.#### Dante Gagne [MSFT] on 7/17/2020, 02:33 PM: &lt;p&gt;Thank you for your feedback. Can you share a bit more information with us? What language are you using? What color theme in Visual Studio (Dark? Light?)? I’m not completely sure what you’re referring to and that information would make it easier to help with your suggestion.&lt;/p&gt;#### Feedback Bot on 7/29/2020, 03:08 AM: We will close this report in 14 days because we don’t have enough information to investigate further. To keep the suggestion open, please provide the requested details.#### Trần Tấn Phước Hồ on 7/29/2020, 03:28 AM: (private comment, text removed)#### Dante Gagne [MSFT] on 8/21/2020, 09:44 AM: (private comment, text removed)#### Dante Gagne [MSFT] on 8/21/2020, 09:45 AM: &lt;p&gt;Thanks @&lt;a target='_blank' href=" I’ve routed this over to the C# team for their response.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>47200</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Update IntelliSense tooltips to show actual type of alias</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>47200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
namespace Foo
{
    public class Bar
    {
        public int Quux { get; set; }
    }
}

using Corge = Foo.Bar;

var grault = new Corge();
grault. Quux = 42;
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---``Hovering over `grault` in the above snippet will show "Corge"; it would be more useful if it showed the actual type name behind the alias, with an annotation to indicate that it's an alias, i.e. something like "(alias) Foo.Bar" (much like the way that extension methods are annotated).Similarly, hovering over `Quux` in the line `grault. Quux = 42;` will show "int Corge.Quux". Again it would be more useful to rather display "int (alias) Foo.Bar.Quux".This could even be a configurable setting in Tools &gt; Options.---### Original Comments#### Feedback Bot on 8/27/2020, 02:57 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Expression is a value and therefore cannot be the target of an assignment." after adding ReadOnly</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:



**Expected Behavior**:

No compile errors.

**Actual Behavior**:

The CI fails with:

&gt; SyntaxNodeExtensions.vb(542,25): error BC30068: Expression is a value and therefore cannot be the target of an assignment.


Note: If this is not a compiler bug, then it should be an IDE0044 bug. But I don't see any reason that ReadOnly isn't allowed.

This was detected in #47148

cc: @sharwell</Description>
  </Issue>
  <Issue>
    <IssueID>47197</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'ReadOnly' variable cannot be the target of an assignment. (in constructor)</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:



**Expected Behavior**:

No compile errors.

**Actual Behavior**:

The CI fails with:

&gt; OverrideHidingHelper.vb(588,13): error BC30064: 'ReadOnly' variable cannot be the target of an assignment.


Note: If this is not a compiler bug, then it should be an IDE0044 bug. But I don't see any reason that ReadOnly isn't allowed.

This was detected in #47148

cc: @sharwell</Description>
  </Issue>
  <Issue>
    <IssueID>47194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>47194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Edit and Continue silently fails if custom PathMap is defined</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>47194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>47194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:I'm somewhat annoyed. A fix would be nice]
This isn't technically a problem with Visual Studio itself but rather a consequence of configuring the project in such a way that causes Visual Studio to behave unexpectedly. If you define a custom PathMap property in the csproj, Edit and Continue will silently stop working while debugging. Visual Studio was also unhelpful in identifying the problem as it simply behaved as though Edit and Continue was turned off. I reiterate that this was an issue with the project's configuration; I moved PathMap to the release configuration, but I would greatly appreciate if Visual Studio tried to warn me if Edit and Continue isn't going to work.---### Original Comments#### Feedback Bot on 8/26/2020, 07:01 PM: We have converted this feedback item from problem to idea. This change was done to better reflect the feedback's nature.#### Feedback Bot on 8/27/2020, 02:57 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47193</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Intellisense: include enum values when type is known even if enum name is not entered</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>47193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---For an argument position where VS knows I am typing an enum value of a specific type (say `FileAccess`), currently to get Intellisense to show the options for the values of that enum, I have to type the name of the enum and then ".". Intellisense is smart enough to consistently suggest the enum name as the first option, so in practice, this just means typing [ctrl]+[space], [.] ... but if I instead start typing the actual value name (e.g. "Read") (I suspect I'm in the habit of doing so due to Resharper's behavior here), then I get suggestions of unrelated classes whose names get matched and have to go back and delete that and retype the name of the enum type. My desired behavior would be for the enum values to be in the list already so typing them would find them and typing [.] wouldn't be necessary to see them.---### Original Comments#### Feedback Bot on 8/27/2020, 02:57 AM: Thank you for taking the time to provide your suggestion.&amp;nbsp; We will do some preliminary checks to make sure we can proceed further.&amp;nbsp; We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>47191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>47191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.exe exited with code -2146232797. Null reference exception in CSharp.SpillSequenceSpiller.Spill</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>47191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[severity:I'm unable to use this version of Visual Studio] [regression] [worked-in:16.6.5]Project build fails in multiple modules (large project) since upgrading to either 16.7.1 and 16.7.2. Uninstalling and reinstalling VS 16.6.5 succeeds. - System   - Provider    [ Name]  .NET Runtime    - EventID 1025    [ Qualifiers]  0     Version 0     Level 2     Task 0     Opcode 0     Keywords 0x80000000000000    - TimeCreated    [ SystemTime]  2020-08-26T16:20:47.9100490Z     EventRecordID 18327     Correlation    - Execution    [ ProcessID]  0    [ ThreadID]  0     Channel Application     Computer BRODSKY-OMEN     Security  + EventData Application: csc.exe Framework Version: v4.0.30319 Description: The application requested process termination through System.Environment.FailFast(string message). Message: System.NullReferenceException: Object reference not set to an instance of an object. at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Spill(BoundSpillSequenceBuilder builder, BoundExpression expression, RefKind refKind, Boolean sideEffectsOnly) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.&lt;VisitAssignmentOperator&gt;g__fieldWithSpilledReceiver|28_0(BoundFieldAccess field, BoundSpillSequenceBuilder&amp; leftBuilder, Boolean isAssignmentTarget) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.&lt;VisitAssignmentOperator&gt;g__fieldWithSpilledReceiver|28_0(BoundFieldAccess field, BoundSpillSequenceBuilder&amp; leftBuilder, Boolean isAssignmentTarget) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsync&gt;b__0() Stack: at System.Environment.FailFast(System.String, System.Exception) at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception) at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsync&gt;b__0() at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Spill(BoundSpillSequenceBuilder, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.RefKind, Boolean) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.&lt;VisitAssignmentOperator&gt;g__fieldWithSpilledReceiver|28_0(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess, BoundSpillSequenceBuilder ByRef, Boolean) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.&lt;VisitAssignmentOperator&gt;g__fieldWithSpilledReceiver|28_0(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess, BoundSpillSequenceBuilder ByRef, Boolean) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag) at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsync&gt;b__0() at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() at System.Threading.Tasks.Task.Execute() at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean) at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean) at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) at System.Threading.Tasks.Task.ExecuteEntry(Boolean) at System.Threading.ThreadPoolWorkQueue.Dispatch()---### Original Comments#### Dada Huo [MSFT] on 8/27/2020, 02:13 AM: &lt;p&gt;Thank you for your feedback!  In order for us to investigate this further, could you please provide a sample solution that has this problem so that we can conduct further research? It would be very helpful if you could provide some screenshots of this problem.&lt;/p&gt;&lt;p&gt;We look forward to hearing from you!&lt;/p&gt;#### Mark Brodsky on 8/27/2020, 08:52 AM: &lt;p&gt;Attempting to narrow down:&lt;/p&gt;&lt;p&gt;Build inside VS or command-line:&lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;csc.exe exception&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Build project from command-line: &lt;strong&gt;csc.exe exception&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Execute csc.exe command from command-line (e.g. no msbuild): &lt;strong&gt;builds successfully&lt;/strong&gt;. Copy/pasted command from msbuild output into bat(ch) file and executed batch file.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>47190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn fails to track identity conversion in tuple casts while tracking nullable conversions</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>47190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Branch master (25 Aug 2020)
Latest commit 0761f1c by Youssef Victor:
Don't report CS0534 on abstract record members when inheriting in a class (#47065)


**Steps to Reproduce**:

Compile the following code
cs
#nullable enable
class A { public static implicit operator B(A a) =&gt; new B(); }
class B { internal object? F; }
struct S { internal object? F; }

class Program
{
  static void F1()
  {
    (A, S) t = (new A(), new S() { F = 2 });
    (((B, S?)) t).Item2.Value.F.ToString(); // OK
  }

  static void F2()
  {
    (A, S?) t = (new A(), new S() { F = 2 });
    (((B, S?)) t).Item2.Value.F.ToString(); // false CS8602, CS8629
  }

  static void F3()
  {
    (A, B?) t = (new A(), new B() { F = 3 });
    (((B?, B?)) t).Item2.F.ToString(); // CS8602
  }
}
`</Code>
    <Description>**Version Used**: 
``

**Expected Behavior**:
No warnings.

**Actual Behavior**:
False warnings in `F2` and `F3`

Roslyn is able to track values through implicit nullable conversions combined with identity conversions (no warnings in `F1`) but not for the simple identity conversion</Description>
  </Issue>
  <Issue>
    <IssueID>47189</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Analyzer Suggestion] Use target-typed new to simplify fields initialization</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>27/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class SomeClass
{
    private readonly AnotherClass _anotherClass = new AnotherClass(......);
}
`</Code>
    <Description>**Brief description:**

Use "target-typed new", the new C# 9 feature, to simplify fields initialization

**Languages applicable:**

C#

**Code example that the analyzer should report:**

``

The "AnotherClass" part after "new" should be faded as unnecessary and the codefix should remove it.

**Additional information:**

Applicable for C# 9 and later only.
</Description>
  </Issue>
  <Issue>
    <IssueID>47188</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>47188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Outlining tag calculation should not block document open</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>47188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>47188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, outlining tags are synchronously computed during document open. This calculation is not always fast, and will hang the editor for some files. Outlining tags should be asynchronously computed to avoid delays in presenting a file.

🔗 Originally reported at 

Stack trace taken during a UI delay:

``</Description>
  </Issue>
  <Issue>
    <IssueID>47187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>System.AccessViolationException when calling FindImplementationForInterfaceMember</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>14/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>47187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error : Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt. [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PEMethodSymbol.get_ExplicitInterfaceImplementations() [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.SymbolExtensions.GetExplicitInterfaceImplementations(Microsoft.CodeAnalysis.CSharp.Symbol) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.MakeExplicitInterfaceImplementationMap() [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetExplicitImplementationForInterfaceMember(Microsoft.CodeAnalysis.CSharp.Symbol) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationForInterfaceMember(Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean ByRef) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.ComputeImplementationAndDiagnosticsForInterfaceMember(Microsoft.CodeAnalysis.CSharp.Symbol, Boolean, Boolean ByRef) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMemberInNonInterfaceWithDiagnostics(Microsoft.CodeAnalysis.CSharp.Symbol, Boolean) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.CSharp.Symbol) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.TypeSymbol.Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at SonarAnalyzer.Helpers.SymbolHelper+&lt;&gt;c__DisplayClass5_0`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].&lt;GetInterfaceMember&gt;b__1(System.__Canon) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at System.Linq.Enumerable.TryGetFirst[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;, System.Func`2&lt;System.__Canon,Boolean&gt;, Boolean ByRef) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at System.Linq.Enumerable.FirstOrDefault[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Generic.IEnumerable`1&lt;System.__Canon&gt;, System.Func`2&lt;System.__Canon,Boolean&gt;) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
C:\hostedtoolcache\windows\dotnet\sdk\5.0.100-preview.8.20417.9\Roslyn\Microsoft.CSharp.Core.targets(70,5): error :    at SonarAnalyzer.Helpers.SymbolHelper.GetInterfaceMember[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon) [D:\a\1\s\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SonarAnalyzer.CSharp.csproj]
`</Code>
    <Description>**Versions Used**: 
.Net: 5.0.100-preview.8.20417.9

**Steps to Reproduce**:

After we upgraded our build pipeline to use **.Net 5.0.100-preview.8.20417.9** instead of **5.0.100-preview.7.20366.6** the following exception (thrown by one of our analyzers) is intermittently failing the build:

``

Source code: 
</Description>
  </Issue>
  <Issue>
    <IssueID>47185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky test - DiagnosticsClassificationTaggerProviderTests.Test_FadingSpans</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>27/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>47185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>47185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>47185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>47185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Assert.Equal() Failure\r\nExpected: 2\r\nActual:   0


Stack trace:

  at Microsoft.CodeAnalysis.Editor.UnitTests.Diagnostics.DiagnosticsClassificationTaggerProviderTests.&lt;Test_FadingSpans&gt;d__0.MoveNext() in /_/src/EditorFeatures/Test/Diagnostics/DiagnosticsClassificationTaggerProviderTests.cs:line 53
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>Failing build: 
PR: 

Maybe related to #46950?

Error message:
``</Description>
  </Issue>
  <Issue>
    <IssueID>47183</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0057: Invalid code fix with string.Substring and null-conditional operator</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>25/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>47183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
16.8.0 Preview 2.0

**Steps to Reproduce**:
``
Note that the `.Substring` is still there.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>47181</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Wrong property value obtained by member access operator in C# in .NET Core</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>27/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>47181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>47181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: .NET Core 3.1

**Steps to Reproduce**:
Here the code which is executed with .NET Core 3.1:
``

**Expected Behavior**:
1 in output.

**Actual Behavior**:
Output is some random number.

![image](

I've checked it out in [Repl.it]( (with Mono) and got expected output - 1 that is different from .NET Core one.

What's going on? I'm learning using unmanaged code in C# and it is confusing.</Description>
  </Issue>
  <Issue>
    <IssueID>47175</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Fix name violation for record parameters does not update usages</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>47175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    public record Record(int i) { int M() =&gt; i; }


has diagnostic:

IDE1006: Naming rule violation: These words must begin with upper case characters:

The provided code fix does not update usages leading to the non compiling code:

csharp
    public record Record(int I) { int M() =&gt; i; }
`</Code>
    <Description>**Version Used**: VS 16.8 preview 2

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>47174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Only base positional Record parameters shown as used</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>19/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>47174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>47174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>47174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    public record Base(int I) { }
    public record Derived(string S) : Base(42) { }
`</Code>
    <Description>**Version Used**: visual studio 16.8 preview 2

**Steps to Reproduce**:

``

**Expected Behavior**:
both `I` and `S` are shown as used.

**Actual Behavior**:
IDE0060:
Remove unused parameter 'S' if it is not part of a shipped public API	

</Description>
  </Issue>
  <Issue>
    <IssueID>47173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InvalidCastException in Binder.BindSimpleProgram crashes Roslyn OOP</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>47173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>47173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>47173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.8 Preview 2

``</Description>
  </Issue>
  <Issue>
    <IssueID>47172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler message should be silent if an explicit type variable is correctly assigned a LINQ generic type result</Title>
    <CreatedDate>27/08/2020</CreatedDate>
    <ClosedDate>27/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>47172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Description
Currently the compiler message list includes prompts to 
	use 'var' rather than explicit type 
when assigning a LINQ query result for a generic type (ToList() returning List&lt;T&gt;, ToDictionary() returning Dictionary&lt;T, K&gt;).

Expected behavior: this should not be prompted or be the reverse with compiler message prompting to 
	use 'explicit type' rather than var
when assigning a LINQ query result for a generic type (ToList() returns List&lt;T&gt;, ToDictionary returns Dictionary&lt;T, K&gt;) to a var since one cannot tell what T and K are from looking at the LINQ query.

 Expected Good code (no compiler message)
      List&lt;someType&gt; someTypesList = someCollection.Concat(someOtherCollection).ToList();
	
  Not as good code (no compiler message or: use 'explicit type' instead of var)
     var formattedStrings = someCollection.Select(someFormatDelegate).ToList();

To reproduce:
   List&lt;someType&gt; someTypesList = someCollection.Concat(someOtherCollection).ToList();
   (Currently getting compiler message: use 'var' instead of explicit type)</Description>
  </Issue>
  <Issue>
    <IssueID>43315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Build Constants</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>01/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>43315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:15.9.20]
Conditional compilation does not work. The problem occurs when the string length of the build constants &lt;DefineConstants&gt; exceeds about 200 characters.For example, if I assign the following string to custom build constantsPROJECT-"ASLASLASLASLASLASL",PROJECT2-"ASLASLASLASLASL",PROJECT3-"ASLASLASLASLASL",PROJECT4-"ASLASLASLAS LASLASLASL,PROJECT5-"ASLASLASLASLASLASL",PROJECT6""ASLASLASLASLASLASL",PROJECT7-"ASLASLASLASLASLASLASL"in the intellisense the code is disabled#If PROJECT - "ASLASLASLASLASLASLASL" Then        Dim a - "test"If #Endwhile if I use this string with fewer characters, but with the same number of variables, the code is enabledPROJECT-"ASL",PROJECT2-"ASL",PROJECT3-"ASL",PROJECT4-"ASL",PROJECT5-"ASL",PROJECT6-"ASL""ASL"#If PROJECT - "ASL" Then        Dim a - "test"If #End---### Original Comments#### Visual Studio Feedback System on 3/2/2020, 06:39 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Jared Parsons [MSFT] on 3/27/2020, 09:24 AM: &lt;p&gt;Thanks for taking the time to report the issue. Unfortunately there is not enough information here for us to act on. Could you please provide a complete code sample here? Possibly create a small project, zip it up and attach it to the bug?&lt;/p&gt;&lt;p&gt;I’m unable to reproduce this locally. There is no real limit on the length of conditional compilation constants in the compiler nor is there a limit inside the project file for them.&lt;/p&gt;#### Visual Studio Feedback System on 4/7/2020, 07:18 PM: We will close this report in 14 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.#### Massimo Del Sorbo on 4/7/2020, 11:47 PM: (private comment, text removed)#### Massimo Del Sorbo on 4/9/2020, 00:20 AM: (private comment, text removed)---### Original Solutions#### Massimo Del Sorbo solved on 4/7/2020, 11:45 PM, 0 votes: &lt;p&gt;I have attached two small web solutions. One with the problem and one without. You can find the problem in Default.aspx.vb. After a build,  one solution works while the other dosen't.&lt;/p&gt;#### Jared Parsons [MSFT] on 4/8/2020, 02:57 PM: &lt;p&gt;Thanks for taking the time to provide repro projects. I looked at these locally and I’m not seeing any issues. The TestNotWorks can build successfully on my machine. I had a few problems resolving some types like BundleConfig but was able to work around that. The conditional compilation is also working as I would expect in this configuration.&lt;/p&gt;&lt;p&gt;Is there a specific part of the project that does not compile the way you expect here? I just couldn’t see anything obvious when I was looking through this.&lt;/p&gt;#### Massimo Del Sorbo on 4/9/2020, 00:19 AM: (private comment, text removed)</Description>
  </Issue>
  <Issue>
    <IssueID>43314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS2019: Navigating between the intellisense items is slow</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>16/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>43314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2019 16.5.3 (happened before the update to 16.5.3 too)

**Steps to Reproduce**:

Use the arrow keys to navigate between the intellisense items.

**Expected Behavior**:

Smooth intellisense experience with no delays.

**Actual Behavior**:

Slow intellisense experience due to a delay between the time the arrow key is pressed to the time the item is picked.

Here is a video that tries to demonstrate the issue (hopefully you can tell the difference): 
[2020-04-10 02-40-55.zip](

VS2019 on the left.
VS2017 on the top right.
VSCode on the bottom right.

@CyrusNajmabadi @sharwell 




</Description>
  </Issue>
  <Issue>
    <IssueID>43309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Task list not being refreshed with changes (C#)</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>16/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Hi there - I'm having the same problem as in the closed/fixed issue linked below, but for C# instead of C++. (I would not be surprised if this applies to every language.)Basically, Task List items are not being refreshed in the UI when they change. That includes the line-number position, content, even changing the token.Interestingly if the line-number changes, double-clicking on the item in the Task List takes you to its _former_ position, or occasionally throws an exception. See attached video for repro (not the exception unfortunately).Closing the project and re-opening will force the Task List to update.Deleting the comment and re-inserting it quickly (either by undo or paste) also forces the task list to update.Deleting the comment and re-typing it slowly, will sometimes only capture the first part of the comment. I inadvertently showed that phenomenon early in the attached video. My TODO item is created, including the hyphen I typed, but not the subsequent text.---### Original Comments#### Michael Loux on 4/9/2020, 09:27 AM: &lt;p&gt;Same issue here, also coming from the previous (now-C++-specific) bug.  &lt;/p&gt;&lt;p&gt;I would like to add to the post, above, that when I delete/insert a TODO, only the task items for the same file are updated.  If you have changes to several files, you will need to do the same workaround for each file in order to get them to refresh.  &lt;/p&gt;#### Hugo Trudel on 4/9/2020, 09:57 AM: &lt;p&gt;I hope they will also fix it when the solution contains VB.NET projects since we use both...&lt;/p&gt;#### Visual Studio Feedback System on 4/10/2020, 01:22 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>43309</IssueID>
        <PullRequestID>44873</PullRequestID>
        <Title>Ensure that TodoCommentOptions are serialized to OOP</Title>
        <Description>Fixes #43788
TodoCommentOptions and TodoCommentOptionsProvider were defined in EditorFeatures layer and we only serialize the options defined in Workspaces and Features layer to the OOP side: 

In future, we either need to add support to serialize all changed options to OOP (could be expensive) or somehow enforce that all the OOP related options are defined in Workspaces and Features layer.</Description>
        <CreatedDate>05/06/2020</CreatedDate>
        <ClosedDate>05/06/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>43309</IssueID>
            <PullRequestID>44873</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>43308</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>43308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bugs in the new improved pattern matching</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>15/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>43308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var x = 5;
var str = x switch
{
    1 =&gt; "a",
    &gt; 2 =&gt; "b",
    &gt; 1 and &lt;= 2 =&gt; "c",
    &lt; 0 =&gt; "d"
};

See: https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQAdYwggdsgZgBoYQpkBbAHwAEAmARgFgAoGggAno4GEOBvVh2FcGANi4AWDgFkoAS1wAKAJQChIzQDcoCDgA8OAXg4BWANwbNwnXuQw9Jw8gDu8mAGMAFleuCW1oEcDMYAfBwARFARRL5BHOF0YZHAMXFB4SFQuAAmHAA8JklG4REeaQHxIvkcAAzJETkR6cIAvpaVgTQMAJxK9ggqHZqtrK1AA=

**Expected Behavior**: 
Compiled successfully

**Actual Behavior**:
error CS8510: The pattern has already been handled by a previous arm of the switch expression.

However, if I change my code to
csharp
var x = 5;
var str = x switch
{
    1 =&gt; "a",
    &gt; 2 =&gt; "b",
    &lt;= 2 and &gt; 1 =&gt; "c",
    &lt; 0 =&gt; "d"
};
`</Code>
    <Description>**Version Used**: 64c74c0ac3ccf45d63ae14d7d2ef067cb21b75ad

**Steps to Reproduce**:
``
It will work as expect.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>43308</IssueID>
        <PullRequestID>43376</PullRequestID>
        <Title>Add a test to demonstrate absence of a reported issue</Title>
        <Description>Fixes #43308</Description>
        <CreatedDate>15/04/2020</CreatedDate>
        <ClosedDate>15/04/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>43308</IssueID>
            <PullRequestID>43376</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>43308</IssueID>
            <PullRequestID>43376</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>43376</PullRequestID>
            <IssueID>43308</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>43307</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Reuse Local and Anonymous Functions where possible (compiler optimization)</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43307</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Code Gen Quality</Name>
        <IssueID>43307</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

public class ExampleClass {
    public object ExampleMethod() {
        bool ExampleLocal(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        bool ExampleLocal2(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous2() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        return (
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            ExampleLocalWithAnnonymous(),
            ExampleLocalWithAnnonymous2(),
            (Func&lt;char, bool&gt;)ExampleLocal,
            (Func&lt;char, bool&gt;)ExampleLocal2
        );
    }
    
    public object ExampleMethod2() {
        bool ExampleLocal(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        bool ExampleLocal2(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous2() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        return (
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            ExampleLocalWithAnnonymous(),
            ExampleLocalWithAnnonymous2(),
            (Func&lt;char, bool&gt;)ExampleLocal,
            (Func&lt;char, bool&gt;)ExampleLocal2
        );
    }
}

public class ExampleClass2 {
    public object ExampleMethod() {
        bool ExampleLocal(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        bool ExampleLocal2(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous2() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        return (
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            ExampleLocalWithAnnonymous(),
            ExampleLocalWithAnnonymous2(),
            (Func&lt;char, bool&gt;)ExampleLocal,
            (Func&lt;char, bool&gt;)ExampleLocal2
        );
    }
    
    public object ExampleMethod2() {
        bool ExampleLocal(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        bool ExampleLocal2(Char t) {
            return char.IsLetter(t) &amp;&amp; char.IsLower(t);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        Func&lt;char, bool&gt; ExampleLocalWithAnnonymous2() {
            return e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        }
        return (
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            (Func&lt;char, bool&gt;)(e =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e)),
            ExampleLocalWithAnnonymous(),
            ExampleLocalWithAnnonymous2(),
            (Func&lt;char, bool&gt;)ExampleLocal,
            (Func&lt;char, bool&gt;)ExampleLocal2
        );
    }
}

&lt;/details&gt;

This code is currently compiled as (modified a bit to make it shorter here):

&lt;details&gt;
&lt;summary&gt;Compiled Code&lt;/summary&gt;

cs
public class ExampleClass {
    [Serializable]
    [CompilerGenerated]
    private sealed class &lt;&gt;c {
        public static readonly &lt;&gt;c &lt;&gt;9 = new &lt;&gt;c();

        public static Func&lt;char, bool&gt; &lt;&gt;9__0_6;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_7;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_4;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_5;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_6;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_7;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_4;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_5;

        private bool &lt;ExampleMethod&gt;g__ExampleLocal|0_0(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        private bool &lt;ExampleMethod&gt;g__ExampleLocal2|0_1(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        internal bool &lt;ExampleMethod&gt;b__0_6(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_7(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_4(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_5(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        private bool &lt;ExampleMethod2&gt;g__ExampleLocal|1_0(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        private bool &lt;ExampleMethod2&gt;g__ExampleLocal2|1_1(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        internal bool &lt;ExampleMethod2&gt;b__1_6(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_7(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_4(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_5(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
    }

    public object ExampleMethod() {
        return new ValueTuple&lt;Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;&gt;(&lt;&gt;c.&lt;&gt;9__0_4 ?? (&lt;&gt;c.&lt;&gt;9__0_4 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_4)), &lt;&gt;c.&lt;&gt;9__0_5 ?? (&lt;&gt;c.&lt;&gt;9__0_5 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_5)), &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous|0_2(), &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous2|0_3(), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;g__ExampleLocal|0_0), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;g__ExampleLocal2|0_1));
    }

    public object ExampleMethod2() {
        return new ValueTuple&lt;Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;&gt;(&lt;&gt;c.&lt;&gt;9__1_4 ?? (&lt;&gt;c.&lt;&gt;9__1_4 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_4)), &lt;&gt;c.&lt;&gt;9__1_5 ?? (&lt;&gt;c.&lt;&gt;9__1_5 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_5)), &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous|1_2(), &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous2|1_3(), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;g__ExampleLocal|1_0), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;g__ExampleLocal2|1_1));
    }

    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous|0_2()
        =&gt; &lt;&gt;c.&lt;&gt;9__0_6 ?? (&lt;&gt;c.&lt;&gt;9__0_6 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_6));
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous2|0_3()
		=&gt; return &lt;&gt;c.&lt;&gt;9__0_7 ?? (&lt;&gt;c.&lt;&gt;9__0_7 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_7));
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous|1_2()
    	=&gt; &lt;&gt;c.&lt;&gt;9__1_6 ?? (&lt;&gt;c.&lt;&gt;9__1_6 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_6));    
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous2|1_3()
	    =&gt; &lt;&gt;c.&lt;&gt;9__1_7 ?? (&lt;&gt;c.&lt;&gt;9__1_7 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_7));
}

public class ExampleClass2 {
    [Serializable]
    [CompilerGenerated]
    private sealed class &lt;&gt;c {
        public static readonly &lt;&gt;c &lt;&gt;9 = new &lt;&gt;c();

        public static Func&lt;char, bool&gt; &lt;&gt;9__0_6;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_7;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_4;
        public static Func&lt;char, bool&gt; &lt;&gt;9__0_5;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_6;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_7;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_4;
        public static Func&lt;char, bool&gt; &lt;&gt;9__1_5;

        private bool &lt;ExampleMethod&gt;g__ExampleLocal|0_0(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        private bool &lt;ExampleMethod&gt;g__ExampleLocal2|0_1(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        internal bool &lt;ExampleMethod&gt;b__0_6(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_7(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_4(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod&gt;b__0_5(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        private bool &lt;ExampleMethod2&gt;g__ExampleLocal|1_0(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        private bool &lt;ExampleMethod2&gt;g__ExampleLocal2|1_1(char t)
			=&gt; char.IsLetter(t) &amp;&amp; char.IsLower(t);
        internal bool &lt;ExampleMethod2&gt;b__1_6(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_7(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_4(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
        internal bool &lt;ExampleMethod2&gt;b__1_5(char e)
			=&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
    }

    public object ExampleMethod() {
        return new ValueTuple&lt;Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;&gt;(&lt;&gt;c.&lt;&gt;9__0_4 ?? (&lt;&gt;c.&lt;&gt;9__0_4 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_4)), &lt;&gt;c.&lt;&gt;9__0_5 ?? (&lt;&gt;c.&lt;&gt;9__0_5 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_5)), &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous|0_2(), &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous2|0_3(), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;g__ExampleLocal|0_0), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;g__ExampleLocal2|0_1));
    }

    public object ExampleMethod2() {
        return new ValueTuple&lt;Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;, Func&lt;char, bool&gt;&gt;(&lt;&gt;c.&lt;&gt;9__1_4 ?? (&lt;&gt;c.&lt;&gt;9__1_4 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_4)), &lt;&gt;c.&lt;&gt;9__1_5 ?? (&lt;&gt;c.&lt;&gt;9__1_5 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_5)), &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous|1_2(), &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous2|1_3(), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;g__ExampleLocal|1_0), new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;g__ExampleLocal2|1_1));
    }

    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous|0_2()
        =&gt; &lt;&gt;c.&lt;&gt;9__0_6 ?? (&lt;&gt;c.&lt;&gt;9__0_6 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_6));
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod&gt;g__ExampleLocalWithAnnonymous2|0_3()
		=&gt; return &lt;&gt;c.&lt;&gt;9__0_7 ?? (&lt;&gt;c.&lt;&gt;9__0_7 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod&gt;b__0_7));
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous|1_2()
    	=&gt; &lt;&gt;c.&lt;&gt;9__1_6 ?? (&lt;&gt;c.&lt;&gt;9__1_6 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_6));    
    [CompilerGenerated]
    private static Func&lt;char, bool&gt; &lt;ExampleMethod2&gt;g__ExampleLocalWithAnnonymous2|1_3()
	    =&gt; &lt;&gt;c.&lt;&gt;9__1_7 ?? (&lt;&gt;c.&lt;&gt;9__1_7 = new Func&lt;char, bool&gt;(&lt;&gt;c.&lt;&gt;9.&lt;ExampleMethod2&gt;b__1_7));
}


&lt;/details&gt;

That code could be optimized to:

&lt;details&gt;
&lt;summary&gt;Hand-Written Code&lt;/summary&gt;

cs
public class ExampleClass {    
    private static class HelperClass {
        public static Func&lt;char, bool&gt; function = Function;
        private static bool Function(char e) =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
    }
    
    private static bool LocalFunction(char e) =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
 
    private static Func&lt;char, bool&gt; LocalFunction2() =&gt; HelperClass.function;
    
    public object ExampleMethod() {
        return (
            HelperClass.function,
            HelperClass.function,
            LocalFunction2(),
            LocalFunction2(),
            (Func&lt;char, bool&gt;)LocalFunction,
            (Func&lt;char, bool&gt;)LocalFunction
        );
    }
    
    public object ExampleMethod2() {
        return (
            HelperClass.function,
            HelperClass.function,
            LocalFunction2(),
            LocalFunction2(),
            (Func&lt;char, bool&gt;)LocalFunction,
            (Func&lt;char, bool&gt;)LocalFunction
        );
    }
}

public class ExampleClass2 {    
    private static class HelperClass {
        public static Func&lt;char, bool&gt; function = Function;
        private static bool Function(char e) =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
    }
    
    private static bool LocalFunction(char e) =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
 
    private static Func&lt;char, bool&gt; LocalFunction2() =&gt; HelperClass.function;
    
    public object ExampleMethod() {
        return (
            HelperClass.function,
            HelperClass.function,
            LocalFunction2(),
            LocalFunction2(),
            (Func&lt;char, bool&gt;)LocalFunction,
            (Func&lt;char, bool&gt;)LocalFunction
        );
    }
    
    public object ExampleMethod2() {
        return (
            HelperClass.function,
            HelperClass.function,
            LocalFunction2(),
            LocalFunction2(),
            (Func&lt;char, bool&gt;)LocalFunction,
            (Func&lt;char, bool&gt;)LocalFunction
        );
    }
}


&lt;/details&gt;

Or with some tricky stuff:

&lt;details&gt;
&lt;summary&gt;Hand-Written Code&lt;/summary&gt;

cs
internal class HelperClass {
	public static Func&lt;char, bool&gt; function = Function;
    private static bool Function(char e) =&gt; char.IsLetter(e) &amp;&amp; char.IsLower(e);
}

public class ExampleClass {        
    public object ExampleMethod() {
        return (HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function);
    }
    
    public object ExampleMethod2() {
        return (HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function);
    }
}

public class ExampleClass2 {        
    public object ExampleMethod() {
        return (HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function);
    }
    
    public object ExampleMethod2() {
        return (HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function, HelperClass.function);
    }
}
`</Code>
    <Description>The current compiler doesn't optimize well local functions and anonymous functions.
Look at the following C# code (from [SharpLab](

&lt;details&gt;
&lt;summary&gt;Source Code&lt;/summary&gt;

``

&lt;/details&gt;

I think there is plenty of room here for compiling optimization. I guess the last snippet would require a very advanced analysis to produce that code. But the previous snippet just checks for repeated compiled-generated members in a class.
</Description>
  </Issue>
  <Issue>
    <IssueID>43305</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>43305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Category based analyzer configuration should not affect non-configurable diagnostics</Title>
    <CreatedDate>13/04/2020</CreatedDate>
    <ClosedDate>16/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>43305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>43305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest

**Steps to Reproduce**:

1. Install an analyzer that reports a [NotConfigurable]( diagnostic for every named type
2. Verify diagnostic
3. Add an .editorconfig with a [bulk configuration]( entry, say `dotnet_analyzer_diagostic.category-RuleCategory.severity = none` or `dotnet_analyzer_diagostic.severity = none`

**Expected Behavior**:
Still see the diagnostic. Non-configurable diagnostics should not be affected by any .editorconfig based configuration

**Actual Behavior**:
Diagnostic gets suppressed.</Description>
  </Issue>
  <Issue>
    <IssueID>43299</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code Style - Prefer braces when multiple lines does not show any warnings.</Title>
    <CreatedDate>12/04/2020</CreatedDate>
    <ClosedDate>14/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>43299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>43299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello, I have configured my code style in the following way:
![image](

As you can see, I want to receive a warning there are unnecessary braces in a single line statement. For example in an single line if statement. But this does not seem to be working. Notice the following code:
![image](

As you can see, there are unnecessary braces, but no warning as given. I would love to receive a warning when there are unnecessary braces (just like the code style settings say).

Thank you for your help :)</Description>
  </Issue>
  <Issue>
    <IssueID>43295</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>43295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IntelliSense should suggest `void` return type when defining a readonly struct method</Title>
    <CreatedDate>12/04/2020</CreatedDate>
    <ClosedDate>10/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>43295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>43295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In Visual Studio 2019, version 16.5.2,  when I try to define a `readonly void` method within a structure type, IntelliSense doesn't suggest `void`:
![image](

I type it all, letter by letter, and hit a space bar. Result:
![image](

(Note: in this example, the _Add items from unimported namespaces_ IntelliSense feature is on. So, when it's on, it's additionally difficult to define a `readonly void` method. When it's off, the suggestion list would be just empty.)

**Expected Behavior**: `void` should be suggested as an option when one tries to define a `readonly` method in a struct.

This can be the part of #39265</Description>
  </Issue>
  <Issue>
    <IssueID>43291</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>43291</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Offer 'Convert to conditional expression' between throw and return statements</Title>
    <CreatedDate>12/04/2020</CreatedDate>
    <ClosedDate>13/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43291</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43291</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43291</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    int M()
    {
        var index = 42;

        [||]if (index == -1)
        {
            throw new InvalidOperationException("...");
        }

        return index;
    }
}
`</Code>
    <Description>**Version Used**: 16.5.3

'Convert to switch expression' is offered here but not 'Convert conditional expression':

``

If you change the `throw` statement to a `return` statement, 'Convert conditional expression' shows up as expected.</Description>
  </Issue>
  <Issue>
    <IssueID>43290</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Generate Equals/GetHashCode' generates calls to abstract base members</Title>
    <CreatedDate>12/04/2020</CreatedDate>
    <ClosedDate>26/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43290</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43290</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
abstract class Base
{
    public abstract override bool Equals(object? obj);
    public abstract override int GetHashCode();
}

class [||]Derived : Base
{
    public int P { get; }
}


Resulting code:

cs
    public override bool Equals(object? obj)
    {
        return obj is Derived derived &amp;&amp;
               /* ❌ CS0205 Cannot call an abstract base member: 'Base.Equals(object?)'
               ↓↓↓↓↓↓↓↓↓↓↓ */
               base.Equals(obj) &amp;&amp;
               P == derived.P;
    }

    public override int GetHashCode()
    {
        // ❌ CS0205 Cannot call an abstract base member: 'Base.GetHashCode()'
        //                      ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
        return HashCode.Combine(base.GetHashCode(), P);
    }
`</Code>
    <Description>**Version Used**: VS 16.5.3

Choose 'Generate Equals and GetHashCode...' here:

``</Description>
  </Issue>
  <Issue>
    <IssueID>43279</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intellisense regression for lambda parameters constrained to struct</Title>
    <CreatedDate>11/04/2020</CreatedDate>
    <ClosedDate>13/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public interface IComponentData
{
}
public class EntitiesQueryBuilder
{
	public delegate void F_D&lt;T0&gt;(ref T0 d0) where T0 : struct, IComponentData;
	public void ForEach&lt;T0&gt;(F_D&lt;T0&gt; f) where T0 : struct, IComponentData
	{
	}
}
public abstract class Component
{
	public EntitiesQueryBuilder Entities =&gt; null;
	protected abstract void OnUpdate();
}
public struct Person : IComponentData
{
	public float HP;
}
public class PersonComponent : Component
{
	protected override void OnUpdate()
	{
		Entities.ForEach((ref Person p) =&gt;
		{
		});
	}
}
`</Code>
    <Description>**Version Used**: 
Verified in VS 16.5, VSM 8.5
Regression from 16.4/8.4

**Steps to Reproduce**:
Supporting code:

``

1. Paste code in a C# project
2. Go to the `OnUpdate` method in `PersonComponent`
3. Go into the lambda passed to the ForEach call.
4. Type `p.` and ask for completion.

**Expected Behavior**:
HP field should be available in the IntelliSense.

**Actual Behavior**:
HP field is not visible anymore in the list presented by IntelliSense.

This is a best effort repro from the Unity APIs. This has been originally reported on the [Unity forums](

See picture:

![image](

This might be related to  #42910.</Description>
  </Issue>
  <Issue>
    <IssueID>43274</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>43274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support LSP hover outside of LiveShare</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>12/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>CloudEnv</Name>
        <IssueID>43274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>43274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn already contains the support for LSP hover but was explicitly disabled on non-liveshare scenarios ( due to classifications not being supported in LSP hover.

But we need the C# language server to support hover in order to make C# hovers work in Razor files (even though we might be missing classifications until it is supported).

cc @dibarbet </Description>
  </Issue>
  <Issue>
    <IssueID>43267</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>DateTime completion should work in string interpolation format strings.</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>23/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>43267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>i.e. here: `$"Hello, {name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now."`

Should be fairly straightforward to do.  Just need to update the code to not just expect string literals, but also interpolation format strings where the expr type is the right form.</Description>
  </Issue>
  <Issue>
    <IssueID>43262</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Error CS0570 while debugging a default interface generator method of a variant interface</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>14/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>43262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>43262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>43262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>43262</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
interface I&lt;out T&gt;
{
    System.Collections.Generic.IEnumerable&lt;T&gt; M()
    {
        var x = default(T);
        yield return x;
    }
}

public class C : I&lt;C&gt;
{
    public static void Main() =&gt; System.Linq.Enumerable.Any(((I&lt;C&gt;)new C()). M());
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Consider the following interface and a dummy class that implements it.``now put a breakpoint on line 6 (`yield return x;`).Execute the program and you'll notice something odd if you try to watch `x`, It tells you the following::&gt; error CS0570: '&lt;&gt;x&lt;T&gt;.&lt;&gt;m0(I&lt;T&gt;.&lt;M&gt; d__0)' is not supported by the languageObviously, the program works so it is supported by the language, but the debugger has no idea what to do with it. This also happens for `async` (`ValueTask`,`Task`,`Task&lt;T&gt;`,`ValueTask&lt;T&gt;`, or `IAsyncEnumerable&lt;T&gt;`) returning methods---### Original Comments#### Visual Studio Feedback System on 4/8/2020, 06:31 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>43260</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>43260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>F2 Rename Stopped working version</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>43260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>43260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
[regression] [worked-in:before 16.5.3]
I got Visual Studio yesterday. New version today so I updated. 16.5.3
F2 just does nothing. Context Menu Rename does nothing.

Not sure if this is related, but it happened the first time I tried use F2 in the new version.

``

---
### Original Comments

#### Visual Studio Feedback System on 4/7/2020, 08:25 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>43258</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>43258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code Cleanup formats code that is not in the "Included Fixers" list</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>11/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>43258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>43258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43258</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Code Cleanup Profile 1 is configured for "Sort usings" and "Remove unnecessary usings".When invoked from the "Run Code Cleanup" icon at the bottom of an editor panel, it performs the actions requested, but also reformats code that is not in the using section.Specifically, I had a block of code that was aligned on assignment symbol (=) on successive lines, all of those statements were reformatted, which obviated my preferred alignments.I would prefer that the code cleanup actions were limited to those specifically included in the "Included Fixers" list.Thank youCraig Pelkie---### Original Comments#### Visual Studio Feedback System on 4/7/2020, 07:38 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>43255</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>43255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpLanguageServiceTest_MultipleResults is flaky</Title>
    <CreatedDate>10/04/2020</CreatedDate>
    <ClosedDate>30/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>43255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>43255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
   en Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage) en /_/src/Test/Utilities/Portable/ThrowingTraceListener.cs:línea 26
   en System.Diagnostics.TraceListener.Fail(String message)
   en System.Diagnostics.TraceInternal.Fail(String message)
   en System.Diagnostics.Debug.Assert(Boolean condition)
   en Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.GetInstance() en /_/src/Dependencies/PooledObjects/ArrayBuilder.cs:línea 348
   en Roslyn.VisualStudio.Next.UnitTests.Services.LanguageServiceTests.&lt;GetVsSearchResultsAsync&gt;d__3.MoveNext() en /_/src/VisualStudio/Core/Test.Next/Services/LanguageServiceTests.cs:línea 93
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   en Roslyn.VisualStudio.Next.UnitTests.Services.LanguageServiceTests.&lt;CSharpLanguageServiceTest_MultipleResults&gt;d__1.MoveNext() en /_/src/VisualStudio/Core/Test.Next/Services/LanguageServiceTests.cs:línea 58
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
`</Code>
    <Description>### Stack trace

``

### Builds
|Build|Pull Request | Test Failure Count|
| --- | --- | --- |
|[#595297](
|[#595299](
|[#595432](
|[#595722](
|[#596109](
### Configurations
- Windows Desktop Debug Test32
- Windows Desktop Release Test32
- Windows Desktop Release Test64
- Windows Desktop Spanish

</Description>
  </Issue>
  <Issue>
    <IssueID>43237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>43237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove all the RichNav code from Roslyn post-build</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>12/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>43237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>43237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For //build we implemented this work inside roslyn for expediency.  Post-//build we'll be removing it and ownership of this experience will move to platform.  </Description>
  </Issue>
  <Issue>
    <IssueID>43229</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxGenerator.AddBaseType adds type to front of list, possibly breaking compilation</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>09/04/2020</ClosedDate>
    <IssueLabels />
    <Code>cs
class Foo : BaseClass, IFoo1


to this:

cs
class Foo : BaseClass, IFoo1, IFoo2


**Actual Behavior**:

The `SyntaxGenerator` inserts the new base type at the front of the list, thereby creating a compile-time error:

cs
class Foo : BaseClass, IFoo1


to this:

cs
class Foo : IFoo2, BaseClass, IFoo1
`</Code>
    <Description>**Version Used**: Microsoft.CodeAnalysis.CSharp.Workspaces 2.8.2

**Steps to Reproduce**:

In a code fix over C# code, acquire the `SyntaxGenerator`. Call `SyntaxGenerator.AddBaseType`, and notice how it adds the new base type to the front of the list. But when the list already contains a concrete type at the front, inserting an interface in front of that produces a c# compiler error.

**Expected Behavior**:

The `SyntaxGenerator` appends the new type at the end of the list.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>43219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature request: Ignore spaces in single line property definitions and single line expression bodies.</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>09/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>43219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello, I have a feature request regarding the auto formatter. I personally organize my code by grouping and aligning it (with a plugin), because I find the code easier to read then. For example:
``
It would be great to have options in the formatting settings that change this behavior. There is a similar option which is called "Ignore spaces in declaration statements":
![image](

These two extra options would be very much appreciated:
    - Ignore spaces in single line property definitions.
    - Ignore spaces in single line expression bodies.

Thank you for your help :)
</Description>
  </Issue>
  <Issue>
    <IssueID>43218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>devenv dissappears off my screen constantly with Out Of Memory or Not Enough Storage Space</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>05/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>43218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.4.2

**Steps to Reproduce**:

16GB Ram, Windows 7 x64, 1TB hard drive with 800GB free. Dual Core.

1. Open solution in Visual Studio
2. Do literally anything, it happens completely at random, sometimes running code, sometimes just editing code, sometimes when I'm not even at the computer. It's a very large solution. But sometimes it happens once every 15 mins, sometimes twice per day. Almost always the exact same stack trace, the top of the stack is identical but the bottom can change slightly but the error is always one of two, either Out Of Memory or Not Enough Storage Space. The only difference is whether it's devenv.exe or ServiceHub.RoslynCodeAnalysisService32.exe

**Expected Behavior**: Visual Studio stays on my screen.

**Actual Behavior**: Visual Studio (and if debugging all running processed) dissappears. No "Restart?" dialog.

Stack Trace of Out of Memory
``</Description>
  </Issue>
  <Issue>
    <IssueID>43216</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[C# Feature Request] implicit namespace per file</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>09/04/2020</ClosedDate>
    <IssueLabels />
    <Code>csharp
namespace default
{
	public class SomeClass
	{
	}
}

The above should declare some class within the namespace as per project "Default Namespace" and folder names (file path).

What are the gains here?
* file can be moved accross project without need to change its content
* no changes in specific file needed when modifying parent namespace or project folder structure (usings changes in other files would be still required, though)
* DRY, why shall we specify the namespace if it can be concluded by tools

One variation could be:

csharp
namespace default;

public class SomeClass
{
}
`</Code>
    <Description>The idea is simple: let's allow default namespace for all things declared in single cs file:

``
which is even shorter and reduce nesting parenthesis.
 
The suggestion is inspired by razor file behavior in Blazor. Additional thing to consider is _Import.cs file which might be a nice addition to this feature.</Description>
  </Issue>
  <Issue>
    <IssueID>43215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>43215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Static field assigned by out parameter in static initializer is treated as uninitialized, results in CS8618</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>14/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>43215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable

using System;

namespace ClassLibrary5
{
    public static class Class1&lt;T&gt;
    {
        public static readonly T t;
        public static readonly bool f = Get(out t);

        private static bool Get(out T t)
        {
            t = Activator.CreateInstance&lt;T&gt;();
            return true;
        }
    }
}
`</Code>
    <Description>**Version Used**: 

.NET Core 3.1.201, C# 8.0

**Steps to Reproduce**:

``

**Expected Behavior**:

No warnings.

**Actual Behavior**:

Class1.cs(9, 34): [CS8618] Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.</Description>
  </Issue>
  <Issue>
    <IssueID>43214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>43214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Call to Thread.Sleep() in LSP FAR handler should be removed once related bug is fixed</Title>
    <CreatedDate>09/04/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>43214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The PR to move LSP Find All References to use streaming (#43153) currently contains a workaround to the following bug on the LSP side that prevents the final batch of references from consistently being displayed in the results list: 
This workaround, a Thread.Sleep() call in the Find All References handler, should be removed once the bug is resolved.</Description>
  </Issue>
  <Issue>
    <IssueID>43202</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use Range Operator should check for writable indexer</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>10/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>43202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>43202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
struct S
{
  public ref S Slice(int start, int length) =&gt; throw null;
  public int Length { get; }
  public S this[System.Range r] { get =&gt; default; }
}

class C
{
    void Goo(S s)
    {
        s.Slice(1, s.Length - 2) = default;
    }
}


**Expected Behavior**:

No code fix is offered to convert the `Slice` call to a range operator.

**Actual Behavior**:

The call is converted to this:

csharp
s[1..^1] = default;
`</Code>
    <Description>**Version Used**: 16.6 Preview 2

**Steps to Reproduce**:

``

The result does not compile because the indexer is read only.

&gt; error CS0200: Property or indexer 'S.this[Range]' cannot be assigned to -- it is read only</Description>
  </Issue>
  <Issue>
    <IssueID>43201</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>43201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IntelliSense offers members of type in another overload that are unambiguously wrong</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>09/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>43201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

class C
{
    public int PropertyOnC { get; }

    async Task M(IQueryable&lt;C&gt; query)
    {
        _ = await query.MaxAsync(c =&gt; c.[||])
    }
}

// From Entity Framework
static class QueryableExtensions
{
    public static Task&lt;TResult&gt; MaxAsync&lt;TSource, TResult&gt;(
        this IQueryable&lt;TSource&gt; source,
        Expression&lt;Func&lt;TSource, TResult&gt;&gt; selector)
    {
        throw new NotImplementedException();
    }
    public static Task&lt;TResult&gt; MaxAsync&lt;TSource, TResult&gt;(
        this IQueryable&lt;TSource&gt; source,
        CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }
}
`</Code>
    <Description>**Version Used**: VS 16.5.3 and 16.6.0-p2.1

**Steps to Reproduce**:

``


**Expected Behavior**:

IntelliSense offers only members that can dot off `C`

**Actual Behavior**:

IntelliSense offers members of both `C` and `CancellationToken`, even though the lambda syntax guarantees that there is no ambiguity about the fact that `CancellationToken` members are not what anyone would want to see.

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>43199</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>43199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException in ChangeSignatureCodeRefactoringProvider (object initializer)</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>25/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>43199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>43199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VisualStudio.16.Preview/16.6.0-pre.2.1+30001.183

**Steps to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>43198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>43198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Pull members up refactor removes async modifier</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>18/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>43198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Minimal rep case, VS v16.5.2:``1. Invoke the "Pull members up to base type" refactor on `PullUpAsync`.2. Accept the selection of member and destination.3. Accept the notice that `PullUpAsync` will be made public.4. Refactor creates expected new method on `IPullUp`, but changes implementation in `PullUp` from `internal async` to `public`, making the `await` usage an error.Is this behaviour intentional?---### Original Comments#### Visual Studio Feedback System on 4/7/2020, 00:50 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 4/8/2020, 10:33 AM: &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href=" In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href=" We’ll keep you posted on any updates to this feedback.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>43184</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>43184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for "Extension GetEnumerator"</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>07/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Extension Foreach</Name>
        <IssueID>43184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>43184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Language proposal: 
General compiler test plan: 

#### Spec:
- [x] Complete proposal spec is checked into csharplang

#### Compiler (Both sync and async for each of these):
- [x] [x] LangVer (TestGetEnumeratorPatternViaExtensionsCSharp8, )
- [x] [x] Feature spec exists and reviewed with LDM
- [x] [x] Update compiler test plan
- [x] [x] IOperation/CFG
    - [x] [x] CFG shows the extension method getting called
- [x] [ ] GetForEachStatementInfo
- [x] [x] Differing access modifiers
    - [x] [x] Extension GetEnumerator should work for internal, unlike regular GetEnumerator (TestGetEnumeratorPatternViaInternalExtensions, TestGetAsyncEnumeratorPatternViaInternalExtensions)
    - [x] [x] Test with internal instance method _and_ extension method on the same type (TestGetEnumeratorPatternViaExtensionWithInternalInstanceGetEnumerator, TestGetAsyncEnumeratorPatternViaExtensionWithInternalInstanceGetAsyncEnumerator)
    - [x] [x] `private` extension methods when inside a static class (TestGetEnumeratorPatternViaAccessiblePrivateExtension, TestGetAsyncEnumeratorPatternViaAccessiblePrivateExtension)
- [x] [x] `out`/`ref` disallowed.
    - [x] [x] `out` (, )
    - [x] [x] `ref` (TestGetEnumeratorPatternViaRefExtensionOnNonAssignableVariable, TestGetAsyncEnumeratorPatternViaExtensionWithParams)
- [x] [x] `in` allowed in the same places as `Deconstruct`. (TestGetEnumeratorPatternViaInExtensionOnNonAssignableVariable, TestGetAsyncEnumeratorPatternViaInExtensionOnAssignableVariable)
- [x] [x] Default parameters (TestGetEnumeratorPatternViaExtensionWithOptionalParameter, TestGetAsyncEnumeratorPatternViaExtensionWithOptionalParameter)
- [x] [x] `params` arrays (TestGetEnumeratorPatternViaExtensionWithParams, TestGetAsyncEnumeratorPatternViaExtensionWithParams)
- [x] [x] `__arglist` parameter (TestGetEnumeratorPatternViaExtensionWithArgList, TestGetAsyncEnumeratorPatternViaExtensionWithArgList)
- [x] [x] `dynamic` prefers existing attempt to call instance `GetEnumerator`, not an extension method, or does not work on async (TestPreferIEnumeratorInterfaceOnDynamicThanViaExtension, TestCannotUseExtensionGetAsyncEnumeratorOnDynamic)
- [x] [x] Conversions
    - [x] [x] Reference conversions (TestGetEnumeratorPatternViaExtensionsWithUpcast, TestGetAsyncEnumeratorPatternViaExtensionsWithUpcast)
    - [x] [x] Boxing conversion (TestGetEnumeratorPatternViaExtensionsWithNullableValueTypeConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithNullableValueTypeConversion)
    - [x] [x] Unboxing (should show helpful error, like for regular invocation) (TestGetEnumeratorPatternViaExtensionsWithUnboxingConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithUnboxingConversion)
    - [x] [x] Literal 0 to enum (same as Unboxing) (TestGetEnumeratorPatternViaExtensionsWithZeroToEnumConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithZeroToEnumConversion)
    - [x] [x] Unconstrained generics (TestGetEnumeratorPatternViaExtensionsWithUnconstrainedGenericConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithUnconstrainedGenericConversion)
    - [x] [x] Constrained generics (TestGetEnumeratorPatternViaExtensionsWithConstrainedGenericConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithConstrainedGenericConversion)
    - [x] [x] Interpolated string conversions (IFormattableString vs object) (TestGetEnumeratorPatternViaExtensionsWithFormattableStringConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithFormattableStringConversion1)
    - [x] [x] User-defined conversions (should be invalid) (TestGetEnumeratorPatternViaExtensionsWithUserDefinedImplicitConversion, TestGetAsyncEnumeratorPatternViaExtensionsWithUserDefinedImplicitConversion)
    - [x] [x] Tuple type conversions (TestGetEnumeratorPatternViaExtensionsOnTupleWithNestedConversions, TestGetAsyncEnumeratorPatternViaExtensionsOnTupleWithNestedConversions)
- [x] [x] `this` types:
    - [x] [x] `class` (a lot)
    - [x] [x] `interface` (TestGetEnumeratorPatternViaExtensionsOnInterface, TestGetAsyncEnumeratorPatternViaExtensionsOnInterface)
    - [x] [x] `delegate` (TestGetEnumeratorPatternViaExtensionsOnDelegate, TestGetAsyncEnumeratorPatternViaExtensionsOnDelegate)
    - [x] [x] `struct` (, TestGetAsyncEnumeratorPatternOnRange)
    - [x] [x] `enum` (TestGetEnumeratorPatternViaExtensionsOnEnum, TestGetAsyncEnumeratorPatternViaExtensionsOnEnum)
    - [x] [x] `nullable` (TestGetEnumeratorPatternViaExtensionsOnNullable, TestGetAsyncEnumeratorPatternViaExtensionsOnNullable)
    - [x] [x] type parameters (TestGetEnumeratorPatternViaExtensionsOnTypeParameter, TestGetAsyncEnumeratorPatternViaExtensionsOnTypeParameter)
- [x] [x] Ambiguous overloads (TestGetEnumeratorPatternViaAmbiguousExtensions, TestGetAsyncEnumeratorPatternViaAmbiguousExtensions)
- [x] [x] Correct name signature, but return doesn't fulfill the pattern (, TestMoveNextAsyncPatternViaExtensions1)
- [x] [x] Extension is preferred last (TestPreferEnumeratorPatternFromInstanceThanViaExtension, TestPreferAsyncEnumeratorPatternFromInstanceThanViaExtension)
- [x] [x] If `GetEnumerator` is defined on the class, extensions are not searched, even if return is incorrect. (TestPreferEnumeratorPatternFromInstanceThanViaExtensionEvenWhenInvalid, TestPreferAsyncEnumeratorPatternFromInstanceThanViaExtensionEvenWhenInvalid)
- [x] [x] Multiple extensions in different namespace levels
    - [x] [x] Valid overload in closest namespace (with invalid in outer namespace) (TestGetEnumeratorPatternViaValidExtensionInClosestNamespaceInvalidInFurtherNamespace1-2, TestGetAsyncEnumeratorPatternViaValidExtensionInClosestNamespaceInvalidInFurtherNamespace1-2)
    - [x] [x] Invalid overload in closest namespace (with valid in outer namespace) (TestGetEnumeratorPatternViaInvalidExtensionInClosestNamespaceValidInFurtherNamespace1-2, TestGetAsyncEnumeratorPatternViaInvalidExtensionInClosestNamespaceValidInFurtherNamespace1-2)
- [x] [x] `ref` returns (TestGetEnumeratorPatternViaExtensionWithRefReturn, TestGetAsyncEnumeratorPatternViaExtensionWithRefReturn)
- [x] [x] Nullable warnings
    - [x] [x] No warning for extension method accepting null (ForEach_ExtensionGetEnumerator6, ForEach_ExtensionGetAsyncEnumerator6)
    - [x] [x] Warning for extension method not accepting null (ForEach_ExtensionGetEnumerator1, ForEach_ExtensionGetAsyncEnumerator5)
    - [x] [x] Constraint mismatch warnings (ForEach_ExtensionGetEnumerator3, ForEach_ExtensionGetAsyncEnumerator3)
    - [x] [x] Warning for nullable return (ForEach_ExtensionGetEnumerator15, ForEach_ExtensionGetAsyncEnumerator15)
    - [x] [x] Output attributes are honored after call (ForEach_ExtensionGetEnumerator7-8, ForEach_ExtensionGetAsyncEnumerator7)
- [x] [x] `Obsolete` extension methods (TestGetEnumeratorPatternViaObsoleteExtension, TestWithObsoletePatternMethodsViaExtension)
- Disposal
    - [x] [x] `GetEnumerator()` returning `IDisposable` types (TestForEachViaExtensionExplicitlyDisposableStruct, TestAwaitForEachViaExtensionExplicitlyDisposableStruct)
    - [x] [x] Uses pattern-based `Dispose` method on async, not on sync (TestForEachViaExtensionDisposeStruct, TestAwaitForEachViaExtensionAsyncDisposeStruct)
    - [x] [x] Uses pattern-based for both for ref structs (, TestAwaitForEachViaExtensionImplicitlyDisposableStruct)

#### Productivity:
- [ ] [ ] test FindAllReferences
- [x] [x] AddParameter to a `GetEnumerator`
- [ ] [ ] AddUsing to bring extension `GetEnumerator` into scope
- [ ] [ ] `foreach` to Linq
- [ ] [ ] Linq to `foreach`</Description>
  </Issue>
  <Issue>
    <IssueID>43177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Opening Code Style options page crashed VS</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>43177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.6.0 Preview 3.0 [30005.27.master]

**Steps to Reproduce**:

``

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>43174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature requests - Constraints heterogeneous collection</Title>
    <CreatedDate>08/04/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>43174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In short thought this allows to return a list of heterogeneous collection with some type constrains, for example only return a list of string and/or int.
``</Description>
  </Issue>
  <Issue>
    <IssueID>43028</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MetadataAsSource should not display certain compiler attributes</Title>
    <CreatedDate>02/04/2020</CreatedDate>
    <ClosedDate>03/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- TupleElementNames
- NativeInteger

Should the compiler drop those attributes from the symbols? (if so, we should also hide Dynamic, Nullable, etc)

Found in </Description>
  </Issue>
  <Issue>
    <IssueID>43020</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>43020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add file header automatically if configured in editorconfig when creating a new class file</Title>
    <CreatedDate>02/04/2020</CreatedDate>
    <ClosedDate>11/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>43020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>43020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>43020</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Automatically add a file header when adding a new class file if configured in editorconfig.</Description>
  </Issue>
  <Issue>
    <IssueID>43019</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>43019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Realize IOperation.ConstantValue on property access</Title>
    <CreatedDate>02/04/2020</CreatedDate>
    <ClosedDate>25/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>43019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>43019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we're eagerly realizing ConstantValue on IOperation node creation, which can result in `O(n^2)` space usage. We should make this lazy, so that only consumers who actually need to analyze constant values pay the space.

/cc @CyrusNajmabadi @sharwell @AlekseyTs </Description>
  </Issue>
  <Issue>
    <IssueID>43014</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Any way to get in-memory Assembly MetadataReference ?</Title>
    <CreatedDate>02/04/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>43014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 3.4.0

Hello,

I'd like to get a reference to an in-memory assembly for use in a CSharpCompilation, but the only API I can find that might allow this is marked as obsolete (  )

Is there another way to accomplish this? The assembly in question does not exist on disk as it's loaded from an encrypted resource for obfuscation purposes.

Thanks,
John

</Description>
  </Issue>
  <Issue>
    <IssueID>43013</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Format the name for an array type with parentheses in VB</Title>
    <CreatedDate>02/04/2020</CreatedDate>
    <ClosedDate>06/04/2020</ClosedDate>
    <IssueLabels />
    <Description>Wanted to ask for feedback on #42789.</Description>
  </Issue>
  <Issue>
    <IssueID>42998</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>42998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find All References/Goto Implementation for a C# declaration doesn't find information in VB code </Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>42998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.6.0 Preview 3.0 [29930.152.master]

**Steps to Reproduce**:

1. Find all references or Goto Implementation on 
`` in SemanticModel.

**Expected Behavior**:

Should find an override in VB compiler

**Actual Behavior**:

Only an override in C# compiler is found.

![image](

![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>42997</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>42997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Regression: Linq.Expressions infers correct type but doesn't provide completions</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>09/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>42997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace ModelExpressionTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var obj = new ModelExpression();
            var list = new List&lt;Product&gt;();

            // Hovering over 'arg' shows that it is of type 'Product' but it doesn't show 'MyProperty' in the completion list.
            obj.Create(list, arg =&gt; arg.);
            //                         ^ - invoke completions here

            // This works as expected
            obj.Create&lt;Product&gt;(list, arg =&gt; arg.);
        }
    }

    class ModelExpression
    {
        public object Create&lt;T&gt;(List&lt;T&gt; list, Expression&lt;Action&lt;T&gt;&gt; expression)
        {
            return null;
        }
    }

    class Product
    {
        public int MyProperty { get; set; }
    }
}

`</Code>
    <Description>This used to work before and it is now breaking some primary Razor tag helper completion scenarios.

**Version Used**: 
SDK: 3.1.300-preview-015048
VSCode version: 1.43.2
C# extension version: 1.21.16

**Steps to Reproduce**:

1. Create a new console app
2. Open it in VS Code and replace `Program.cs` content with the following content,

``

3. Invoke completions at the position marked by the comments

**Expected Behavior**:
`MyProperty` is part of the completion list
![image](

**Actual Behavior**:
No `MyProperty` in completion list
![image](

Note: 
Hovering over `arg` shows that it is inferred to be the correct type (`Product`) but somehow completions don't reflect that,
![image](

Also note, this is not VS Code specific. I noticed the same behavior in VS as well.</Description>
  </Issue>
  <Issue>
    <IssueID>42994</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Accessing an unitialized array throws a NullReferenceException but at the wrong line</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>42994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Consider the following code to reproduce:``Obviously, `SomeArray` is never initialized and trying to access it (at line #15) would throw a NullReferenceException. However, the debugger shows the exception at the next line (line #16) and the stack trace is as follows:`&gt;	ConsoleApp1.exe! ConsoleApp1.Program.Main(string[] args) Line 16	C#`I was able to reproduce this on both VS2017 and VS2019.---### Original Comments#### Visual Studio Feedback System on 3/31/2020, 00:55 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>42986</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generating syntax for `nint` and `nuint` should use those keywords</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm listing a number of scenarios that are broken in similar ways. Hopefully they can be fixed with a single stone. If not, feel free to split this issue as necessary.

- ExplicitType `var x = (nint)0;` produces `IntPtr` instead of `nint`.
- Same for IntroduceLocal, GenerateImplementation (implementing an interface), GenerateOverride (typing `override` and using completion).
- Same ExtractMethod, ExtractLocalFunction, AddParameter. Those also generate `IntPtr` parameters.
- Haven't tested MetadataAsSource, but it is likely the same.

Relates to </Description>
  </Issue>
  <Issue>
    <IssueID>42985</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>42985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler generates empty cctor for static fields initialized to `null!`</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>28/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.6.0-2.20173.3+2242fa4fb945b97680bdd49eb5dd58285e4abb1c

**Steps to Reproduce**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>42984</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>42984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NonExpandedItemShouldAlwaysBePreferred_FullDisplayTextMatch failing in spanish runs</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>42984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>42984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.Threading.Tasks.TaskCanceledException : Se canceló una tarea.


Stack trace
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.TestState.VB$StateMachine_64_WaitForUIRenderedAsync.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/TestState.vb:línea 554
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests.VB$StateMachine_240_NonExpandedItemShouldAlwaysBePreferred_FullDisplayTextMatch.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests.vb:línea 6413
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
`</Code>
    <Description>### Console

``

### Builds
|Build|Pull Request | Test Failure Count|
| --- | --- | --- |
|[#581833](
|[#582562](
|[#582841](
### Configurations
- Windows Desktop Spanish

</Description>
  </Issue>
  <Issue>
    <IssueID>42981</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn doesn't verify variables' nullable states on exits through finally blocks</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Branch master (10 Mar 2020)
Latest commit 441c154 by msftbot[bot]:
Merge pull request #42303 from CyrusNajmabadi/useCompoundParens

Support parenthesized expressions in use-compound-operator.


**Steps to Reproduce**:

Compile and run the following code
cs
#nullable enable
using System.Diagnostics.CodeAnalysis;
class C
{
    public static void Main()
    {
        if (!M(true, out var x))
        {
            x.ToString();
        }
    }
    
    public static bool M(bool b, [MaybeNullWhen(true)] out string s)
    {
        s = "";
        try
        {
            if (b)
              return false;
        }
        finally
        {
            s = null;
        }

        return true;
    }
}
`</Code>
    <Description>**Version Used**: 
``

[sharplab.io](

**Expected Behavior**:
Warning for either `return false;` or `s = null;` in the finally block containing `return false;` statement

**Actual Behavior**:
No warnings. The program crashes at runtime with a `NullReferenceException`</Description>
  </Issue>
  <Issue>
    <IssueID>42979</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Impossible pattern doesn't produce compile time error</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels />
    <Code>cs
using System;
public class C
{
    public static void Main()
    {
        IFoo&lt;uint&gt; result = new Foo&lt;uint&gt;();
        switch (result)
        {
            case Foo&lt;string&gt; _:
                Console.WriteLine("Should be a compile time error");
                break;
        }
    }
}

interface IFoo&lt;T&gt; { }
class Foo&lt;T&gt; : IFoo&lt;T&gt; { }
`</Code>
    <Description>**Version Used**: 
16.5.0
**Steps to Reproduce**:

``

**Expected Behavior**:
`error CS8121: An expression of type 'IFoo&lt;uint&gt;' cannot be handled by a pattern of type 'Foo&lt;string&gt;'`
**Actual Behavior**:
Compilation succeed</Description>
  </Issue>
  <Issue>
    <IssueID>42978</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Get offered to simplify GetHashCode to a type that is not accessible</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42978</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0070	'GetHashCode' implementation can be simplified	Microsoft.VisualStudio.ProjectSystem.VS.Implementation	C:\CPS\src\Microsoft.VisualStudio.ProjectSystem.VS.Implementation\Package\DebugTargetsSubscriptionService.cs	510	Active


After using the suggestion, get:

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0122	'HashCode' is inaccessible due to its protection level	Microsoft.VisualStudio.ProjectSystem.VS.Implementation	C:\CPS\src\Microsoft.VisualStudio.ProjectSystem.VS.Implementation\Package\DebugTargetsSubscriptionService.cs	512	Active
`</Code>
    <Description>**Steps to Reproduce**:

![image](

**Expected Behavior**:
No suggestion

**Actual Behavior**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>42974</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler Error CS0246 Not Produced in Certain Contexts</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 3.5.0-beta1-19606-04 (d2bd58c6)

**Steps to Reproduce**:

1. Create a new MVC project. `dotnet new mvc`
2. Open `Program.cs` and add the following to the `Program` class.

``

Repro Repo: 

**Expected Behavior**:
In both methods, the line with `RenderTree` should have the `CS0246` [(namespace could not be found) error]( 

**Actual Behavior**:
The first `RenderTree` has that error, the second does not.

Video Demo: 
</Description>
  </Issue>
  <Issue>
    <IssueID>42973</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Should VSIX-provided source generators be a thing?</Title>
    <CreatedDate>01/04/2020</CreatedDate>
    <ClosedDate>07/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>42973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Background:** We support analyzers being installed via VSIXes, which is handy for people who want certain rules to apply to all their projects. It's also handy for debugging analyzers because you can experiment with code and try various scenarios, and since they're running in devenv.exe you can set breakpoints.

Given a source generator is discovered via the same mechanisms as analyzers, should we support those as well? My first thought is "that's crazy" since they wouldn't impact the actual build, _but_ the debugging/local F5 scenario might still be useful once we have support for showing source generated output live in the editor.</Description>
  </Issue>
  <Issue>
    <IssueID>42504</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Object reference exception in "ExtractMethodCodeRefactoringProvider"</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FindConditionalAccessNodeForBinding(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Binder.GetReceiverForConditionalBinding(ExpressionSyntax binding,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMemberBindingExpression(MemberBindingExpressionSyntax node,Boolean invoked,Boolean indexed,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindReturn(ReturnStatementSyntax syntax,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindEmbeddedBlock(BlockSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalFunctionStatement(LocalFunctionStatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode&amp; bindableNode,BoundNode&amp; lowestBoundNode,BoundNode&amp; highestBoundNode,BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node,SymbolInfoOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node,SymbolInfoOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Simplification.SimplificationHelpers.GetOriginalSymbolInfo(SemanticModel semanticModel,SyntaxNode expression)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitIdentifierName(IdentifierNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_1.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ExtractLocalFunction(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
**Version Used**: Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.5.0 Preview 3.0 [29723.142.master]

``

---
### Original Comments

#### Visual Studio Feedback System on 1/28/2020, 04:09 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 3/5/2020, 07:40 PM: 

I have detected that for the last 35 days, this issue didn't have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.

---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>42503</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Microsoft.CodeAnalysis] 'GenerateMethodCodeFixProvider' encountered an error and has been disabled when typing nullable enum</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>19/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:16.4 preview 6]
Typing near a nullable enum declaration, getting this error.``---### Original Comments#### Visual Studio Feedback System on 12/9/2019, 11:48 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 1/16/2020, 05:44 PM: I have detected that for the last 35 days, this issue didn't have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.</Description>
  </Issue>
  <Issue>
    <IssueID>42500</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>42500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CopyTypeCustomModifiers() should copy NativeIntegerAttribute values</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>17/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Native Int</Name>
        <IssueID>42500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`CustomModifierUtils.CopyTypeCustomModifiers()` should copy `NativeIntegerAttribute` values.

See  </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>42500</IssueID>
        <PullRequestID>42419</PullRequestID>
        <Title>Address additional PROTOTYPE comments for native integers</Title>
        <CreatedDate>14/03/2020</CreatedDate>
        <ClosedDate>19/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>42500</IssueID>
            <PullRequestID>42419</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>42496</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler doesn't see that `array?.Length != 0` means array is non-null</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>42496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# Tools   3.6.0-2.20155.6+3a6e99414ed903c670a8e5c1d1da9c45660f8479

**Steps to Reproduce**:
``


**Expected Behavior**:
No warnings.

**Actual Behavior**:
`warning CS8602: Dereference of a possibly null reference.` on the `array.Length` access.

cc: @jcouv, @cston</Description>
  </Issue>
  <Issue>
    <IssueID>42493</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>42493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>can't update Microsoft.CodeAnalysis.CSharp to 3.5</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>42493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>42493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>42493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

[Microsoft.CodeAnalysis.CSharp 3.4.0](

**Steps to Reproduce**:

1.  open nuget package ui
2.  try to update Microsoft.CodeAnalysis.CSharp from 3.4.0 to [3.5.0](

**Expected Behavior**:

update works

**Actual Behavior**:

nuget fails to update because the stable version depends on a pre-release version of Microsoft.CodeAnalysis.Analyzers:

Microsoft.CodeAnalysis.CSharp 3.5.0 depends on Microsoft.CodeAnalysis.Common 3.5.0:

![image](

which depends on Microsoft.CodeAnalysis.Analyzers at least in version 3.0.0-beta2.20059.3:

![image](


``

So release stable version 3.0 of **Microsoft.CodeAnalysis.Analyzers** to fix the nuget issue.</Description>
  </Issue>
  <Issue>
    <IssueID>42492</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect warning CS8762 generated when using `NotNullWhen(true)`.</Title>
    <CreatedDate>17/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
public class C {
    public bool TryFoo(bool fail, [NotNullWhen(true)] out String? value) =&gt;
        Foo(fail, out value) == Result.Success;
    
    public Result Foo(bool fail, out String? value)
    {
        Result result = Result.Fail;
        value = null;
        
        if (!fail)
        {
            value = "not null";
            result= Result.Success;
        }
        
        return result;
    }
}

public enum Result
{
    Fail,
    Success
}
`</Code>
    <Description>**Version Used**:  Package `Microsoft.Net.Compilers.Toolset` Version - `3.6.0-2.20166.2`.

**Steps to Reproduce**:
``

**Expected Behavior**:

No warnings produced as `[NotNullWhen(true)] out String? value` is saying, value will not be null when I return true.

**Actual Behavior**: I'm getting a warning:
&gt; Program.cs(6,9): warning CS8762: Parameter 'value' may not have a null value when exiting with 'true'.

This is weird, as the warning is saying, `value` may **not** have have a null value when exiting with `true` and the attribute annotation is exactly saying that, "This will not be null when returning true".

cc: @cston @agocke @jcouv 
FYI: @dotnet/nullablefc @eiriktsarpalis 
</Description>
  </Issue>
  <Issue>
    <IssueID>42484</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>42484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Explicit invocation of Signature Help should cancel any existing Completion List session</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>15/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In  we introduce the completion list in argument lists in C#. This can cause conflict between Signature Help &amp; Completion, so it was requested that any explicit invocation of Signature Help cancel existing Completion sessions, so that SigHelp gets focus and the arrow keys move through overloads as expected.</Description>
  </Issue>
  <Issue>
    <IssueID>42478</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Class View shows classes as derived but they are not</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>22/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>42478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>42478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>42478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---In the following simple source (the whole project attached):``Class View shows that `AttributeDef` has derived types `AttributeDef_ConditionedBase` (correct) but also `AttributeDef_Bool`, `AttributeDef_Int` (incorrect). I think it is a bug. Only `AttributeDef_ConditionedBase` should be displayed as derived for `AttributeDef`.For exactly the same situation with `Base`, `Derived` classes below in the code VS works fine. Class View correctly shows that `Base` has derived only `Derived` and `Derived` has derived `Derived2`.Please see attached project and screenshot.---### Original Comments#### Visual Studio Feedback System on 3/13/2020, 02:06 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>42470</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Analyze nullability variance of type and attribute together</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>19/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

interface IFoo&lt;T&gt;
{
    bool TryRead([MaybeNullWhen(false)] out T item);
}

 
class Foo : IFoo&lt;int[]&gt;
{
    public bool TryRead([NotNullWhen(true)] out int[]? item) // warning CS8614: Nullability of reference types in type of parameter 'item' of 'bool Foo.TryRead(out int[]? item)' doesn't match implicitly implemented member 'bool IFoo&lt;int[]&gt;.TryRead(out int[] item)'.
    {
        item = default;
        return false;
    }
}
`</Code>
    <Description>Currently, we analyze the nullability variance of types first, then analyze the variance of types+attributes. This results in a spurious warning in cases like the following (reported by @stephentoub )

Relates to  (report bad loosening/tightening in OHI)

``</Description>
  </Issue>
  <Issue>
    <IssueID>42464</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Array index exception occurring at the wrong place with await</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>17/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42464</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It seems that an `IndexOutOfRangeException` can occur in the wrong place when `await` is used on the RHS of an assignment. Normally, the LHS should be evaluated before the RHS. When the RHS contains an `await`, this await is evaluated before the LHS.

        public static void AwaitArraySideEffects()
        {
            async Task M()
            {
                var a = new AwaitArraySideEffectsStruct[10];

                try
                {
                    Console.WriteLine("Testing without await...");
                    a[30].X = F(); //Exception before F()
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }

                Console.WriteLine();

                try
                {
                    Console.WriteLine("Testing with await...");
                    a[30].X = await FASync(); //Exception after F()
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }

            int F()
            {
                Console.WriteLine("F");
                return 7;
            }

            async Task&lt;int&gt; FASync()
            {
                Console.WriteLine("FASync");
                return 7;
            }

            M();
        }

Console output:

&gt; Testing without await...
&gt; System.IndexOutOfRangeException: Index was outside the bounds of the array.
&gt;    at x.&lt;&lt;AwaitArraySideEffects&gt;g__M|46_0&gt;d.MoveNext() in x.cs:line 0
&gt; 
&gt; Testing with await...
&gt; FASync
&gt; System.IndexOutOfRangeException: Index was outside the bounds of the array.
&gt;    at x.&lt;&lt;AwaitArraySideEffects&gt;g__M|46_0&gt;d.MoveNext() in x:line 1986

It is my understanding that the two cases should print the same output. In the non-await case, `F` is never called.

An unrelated issue might be that the line number in the first exception is incorrect.

**Version Used**: Visual Studio 2019 16.4.5, .NET 4.8, Release Mode.
</Description>
  </Issue>
  <Issue>
    <IssueID>42461</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Use pattern matching" no longer has a Fix All</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels />
    <Description>Version: 
Version 16.6.0 Preview 2.0 [29915.8.master]



![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>42460</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>42460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Result of &lt;&lt; operator for native integers constants should be platform-dependent in unchecked context</Title>
    <CreatedDate>16/03/2020</CreatedDate>
    <ClosedDate>21/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Native Int</Name>
        <IssueID>42460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following should print `1fffffffe` on 64-bit platform rather than `fffffffe`:
``

See </Description>
  </Issue>
  <Issue>
    <IssueID>42456</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect IDE0004 "Cast is redundant" when casting to a nullable reference type</Title>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>42456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>42456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var x = (string?)"a";


**Expected Behavior**:

IDE0004 is not shown for `(string?)` cast as it affects subsequent flow.
For example, in this case
csharp
var x = (string?)"a";
x = null;
`</Code>
    <Description>**Version Used**: 3.3.1

**Steps to Reproduce**:

``
removing the cast will produce `CS8600` on the second line (which might even be an error if warn-as-error is enabled).

**Actual Behavior**:

IDE0004 "Cast is redundant" is shown for `(string?)` cast.</Description>
  </Issue>
  <Issue>
    <IssueID>42453</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Include overridden methods in GetMembers() from INamedTypeSymbol for native integers</Title>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>05/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`INamedTypeSymbol.GetMembers()` returns an empty array for native integer symbols. Should the members array include the overridden methods for `GetHashCode()`, `Equals(object)` and `ToString()`?</Description>
  </Issue>
  <Issue>
    <IssueID>42448</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>42448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove Solution.WithProjectOptionsChanged</Title>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>10/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Tracking TODO in source:

``</Description>
  </Issue>
  <Issue>
    <IssueID>42445</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis v3.4.0 package appears to be empty is this correct?</Title>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
3.4.0 : 

**Steps to Reproduce**:

1. Updated existing version to this version through reference
2. Nuget pulls package
3.  look in package  folder

**Expected Behavior**:
Dll file for use in project 

**Actual Behavior**:
No dll file in package.

When app runs, runtime error of ...

&gt; Could not load file or assembly 'Microsoft.CodeAnalysis, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.

... is provided by framework.

I am also referencing packages ... 

- Microsoft.CodeAnalysis.CSharp.Scripting 
- Microsoft.CSharp

... which in turn appear to be referencing their own stack of dependencies, those packages appear to have libs in them.

Appears to be the cause of issue dotnet/core#4390

![image](

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>42439</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>42439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>How to add project nodes automatically? (a question that has been bothering me for a long time) is there any example?</Title>
    <CreatedDate>15/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>42439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>42439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using roslyn for dynamic compilation, but I need to add.

``  

These nodes are in the project file .csproj. 
Is there any way to generate it automatically? Or add it automatically after downloading from nuget.</Description>
  </Issue>
  <Issue>
    <IssueID>42469</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>42469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Default interface implementations, covariance and lambdas won't play together</Title>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public interface IThing&lt;out T&gt;
{
    T Get();

    string GetString() =&gt; new Func&lt;T, string&gt;(o =&gt; o.ToString())(Get());
}

public class Thing&lt;T&gt; : IThing&lt;T&gt;
{
    private readonly T _val;

    public Thing(T val) =&gt; _val = val;

    T IThing&lt;T&gt;.Get() =&gt; _val;
}

internal class Program
{
    private static void Main(string[] args)
    {
        IThing&lt;string&gt; t = new Thing&lt;string&gt;("hi");

        Console.WriteLine(t.GetString());
    }
}


This compiles fine but throws a type loader exception at runtime:

&gt; System.TypeLoadException: 'Could not load type '&lt;&gt;c' from assembly 'BugRepro, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because it declares a covariant or contravariant type parameter and is not an interface or delegate.'

I've written `GetString` in a convoluted way just to force use of a lambda. If it is replaced with the equivalent:

cs
 string GetString() =&gt; Get().ToString();
`</Code>
    <Description>In .NET Core 3.1, a minimal repro. In a console app put this:

``

then the problem does not occur. The presence of the lambda causes the compiler to generate a hidden class that implicitly depends on the interface's covariant type parameter `out T`, and as the exception says, classes aren't allowed to depend on covariant type params.</Description>
  </Issue>
  <Issue>
    <IssueID>42424</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>42424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Can't run tests in CSharpAnalyzers.UnitTests</Title>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>05/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>42424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>42424</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Log level is set to Informational (Default).
Test data store opened in 7.844 sec.
---------- Starting test discovery for requested test run ----------
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1-pre.build.4059 (32-bit Desktop .NET 4.0.30319.42000)
[xUnit.net 00:00:00.18]   Discovering: Microsoft.Build.Tasks.CodeAnalysis.UnitTests
[xUnit.net 00:00:00.28]   Discovered:  Microsoft.Build.Tasks.CodeAnalysis.UnitTests
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1-pre.build.4059 (32-bit Universal Windows)
========== Test discovery finished: 90 Tests found in 1.7 sec ==========
Executing all tests in file: C:\roslyn\src\Analyzers\CSharp\Tests\ConvertSwitchStatementToExpression\ConvertSwitchStatementToExpressionTests.cs
System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQueryByContext.&lt;GetTestContainerConfigurationsInternalAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestContainerConfigurationQuery.&lt;GetTestContainerConfigurationsAsync&gt;d__16.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.TestRunConfiguration.&lt;UpdateAsync&gt;d__9.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.RunOperation.&lt;RunTestsAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Controller.Operation.&lt;&lt;Execute&gt;b__41_0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.&lt;CallWithCatchAsync&gt;d__10`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>**Version Used**: recent master at 47340da1546b1ecb66eea3d490254b0a8f0c41d7

**Steps to Reproduce**:

Try to run tests, for instance ConvertSwitchStatementToExpressionTests

**Expected Behavior**: tests are executed.

**Actual Behavior**:

Here's my test output:

``</Description>
  </Issue>
  <Issue>
    <IssueID>42422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.NET\C# Async constructor request\proposal</Title>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>42422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi, 

Nowadays most of API have async implementation and day by day became hard to use it in constructor

What do you think about async consturctors?

I think it will be very useful feature in .NET 5\C# 9 feature for every type of applciation

For example:
``

</Description>
  </Issue>
  <Issue>
    <IssueID>42406</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>42406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Solution.WithProjectReferences fails assertion in ProjectDependencyGraph</Title>
    <CreatedDate>14/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>42406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When a project is added that does not belong to the solution.

This is however a supported scenario.

See `SolutionTests.WithProjectReferences_ProjectNotInSolution`</Description>
  </Issue>
  <Issue>
    <IssueID>42396</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>42396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>nullable on nested inner functions gives weird CS8619 warning</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
foreach (T x in xs) yield return x;


cs
using System;
using System.Collections.Generic;

namespace NullableTest {
    public class NestedList&lt;T&gt; {
        public NestedList(Func&lt;IEnumerable&lt;T&gt;&gt; generator) { }
    }

internal class ObjBuilder&lt;T&gt; where T : class {
        public static void Build() {
            new NestedList&lt;List&lt;T&gt;&gt;(() =&gt; {
                IEnumerable&lt;T&gt; Enumerate(IEnumerable&lt;T&gt; xs) {
                    foreach (T x in xs) yield return x;
                }

return new List&lt;T&gt;[0];
            });
        }
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:16.x public preview]
The following program gives the warning &gt; CS8619    Nullability of reference types in value of type 'T' doesn't match target type 'List&lt;T&gt;'.on the `x` of line 13:``All of the types are non-nullable. And comparing `T` and `List&lt;T&gt;` on nullability doesn't make sense anyway. (This is simplified from a larger codebase which can be provided upon request.)---### Original Comments#### Daniel Perelman [MSFT] on 3/2/2020, 03:25 PM: (private comment, text removed)#### Visual Studio Feedback System on 3/2/2020, 04:20 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Daniel Perelman [MSFT] on 3/6/2020, 11:21 AM: (private comment, text removed)---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>42387</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NullReferenceException binding invalid using local declaration</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
class Program
{
    static System.IDisposable F() =&gt; null;

    static void Main()
    {
        using const System.IDisposable o = F();
    }
}


System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.BoundNodeExtensions.HasErrors[T](ImmutableArray`1 nodeArray) in /_/src/Compilers/CSharp/Portable/BoundTree/BoundNodeExtensions.cs:line 25
   at Microsoft.CodeAnalysis.CSharp.BoundBlock..ctor(SyntaxNode syntax, ImmutableArray`1 locals, ImmutableArray`1 localFunctions, ImmutableArray`1 statements, Boolean hasErrors) in /_/src/Compilers/CSharp/Portable/Generated/BoundNodes.xml.Generated.cs:line 2556
   at Microsoft.CodeAnalysis.CSharp.BoundBlock..ctor(SyntaxNode syntax, ImmutableArray`1 locals, ImmutableArray`1 statements, Boolean hasErrors) in /_/src/Compilers/CSharp/Portable/BoundTree/Constructors.cs:line 602
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.SynthesizedNoLocals(SyntaxNode syntax, BoundStatement[] statements) in /_/src/Compilers/CSharp/Portable/BoundTree/Constructors.cs:line 619
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.RewriteDeclarationUsingStatement(SyntaxNode usingSyntax, BoundLocalDeclaration localDeclaration, BoundBlock tryBlock, Conversion iDisposableConversion, SyntaxToken awaitKeywordOpt, BoundAwaitableInfo awaitOpt, MethodSymbol methodSymbol) in /_/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_UsingStatement.cs:line 257
   at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeDeclarationUsingStatement(SyntaxNode syntax, BoundBlock body, ImmutableArray`1 locals, ImmutableArray`1 declarations, Conversion iDisposableConversion, MethodSymbol disposeMethodOpt, BoundAwaitableInfo awaitOpt, SyntaxToken awaitKeyword) in /_/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_UsingStatement.cs:line 70
...
`</Code>
    <Description>Compile the following:
``</Description>
  </Issue>
  <Issue>
    <IssueID>42386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Enforce `[NotNull]` in method body only upon exit</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, a parameter marked with `[NotNull]` cannot be assigned a maybe-null value (that's a W-warning), ie. we warn on assignment.
On the other hand, we only check parameters marked with `[NotNullWhen(...)]` when the method exits.

We could use the same method for `[NotNull]` (ie. only check upon exit).

Relates to 

@jaredpar Let me know if you still think we should do this.</Description>
  </Issue>
  <Issue>
    <IssueID>42382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Place using statements at lowest scope</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>42382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Under Tools &gt; Text Editor &gt; C#, there are options to place the System namespaces first.  But we should have an option to move the using statements to the lowest scope (which basically means popping them inside the namespace).This was available in the 2017 Power Tools.... it should be in the full IDE.---### Original Comments#### Visual Studio Feedback System on 3/11/2020, 03:33 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>42381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>vb indent</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>42381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>42381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I would like to be able to override the default indentation for statements with multiple arguments. I prefer the style where the second and subsequent lines default to indenting one tab stop, rather than lining up with the first argument in a method call.---### Original Comments#### Visual Studio Feedback System on 3/12/2020, 05:19 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>42375</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Suppress or Configure Issues' code action appears with non-configurable IDE0005 diagnostic</Title>
    <CreatedDate>13/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Using the latest Int Preview version (29911.183.master), the Suppress and Configure code action appears with IDE0005 (remove unnecessary usings) despite the diagnostic being tagged as non-configurable.

``

The new severity/diagnostic does appear in the error list, but no squiggle appears.</Description>
  </Issue>
  <Issue>
    <IssueID>42368</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE work items for c# 9.0 patterns.</Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>03/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Language/Compiler work: ~~ 

These are the things we will need to support and/or validate:
- [x]  [**Cyrus**] Update features that do null checks do `is not null`. 
- [x] [**Cyrus**] Update existing pattern analyzers to try to use `and`, `or`, `not` patterns when appropriate. 
- [X]  we need SymbolInfo/TypeInfo.  This will ensure that quick-info goto/def/find-refs works. (See 
- [x] [**Sam**]Update fixer that adds discards to not patterns anymore (if the lang version is correct). #43528, #43540
- [x] [**Sam**]Automatic Brace Completion needs to work for pattern parens. #43522
- [x] [**Compilers**, **Tomas**] Properly classify debugger breakpoint spans for subexpressions. (good to go since  and 
- [X] [**Compilers**] Switch expression stepping not working correctly:  (
- [x] [**Compilers**] Check Interactive window (
- [x] [**Tomas**] Test Active Statement tracking in switch expression arms (part of EnC, editing itself is still unsupported: 
- [X] [**Compilers**] Check with @gafter for the set of new diagnostics reported. (See 
- [X] [**Compilers**] Make sure we don't crash on unreachable case diagnostics. (Added code to prevent the compiler crashing when this diagnostic is given.  Joke.  See 
- [X] [**Compiler**] Ensure IOp works. (See  
- [x] [**Allison**] Completion.  We need it for `not`, `and`, `or`.  Need to make sure we're at soft selecting in places where new comparison patterns are allowed so we don't interfere with typing. #43365, #43574 
- [X] [**Debugger**] Disambiguate sequence points with equal text span:  
- [x] [**Cyrus**] Add feature to convert from `!(x is null)` to `x is not null`. 
- [x] [**Cyrus**] Update parentheses simplification and addition. 
- [x] [**Cyrus**] Complexify/simplify. 
- [x] [**Cyrus**] update invert-if to invert patterns. 
- [x] [**Sam**] Formatting has to be updated to understand these constructs entirely.  We have lots of options around whitespace around operators that will/won't apply when these are in patterns.  e.g. `(&gt;=` #43538
- [x] [**David**] Indentation. 
- [ ] Add feature to offer to use `not null`.  
- [ ] Need to ensure that features that select subexpressions don't work on subpatterns (i.e. can't extract a portion of a pattern).
- [ ] [**Sam**][LowPriority]`case string _ =&gt;`.  Add analzyer that removes unnecessary _ . 
- [ ] [**Sam**][Need Validation] Features based on unbound types.  i.e. `Add Using`, `Generate type`.
- [ ] Add missing cases.
- [ ] [**Cyrus**] Validate TypeInferrer 
- [ ] [**Sam**] split/merge ifs (likely do not support anything here)
- [ ] we would take a refactoring to convert to/from if-chains to and/or patterns
- [ ] would take a refactoring to convert long chains of comparisons to patterns.
</Description>
  </Issue>
  <Issue>
    <IssueID>42365</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>42365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn OOP repeatedly crashing</Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>42365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I don't have a specific repro, but it often seems to be Find References doing this:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42361</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>42361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler StackOverflow </Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42361</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A StackOverflow was reported at 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>42353</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Enforce file header" is not enforced on files that are not open</Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 


**Steps to Reproduce**:
Turn on:

![image](

1. `git clone 
2. `cd project-system`
3. `git checkout e640313c10e98894c58b69b1fa38412672405d1e`
4. `ProjectSystem.sln`
5. Open c:\project-system\.editorconfig and change 'file_header_template' to "FooBar" and save

**Expected Behavior**:
Thousands of errors about copyright header to appear in Error List

**Actual Behavior**:
No errors, if you build or open a file you start seeing errors.
</Description>
  </Issue>
  <Issue>
    <IssueID>42351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suppressed warnings/errors from "Run Code Analysis" never disappear from Error List</Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Similar to 

**Version Used**: 
Version 16.6.0 Preview 2.0 [29911.137.master]

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 237cce27c979609b92de208e9befaf42814fcf35`
4. `ProjectSystem.sln`
5. Right-click on ProjectSystem.sln and choose Analyzer and Cleanup -&gt; Run Code Analysis
6. In Error List, select all errors and choose Suppress -&gt; GlobalSuppression.cs, follow prompts

**Expected Behavior**:
All warnings/errors to disappear

**Actual Behavior**:
None of the warnings/errors disappear. You need unload and reload solution for them to disappear.</Description>
  </Issue>
  <Issue>
    <IssueID>42350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Run Code Analysis" duplicates violations</Title>
    <CreatedDate>12/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.6.0 Preview 2.0 [29911.137.master]

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 237cce27c979609b92de208e9befaf42814fcf35`
4. `ProjectSystem.sln`
5. Right-click on ProjectSystem.sln and choose Analyzer and Cleanup -&gt; Run Code Analysis

**Expected Behavior**:
Error not be duplicated

**Actual Behavior**:
Every violation is duplicated

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Annotation warnings (CS8632, CS8669) should not be reported with -nowarn:nullable</Title>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
class A
{
    static object? F1() =&gt; null;
}

C#
// &lt;auto-generated/&gt;
class B
{
    static object? F2() =&gt; null;
}


`csc /t:library /nowarn:nullable a.cs b.cs`

a.cs(3,18): warning CS8632: The annotation for nullable reference types
    should only be used in code within a '#nullable' annotations context.
b.cs(4,18): warning CS8669: The annotation for nullable reference types
    should only be used in code within a '#nullable' annotations context. Auto-generated code
    requires an explicit '#nullable' directive in source.
`</Code>
    <Description>Warnings for the following should be suppressed with `-nowarn:nullable`:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42340</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>42340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>master fails bootstrap build</Title>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>42340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>none
R:\roslyn\artifacts\Bootstrap\tasks\net472\Microsoft.CSharp.Core.targets(59,5): error MSB6006: "csc.exe" exited with code 1. [R:\roslyn\src\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj]


@jcouv diagnosed this to an assertion failure

none
   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetImplementsLocation(NamedTypeSymbol implementedInterface)
       at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetImplicitImplementationDiagnosticLocation(Symbol interfaceMember, TypeSymbol implementingType, Symbol member)
       at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.&lt;&gt;c.&lt;CheckNullableReferenceTypeMismatchOnImplementingMember&gt;b__95_2(DiagnosticBag diagnostics, MethodSymbol implementedMethod, MethodSymbol implementingMethod, ParameterSymbol implementingParameter, Boolean blameAttributes, ValueTuple`2 arg)
       at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckValidNullableMethodOverride[TArg](CSharpCompilation compilation, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, DiagnosticBag diagnostics, ReportMismatchinReturnType`1 reportMismatchInReturnType, ReportMismatchInParameterType`1 reportMismatchInParameterType, TArg extraArgument)
`</Code>
    <Description>A bootstrap build of the master branch by

&gt; `.\Build.cmd -bootstrap -bootstrapConfiguration:Debug`

fails

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42338</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>42338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InvokeSignatureHelp command handler blocking LSP's command handler for TypeScript</Title>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42338</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.600.20.15506
**Steps to Reproduce**:
When implementing TypeScript support for signature help via LSP, it seems like the Roslyn command handler for the InvokeSignatureHelp command is getting in the way of LSP's handler.

**Expected Behavior**:
With no ISignatureHelpProvider exported for TypeScript, LSP's command handler for InvokeSignatureHelp should be invoked.
**Actual Behavior**:
Roslyn's command handler is invoked, no-ops because no provider is found, and LSP's handler is not invoked.

cc @dibarbet 
</Description>
  </Issue>
  <Issue>
    <IssueID>42335</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>What is the correct way to use CSharp ExtractMethod refactoring through command line?</Title>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>11/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>42335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>42335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1. Attempted to call _ExtractMethodAsync_ present in [file]( through the command line on the following code:

``
Issues with the above refactored program:
1. Return statement in Test method having void return type.
2. Return type of resulting NewMethod is Void(notice the capital V).
</Description>
  </Issue>
  <Issue>
    <IssueID>42331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>42331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Target-typed switch crashes debug compiler.</Title>
    <CreatedDate>11/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>42331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>42331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact]
        public void TargetTypedSwitch_Overload_03()
        {
            var source = @"
using System;

class Program
{
    static void Main(string[] args)
    {
        bool b = true;
        M(b switch { false =&gt; 1, true =&gt; 2 });
    }
    static void M(Int16 s) =&gt; Console.Write(nameof(Int16));
}
";
            var expectedOutput = "Int16";
            var compilation = CreateCompilation(source, options: TestOptions.DebugExe.WithNullableContextOptions(NullableContextOptions.Disable));
            compilation.VerifyDiagnostics(
                );
            var comp = CompileAndVerify(compilation, expectedOutput: expectedOutput);
        }
`</Code>
    <Description>The following test crashes the debug version of the C# compiler.  It appears to be a bug in overload resolution.
``
</Description>
  </Issue>
  <Issue>
    <IssueID>42325</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>42325</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion for unimported extension method  can't handle containing types with conflicts</Title>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>31/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42325</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42325</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>42325</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>42465</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>nschuessler</FixedById>
        <IssueID>42465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Project.AssemblyName does not accurately report assembly name.</Title>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Project</Name>
        <IssueID>42465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
private IReadOnlyList&lt;string&gt; GetTargetAssemblies()
{
    List&lt;string&gt; result = new List&lt;string&gt;();

    foreach (Microsoft.CodeAnalysis.Project project in this.workspace.CurrentSolution.Projects)
    {
        // .Net Core projects can have ".csproj" attached sometimes.
        result.Add(project.AssemblyName.Replace(".csproj", string.Empty));
    }

    return result.AsReadOnly();
}


It is important to keep apis reporting data in a consistent format. if it doesn't it requires  rolling out extension updates for no useful reason.

Here is the csproj that causes the assembly name to be wrong:

xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;AssemblyName&gt;Microsoft.Exchange.Diagnostics&lt;/AssemblyName&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
`</Code>
    <Description>_This issue has a corresponding [ticket on Developer Community]( Please vote and comment there to make sure your voice is heard._

---
The following code suddently started appending ".csproj" onto assembly names which seems wrong.

``

Note: I must have `&lt;AssemblyName&gt;` in this new format project because there is no other way (known? supported?) to find the target assembly programmatically between old and new format csproj files.
</Description>
  </Issue>
  <Issue>
    <IssueID>42318</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null oblivious variables treated as non-null.</Title>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>42318</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.NET Core 3.1, Visual Studio 16.4.5

**Steps to Reproduce**:
Calling nullable disabled code from nullable enabled code can cause missing warnings about NRTs. The code below demonstrates this. I can assign `null` to `Value` without warning, yet I don't get warnings when I'm using `Value` as if it isn't nullable. When I hover over `s`, Visual Studio wrongly tells me that `s` is not null here. I can pass a null value to `UseString` without getting warnings, which results in that method throwing the exception, because `s` should never be null there unless warnings were ignored.

Changing `string s` to `string? s` has no effect. If I move `x.Value = null;` above the assignment to `s`, the warnings show up.

``

**Expected Behavior**:
Warnings when using `Value` as a non-nullable string.

**Actual Behavior**:
No warnings.</Description>
  </Issue>
  <Issue>
    <IssueID>42314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Lambda Type Incorrectly Inferred When Written As Expression (But Works As A Statement)</Title>
    <CreatedDate>10/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>42314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Task rt = Task.Run(() =&gt; RestoreDatabase(name, owners, jobGuid));

If I mouse over the code, the call is interpreted as `Task.Run&lt;dynamic&gt;(Func&lt;dynamic&gt;)`

However, when written as a statement lambda, there is a different response:

Task restoreTask = Task.Run(() =&gt;
            {
                RestoreDatabase(name, owners, jobGuid);
            });

This code shows up as Task.Run(Action);

The signature of the called function is `private void RestoreDatabase(string name, List&lt;string&gt; owners, Guid id)`, so I'd expect it to be an Action.

The issue affects more than intellisense. If the call is written as a expression, the Task fails to execute, and generates an exception:

Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: Cannot implicitly convert type 'void' to 'object'
   at CallSite.Target(Closure , CallSite , ServerMethods , Object , Object , Guid)
   at System.Dynamic.UpdateDelegates.UpdateAndExecute4[T0,T1,T2,T3,TRet](CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
   at DbRestorer_ServerApp.ServerMethods.&lt;&gt;c__DisplayClass6_0.&lt;BeginRestoreDatabase&gt;b__0() in
C:\\GitProjects\\DatabaseRestorer\\DbRestorer-ServerApp\\ServerMethods.cs:line 151
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.&lt;&gt;c.&lt;.cctor&gt;b__274_0(Object obj)
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)
`</Code>
    <Description>The same logical lambda is generating different code depending on if it's written as a statement or an expression. 

Here is the code as an expression lambda.
``

However, when written as a statement, the code executes as expected. 

The code is targeting ASP.NET Core (3.1).</Description>
  </Issue>
  <Issue>
    <IssueID>42300</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>42300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>WhenClauseMightAssignWalker.VisitCall not conservative</Title>
    <CreatedDate>09/03/2020</CreatedDate>
    <ClosedDate>15/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>42300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It was pointed out in review of  that the implementation of `WhenClauseMightAssignWalker.VisitCall` might not be conservative, Specifically, if a variable is a value type and passed as the receiver to a call, it may be mutated by the call, but that possibility isn't handled by `VisitCall`.</Description>
  </Issue>
  <Issue>
    <IssueID>42286</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>42286</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>.NET core 3.1 SDK reverts to C# version 7.3</Title>
    <CreatedDate>09/03/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42286</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            using var x = new SomeDisposable();
            Console.WriteLine("Hello World!");
        }

        public class SomeDisposable: IDisposable
        {
            public void Dispose()
            {
            }
        }
    }
}


3. Ensure the target framework is set to netcoreapp3.1 in the csproj.

**Expected Behavior**:
Build succeeds.

**Actual Behavior**:
Build fails with `error CS8370: Feature 'using declarations' is not available in C# 7.3. Please use language version 8.0 or greater.`

Setting target framework to netcoreapp3.0 makes the build complete.

Looking at Microsoft.CSharp.Core.targets in the SDK, I find the following

  &lt;PropertyGroup Condition="('$(TargetFrameworkIdentifier)' != '.NETCoreApp' OR '$(_TargetFrameworkVersionWithoutV)' &amp;lt; '3.0') AND
                            ('$(TargetFrameworkIdentifier)' != '.NETStandard' OR '$(_TargetFrameworkVersionWithoutV)' &amp;lt; '2.1')"&gt;
    &lt;MaxSupportedLangVersion Condition="'$(MaxSupportedLangVersion)' == ''"&gt;7.3&lt;/MaxSupportedLangVersion&gt;
    &lt;LangVersion Condition="'$(LangVersion)' == ''"&gt;$(MaxSupportedLangVersion)&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;
`</Code>
    <Description>**Version Used**: 
3.1.102

**Steps to Reproduce**:

1.  Create new .NET core Console Application
2. Paste the following code into `Program.cs`:
``

So it seems that unless the SDK is set to 3.0, it sets the max version to 7.3. Not sure if this is by design, and I can work around it in Directory.Build.props, but to me this looks like a bug.</Description>
  </Issue>
  <Issue>
    <IssueID>42279</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>considered snapshot testing?</Title>
    <CreatedDate>09/03/2020</CreatedDate>
    <ClosedDate>15/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was wondering if snapshot testing had been considered as a way of simplifying the way test results are verified in the roslyn codebase?

I did a quick scan through and found several assertion patterns that could benefit 

 * VerifyTypeIL 
 * parser tests 
 * verifying pdbs 

So for each of these snapshot testing would resulting in, for each test, a "verified/approved" file containing a serialized representation of what is being asserted. This has the following benefits:

 * on the first run of the test a proposed approved file is generated, that can then be optionally accepted.
 * no assertion code required. looking through the above scenarios it seems complex assertion is usually either done with a dsl or large strings. this is no longer required with snapshot testing. the approved file for each test is the assertion. 
 * more resilient to change. in the current code base, a small change that effects the compile could result in the assertion code significant number of tests needing to be refactored. with snapshot testing all changed files can be approved with one command line action
 * visualisation of failures. when a test fails, a new proposed file is generated, which can then be diff'd against the current approved file.


With above in mind i created an example project that illustrates snapshot testing using the decompiler feature of ICSharpCode.Decompiler as the serialization mechanism  so you can see a test  and its corresponding verified files  (i am trimming the result to make doco easier).


This uses my snapshot project  But there are other options:

 * 
 * 
 * 

Is this something you would like to explore further? I am happy to get on a call to discuss.</Description>
  </Issue>
  <Issue>
    <IssueID>42259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn didn't report CS8333 for local function.</Title>
    <CreatedDate>08/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>42259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Ref Locals and Returns</Name>
        <IssueID>42259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    static void Main(){
        ref int a = ref M(2);
        ref int b = ref M(3);
        Console.WriteLine(a+b);
        
        ref int M(in int i) =&gt; ref i;
    }
    //ref int M(in int i) =&gt; ref i;


**Expected Behavior**:
Also report CS8333 as it does for normal functions.
`error CS8333: Cannot return variable 'in int' by writable reference because it is a readonly variable`

**Actual Behavior**:
Code compile without any error, but it return an ref of local var from inner stack.
And it may lead to unexpected behavior(for the above code, get 6 in netcoreapp3.1, and 5 for net472).

Update: 
CS8333 will also be reported if the local function is defined as block instead of expression.
cs
    static void Main(){
        ref int a = ref M(2);
        ref int b = ref M(3);
        Console.WriteLine(a+b);
        
        ref int M(in int i) {
            return ref i;
        }
    }
`</Code>
    <Description>**Version Used**: 
VS 16.5.0 Preview 5.0

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 16.5.0 Preview 5.0 - IDE0071 triggered on non-constant value</Title>
    <CreatedDate>07/03/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Linq;

public static class Sample
{
    public static void PrintRightAligned ( String[] strings )
    {
        var maxLength = strings.Max(str =&gt; str.Length);

        for ( var i = 0; i &lt; strings.Length; i++ )
        {
            var str = strings[i];
            Console.WriteLine ( $"{i}. {str.PadRight ( maxLength, ' ' )}" );
        }
    }
}
`</Code>
    <Description>**Version Used**: VS Community 16.5.0 Preview 5.0

**Steps to Reproduce**:
1. Create a new .NET Core 3.1 console project
2. Put the following code anywhere:
``

**Expected Behavior**:
IDE0071 is not triggered since `maxLength` is not a constant.

**Actual Behavior**:
IDE0071 is triggered:
![image](

And the code fix results in error-generating code:
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>42241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>42241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unimported Intellisense gives non-generic collections when typing '&lt;'</Title>
    <CreatedDate>07/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>42241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 2019
16.5.0 Preview 5.0

**Steps to Reproduce**:

1. Ensure the "Show items from unimported namespaces" IntelliSense setting is enabled.
2. Ensure `System.Collections` and `System.Collections.Generic` are not in your list of usings.
3. Start typing `IEnumerable` as a type name.
4. Type `&lt;`.

**Expected Behavior**:

A using directive for `System.Collections.Generic` is added.

**Actual Behavior**:

A using directive for `System.Collections` is added.

After step 3, the completion list shows the non-generic `IEnumerable` as the first option, so I could understand if `Tab` completion imported that one (although I think you could still argue that the generic should be prioritized since it's used much more). However, when typing `&lt;` rather than `Tab`, it absolutely should import the namespace for the generic `IEnumerable&lt;&gt;`.</Description>
  </Issue>
  <Issue>
    <IssueID>42235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>y87feng</FixedById>
        <IssueID>42235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>In AddExplicitCast, lambda function as an argument cannot be matched to its corresponding paramter </Title>
    <CreatedDate>07/03/2020</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Base { }
class Derived : Base { }
void Foo(Derived d, Action&lt;int&gt; action) { }

Base b = new Derived();
Foo([||]b, (int i) =&gt; { });


**Expected Behavior**:
csharp
Foo((Derived)b, (int i) =&gt; { });
`</Code>
    <Description>**Steps to Reproduce**:
``
**Actual Behavior**:
No action

Some information:
The type of lambda function is `null`, so it cannot be matched.
Keep an eye on the identifier that is syntax and semantic true but the type is `null`.</Description>
  </Issue>
  <Issue>
    <IssueID>42233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>kevinsun-dev</FixedById>
        <IssueID>42233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Diagnostic message about auto-property initializers in interfaces could be confusing</Title>
    <CreatedDate>07/03/2020</CreatedDate>
    <ClosedDate>08/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>42233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public interface TestInterface
    {
        protected string ApiKey { get; set; } = string. Empty;
    }

(Error message: Only auto-implemented properties can have initializers)

csharp
public class TestInterface
    {
        protected string ApiKey { get; set; } = string. Empty;
    }
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---``(works fine)No compilation is required, just the C# language checker, or what you call it, interpreting the code on the fly :)I suspect that it should instead tell that interfaces cannot have implementation, or something of that sort.Best regards,Alexander---### Original Comments#### Visual Studio Feedback System on 2/13/2020, 05:29 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>42219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>42219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add compiler command line switch to provide compilation level editorconfig files for severity configuration</Title>
    <CreatedDate>06/03/2020</CreatedDate>
    <ClosedDate>20/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>42219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Extracted from discussions in  The core compiler feature request here is:

1. C# and VB compilers should provide a new command line switch, say `/globalAnalyzerConfig:&lt;%path_to_editorconfig%&gt;`, to provide a global .editorconfig file with `dotnet_diagnostic` severity entries that applies to the entire compilation, similar to ruleset files.
2. The `dotnet_diagnostic` severity entries from the global .editorconfig file are directly reflected in `CompilationOptions.SpecificDiagnosticOptions`, again similar to ruleset files.
3. Design should allow for more then one global .editorconfig file for different clients that may want to supply such a global configuration file (any SDK, analyzer authors, or even end users who want to ship .editorconfig files as part of NuGet package). Severity settings from global .editorconfig files should be applied in the order in which they are provided on the command line.

Open questions:
1. Should the global editorconfig files be outside the directory cone of the passed in source files, or does this not matter at all?
2. Can the same editorconfig file be passed in as the argument to both `/analyzerConfig` and `/globalAnalyzerConfig`?
3. Future work: Should the non-severity based analyzer config options be also applied from the global editorconfig files? We certainly don't need this functionality in the original design.</Description>
  </Issue>
  <Issue>
    <IssueID>42218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Port and enable NamingStyleCodeFixProvider in CodeStyle layer</Title>
    <CreatedDate>06/03/2020</CreatedDate>
    <ClosedDate>09/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`NamingStyleCodeFixProvider` current depends on an `IWorkspaceService`, [ISymbolRenamedCodeActionOperationFactoryWorkspaceService]( See 

This prevents it from being ported into a NuGet package. We should remove this dependency to unblock this port. 

</Description>
  </Issue>
  <Issue>
    <IssueID>42211</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Switch-implicit-to-explicit feature should not do a full find-references.</Title>
    <CreatedDate>06/03/2020</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Found by @sharwell  when trying to update an implicit `Dispose` on a clas to be explicit. 

Problemantic code is here:



This does all the cascading across the entire solution, even though we very explicitly and intentionally only want the calls to this exact member. 

--

Related to: </Description>
  </Issue>
  <Issue>
    <IssueID>42205</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>42205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add telemetry for generate editorconfig</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>17/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Add telemetry for tools options generate editorconfig - related to this PR: </Description>
  </Issue>
  <Issue>
    <IssueID>42199</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler complains about an outer NotNullWhen inside a local function</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Diagnostics.CodeAnalysis;
#nullable enable
class C
{
    public int P { get; }
    
    private static bool Test([NotNullWhen(true)] out C? outParam)
    {
        outParam = null;   
        return false;
        static bool localFunc(C c)
            =&gt; c.P == 0 || // warns (none expected)
               c.P == 1;
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

``

([sharplab repro](


**Expected Behavior**: no warning about `outParam` in `localFunc`

**Actual Behavior**: `warning CS8762: Parameter 'outParam' may not have a null value when exiting with 'true'.`

</Description>
  </Issue>
  <Issue>
    <IssueID>42198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Design Proposal] Analyzer warning waves</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>42198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>42198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>42198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Feature request
Allow analyzer assemblies, especially the ones that ship with some SDK instead of a NuGet package, to define and participate in _analyzer warning waves_ which control the set of analyzer diagnostics that get enabled by default. This allows newer versions of the SDK to ship with newer analyzer assemblies with additional analyzer diagnostics that stay disabled by default until the SDK or the end user explicitly bumps up the analyzer warning wave number, at which point the additional analyzers light up as enabled by default.

### Implementation proposal
1. Define a new MSBuild property, say `AnalyzerWarningWaves`, to specify a list of key-value pairs in the format `&lt;%warningWaveId%&gt;=&lt;%level%&gt;`, where the `warningWaveId` is a string identifier and `level` is the corresponding warning wave number. For example:
``
2. Define an analogous compiler command line switch `/analyzerWarningWaves=&lt;%value%&gt;`, that parses these warning waves into a `Dictionary&lt;string, int&gt;` and passes it down to the analyzer driver.
3. Each `DiagnosticDescriptor` reported from [DiagnosticAnalyzer.SupportedDiagnostics]( must be able to declaratively opt into warning waves. I can think of couple of ways to do this, with the first one being my preference:
   1. [DiagnosticDescriptor.CustomTags]( Each `DiagnosticDescriptor` must define a custom tag in a specific chosen format to declare its minimum warning wave level, say `AnalyzerWarningWaves:WaveId=1`, where `WaveId` is a string identifier for the warning wave ID and integral suffix after `=` is the associated warning wave level.
   2. Add a new constructor overload to `DiagnosticDescriptor` that take a new optional parameter `Dictionary&lt;string, int&gt; analyzerWarningWaves` to specify the warning waves. This approach has the disadvantage of unnecessarily polluting the public API surface of `DiagnosticDescriptor` for a very niche scenario, while also forcing the analyzer authors to move to a newer compiler API to get this functionality, which is not required in previous approach.
4. Update AnalyzerDriver's [logic]( that determines if an analyzer is suppressed or not to take the `analyzerWarningWaves` dictionary. A `DiagnosticDescriptor` that is marked as enabled by default will be disabled if it has opted into a specific analyzer warning wave and either that warning wave ID entry is missing from `analyzerWarningWaves` or it's value is lesser then the warning wave level that the descriptor specified.
5. Analyzer driver must also handle the case where an analyzer defines multiple diagnostics descriptors with different warning levels, by enabling the analyzer if at least one descriptor is enabled and then filtering out the individual diagnostics reported by the analyzer based on analyzer warning levels.

### New meta-analyzers proposal
In order to help analyzer authors opt into analyzer warning waves correctly, we can author new meta-analyzers (analyzers written for analyzers). Analyzer warning waves tracking is very similar to public API tracking, with some shipped warning waves and current unshipped warning wave. We can write an analyzer/fixer analogous to public API analyzer as follows:
   1. Analyzer looks for additional files named `AnalyzerWarningWaves.Shipped.txt` and `AnalyzerWarningWaves.Unshipped.txt`
   2. Each warning waves file specifies sections with `&lt;%warningWaveID%&gt; = &lt;%level%&gt;` as the header and the list of diagnostic IDs that opt into that warning wave with the specified level in the subsequent lines.
   3. A diagnostic is raised if unshipped file defines any section with warningWaveId whose level is less then equals the maximum level for that warningWaveId defined in the shipped file, if any.
   4. A diagnostic/code fix is provided to ensure that every new diagnostic ID gets added to `AnalyzerWarningWaves.Unshipped.txt`.
   5. A diagnostic is raised if the warning wave level specified in the `DiagnosticDescriptor` does not match the entry in AnalyzerWarningWaves shipped or unshipped files.
   6. Analyzer author moves all the entries from `AnalyzerWarningWaves.Unshipped.txt` into `AnalyzerWarningWaves.Shipped.txt` when they are ready to ship and close out a specific warning wave.</Description>
  </Issue>
  <Issue>
    <IssueID>42191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Recursive method analyzer</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <IssueLabels />
    <Description>Is it possible for an analyzer to detect a recursive method? I was looking for a built-in facility which would traverse over visible code paths, and finding loops.

I was thinking of providing this information to the user and a possible autofix to change a recursive method to (a stack friendly) iterative counterpart.</Description>
  </Issue>
  <Issue>
    <IssueID>42188</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move TodoCommentIncrementalAnalyzerProvider OOP</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>42188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ultimately this needs to be an LSP based service similar to diagnostics.
In fact, our diagnostic reporting to the Error List and TODO item reporting share most of the VS item reporting code. We won't be able to remove this infrastructure until both diagnostics and TODO items are migrated over to LSP.

Currently the implementation both pulls and pushes the items. Rather then redesigning it just to move it to OOP I believe it would be best to go straight to LSP.
</Description>
  </Issue>
  <Issue>
    <IssueID>42186</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move DesignerAttributeIncrementalAnalyzer OOP</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>42186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1) Enable this analyzer in RemoteWorkspace (attribute on the provider).

Replace `WorkspaceKind.Host` with `WorkspaceKind.RemoteWrkspace`:

``

2) Split the code into analyzer part (remote) and notification part (in devenv). 
3) Serialize the analysis results in OOP and send them over to devenv. 
4) Forward the notification to the project system.

The analyzer and PS notification need to be independent (producer/consumer queue), so that ServiceHub doesn't block on UI thread as the project system API requires UI thread.</Description>
  </Issue>
  <Issue>
    <IssueID>42185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Move CodeModelIncrementalAnalyzerProvider to OOP</Title>
    <CreatedDate>05/03/2020</CreatedDate>
    <ClosedDate>03/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>42185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Send notifications back to devenv process.</Description>
  </Issue>
  <Issue>
    <IssueID>42176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Revisit RenameTrackingDiagnosticAnalyzer to unblock moving analyzers OOP</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>26/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>42176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Rename logic is using `TextBuffer` to stash a `StateMachine` object and `RenameTrackingDiagnosticAnalyzer` is fetching that object. This won't work if we move the analyzer OOP since we don't have TextBuffers there that would have their properties synchronized with their in-proc counterparts.

@jasonmalinowski suggests the following:

So the analyzer IIRC is just there to trigger the light bulb and get that. So either:

1) This stays in proc and we use something else instead of a diangostic analyzer to trigger the lightbulb.

2) We move this out of proc and rewrite rename tracking to work more OOP. This still needs an in-proc tagger for the outline.




</Description>
  </Issue>
  <Issue>
    <IssueID>42172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No warning issued if [Obsolete(...)] contains \n</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>11/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;


cs
using System;

namespace Lib
{
    [Obsolete("\n")]
    public class Class1 { }

    public class Class2
    {
        public void Method() =&gt;  new Class1();
    }
}


Command line

msbuild

### Expected behavior
    **1 Warning(s)**
    0 Error(s)

### Actual behavior
Build succeeded.
    **0 Warning(s)**
    0 Error(s)

### Environment data
`msbuild /version` output:

Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

16.4.0.56107
`</Code>
    <Description>_From @schibu007 on Wednesday, March 4, 2020 10:44:55 AM_

There is no warning issued if the [Obsolete(...)] attribute contains a message with **\n** (\n alone, not \r\n).
 It works in VS, however:
![image](

### Steps to reproduce
Project file
``
OS info: Windows 10 1909


_Copied from original issue: microsoft/msbuild#5156_</Description>
  </Issue>
  <Issue>
    <IssueID>42169</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>42169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Overriding method with [MaybeNull, NottNullWhen(true)] produces a warning</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>42169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
using System;
using System.Diagnostics.CodeAnalysis;
#nullable enable

public class C {
         internal virtual bool TryGetValueCore&lt;TKey, TValue&gt;(TKey key, string valueProvider, [MaybeNull] [NotNullWhen(true)] out TValue value)
            where TKey : class
        {
            throw new NotImplementedException();
        }
}
public class Derived : C
{
    // warning CS8765: Type of parameter 'value' doesn't match overridden member because of nullability attributes.
    internal override bool TryGetValueCore&lt;TKey, TValue&gt;(TKey key, string valueProvider, [MaybeNull] [NotNullWhen(true)] out TValue value)
        {
        throw null!;
        }
}
`</Code>
    <Description>I encountered this in `DiagnosticStartAnalysisScope.cs` at line 203 (method `TryGetValueCore`).

``
[sharplab](</Description>
  </Issue>
  <Issue>
    <IssueID>42168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>42168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Public API analyzer only works in Roslyn.sln if the API file is opened in the editor</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>28/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest 16.6 dogfood build

**Steps to Reproduce**:

1. Open Roslyn.sln
2. Open any file, say `Workspace.cs` and add a new public API. You should see RS0016 error.
3. Ctrl + Dot to see that public code fix is shown and the preview also shows the correct change
4. Hit enter to attempt to apply the fix

**Expected Behavior**:
Unshipped public API file is changed

**Actual Behavior**:
Unshipped public API file is not changed. If you repeat the above steps with the public API already open in the editor, code fix does work. NOTE: I am unable to repro this behavior with couple other solutions I tried, but it does repro consistently on Roslyn.sln on both my machines.

I debugged this a bit, and it finally comes down the below code: 

It seems something from the InvisibleEditor code path is causing the scenario to fail, I don't see any exceptions - just the file change does not seem to get saved to disk. I am not sure which component or API does the actual write to disk in invisible editor code path.
</Description>
  </Issue>
  <Issue>
    <IssueID>42166</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support analyzers that are disabled by default in command line build but enabled in other hosts</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>24/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>42166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>42166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Current state
Today, every analyzer that is installed via NuGet package and marked as enabled by default runs in both command line build and IDE, regardless of the analyzer severity. This is completely reasonable as almost all the analyzers are designed to be warnings by default that can break build. Users have to explicitly install the analyzer NuGet package, so any command line build impact happens as part of user action of installing the analyzer.

### Feature request
We are planning to include .NET5 analyzers and possibly even IDE code style analyzers in the .NET SDK (see [this]( proposed experience for code style analyzers for details). Only a small selected set of analyzers from the .NET analyzers package can be enabled by default as warnings, and all the code style ones have to be suggestions or hidden. To improve discoverability of analyzers in .NET5 analyzers package and supporting IDE code style suggestions, it is imperative that we support analyzers/descriptors to mark themselves as being disabled by default in command line build, which get enabled by explicit user configuration via .editorconfig. This ensure we can keep delivering value to customers with new analyzers lighting up in IDE as suggestions, without impacting command line build by default to prevent any functional compat or performance issues.

### Proposal
I can think of two potential approaches for implementing this feature in the analyzer driver:

1. Add a new overload to `DiagnosticDescriptor` [constructor]( which takes an additional flag, say `bool isEnabledByDefaultInCommandLine`, apart from the already existing `bool isEnabledByDefault`. I personally don't like this proposal as it unnecessarily muddlles up public API surface for a scenario that is very likely not going to be used by majority of analyzer authors, if any.
2. Add a new custom tag, say `DisabledByDefaultOnCommandLine`, to [WellKnownDiagnosticTags]( and the analyzer driver will ensure that from command line compiler context, it also considers this custom tag in deciding if a particular analyzer/descriptor is disabled.

I personally prefer the second approach as it does not have any significant public API impact, while also allowing us to add support for this scenario. I implemented a prototype for it, and with this functionality enabled, adding a NuGet package reference to the [current candidate .NET5 analyzers package]( which has bunch of enabled suggestions but no enabled warning, leads to bunch of new CA suggestions in the IDE with absolutely no command line build impact in terms of functionality and performance.</Description>
  </Issue>
  <Issue>
    <IssueID>42162</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>42162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>In a conjunctive pattern, use the type from the left for the input type on the right.</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>18/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>42162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>42162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
bool isSmallByte(object o) =&gt; o is byte and &lt; 100;
`</Code>
    <Description>The following rule from  needs to be implemented (on the `features/patterns3` branch):

### Flowing type information from the left to the right of `and`

It has been suggested that when you write an `and` combinator, type information learned on the left about the top-level type could flow to the right.  For example

``

Here, the *input type* to the second pattern is narrowed by the *type narrowing* requirements of left of the `and`.  We would define type narrowing semantics for all patterns as follows.  The *narrowed type* of a pattern `P` is defined as follows:
1. If `P` is a type pattern, the *narrowed type* is the type of the type pattern's type.
2. If `P` is a declaration pattern, the *narrowed type* is the type of the declaration pattern's type.
3. If `P` is a recursive pattern that gives an explicit type, the *narrowed type* is that type.
4. If `P` is a constant pattern where the constant is not the null constant and where the expression has no *constant expression conversion* to the *input type*, the *narrowed type* is the type of the constant.
5. If `P` is a relational pattern where the constant expression has no *constant expression conversion* to the *input type*, the *narrowed type* is the type of the constant.
6. If `P` is an `or` pattern, the *narrowed type* is the common type of the *narrowed type* of the left pattern and the *narrowed type* of the right pattern if such a common type exists.
7. If `P` is an `and` pattern, the *narrowed type* is the *narrowed type* of the right pattern. Moreover, the *narrowed type* of the left pattern is the *input type* of the right pattern.
8. Otherwise the *narrowed type* of `P` is `P`'s input type.


</Description>
  </Issue>
  <Issue>
    <IssueID>42154</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AnalyzerConfigSet can return wrong set of Options</Title>
    <CreatedDate>04/03/2020</CreatedDate>
    <ClosedDate>27/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Editor Config</Name>
        <IssueID>42154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>While moving dotnet format to the compiler's .editorconfig support our tests hit on an unlikely bug.

AnalyzerConfigSet caches options previously returned based on a key of matched section names. This can return invalid results when there are multiple levels of .editorconfig.

If a file matches sections from the top most .editorconfig and **is not** with or beneath the folder containing the lower .editorconfig, then it's options will be cached by the section names from the top most. If another file matches the sections from the top most .editorconfig and **is** with or beneath the folder containing the lower .editorconfig but fails to match any additional sections, despite the lower .editorconfig being a root .editorconfig the options stored from the previously processed file will be returned.

I believe that the FilePaths of the applicable .editorconfigs should be incorporated into the key used for caching.</Description>
  </Issue>
  <Issue>
    <IssueID>42138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE reports a lot of unexpected errors (build actually succeeds) and features like Go To Definition do not work (likely due to the errors).</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.6.0 Preview 1.0 [29826.224.master]

Open Roslyn solution, and build C# compiler, the build succeeds. However, there are a lot of errors in the Error List and red squiggles all over the code (possibly only around types that are defined in Microsoft.CodeAnalysis.dll):
![image](

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>42137</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Package Manager Console Depends on Solution Start-up Project</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>07/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>42137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS Professional 2019 v 16.4.5

**Steps to Reproduce**:

1. Select a start up project
2. In Package Manager Console, select a default project different from startup
3. Run a command that depends on building of projects or even code with in such as Scaffold-DbContext.

**Expected Behavior**:

The command runs in context of the default project

**Actual Behavior**:

The command run on the default project but in the context of the start-up project
**Notes**

Not really sure that this is a bug, but it is a confusing coupling between two different concepts.   </Description>
  </Issue>
  <Issue>
    <IssueID>42130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>42130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0066 should not suggest for ref-returns (Convert switch statement to switch expression)</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>42130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
class Foo
{
    int x, y, z; // yes, I know this could be a vector and "job done"
    private ref int GetField(int id)
    {
        switch (id)
        {
            case 0: return ref x;
            case 1: return ref y;
            case 2: return ref z;
            default: throw new ArgumentException(nameof(id));
        }
    }
}


IDE0066 suggests changing this to:

 c#
    private ref int GetField(int id)
    {
        return id switch
        {
            0 =&gt; ref x,
            1 =&gt; ref y,
            2 =&gt; ref z,
            _ =&gt; throw new ArgumentException(nameof(id)),
        };
    }
`</Code>
    <Description>code to repro:

``

which does not compile; you can add a missing `ref` to fix the CS8150 on the `return id switch` line (to `return ref id switch`), but you still get 3xCS1525+CS1073 on the individual cases.</Description>
  </Issue>
  <Issue>
    <IssueID>42126</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Convert var to explicit type introduces spurious nullable type</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable

IEnumerable&lt;string&gt; strings = Array.Empty&lt;string&gt;();

foreach (var s in strings)
{
}


Invoke "Use explicit type instead of 'var'" on the foreach variable declaration.

**Expected Behavior**:

c#
foreach (string s in strings)
{
}


**Actual Behavior**:

The `string?` type is used:

c#
foreach (string? s in strings)
{
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>42119</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>42119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Honor new properties on ObsoleteAttribute</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We'd like to [make obsoletion more viable]( This requires extending the `ObsoleteAttribute`:

``

* `DiagnosticId`. Represents the ID the compiler will use when reporting a use of the API. This relies on diagnostic IDs being unique, just like the rest of the Roslyn analyzer facility.
* `UrlFormat`. The URL that should be used by an IDE for navigating to corresponding documentation. Instead of taking the URL directly, the API takes a format string. This allows having a generic URL that includes the diagnostic ID. This avoids having to repeat the ID twice and thus making a copy &amp; paste mistake.

We'd like the compiler to honor these new properties as follows (more details in the [proposal](

* If `DiagnosticId` is `null`, use the existing diagnostic ID (e.g. `CS0618` in C#). Otherwise, use `DiagnosticId`.
* The compiler should honor suppressions for the specified diagnostic id.
* When the user suppresses the existing generic diagnostic ID for obsoletion (e.g. `CS0618` in C#), the compiler should not suppress any obsoletions with an explicitly set diagnostic ID (unless that explicit ID happens to match the generic diagnostic, but that would be bad practice from the API author). Instead, the developer has to add a suppression for the specified diagnostic ID. As such, adding a diagnostic is the same as changing a diagnostic ID and thus a source breaking change.
* The compiler doesn't report diagnostics for use of obsoleted APIs when the use site itself is marked obsolete. On the one hand, it seems logical to amend this behavior to only skip the reporting if the diagnostic ID of the use site and the declaration site are the same. On the other hand, that's probably overkill because a developer who marked a type or method as obsoleted makes it clear that the code is only provided for backwards compatibility. Having to keep adding new suppressions for other obsoleted APIs seems unhelpful.
* If `UrlFormat` is not `null`, use it as the diagnostic link when rendering them in the IDE.
* The compiler should assume that `UrlFormat` and `DiagnosticId` are independent features, in other words both can be used, either, or neither.

@jaredpar @agocke </Description>
  </Issue>
  <Issue>
    <IssueID>42116</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>42116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>dotnet_analyzer_diagnostic editorconfig setting affects compiler diagnostics in IDE</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>42116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>42116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Class1
{
    void M()
    {
       // Compiler warning CS0219
        var test = 1;
    }
}


2. Create an .editorconfig at root of the project with following setting (basically uses the new bulk configuration feature added in https://github.com/dotnet/roslyn/pull/38886):

[*.cs]
dotnet_analyzer_diagnostic.severity = none
`</Code>
    <Description>**Version Used**: Latest 16.6 dogfood preview build

**Steps to Reproduce**:

1. 
``

**Expected Behavior**:
Editorconfig entry has no effect on compiler warning CS0219

**Actual Behavior**:
Editorconfig entry has no effect on compiler warning CS0219 in command line builds, but is applied to compiler warning CS0219 in the IDE (bug). This is due to the fact that we use a dummy analyzer [CompilerDiagnosticAnalyzer]( to report compiler diagnostics in the IDE. The logic in the analyzer driver that applies `dotnet_analyzer_diagnostic` based bulk configuration settings should skip compiler diagnostics to avoid this.
</Description>
  </Issue>
  <Issue>
    <IssueID>42115</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cancelling a lightbulb produces a yellow-bar</Title>
    <CreatedDate>03/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>42115</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>42108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>42108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid IDE0004 on cast in switch expression</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>42108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>42108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
enum E { A, B }

class C
{
    bool M(int i)
    {
        return (E)i switch
        //     ~~~ IDE0004 cast is redundant
        {
            E.A =&gt; true,
            _ =&gt; false
        };
    }
}
`</Code>
    <Description>**Version Used**: Version 16.6.0 Preview 2.0 (master) (private branch build with unrelated changes)

**Steps to Reproduce**:

``

**Expected Behavior**:

Cast is not flagged as redundant.

**Actual Behavior**:

Cast is flagged as redundant. Removing it introduces CS0266 on `E.A` in switch case.</Description>
  </Issue>
  <Issue>
    <IssueID>42107</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>42107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error parsing a parenthesized relational pattern</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>42107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>42107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>42103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide a generic code fixer for navigating the URL of a diagnostic</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>27/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>42103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>42103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The `DiagnosticDescriptor` has a [`HelpLinkUri` property]( which is used by the IDE to render a hyperlink in the error list:

![image](

However, this is quite subtle and I've seen many people not noticing this. In my own analyzer, I've added a code fixer that offers to browse to the location:

![image](

However, my code fixer is specific to my own diagnostics. It might help to provide a built-in code fixer that offers this capability for all diagnostics. Especially because the priority of this fixer should probably be lower than other code fixers but the ability to tweak priorities wasn't exposed last time I checked.</Description>
  </Issue>
  <Issue>
    <IssueID>42095</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>42095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Create a single file watcher for a folder</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>04/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>42095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>42095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Open</Name>
        <IssueID>42095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In our out of memory investigations for VS, we see that Roslyn ends up creating VS file watchers for each individual file. Instead it should create a single file watcher for each folder. 

The large number of file watchers is contributing significantly to the memory that's consumed when opening a large .NET Core solution, and impacts the overall ability to load large solutions.</Description>
  </Issue>
  <Issue>
    <IssueID>42092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>42092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing documentation</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>42092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@KitPatterson commented on [Thu Feb 27 2020](What does this property mean? ---#### Document Details⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.** ID: e6d82018-baca-ba95-f165-1c8c5be8f45b* Version Independent ID: 4451cff1-8f80-7350-2c09-7e44b9ee8039* Content: [AdhocWorkspace.CanOpenDocuments Property (Microsoft.CodeAnalysis)](* Content Source: [dotnet/xml/Microsoft.CodeAnalysis/AdhocWorkspace.xml](* Product: **dotnet-roslyn-api*** Technology: **microsoft.codeanalysis*** GitHub Login: @dotnet-bot* Microsoft Alias: **dotnetcontent**---@BillWagner commented on [Fri Feb 28 2020](ping @jinujoseph 

Who should I route this toward?---@jinujoseph commented on [Fri Feb 28 2020](Should be roslyn @jasonmalinowski  will you help doc this API 
</Description>
  </Issue>
  <Issue>
    <IssueID>42083</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>42083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetDocumentHighlightsAsync throws System.ArgumentException: Wrong number of type arguments</Title>
    <CreatedDate>02/03/2020</CreatedDate>
    <ClosedDate>05/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>42083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>42083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There should be a Watson report for this OOP crash.

Stack trace

``</Description>
  </Issue>
  <Issue>
    <IssueID>42061</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide feature to switch between different string-forms.</Title>
    <CreatedDate>01/03/2020</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels />
    <Code>c#
"x p\r\n{\r\n    get\r\n    {\r\n    }\r\n\r\n    set\r\n    {\r\n        y;\r\n    }\r\n}"


I would like an easy way to convert this to:

c#
"x p
{
    get
    {
    }

    set
    {
        y;
    }
}"
`</Code>
    <Description>i.e. if i have 

``</Description>
  </Issue>
  <Issue>
    <IssueID>42054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>42054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Optimize switch code generation with relational operators via tree</Title>
    <CreatedDate>01/03/2020</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>42054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Code Gen Quality</Name>
        <IssueID>42054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>42054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static class C {
    
    static LifeStage LifeStageAtAge(int age) =&gt; age switch
    {
        &lt; 0 =&gt;  LifeStage.Prenatal,
        &lt; 2 =&gt;  LifeStage.Infant,
        &lt; 4 =&gt;  LifeStage.Toddler,
        &lt; 6 =&gt;  LifeStage.EarlyChild,
        &lt; 12 =&gt; LifeStage.MiddleChild,
        &lt; 20 =&gt; LifeStage.Adolescent,
        &lt; 40 =&gt; LifeStage.EarlyAdult,
        &lt; 65 =&gt; LifeStage.MiddleAdult,
        _ =&gt;    LifeStage.LateAdult,
    };
}

enum LifeStage
{
    Prenatal,
    Infant,
    Toddler,
    EarlyChild,
    MiddleChild,
    Adolescent,
    EarlyAdult,
    MiddleAdult,
    LateAdult,
}


decompiles to:

csharp
internal static class C
{
    private static LifeStage LifeStageAtAge(int age)
    {
        if (age &gt;= 0)
        {
            if (age &gt;= 2)
            {
                if (age &gt;= 4)
                {
                    if (age &gt;= 6)
                    {
                        if (age &gt;= 12)
                        {
                            if (age &gt;= 20)
                            {
                                if (age &gt;= 40)
                                {
                                    if (age &lt; 65)
                                    {
                                        return LifeStage.MiddleAdult;
                                    }
                                    return LifeStage.LateAdult;
                                }
                                return LifeStage.EarlyAdult;
                            }
                            return LifeStage.Adolescent;
                        }
                        return LifeStage.MiddleChild;
                    }
                    return LifeStage.EarlyChild;
                }
                return LifeStage.Toddler;
            }
            return LifeStage.Infant;
        }
        return LifeStage.Prenatal;
    }
}
internal enum LifeStage
{
    Prenatal,
    Infant,
    Toddler,
    EarlyChild,
    MiddleChild,
    Adolescent,
    EarlyAdult,
    MiddleAdult,
    LateAdult
}


It could be made more efficient by creating a binary search tree, similar to what is done for strings:

csharp
internal static class C
{
    private static LifeStage LifeStageAtAge(int age)
    {
        if (age &lt; 12)
        {
            if (age &lt; 4)
            {
                if (age &lt; 2)
                {
                    if (age &lt; 0)
                    {
                        return LifeStage.Prenatal;
                    }
                    else
                    {
                        return LifeStage.Infant;
                    }
                }
                else
                {
                    return LifeStage.Toddler;
                }
            }
            else
            {
                if (age &lt; 6)
                {
                    return LifeStage.EarlyChild;
                }
                else
                {
                    return LifeStage.MiddleChild;
                }
            }
        }
        else
        {
            if (age &lt; 40)
            {
                if (age &lt; 20)
                {
                    return LifeStage.Adolescent;
                }
                else
                {
                    return LifeStage.EarlyAdult;
                }
            }
            else
            {
                if (age &lt; 65)
                {
                    return LifeStage.MiddleAdult;
                }
                else
                {
                    return LifeStage.LateAdult;
                }
            }
        }
    }
}
internal enum LifeStage
{
    Prenatal,
    Infant,
    Toddler,
    EarlyChild,
    MiddleChild,
    Adolescent,
    EarlyAdult,
    MiddleAdult,
    LateAdult
}
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

Look at the decompilation for the following code in sharplab:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>41505</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>41505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactor -&gt; rename only works for certain objects</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>08/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;[regression] [worked-in:16.2.3]&lt;br&gt;After updating to Visual Studio 16.3 the Refactor -&amp;gt; Rename tool stopped working for properties and methods.&lt;br&gt;As far as I could test, only class names, method arguments and class fields are renaming properly.&lt;br&gt;No errors are thrown, simply nothing happens.&lt;/p&gt;&lt;p&gt;However, the &lt;code&gt;Rename&lt;/code&gt; dialog is stuck on “searching…”. This doesn’t happen for class names, for example, where it actually shows which instances will be renamed.&lt;/p&gt;&lt;p&gt;Please see the attached information.&lt;/p&gt;&lt;p&gt;Update: this works fine on dotnet core applications. This happens in a legacy application (dotnet framework 4.6.2, 50+ csproj).&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 9/24/2019, 11:25 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;#### vitor.rigoni on 10/7/2019, 04:38 PM: &lt;p&gt;I finally got this to throw an exception. And I have a stack trace! =D&lt;/p&gt;&lt;p&gt;I hope this helps:&lt;/p&gt;&lt;pre&gt;'CSharpRenameTrackingCodeFixProvider' encountered an error and has been disabled.&lt;/pre&gt;&lt;pre&gt;System.AggregateException : One or more errors occurred. ---&amp;gt; One or more errors occurred. ---&amp;gt; One or more errors occurred. ---&amp;gt; Object reference not set to an instance of an object.   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCodeAction.ComputePreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&amp;lt;&amp;gt;c__DisplayClass11_0.&amp;lt;GetPreviewAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)---&amp;gt; (Inner Exception #0) System.AggregateException : One or more errors occurred. ---&amp;gt; One or more errors occurred. ---&amp;gt; Object reference not set to an instance of an object.   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesFromCacheOrComputeAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindImplementedInterfaceMembersAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.Finders.AbstractMethodOrPropertyOrEventSymbolReferenceFinder`1.DetermineCascadedSymbolsAsync[TSymbol](&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.Finders.PropertySymbolReferenceFinder.DetermineCascadedSymbolsAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.&amp;lt;&amp;gt;c__DisplayClass21_1.&amp;lt;DetermineAllSymbolsCoreAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsCoreAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.DetermineAllSymbolsAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindRenamableReferencesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Rename.RenameLocations.AddLocationsReferenceSymbolsAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Rename.RenameLocations.FindAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolWorkerAsync(&amp;lt;Unknown Parameters&amp;gt;)---&amp;gt; (Inner Exception #0) System.AggregateException : One or more errors occurred. ---&amp;gt; Object reference not set to an instance of an object.   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.AddSourceTypesInProjectAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesInProjectAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.FindTypesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.&amp;lt;&amp;gt;c__DisplayClass9_0.&amp;lt;FindTypesFromCacheOrComputeAsync&amp;gt;b__0(&amp;lt;Unknown Parameters&amp;gt;)---&amp;gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.   at async Microsoft.CodeAnalysis.FindSymbols.DependentTypeFinder.ProjectIndex.CreateIndexAsync(&amp;lt;Unknown Parameters&amp;gt;)   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) &amp;lt;---  &amp;lt;---  &amp;lt;--- &lt;br&gt;&lt;/pre&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41502</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>41502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remaining work for C# 9 pattern-matching changes</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>04/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>41502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following is the remaining work items not yet implemented for the C# 9 pattern-matching changes described in 

- [x] Update license comments in recently added files on the branch. (
- [x] Support relational patterns for `decimal`. (
- [X] In the decision DAG builder, collapse states that have identical behavior so that the generated decision dag is simpler in some cases. (
- [x] In an `and` pattern, use the type from the left as the input type for the right.  This requires some spec work.
- [x] Overhaul the lowering of the is-pattern expression to support `or`, `not`, etc.
- [x] Improve lowering (code gen) for a sequence of relational pattern tests.  See 
- [X] The semantic model is not yet supported for relational operators (
- [X] IOperation not yet supported for the new forms. (
- [X] CFG for new pattern forms (
- [x] For the *type pattern*, we can give the same set of warnings as we do for the *is type* expression.
- [x] Implement single-element ITuple-based positional pattern (once the open issue is resolved)
- [x] Additional testing (see 
- [x] Document the "breaking" change around completeness for enumerated `byte` and `sbyte` switches. (
- [x] Are formatter changes required?
- [x] Document breaking change: `not` is considered a type in C# 8 and a pattern in C# 9. (
- [x] Document breaking change: `and` and `or` are allowed as variable names in C# 8, but are pattern combinators in C# 9. (

## Open Issues
- [x] What is the *narrowed type* for a  for an `or` pattern? The current spec (common type) doesn't work as the common type permits representation-changing conversions (e.g. for `int or long`).
- [ ] Is `e is dynamic` a "pure" null check? [See #40960 ; not a pattern-matching issue]
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>41503</PullRequestID>
        <Title>Implementation for *type*, `not`, `and`, `or`, and relational patterns</Title>
        <Description>Semantics and lowering for the new pattern forms.
Remaining work is tracked at 

Relates to   (test plan)
</Description>
        <CreatedDate>07/02/2020</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>41503</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>41503</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>41503</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>41697</PullRequestID>
        <Title>Implementation of relational patterns for decimal (C# 9.0)</Title>
        <Description>This should be reviewed after  is integrated.

This fulfills one of the remaining work items tracked at #41502.
</Description>
        <CreatedDate>14/02/2020</CreatedDate>
        <ClosedDate>24/02/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>41697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>41697</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>41697</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>42012</PullRequestID>
        <Title>Optimize the decision dag by eliminating semantically identical states.</Title>
        <Description>* Optimize the decision dag by eliminating semantically identical states.
* Change the order of nodes while computing the state machine to match the order in the final code
* Implement `is not`.
* Stop using `operator ==` and use `.Equals` instead.
* Remaining work tracked at 
</Description>
        <CreatedDate>28/02/2020</CreatedDate>
        <ClosedDate>04/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42012</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42012</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>42012</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>42357</PullRequestID>
        <Title>GetSymbolInfo and GetTypeInto for new pattern forms</Title>
        <CreatedDate>12/03/2020</CreatedDate>
        <ClosedDate>20/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42357</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42357</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>333fred</FixedById>
            <PullRequestID>42357</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>42357</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>42474</PullRequestID>
        <Title>IOperation support for new pattern forms in C# 9.0.</Title>
        <CreatedDate>16/03/2020</CreatedDate>
        <ClosedDate>18/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42474</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42474</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>333fred</FixedById>
            <PullRequestID>42474</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>42474</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>42548</PullRequestID>
        <Title>Implement CFG for new pattern forms</Title>
        <CreatedDate>18/03/2020</CreatedDate>
        <ClosedDate>20/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>42548</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41502</IssueID>
        <PullRequestID>42632</PullRequestID>
        <Title>Document known breaking changes in C# 9.0.</Title>
        <CreatedDate>20/03/2020</CreatedDate>
        <ClosedDate>21/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42632</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>41502</IssueID>
            <PullRequestID>42632</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>42632</PullRequestID>
            <IssueID>41502</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41501</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>41501</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Struct Inherited Interface Causes Cycle In Interface Hierarchy</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41501</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41501</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>41501</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:15.9.18]
When compiling the following code in Visual Studio 2019 (.NET 4.6.1 project)``to change the version of the compiler to an older version the code can successfully compile.---### Original Comments#### Visual Studio Feedback System on 1/2/2020, 10:32 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 2/6/2020, 07:32 PM: I have detected that for the last 35 days, this issue didn't have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.#### David Symmonds on 2/7/2020, 00:16 AM: &lt;p&gt;I've been waiting patiently for this to be resolved as this is also breaking my existing code base. The last (automated?) comment is a little disheartening given that I'd assumed breaking changes to existing code bases would be prioritised.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41499</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>41499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unimported items shown at the top of completion list</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>41499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>But it will be shown at the bottom after the list is refreshed (i.e. via any of the filters)

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>41496</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>incorrect nullable decimal prefix increment pattern</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Prefix incrementing a nullable decimal property evaluates the getter twice.Once in the call to HasValue and a second time in the call to GetValueOrDefault().This is inconsistent with the pattern used for other nullable types.This might be a problem for properties with side effects within the getter.The same inconsistency happens for nullable decimal indexers and the prefix decrement operator.Regards,B---### Original Comments#### Visual Studio Feedback System on 2/3/2020, 00:51 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41488</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability state reported on LHS of assignment appears to be the state from before the assignment rather than after.</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>08/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41488</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>41488</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41488</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  16.5P3 29802.114.master

**Steps to Reproduce**:

1. Paste C#

``

2. Use QuickInfo on the two commented assignments of `local`

Here's a screenshot of this where green identifiers mean QI would show "is not null here" and orange means "may be null here"

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>41481</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>crash C# (Incorrect source)</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>41481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---C#プロジェクト(Microsoft .NET Framework Version 4.8.03752)で、  以下の誤ったソースを記述するとVisual Studio Community 2019(Version 16.4.3)が動作停止することを確認したので報告致します。``---### Original Comments#### Visual Studio Feedback System on 1/28/2020, 03:45 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 2/5/2020, 11:26 AM: Thank you for reporting this issue to us. We have changed the title to better describe the problem so others can find and engage with it.---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41480</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual studio crashes when typing out a null-conditional index operation in Roslyn</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>07/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Version Used:Version 16.4.2VisualStudio.16.Release/16.4.2+29613.14Microsoft .NET FrameworkVersion 4.8.03752Steps to Reproduce:Open the C# interactive window.Type the following two lines into the interactive window as separate statements (so the first runs before you start typing the second):    ``---### Original Comments#### Visual Studio Feedback System on 2/3/2020, 04:53 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41479</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>41479</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function with [MaybeNullWhen(false)] crashes in nullable analysis</Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>14/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41479</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41479</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable

using System.Diagnostics.CodeAnalysis;

class C
{
    void M()
    {
        _ = tryGetValue(out string? s);
        bool tryGetValue&lt;T&gt;([MaybeNullWhen(false)] out T t)
        {
            t = default;
            return false;
        }
    }
}


This code throws a NullReferenceException about 'other' being null here:

NullableWalker.Join(ref NullableWalker.LocalState self, ref NullableWalker.LocalState other) Line 8247
NullableWalker.VisitLocalFunctionUse(LocalFunctionSymbol symbol, NullableWalker.LocalFunctionState localFunctionState, SyntaxNode syntax, bool isCall) Line 1804
AbstractFlowPass&lt;NullableWalker.LocalState, NullableWalker.LocalFunctionState&gt;.VisitLocalFunctionUse(LocalFunctionSymbol symbol, SyntaxNode syntax, bool isCall) Line 1176
NullableWalker.VisitCall(BoundCall node) Line 3465
`</Code>
    <Description>This is a bug in the local-function-attributes feature branch.

Sample:
``</Description>
  </Issue>
  <Issue>
    <IssueID>41478</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>41478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ExtractMethodCodeRefactoringProvider encountered an error and has been disabled. </Title>
    <CreatedDate>07/02/2020</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41478</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
This error was reported many times before but the problem still exists. During refactoring code the info bar pops up.
Or can we disable the info bar at all because I can do nothing here?

``

---
### Original Comments

#### Visual Studio Feedback System on 10/23/2019, 02:29 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/23/2019, 04:47 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### kapenaga [MSFT] on 12/13/2019, 08:08 AM: 

Faced same issue today. here is the stack trace.&lt;br&gt;System.NullReferenceException : Object reference not set to an instance of an object.&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FindConditionalAccessNodeForBinding(CSharpSyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.GetReceiverForConditionalBinding(ExpressionSyntax binding,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindMemberBindingExpression(MemberBindingExpressionSyntax node,Boolean invoked,Boolean indexed,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindReturn(ReturnStatementSyntax syntax,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindEmbeddedBlock(BlockSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalFunctionStatement(LocalFunctionStatementSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode&amp;amp; bindableNode,BoundNode&amp;amp; lowestBoundNode,BoundNode&amp;amp; highestBoundNode,BoundNode&amp;amp; boundParent)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node,SymbolInfoOptions options,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node,SymbolInfoOptions options,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.Simplification.SimplificationHelpers.GetOriginalSymbolInfo(SemanticModel semanticModel,SyntaxNode expression)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp;amp; replacementNode,TextSpan&amp;amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp;amp; replacementNode,TextSpan&amp;amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp;amp; replacementNode,TextSpan&amp;amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitIdentifierName(IdentifierNameSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)&lt;br&gt;   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)&lt;br&gt;   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&amp;lt;&amp;gt;c__DisplayClass10_1.&amp;lt;ReduceAsync&amp;gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ExtractLocalFunction(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionsAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)

#### ivan.tsitovich on 1/28/2020, 11:32 AM: 

I see similar problem &lt;br&gt;VS 2019 16.4.3&lt;br&gt;&lt;br&gt;System.InvalidOperationException : Unexpected false&lt;br&gt;   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)&lt;br&gt;   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.LocalVariableSymbol`1.GetOriginalIdentifierToken(CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.LocalVariableSymbol`1.AddIdentifierTokenAnnotationPair(List`1 annotations,CancellationToken cancellationToken)&lt;br&gt;   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.&amp;lt;&amp;gt;c__DisplayClass18_0.&amp;lt;CreateDocumentWithAnnotationsAsync&amp;gt;b__0(VariableInfo v)&lt;br&gt;   at Roslyn.Utilities.EnumerableExtensions.Do[T](IEnumerable`1 source,Action`1 action)&lt;br&gt;   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.CreateDocumentWithAnnotationsAsync(SemanticDocument document,IList`1 variables,CancellationToken cancellationToken)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&amp;lt;Unknown Parameters&amp;gt;)&lt;br&gt;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&lt;br&gt;&lt;br&gt;

---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41469</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go To Implementation shouldn't include abstract methods in "implementations"</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>12/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Unlike Go To Implementation on an interface method, Go To Implementation on an abstract method includes that method as part of its implementations.

**Steps to Reproduce**:

``
1. Go To Implemention on IFoo.Method

-- _Navigates to `Foo.Method` as expected_ --

2. Go To Implementation on FooBase.Method


**Expected Behavior**:

Navigates to `Foo.Method()`

**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>41465</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>41465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Servicehub logs have lots extraneous warnings for roslynLanguageServer</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>30/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>41465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

tons and tons of these are being written to servicehub\logs\roslynLanguageServer-*.log.  These are being written out since our ILC doesn't implement these methods yet.  As the VS LSP client is initializing the json rpc connection, probably easiest if we just implement these methods with a no-op.

cc @tmat </Description>
  </Issue>
  <Issue>
    <IssueID>41464</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Failing to get a type of a 'var' declared variable by using SemanticTree.GetSymbolInfo</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>12/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41464</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41464</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
I am using Roslyn 3.4.0 under .net core 3.1 on Windows 10

**Steps to Reproduce**:

here is the code that I am trying to analyze:

        using System.Linq;

        namespace RoslynTests
        {
            public static class MyTestClass1
            {
                public static object MethodWithReturn()
                {
                    int[] array = {1,2,3,4,5,6};

                    var result = array.Select(i =&gt; new { I = i }).Select(v =&gt; v.I);

                    return result;
                }
            }
        }

I am trying to figure out the type of the variable 'result', declared as `var result = ....;`.

So, I am creating a Roslyn workspace with a project with a document, compiling the project, getting the compilation, getting the Syntax and Semantic tree. Getting the LocalDeclarationStatementSyntax corresponding to the 'var result': `syntaxTree.GetRoot().DescendantNodes().OfType&lt;LocalDeclarationStatementSyntax&gt;().Skip(1).FirstOrDefault();` and trying semanticModel.GetSymbolInfo(...) on it. It returns an empty result with `null` symbol. 

I checked the compilation - it was successful (no errors). 

BTW, if I try to pass a `SimpleLambdaExpressionSyntax` to the GetSymbolInfo, it correctly returns the symbol and its type, but I would like to be able to figure out the var's type independently of whether it is followed by a lambda expression, or by smth else.

Here is the full code. 

            string code = @"using System.Linq;
        namespace RoslynTests
        {
            public static class MyTestClass1
            {
                public static object MethodWithReturn()
                {
                    int[] array = {1,2,3,4,5,6};

                    var result = array.Select(i =&gt; new { I = i }).Select(v =&gt; v.I);

                    return result;
                }
            }
        }";

            #region ROSLYN BOOTSTRAPPING
            var host = MefHostServices.Create(MefHostServices.DefaultAssemblies);
            
            Type[] types =
            {
                typeof(object),
                typeof(Enumerable),
                typeof(IEnumerable),
                typeof(IEnumerable&lt;&gt;),
                typeof(Console),
                typeof(Assembly),
                typeof(List&lt;&gt;),
                typeof(Type)
            };

            ImmutableArray&lt;string&gt; imports = types.Select(x =&gt; x.Namespace).Distinct().ToImmutableArray();
            
            
            var assemblies = types.Select(t =&gt; t.Assembly).Concat(new[]
            {
                Assembly.Load("System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
                typeof(Microsoft.CSharp.RuntimeBinder.Binder).Assembly,
            });

            ImmutableArray&lt;MetadataReference&gt; references =
                assemblies.Select(a =&gt; a.Location).Distinct().Select(location =&gt; MetadataReference.CreateFromFile(location) as MetadataReference)
                     .Distinct()
                     .ToImmutableArray();

            AdhocWorkspace workspace = new AdhocWorkspace(host, "Custom");

            string name = "MyTestProj";

            ProjectId id = ProjectId.CreateNewId(name);

            ParseOptions parseOptions = new CSharpParseOptions();

            CompilationOptions compilationOptions =
                new CSharpCompilationOptions
                (
                    OutputKind.DynamicallyLinkedLibrary,
                    usings: imports,
                    allowUnsafe: true);

            ProjectInfo projInfo =
                ProjectInfo.Create
                (
                    id,
                    VersionStamp.Create(),
                    name,
                    name,
                    LanguageNames.CSharp,
                    parseOptions: parseOptions,
                    compilationOptions: compilationOptions,
                    metadataReferences: references);

            Project proj = workspace.AddProject(projInfo);

            SourceText text = SourceText.From(code);

            Document doc = workspace.AddDocument(id, "MyDoc.cs", text);

            //Document doc = proj.AddDocument("MyDoc.cs", text);

            proj = workspace.CurrentSolution.Projects.First();

            Compilation? compilation = proj.GetCompilationAsync().Result;

            using MemoryStream memoryStream = new MemoryStream();

            //StopWatch.ResetStatic();
            EmitResult result = compilation.Emit(memoryStream);
            //StopWatch.PrintDifferenceToDebug("Emit time: ");

            var buffer = memoryStream.GetBuffer();

            #endregion ROSLYN BOOTSTRAPPING

            var syntaxTree = doc.GetSyntaxTreeAsync().Result;

            var node = 
                syntaxTree.GetRoot().DescendantNodes().OfType&lt;LocalDeclarationStatementSyntax&gt;().Skip(1).FirstOrDefault();

            SemanticModel semanticModel = doc.GetSemanticModelAsync().Result;

            var typeInfo = semanticModel.GetTypeInfo(node);

            var symbolInfo = 
                semanticModel.GetSymbolInfo(node);

**Expected Behavior**:

want to be able to find the type or any 'var' declared variable within the program. 

**Actual Behavior**:
Have difficulty finding the type. 
</Description>
  </Issue>
  <Issue>
    <IssueID>41463</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Yet another take on stackallocked classes syntax</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <IssueLabels />
    <Description>I don't know if it was already proposed or not, but here is my take on this one:

I wonder if we can do a more simple version of class stackalloc via already defined C# language keywords?

My proposed rules are :
We can have a class hierarchy but interfaces are forbidden on all levels of hierarchy
Deriving from non ref classes is forbidden
Classes for stackalloc should be either abstract or concrete sealed
Abstract class (every class in hierarchy to be precise) for stackalloc should always have "ref" keyword
Class for stackalloc should behave the same way as ref struct so rules are compiler enforced
Concrete class for stackalloc should always be sealed for devirtualization (I can be wrong here but I've heard there was a pr for jit to introduce this kind of thing)
Concrete class for stackalloc should have "ref" keyword along with "sealed" to match ref struct behavior and previous requirements
No stackallocked arrays of ref classes, but we basically already have this kind of thing as c# doesn't let us do so
Can't be static (well, quite obviously)

This way we can introduce stackallocked internal or maybe even public helpers with hierarchy and polymorphism but at same time safe to stack allocate, and without any kind of language changes while utilizing already existing behavior

As an example:

``

P.S. Done a lot of edits. This is truly a hard one.. My first design was to allow deriving from non ref class but we can't be sure if a method taking in a non ref base won't be using it in a lambda or whatever. Is it even possible to check if class is heap or stack allocated in this case? Basically it's like a ref struct with inheritance.

Anyway, would like to hear your thoughts on this one. </Description>
  </Issue>
  <Issue>
    <IssueID>41458</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>41458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>TryGetSuggestedActionSets does not handle cancellation correctly</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>25/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.5.0 Preview 3.0 [29804.240.master]

The following exception is reported in activity log (info bar is displayed).
``</Description>
  </Issue>
  <Issue>
    <IssueID>41457</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>41457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.NullReferenceException in CSharp.Binder.FixMethodGroupWithTypeOrValue</Title>
    <CreatedDate>06/02/2020</CreatedDate>
    <ClosedDate>10/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>41457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>41457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [WorkItem(718761, "https://devdiv.visualstudio.com/DevDiv/_workitems/edit/718761")]
        [Fact]
        public void WorkItem718761()
        {
            string source = @"
class C1
{
    C2 C2;

    void Test()
    {
        _ = new System.Action(C2.ReferenceEquals);
    }
}

class C2
{
}
";

            var compilation = CreateCompilation(source);

            compilation.VerifyDiagnostics();
        }


Observed:

Microsoft.CodeAnalysis.CSharp.UnitTests.ColorColorTests.WorkItem718761 [FAIL]
  System.NullReferenceException : Object reference not set to an instance of an object.
  Stack Trace:
Binder\Binder_Conversions.cs(547,0): at Microsoft.CodeAnalysis.CSharp.Binder.FixMethodGroupWithTypeOrValue(BoundMethodGroup group, Conversion conversion, DiagnosticBag diagnostics)
Binder\Binder_Expressions.cs(4095,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindDelegateCreationExpression(ObjectCreationExpressionSyntax node, NamedTypeSymbol type, DiagnosticBag diagnostics)
Binder\Binder_Expressions.cs(3971,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindObjectCreationExpression(ObjectCreationExpressionSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Expressions.cs(490,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
Binder\Binder_Expressions.cs(423,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
Binder\Binder_Expressions.cs(230,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindValue(ExpressionSyntax node, DiagnosticBag diagnostics, BindValueKind valueKind)
Binder\Binder_Statements.cs(1391,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Expressions.cs(498,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
Binder\Binder_Expressions.cs(423,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
Binder\Binder_Expressions.cs(230,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindValue(ExpressionSyntax node, DiagnosticBag diagnostics, BindValueKind valueKind)
Binder\Binder_Expressions.cs(236,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindRValueWithoutTargetType(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean reportDefaultMissingType)
Binder\Binder_Statements.cs(615,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(608,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(1691,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(1679,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindBlock(BlockSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(47,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(3239,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)
Binder\Binder_Statements.cs(3187,0): at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
Compiler\MethodCompiler.cs(1681,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, InitialState&amp; forSemanticModel)
Compiler\MethodCompiler.cs(985,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
Compiler\MethodCompiler.cs(511,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
Compiler\MethodCompiler.cs(389,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg)
Symbols\NamedTypeSymbol.cs(575,0): at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument)
Compiler\MethodCompiler.cs(368,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
Compiler\MethodCompiler.cs(154,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
Compilation\CSharpCompilation.cs(2436,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken)
Compilation\CSharpCompilation.cs(2405,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)
Compilation\CSharpCompilation.cs(2313,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
Compilation\CSharpCompilation.cs(2307,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)
agnostics\DiagnosticExtensions.cs(100,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
ntic\Semantics\ColorColorTests.cs(2170,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.ColorColorTests.WorkItem718761()
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>41438</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>41438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Implement `MemberNotNull` nullability attribute</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41438</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [x] Implement compiler feature (PR 
  - [x] open issue: LangVersion behavior (error for attribute used before C# 9)
  - [x] integrate with attributes on local functions
  - [x] ~~migrate UnassignedFieldWalker to use the same method~~
- [x] Add attributes in BCL
  - [x] Create API spec in BCL (issue 
  - [x] Create API in BCL (PR 
- [x] Compile and review backlog of attribute feature requests (column 
- [x] From a virtual `Init` method, if you call `base.Init()`, you will see the base type’s fields as initialized. If you don’t call `base.Init()`, you won’t see the base type’s fields as initialized. I think we would want to give a warning in the latter case (inside `Derived.Init()`) if you try to return without having initialized the fields annotated in `base.Init()`, presumably by calling `base.Init()` itself.
 

Misc notes (LDM 2/5/2020):
- enforced within method bodies and OHI as possible
- allow multiple instances of the attribute
- should solve the `Init` in constructor scenario
- inherited=false
- lookup should work like `DefaultMemberAttribute`
- can only be applied on methods/properties, not on return values or parameters
- no support for dotted names (produce an error for things we don't find or support)
- test with hiding scenario (base type has field, derived type has new field and method with attribute referencing that field)

LDM notes: 

</Description>
  </Issue>
  <Issue>
    <IssueID>41437</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>41437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing warning on returning a maybe-null value to a TNotNull</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>30/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp

#nullable enable
public class C
{
    TNotNull M&lt;TNotNull&gt;(TNotNull t) where TNotNull : notnull
    {
        if (t is null) System.Console.WriteLine();

        return t; // expecting a warning
    }
}
`</Code>
    <Description>``

Note: some references to this issue were added in code. Make sure they are resolved before closing this issue.</Description>
  </Issue>
  <Issue>
    <IssueID>41433</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>41433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0004 'Unnecessary cast' suggestion breaks code</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>41433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
unsafe int Test(IntPtr safePointer)
{
    // Suggests to remove the "int*" cast.
    return ((int*)safePointer)[0];
}

unsafe int Test(IntPtr safePointer)
{
    // Error after using suggestion.
    return safePointer[0];
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---```IntPtr` cannot even be indexed, so this suggestion really breaks code.---### Original Comments#### Visual Studio Feedback System on 2/3/2020, 04:23 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41432</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0004 'Unnecessary cast' suggestion breaks code</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
unsafe int Test(IntPtr safePointer)
{
    // Suggests to remove the "int*" cast.
    return ((int*)safePointer)[0];
}

unsafe int Test(IntPtr safePointer)
{
    // Error after using suggestion.
    return safePointer[0];
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---```IntPtr` cannot even be indexed, so this suggestion really breaks code.---### Original Comments#### Visual Studio Feedback System on 2/3/2020, 04:23 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41428</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate constructor incorrectly adds null checks for nullable propeties in c#8</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>10/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Foo
{
  public string Prop1 {get;}
  public string? Prop2 {get;}
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
If you declare an immutable class in c# 8 with explicit nullable references enabled:

``

And then choose the quick action to generate a constructor with the "Add null checks" checkbox ticked, it creates a constructor that adds null checks for both Prop1 and Prop2.

When a property is explicitly marked nullable as Prop2 is above, I think the generated constructor shouldn't include null checks for it.

---
### Original Comments

#### Visual Studio Feedback System on 2/3/2020, 02:59 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41425</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Regex "{}" triggers an error in highlighting</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>13/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41425</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41425</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41425</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>41425</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>41425</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---The simple regex``Triggers an error because the highlight expects a digit. But actually this is a valid regex matching "{}" litteraly.---### Original Comments#### Visual Studio Feedback System on 1/28/2020, 03:18 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8602 should consider Assert.NotNull in unit tests</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>41422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>41422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
[Fact]
public void AppendData()
{
    var div = Element.Create("div");
    var builder = new LaraBuilder(div);
    builder.AppendData("a&lt;a");
    var node = div.GetChildAt(0) as TextNode;
    Assert.NotNull(node);
    Assert.Equal("a&lt;a", node.Data);
}
`</Code>
    <Description>**Version Used**: 
NET Core 3.1

source repository available [here](

**Steps to Reproduce**:
The following unit test yields the warning that `node` variable in the last line may be null:

``

**Expected Behavior**:

The line before it tests for `Assert.NotNull` thus thereafter the variable isn't null.

**Actual Behavior**:

The compiler yields a warning that `node` may be null in the last line.
</Description>
  </Issue>
  <Issue>
    <IssueID>41420</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Implement abstract class through field' for parity with interface implementation feature</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>41420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
/* 🛠 Implement interface through 'reader'
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ */
class Foo : IDataReader
{
    private readonly IDataReader reader;
}

// No help 😥
class Goo : DbDataReader
{
    private readonly DbDataReader reader;
}
`</Code>
    <Description>**Version Used**: VS 16.4.4

``

Writing delegating member implementations is a soul-crushing chore even when there is only one member. DbDataReader has a lot of members.

(ReSharper has this feature)

💡 Another thing that would be super useful for things like Stream and DbDataReader is to be pushed in the direction of delegating not just abstract members but all virtual members. Otherwise you get e.g. the default base ReadAsync implementation wrapping Read poorly rather than delegating ReadAsync to the field's ReadAsync method. (I don't think ReSharper has this.)

How about:

Implement abstract class through 'fieldname' &gt;
 - All overridable members
 - Only abstract members</Description>
  </Issue>
  <Issue>
    <IssueID>41410</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty throws in CI</Title>
    <CreatedDate>05/02/2020</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>41410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>41410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; Xunit.Sdk.ContainsException: Assert.Contains() Failure
Not found: Me.SomeButton.Text = "NewButtonText"
In value:  &lt;Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()&gt; _
Partial Class Form1
    Inherits System.Windows.Forms.Form

    'Form overrides dispose to clean up the component list.
    &lt;System.Diagnostics.DebuggerNonUserCode()&gt; _
    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        Try
            If disposing AndAlso components IsNot Nothing Then
                components.Dispose()
            End If
        Finally
            MyBase.Dispose(disposing)
        End Try
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
    Private Sub InitializeComponent()
        components = New System.ComponentModel.Container()
        Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font
        Me.ClientSize = New System.Drawing.Size(800, 450)
        Me.Text = "Form1"
    End Sub

End Class

   at Xunit.Assert.Contains(String expectedSubstring, String actualString) in C:\projects\xunit\src\xunit.assert\Asserts\StringAsserts.cs:line 22
   at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicWinForms.ChangeControlProperty() in /_/src/VisualStudio/IntegrationTest/IntegrationTests/VisualBasic/BasicWinForms.cs:line 78
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task).GetType().Name
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 150
   at Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:line 257
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() in C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:line 48
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>41402</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>41402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Operation block start callback not made in IDE analyzer execution</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>41402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>41402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41402</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        [DiagnosticAnalyzer(LanguageNames.CSharp, LanguageNames.VisualBasic)]
        public sealed class RegisterOperationBlockAndOperationActionAnalyzer : DiagnosticAnalyzer
        {
            private static readonly DiagnosticDescriptor s_descriptor = new DiagnosticDescriptor(
                "ID0001",
                "Title",
                "Message",
                "Category",
                defaultSeverity: DiagnosticSeverity.Warning,
                isEnabledByDefault: true);

            public override ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics =&gt; ImmutableArray.Create(s_descriptor);
            public override void Initialize(AnalysisContext analysisContext)
            {
                analysisContext.RegisterOperationAction(_ =&gt; { }, OperationKind.Invocation);
                analysisContext.RegisterOperationBlockStartAction(OnOperationBlockStart);
            }

            private void OnOperationBlockStart(OperationBlockStartAnalysisContext context)
            {
                context.RegisterOperationBlockEndAction(
                    endContext =&gt; endContext.ReportDiagnostic(Diagnostic.Create(s_descriptor, context.OwningSymbol.Locations[0])));
            }
        }
`</Code>
    <Description>If an analyzer registers both an OperationAction and an OperationBlockStartAction on the same context, the block start action is never getting invoked in IDE analyzer execution.

For example, consider the below analyzer:

``

This analyzer never gets the OperationBlockStartAction callback when executed in the IDE, but it works fine in command line case.</Description>
  </Issue>
  <Issue>
    <IssueID>41395</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Include compiler switches in the PDB</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>08/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41395</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The goal is to include enough information in the PDB so that a consumer could fully reconstruct the original compilation based on the information stored in the PDB, the assembly metadata, symbol and source servers and any private keys used to build the assembly.

We assume the binaries were build with `/deterministic` and Source Link. All dependencies of the compilation must have been published to the symbol server.

There are several scenarios that could use this feature, each might need slightly different information in the PDB. One of the main scenarios is being able to run Roslyn analyzers on source of 3rd party OSS libraries. As long as the libraries were build with above assumptions it should be possible to recreate and analyze the original compilation without rebuilding the library from its source repository and injecting the analyzer into such build.

Information required to create a compilation comprises of:

#### source files

Available via [Source Link]( or embedded in the PDB.

#### metadata references

The assembly metadata only contain assembly identities, which is not sufficient.

Proposal: Include an id of the assembly that can be used to look the assembly up on the symbol server.

Symbol servers currently index PE files using a [key]( that combines the _timestamp_ and _file size_ found in PE COFF header. 

When the assembly is built with `/deterministic` the _timestamp_ is 4B slice of the assembly content hash. 

Depending on how this feature is used this kind of id might be considered too weak. If so we should consider updating symbol uploaders to index PE files with an MVID in addition to the existing key.

#### analyzer references

Although analyzers do not affect the compiler output files it might be useful for some scenarios to store the list of analyzer references in the same way that metadata references would be stored.

For example, as a proof that certain rules were validated during the build and do not need to be validated again.

If we include analyzer references we would need to include additional files as well. Including content of these files might bloat the PDB, so we would probably want to use Source Link for those files that are checked into the repo. This would however required an update to Source Link to account for these files when building a list of source-control-untracked files.

All assemblies that analyzers depend on would also need to be captured.

The added value doesn't seem worth the effort.

#### source generator references

Source generator references would be included in the same format as metadata references.

Since all source files that source generators may generate are embedded in the PDB while the files that are the inputs to the generators are not (at least not currently), it doesn't seem useful to store source generator references to the PDB.

#### resources

Resources are stored in the PE file. It should be possible to extract them from there and include them in the new compilation.

#### primitive value options

Options that have primitive values can be easily serialized to a string and included in the PDB.

Note that `PathMap` must be excluded in order for the PDB content to stay deterministic. The information in the map is not needed when reconstructing the compilation since the paths extracted from the DLL/PDB have already been mapped.

#### default source encoding

The encoding used to interpret content of source files that do not declare their encoding via BOM.

#### signing keys

Public key is included in the `AssemblyDef`. Private key is not, for obvious reasons, and has to be supplied externally.

#### the compiler version

The version of the compiler used to build the assembly. We might also need the version of the CLR and the zlib library in order to reproduce the build outputs bit-for-bit. See 
</Description>
  </Issue>
  <Issue>
    <IssueID>41393</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ability to port Rule Sets to EditorConfig </Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>09/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>41393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>41393</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41391</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8019 doesn't work during compilation</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>41391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
- dotnet --version: 3.1.100
- VS Enterprise 16.4.0

**Steps to Reproduce**:
1. Create new Class Library (.NET Framework) project.
2. Edit Active Rule Set and make CS8019 (Unnecessary using directive) an 'Error'.
3. Compile project and/or run "dotnet build"

**Expected Behavior**:
Given that the project starts with a Class1.cs file containing unused using directives, compilation should fail.

**Actual Behavior**:
Compilation succeeds. The VS UI does show the IntelliSense error, however. dotnet build shows no warnings and no errors.

[ConsoleApp4.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>41390</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect IDE0004 when upcasting 'this'</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>41390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I tried to find an existing issue for this bug, but due to the sheer number of IDE0004 I gave up. Should this be a duplicate, feel free to close this, and sorry for the noise.

in a `struct`:
``
The cast is obviously not unnecessary. It's vital, to not exhaust process stack faster than you can say "What happened?".</Description>
  </Issue>
  <Issue>
    <IssueID>41388</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How can i disable xml document generation in c# project</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>04/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>41388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>41388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual studio 2019 16.4.4
**Steps to Reproduce**:

1. add `&lt;GenerateDocumentation&gt;false&lt;/GenerateDocumentation&gt;` to a csproj file
2. clieck build
3. document always generated

**Expected Behavior**:
How can i disable xml document generation ?
</Description>
  </Issue>
  <Issue>
    <IssueID>41387</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>41387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[loc][Query][Roslyn] Localizability of 0; "DocumentIsOutOfSyncWithDebuggee"</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>25/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>41387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Globalization</Name>
        <IssueID>41387</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
The current content of source file '{0}' does not match the built source. Any changes made to this file while debugging won't be applied until its content matches the built source.

File Name:
Features\Core\Portable\xlf\FeaturesResources.xlf

==========================================
Query:
Does "built source" mean "compiled source code"?

Affected IDs:
0; "UnableToReadSourceFileOrPdb"
Unable to read source file '{0}' or the PDB built for the containing project. Any changes made to this file while debugging won't be applied until its content matches the built source.

Q2: Containing what? The source file or PDB?
</Description>
  </Issue>
  <Issue>
    <IssueID>41386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>41386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[loc][Query][Roslyn] Localizability of 0; "ERR_AssgReadonly"</Title>
    <CreatedDate>04/02/2020</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>41386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Globalization</Name>
        <IssueID>41386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
A readonly field cannot be assigned to (except in a constructor of the class in which the field is defined or a variable initializer))

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
can the sentence be rephrased as "A readonly field cannot be assigned (...)", as the object the field can not be assigned to does not exist?</Description>
  </Issue>
  <Issue>
    <IssueID>41058</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract Method not correctly inferring a local can be made non-null</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>26/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used:** 3.5.0-beta3-20063-01+1f921815c4544e703bf721cb8e6c86d5cf6bda63

1. Paste the following code into a C# 8.0 file:

``

2. Select the "a.ToString()" and extract method

**Expected:** the parameter in the method created is of type 'string', since a was known to be not-null at the point of use.
**Actual:** the parameter in the method created is still of type string?, which means this introduces a nullable warning that shouldn't be there.</Description>
  </Issue>
  <Issue>
    <IssueID>41054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Argument capture in Binder.BindToNaturalType produces high allocations</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following `SelectAsArray` lambda forces the arguments of `BindToNaturalType` into a capture, even for majority code paths that do not reach this line of code. AnalyzerRunner shows a gain of over 2GB for scenario #26778 by eliminating the fast-path capture in this method.

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41054</IssueID>
        <PullRequestID>41055</PullRequestID>
        <Title>Remove capturing lambda from binding hot path</Title>
        <Description>Capturing lambdas should be avoided in core compiler code due
to allocation pressure. This call site has been shown up in a trace.

Fixes #41054</Description>
        <CreatedDate>17/01/2020</CreatedDate>
        <ClosedDate>17/01/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41054</IssueID>
            <PullRequestID>41055</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41053</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter doesn't seem to work on first attempt</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>41052</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Code Review Feedback</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>29/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Manual Test Passes</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41048</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Address all UX feedback</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>29/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41047</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Polish Completion experiences or make binding indicator</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [ ] Invoking completion in an empty textbox shows only keywords
- [x] Filling out Parameter Name before Type Name causes types to appear there</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41047</IssueID>
        <PullRequestID>38748</PullRequestID>
        <Title>Change Signature - Add parameter</Title>
        <Description>Updates the existing Change Signature dialog to allow for the adding of a required parameter (in addition to the existing reorder/remove capabilities). Optional parameters will come as a later update.

The updated Change Signature dialog includes the new "Add" button, as well as two new columns in the datagrid. The "Index" column shows which parameters are new, as well as the original index of preexisting parameters. The "Call site" column shows what value will be put into call sites for this new parameter.

![image](

And here is the new Add Parameter dialog itself:

![image](

The first two fields both have completion enabled.

TODO for this PR:
- [x] Manual test pass [D &amp; M]
- [x] UI
    - [x] VB support [A]
        - [x] Preview
        - [x] `Name` field shouldn't have completion (in VB only)
    - [x] Design of completion list text boxes [I+J]
    - [x] UX Review
    - [x] Accessibility [D]
        - [x] Add Parameter dialog
        - [x] Change Signature dialog updates
- [x] Engine
    - [x] Update engine for required parameters (C# &amp; VB) [I]
    - [x] Hook up the simple "TODO" case
- [x] Most Tests
    - [x] Fix broken unit tests [I]
    - [x] Add new engine unit tests [I]
        - [x] C# unit tests
           - [x] Similar to reorder tests
           - [x] Similar to reorder cascading tests
           - [x] Formatting tests
           - [x] Delegates tests
        - [x] VB unit tests

Pre-Dogfood:
- [x] UI
    - [x] Backspacing too much crashes [D] -- PR to Editor pending
- [ ] Further testing
    - [ ] Unit testing of elision buffer creation
    - [ ] Update integration tests [A]
    - [ ] Add UI unit tests (when supporting optional parameters) [D]
- [ ] Optional Parameters (Larger UI + Engine updates)
- [ ] Engine
    - [ ] Type binding in all contexts, Expand/Reduce namespace/imports (?)

16.6P1:
- [ ] UI
    - [ ] Consider the C# UI bug when filling out name before type [A]
    - [ ] Meet UX expectations
- [ ] Change VS menu from `Remove/Reorder Parameters` to `Change Signature` [work with editor]
- [ ] Engine
    - [ ] Handle multiple TODOs
</Description>
        <CreatedDate>18/09/2019</CreatedDate>
        <ClosedDate>26/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-CodeStyle</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41046</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Correctly handle Types in the engine by qualifying or adding usings where necessary.</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41046</IssueID>
        <PullRequestID>42808</PullRequestID>
        <Title>Change Signature - Add Parameter -- Part 1</Title>
        <Description>Another attempt at  but this time with the correct target release (16.7-preview1).</Description>
        <CreatedDate>26/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>41046</IssueID>
            <PullRequestID>42808</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41045</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Implement Optional Parameters</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Very early thinking/prototyping is something like this:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>41043</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add Parameter Unit Testing - View Model interactions</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter Integration Testing</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41041</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter crashes when backspacing or invoking completion on empty text box</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41040</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS8601 false positive</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#### Analyzer package

I suppose Microsoft.CodeQuality.CSharp.Analyzers

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

CS8601	Possible null reference assignment.

#### Repro steps
``
#### Expected behavior
CS8601 shouldn't happen

#### Actual behavior
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>41038</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Static Extension Methods are not returned by the completion service</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
3.4.0

**Steps to Reproduce**:
I am testing the CompletionService. It should allow me to see the Linq extension methods on an array, but I do not see them. Here is the code:

        static void Main(string[] args)
        {
            string code = @"using System;
            using System.Linq;

           namespace RoslynCompletionTests
           {
                 public static class MyTestClass1
                 {
                       public static void Print()
                       {
                              int[] array = {1,2,3,4,5,6};

                              var result = array.Select(i =&gt; new { I = i }).Select(v =&gt; v.I);
                       }
                 }
           }";
            var host = MefHostServices.Create(MefHostServices.DefaultAssemblies);
            
            Type[] types =
            {
                typeof(object),
                typeof(Enumerable),
                typeof(IEnumerable),
                typeof(Console),
                typeof(Assembly),
                typeof(List&lt;&gt;),
                typeof(Type)
            };

            ImmutableArray&lt;string&gt; imports = types.Select(x =&gt; x.Namespace).Distinct().ToImmutableArray();

            ImmutableArray&lt;MetadataReference&gt; references =
                types.Select(t =&gt; MetadataReference.CreateFromFile(t.Assembly.Location) as MetadataReference)
                     .ToImmutableArray();

            AdhocWorkspace workspace = new AdhocWorkspace(host, "Custom");

            string name = "MyTestProj";

            ProjectId id = ProjectId.CreateNewId(name);

            ParseOptions parseOptions = new CSharpParseOptions();

            CompilationOptions compilationOptions =
                new CSharpCompilationOptions
                (
                    OutputKind.DynamicallyLinkedLibrary,
                    usings: imports,
                    allowUnsafe: true);

            ProjectInfo projInfo =
                ProjectInfo.Create
                (
                    id,
                    VersionStamp.Create(),
                    name,
                    name,
                    LanguageNames.CSharp,
                    parseOptions: parseOptions,
                    compilationOptions: compilationOptions,
                    metadataReferences: references);

            Project proj = workspace.AddProject(projInfo);

            SourceText text = SourceText.From(code);

            Document doc = proj.AddDocument("MyDoc.cs", text);

            SemanticModel semanticModel = doc.GetSemanticModelAsync().Result;

            CompletionService completionService = CompletionService.GetService(doc);

            string strToFind = "array.";
            int idx = text.ToString().IndexOf(strToFind) + strToFind.Length;

            var results = completionService.GetCompletionsAsync(doc, idx).Result;
        }

The results contain only 24 items and no Linq extension methods whatsoever. 
**Expected Behavior**:
Need to see the extension methods, e.g. Where&lt;&gt;(...), Select&lt;...&gt;(...) etc.

**Actual Behavior**:
it returns no extension methods - only public methods and properties defined on the class. </Description>
  </Issue>
  <Issue>
    <IssueID>41029</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[LSP] Diagnostic squiggles don't appear for client until edits are made</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro - Have a file with diagnostic errors / warning / info in a sln.  Open the file as a liveshare guest.  Notice that squiggles are missing until an edit is made.

This is likely because joining a liveshare session and opening the document on the client will not trigger the server to recompute diagnostics -  

Likely need some way to force publish when the client opens the document.</Description>
  </Issue>
  <Issue>
    <IssueID>41027</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# override completion left compile errors due to unqualified parameter types</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
namespace NerdBank.Algorithms.NodeConstraintSelection
{
	using System;
	public class BrokenConstraintException : InvalidOperationException
	{
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			base. GetObjectData(info, context);
		}
	}
}

`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Within an Exception-derived class, I typed `public override GetObj` and pressed TAB. Instead of fully-qualifying the parameter type names or adding the necessary `using`, C# just added the simple type names which did not resolve in the current file, leaving compile errors. ``See two screenshots.---### Original Comments#### Visual Studio Feedback System on 12/26/2019, 00:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 12/27/2019, 01:05 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41022</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Formatter should have an opinion on spacing of attributes on parameters</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>24/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should it be `[MaybeNull]string parameter` or `[MaybeNull] string parameter`?

FWIW, I prefer with a space.</Description>
  </Issue>
  <Issue>
    <IssueID>41013</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Escape quotes when pasting into verbatim string C#</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>16/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When pasting into a verbatim string (@""), if the pasted contents contain quotes (such as in a JSON or XML snippet), it would be really nice to automatically escape that content.  For example:string sample = @"";&lt;paste text:&gt; { "foo": "bar" }**Desired:**string sample = @"{ ""foo"": ""bar"" }";**Currently:**string sample = @"{ "foo": "bar" }"; // and a slew of syntax errors to fix up...---### Original Comments#### Visual Studio Feedback System on 1/14/2020, 00:24 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>41009</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>TryGetTagIntervalTreeForBuffer InvalidOperationException on Startup</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Version 16.5.0 Preview 3.0 [29715.144.master]

**Steps to Reproduce**:

1. Open Compilers.sln or Roslyn.sln

**Expected Behavior**:

No exceptions.

**Actual Behavior**:

``

Dump saved at: `\\mlangfs1\public\frsilb\dumps\41009\devenv.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>41008</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"use var" and the change to var nullable inference needs design</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In #40755 the compiler is changing the behavior of var, where it always infers a nullable type so further assignments can be made to it. How this interacts with "use var" is unclear. There are at least two classes of people:

1. People who just want to use var and let the compiler figure things out, they don't care what the nullability of local variables.
2. People who want to use var, but also want to be able to state that certain local variables are non-null to get warnings immediately if somebody assigns a potentially null value to it, rather than seeing warnings later.

These are somewhat at odds of each other. If a developer has "string s = SomethingThatReturnsANonNullableString()", the developer in the first category would happily change that to var. A developer in the second category however might have intentionally wrote "string" because they _didn't_ want this new var behavior and we're stomping over that. Right now the answer from the LDM is "if you want to be explicit about non-null, be explicit about the type", and if that's the answer the IDE needs a way to respect that.

My initial gut was the IDE just shouldn't suggest to use "var" if the stated type is non-nullable, but that's problematic if you are a person in category 1.</Description>
  </Issue>
  <Issue>
    <IssueID>41001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Quick Fix suggests wrong code if 'Convert to conditional expression' is applied on conditional expressions (C#)</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---'Quick fix' suggests/produces wrong code if 'Convert to conditional expression' is applied on conditional expressions: '()' is missing:class Program    {        static void Main()        {            var data1 = new Data()            {                InnerData2 = new InnerData()                {                    InnerMember = "inner member",                },            };            var data2 = new Data()            {                InnerData2 = new InnerData()                {                    InnerMember = "inner member",                },            };// data1. InnerData1 and data1. InnerData1 is null -&gt; ValueEquals() should return 'true'            Console.WriteLine($"Result is '{data1. ValueEquals(data2)}' but should be '{data1. ValueEqualsOrg(data2)}'");            // console shows: Result is 'False' but should be 'True'        }    }class Data    {        public InnerData InnerData1;        public InnerData InnerData2;// two instances are equal if         // - InnerData1 of instance and other are both null or InnerData1.InnerMember of instance and other are equal         // - InnerData2 of instance and other are both null or InnerData2.InnerMember of instance and other are equal         public bool ValueEquals(Data other) // refactored from ValueEqualsOrg()        {            return other == null                ? false                : InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1) // &lt;- missing '()' !!                ? false                : ! (InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2));// should be:            // return other == null            //     ? false            //     : (InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1)) // &lt;- '()' added            //     ? false            //     : ! (InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2));        }public bool ValueEqualsOrg(Data other) // this method has been refactored with 'Convert to conditional expression'        {            if ( other == null )            {                return false;            }            if ( InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1) )            {                return false;            }            if ( InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2) )            {                return false;            }            return true;        }    }class InnerData    {        public string InnerMember;        public bool ValueEquals(InnerData other)        {            if ( other == null )                return false;            if ( InnerMember != other. InnerMember )                return false;            return true;        }    }Regards---### Original Comments#### Visual Studio Feedback System on 1/14/2020, 00:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40992</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extension method dereferences don't change the `this` object state</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>15/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
namespace ClassLibrary1
{
    public class Class1
    {

        static void M(Class1? c)
        {
            if (c.Test()) // Warn: dereference
            {
            }
            else if (c.Test()) // Warn: dereference
            {
            }
        }
    }

    public static class Class1Extensions
    {
        public static bool Test(this Class1 c) =&gt; false;
    }
}
`</Code>
    <Description>``

If `Test` was an instance method instead of an extension method, we'd only warn on the first invocation.</Description>
  </Issue>
  <Issue>
    <IssueID>40989</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Liveshare - NavBar is empty</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>21/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>CloudEnv</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>16.5P2

In liveshare scenarios, the local roslyn navbar dropdown is usually overriding the LSP client navbar and hiding it.  Since the navbar service isn't running on the client, the roslyn navbar is empty.

Short term -
Don't add the navbar for liveshare content types.  This won't work long term and depends on the content type switching happening first,

Long term -
We should just switch to LSP for the navbar as soon as project context support is added.</Description>
  </Issue>
  <Issue>
    <IssueID>40986</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cache warnings on disk, and re-display on re-build</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels />
    <Code>shell
dotnet --info
.NET Core SDK(global.json 반영):
 Version:   3.1.100
 Commit:    cd82f021f4

런타임 환경:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]


**Steps to Reproduce**:

1. Make a new project
shell
dotnet new console --name TestWarn

2. Edit `Program.cs`

using System;

namespace TestWarn
{
    class Program
    {
        static void Main(string[] args)
        {
            var x = 0;
        }
    }
}

3. Build twice
First build:
shell
dotnet build
Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 29.64 ms for /.../TestWarn/TestWarn.csproj.
Program.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]
  TestWarn -&gt; /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll

Build succeeded.

Program.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]
    1 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.98

You get warnings.

Second build:
shell
dotnet build
Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 32.44 ms for /.../TestWarn/TestWarn.csproj.
  TestWarn -&gt; /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:00.88

You don't get warnings.

**Expected Behavior**:
You get warnings again when you re-build like Rust's Cargo.
If you do the exact same thing on Rust (with Cargo &gt;= 1.40), you can get warnings twice, even though it builds incrementally.

shell
cargo new test-warn
cd test-warn
cat &lt;&lt;EOF &gt; src/main.rs
fn main() {
   let x = 0;
}
EOF

shell
cargo build    
   Compiling test-warn v0.1.0 (/.../test-warn)
warning: unused variable: `x`
 --&gt; src/main.rs:2:9
  |
2 |     let x = 0;
  |         ^ help: consider prefixing with an underscore: `_x`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.23s

cargo build
warning: unused variable: `x`
 --&gt; src/main.rs:2:9
  |
2 |     let x = 0;
  |         ^ help: consider prefixing with an underscore: `_x`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
`</Code>
    <Description>**Version Used**: 
``
Carog changelog: 

I prefer to separate the build step and the lint step for CI. `dotnet clean` between the steps won't be necessary if we cache warnings. I could make a workaround by saving the output and `grep`-ing it though, but this is a little bit fragile.</Description>
  </Issue>
  <Issue>
    <IssueID>40981</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.exe returns exits code -2146232797 without messages</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
namespace Namespace
{
  public interface IInterface
  {
    (Type, Type)[] GetTypeTuples();
  }
}

and `lib.cs` should contain:

using System;
using System.Linq;

namespace Namespace
{
  public class Class
  {
    private void Method(IInterface inter, Func&lt;(Type, Type), string&gt; keySelector)
    {
      var tuples = inter.GetTypeTuples();
      IOrderedEnumerable&lt;(Type, Type)&gt; ordered = tuples.OrderBy(keySelector);
    }
  }
}


Then run:

csc.exe /target:library /out:interface.dll interface.cs
csc.exe /target:library /reference:interface.dll /out:lib.dll lib.cs

The last command fails, meaning that no library is produced and `csc.exe` returns the exit code `-2146232797`.

**Expected Behavior**:
I would expect `lib.dll` to be produced and `csc.exe` returning the exit code 0.

**Actual Behavior**:
No library is produces from the command

csc.exe /target:library /reference:interface.dll /out:lib.dll lib.cs

and `csc.exe` returns the exit code `-2146232797`.

**Notes:**
It it important that the interface is placed in a separate assembly, meaning that the command:

csc.exe /target:library /reference:interface.dll /out:lib.dll interface.cs lib.cs

succeeds as expected.

Moreover, removing the line:

IOrderedEnumerable&lt;(Type, Type)&gt; ordered = tuples.OrderBy(keySelector);

_or_ changing the `var` in

var tuples = inter.GetTypeTuples();

to `(Type, Type)[]` will both make compilation succeed.

After failing, the following stacktrace can be found the in eventlog:

Application: csc.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypeArguments(NamedTypeSymbol typeA, NamedTypeSymbol typeB, VarianceKind variance, ArrayBuilder`1 allTypeParameters, ArrayBuilder`1 allTypeArguments)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypes(TypeSymbol other, VarianceKind variance)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations.MergeEquivalentTypes(TypeWithAnnotations other, VarianceKind variance)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.AddAllCandidates(Dictionary`2 candidates, HashSet`1 bounds, VarianceKind variance, ConversionsBase conversions)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(HashSet`1 exact, HashSet`1 lower, HashSet`1 upper, HashSet`1&amp; useSiteDiagnostics, ConversionsBase conversions)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(Int32 iParam, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.FixParameters(Func`3 predicate, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.DoSecondPhase(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgsSecondPhase(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgs(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Infer(Binder binder, ConversionsBase conversions, ImmutableArray`1 methodTypeParameters, NamedTypeSymbol constructedContainingTypeOfMethod, ImmutableArray`1 formalParameterTypes, ImmutableArray`1 formalParameterRefKinds, ImmutableArray`1 arguments, HashSet`1&amp; useSiteDiagnostics, Extensions extensions)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.InferMethodTypeArguments(MethodSymbol method, ImmutableArray`1 originalTypeParameters, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, MemberAnalysisResult&amp; error, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray`1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, BoundExpression receiverOpt, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary`2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet`1&amp; useSiteDiagnostics, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[TMember](ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, BoundExpression receiver, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, RefKind returnRefKind, TypeSymbol returnType, Boolean allowRefOmittedArguments, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExtensionMethod(SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, BoundExpression left, ImmutableArray`1 typeArgumentsWithAnnotations, Boolean isMethodGroupConversion, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(BoundMethodGroup methodGroup, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(BoundMethodGroup node, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm, Boolean&amp; anyApplicableCandidates)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer(ExpressionSyntax node, TypeSymbol destinationType, BindValueKind valueKind, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeWithAnnotations declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, Boolean includeBoundType, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, InitialState&amp; forSemanticModel)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypeArguments(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.VarianceKind, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypes(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VarianceKind)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations.MergeEquivalentTypes(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.VarianceKind)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.AddAllCandidates(System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.VarianceKind, Microsoft.CodeAnalysis.CSharp.ConversionsBase)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Microsoft.CodeAnalysis.CSharp.ConversionsBase)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(Int32, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.FixParameters(System.Func`3&lt;Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer,Int32,Boolean&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.DoSecondPhase(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgsSecondPhase(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgs(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Infer(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.ConversionsBase, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Extensions)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.InferMethodTypeArguments(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, EffectiveParameters, Microsoft.CodeAnalysis.CSharp.MemberAnalysisResult ByRef, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, EffectiveParameters, EffectiveParameters, System.Collections.Immutable.ImmutableArray`1&lt;Int32&gt;, Boolean, Boolean, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Boolean, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.MemberResolutionResult`1&lt;System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Boolean, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;&gt;, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.MemberResolutionResult`1&lt;System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExtensionMethod(Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.CSharp.BoundExpression, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Boolean, Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, BindValueKind, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind, Boolean, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.ImportChain ByRef, Boolean ByRef, InitialState ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>**Version Used**: 
16.4.29709.97

**Steps to Reproduce**:
Create two files, `interface.cs` and `lib.cs`, with the following content. The file `interface.cs` should contain:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40976</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Show items from unimported namespaces" and "resolve usings" inserts imports in wrong location when "inside_namespace"</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>29/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[*.cs]
csharp_using_directive_placement = inside_namespace:error
 

 C#
namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    internal class SolutionExplorerService
    {
        private Lazy&lt; // &lt;!-- Resolve using

        public SolutionExplorerService()
        {
        }
    }
}


**Expected Behavior**:
 C#
namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    using System;

    internal class SolutionExplorerService
    {
        private Lazy&lt;

        public SolutionExplorerService()
        {
        }
    }
}



**Actual Behavior**:
 C#
using System;

namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    internal class SolutionExplorerService
    {
        private Lazy&lt;

        public SolutionExplorerService()
        {
        }
    }
}

`</Code>
    <Description>**Version Used**: 
Version 16.5.0 Preview 3.0 [29714.123.master]

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40975</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should not warn on null default value on [AllowNull] parameter</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void AllowNull_Parameter_NullDefaultValue()
        {
            var source =
@"using System.Diagnostics.CodeAnalysis;
public class C
{
    void M([AllowNull] string p = null) { }
}
";

            var comp = CreateNullableCompilation(new[] { AllowNullAttributeDefinition, source });
            // Note: fixing this was tricky as it involved a cycle (FlowAnnotations, attribute decoding, default value)
            comp.VerifyDiagnostics(
                // (4,35): warning CS8625: Cannot convert null literal to non-nullable reference type.
                //     void M([AllowNull] string p = null) { }
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(4, 35)
                );
        }
`</Code>
    <Description>Follow-up on 

``</Description>
  </Issue>
  <Issue>
    <IssueID>40967</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>y87feng</FixedById>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Introduce explicit downcast refactoring if a variable requires a cast to compile</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>11/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C {}
class D : C {}
void doSomething(D d);
C returnC();


1.  types mismatch: `int` cannot be converted to `string`
csharp 
string foo()
{
    return 1[||];
}

Results in `no refactoring`

2. assignment with constructor
csharp
D d = [|new C()|];

Results in
csharp
D d = (D)new C();


3. assignment with object creation expression - don't add cast except there is an explicit cast operator
csharp
C c = new D();
D d = c[||];

Results in `no refactoring`

4. assignment with method return value
csharp
D d = r[||]eturnC();

Results in
csharp
D d = (D)returnC();


5. variable passed as method parameter
csharp
doSomething([||]c);

Results in
csharp
doSomething((D)c);

6. return variable with implicit cast
csharp
D returnD()
{
         C c;
         return [||]c;
}

Results in
csharp
D returnD()
{
         C c;
         return (D)c;
}


7. return the return value of another method
csharp
D returnD_func() {
    return [||]returnC();
}

Results in
csharp
D returnD_func() {
    return (D)returnC();
}


8. pass the return value of the method as parameter
csharp
doSomething([||]returnC());

Results in
csharp
doSomething((D)returnC());


9. the argument of base constructor
csharp
class Test {
    public Test(D d) {}
}
class Derived_Test : Test  {
    public Derived_Test (C c) : base([||]c) {}
}

C c;
Derived_Test dt = new Derived_Test(c);

Results in
csharp
class Test {
    public Test(D d) {}
}
class Derived_Test : Test  {
    public Derived_Test (C c) : base((D)c) {}
}

C c;
Derived_Test dt = new Derived_Test(c);


Consider cases:

10. have multiple choices
csharp
class E : D {}
void doSomething(D d);
void doSomething(E e);

C c;
doSomething([||]c);


11. already have a cast
csharp
class E : D {}
// void doSomething(D d);
void doSomething(E e);

C c;
doSomething([||](D)c);


12. generic type
csharp
Func&lt;C, C&gt; func = d =&gt; d;
Func&lt;D, D&gt; func2 = [||]func1;
`</Code>
    <Description>If a variable requires a cast to make it compile, add a refactoring that will introduce cast refactoring #33533
Error code: CS0266, CS1503

**Add explicit downcast**: 
context code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40964</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Hang during shutdown in Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.UnregisterGlobalOperationNotifications</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>06/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.5.29707.192 built by: MASTER

This is a random hang I hit during shutdown. The UI was already closed I think but it seems we deadlocked somehow shutting down the OOP process:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40957</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>New not null syntax "is {}" vs "!= null" for structs</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
DateTime? date = null;

if ((new Random().Next(3) == 2))
{
    date = DateTime.Today;
}

if (date != null)
{
    DateTime bar = date.Value;
    Console.WriteLine("Date is " + date + "-" + bar);
}

if (date is {})
{
    DateTime bar = date.Value;  // &lt;- warning here
    Console.WriteLine("Date is " + date + "-" + bar);
}
`</Code>
    <Description>**Version Used**: C# 8, .NET Core 3.1

**Steps to Reproduce**:

When using a nullable struct (for example Datetime?) the IDE shows a `Possible System.InvalidOperationException` warning when inside an "if (something is {})" block.

``
![image](

**Expected Behavior**:

Both "if" statements should behave the same way; no warning on he second "if".

**Actual Behavior**:

The IDE shows a warning, although the program seems to run correctly.</Description>
  </Issue>
  <Issue>
    <IssueID>40956</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inaccurate IDE0051 Messages</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Using this code:IDE0051 messages occur that state the methods in the class are not used, when in fact, they are.---### Original Comments#### Visual Studio Feedback System on 1/5/2020, 11:57 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 1/13/2020, 11:24 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40931</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Change Signature dialog: Selected item jumps out of view when argument list is long</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>09/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When using the "Change signature" refactoring on a method with a long argument list (so that the arguments do not fit on one page of the list box in the dialog), the list box scrolls back to the first page when selecting one of the last items by mouse.### Steps to reproduce:1. Create new C# Console App (,NET Framework 4.7.2).2. Add the following code to the Program class:``3. Start the "Change signature" refactoring on the "Test" method.4. Scroll the parameters list fully down using the mouse.5. Click on the last item, "int arg10".Expected behavior: The last item is selected and the scroll position of the list remains unchanged.Actual behavior: The last item is selected and the list scrolls back up, causing the selected item to become invisible.---### Original Comments#### Visual Studio Feedback System on 1/12/2020, 10:54 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40926</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuild parameter -p:RunAnalyzers=false is ignored</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>10/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>shell
dotnet --info
.NET Core SDK(global.json 반영):
 Version:   3.1.100
 Commit:    cd82f021f4

런타임 환경:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]


**Steps to Reproduce**:

1. Make a project
shell
dotnet new console --name test-dotnet-run-analyzers

2. Add a bunch of analyzers
shell
dotnet add package Microsoft.CodeAnalysis.FxCopAnalyzers
dotnet add package StyleCop.Analyzers

3. Build with `-p:RunAnalyzers=false`
Korean characters are mixed in the build output but I think you can get the point.
shell
dotnet build -p:RunAnalyzers=false
.NET Core용 Microsoft (R) Build Engine 버전 16.4.0+e901037fe
Copyright (C) Microsoft Corporation. All rights reserved.

  24.47 ms에서 C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj에 대한 복원을 완료했습니다.
Program.cs(3,11): warning CA1707: 네임스페이스 이름 'test_dotnet_run_analyzers'에서 밑줄을 제거하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(3,11): warning SA1300: Element 'test_dotnet_run_analyzers' should begin with an uppercase letter [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]       Program.cs(5,11): warning SA1400: Element 'Program' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,21): warning SA1400: Element 'Main' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(9,31): warning CA1303: 'void Program.Main(string[] args)' 메서드가 리터럴 문자열을 'void Console.WriteLine(string value)' 호출의 'value' 매개 변수로 전달합니다. 대신 리소스 테이블에서 "Hello World!" 문자열을 가져오세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,35): warning CA1801: Main 메서드의 args 매개 변수가 사용되지 않았습니다. 매개 변수를 제거하거나 메서드 본문에 사용하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
CSC : warning SA0001: XML comment analysis is disabled due to project configuration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
  test-dotnet-run-analyzers -&gt; C:\Users\user\workspace\test-dotnet-run-analyzers\bin\Debug\netcoreapp3.1\test-dotnet-run-analyzers.dll

빌드했습니다.

Program.cs(3,11): warning CA1707: 네임스페이스 이름 'test_dotnet_run_analyzers'에서 밑줄을 제거하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1633: The file header is missing or not located at the top of the file. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(3,11): warning SA1300: Element 'test_dotnet_run_analyzers' should begin with an uppercase letter [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]       Program.cs(5,11): warning SA1400: Element 'Program' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,21): warning SA1400: Element 'Main' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(9,31): warning CA1303: 'void Program.Main(string[] args)' 메서드가 리터럴 문자열을 'void Console.WriteLine(string value)' 호출의 'value' 매개 변수로 전달합니다. 대신 리소스 테이블에서 "Hello World!" 문자열을 가져오세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,35): warning CA1801: Main 메서드의 args 매개 변수가 사용되지 않았습니다. 매개 변수를 제거하거나 메서드 본문에 사용하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
CSC : warning SA0001: XML comment analysis is disabled due to project configuration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
    경고 9개

경과 시간: 00:00:00.90
`</Code>
    <Description>**Version Used**: 
``
4. &lt;PropertyGroup&gt;&lt;RunAnalyzers&gt;false&lt;/RunAnalyzers&gt;&lt;/PropertyGroup&gt; doesn't work too.


**Expected Behavior**:
Warnings should not be printed

**Actual Behavior**:
Warnings are printed. Even it can make MSBuild to return an error with `-p:TreatWarningsAsErrors=true`

Also, it seems that the build warnings are not cached. If I build twice, there are no warnings in the second build. The recent release of Rust's cargo ( added a feature that caches build warnings. ( I prefer to separate the build step and the lint step for CI. `dotnet clean` between the steps won't be necessary if we cache warnings.</Description>
  </Issue>
  <Issue>
    <IssueID>40925</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetTypeInfo returns inconsistent nullability on type syntax</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40925</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>40925</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void GetTypeInfoOnNullableType()
        {
            var source =
@"#nullable enable
#nullable enable
class Program2 { }
class Program
{
    void Method(Program x)
    {
        (global::Program y1, global::Program? y2) = (x, x);
        global::Program y3 = x;
        global::Program? y4 = x;
    }
}
";
            var comp = CreateCompilation(source);
            comp.VerifyDiagnostics();

            var tree = comp.SyntaxTrees.Single();
            var model = comp.GetSemanticModel(tree, ignoreAccessibility: false);
            var identifiers = tree.GetRoot().DescendantNodes().Where(n =&gt; n.ToString() == "global::Program").ToArray();
            Assert.Equal(CodeAnalysis.NullableAnnotation.NotAnnotated, model.GetTypeInfo(identifiers[0]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.None, model.GetTypeInfo(identifiers[1]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.NotAnnotated, model.GetTypeInfo(identifiers[2]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.None, model.GetTypeInfo(identifiers[3]).Nullability.Annotation);
            // Note: this discrepancy causes some issues with type simplification in the IDE layer
        }

`</Code>
    <Description>I would expect `NotAnnotated` in all cases, instead of `None` in some cases.
``</Description>
  </Issue>
  <Issue>
    <IssueID>41058</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract Method not correctly inferring a local can be made non-null</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>26/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41058</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used:** 3.5.0-beta3-20063-01+1f921815c4544e703bf721cb8e6c86d5cf6bda63

1. Paste the following code into a C# 8.0 file:

``

2. Select the "a.ToString()" and extract method

**Expected:** the parameter in the method created is of type 'string', since a was known to be not-null at the point of use.
**Actual:** the parameter in the method created is still of type string?, which means this introduces a nullable warning that shouldn't be there.</Description>
  </Issue>
  <Issue>
    <IssueID>41054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Argument capture in Binder.BindToNaturalType produces high allocations</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following `SelectAsArray` lambda forces the arguments of `BindToNaturalType` into a capture, even for majority code paths that do not reach this line of code. AnalyzerRunner shows a gain of over 2GB for scenario #26778 by eliminating the fast-path capture in this method.

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41054</IssueID>
        <PullRequestID>41055</PullRequestID>
        <Title>Remove capturing lambda from binding hot path</Title>
        <Description>Capturing lambdas should be avoided in core compiler code due
to allocation pressure. This call site has been shown up in a trace.

Fixes #41054</Description>
        <CreatedDate>17/01/2020</CreatedDate>
        <ClosedDate>17/01/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>41054</IssueID>
            <PullRequestID>41055</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41053</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter doesn't seem to work on first attempt</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>41052</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Code Review Feedback</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>29/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Manual Test Passes</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41048</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Address all UX feedback</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>29/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41047</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Polish Completion experiences or make binding indicator</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [ ] Invoking completion in an empty textbox shows only keywords
- [x] Filling out Parameter Name before Type Name causes types to appear there</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41047</IssueID>
        <PullRequestID>38748</PullRequestID>
        <Title>Change Signature - Add parameter</Title>
        <Description>Updates the existing Change Signature dialog to allow for the adding of a required parameter (in addition to the existing reorder/remove capabilities). Optional parameters will come as a later update.

The updated Change Signature dialog includes the new "Add" button, as well as two new columns in the datagrid. The "Index" column shows which parameters are new, as well as the original index of preexisting parameters. The "Call site" column shows what value will be put into call sites for this new parameter.

![image](

And here is the new Add Parameter dialog itself:

![image](

The first two fields both have completion enabled.

TODO for this PR:
- [x] Manual test pass [D &amp; M]
- [x] UI
    - [x] VB support [A]
        - [x] Preview
        - [x] `Name` field shouldn't have completion (in VB only)
    - [x] Design of completion list text boxes [I+J]
    - [x] UX Review
    - [x] Accessibility [D]
        - [x] Add Parameter dialog
        - [x] Change Signature dialog updates
- [x] Engine
    - [x] Update engine for required parameters (C# &amp; VB) [I]
    - [x] Hook up the simple "TODO" case
- [x] Most Tests
    - [x] Fix broken unit tests [I]
    - [x] Add new engine unit tests [I]
        - [x] C# unit tests
           - [x] Similar to reorder tests
           - [x] Similar to reorder cascading tests
           - [x] Formatting tests
           - [x] Delegates tests
        - [x] VB unit tests

Pre-Dogfood:
- [x] UI
    - [x] Backspacing too much crashes [D] -- PR to Editor pending
- [ ] Further testing
    - [ ] Unit testing of elision buffer creation
    - [ ] Update integration tests [A]
    - [ ] Add UI unit tests (when supporting optional parameters) [D]
- [ ] Optional Parameters (Larger UI + Engine updates)
- [ ] Engine
    - [ ] Type binding in all contexts, Expand/Reduce namespace/imports (?)

16.6P1:
- [ ] UI
    - [ ] Consider the C# UI bug when filling out name before type [A]
    - [ ] Meet UX expectations
- [ ] Change VS menu from `Remove/Reorder Parameters` to `Change Signature` [work with editor]
- [ ] Engine
    - [ ] Handle multiple TODOs
</Description>
        <CreatedDate>18/09/2019</CreatedDate>
        <ClosedDate>26/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>IDE-CodeStyle</Name>
            <IssueID>41047</IssueID>
            <PullRequestID>38748</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41046</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Correctly handle Types in the engine by qualifying or adding usings where necessary.</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>41046</IssueID>
        <PullRequestID>42808</PullRequestID>
        <Title>Change Signature - Add Parameter -- Part 1</Title>
        <Description>Another attempt at  but this time with the correct target release (16.7-preview1).</Description>
        <CreatedDate>26/03/2020</CreatedDate>
        <ClosedDate>30/03/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>41046</IssueID>
            <PullRequestID>42808</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>41045</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter - Implement Optional Parameters</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Very early thinking/prototyping is something like this:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>41043</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add Parameter Unit Testing - View Model interactions</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter Integration Testing</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>28/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>41042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41041</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Parameter crashes when backspacing or invoking completion on empty text box</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>10/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>41040</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS8601 false positive</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#### Analyzer package

I suppose Microsoft.CodeQuality.CSharp.Analyzers

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

CS8601	Possible null reference assignment.

#### Repro steps
``
#### Expected behavior
CS8601 shouldn't happen

#### Actual behavior
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>41038</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Static Extension Methods are not returned by the completion service</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
3.4.0

**Steps to Reproduce**:
I am testing the CompletionService. It should allow me to see the Linq extension methods on an array, but I do not see them. Here is the code:

        static void Main(string[] args)
        {
            string code = @"using System;
            using System.Linq;

           namespace RoslynCompletionTests
           {
                 public static class MyTestClass1
                 {
                       public static void Print()
                       {
                              int[] array = {1,2,3,4,5,6};

                              var result = array.Select(i =&gt; new { I = i }).Select(v =&gt; v.I);
                       }
                 }
           }";
            var host = MefHostServices.Create(MefHostServices.DefaultAssemblies);
            
            Type[] types =
            {
                typeof(object),
                typeof(Enumerable),
                typeof(IEnumerable),
                typeof(Console),
                typeof(Assembly),
                typeof(List&lt;&gt;),
                typeof(Type)
            };

            ImmutableArray&lt;string&gt; imports = types.Select(x =&gt; x.Namespace).Distinct().ToImmutableArray();

            ImmutableArray&lt;MetadataReference&gt; references =
                types.Select(t =&gt; MetadataReference.CreateFromFile(t.Assembly.Location) as MetadataReference)
                     .ToImmutableArray();

            AdhocWorkspace workspace = new AdhocWorkspace(host, "Custom");

            string name = "MyTestProj";

            ProjectId id = ProjectId.CreateNewId(name);

            ParseOptions parseOptions = new CSharpParseOptions();

            CompilationOptions compilationOptions =
                new CSharpCompilationOptions
                (
                    OutputKind.DynamicallyLinkedLibrary,
                    usings: imports,
                    allowUnsafe: true);

            ProjectInfo projInfo =
                ProjectInfo.Create
                (
                    id,
                    VersionStamp.Create(),
                    name,
                    name,
                    LanguageNames.CSharp,
                    parseOptions: parseOptions,
                    compilationOptions: compilationOptions,
                    metadataReferences: references);

            Project proj = workspace.AddProject(projInfo);

            SourceText text = SourceText.From(code);

            Document doc = proj.AddDocument("MyDoc.cs", text);

            SemanticModel semanticModel = doc.GetSemanticModelAsync().Result;

            CompletionService completionService = CompletionService.GetService(doc);

            string strToFind = "array.";
            int idx = text.ToString().IndexOf(strToFind) + strToFind.Length;

            var results = completionService.GetCompletionsAsync(doc, idx).Result;
        }

The results contain only 24 items and no Linq extension methods whatsoever. 
**Expected Behavior**:
Need to see the extension methods, e.g. Where&lt;&gt;(...), Select&lt;...&gt;(...) etc.

**Actual Behavior**:
it returns no extension methods - only public methods and properties defined on the class. </Description>
  </Issue>
  <Issue>
    <IssueID>41029</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[LSP] Diagnostic squiggles don't appear for client until edits are made</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro - Have a file with diagnostic errors / warning / info in a sln.  Open the file as a liveshare guest.  Notice that squiggles are missing until an edit is made.

This is likely because joining a liveshare session and opening the document on the client will not trigger the server to recompute diagnostics -  

Likely need some way to force publish when the client opens the document.</Description>
  </Issue>
  <Issue>
    <IssueID>41027</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# override completion left compile errors due to unqualified parameter types</Title>
    <CreatedDate>17/01/2020</CreatedDate>
    <ClosedDate>13/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
namespace NerdBank.Algorithms.NodeConstraintSelection
{
	using System;
	public class BrokenConstraintException : InvalidOperationException
	{
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			base. GetObjectData(info, context);
		}
	}
}

`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Within an Exception-derived class, I typed `public override GetObj` and pressed TAB. Instead of fully-qualifying the parameter type names or adding the necessary `using`, C# just added the simple type names which did not resolve in the current file, leaving compile errors. ``See two screenshots.---### Original Comments#### Visual Studio Feedback System on 12/26/2019, 00:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 12/27/2019, 01:05 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>41022</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Formatter should have an opinion on spacing of attributes on parameters</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>24/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>41022</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should it be `[MaybeNull]string parameter` or `[MaybeNull] string parameter`?

FWIW, I prefer with a space.</Description>
  </Issue>
  <Issue>
    <IssueID>41013</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Escape quotes when pasting into verbatim string C#</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>16/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>41013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When pasting into a verbatim string (@""), if the pasted contents contain quotes (such as in a JSON or XML snippet), it would be really nice to automatically escape that content.  For example:string sample = @"";&lt;paste text:&gt; { "foo": "bar" }**Desired:**string sample = @"{ ""foo"": ""bar"" }";**Currently:**string sample = @"{ "foo": "bar" }"; // and a slew of syntax errors to fix up...---### Original Comments#### Visual Studio Feedback System on 1/14/2020, 00:24 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>41009</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>TryGetTagIntervalTreeForBuffer InvalidOperationException on Startup</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>41009</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Version 16.5.0 Preview 3.0 [29715.144.master]

**Steps to Reproduce**:

1. Open Compilers.sln or Roslyn.sln

**Expected Behavior**:

No exceptions.

**Actual Behavior**:

``

Dump saved at: `\\mlangfs1\public\frsilb\dumps\41009\devenv.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>41008</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"use var" and the change to var nullable inference needs design</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>41008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In #40755 the compiler is changing the behavior of var, where it always infers a nullable type so further assignments can be made to it. How this interacts with "use var" is unclear. There are at least two classes of people:

1. People who just want to use var and let the compiler figure things out, they don't care what the nullability of local variables.
2. People who want to use var, but also want to be able to state that certain local variables are non-null to get warnings immediately if somebody assigns a potentially null value to it, rather than seeing warnings later.

These are somewhat at odds of each other. If a developer has "string s = SomethingThatReturnsANonNullableString()", the developer in the first category would happily change that to var. A developer in the second category however might have intentionally wrote "string" because they _didn't_ want this new var behavior and we're stomping over that. Right now the answer from the LDM is "if you want to be explicit about non-null, be explicit about the type", and if that's the answer the IDE needs a way to respect that.

My initial gut was the IDE just shouldn't suggest to use "var" if the stated type is non-nullable, but that's problematic if you are a person in category 1.</Description>
  </Issue>
  <Issue>
    <IssueID>41001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Quick Fix suggests wrong code if 'Convert to conditional expression' is applied on conditional expressions (C#)</Title>
    <CreatedDate>16/01/2020</CreatedDate>
    <ClosedDate>14/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>41001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---'Quick fix' suggests/produces wrong code if 'Convert to conditional expression' is applied on conditional expressions: '()' is missing:class Program    {        static void Main()        {            var data1 = new Data()            {                InnerData2 = new InnerData()                {                    InnerMember = "inner member",                },            };            var data2 = new Data()            {                InnerData2 = new InnerData()                {                    InnerMember = "inner member",                },            };// data1. InnerData1 and data1. InnerData1 is null -&gt; ValueEquals() should return 'true'            Console.WriteLine($"Result is '{data1. ValueEquals(data2)}' but should be '{data1. ValueEqualsOrg(data2)}'");            // console shows: Result is 'False' but should be 'True'        }    }class Data    {        public InnerData InnerData1;        public InnerData InnerData2;// two instances are equal if         // - InnerData1 of instance and other are both null or InnerData1.InnerMember of instance and other are equal         // - InnerData2 of instance and other are both null or InnerData2.InnerMember of instance and other are equal         public bool ValueEquals(Data other) // refactored from ValueEqualsOrg()        {            return other == null                ? false                : InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1) // &lt;- missing '()' !!                ? false                : ! (InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2));// should be:            // return other == null            //     ? false            //     : (InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1)) // &lt;- '()' added            //     ? false            //     : ! (InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2));        }public bool ValueEqualsOrg(Data other) // this method has been refactored with 'Convert to conditional expression'        {            if ( other == null )            {                return false;            }            if ( InnerData1 == null ? other. InnerData1 != null : ! InnerData1.ValueEquals(other. InnerData1) )            {                return false;            }            if ( InnerData2 == null ? other. InnerData2 != null : ! InnerData2.ValueEquals(other. InnerData2) )            {                return false;            }            return true;        }    }class InnerData    {        public string InnerMember;        public bool ValueEquals(InnerData other)        {            if ( other == null )                return false;            if ( InnerMember != other. InnerMember )                return false;            return true;        }    }Regards---### Original Comments#### Visual Studio Feedback System on 1/14/2020, 00:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40992</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extension method dereferences don't change the `this` object state</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>15/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40992</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
namespace ClassLibrary1
{
    public class Class1
    {

        static void M(Class1? c)
        {
            if (c.Test()) // Warn: dereference
            {
            }
            else if (c.Test()) // Warn: dereference
            {
            }
        }
    }

    public static class Class1Extensions
    {
        public static bool Test(this Class1 c) =&gt; false;
    }
}
`</Code>
    <Description>``

If `Test` was an instance method instead of an extension method, we'd only warn on the first invocation.</Description>
  </Issue>
  <Issue>
    <IssueID>40989</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Liveshare - NavBar is empty</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>21/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>CloudEnv</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>16.5P2

In liveshare scenarios, the local roslyn navbar dropdown is usually overriding the LSP client navbar and hiding it.  Since the navbar service isn't running on the client, the roslyn navbar is empty.

Short term -
Don't add the navbar for liveshare content types.  This won't work long term and depends on the content type switching happening first,

Long term -
We should just switch to LSP for the navbar as soon as project context support is added.</Description>
  </Issue>
  <Issue>
    <IssueID>40986</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cache warnings on disk, and re-display on re-build</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>21/01/2020</ClosedDate>
    <IssueLabels />
    <Code>shell
dotnet --info
.NET Core SDK(global.json 반영):
 Version:   3.1.100
 Commit:    cd82f021f4

런타임 환경:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]


**Steps to Reproduce**:

1. Make a new project
shell
dotnet new console --name TestWarn

2. Edit `Program.cs`

using System;

namespace TestWarn
{
    class Program
    {
        static void Main(string[] args)
        {
            var x = 0;
        }
    }
}

3. Build twice
First build:
shell
dotnet build
Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 29.64 ms for /.../TestWarn/TestWarn.csproj.
Program.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]
  TestWarn -&gt; /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll

Build succeeded.

Program.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]
    1 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.98

You get warnings.

Second build:
shell
dotnet build
Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 32.44 ms for /.../TestWarn/TestWarn.csproj.
  TestWarn -&gt; /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:00.88

You don't get warnings.

**Expected Behavior**:
You get warnings again when you re-build like Rust's Cargo.
If you do the exact same thing on Rust (with Cargo &gt;= 1.40), you can get warnings twice, even though it builds incrementally.

shell
cargo new test-warn
cd test-warn
cat &lt;&lt;EOF &gt; src/main.rs
fn main() {
   let x = 0;
}
EOF

shell
cargo build    
   Compiling test-warn v0.1.0 (/.../test-warn)
warning: unused variable: `x`
 --&gt; src/main.rs:2:9
  |
2 |     let x = 0;
  |         ^ help: consider prefixing with an underscore: `_x`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.23s

cargo build
warning: unused variable: `x`
 --&gt; src/main.rs:2:9
  |
2 |     let x = 0;
  |         ^ help: consider prefixing with an underscore: `_x`
  |
  = note: `#[warn(unused_variables)]` on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
`</Code>
    <Description>**Version Used**: 
``
Carog changelog: 

I prefer to separate the build step and the lint step for CI. `dotnet clean` between the steps won't be necessary if we cache warnings. I could make a workaround by saving the output and `grep`-ing it though, but this is a little bit fragile.</Description>
  </Issue>
  <Issue>
    <IssueID>40981</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.exe returns exits code -2146232797 without messages</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>19/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
namespace Namespace
{
  public interface IInterface
  {
    (Type, Type)[] GetTypeTuples();
  }
}

and `lib.cs` should contain:

using System;
using System.Linq;

namespace Namespace
{
  public class Class
  {
    private void Method(IInterface inter, Func&lt;(Type, Type), string&gt; keySelector)
    {
      var tuples = inter.GetTypeTuples();
      IOrderedEnumerable&lt;(Type, Type)&gt; ordered = tuples.OrderBy(keySelector);
    }
  }
}


Then run:

csc.exe /target:library /out:interface.dll interface.cs
csc.exe /target:library /reference:interface.dll /out:lib.dll lib.cs

The last command fails, meaning that no library is produced and `csc.exe` returns the exit code `-2146232797`.

**Expected Behavior**:
I would expect `lib.dll` to be produced and `csc.exe` returning the exit code 0.

**Actual Behavior**:
No library is produces from the command

csc.exe /target:library /reference:interface.dll /out:lib.dll lib.cs

and `csc.exe` returns the exit code `-2146232797`.

**Notes:**
It it important that the interface is placed in a separate assembly, meaning that the command:

csc.exe /target:library /reference:interface.dll /out:lib.dll interface.cs lib.cs

succeeds as expected.

Moreover, removing the line:

IOrderedEnumerable&lt;(Type, Type)&gt; ordered = tuples.OrderBy(keySelector);

_or_ changing the `var` in

var tuples = inter.GetTypeTuples();

to `(Type, Type)[]` will both make compilation succeed.

After failing, the following stacktrace can be found the in eventlog:

Application: csc.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypeArguments(NamedTypeSymbol typeA, NamedTypeSymbol typeB, VarianceKind variance, ArrayBuilder`1 allTypeParameters, ArrayBuilder`1 allTypeArguments)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypes(TypeSymbol other, VarianceKind variance)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations.MergeEquivalentTypes(TypeWithAnnotations other, VarianceKind variance)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.AddAllCandidates(Dictionary`2 candidates, HashSet`1 bounds, VarianceKind variance, ConversionsBase conversions)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(HashSet`1 exact, HashSet`1 lower, HashSet`1 upper, HashSet`1&amp; useSiteDiagnostics, ConversionsBase conversions)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(Int32 iParam, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.FixParameters(Func`3 predicate, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.DoSecondPhase(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgsSecondPhase(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgs(Binder binder, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Infer(Binder binder, ConversionsBase conversions, ImmutableArray`1 methodTypeParameters, NamedTypeSymbol constructedContainingTypeOfMethod, ImmutableArray`1 formalParameterTypes, ImmutableArray`1 formalParameterRefKinds, ImmutableArray`1 arguments, HashSet`1&amp; useSiteDiagnostics, Extensions extensions)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.InferMethodTypeArguments(MethodSymbol method, ImmutableArray`1 originalTypeParameters, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, MemberAnalysisResult&amp; error, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray`1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, BoundExpression receiverOpt, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary`2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet`1&amp; useSiteDiagnostics, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[TMember](ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, BoundExpression receiver, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, RefKind returnRefKind, TypeSymbol returnType, Boolean allowRefOmittedArguments, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExtensionMethod(SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, BoundExpression left, ImmutableArray`1 typeArgumentsWithAnnotations, Boolean isMethodGroupConversion, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(BoundMethodGroup methodGroup, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(BoundMethodGroup node, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet`1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm, RefKind returnRefKind, TypeSymbol returnType)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm, Boolean&amp; anyApplicableCandidates)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer(ExpressionSyntax node, TypeSymbol destinationType, BindValueKind valueKind, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeWithAnnotations declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, Boolean includeBoundType, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested, InitialState&amp; forSemanticModel)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypeArguments(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.VarianceKind, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.MergeEquivalentTypes(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.VarianceKind)
   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations.MergeEquivalentTypes(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.VarianceKind)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.AddAllCandidates(System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.VarianceKind, Microsoft.CodeAnalysis.CSharp.ConversionsBase)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Microsoft.CodeAnalysis.CSharp.ConversionsBase)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Fix(Int32, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.FixParameters(System.Func`3&lt;Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer,Int32,Boolean&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.DoSecondPhase(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgsSecondPhase(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.InferTypeArgs(Microsoft.CodeAnalysis.CSharp.Binder, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodTypeInferrer.Infer(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.ConversionsBase, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Extensions)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.InferMethodTypeArguments(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeParameterSymbol&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, EffectiveParameters, Microsoft.CodeAnalysis.CSharp.MemberAnalysisResult ByRef, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, EffectiveParameters, EffectiveParameters, System.Collections.Immutable.ImmutableArray`1&lt;Int32&gt;, Boolean, Boolean, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Boolean, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.MemberResolutionResult`1&lt;System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Boolean, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol,Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;&gt;, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.MemberResolutionResult`1&lt;System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;System.__Canon&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExtensionMethod(Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.CSharp.BoundExpression, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations&gt;, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Boolean, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.DiagnosticInfo&gt; ByRef, Boolean, Boolean, Microsoft.CodeAnalysis.RefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.BoundMethodGroup, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Boolean, Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode, System.String, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, BindValueKind, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind, Boolean, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.ImportChain ByRef, Boolean ByRef, InitialState ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>**Version Used**: 
16.4.29709.97

**Steps to Reproduce**:
Create two files, `interface.cs` and `lib.cs`, with the following content. The file `interface.cs` should contain:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40976</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Show items from unimported namespaces" and "resolve usings" inserts imports in wrong location when "inside_namespace"</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>29/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>40976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[*.cs]
csharp_using_directive_placement = inside_namespace:error
 

 C#
namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    internal class SolutionExplorerService
    {
        private Lazy&lt; // &lt;!-- Resolve using

        public SolutionExplorerService()
        {
        }
    }
}


**Expected Behavior**:
 C#
namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    using System;

    internal class SolutionExplorerService
    {
        private Lazy&lt;

        public SolutionExplorerService()
        {
        }
    }
}



**Actual Behavior**:
 C#
using System;

namespace Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package
{
    internal class SolutionExplorerService
    {
        private Lazy&lt;

        public SolutionExplorerService()
        {
        }
    }
}

`</Code>
    <Description>**Version Used**: 
Version 16.5.0 Preview 3.0 [29714.123.master]

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40975</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should not warn on null default value on [AllowNull] parameter</Title>
    <CreatedDate>15/01/2020</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void AllowNull_Parameter_NullDefaultValue()
        {
            var source =
@"using System.Diagnostics.CodeAnalysis;
public class C
{
    void M([AllowNull] string p = null) { }
}
";

            var comp = CreateNullableCompilation(new[] { AllowNullAttributeDefinition, source });
            // Note: fixing this was tricky as it involved a cycle (FlowAnnotations, attribute decoding, default value)
            comp.VerifyDiagnostics(
                // (4,35): warning CS8625: Cannot convert null literal to non-nullable reference type.
                //     void M([AllowNull] string p = null) { }
                Diagnostic(ErrorCode.WRN_NullAsNonNullable, "null").WithLocation(4, 35)
                );
        }
`</Code>
    <Description>Follow-up on 

``</Description>
  </Issue>
  <Issue>
    <IssueID>40967</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>y87feng</FixedById>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Introduce explicit downcast refactoring if a variable requires a cast to compile</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>11/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>40967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C {}
class D : C {}
void doSomething(D d);
C returnC();


1.  types mismatch: `int` cannot be converted to `string`
csharp 
string foo()
{
    return 1[||];
}

Results in `no refactoring`

2. assignment with constructor
csharp
D d = [|new C()|];

Results in
csharp
D d = (D)new C();


3. assignment with object creation expression - don't add cast except there is an explicit cast operator
csharp
C c = new D();
D d = c[||];

Results in `no refactoring`

4. assignment with method return value
csharp
D d = r[||]eturnC();

Results in
csharp
D d = (D)returnC();


5. variable passed as method parameter
csharp
doSomething([||]c);

Results in
csharp
doSomething((D)c);

6. return variable with implicit cast
csharp
D returnD()
{
         C c;
         return [||]c;
}

Results in
csharp
D returnD()
{
         C c;
         return (D)c;
}


7. return the return value of another method
csharp
D returnD_func() {
    return [||]returnC();
}

Results in
csharp
D returnD_func() {
    return (D)returnC();
}


8. pass the return value of the method as parameter
csharp
doSomething([||]returnC());

Results in
csharp
doSomething((D)returnC());


9. the argument of base constructor
csharp
class Test {
    public Test(D d) {}
}
class Derived_Test : Test  {
    public Derived_Test (C c) : base([||]c) {}
}

C c;
Derived_Test dt = new Derived_Test(c);

Results in
csharp
class Test {
    public Test(D d) {}
}
class Derived_Test : Test  {
    public Derived_Test (C c) : base((D)c) {}
}

C c;
Derived_Test dt = new Derived_Test(c);


Consider cases:

10. have multiple choices
csharp
class E : D {}
void doSomething(D d);
void doSomething(E e);

C c;
doSomething([||]c);


11. already have a cast
csharp
class E : D {}
// void doSomething(D d);
void doSomething(E e);

C c;
doSomething([||](D)c);


12. generic type
csharp
Func&lt;C, C&gt; func = d =&gt; d;
Func&lt;D, D&gt; func2 = [||]func1;
`</Code>
    <Description>If a variable requires a cast to make it compile, add a refactoring that will introduce cast refactoring #33533
Error code: CS0266, CS1503

**Add explicit downcast**: 
context code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40964</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Hang during shutdown in Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.UnregisterGlobalOperationNotifications</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>06/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.5.29707.192 built by: MASTER

This is a random hang I hit during shutdown. The UI was already closed I think but it seems we deadlocked somehow shutting down the OOP process:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40957</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>New not null syntax "is {}" vs "!= null" for structs</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>40957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
DateTime? date = null;

if ((new Random().Next(3) == 2))
{
    date = DateTime.Today;
}

if (date != null)
{
    DateTime bar = date.Value;
    Console.WriteLine("Date is " + date + "-" + bar);
}

if (date is {})
{
    DateTime bar = date.Value;  // &lt;- warning here
    Console.WriteLine("Date is " + date + "-" + bar);
}
`</Code>
    <Description>**Version Used**: C# 8, .NET Core 3.1

**Steps to Reproduce**:

When using a nullable struct (for example Datetime?) the IDE shows a `Possible System.InvalidOperationException` warning when inside an "if (something is {})" block.

``
![image](

**Expected Behavior**:

Both "if" statements should behave the same way; no warning on he second "if".

**Actual Behavior**:

The IDE shows a warning, although the program seems to run correctly.</Description>
  </Issue>
  <Issue>
    <IssueID>40956</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inaccurate IDE0051 Messages</Title>
    <CreatedDate>14/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Using this code:IDE0051 messages occur that state the methods in the class are not used, when in fact, they are.---### Original Comments#### Visual Studio Feedback System on 1/5/2020, 11:57 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 1/13/2020, 11:24 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40931</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Change Signature dialog: Selected item jumps out of view when argument list is long</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>09/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>40931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When using the "Change signature" refactoring on a method with a long argument list (so that the arguments do not fit on one page of the list box in the dialog), the list box scrolls back to the first page when selecting one of the last items by mouse.### Steps to reproduce:1. Create new C# Console App (,NET Framework 4.7.2).2. Add the following code to the Program class:``3. Start the "Change signature" refactoring on the "Test" method.4. Scroll the parameters list fully down using the mouse.5. Click on the last item, "int arg10".Expected behavior: The last item is selected and the scroll position of the list remains unchanged.Actual behavior: The last item is selected and the list scrolls back up, causing the selected item to become invisible.---### Original Comments#### Visual Studio Feedback System on 1/12/2020, 10:54 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40926</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuild parameter -p:RunAnalyzers=false is ignored</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>10/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>shell
dotnet --info
.NET Core SDK(global.json 반영):
 Version:   3.1.100
 Commit:    cd82f021f4

런타임 환경:
 OS Name:     Windows
 OS Version:  10.0.18363
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]


**Steps to Reproduce**:

1. Make a project
shell
dotnet new console --name test-dotnet-run-analyzers

2. Add a bunch of analyzers
shell
dotnet add package Microsoft.CodeAnalysis.FxCopAnalyzers
dotnet add package StyleCop.Analyzers

3. Build with `-p:RunAnalyzers=false`
Korean characters are mixed in the build output but I think you can get the point.
shell
dotnet build -p:RunAnalyzers=false
.NET Core용 Microsoft (R) Build Engine 버전 16.4.0+e901037fe
Copyright (C) Microsoft Corporation. All rights reserved.

  24.47 ms에서 C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj에 대한 복원을 완료했습니다.
Program.cs(3,11): warning CA1707: 네임스페이스 이름 'test_dotnet_run_analyzers'에서 밑줄을 제거하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(3,11): warning SA1300: Element 'test_dotnet_run_analyzers' should begin with an uppercase letter [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]       Program.cs(5,11): warning SA1400: Element 'Program' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,21): warning SA1400: Element 'Main' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(9,31): warning CA1303: 'void Program.Main(string[] args)' 메서드가 리터럴 문자열을 'void Console.WriteLine(string value)' 호출의 'value' 매개 변수로 전달합니다. 대신 리소스 테이블에서 "Hello World!" 문자열을 가져오세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,35): warning CA1801: Main 메서드의 args 매개 변수가 사용되지 않았습니다. 매개 변수를 제거하거나 메서드 본문에 사용하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
CSC : warning SA0001: XML comment analysis is disabled due to project configuration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
  test-dotnet-run-analyzers -&gt; C:\Users\user\workspace\test-dotnet-run-analyzers\bin\Debug\netcoreapp3.1\test-dotnet-run-analyzers.dll

빌드했습니다.

Program.cs(3,11): warning CA1707: 네임스페이스 이름 'test_dotnet_run_analyzers'에서 밑줄을 제거하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1633: The file header is missing or not located at the top of the file. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(3,11): warning SA1300: Element 'test_dotnet_run_analyzers' should begin with an uppercase letter [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]       Program.cs(5,11): warning SA1400: Element 'Program' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,21): warning SA1400: Element 'Main' should declare an access modifier [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(9,31): warning CA1303: 'void Program.Main(string[] args)' 메서드가 리터럴 문자열을 'void Console.WriteLine(string value)' 호출의 'value' 매개 변수로 전달합니다. 대신 리소스 테이블에서 "Hello World!" 문자열을 가져오세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
Program.cs(7,35): warning CA1801: Main 메서드의 args 매개 변수가 사용되지 않았습니다. 매개 변수를 제거하거나 메서드 본문에 사용하세요. [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
CSC : warning SA0001: XML comment analysis is disabled due to project configuration [C:\Users\user\workspace\test-dotnet-run-analyzers\test-dotnet-run-analyzers.csproj]
    경고 9개

경과 시간: 00:00:00.90
`</Code>
    <Description>**Version Used**: 
``
4. &lt;PropertyGroup&gt;&lt;RunAnalyzers&gt;false&lt;/RunAnalyzers&gt;&lt;/PropertyGroup&gt; doesn't work too.


**Expected Behavior**:
Warnings should not be printed

**Actual Behavior**:
Warnings are printed. Even it can make MSBuild to return an error with `-p:TreatWarningsAsErrors=true`

Also, it seems that the build warnings are not cached. If I build twice, there are no warnings in the second build. The recent release of Rust's cargo ( added a feature that caches build warnings. ( I prefer to separate the build step and the lint step for CI. `dotnet clean` between the steps won't be necessary if we cache warnings.</Description>
  </Issue>
  <Issue>
    <IssueID>40925</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetTypeInfo returns inconsistent nullability on type syntax</Title>
    <CreatedDate>13/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40925</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>40925</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void GetTypeInfoOnNullableType()
        {
            var source =
@"#nullable enable
#nullable enable
class Program2 { }
class Program
{
    void Method(Program x)
    {
        (global::Program y1, global::Program? y2) = (x, x);
        global::Program y3 = x;
        global::Program? y4 = x;
    }
}
";
            var comp = CreateCompilation(source);
            comp.VerifyDiagnostics();

            var tree = comp.SyntaxTrees.Single();
            var model = comp.GetSemanticModel(tree, ignoreAccessibility: false);
            var identifiers = tree.GetRoot().DescendantNodes().Where(n =&gt; n.ToString() == "global::Program").ToArray();
            Assert.Equal(CodeAnalysis.NullableAnnotation.NotAnnotated, model.GetTypeInfo(identifiers[0]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.None, model.GetTypeInfo(identifiers[1]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.NotAnnotated, model.GetTypeInfo(identifiers[2]).Nullability.Annotation);
            Assert.Equal(CodeAnalysis.NullableAnnotation.None, model.GetTypeInfo(identifiers[3]).Nullability.Annotation);
            // Note: this discrepancy causes some issues with type simplification in the IDE layer
        }

`</Code>
    <Description>I would expect `NotAnnotated` in all cases, instead of `None` in some cases.
``</Description>
  </Issue>
  <Issue>
    <IssueID>40784</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Complete hang in goto-def</Title>
    <CreatedDate>07/01/2020</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
    <IssueLabels />
    <Description>32bit dump uploaded here: 

This is in:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40781</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Don't run nullable analysis in regular test legs</Title>
    <CreatedDate>07/01/2020</CreatedDate>
    <ClosedDate>14/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>40781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was not able to find out if unit tests were passing in the following CI run, because every leg failed with nullability warnings: 

It feels like we should do nullable analysis only in the correctness leg so that we can get test results in the other legs in the scenario that we have nullability issues in the build. /cc @jaredpar @dotnet/roslyn-infrastructure </Description>
  </Issue>
  <Issue>
    <IssueID>40779</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>40779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Renaming a copied Public class CHANGES original Class to NEW name. in Blend Visual Studio 2019</Title>
    <CreatedDate>07/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@MJackson9595 commented on [Sun Jan 05 2020](I copied one public class then repasted it in same folder and global namespace.expected this error.  to show BEFORE I renamed the public class I copied to a different name.WHAT I did NOT expect was Visual Studio 2019  to HELP by changing BOTH the public class and name of the member StartProgram () in the Original class to match the renamed class.Blend for visual studios 2019 seems to be determined to change EVERY occurrence of a global namespace and member of that namespace to whatever I changed the COPIED names to.  Unable to find any way to tell Visual Studio blend 2019 to in this case do NOT change every occurrence of name in the project.   It is a great feature, when you realize you have just come up with a much better "name" then the one you  have been using so far.  But that is not the case here.---#### Document Details⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.** ID: 62919633-6041-2d18-0b0c-ff1c8e690495* Version Independent ID: 19a252b9-f0d8-ec57-1014-00ad6e5de9b3* Content: [Compiler Error CS0101](* Content Source: [docs/csharp/misc/cs0101.md](* Product: **dotnet-csharp*** Technology: **csharp-diagnostics*** GitHub Login: @BillWagner* Microsoft Alias: **wiwagn**</Description>
  </Issue>
  <Issue>
    <IssueID>40776</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>invalid IL when use Index with inlined default(struct).</Title>
    <CreatedDate>07/01/2020</CreatedDate>
    <ClosedDate>28/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
16.5preview1, default in sharplab


**Steps to Reproduce**:
It's just a test and not code from really world, and report it in case someone need it.



**Expected Behavior**:
`Test0` should also get `IndexOutOfRangeException` like `Test1` and `Test2` does.

**Actual Behavior**:
`InvalidProgramException: Common Language Runtime detected an invalid program.`
</Description>
  </Issue>
  <Issue>
    <IssueID>40768</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Using empty params pointer arrays results in invalid IL and BadImageFormatException</Title>
    <CreatedDate>06/01/2020</CreatedDate>
    <ClosedDate>23/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
static unsafe class Wat
{
   public static unsafe void Test(params int*[] types)
   {

   }
   public static void Crash()
   {
      Test();
   }
}

public static class Program
{
   public static void Main()
   {
      Wat.Crash();
   }
}
`</Code>
    <Description>**Version Used**: .NET Core SDK 3.0.11, same behavior in SharpLab

**Steps to Reproduce**:

``

**Expected Behavior**:
Roslyn produces valid IL

**Actual Behavior**:
Roslyn attempts to use `Array.Empty&lt;int*&gt;()` which results in invalid IL and causes the runtime to throw BadImageFormatException.

[SharpLab](</Description>
  </Issue>
  <Issue>
    <IssueID>40766</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>40766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Multi-target compiler to netstandard2.0 and netcoreapp3.1</Title>
    <CreatedDate>06/01/2020</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>40766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The compiler libraries should move to mult-target `netstandard2.0` and `netcoreapp3.1` where today they only target `netstandard2.0`. Adding a target for `netcoreapp3.1` will provide some benefits to our code base:

1. Increase the accuracy of our nullable annotations. Our nullable annotations are not as effective as they could be because the entire .NET SDK is effectively oblivious. Further this means we have to duplicate common methods like `Debug.Assert` and `string.IsNullOrEmpty` as the flow attributes aren't present in `netstandard2.0`. This is a significant burden for us as we annotate our source tree. 
1. Allows us to take advantage of .NET Core APIs that could help increase the performance of the compiler. For example our object pooling could be more effective on .NET Core.

This does have a few downsides:

1. It will add extra overhead to our build in the form of three new libraries. Given we currently build several hundred libraries, particularly when you consider satellite assemblies, this overhead is fairly minimal.
1. It will add some more rigor to our investigations. Today it's essentially safe to repro a customer bug on either .NET Desktop or Core (whatever is easier for the developer). As we begin to adopt .NET Core specific APIs though it's possible we will end up with runtime specific behavior. Unlikely this will manifest in more than a handful of bugs but it's an item we will need to be aware of.

This specifically includes the following libraries:

- Microsoft.CodeAnalysis
- Microsoft.CodeAnalysis.CSharp
- Microsoft.CodeAnalysis.VisualBasic
- Microsoft.Build.Tasks.CodeAnalysis

Check list:
- [ ] The netcoreapp target framework in the repository is unified to `netcoreapp3.1`. Today it is a mix of versions do to timing around when we adopted runtime features like Default Interface Methods.
- [ ] The nuspec file for the libraries is updated to have both the `netstandard2.0` and `netcoreapp3.1` targets.
- [ ] The Microsoft.Net.Compilers.Toolset package is updated to ship the `netcoreapp3.1` binaries 
    - [ ] Notify @nguerrera when this happens as it will likely cause a bit of work when merging into the SDK
- [ ] Understand the impact on the Shipped / Unshipped API files. The tool wasn't designed for multi-targeting and it's possible this will cause issues.




</Description>
  </Issue>
  <Issue>
    <IssueID>40750</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>40750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inlining variable declaration results in ugly namespace</Title>
    <CreatedDate>05/01/2020</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I encountered this in the compiler code, in `ReturnsAwaitableToVoidOrInt`.

![image](

![image](

This was on 
``
</Description>
  </Issue>
  <Issue>
    <IssueID>40747</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generics extension methods took too much time to compile</Title>
    <CreatedDate>05/01/2020</CreatedDate>
    <ClosedDate>05/01/2020</ClosedDate>
    <IssueLabels />
    <Code>csharp
&lt;#@ output extension=".cs" #&gt;
using System;
&lt;#
var retType = "TOutput";
var tparamType = "&lt;TOutput&gt;";
var body = "";
var param = "";
#&gt;

namespace HLib.Functional.Currying
{
    public static class CurryingExtensions
    {
        public static Func&lt;TOutput&gt; Currying&lt;TOutput&gt;(this Func&lt;TOutput&gt; f) =&gt; f;
        public static Action Currying(this Action f) =&gt; f;
    &lt;# for (var i = 1; i &lt;= 16; i++)
    {
        retType = retType.Replace("TOutput", $"Func&lt;T{i}, TOutput&gt;");
        tparamType = tparamType.Replace("TOutput", $"T{i}, TOutput");
        body += $"p{i} =&gt; ";
        param += $"p{i}, "; #&gt;
    public static &lt;#= retType #&gt; Currying&lt;#= tparamType #&gt;(this Func&lt;#= tparamType #&gt; f) =&gt; &lt;#= body #&gt;f(&lt;#= param.Substring(0, param.Length - 2) #&gt;);
    &lt;# var index = retType.LastIndexOf("Func");
       var actionRetType = retType.Replace(", TOutput", ""); 
       if (index &gt;= 0) actionRetType = actionRetType.Substring(0, index) + actionRetType.Substring(index).Replace("Func", "Action"); #&gt;
    public static &lt;#= actionRetType #&gt; Currying&lt;#= tparamType.Replace(", TOutput", "") #&gt;(this Action&lt;#= tparamType.Replace(", TOutput", "") #&gt; f) =&gt; &lt;#= body #&gt;f(&lt;#= param.Substring(0, param.Length - 2) #&gt;);
    &lt;# } #&gt;}
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 16.4, .NET Core 3.1

**Steps to Reproduce**:

1. use following T4 template to generate source code:
``
2. Compile

The generated 34 lines code took nearly a minute to finish compilation, and it also made Visual Studio's intellisense really slow.</Description>
  </Issue>
  <Issue>
    <IssueID>40745</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Introduce local variable in lambda deletes unrelated code</Title>
    <CreatedDate>04/01/2020</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VisualStudio.16.Preview/16.5.0-pre.1.0+29521.150

**Steps to Reproduce**:

``
i.e. `File.Copy` is removed
</Description>
  </Issue>
  <Issue>
    <IssueID>40744</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Enforced sorting section by EditorConfig</Title>
    <CreatedDate>04/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40744</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;TSLint provides options to enforce sorting, e.g. for &lt;a href=" target=_blank&gt;object literals&lt;/a&gt; or &lt;a href=" target=_blank&gt;imports&lt;/a&gt;. For the sake of maintainability and to reduce merge conflicts it would helpful being able to enforce ordering of special sections also in .NET code. E.g. consider a bunch of constants:&lt;/p&gt;&lt;pre&gt;public const string ActionByValue = nameof(ByValue);public const string ActionFavorites = nameof(Favorites);public const string ActionRecent = nameof(Recent);&lt;/pre&gt;&lt;p&gt;Only if developers are forced to sort correctly mentioned advantages apply.&lt;/p&gt;&lt;p&gt;Would it be possible to create a special comment and a EditorConfig rule which enforces ordering? E.g. for EditorConfig: &lt;/p&gt;&lt;pre&gt;dotnet_sort_comment_enabled = true&lt;/pre&gt;&lt;p&gt;and then in code:&lt;/p&gt;&lt;pre&gt;// #sort ^\s*public.*;\s*$public const string ActionByValue = nameof(ByValue);public const string ActionFavorites = nameof(Favorites);public const string ActionRecent = nameof(Recent);// #endsort&lt;/pre&gt;&lt;p&gt;Using the optional regex filter parameter, one can define which lines are subject to sorting. This way comments could be added for which sorting does not make sense.&lt;/p&gt;&lt;p&gt;Notes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;This feature will only develop its full potential when &lt;a href=" target=_blank&gt;failing EditorConfig rules can be configured to break a build&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;If this request is out-of-scope: Is there another way to enforce such a rule using VS means only? (VS extensions could do it, but if one developer on a team does not have it installed, they could circumvent the rule)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 12/5/2019, 00:35 AM: Thank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.#### tarek124455 on 12/6/2019, 01:33 PM: &lt;p&gt; For the over from worked master data.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>40743</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Member indent after indenting access modifiers</Title>
    <CreatedDate>04/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>40743</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
Hi
Currently, I set the indentation for an access modifier to look like this.

``

---
### Original Comments

#### Visual Studio Feedback System on 11/25/2019, 00:43 AM: 

Thank you for taking the time to provide your suggestion.
#### Patrick Slamp on 12/17/2019, 11:29 PM: 

I would also like to have this feature in visual studio 2019. I find that it makes C++ code easier to read.</Description>
  </Issue>
  <Issue>
    <IssueID>40740</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Show the name of the argument being passed to a function if the argument is a primitive type.</Title>
    <CreatedDate>04/01/2020</CreatedDate>
    <ClosedDate>22/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>40740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>40740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>40740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
It is really annoying to see primitive values like `true` `false` or `"SomeArgument"` or `0` being passed to a function without actually knowing what argument that value actually relates to.
One has to see the documentation of the function or see definition of the function to map what the passed primitive value to the argument in the function.

It would be useful to show in the function call which argument a primitive value being passed actually relates to.

---
### Original Comments

#### Pratik Sanglikar [MSFT] on 12/16/2019, 01:57 PM: 

&lt;p&gt;I faced the issue for C#, but support might be missing for other languages as well.&lt;br&gt;Consider a sample .NET Core Console app. &lt;br&gt;&lt;br&gt;Program.cs&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;br&gt;namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Sample.MethodAcceptingPrimitiveTypes("abc", 1, true, false);
        }
    }
}&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Sample.cs&lt;br&gt;&lt;pre&gt;&lt;br&gt;namespace ConsoleApp2
{
    class Sample
    {
        public static void MethodAcceptingPrimitiveTypes(string someString, int someInt, bool someBool, bool confusingBool)
        {
            Console.WriteLine($"{someString}, {someInt}, {someBool}, {confusingBool}");
        }
    }
}&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;Now, consider, a user just navigating the codebase finds a call to `MethodAcceptingPrimitiveTypes()` but can't comprehend what the passed parameters map to unless the user goes and finds the definition of the `MethodAcceptingPrimitiveTypes()` or parameter mapping is specified in the call by &lt;br&gt;&lt;pre&gt;Sample.MethodAcceptingPrimitiveTypes("abc", 1, someBool: true, confusingBool: false);&lt;/pre&gt;&lt;br&gt;Now, we as VS, can be intelligent and tell the user that passed in value `"abc"` is actually for the argument `someString` or the passed value `true` is for `someBool` and `false` is for `confusingBool`.&lt;br&gt;&lt;br&gt;Intellij Idea does this by just showing the parameter name near the passed value to indicate what argument of the method the passed in value actually maps to.&lt;br&gt;&lt;br&gt;Let me try to find a screenshot of comparison of Idea and VS side by side to better explain it.

</Description>
  </Issue>
  <Issue>
    <IssueID>40736</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>40736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Autocomplete multiple times</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>09/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>40736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>40736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;Let's say I have the following classes in a .net project:&lt;/p&gt;&lt;p&gt;Product.cs&lt;/p&gt;&lt;p&gt;ProductFactory.cs&lt;/p&gt;&lt;p&gt;ProductProviderFactory.cs&lt;/p&gt;&lt;p&gt;ProductFixtureCustomizer.cs&lt;/p&gt;&lt;p&gt;and so on. &lt;/p&gt; &lt;p&gt;If I'm trying to autocomplete to insert a reference to 'ProductFixtureCustomizer', I have to type the prefix out and then select it from a dropdown. Most other IDEs have the ability to continually show the suggestions when typing. &lt;/p&gt;&lt;p&gt;Ideally, I would be able to do the following:&lt;/p&gt;&lt;p&gt;1. Type 'Pro'&lt;/p&gt;&lt;p&gt;2. Select 'Product' out of suggestions list&lt;/p&gt;&lt;p&gt;3. Type 'Fix' (After 'Product')&lt;/p&gt;&lt;p&gt;4. Select 'ProductFixtureCustomizer' out of suggestions&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Unfortunately, as soon as you have used the suggestion, no more suggestions will be made so step 4 is currently impossible. This means I either have to type out 'ProductFix' before tab completing or select 'ProductFixtureCustomizer' out of an arbitrarily large list of suggestions coming from typing 'Pro', neither of which is ideal.&lt;/p&gt;---### Original Comments#### Jane Wu [MSFT] on 10/10/2019, 00:11 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>40728</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8601/CS8625 False positive</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System.Diagnostics.CodeAnalysis;
#nullable enable
public class C {
    [AllowNull]
    public string Text { get; set; } = "";
    public void M() {
        var c = new C();
        c.Text = null;
        new C
        {
            Text = null // CS8625
        };
    }
}
`</Code>
    <Description>## Version Used
Visual Studio 2019 (16.5.0 Preview 1.0)

## Steps to Reproduce
``
[SharpLab](

## Expected Behavior
Since the behavior for assigning after construction and inside the initializer should be the same, no warnings should be presented.

## Actual Behavior
&gt; Warning CS8625: Cannot convert null literal to non-nullable reference type.
</Description>
  </Issue>
  <Issue>
    <IssueID>40725</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Daily NuGet build feed listed in README is out of date</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <IssueLabels />
    <Description>The daily NuGet build feed listed in the README.md is out of date and still points to MyGet:


It should be updated to point to the azure blob feed where nightlies are actually being published.</Description>
  </Issue>
  <Issue>
    <IssueID>40724</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8602 false positive</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40724</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
public class C {
    bool M() {
        object? newValue = null;
        object? oldValue = null;
        return newValue is null ^ oldValue is null || !(newValue is null &amp;&amp; oldValue is null || newValue.Equals(oldValue));
    }
}
`</Code>
    <Description>## Version Used
Visual Studio 2019 (16.5.0 Preview 1.0)

## Steps to Reproduce
``
[SharpLab](

## Expected Behavior
Since `newValue` will never be `null` at the time of `.Equals` evaluation, no warning should be presented.

## Actual Behavior
&gt; Warning CS8602: Dereference of a possibly null reference.
</Description>
  </Issue>
  <Issue>
    <IssueID>40720</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2019 crashing when click RMB on rule in Analyzers' dependencies.</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>10/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Visual Studio 2019 crashing when I added too many analyzers to project.Steps to reproduce:-  Create .NET Standard library with setup:``---### Original Comments#### Visual Studio Feedback System on 4/29/2019, 00:01 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 5/1/2019, 10:08 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;#### Visual Studio Feedback System on 12/31/2019, 00:23 AM: &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: &lt;a target='_blank' href=" In case you need answers to common questions or need assisted support, be sure to use &lt;a target='_blank' href=" We’ll keep you posted on any updates to this feedback.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40717</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0059 (Unnecessary assignment of a value) should not be reported for variables that are passed by reference</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
static int Example()
{
    int value = 123;

    Span&lt;int&gt; valueSpan = MemoryMarshal.CreateSpan(ref value, 1);

    value = 456;

    return valueSpan[0];
}
`</Code>
    <Description>**Version Used**: 
VS2019 16.4.2
.NET Core 3.1

**Steps to Reproduce**:
``

**Expected Behavior**:
No suggestion to remove the assignment ``value = 456;``

**Actual Behavior**:
Suggestion to remove ``value = 456;``</Description>
  </Issue>
  <Issue>
    <IssueID>40714</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>40714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C#: Typing goto case (ValueTuple&lt;,&gt;) in switch statement crashes Visual Studio</Title>
    <CreatedDate>03/01/2020</CreatedDate>
    <ClosedDate>22/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
static void Example(object a, object b)
{
    switch ((a, b))
    {
        case (string str, int[] arr) _:

            break;
        case (string str, decimal[] arr) _:
            break;
    }
}

2. Copy/paste ``goto case (string str, decimal[] arr)`` before the first ``break;``

**Expected Behavior**:
The goto case statement might not be valid, but Visual Studio should keep running.

**Actual Behavior**:
VS2019 16.4.2 crashes.

**Exception info from Windows event log**:

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariable(TypeWithAnnotations declTypeWithAnnotations, SingleVariableDesignationSyntax designation, CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationVariablesForErrorRecovery(TypeWithAnnotations declTypeWithAnnotations, VariableDesignationSyntax node, CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationExpressionAsError(DeclarationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindValue(ExpressionSyntax node, DiagnosticBag diagnostics, BindValueKind valueKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindTupleExpression(TupleExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceOrTypeOrExpression(ExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeOfTupleLiteral(TupleExpressionSyntax declaratorSyntax)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(TupleExpressionSyntax declaratorSyntax, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(TupleExpressionSyntax declaratorSyntax, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolsCore(SyntaxNode declaration, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(String id, Location location, Func`3 getSemanticModel, SuppressMessageInfo&amp; info)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Diagnostic diagnostic, Func`3 getSemanticModel, ISymbol symbolOpt)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(ImmutableArray`1 diagnostics, Compilation compilation, SuppressMessageAttributeState suppressMessageState, Func`3 getSemanticModel)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSourceOrByAnalyzers(ImmutableArray`1 diagnostics, Compilation compilation)
   at Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.ApplySuppressionsAndStoreAnalysisResult(AnalysisScope analysisScope, AnalyzerDriver driver, Compilation compilation, Func`2 getAnalyzerActionCounts, Boolean fullAnalysisResultForAnalyzersInScope)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext()
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariable(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationVariablesForErrorRecovery(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationExpressionAsError(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindValue(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, BindValueKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceOrTypeOrExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeOfTupleLiteral(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetDeclaredSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDeclaredSymbol(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.IsDiagnosticSuppressed(System.String, Microsoft.CodeAnalysis.Location, System.Func`3&lt;Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SemanticModel&gt;, Microsoft.CodeAnalysis.Diagnostics.SuppressMessageInfo ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState.ApplySourceSuppressions(Microsoft.CodeAnalysis.Diagnostic, System.Func`3&lt;Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SemanticModel&gt;, Microsoft.CodeAnalysis.ISymbol)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSource(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, Microsoft.CodeAnalysis.Compilation, Microsoft.CodeAnalysis.Diagnostics.SuppressMessageAttributeState, System.Func`3&lt;Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SemanticModel&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.FilterDiagnosticsSuppressedInSourceOrByAnalyzers(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, Microsoft.CodeAnalysis.Compilation)
   at Microsoft.CodeAnalysis.Diagnostics.AnalysisResultBuilder.ApplySuppressionsAndStoreAnalysisResult(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver, Microsoft.CodeAnalysis.Compilation, System.Func`2&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostics.Telemetry.AnalyzerActionCounts&gt;, Boolean)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64, Microsoft.CodeAnalysis, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ComputeAnalyzerDiagnosticsCoreAsync&gt;d__64 ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue`1&lt;Microsoft.CodeAnalysis.Diagnostics.CompilationEvent&gt;, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1+&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1+&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d, Microsoft.CodeAnalysis, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1&gt;d ByRef)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;&gt;c__DisplayClass57_1.&lt;ComputeAnalyzerDiagnosticsAsync&gt;b__1()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
`</Code>
    <Description>**Version Used**: 
VS2019 16.4.2
.NET Core 3.1

**Steps to Reproduce**:
1. Use the following code
``</Description>
  </Issue>
  <Issue>
    <IssueID>40709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>40709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual studio crashes when typing out a null-conditional index operation in Roslyn</Title>
    <CreatedDate>02/01/2020</CreatedDate>
    <ClosedDate>27/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>40709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>40709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.4.2
VisualStudio.16.Release/16.4.2+29613.14
Microsoft .NET Framework
Version 4.8.03752

**Steps to Reproduce**:

1.  Open the C# interactive window.
2. Type the following two lines into the interactive window as separate statements (so the first runs before you start typing the second):
    `String[] foo = null`
    `foo?[0]`

**Expected Behavior**:
The output `null`
**Actual Behavior**:
Visual Studio crashes when you type '['. I have tried verifying that is was not an extension by starting in safe mode, but Roslyn won't run when in safe mode. I have attached a debugger and I don't see any extensions in the stack trace, so I think it is all first party code. The stack trace I have gotten is as follows:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40705</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow editorconfig Naming Rules/Styles/SymbolSpecs to have uppercase letters</Title>
    <CreatedDate>02/01/2020</CreatedDate>
    <ClosedDate>10/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
I am trying to use .editorconfig at solution level to define naming conventions for the two C# projects in it. I have latest Visual Studio as of date, updated just today to 16.4.2. It is giving warnings where not expected. For example, for class names, property names, enum names it says that it should begin with lower case, whereas as per my convention in editorconfig, they are expected in pascal case. Similarly for private fields in class, I have defined field name to begin with underscore ("_") character but it is reporting that "_" is unexpected.

I am sure that it is using my editorconfig file because I see changes in messages if I deliberately change some parts just to see whether there is any impact. However, result is not as per expectation.
Some lines where error is reported but not expected are:
public partial class WebApplication : AnApplication - "The first word, 'WebApplication', must begin with a lower case character."
private readonly string _driverPath; - "Prefix '_' is not expected"
public RemoteWebDriver WebDriver { get; private set; } -  "The first word, 'WebDriver', must begin with a lower case character."

Are there more settings that need to be done? Is there an error in my editorconfig inputs?

Here is the relevant content of my editorconfig file.

``

---
### Original Comments

#### Visual Studio Feedback System on 12/30/2019, 01:49 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 12/30/2019, 02:21 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40693</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How do I optimize the build?</Title>
    <CreatedDate>02/01/2020</CreatedDate>
    <ClosedDate>02/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>40693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40693</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When I use roslyn, I find that there are a lot of useless DLL, in the debug folder, such as cs / de / es / fr / it / ja / ko / pl / ru / tr / zh-Hans / zh-Hant and so on.

How do I prevent them from building?

![image](

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>40687</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Property IsImplicitlyDeclared returns false for MySettings and similar symbols</Title>
    <CreatedDate>01/01/2020</CreatedDate>
    <ClosedDate>20/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>40687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>40687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csh
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;

internal static class Program
{
    private static async Task Main(string[] args)
    {
        MSBuildLocator.RegisterDefaults();

        using (var workspace = MSBuildWorkspace.Create())
        {
            var project = await workspace.OpenProjectAsync(@"E:\Projects\Mix\Foo\Foo.vbproj");
            Compilation compilation = await project.GetCompilationAsync().ConfigureAwait(false);
            var namespaceOrTypeSymbols = new Stack&lt;INamespaceOrTypeSymbol&gt;();
            namespaceOrTypeSymbols.Push(compilation.Assembly.GlobalNamespace);

            while (namespaceOrTypeSymbols.Count &gt; 0)
            {
                INamespaceOrTypeSymbol namespaceOrTypeSymbol = namespaceOrTypeSymbols.Pop();

                foreach (ISymbol symbol in namespaceOrTypeSymbol.GetMembers())
                {
                    switch (symbol.Kind)
                    {
                        case SymbolKind.Namespace:
                            {
                                namespaceOrTypeSymbols.Push((INamespaceSymbol)symbol);
                                break;
                            }
                        case SymbolKind.NamedType:
                            {
                                if (symbol.Name.StartsWith("My"))
                                {
                                    var namedType = (INamedTypeSymbol)symbol;
                                    Console.WriteLine($"{namedType.Name} {namedType.IsImplicitlyDeclared}");
                                    namespaceOrTypeSymbols.Push(namedType);
                                }

                                break;
                            }
                    }
                }
            }
        }

        Console.ReadKey();
    }
}

Output:

MyApplication False
MyComputer False
MyProject False
MySettings False
MySettingsProperty False
MyWebServices False
`</Code>
    <Description>**Version Used**: 3.4.0

**Steps to Reproduce**:

1. Create Visual Basic .NET Framework 4.7.2 Class Library
2. Enumerate symbols in this library
``

**Expected Behavior**:
property `IsImplicitlyDeclared` returns `true` for My... symbols
**Actual Behavior**:
property `IsImplicitlyDeclared` returns `false` for My... symbols</Description>
  </Issue>
  <Issue>
    <IssueID>40242</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpQualifyMemberAccessCodeFixProvider encountered an error</Title>
    <CreatedDate>08/12/2019</CreatedDate>
    <ClosedDate>14/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>40242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
protected override void OnStartup(StartupEventArgs? e)
{
               ↓ ctrl + . here 
    if (e is { Args: { Length: 1 } args })
    {
        var window = args[0];
        this.StartupUri = new Uri($"Windows/{window}.xaml", UriKind.Relative);
    }

    base.OnStartup(e);
}





System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameColon(NameColonSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSubpattern(SubpatternSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRecursivePattern(RecursivePatternSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.RecursivePatternSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIsPatternExpression(IsPatternExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)
   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)
   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()
   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>Repro code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>40241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio 16.4 deadlocks when saving files.</Title>
    <CreatedDate>08/12/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>40241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It happens a couple of times per day. The deadlock happens before files are written to disk so work is lost.

``

Don't have much info other than that this bug showed up in 16.4 and a suspicion that it might have something to do with multitargeted WPF control libraries.

I have tried waiting 30 minutes but no dice.</Description>
  </Issue>
  <Issue>
    <IssueID>40240</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Add missing cases' action when switching on nullable enum and bool</Title>
    <CreatedDate>08/12/2019</CreatedDate>
    <ClosedDate>09/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>40240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public static string Foo(Bar? bar)
{
    [||]switch (bar)
    {
    }
}


Expected action: 'Add missing cases'

cs
public static string Foo(Bar? bar)
{
    switch (bar)
    {
        case Bar.Option1:
            break;
        case Bar.Option2:
            break;
        case null:
            break;
    }
}
`</Code>
    <Description>**Version Used**: 16.4

``</Description>
  </Issue>
  <Issue>
    <IssueID>40235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>40235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>go-to dying repeatedly in latest VS.</Title>
    <CreatedDate>07/12/2019</CreatedDate>
    <ClosedDate>22/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using 

![image](

After only a few minutes of editing i consistently get into the state where 'go to' is totally broken and returns no values:

![image](

I believe @jnm2 is also running into this.  

</Description>
  </Issue>
  <Issue>
    <IssueID>40233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>40233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Full VS hang after updating to latest preview</Title>
    <CreatedDate>07/12/2019</CreatedDate>
    <ClosedDate>22/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>40233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>i updated to:

![image](

After a few minutes of editing i immediately hung.  Dump is available here: 

</Description>
  </Issue>
  <Issue>
    <IssueID>40231</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>when using an "is type pattern expression" the new variable is defined in the outer scope</Title>
    <CreatedDate>07/12/2019</CreatedDate>
    <ClosedDate>07/12/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
.NET core 3 project in VS2019

**Steps to Reproduce**:

1. compile the following snippet:
public static void Main()
{
	object x = "not an int";
	if (x is int y)
	{
		//y should be defined only in this scope
	}
	y = 1; //no error here, looks like y is being defined in the outer scope
}

**Expected Behavior**:
compiler error 

**Actual Behavior**:
no compiler error</Description>
  </Issue>
  <Issue>
    <IssueID>40224</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>There's a bug in map mode scroll bar when there's collapse</Title>
    <CreatedDate>07/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>40224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.4
When I collapse some code, scroll bar is like the follow picture:
Whatever I drag gray area or white area, the code window deosn't move view in the first few seconds, then it can move, but my mouse cursor isn't on the top of scroll bar.

![image](

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40216</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>40216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion incorrectly infers lambda parameter types when the lambda is passed as a named argument in a different position than the corresponding parameter</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>40216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>40216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I have a post on stackoverflow a bout this problem. Please review it---### Original Comments#### Visual Studio Feedback System on 11/18/2019, 10:25 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 12/3/2019, 05:11 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ExtractLocalFunction: code style for naming local functions isn't respected</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>23/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, if you extract a block of code to a local function, the local function will be named using PascalCase convention, instead of honoring the user's preference.</Description>
  </Issue>
  <Issue>
    <IssueID>40209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ExtractLocal: does not extract across local functions</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the following code, extracting a local for all instances of `i.ToString()` behaves correctly on the declaration of `x`, but not on the declaration of `y`. Only the instance on the declaration of `y` would be extracted, instead of both (see screenshot).

``

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40201</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>40201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>40201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>The Simplifier fails to simplify</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>12/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a case that the Simplifier should have been able handle.

![image](

Because it handles it when the unused `typeSymbol` variable name is changed to a discard.

![image](

Or when it is removed entirely.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0066 suggests to refactor ref returns</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static ref int GetRef(int[] mem, int addr, int mode)
{
  switch (mode)
  {
    case 0: return ref mem[mem[addr]];
    case 1: return ref mem[addr];
    default: throw new Exception();
  }
}


**Expected Behavior**:
Either doesn't offer to refactor, or refactors to something that is equivalent and compiles.

**Actual Behavior**:
Refactors as below which triggers compile errors CS1073, CS1525, and CS8150.
csharp
static ref int GetRef(int[] mem, int addr, int mode)
{
  return mode switch
  {
    0 =&gt; ref mem[mem[addr]],
    1 =&gt; ref mem[addr],
    _ =&gt; throw new Exception(),
  };
}
`</Code>
    <Description>**Version Used**:
3.4.0-beta4-19569-03+82f2e2541478e239dc4b04f231e90dc2b3dcb422

**Steps to Reproduce**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40197</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>40197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Fragile logic in classification of Stackalloc conversion</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>40197</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        public override Conversion GetStackAllocConversion(BoundStackAllocArrayCreation sourceExpression, TypeSymbol destination, ref HashSet&lt;DiagnosticInfo&gt; useSiteDiagnostics)
        {
            if (sourceExpression.Syntax.IsLocalVariableDeclarationInitializationForPointerStackalloc())
            {
`</Code>
    <Description>``

We should not be checking syntax here, all required information should be available from bound nodes.
</Description>
  </Issue>
  <Issue>
    <IssueID>40194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>High CPU in ComputeAnalyzerDiagnosticsAsync</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>40194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>40194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When building code using an external build system devenv.exe (Visual Studio 2019 16.3.4) CPU becomes abnormally high (while the VS window itself is minimized and should be idle). Looks like most of the time is spent in some code analysis-related methods starting with `ComputeAnalyzerDiagnosticsAsync`.

I'm not sure what's triggering this analysis, is it possible that some file changes or other disk acticity cause Visual Studio to run it?

It's not clear which public method invokes `ComputeAnalyzerDiagnosticsAsync`, but it looks like some of the public methods that do are obsolete with the following message: "This API was found to have performance issues and hence has been deprecated. Instead, invoke the API 'GetAnalysisResultAsync' and access the property 'CompilationDiagnostics' on the returned 'AnalysisResult' to fetch the compilation diagnostics."

Is it possible that Visual Studio is still calling one of the obsolete methods?

And, finally, is there some config to disable all code analysis for all projects at once?

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40188</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>40188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract method does not respect .editorconfig settings</Title>
    <CreatedDate>06/12/2019</CreatedDate>
    <ClosedDate>23/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40188</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp_style_expression_bodied_methods = true:silent
2. With the following code:

class Program
{
    static void Main(string[] args)
    {
        bool b = true;
        System.Console.WriteLine(b != true ? b = true : b = false);
    }
}

highlight b != true and select the extract method code action.

**Expected Behavior**:

class Program
{
    static void Main(string[] args)
    {
        bool b = true;
        System.Console.WriteLine({|Rename:NewMethod|}(b) ? b = true : b = false);
    }

    private static bool NewMethod(bool b) =&gt; b != true;
}


**Actual Behavior**:

class Program
{
    static void Main(string[] args)
    {
        bool b = true;
        System.Console.WriteLine(NewMethod(b) ? b = true : b = false);
    }

    private static bool NewMethod(bool b)
    {
        return b != true;
    }
}
`</Code>
    <Description>**Version Used**: 16.4.0 Preview 6.0

**Steps to Reproduce**:

1. Have .editorconfig containing ``
It seems that the issue involves extract method getting its options from the workspace rather than the document (thanks to @mavasani for helping figure this out).</Description>
  </Issue>
  <Issue>
    <IssueID>40185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0063 removes comments</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>10/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - enhanced using</Name>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>good first issue</Name>
        <IssueID>40185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When converting a block using statement to a simple using statement, Visual Studio deletes any trailing comments that were in the block (i.e. comments are only preserved if they're followed by code). My expectation is that IDE0063 should preserve everything that was in the using block.---### Original Comments#### Visual Studio Feedback System on 11/27/2019, 07:21 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40182</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler incorrectly compiling pointer constraints</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>10/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
unsafe class Generic&lt;T&gt; where T : byte*
{
}
`</Code>
    <Description>Consider this code

``

This should issue the following error:

&gt; Program.cs(10,39): error CS0706: Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or        a type parameter.

However the code is instead compiling. 

Checked with the native csc compiler and it does issue this error.</Description>
  </Issue>
  <Issue>
    <IssueID>40174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>More 'depth-first' initializing of implicit constructors.</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>09/12/2019</ClosedDate>
    <IssueLabels />
    <Code>csharp    
private class MyTestClass
{
    public static int FirstArrayEntry {get;} = MyList[0];
    private static IList&lt;int&gt; MyList {get;} = new List&lt;int&gt; {1};
}


Here's a better representation of the actual use-case which triggered us to find this bug:
csharp    
private class MyTestClass
  {
    public static IDictionary&lt;int,string&gt; MyDictionary {get;} = PerformSomeOperationToReceiveDictionary();
    private static Lazy&lt;bool&gt; CheckIfIShouldAddOtherThingsToDictionary {get;} = new Lazy&lt;bool&gt;(PerformDatabaseOperationToGetMyValue);

    private static IDictionary&lt;int,string&gt; PerformSomeOperationToReceiveDictionary() {
      var dictionary = new Dictionary&lt;int,string&gt;();
      dictionary.Add(0,"Some data has been added");

      if (CheckIfIShouldAddOtherThingsToDictionary.Value) {
        dictionary.Add(1,"I am now adding other data");
      }
      return dictionary;
    }

    private static bool PerformDatabaseOperationToGetMyValue() {
      //using(myDB) {
        return true;
      //}
    }
}
`</Code>
    <Description>**Version Used**: 
Whatever version is currently on try.dot.net -- I think that's the latest

**Steps to Reproduce**:
1. Create a static class with static properties -- I haven't found a way to replicate this with a non-static property because you can't use an accessor in a non-static property in-line initializer.
2. Make sure that the first static property calls an accessor of the second static property within the initializer.
3. When you attempt to call the first Static Property, you'll be met with a null reference exception.
4. When you reverse the order of the properties, it will work fine.

Here's a simple use case to see it in action. 
``

If you create an explicit static constructor and attempt to initialize the values in the same order, it becomes very clear why this behavior occurs. However, it becomes much more difficult to diagnose when you rely on the implicit constructor. Add to that the fact that Static Code Analyzers will tell you that your code is incorrectly ordered, and will tell you to change the order to align it with an ideal. It makes for a confusing experience.

**Expected Behavior**:
I expect to be able to change the order of any of my fields, properties, methods, etc, and have the code work just the same. 

**Actual Behavior**:
The order of in-line initializers determines the order of code executed in the implicit constructor and defines the order in which the properties, fields, methods must be declared in a file.</Description>
  </Issue>
  <Issue>
    <IssueID>40169</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# refactoring - slightly confusing convertion from 'if' construct to 'switch'</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>05/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>40169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>40169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>40169</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---My VS version is 16.3.10.When using the quick action "Convert 'if' construct to 'switch'", the code transformation, although apparently correct, looks slightly confusing.Original code:``---### Original Comments#### Visual Studio Feedback System on 11/22/2019, 01:06 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# refactoring - slightly confusing convertion from 'if' construct to 'switch'</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>10/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---My VS version is 16.3.10.When using the quick action "Convert 'if' construct to 'switch'", the code transformation, although apparently correct, looks slightly confusing.Original code:``---### Original Comments#### Visual Studio Feedback System on 11/22/2019, 01:06 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40164</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should report CS8600 rather than CS8606 assigning to an iteration variable</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>10/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40164</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Non-safety nullable warnings should use a single warning (CS8600) to allow those warnings to be suppressed easily (`#pragma warning disable 8600`). Currently, assigning to an iteration variable uses a distinct warning.
``</Description>
  </Issue>
  <Issue>
    <IssueID>40156</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE: Repeat key broken in overwrite mode</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>40156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var s = "The quick brown fox jumps over the lazy dog";

3. Press &lt;kbd&gt;Insert&lt;/kbd&gt; to switch to `OVR` mode
4. Put cursor at the beginning of the line, then hold spacebar

**Expected Behavior**:
All characters overwritten by spaces

**Actual Behavior**:
Only half of the characters were overwritten, it skips one character after each space:
cs
// before and after
var s = "The quick brown fox jumps over the lazy dog";
 a       T e q i k b o n f x j m s o e   h   a y d g ;
`</Code>
    <Description>**Version Used**: 16.5.0 Preview 1.0

**Steps to Reproduce**:

1. Open a large solution (important. I can't repro this issue in small solution)
2. Write a long line
``
</Description>
  </Issue>
  <Issue>
    <IssueID>40155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How can I remove unnecessary UsingCode?</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>09/12/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

Microsoft.Net.Compilers3.4.0
Microsoft.CodeAnalysis.CSharp.Workspaces3.4.0

**Steps to Reproduce**:

1. I used "DependencyContext.Default.GetDefaultAssemblyNames();" to get all namespace;
2. I built a string.
3. Compile it using the “CSharpCompilation.Emit method”.

**Expected Behavior**:
using System;
using UT.Model;
**Actual Behavior**:
![image](

If I use string compilation,  I have to refer to the namespace accurately. can I get rid of useless references?</Description>
  </Issue>
  <Issue>
    <IssueID>40151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go to Definition with decompiled sources is useless</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>12/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>40151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    //
    // Summary:
    //     Represents a specific JSON value within a System.Text.Json.JsonDocument.
    public readonly struct JsonElement
    {
        //
        // Summary:
        //     Represents an enumerator for the contents of a JSON array.
        public struct ArrayEnumerator : IEnumerable&lt;JsonElement&gt;, IEnumerable, IEnumerator&lt;JsonElement&gt;, IEnumerator, IDisposable
        {
            private object _dummy;

            private int _dummyPrimitive;

            //
            // Summary:
            //     Gets the element in the collection at the current position of the enumerator.
            //
            // Returns:
            //     The element in the collection at the current position of the enumerator.
            public JsonElement Current
            {
                get
                {
                    throw null;
                }
            }

            //
            // Summary:
            //     Gets the element in the collection at the current position of the enumerator.
            //
            // Returns:
            //     The element in the collection at the current position of the enumerator.
            object IEnumerator.Current
            {
                get
                {
                    throw null;
                }
            }

            //
            // Summary:
            //     Releases the resources used by this System.Text.Json.JsonElement.ArrayEnumerator
            //     instance.
            public void Dispose()
            {
            }

            //
            // Summary:
            //     Returns an enumerator that iterates through a collection.
            //
            // Returns:
            //     An enumerator that can be used to iterate through the array.
            public ArrayEnumerator GetEnumerator()
            {
                throw null;
            }

            //
            // Summary:
            //     Advances the enumerator to the next element of the collection.
            //
            // Returns:
            //     /// true if the enumerator was successfully advanced to the next element; false
            //     if the enumerator has passed the end of the collection.
            public bool MoveNext()
            {
                throw null;
            }

            //
            // Summary:
            //     Sets the enumerator to its initial position, which is before the first element
            //     in the collection.
            public void Reset()
            {
            }

            //
            // Summary:
            //     Returns an enumerator that iterates through a collection.
            //
            // Returns:
            //     An enumerator for an array of System.Text.Json.JsonElement that can be used to
            //     iterate through the collection.
            IEnumerator&lt;JsonElement&gt; IEnumerable&lt;JsonElement&gt;.GetEnumerator()
            {
                throw null;
            }

            //
            // Summary:
            //     Returns an enumerator that iterates through a collection.
            //
            // Returns:
            //     An enumerator that can be used to iterate through the collection.
            IEnumerator IEnumerable.GetEnumerator()
            {
                throw null;
            }
        }
`</Code>
    <Description>**Version Used**: 
VS2019 16.3.10
.NET Core 3.0

**Steps to Reproduce**:

1. Enable  navigation to decompiled sources
![image](

2. Find a type you're interested in and "Go to Definition"
![image](


**Expected Behavior**:
Get the real code decompiled (even better, downloaded from source reference)!

**Actual Behavior**:
Get useless satellite assembly sources (with no implementation details)

Example:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>40149</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>40149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Handle array type patterns in switch statements</Title>
    <CreatedDate>05/12/2019</CreatedDate>
    <ClosedDate>06/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>40149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>40149</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    case A[]:

However, it is likely that this will parse as an expression.  The binder should be flexible enough to take the parse tree (for the expression) and bind it as a type, and the pattern binder should be capable of backing off from the expression interpretation to the type interpretation.

Similarly
csharp
    case (A[]):
`</Code>
    <Description>In the proposed changes for C# 9.0, a type expression such as `A[]` can in theory be used as a switch case.
``
This should have the same meaning as above, but currently parses as an erroneous cast expression.
</Description>
  </Issue>
  <Issue>
    <IssueID>40146</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use multiplex stream from StreamJsonRpc</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>19/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>40146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This will allow us to use a single stream over a single remote connection for all remote calls.</Description>
  </Issue>
  <Issue>
    <IssueID>40141</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`DisallowNull` not respected with unconstrained generics</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40141</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Diagnostics.CodeAnalysis;
#nullable enable
public class C&lt;T&gt; {
    public void M(T t) {
        M2(t); // Should warn, doesn't
    }
    
    public void M2([DisallowNull] T t) {}
}
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>40139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Warning reported assigning parameter marked [DisallowNull] to object</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>18/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>40139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    object _f;

    C([DisallowNull]T t)
    {
        _f = t; // warning CS8601: Possible null reference assignment
    }
}
`</Code>
    <Description>No warning should be reported:
``</Description>
  </Issue>
  <Issue>
    <IssueID>40136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Stack overflow when attribute is applied on it's own constructor and nullability is enabled</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0 (VS 16.4.0, .NET Core SDK 3.1.100)

Worked on 3.3.1 (VS 16.3.x, .NET Core SDK 3.0.101)

**Steps to Reproduce**:

Enabled nullability (either in MSBuild or using `#nullable enable`).

Use the following:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>40130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Error: Microsoft.Net.Compilers is only supported on MSBuild v16.3 and above</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Microsoft.Net.Compilers 3.4.0

**Steps to Reproduce**:

1. Update package Microsoft.Net.Compilers from 3.3.1 to 3.4.0 in project A (.Net Framework 4.8 MVC 5 Web App)
2. Build MSTest project that references project A (.Net Framework 4.8 class library)

**Expected Behavior**: No error message

**Actual Behavior**: Error message "Microsoft.Net.Compilers is only supported on MSBuild v16.3 and above."

It seems that inside "Microsoft.Net.Compilers.Props" the variable $(MSBuildToolsVersion) evaluates to "Current". Hence the condition "'$(MSBuildToolsVersion)' &amp;lt; '16.3'" is not met

</Description>
  </Issue>
  <Issue>
    <IssueID>40129</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>40129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft.Net.Compilers is only supported on MSBuild v16.3 and above</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>16/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 3.4.0


**Steps to Reproduce**:

1. Using VisualStudio 2019 16.4
2. Build UWP project


**Tips: Same project work well in Microsoft.Net.Compilers 3.3.1**


**Expected Behavior**:
Build succeed
**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>40121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>40121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Output Window Warning Links to the Wrong File</Title>
    <CreatedDate>04/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Project</Name>
        <IssueID>40121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---# SetupVisual Studio 2019 version 16.4.0 preview 4.0I have two almost identical files in my solution. They are in two different projects a core and a .net Framework.The only difference between the files is that I have added a ? after string in the Core version of the file which creates a warning because I haven't enable the nullable annotation.When compiling I get the expected warning in the output window:1&gt;Program.cs(9,19,9,20): warning CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.When I double click the warning it takes me to the file in the .NET framework project which doesn't have the issue. It should have taken me to the Core version of the file where the warning belongs to.If I go to the Error List window and double click the same warning then it is taking me to the right file.---### Original Comments#### Visual Studio Feedback System on 11/14/2019, 11:30 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>40113</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cast with user-defined conversion doesn't honor [AllowNull].</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>40113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: C# 8, .Net Standard 2.1, Nullable Reference Context enabled

**Steps to Reproduce**:

1. Create a generic wrapper for all variables, fields, parameters and returns, to protect them from future syntax changes in C#, such as J{Y} where Y is anything and everything.
2. Add implicit casts to make everything transparent, in and out of code, new and old, however interpolated and strung together.
3. I still get compiler warnings!

**Expected Behavior**:

I must not get compiler warnings.

**Actual Behavior**:

I get compiler warnings.

``
[sharplab](

Why is this valuable? Well, C# can change syntax and semantics however it wants, but all my variables, fields, parameters and returns will ALWAYS be protected in J{Y}, saving them from most possible future rewrites. Performance is fairly good, as short methods are ALWAYS inlined, the best of both worlds!</Description>
  </Issue>
  <Issue>
    <IssueID>40112</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>BoundTreeGenerator should add nullable annotations where Null="allow"</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>12/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>40112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It feels like a nullable annotation should be used for any reference type field with `Null="allow"`. Let's update either the generator or BoundNodes.xml to do this.

_Originally posted by @RikkiGibson in </Description>
  </Issue>
  <Issue>
    <IssueID>40111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>40111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect warning on cast to non-nullable reference type</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>40111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp

#nullable enable
public class C 
{
    public void M(object? o) 
    {
        _ = (object)o == null; // warning CS8600: Converting null literal or possible null value to non-nullable type.
    }
}
`</Code>
    <Description>In the following code sample, I expect no warning on the cast.

``</Description>
  </Issue>
  <Issue>
    <IssueID>40110</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8620, incorrect generic argument nullability inferred on optional parameter even though it has [AllowNull]</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>14/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>40110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>40110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

static class Extensions
{
    public static T Foo&lt;T&gt;(this IList&lt;T&gt; p1, [AllowNull] T p2 = default)
    {
        throw new NotImplementedException();
    }

    static void M()
    {
        var instance = new List&lt;object&gt;();

        // CS8620 Argument of type 'List&lt;object&gt;' cannot be used for parameter 'p1' of type
        // 'IList&lt;object?&gt;' in 'object? Extensions.Foo&lt;object?&gt;(IList&lt;object?&gt; p1, object? p2 =
        // null)' due to differences in the nullability of reference types.
        //      ↓
        var x = instance.Foo();
    }
}


One workaround is to specify the types explicitly. This causes the text to fade, showing that the explicit type is not needed:

cs
        // Faded to show as unnecessary
        //                   ↓
        var x = instance.Foo&lt;object&gt;();
`</Code>
    <Description>**Version Used**: 16.4, not present in 16.3

I would have expected `[AllowNull]` to mean that `T` is inferred as non-nullable. `T` does not need to be nullable in order for `= default` to fit an `[AllowNull] T` parameter.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>40109</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add NuGet Package wiki entry for latest Roslyn release</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>40109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As the wiki isn't publically editable ( can I suggest the follow addition to  under the `Versioning` section:
- Version `3.4` includes C# 8.0 (Visual Studio 2019 version 16.4, .NET Core 3.1)
</Description>
  </Issue>
  <Issue>
    <IssueID>40105</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CreateTupleTypeSymbol requires you to pass the element nullabilities explicitly</Title>
    <CreatedDate>03/12/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>40105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Compilation.CreateTupleTypeSymbol has an overload that has an elementNullableAnnotations parameter that explicitly lets you give the element's top level nullabilities. This was the API that existed prior types having top-level nullability on them directly. Now, if you call this method but don't pass elementNullableAnnotations at all, I would have expected it would use the top-level nullabilities on the symbols. Instead, it seems those are just dropped:

</Description>
  </Issue>
  <Issue>
    <IssueID>40092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>40092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extern events should not be allowed to have initializers</Title>
    <CreatedDate>02/12/2019</CreatedDate>
    <ClosedDate>13/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>40092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
public class Class1 {
    extern event Action Event1 = null;
}


**Expected Behavior**:

Should have an error similar to `error CS0074: 'Class1.Event1': abstract event cannot have initializer`, but referring to 'extern event' instead of 'abstract event'

**Actual Behavior**:
Produces an assembly which decompiles approximately to the following:

cs
public class Class1
{
    [CompilerGenerated]
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private Action m_Event1 = null;

    private event Action Event1
    {
        [CompilerGenerated]
        add;
        [CompilerGenerated]
        remove;
    }
}
`</Code>
    <Description>**Version Used**: 
3.5.0-beta1-19568-03 (b4c245ac)

**Steps to Reproduce**:

``

**Spec language**:



&gt; It is a compile-time error for a *variable_declarator* of an event declaration with an `abstract` or `external` modifier to include a *variable_initializer*.</Description>
  </Issue>
  <Issue>
    <IssueID>40086</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>40086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>40086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>LSP handling of Code Actions is expensive</Title>
    <CreatedDate>02/12/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>40086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>40086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Also tracked by 

1. In the case where the client does not support workspace edits, don't precompute the results of actions. Line 52 here causes the code action to produce its updated solution, but when a client doesn't support workspace edits, that result is never used:



2. In the case where the client _does_ support workspace edits, do we really want to be calculating all possible futures before the user has even invoked the lightbulb?</Description>
  </Issue>
  <Issue>
    <IssueID>40082</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>40082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Thousands of red error squiggles that will not go away despite the sln successfully building with 0 msbuild errors.</Title>
    <CreatedDate>02/12/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>40082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS2019 16.4.0 Preview 6

I have a huge number of red squiggles that will not clear despite no build errors. The project builds and runs fine.

1.  Open my internal solution (contact me for access)
2.  Simply look at the code or build it. The errors are always there. A clean or deleting .vs folder does not fix it.

As the solution contains IP I cannot publicly host it, but I would be willing to share it on a one on one if someone is directly looking at it and can guarantee the solution will be deleted afterwards. I can also do a screenshare or collaborate on gitter.

**Expected Behavior**:
When there are no build errors, the error log also shows no build errors, and there are no red squiggles show.

**Actual Behavior**:
Thousands of red squiggles, edit and continue does not work (due to the errors). Actual output log shows 0 errors and solution builds correctly.

More information. For background read this post (it has MS only video and attachments). The 10 second intellisense completion issue is now fixed by @CyrusNajmabadi waiting to be merged however the error list remains.
</Description>
  </Issue>
  <Issue>
    <IssueID>39936</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ArgumentException in Microsoft.CodeAnalysis.SymbolKey.ErrorTypeSymbolKey.Resolve</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>29/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Visual Studio 2019 16.3.9 just crashed with the trace below. I was working in 7 files with changes which were not recovered. Why can an analyzer crash the IDE?There's no apparent way for me to reproduce, as I don't know what triggered the crash.``---### Original Comments#### Visual Studio Feedback System on 11/13/2019, 01:41 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 11/15/2019, 03:05 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions#### Paul Graves solved on 11/21/2019, 10:56 AM, 0 votes: &lt;p&gt;I have a &lt;strong&gt;reproducible &lt;/strong&gt;error in a solution in the very latest VS 2019 16.3.10 and W10 Pro 1903 18362.476&lt;/p&gt;&lt;p&gt;The exact stack location of the out of memory occurs randomly but it is always within Microsoft.CodeAnalysis:&lt;/p&gt;&lt;p&gt;Application: devenv.exe Framework Version: v4.0.30319 Description: The application requested process termination through System.Environment.FailFast(string message). Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.    at System.Collections.Immutable.ImmutableArray`1.Builder.ToArray()    at Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1.ToImmutableAndFree()    at Microsoft.CodeAnalysis.CSharp.Symbols.AbstractTypeMap.SubstituteTypes(ImmutableArray`1 original)    at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray`1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)    at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder`1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet`1&amp; useSiteDiagnostics)    at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder`1 results, ArrayBuilder`1 members, ArrayBuilder`1 typeArguments, BoundExpression receiverOpt, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary`2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet`1&amp; useSiteDiagnostics, Boolean allowUnexpandedForm)&lt;/p&gt;&lt;p&gt;....&lt;/p&gt;&lt;p&gt;&lt;b&gt;I  believe this has been caused by someone managing to introduce into the codebase of the solution some new code that has c# 7.2 language features when the containing project is on a lower version of .NET that doesn't support these features.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;If that project is in the solution (say as a unit test project as in our case) - it appears still to build but will crash the code analyser (presumably because it isn't expecting to see that syntax in that project .NET version!)&lt;/p&gt;&lt;p&gt;Having refactored these language features out, it has not been reproducible.&lt;/p&gt;&lt;p&gt;Hope this helps others as I have just lost over a day finding this out!&lt;/p&gt;#### Manish Vasani on 11/21/2019, 11:08 AM: &lt;p&gt;Hi Paul,&lt;br&gt;Can you please submit a separate feedback ticket? The original reported bug is a crash from System.ArgumentException. Your report seems to be an unrelated OutOfMemory exception.&lt;/p&gt;&lt;p&gt;Regards,&lt;br&gt;Manish&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>39927</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Slow analyzer hurt editor experiance</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <IssueLabels />
    <Description>

With ^ the editor experience in Visual Studio suffered a lot.
- Typing lag
- Test runner slow or not running tests at all.
- Lightbulb taking 30 s to open etc.

I'm thinking maybe the analyzers used by the current document should also move out of process. Benefits would be that a crash would not crash VS and a memory leak would not hurt VS in the same way.
</Description>
  </Issue>
  <Issue>
    <IssueID>39926</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>39926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Warning reported for assignment to property marked [AllowNull]</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>22/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39926</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    [MaybeNull, AllowNull]
    T F = default;
    [MaybeNull, AllowNull]
    T P { get; } = default; // warning CS8601: Possible null reference assignment

    C([AllowNull]T t)
    {
        F = t;
        P = t; // warning CS8601: Possible null reference assignment
    }
}
`</Code>
    <Description>No warnings should be reported:
``
See also </Description>
  </Issue>
  <Issue>
    <IssueID>39922</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>39922</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Warning reported for assignment to out parameter with [MaybeNull] or [MaybeNullWhen(...)]</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>18/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39922</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39922</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39922</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39922</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

class Program
{
    static void GetValue&lt;T&gt;([AllowNull]T x, [MaybeNull]out T y)
    {
        y = x; // warning CS8601: Possible null reference assignment
    }

    static bool TryGetValue&lt;T&gt;([AllowNull]T x, [MaybeNullWhen(false)]out T y)
    {
        y = x; // warning CS8601: Possible null reference assignment
        return y != null;
    }
}
`</Code>
    <Description>No warning should be reported for the assignments:
``

For `[MaybeNullWhen(...)]`, perhaps the compiler should allow assignment without warning to the variable regardless of the return value.

cc @stephentoub 
</Description>
  </Issue>
  <Issue>
    <IssueID>39921</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning for uninitialized field with [AllowNull]</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39921</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39921</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

class C&lt;T&gt;
{
    [AllowNull]T F1;            // warning CS8618: Non-nullable field 'F1' is uninitialized
    [MaybeNull, AllowNull]T F2; // warning CS8618: Non-nullable field 'F2' is uninitialized
}
`</Code>
    <Description>No uninitialized field warnings should be reported for the following:
``
cc @stephentoub </Description>
  </Issue>
  <Issue>
    <IssueID>39917</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Not obvious how to remove CS8618 warning with generics</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>11/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39917</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39917</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39917</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Merge&lt;T&gt;
       where T : notnull      
    {
        private bool _first = true;
        private T _merged; // CS8618 warning on the constructor
        private readonly Func&lt;T, T, T&gt; _merge;

        public Merge(Func&lt;T, T, T&gt; merge)
        {
            _merge = merge;
        }
       
        public T Next(T item)
        {
            if (_first)
            {
                _first = false;
                _merged = item;
            }
            else
            {
                _merged = _merge(_merged, item);
            }
            return _merged;
        }
    }

It's not obvious how to get rid of the uninitialised _merged warning. From the documentation, I'd expected the following to work, but it doesn't:

csharp
   [MaybeNull] private T _merged;

NB: The the following does remove the warning.

csharp
   private T _merged = default!


Kind of duplication of [37511](https://github.com/dotnet/roslyn/issues/37511), but ideally I'd like some way of telling the compiler that I never want to read the value of this field unless it's been initialised. FWIW, I also tried:

csharp
   [MaybeNull][DisallowNull] private T _merged;
`</Code>
    <Description>Consider the following generic class:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>39916</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Generate Equals and GetHashCode...' should honor 'csharp_style_var_when_type_is_apparent = false:error' editorconfig setting</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>22/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39916</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39916</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39916</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39916</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>editorconfig
[*.cs]
csharp_style_var_when_type_is_apparent = false:error

2. Write a new class with 10 or more fields or properties:
cs
class S {
    public int A;
    public int B;
    public int C;
    public int D;
    public int E;
    public int F;
    public int G;
    public int H;
    public int I;
    public int J;
}

3. Open Quick Actions on `S`, select `Generate Equals and GetHashCode...`, leave all fields selected.

**Expected Behavior**:
Generated `GetHashCode` declares `hash` as:
cs
HashCode hash = new HashCode();


**Actual Behavior**:
Generated `GetHashCode` declares `hash` as:
cs
var hash = new HashCode();
`</Code>
    <Description>**Version Used**: 16.4.0 Preview 5.0

**Steps to Reproduce**:

1. Set .editorcofig as follows:
``
which then produces error at the `var` keyword.</Description>
  </Issue>
  <Issue>
    <IssueID>39915</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Attempting to change severity of an analyzer fails and throws up yellow bar</Title>
    <CreatedDate>21/11/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39915</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.5.0 Preview 2.0 [29520.138.master

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 8a68d2b7737fbf19d96ba41a53cc1c6617d396c8`
4. `ProjectSystem.sln`
5. Navigate to src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\Packaging\ManagedProjectSystemPackage.cs
6. On line 43, drop down Lightbulb
7. Choose: 
![image](


**Expected Behavior**:
.editorconfig to be changed.

**Actual Behavior**:
Yellow bar with the following:

``</Description>
  </Issue>
  <Issue>
    <IssueID>39909</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>39909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# override completion does not seem to be adding using directives</Title>
    <CreatedDate>20/11/2019</CreatedDate>
    <ClosedDate>17/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>39909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>39909</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.5.0 Preview 2.0 [29519.175.master]

Is this a known regression?</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39909</IssueID>
        <PullRequestID>43173</PullRequestID>
        <Title>Fix override completion to preserve added imports</Title>
        <Description>Fix #39909
The regression is caused by adding simplifier annotation to added imports (
</Description>
        <CreatedDate>08/04/2020</CreatedDate>
        <ClosedDate>09/04/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>39909</IssueID>
            <PullRequestID>43173</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39909</IssueID>
            <PullRequestID>43173</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39906</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Spurious CS8625 warning when checking null against type with equality overloads</Title>
    <CreatedDate>20/11/2019</CreatedDate>
    <ClosedDate>20/11/2019</ClosedDate>
    <IssueLabels />
    <Code>c#
public class NullableTestType
{
    public override bool Equals(object? obj) =&gt; false;
    public override int GetHashCode() =&gt; 0;
    public static bool operator ==(NullableTestType a, NullableTestType b) =&gt; a == b;
    public static bool operator !=(NullableTestType a, NullableTestType b) =&gt; a != b;

    public static int TestMethod(NullableTestType value)
    {
        if (value == null) // Generates CS8625 when equality operators are included
            throw new ArgumentNullException(nameof(value));

        return value.GetHashCode();
    }
}


**Expected Behavior**:

Checking for null equality should be allowed.

**Actual Behavior**:

Warning CS8625 is generated.

A workaround seems to be using the `is` syntax instead of checking for equality, i.e.

c#
if (value is null) // Doesn't generate an error
    throw new ArgumentNullException(nameof(value));
`</Code>
    <Description>**Version Used**: 

- Visual Studio 16.3.9
- .NET Core 3.0.100
- C# 8
- Nullable types enabled

**Steps to Reproduce**:

When performing a null check of a value that overloads the equality operators, warning CS8625 is generated. (Cannot convert null literal to non-nullable reference type).

Consider the example below for a class that overloads the equality operators. (The implementations are just stubs but the content doesn't seem to matter).

When attempting to perform a null check in `TestMethod`, the compiler generates warning CS8625. If I comment out the operator overloads the warning goes away.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>39904</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cyclic project references can hang the IDE</Title>
    <CreatedDate>20/11/2019</CreatedDate>
    <ClosedDate>29/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Project</Name>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39904</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.4 Preview 4

**Steps to Reproduce**:

1. Create a project with a `&lt;ProjectReference&gt;` to itself. This can also occur if the project contains a `&lt;Reference&gt;` to an assembly with the same name as the project, since the project system can implicitly convert this to a `&lt;ProjectReference&gt;` for use in the IDE.
2. Edit the project and attempt to use code fixes.

**Expected Behavior**:

An error is reported in the error list for the cyclic reference.

**Actual Behavior**:

The IDE hangs.

`!dumpasync` shows an asynchronous stack that attempts to recursively obtain a semaphore, and thus cannot make progress:

``</Description>
  </Issue>
  <Issue>
    <IssueID>39902</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Error list experience on closing documents</Title>
    <CreatedDate>20/11/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39902</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>39902</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>39902</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Follow-up issue to discuss  That PR restores the prior error list behavior of removing closed file diagnostics from error list whenever a document is closed. This issue tracks discussing if we want to change that experience.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39902</IssueID>
        <PullRequestID>39892</PullRequestID>
        <Title>Remove diagnostics from error list on document close or reset for tha…</Title>
        <Description>…t document

This fixes a recent regression where we stopped clearing out documents diagnostics on document close for TypeScript.

Fixes #39902

--------------------
**More Context**

1. Prior behavior (when closed file diagnostics/FSA is turned off):
    1. We only compute diagnostics for opened files and populate error list
    2. When user closes a file, we explicitly remove the diagnostics from the error list for that file.
2. Recently, we added [new functionality]( to re-purpose “Run Code Analysis” command for C# and VB projects, which regressed the above behavior.
    1. With this command, users can force compute live diagnostics for any project or current solution on demand. Computed diagnostics include both open file and closed file diagnostics and they are automatically populated in the error list.
    2. We want these diagnostics to stay in the error list even for closed files. I had to make a change to diagnostic service to not force remove all closed file diagnostics, otherwise this command was populating the correct diagnostics in error list only for them to be immediately removed for all closed files.
3. New behavior:
    1. We only compute diagnostics for opened files and populate error list by default
    2. Users can force complete diagnostics for closed files by using explicit commands, at which point error list will also contain closed file diagnostics
    3. When user closes the file, we do not remove the diagnostics from the error list. User can switch the error list scope combo box to “Open documents” instead of the default “Entire solution” to only view diagnostics for opened documents.

We feel the new behavior is more logical – error list contents are purely what diagnostics have been computed and is not affected by actions such as closing a file. Users should be taught to use the error list scope combo box if they desire to get differing views over data, such as Current Document, Open Documents, and so on, instead of us trying to proactively do so for users by modifying the actual error list contents.

However, TypeScript would like to retain the old behavior. So we have decided to add a hook to allow a per-language setting to decide between the old and new behavior.</Description>
        <CreatedDate>19/11/2019</CreatedDate>
        <ClosedDate>03/12/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39902</IssueID>
            <PullRequestID>39892</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39889</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deadlock caused by AbstractAddImportCodeFixProvider attempting to get NuGet package sources</Title>
    <CreatedDate>19/11/2019</CreatedDate>
    <ClosedDate>30/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39889</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground&lt;System.Collections.Immutable.ImmutableArray&lt;System.__Canon&gt;&gt;(System.Threading.Tasks.Task&lt;System.Collections.Immutable.ImmutableArray&lt;System.__Canon&gt;&gt; task, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetCodeFixes(Microsoft.CodeAnalysis.Editor.Shared.ITextBufferSupportsFeatureService supportsFeatureService, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Document document, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.TryGetSuggestedActionSets.AnonymousMethod__0(Microsoft.VisualStudio.Utilities.IUIThreadOperationContext c)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VSUIThreadOperationExecutor.Execute(Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions executionOptions, System.Action&lt;Microsoft.VisualStudio.Utilities.IUIThreadOperationContext&gt; action)	Unknown
 	Microsoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VSUIThreadOperationExecutor.Execute(string title, string defaultDescription, bool allowCancellation, bool showProgress, System.Action&lt;Microsoft.VisualStudio.Utilities.IUIThreadOperationContext&gt; action)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.UIThreadOperationExecutor.Execute(string title, string defaultDescription, bool allowCancellation, bool showProgress, System.Action&lt;Microsoft.VisualStudio.Utilities.IUIThreadOperationContext&gt; action)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.TryGetSuggestedActionSets(out System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet&gt; actionSets, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet overrideRequestedActionCategories)	Unknown
 	Microsoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.VisualStudio.Text.Editor.ITextView textView, Microsoft.VisualStudio.Text.ITrackingPoint triggerPoint, Microsoft.VisualStudio.Text.ITrackingSpan triggerSpan, System.Collections.Generic.Dictionary&lt;Microsoft.VisualStudio.Text.SnapshotSpan, System.Collections.Generic.IEnumerable&lt;Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource&gt;&gt; subjectSpansAndSources, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet applicableCategories, bool preQuerySuggestedActions, bool trackMouse)	Unknown


**Background thread:**

 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronously(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask&lt;bool&gt;.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run&lt;bool&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)	Unknown
 	NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSolutionManager.IsSolutionOpen.get()	Unknown
 	NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.ResetSolutionSettingsIfNeeded()	Unknown
 	NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.SolutionSettings.get()	Unknown
 	NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.GetSection(string sectionName)	Unknown
 	NuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSourceLookup(bool byName, NuGet.Configuration.ISettings settings)	Unknown
 	NuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSources(NuGet.Configuration.ISettings settings, System.Collections.Generic.IEnumerable&lt;NuGet.Configuration.PackageSource&gt; defaultPackageSources)	Unknown
 	NuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSources()	Unknown
 	NuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.VsPackageSourceProvider.GetSources(bool includeUnOfficial, bool includeDisabled)	Unknown
&gt;	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.GetPackageSources()	Unknown
 	Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetCodeFixesAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fixer, bool isBlocking, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesAsync.AnonymousMethod__2(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; dxs)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesOrConfigurationsAsync.AnonymousMethod__2()	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFix&gt;&gt;(Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, object extension, System.Func&lt;System.Threading.Tasks.Task&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFix&gt;&gt;&gt; function, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFix&gt; defaultValue)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesOrConfigurationsAsync&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider&gt;(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan fixesSpan, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticData&gt; diagnosticsWithSameSpan, bool fixAllForInSpan, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection&gt; result, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fixer, System.Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; hasFix, System.Func&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, System.Threading.Tasks.Task&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFix&gt;&gt;&gt; getFixes, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticData&gt; diagnostics, bool fixAllForInSpan, bool isBlocking, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder&lt;Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection&gt; result, System.Threading.CancellationToken cancellationToken)	Unknown
`</Code>
    <Description>**Version Used**: Latest 16.5 Preview2 dogfood build (29518.163.master)

**Repro steps (pretty consistent repro)**

1. Create a new C# project
2. Add code so you have missing usings. For example, just type out a `Console.Write(...);`, but no `using System;` so you get compiler errors. Place the cursor on the squiggle and click save all.
3. Close VS
4. Restart VS, open the same project
5. Hit Ctrl + Dot - if you do this before the red squiggle shows up, I invariably see this deadlock. 

I think there might be other ways to hit this, but I found this was a pretty consistent repro for me.

Dump shared at: `\\&lt;%internal_share%&gt;\public\mavasani\Deadlock_Ctrl_Dot\devenv.dmp`

**Main thread:**
``</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>39888</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>39888</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unexpected nullable warning from default in switch expression</Title>
    <CreatedDate>19/11/2019</CreatedDate>
    <ClosedDate>05/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39888</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39888</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable

using System.Diagnostics.CodeAnalysis;

class Program
{
    [return: MaybeNull] static T F&lt;T&gt;(bool b, T t)
    {
        return b switch
            {
                false =&gt; t,
                _ =&gt; default // warning CS8601: Possible null reference assignment
            };
    }
}
`</Code>
    <Description>The following should compile without warnings:
``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39888</IssueID>
        <PullRequestID>39983</PullRequestID>
        <Title>More tests for [MaybeNull]</Title>
        <Description>Fixes </Description>
        <CreatedDate>22/11/2019</CreatedDate>
        <ClosedDate>05/12/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39888</IssueID>
            <PullRequestID>39983</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>39888</IssueID>
            <PullRequestID>39983</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39887</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NuGet package description typo</Title>
    <CreatedDate>19/11/2019</CreatedDate>
    <ClosedDate>20/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> has "Destkop" instead of "Desktop"

Would submit a PR but I couldn't quickly find this text anywhere in the repo.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39887</IssueID>
        <PullRequestID>39272</PullRequestID>
        <Title>Document compiler package usage</Title>
        <Description>Cleaning up the documentation on our compiler toolset packages to make
the supported use cases explicitly clear. Previously this information
was only avaliable in scattered issues throughout the repsitory
([example](

The package description is likely the best place for this information.</Description>
        <CreatedDate>14/10/2019</CreatedDate>
        <ClosedDate>04/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39887</IssueID>
            <PullRequestID>39272</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>39272</PullRequestID>
            <IssueID>39887</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39886</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Enabling nullable reference context forces too many "?" suffixes.</Title>
    <CreatedDate>19/11/2019</CreatedDate>
    <ClosedDate>19/11/2019</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: C# 8

**Steps to Reproduce**:

1. Enable nullable reference context.
2. Create a new class library.
3. You realize the need to use the "?" suffix extensively for public member parameters.

**Expected Behavior**:

Both "string" and "int" should indicate default behaviors, while "string?" and "int?" indicate nullable types and "string!" and "int!" indicate non-nullable types, for syntactical consistency. Defaults should be set as follows, to adhere to Internet protocol conventions, loose on inputs and strict on outputs, given that most API's prefer location transparency, local and remote alike: (1) inputs default to nullable and outputs to non-nullable; (2) returns and getters default to non-nullable to make null propagation optional, while out parameters and setters default to nullable for default values, especially in the case of TryXXX() methods, which make all nullable returns obsolete; (3) public and protected member inputs default to nullable for caller-friendliness and Internet-friendliness, as all inputs should be optional and have good defaults, while internal and private member inputs to non-nullable, as nulls should be handled at the "public surface".

This way, we can eliminate most type suffixes and encourage a very well-behaving API design.

**Actual Behavior**:

You realize the need to use the "?" suffix extensively for public member parameters.
</Description>
  </Issue>
  <Issue>
    <IssueID>39877</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Decompiled source includes an empty comment above each method</Title>
    <CreatedDate>19/11/2019</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS master 29513.77

**Steps to Reproduce**:

1. Open ProjectSystem.sln from 
2. Navigate ManagedProjectSystemPackage.cs
3. Go To Defition on the `PackageRegistration` attribute (or open any project and Go To Definition on anything from a reference that doesn't have XML comments)

**Expected Behavior**:

Decompilation is shown without comments above members

**Actual Behavior**:

An empty single line comment is displayed, initially collapsed, above members.

This is annoying because it means I have to expand each collapsed section to see if there is any comments for me to read.</Description>
  </Issue>
  <Issue>
    <IssueID>39869</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Memory allocation using method group</Title>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>18/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>39869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;
using System;

namespace ConsoleApp9
{
    class Program
    {
        static void Main() =&gt; BenchmarkRunner.Run&lt;Bench&gt;();
    }

    [MemoryDiagnoser]
    public class Bench
    {
        private static Func&lt;int, int&gt; cached = Method;

        [Benchmark]
        public void MethodGroup() =&gt; Action(Method);

        [Benchmark]
        public void StaticFunc() =&gt; Action(cached);

        [Benchmark]
        public void Lambda() =&gt; Action(a =&gt; Method(a));

        private void Action(Func&lt;int, int&gt; func) { }

        private static int Method(int i) =&gt; 0;
    }
}

Project file:
xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="BenchmarkDotNet" Version="0.12.0" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;


Results:
 ini

BenchmarkDotNet=v0.12.0, OS=Windows 10.0.14393.3243 (1607/AnniversaryUpdate/Redstone1)
Intel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores
Frequency=3515625 Hz, Resolution=284.4444 ns, Timer=TSC
.NET Core SDK=3.0.100
  [Host]     : .NET Core 3.0.0 (CoreCLR 4.700.19.46205, CoreFX 4.700.19.46214), X64 RyuJIT
  DefaultJob : .NET Core 3.0.0 (CoreCLR 4.700.19.46205, CoreFX 4.700.19.46214), X64 RyuJIT



|      Method |      Mean |     Error |    StdDev |    Median |  Gen 0 | Gen 1 | Gen 2 | Allocated |
|------------ |----------:|----------:|----------:|----------:|-------:|------:|------:|----------:|
| MethodGroup | 9.2319 ns | 0.2163 ns | 0.4883 ns | 9.1957 ns | 0.0153 |     - |     - |      64 B |
|  StaticFunc | 0.0060 ns | 0.0117 ns | 0.0164 ns | 0.0000 ns |      - |     - |     - |         - |
|      Lambda | 0.2220 ns | 0.0364 ns | 0.0433 ns | 0.2135 ns |      - |     - |     - |         - |

I ran into this issue when using `ConcurrentDictionary`:
c#
public class CachingStrategy
{
        private static readonly ConcurrentDictionary&lt;Type, CacheEntry&gt; _cache = new ConcurrentDictionary&lt;Type, CacheEntry&gt;();

        public virtual CacheEntry Cache(object value)
        {
            // allocates Func each call, disasmed line:
            // CacheEntry orAdd = CachingStrategy._cache.GetOrAdd(value.GetType(), new Func&lt;Type, CacheEntry&gt;((object) null, __methodptr(CreateCacheEntry)));
            return _cache.GetOrAdd(value.GetType(), CreateCacheEntry);

            // does not allocate 
            //return _cache.GetOrAdd(value.GetType(), t =&gt; CreateCacheEntry(t));
        }
        
        // it is static!
        private static CacheEntry CreateCacheEntry(Type type) =&gt; new CacheEntry(type);
}

public class CacheEntry
{
   public CacheEntry(Type type) { }
}


This behavior is very confusing, since I always expected that a static method without using closures would never allocate memory being used as method group.


&gt; dotnet --info
Пакет SDK для .NET Core (отражающий любой global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Среда выполнения:
 OS Name:     Windows
 OS Version:  10.0.14393
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100\

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  2.1.402 [C:\Program Files\dotnet\sdk]
  2.1.500 [C:\Program Files\dotnet\sdk]
  2.1.502 [C:\Program Files\dotnet\sdk]
  2.1.503 [C:\Program Files\dotnet\sdk]
  2.1.505 [C:\Program Files\dotnet\sdk]
  2.1.509 [C:\Program Files\dotnet\sdk]
  2.1.700 [C:\Program Files\dotnet\sdk]
  2.1.801 [C:\Program Files\dotnet\sdk]
  2.2.102 [C:\Program Files\dotnet\sdk]
  2.2.300 [C:\Program Files\dotnet\sdk]
  2.2.401 [C:\Program Files\dotnet\sdk]
  3.0.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.7 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.11 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.12 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
`</Code>
    <Description>I noticed that when using method group, memory is allocated on the heap. It seemed to me that in .NET Framework this did not happen. The delegate instance cached in the static field was used.

After that, I decided to write a test and it turned out that in the case of using a lambda, memory is not allocated. I don’t understand why, when using the static method, the compiler allocates a new instance of `Func` each time. Here is an example reproducing this issue:
``</Description>
  </Issue>
  <Issue>
    <IssueID>39868</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LocalRewriter crashes on bad default values converted to System.Nullable</Title>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>27/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39868</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39868</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public struct MyStruct
{
    static void M1(MyStruct? s = default(MyStruct)) { } // error, bad default argument
    static void M2() { M1(); } // crash when analyzing the default argument to M1
}
`</Code>
    <Description>When analyzed in IOperation or with `#nullable enable` the following program will crash.

``

Related to </Description>
  </Issue>
  <Issue>
    <IssueID>39864</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Simplify using fix messes with formatting</Title>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>12/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39864</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![Animation](

Probably a good idea to add some tests with trivia.
</Description>
  </Issue>
  <Issue>
    <IssueID>39862</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to show CS8321 warning?</Title>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>18/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39862</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- Micrsosoft.CodeAnalysis.FxCopAnalyzers 2.9.7
- Microsoft.CodeAnalysis.CSharp 3.3.1
- .NET Framework 4.8
- Visual Studio Enterprise 2019 16.3.9

**Steps to Reproduce**:

1. Add codes like this: 

``

2. Open the ruleset file and check CS8321

3. Build the project

**Expected Behavior**:

VS2019 shows warning CS8321.

**Actual Behavior**:

CS8321 was not shown.

Maybe method is not function. But what is "local function" of C#?
</Description>
  </Issue>
  <Issue>
    <IssueID>39861</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Index From End Operator Causing Error MSB6006 "csc.exe" exited with code -2146232797</Title>
    <CreatedDate>18/11/2019</CreatedDate>
    <ClosedDate>26/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39861</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39861</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39861</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS2019 Version 16.3.9.
Console App targeting .NET Core 3.0

&gt; MSB6006 "csc.exe" exited with code -2146232797

When trying to build this...

``</Description>
  </Issue>
  <Issue>
    <IssueID>39858</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Surprising nullable warning after null-conditional property access</Title>
    <CreatedDate>17/11/2019</CreatedDate>
    <ClosedDate>18/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39858</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
#nullable enable
using System;
public class C
{
    public void M(string value)
    {
        Console.WriteLine(value.Length);
        Console.WriteLine(value?.Length);
        Console.WriteLine(value.Length); // CS8602 for value
    }
}
`</Code>
    <Description>**Version Used**: 
16.4.0 Preview 5.0

**Steps to Reproduce**:
``

**Expected Behavior**:
I would have expected a warning for the middle line, because the null-conditional access is superflous.

**Actual Behavior**:
Instead in the third statement, the compiler decides that the non-nullable `value` could be null. Hovering `value` in VS doesn't show any nullable annotation.
</Description>
  </Issue>
  <Issue>
    <IssueID>39857</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bad KeyValuePair deconstruction crashes VS in '#nullable enable' context</Title>
    <CreatedDate>17/11/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39857</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39857</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>39857</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System.Collections.Generic;

namespace Test {
    class Test {
        private readonly Dictionary&lt;string, string&gt; _dictionary;
        public void Crash() {
            string value;
            foreach((string key, value) in _dictionary) {
            }
        }
    }
}
`</Code>
    <Description>**Version Used**: 16.4.0 Preview 2.0, .NET Core 3.1.0-preview2.19525.6

**Steps to Reproduce**:

1. Create new console app project (.NET Core)
2. Paste following code:
``

**Expected Behavior**: Nothing happened

**Actual Behavior**: VS crashes
</Description>
  </Issue>
  <Issue>
    <IssueID>39852</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can name parameter of range indexer</Title>
    <CreatedDate>16/11/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39852</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C 
{
    public static void M(string text) 
    {
        _ = text[startIndex: 1..^1];
        _ = text.AsSpan()[start: 1..^1];
    }
}
`</Code>
    <Description>**Version Used**: VS 16.4 preview 4

**Steps to Reproduce**:

``

**Unexpected Behavior**:

Range indexers are converted to a method `Slice(int, int)`. Since the range becomes both parameters, it is nonsensical to be able to name the parameter. At the very least the suggestion should be removed from VS.

![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>39847</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find References does not display all references for getter if those references are conditional</Title>
    <CreatedDate>15/11/2019</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Navigation</Name>
        <IssueID>39847</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When a class contains **indexer** which contains both **getter** and **setter** and getter is accessed via **conditional** **access** , such a reference is not displayed .But thanks very much for finaly distinguishing setters and getters in your references search !---### Original Comments#### Visual Studio Feedback System on 9/11/2019, 03:58 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 10/17/2019, 10:03 PM: I have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&amp;nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39828</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Trailling commas in object/list initializers and enums in C #</Title>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>02/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>39828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>39828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---It would be nice if IDE could be set up to remind to add trailing commas to object and list initializers and enums (and wherever else possible), so that subsequent changes that would add items to the existing lists wouldn't have to touch the existing lines making diffs cleaner.I.e. for a code like:``it would be nice to have an optional suggestion to add a comma after `Two`. So that when a `Three` is added to a list, the diff would highlight only one line (since the line with `Two` would not be touched).---### Original Comments#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39827</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add option to default all analyzer rules to a specific severity</Title>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>39827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>39827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---It would be nice for the purpose of organization and control if all analyzers could be defaulted to a severity.One could then default all rules to 'None' and then opt-in on all rules they care about.The current pattern can be hard to track since rules have a variety of defaults, some of which a user might agree with or not.This provides a clear way to do both opt-in and opt-out patterns for analyzers.Possibly it would be good if this was on a per analyzer namespace basis.---### Original Comments#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39825</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>interpolated strings for ILogger</Title>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>19/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;The ILogger methods allow to use format strings and parameters. The current methods are error prone because the format strings do not behave like string. Format(). The order of the parameters is important. This is causing confusion and errors in our code.&lt;/p&gt; &lt;p&gt;logger. LogWarning(&amp;quot;Hello {1},{0}&amp;quot;, 0, 1) produces &amp;quot;Hello 0,1&amp;quot; while &amp;quot;Hello 1,0&amp;quot; is expected.&lt;/p&gt; &lt;p&gt;The best way to solve the confusion is to create overloads for interpolated strings as use in . FromSqlInterpolated. The implementation could do late string building as with the current format strings.&lt;/p&gt; &lt;p&gt;So allow logger. LogWarning($&amp;quot;Hello {one}, {zero}&amp;quot;) where one and zero are variables.&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 11/13/2019, 11:21 PM: Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39820</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect suggestion from code helper (Inline temporary variable)</Title>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
See screenshot.

The suggested code ignores the `out` keyword in the method signature, incorrectly suggesting null in place of the variable in future calls.

![100575-screenshot-3](

---
### Original Comments

#### david.c.day on 10/24/2019, 03:14 AM: 

(private comment, text removed)
#### Visual Studio Feedback System on 10/25/2019, 00:11 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 10/31/2019, 03:47 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39817</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>TaskCompletionSource object becomes null in async method when code is compiled in release mode</Title>
    <CreatedDate>14/11/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39817</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39817</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TaskCompletionIssue
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        #if DEBUG
            this.Text = "Running in Debug Mode";
        #else
            this.Text = "Running in Release Mode";
        #endif
        }

        private async void btnStartTest_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                await sendRequest("Test");
                MessageBox.Show("Test Completed Successfully");
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private static TimeSpan secondsToWaitBeforeRetryingRequest = TimeSpan.FromSeconds(5);
        private static TimeSpan secondsToWaitForResponse = TimeSpan.FromSeconds(180);
        internal static readonly ConcurrentDictionary&lt;Guid, TaskCompletionSource&lt;object&gt;&gt; ClientResponses = new ConcurrentDictionary&lt;Guid, TaskCompletionSource&lt;object&gt;&gt;();
        private static Thread t1 = null;

        public async static Task&lt;object&gt; sendRequest(String req)
        {
            var tcs = new TaskCompletionSource&lt;object&gt;();
            Guid requestId = Guid.NewGuid();

            ClientResponses.TryAdd(requestId, tcs);

            try
            {
                DateTime startTime = DateTime.Now;
                while (true)
                {
                    //Call method to send request, It doesn't block the thread
                    SendRequestForProcessing(requestId, req);
                    if (tcs == null)
                    {
                        MessageBox.Show("tcs is null");
                    }

                    var task = tcs.Task;

                    //Wait for the client to respond        
                    if (await Task.WhenAny(task, Task.Delay(secondsToWaitBeforeRetryingRequest)) == task)
                    {
                        return await task;
                    }
                    else
                    {
                        if ((DateTime.Now - startTime).TotalSeconds &gt; secondsToWaitForResponse.TotalSeconds)
                        {
                            throw new TimeoutException("Could not detect response within " + secondsToWaitForResponse.TotalSeconds.ToString() + " secs.");
                        }
                        else
                        {
                            //Let's try again, Previous call might be lost due to network issue
                        }
                    }
                }
            }
            finally
            {
                // Remove the tcs from the dictionary so that we don't leak memory
                ClientResponses.TryRemove(requestId, out tcs);
            }
        }

        private static void SendRequestForProcessing(Guid requestId, string req)
        {
            //Not doing anything with request as this is just a sample program
            if (t1 == null || !t1.IsAlive)
            {
                t1 = new Thread(receivedResponse);
                t1.Name = "Test";
                t1.IsBackground = true;
                t1.Start(requestId);
            }
        }

        public static void receivedResponse(object id)
        {
            TaskCompletionSource&lt;object&gt; tcs;
            Guid requestId = (Guid)id;
            if (ClientResponses.TryGetValue(requestId, out tcs))
            {
                //Some static wait in sample program
                Thread.Sleep(TimeSpan.FromSeconds(15));

                // Trigger the task continuation
                tcs.TrySetResult("Test Success");
            }
            else
            {
                throw new Exception($"Request not found for id {requestId.ToString()}");
            }
        }
    }
}
`</Code>
    <Description>**VS2015 Professional Update 3 version 14.0.25420.01**: 

**Steps to Reproduce**:

I am using .Net version 4.6.1 and VS2015 Update 3.

I am facing a weird issue as a piece of code is working fine when compiled in Debug mode, however, it fails with NullReferenceException when compiled in Release mode.

I have an async method which uses TaskCompletionSource to wait for task completion and I am again retrying after 5 seconds if response is not received. I have reproduced this error in the simplified sample code given below.

``
In the above code sample, I have shown a message if variable 'tcs' becomes null. I get the error message when the code is compiled in Release mode; nonetheless, it works fine in Debug mode.

Furthermore, To fix this issue, I have simply moved the below line of code outside the try block and everything is working fine.

`var task = tcs.Task;`

It appears some kind of .Net compiler bug to me.

Can anyone please help me to understand this awkward behavior?

Moreover, I would like to share some additional findings that this  bug is not reproducible when compiled in VS2019. This bug is also reported on MSDN forum and they have redirected me here.
Here's the [link ]( the reported issue at MSDN.

**Expected Behavior**:
Code should work as it is working after compiling in Debug mode.

**Actual Behavior**:
It is throwing Null Reference exception when compiled in Release mode.</Description>
  </Issue>
  <Issue>
    <IssueID>39803</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn NormalizeWhitespace messing with InterpolatedStringExpressionSyntax statements</Title>
    <CreatedDate>13/11/2019</CreatedDate>
    <ClosedDate>13/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39803</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
static void Main(string[] args)
        {
            var workspace = new Microsoft.CodeAnalysis.AdhocWorkspace();
            var projectId = Microsoft.CodeAnalysis.ProjectId.CreateNewId();
            var versionStamp = Microsoft.CodeAnalysis.VersionStamp.Create();
            var projectInfo = ProjectInfo.Create(projectId, versionStamp, "NewProject", "projName", Microsoft.CodeAnalysis.LanguageNames.CSharp);
            var newProject = workspace.AddProject(projectInfo);

            Console.WriteLine("i");
          
            var sourceText = SourceText.From(
              @"
                  using System;
                  using System.IO;
                  using System.Linq;
                  using System.Text;

                  namespace HelloWorld
                  {
                      class Program
                      {
                          static void Main(string[] args)
                          {
                              int i = 0;                           
                                
                              /**
                               Roslyn normalize whitespace issue
                              **/
                           var a = "1234";
                           var empSsn = $"{int.Parse(a):000000000}";
                          }

                      }
                  }");

            var document = workspace.AddDocument(newProject.Id, "NewFile.cs", sourceText);
            var syntaxRoot = document.GetSyntaxRootAsync().Result;

            var changedSyntaxRoot = syntaxRoot.NormalizeWhitespace();
            

            Console.Read();
        }


**Expected Behavior**:


 var empSsn = $"{int.Parse(a):000000000}";

**Actual Behavior**:


 var empSsn = $"{int.Parse(a): 000000000}";
`</Code>
    <Description>**Version Used**: Please see the packages.config. Microsoft.CodeAnalysis packages 2.6.0

**Steps to Reproduce**:

``

Adds space after **Colon ":"**
</Description>
  </Issue>
  <Issue>
    <IssueID>39802</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>39802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NotNullIfNotNull is not working with implicit operator</Title>
    <CreatedDate>13/11/2019</CreatedDate>
    <ClosedDate>14/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public sealed class Foo
{
  private readonly int value;
  
  internal Foo(int value) =&gt; this.value = value;

  [return: NotNullIfNotNull("foo")]
  public static implicit operator string?(Foo? foo) =&gt; foo is null ? null : foo.value.ToString();
 }

Now we can convert it into `string` implicitly as follows:
csharp
string str = new Foo(10);
`</Code>
    <Description>Probably Roslyn compiler ignores `NotNullIfNotNullAttribute` when it is applied to `implicit operator`.
Let's assume that we have a class
``
In this case the compiler emits CS8600 warning: `Converting null literal or possible null value to non-nullable type`. However, it is obviously that `new` operator is null-safe.</Description>
  </Issue>
  <Issue>
    <IssueID>39800</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0059 incorrectly marks variables as unnecessary</Title>
    <CreatedDate>13/11/2019</CreatedDate>
    <ClosedDate>25/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39800</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static int ToInt32(this string value)
{
    int result = 0;
    _ = int.TryParse(value, out result);
    return result;
}
`</Code>
    <Description>**Version Used**: 16.4 Preview 4

**Steps to Reproduce**:

``

**Expected Behavior**:

The `= 0` is faded as unnecessary.

**Actual Behavior**:

The `result` identifier is faded as unnecessary.
</Description>
  </Issue>
  <Issue>
    <IssueID>39793</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Disable Hyperlinks in code tooltips (VS 2019 C# code editor)</Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>28/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>39793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;Since upgrading to Visual Studio 2019, the code tooltips that appear when your mouse hovers over symbols in your code now include clickable hyperlinks that navigate to other code files. These tooltips are incredibly dangerous and time-costing because accidental clicks happen very frequently and the sudden, unexpected transition is very intrusive.&lt;/p&gt; &lt;p&gt;Please can we have an option to disable these hyperlinks. (Specifically: in C# code files, but best in all languages.)&lt;/p&gt; &lt;p&gt;Even better would be an option to make the tooltips ignore all clicks and not be hit-tested at all unless a key was held -- perhaps Ctrl. In older versions of visual studio, these tooltips existed and clicking them accidentally blocked the click event and was thus somewhat annoying, already.&lt;/p&gt; &lt;p&gt;&lt;a href=" Image:103682-untitled.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;^^^ I don't need to click that! ^^^&lt;/p&gt;&lt;p&gt;The inclusion of links in these tooltips is extremely disturbing to my workflow -- they pop up at exactly the instant I am trying to use the mouse to position the caret and now include time-costing hyperlinks! In fact, it slows me down enough to keep me from upgrading to visual studio 2019!&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 11/8/2019, 02:06 AM: 4. Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39788</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Method/property intellisense tooltips should show contents of &lt;exception&gt; XML tags.</Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---''' &amp;lt;summary&amp;gt;''' Retrieves the ADO.NET connection string.''' &amp;lt;/summary&amp;gt;''' &amp;lt;param name=&amp;quot;session&amp;quot;&amp;gt;The session state.&amp;lt;/param&amp;gt;''' &amp;lt;returns&amp;gt;The ADO.NET connection string.&amp;lt;/returns&amp;gt;''' &amp;lt;exception cref=&amp;quot;Exception&amp;quot;&amp;gt;if the connection string was not found.&amp;lt;/exception&amp;gt;&amp;lt;Extension()&amp;gt;Public Function GetConnectionString(ByVal session As HttpSessionState)\...End FunctionSo now if I hover over `GetConnectionString` I get a nice tooltip but for the exception it just says Exception, and the contents of the &amp;lt;exception&amp;gt; tag are nowhere to be found. It would be nice to have this in the tooltip, e.g. &amp;quot;Exception if the connection string was not found.&amp;quot;This feature request applies to both VB and C#, but the example I have at the moment is VB.---### Original Comments#### Visual Studio Feedback System on 10/31/2019, 07:41 PM: Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39780</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>cs files in project root whose names start with @ cause compile time error CS2011</Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>14/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2019 16.4 Preview 3

**Steps to Reproduce**:

1. Place a cs file that starts with `@` in the project root. For example: `@empty.cs`
2. Try compiling the project

**Expected Behavior**:
As long as none of the cs files contain erroneous code, project compiles. Naming a file such that it begins with `@` should have no effect.

**Actual Behavior**:
Compilation fails with: `CS2011: Error opening response file &lt;path to @empty.cs&gt;`

Changing file name from `@empty.cs` to `!empty.cs` for example makes everything compile.</Description>
  </Issue>
  <Issue>
    <IssueID>39779</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>39779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Minor, the async usage "example" in some tooltips is wrong </Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>39779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.3.5

**Screenshot of the Issue**:

If you mouse over the `async` keyword when it's applied to a lambda, you get this:
![image](

That usage example otherwise shows `Usage: await functionname(...);`, and while I generally find all of these usage examples useless, if they're there they might as well be correct. `await()` is not even valid syntax. </Description>
  </Issue>
  <Issue>
    <IssueID>39777</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>39777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Response file with spaces in analyzer path throw source file not found</Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>16/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
-doc:Library/ScriptAssemblies/CleVR.PlayModeTests.Utilities.xml
-a:C:\CleVR\VisualStudio\Analyzers\StyleCop\StyleCop.Analyzers.dll;C:\CleVR\VisualStudio\Analyzers\StyleCop\StyleCop.Analyzers.CodeFixes.dll;C:\Program Files (x86)\Microsoft Visual Studio Tools for Unity\16.0\Analyzers\Microsoft.Unity.Analyzers.dll
-ruleset:C:\CleVR\VisualStudio\Analyzers\CleVRUnity.ruleset
-additionalfile:C:\CleVR\VisualStudio\Analyzers\stylecop.json


**Expected Behavior**:
Successful compilation with the given analyzer used.

**Actual Behavior**:
cs
Microsoft (R) Visual C# Compiler version 2.9.1.65535 (9d34608e)
Copyright (C) Microsoft Corporation. All rights reserved.

error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\Files' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\(x86)\Microsoft' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\Visual' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\Studio' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\Tools' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\for' could not be found.
error CS2001: Source file 'C:\git\fram\utilities\Unity.Utilities\Unity\16.0\Analyzers\Microsoft.Unity.Analyzers.dll' could not be found.
`</Code>
    <Description>**Version Used**:  2.9.1.65535 (Unity 2019.1.10f1)

**Steps to Reproduce**:

1. Create csc.rsp file
2. Add an analyzer argument with spaces in the path (I'm currently passing multiple analyzers with the last one having spaces)
3. Compile with the csc.rsp file

Example csc.rsp file:
``</Description>
  </Issue>
  <Issue>
    <IssueID>39775</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>39775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ArgumentOutOfRangeException from ReplacePropertyWithMethods</Title>
    <CreatedDate>12/11/2019</CreatedDate>
    <ClosedDate>28/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Place caret inside "[]"
``</Description>
  </Issue>
  <Issue>
    <IssueID>39592</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>39592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect Overrides completion in VB</Title>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>09/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2019 Int Preview
Version 16.5.0 Preview 1.0 [29427.7.master]

**Steps to Reproduce**:

1. Add the following API to Compilation class in  src\Compilers\Core\Portable\Compilation\Compilation.cs

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39592</IssueID>
        <PullRequestID>37228</PullRequestID>
        <Title>Feature/add import annotation</Title>
        <Description>Closes #35806

The aim of this PR is to improve the ability of Roslyn to add imports to code, in particular with regards to code generated by code actions.

This PR consists of 4 commits (EDIT: plenty more commits added now, but the first 4 contain most of the interesting stuff :-)).

The first commit merges the ImportAdderService which previously just added imports based on QualifiedNameSyntaxes, with the AbstractImportAdder which previously added imports based upon the SymbolAnnotations. This way both approaches gain the benefits of the changes in the next commit, whilst reducing code duplication and technical debt. We also first calculate all using statements to add before adding them, and are stricter about not adding unnecessary using statements. This allows us to make the changes in the next commit more efficient, since we can skip them if there are no imports to add.

The second commit adds a safe flag to the AddImportsService. When this flag is set to true, we will try to complexify code as necessary in order to prevent the addition of namespaces from changing the semantic meaning of the code.

The third commit adds a static `Annotation` property to `ImportAdder`'s public API. When a subtree is marked with this annotation, the post processing stage of a code action will add import statements to nodes in the subtree which have SymbolAnnotations attached.

The fourth commit adds this annotation by default in the AbstractCodeGenerationService APIs. It can be switched off by Setting AddImports in CodeGenerationOptions to false.</Description>
        <CreatedDate>15/07/2019</CreatedDate>
        <ClosedDate>02/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>37228</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>37228</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>37228</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>JoeRobich</FixedById>
            <PullRequestID>37228</PullRequestID>
            <IssueID>39592</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>sharwell</FixedById>
            <PullRequestID>37228</PullRequestID>
            <IssueID>39592</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39592</IssueID>
        <PullRequestID>39629</PullRequestID>
        <Title>Add CrefSignaturePart to SyntaxFacts.IsInTypeOnlyContext</Title>
        <Description>Fixes #39592</Description>
        <CreatedDate>01/11/2019</CreatedDate>
        <ClosedDate>09/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>39629</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>39629</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39592</IssueID>
            <PullRequestID>39629</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatic indentation issue with tabs</Title>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>30/10/2019</ClosedDate>
    <IssueLabels />
    <Code>csharp
namespace CSProjConsole
{
	class Program
	{
		static void Main(string[] args)
		{
			switch (args.Length)
			{|CARET|}
		}
	}
}
`</Code>
    <Description>**Version Used**: 
VisualStudio.16.Release/16.3.7+29424.173
Microsoft .NET Framework Version 4.8.03752
C# Tools   3.3.1-beta3-19461-02+2fd12c210e22f7d6245805c60340f6a34af6875b

**Steps to Reproduce**:

1. Create C# project,
2. Set C# editor to use the superior and one true setting, `Keep tabs`,
3. Input following code:

``

As in:

![image](

4. Press enter

**Expected Behavior**:

![image](

**Actual Behavior**:

![image](

There are 3 spaces in front of the `}`, which are the number of tabs that should have been inserted.

**Notice that this doesn't happen if you choose the inferior setting "Insert spaces"**</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39591</IssueID>
        <PullRequestID>38893</PullRequestID>
        <Title>Fix smart indent with hard tabs (16.3 servicing)</Title>
        <Description>Fixes #38798
Fixes #38819

### Customer scenario

When a user with indentation set to hard tabs is editing code, the code will not be correctly indented in some cases. These cases include:

* The caret is placed to the left of the first non-whitespace character, but not all the way left to column 1. For example, the caret is typically in an affected location if the user presses &lt;kbd&gt;Home&lt;/kbd&gt;.
* The caret is placed between two parts of a compound statement, such as the situation described by 

### Bugs this fixes

#38798 
#38819 
 ([Public link](

### Workarounds, if any

None.

### Risk

Low.

### Performance impact

Negligible. No significant changes to existing code paths.

### Is this a regression from a previous update?

Yes, regression from previous minor version.

### Root cause analysis

Hard tabs was an untested configuration for indentation. The existing test suite was updated to also test hard tabs for indentation in all scenarios previously covered by spaces only.

### How was the bug found?

Customer reported.

### Test documentation updated?

No.</Description>
        <CreatedDate>26/09/2019</CreatedDate>
        <ClosedDate>29/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39591</IssueID>
            <PullRequestID>38893</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>39588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration test failures with netcoreapp31 </Title>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>21/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>39588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Integration tests are failing for .NET Core workspace tests. As reported in 

``

This seems to be caused by the VS build on the integration VMs defaulting to a netcoreapp31 TFM for new projects which is unsupported by the .NET Core SDK in our build environment.

- [x] Disable integration test requirement for PRs
- [x] Skip integration tests
- [x] Re-enable integration test requirement for PRs
- [ ] Fix integration tests and remove Skip</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39588</IssueID>
        <PullRequestID>39444</PullRequestID>
        <Title>Document `-nullable:annotations` option</Title>
        <CreatedDate>22/10/2019</CreatedDate>
        <ClosedDate>05/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39588</IssueID>
            <PullRequestID>39444</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>39588</IssueID>
            <PullRequestID>39444</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>39588</IssueID>
            <PullRequestID>39444</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>39444</PullRequestID>
            <IssueID>39588</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39581</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Interactive static local can invoke instance method on global</Title>
    <CreatedDate>30/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>39581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>39581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			bool M()
			{
				return Inner();
				static bool Inner()
				{
					if(TryGetValue(out var result)){
					    _ = result;
					}
					return true;
				}
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}


**Expected Behavior**:

error CS8422: A static local function cannot contain a reference to 'this' or 'base'.

Note that you do get `error CS0120: An object reference is required for the non-static field, method, or property 'ExecutionContext.TryGetValue(out object)'` when you run the following:

csharp
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;

public class ExecutionContext
{
	public bool TryGetValue(out object obj)
	{
		obj = new object();
		return true;
	}
}

class Program
{
	static async System.Threading.Tasks.Task Main(string[] args)
	{
		var options = ScriptOptions.Default
			.AddReferences(typeof(ExecutionContext).Assembly);

		var code = @"
			static bool M()
			{
				if(TryGetValue(out var result)){
				    _ = result;
				}
				return true;
			}
			return M();
            ";

		await CSharpScript.RunAsync&lt;bool&gt;(code, globalsType: typeof(ExecutionContext), options: options, globals: new ExecutionContext());
	}
}
`</Code>
    <Description>**Version Used**: VS 16.4 preview 2, Microsoft.CodeAnalysis.Scripting.CSharp v 3.3.1

**Steps to Reproduce**:

Run the following:
``

**Actual Behavior**:

No error</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39581</IssueID>
        <PullRequestID>39584</PullRequestID>
        <Title>Fix Host Object Access in Interactive</Title>
        <Description>Fixes #39565
Fixes #39581
Fixes #39548

Note that instead of reporting `error CS8422: A static local function cannot contain a reference to 'this' or 'base'.` we instead report `error CS0120: An object reference is required for the non-static field, method, or property`

Given that this is an extremely edge scenario in scripting I think that's not too much of an issue?

Also fixing #39581 is a breaking change. I highly doubt it's one anyone's hit, but insofar as that's true, maybe there's no point fixing it?</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Interactive</Name>
            <IssueID>39581</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39581</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>tmat</FixedById>
            <PullRequestID>39584</PullRequestID>
            <IssueID>39581</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39578</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IsNodeUnderselected crash</Title>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>30/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is probably a dupe.  but i thought we already fixed this.  I'm still getting this in Preview 2 though:

``

If htis is a dupe, feel free to close.  However, if this was expected to be fixed by now, i hope this helps!</Description>
  </Issue>
  <Issue>
    <IssueID>39572</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>39572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replace VariableDeclarationKind with IUsingDeclarationOperation parent node</Title>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>39572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On review, we found issues with the `VariableDeclarationKind` enum. First, `Default` is inconsistent with other names we use in Operation-specific Kind enums, such as `CaseKind.Default`, where `Default` is a real thing with meaning. Second, whatever word we choose for `Default` should be able to encapsulate all other types of declarations, including patterns, foreach, using statements, etc. The appropriate API here would be to have a separate kind for each of these types, which isn't something that we feel that we want to do. Currently, you look to the parent node of the `IVariableDeclarationGroupOperation` to find the context you're declaring in, and we feel that should be maintained for using declarations as well. Therefore, we will replace this Kind enum with an `IUsingDeclarationOperation` node, which will be the parent of the `IVariableDeclarationGroupOperation`. If further feedback warrants, we can consider adding extension methods on `IVariableDeclarationGroupOperation` nodes to expose this info on those nodes as well.

cc @chsienki @AlekseyTs @gafter @KathleenDollard @DustinCampbell @agocke </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39572</IssueID>
        <PullRequestID>39576</PullRequestID>
        <Title>Introduce IUsingDeclarationOperation</Title>
        <Description>Remove VariableDeclarationKind, and replace with a new IUsingDeclarationOperation node as a parent to IVariableDeclarationGroupOperation.

I chose to make IUsingDeclarationOperation be the always-implicit node, leaving IVariableDeclarationGroupOperation to be implicit or explicit depending on whether the variable was implicitly declared. As far as I could find, we don't have a direct precedent, but I had 2 reasons for this:

1. If a using is trying to filter variables, they may look for groups that weren't implicitly declared. This might lead to false negatives on this group.
2. The closest precedent I see is implicit conversions, where the IConversionOperation on top is implicit. This isn't a direct comparison, but it feels similar enough to my mind to serve as additionally justification.

I don't feel too strongly about either of these assertions though, so if there's a good reason for doing it the other way I'm not seeing please let me know.

Fixes  

cc @mavasani @jasonmalinowski.

@agocke, this will need QB approval. We're trying to remove an API before it ships for the first time in 16.4.</Description>
        <CreatedDate>29/10/2019</CreatedDate>
        <ClosedDate>31/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>39572</IssueID>
            <PullRequestID>39576</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39572</IssueID>
            <PullRequestID>39576</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>39572</IssueID>
            <PullRequestID>39576</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>ask-mode</Name>
            <IssueID>39572</IssueID>
            <PullRequestID>39576</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39566</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>39566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler &amp; VS crash repro</Title>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>39566</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ClassLibrary1 {
    public class Class1 {
        static Class1 () {
            using var conn = new Connection ("");

            using (var cmd = new Command ("", conn)) {
                X = Convert.ToInt32 (cmd.ExecuteScalar ());
            }

            new Thread (() =&gt; {
                using var conn = new Connection ("");
                while (true) {
                    DebugRIDItem[] GetDebugRIDItems (string tableType) {
                        using var dt = new DataTable ();
                        var adapter = new Adapter ("", conn);
                        return null;
                    }
                }
            });

        }

        public static int X { get; set; }
    }

    public class DebugRIDItem { }
    public class CIOSSettings { public static bool IOSDebugLog { get; set; } }
    public class Connection : IDisposable {
        public Connection (string s) { }
        public void Dispose () { }
    }

    public class Command : IDisposable {
        public Command (string s, Connection c) { }
        public object ExecuteScalar () =&gt; null;
        public void Dispose () { }
    }

    public class Adapter : IDisposable {
        public Adapter (string s, Connection c) { }
        public void Dispose () { }
    }

}
`</Code>
    <Description>**Version Used**:  VS 16.3.5 (also tested with 16.3.6, same result)

**Steps to Reproduce**:

Use the following code. I cut out a whole bunch of it, and what's left seems necessary, I couldn't find another line to delete and keep the compiler crashing.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>39565</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CreateDelegate throws exception on calling function with "out var x" (Regression in Microsoft.CodeAnalysis.CSharp.Scripting 3.3.1))</Title>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>39565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39565</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Issue can be reproduced with .net Core 2.2 or .net Core 3.0 (Not tested on older .net Core versions)
with Microsoft.CodeAnalysis.CSharp.Scripting 3.3.1 (Older versions of this package do work correctly)

**Steps to Reproduce**:
Run the following program:

``


**Expected Behavior**:
Runs without errors.

**Actual Behavior**:
Throws exception on line `var d = script.CreateDelegate()` with message: **only methods, properties, fields and events can take a receiver (Parameter 'symbol')**

This code works fine with versions of Microsoft.CodeAnalysis.CSharp.Scripting **prior** to 3.3.1
This has been reproduced with .net Core 2.2 and .net Core 3.0

For version 3.3.1 one can explicitly mention the type as a workaround and no exception will be thrown: replace `TryGetFastHelp(out var result)` with `TryGetFastHelp(out HelpResult result)` 




</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39565</IssueID>
        <PullRequestID>35822</PullRequestID>
        <Title>Dont suggest this in static local functions</Title>
        <Description>See #35644, #27719

### The Problem

Currently `Symbol.IsStatic` is not very well defined. The compiler assumes it means any/all of the following:

1. A type is marked static,
2. A member is marked static,
3. A member does not require an instance receiver (with the exception of a non-static constructor - I will need to investigate more there)
4. A member cannot capture `this`
5. For some reason a namespace is considered static, but an assembly is not 🤷

In general this has worked till now because these definitions have mostly coincided, and when they haven't it has usually been in an understandable way (eg. constants are static even though they are not marked static).

Unfortunately Local Functions break that:

Static local functions are marked static, cannot capture this, and do not require an instance receiver.

Non-Static local functions are not marked static, can capture this, but do not require an instance receiver.

Currently all local functions are marked static, in order to make the compiler work with the fact that they do not require an instance receiver. This causes two problems:

1. It is non-intuitive that a non-static local functions IsStatic returns true. Since this is a public API, that's a problem.

2. We need an API to tell us if a local function is static or not. Indeed the ultimate purpose of this PR is to prevent `this` being suggested in local functions, which depends on such an API.

### Solutions

We need to decide what IsStatic means:

#### Option 1.

Make non-static local functions IsStatic return false. Replace all usages of IsStatic where we are checking to see if a member Requires an instance receiver with a new property, RequiresInstanceReciever. This property can be internal, since it is only really of interest to the compiler.

**advantages**
IsStatic now matches our intuition much better.
We've now increased the explicitness of the compiler. Rather than mashing up lots of different concepts into one, we've begun seperating them out into different concepts.

**disadvantages**
This is risky. RequiresInstanceReciever now behaves exactly like IsStatic used to, but IsStatic behaves slightly differently. If we forget to replace all relevant usages of IsStatic with RequiresInstanceReciever, we may introduce subtle bugs that only occur with non-static local functions.

#### Option 2.

We currently have a temporary internal API `IsStaticLocalfunction`. Make this public and move it to IMethodSymbol. Document what IsStatic means.

**advantages**
Very low risk. Simple to do.

**disadvantages**
IsStatic now doesn't match our intuitions.
Rather than solving the problem, we've worked around it. We've just increased the technical debt of the codebase, rather than decreasing it.


### Approach taken here

The ideal solution is obviously the first, which is what I've done, so that the risk can be properly evaluated. I've created a pr for the second solution at #35825 so they can be compared.

Changing a call from `IsStatic` to `RequiresInstanceReciever` is always safe, since the latter behaves like the former used to.

Leaving a call as a call to `IsStatic` is dangerous, as `IsStatic` now has different behaviour.

For fields/events/properties `IsStatic` and `RequiresInstanceReciever` are synonyms.

I've gone through every usage of `IsStatic` in the compiler code (not tests/workspaces/IDE) and if it appears to be about receivers, and is not explicitly talking about a field property or event, I have replaced it with a call to `RequiresInstanceReciever`.

This requires changing 27 files.

Depending on the opinion of the roslyn team, I am happy to either take the alternative solution, do more work here, or drop this altogether.
</Description>
        <CreatedDate>20/05/2019</CreatedDate>
        <ClosedDate>26/06/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39565</IssueID>
            <PullRequestID>35822</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39565</IssueID>
            <PullRequestID>35822</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39565</IssueID>
            <PullRequestID>35822</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jasonmalinowski</FixedById>
            <PullRequestID>35822</PullRequestID>
            <IssueID>39565</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>35822</PullRequestID>
            <IssueID>39565</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39565</IssueID>
        <PullRequestID>39584</PullRequestID>
        <Title>Fix Host Object Access in Interactive</Title>
        <Description>Fixes #39565
Fixes #39581
Fixes #39548

Note that instead of reporting `error CS8422: A static local function cannot contain a reference to 'this' or 'base'.` we instead report `error CS0120: An object reference is required for the non-static field, method, or property`

Given that this is an extremely edge scenario in scripting I think that's not too much of an issue?

Also fixing #39581 is a breaking change. I highly doubt it's one anyone's hit, but insofar as that's true, maybe there's no point fixing it?</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Interactive</Name>
            <IssueID>39565</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39565</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>tmat</FixedById>
            <PullRequestID>39584</PullRequestID>
            <IssueID>39565</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39564</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>39564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect order of evaluation for tuple element expressions when the tuple is the operand of a switch expression</Title>
    <CreatedDate>29/10/2019</CreatedDate>
    <ClosedDate>05/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>39564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
var s = new[] { "foo", "bar" };
var i = 0;
string Foobar() =&gt; s[i++];
var foobar = (Foobar(), Foobar());
var r = foobar switch
{
    ("foo", "bar") =&gt;  "Yep, all good!",
    var (a, b)     =&gt; $"Wait, what? I got ({a}, {b})!"
};
Console.WriteLine(r);


The code prints the string from the first matching case, as one would expect:

    Yep, all good!

But if one substitutes the `foobar` variable use directly with the right-hand expression of its variable declaration assignment, like so:

c#
var s = new[] { "foo", "bar" };
var i = 0;
string Foobar() =&gt; s[i++];
// var foobar = (Foobar(), Foobar());
var r = /*foobar*/ (Foobar(), Foobar()) switch
{
    ("foo", "bar") =&gt;  "Yep, all good!",
    var (a, b)     =&gt; $"Wait, what? I got ({a}, {b})!"
};
Console.WriteLine(r);


The output instead changes to:

    Wait, what? I got (bar, foo)!

It seems as if the compiler actually switches around the invocations of the local function `Foobar` and the side-effects manifest as a bug! I used the [ILSpy](http://www.ilspy.net/) decompiler to look at the compiled code and one can see what's effectively going on (comment added by me):

c#
string[] s = new string[2]
{
    "foo",
    "bar"
};
int i = 0;
string b = Foobar(); // &lt;------ b assigned before a!
string a = Foobar();
string text = (a == null || !(a == "foo") || b == null || !(b == "bar")) ? ("Wait, what? I got (" + a + ", " + b + ")!") : "Yep, all good!";
string text2 = text;
string r = text2;
Console.WriteLine(r);
string Foobar()
{
    return s[i++];
}


It's also worth noting that a `switch` statement works as expected by printing `"Yep, all good!"`:

c#
var s = new[] { "foo", "bar" };
var i = 0;
string Foobar() =&gt; s[i++];
string r;
switch (Foobar(), Foobar())
{
    case ("foo", "bar"): r =  "Yep, all good!"; break;
    case var (a, b)    : r = $"Wait, what? I got ({a}, {b})!"; break;
};
Console.WriteLine(r);


But imagine someone innocently refactors the above into a switch-expression and now they have introduced a subtle bug in their application.

This change is important enough that it needs to be called out and the effects demonstrated. Today, it's hidden deep in specification proposal notes.

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: a94537c5-754e-9dea-94a8-7573011f588c
* Version Independent ID: aba09118-22c5-2c6a-954a-b9659a9644ae
* Content: [What's new in C# 8.0 - C# Guide](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#switch-expressions)
* Content Source: [docs/csharp/whats-new/csharp-8.md](https://github.com/dotnet/docs/blob/master/docs/csharp/whats-new/csharp-8.md)
* Product: **dotnet-csharp**
* Technology: **csharp-whats-new**
* GitHub Login: @BillWagner
* Microsoft Alias: **wiwagn**

---

@atifaziz commented on [Tue Oct 29 2019](https://github.com/dotnet/docs/issues/15496#issuecomment-547363063)

Following is a simpler version of the demo without needing a local function with side-effects. Any object from the BCL with impure methods will do:

c#
using var sr = new StringReader("foo\nbar");
var r = (sr.ReadLine(), sr.ReadLine()) switch
{
    ("foo", "bar") =&gt;  "Yep, all good!",
    var (a, b)     =&gt; $"Wait, what? I got ({a}, {b})!",
};
Console.WriteLine(r); // prints: Wait, what? I got (bar, foo)!
`</Code>
    <Description>@atifaziz commented on [Tue Oct 29 2019](I believe this belongs in the [**Switch expressions**]( section, but also in [the tutorial](

There seems to be a subtle and historical change in how C# respects, or actually _no longer respects_, the _evaluation order_ when using pattern-matching in a switch-expression. This can bite people (as it bit me when refactoring code) in subtle ways if not documented and called out with a warning. At first I thought it was a bug, but then I think this subtle change is intended if I am reading the following [section]( of the [C# 8 specification proposal on recursive pattern matching]( right:

&gt; ### Order of evaluation in pattern-matching
&gt;
&gt; Giving the compiler flexibility in reordering the operations executed during pattern-matching can permit flexibility that can be used to improve the efficiency of pattern-matching. The (unenforced) requirement would be that properties accessed in a pattern, and the Deconstruct methods, are required to be "pure" (side-effect free, idempotent, etc). That doesn't mean that we would add purity as a language concept, only that we would allow the compiler flexibility in reordering operations.
&gt;
&gt; **Resolution 2018-04-04 LDM**: confirmed: the compiler is permitted to reorder calls to `Deconstruct`, property accesses, and invocations of methods in `ITuple`, and may assume that returned values are the same from multiple calls. The compiler should not invoke functions that cannot affect the result, and we will be very careful before making any changes to the compiler-generated order of evaluation in the future.

To demonstrate the problem in action, suppose the following code:

``
---@BillWagner commented on [Tue Oct 29 2019](Thanks for bringing this to our attention @atifaziz 

I'm adding a couple folks on the C# LDM to discuss how we should explain this behavior.

/cc @gafter @MadsTorgersen ---@gafter commented on [Tue Oct 29 2019](This is a bug.  The tuple expression is required to evaluate its operands in order, and in this case the compiler does not do so.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39564</IssueID>
        <PullRequestID>39595</PullRequestID>
        <Title>Evaluate tuple elements in a switch control expression in the order written</Title>
        <Description>Fixes #39564</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>05/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>4 - In Review</Name>
            <IssueID>39564</IssueID>
            <PullRequestID>39595</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39564</IssueID>
            <PullRequestID>39595</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>39595</PullRequestID>
            <IssueID>39564</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>39595</PullRequestID>
            <IssueID>39564</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>RPS: Split RPS tests into smaller tests</Title>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>28/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>39552</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>39552</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>RPS: Move RPS tests to new infrastructure.</Title>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39552</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Split RPS tests into smaller tests
2. Move RPS to new infra
</Description>
  </Issue>
  <Issue>
    <IssueID>39549</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>39549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Modern Perf DDRITs: existing tests with smaller tests that can be distributed to more than one machine.</Title>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>30/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>39548</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# pattern match crashes VS 2019</Title>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>01/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---In VS 2019 16.3.5, or 16.4P2, open C# interactive and type the following:``Press enter after `;`Expected the second expression to evaluate to `true`,but instead right after typing the last `)` VS hangs then restarts.---### Original Comments#### Visual Studio Feedback System on 10/20/2019, 11:01 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 10/21/2019, 10:11 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;#### Visual Studio Feedback System on 10/21/2019, 10:23 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Robert Larkins on 10/27/2019, 11:04 PM: &lt;p&gt;I was able to replicate this on 16.3.6.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39548</IssueID>
        <PullRequestID>39584</PullRequestID>
        <Title>Fix Host Object Access in Interactive</Title>
        <Description>Fixes #39565
Fixes #39581
Fixes #39548

Note that instead of reporting `error CS8422: A static local function cannot contain a reference to 'this' or 'base'.` we instead report `error CS0120: An object reference is required for the non-static field, method, or property`

Given that this is an extremely edge scenario in scripting I think that's not too much of an issue?

Also fixing #39581 is a breaking change. I highly doubt it's one anyone's hit, but insofar as that's true, maybe there's no point fixing it?</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>01/11/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Interactive</Name>
            <IssueID>39548</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>39548</IssueID>
            <PullRequestID>39584</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>tmat</FixedById>
            <PullRequestID>39584</PullRequestID>
            <IssueID>39548</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39547</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0002. virtual property prevents 'base.' removal suggestion</Title>
    <CreatedDate>28/10/2019</CreatedDate>
    <ClosedDate>11/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 16.3.6

``
</Description>
  </Issue>
  <Issue>
    <IssueID>39546</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Where is the metadata emitted for `where T : IDisposable?` versus `Disposable`</Title>
    <CreatedDate>27/10/2019</CreatedDate>
    <ClosedDate>27/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

public class C
{
    public void Foo1&lt;T&gt;() where T : IDisposable { }
    public void Foo2&lt;T&gt;() where T : IDisposable? { }

    void M()
    {
        // CS8631: The type 'System.IDisposable?' cannot be used as type parameter 'T' in the
        // generic type or method 'C.Foo&lt;T&gt;()'. Nullability of type argument
        // 'System.IDisposable?' doesn't match constraint type 'System.IDisposable'.
        Foo1&lt;IDisposable?&gt;();   

        // No warning
        Foo2&lt;IDisposable?&gt;();   
    }
}


The problem ([sharplab link](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4GIB2BXANliwtwAEcaeBAsAFBUACATAIxW0DMh9hAwlQN5WED2bGgBZCAMQD2khgB4AKgD4AFAEpCAdwAWiIvMIhCASQAiASygAHSVDJEehAL79BNYWKmS6Cleu27CfUNTC2tbfHsnZkpBdjEAWTUXAT4Y2NiAegzOAGUADgA2FgZDeR1CGABPSyIAchoGADoQqxs7AH5awgBjCDQ0SRhCYCIMKDgAE0JoCuqiSwgECDA4eARCWvkuszQK8oBzEkQzbtmawkl1lZgtSSnazkbPHzVaxsIAOWxcYDMsMyqFwAZmciIt9hgVmghvUmi0wh0uhNJHAoGhakNIDBuloepI0LAljshlVzrDmuZWuECG9kukJNI5PC2hF2r4ANyCOnOSiOIA=)) is that no nullability attributes are emitted when the assembly is compiled:

cs
// Attributes are not present in this decompiled version of the IL or in the IL itself.

public class C
{
    public void Foo1&lt;T&gt;() where T : IDisposable
    {
    }

    public void Foo2&lt;T&gt;() where T : IDisposable
    {
    }
}


Since compiling loses the distinction between `: IDisposable` and `: IDisposable?`, if you reference and use that assembly after compilation, there's no warning for using a nullable type argument:


    void M(OtherAssembly.C c)
    {
        // ❌ Should have a CS8631 warning, but doesn't!
        c.Foo1&lt;IDisposable?&gt;();   

        // ✔ No warning
        c.Foo2&lt;IDisposable?&gt;();   
    }
`</Code>
    <Description>**Version Used**: Master branch

According to  you should get a warning for using a nullable type argument for a non-nullable type parameter, and that `where T : IDisposable` is a not-null constraint:

``

 mentions the encoding of `notnull`, `class?`, and `class`, but not the encoding of `IDisposable?` versus `IDisposable`.
</Description>
  </Issue>
  <Issue>
    <IssueID>39541</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>39541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion lists show "starting intellisense" forever</Title>
    <CreatedDate>26/10/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>39541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>39541</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

Clicking view status only shows me this:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>39540</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8629 triggered after certain "is object" or "is null" Debug assertions</Title>
    <CreatedDate>26/10/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39540</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.Diagnostics;

#nullable enable

namespace A
{
    public class B
    {
        public void Foo(int? foo)
        {
            Debug.Assert(foo is object); // Should guarantee that foo is not null
            // This actually prevents the warning:
            // Debug.Assert(!(foo is null));

            int _ = foo.Value; // CS8629
        }

        public void Bar(object? bar)
        {
            Debug.Assert(bar is object); // Should guarantee that bar is not null
            Debug.Assert(!(bar is null)); // Should guarantee that bar is not null

            string _ = bar.ToString(); // CS8629
        }
    }
}

Project file:
xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
`</Code>
    <Description>**Version Used**: 

.NET Core 3.0.100
Visual Studio 2019 16.3.5

**Steps to Reproduce**:

The following methods produce CS8629 warnings seemingly incorrectly:
``
**Expected Behavior**:

No CS8629 warnings should be generated.

**Actual Behavior**:

Two CS8629 warnings are generated.</Description>
  </Issue>
  <Issue>
    <IssueID>39531</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add Import not working</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---After updating to 16.2.0 preview 3 the import namespaces feature (when you do Ctrl + . ) stopped workingSystem.NullReferenceException : Object reference not set to an instance of an object.   at Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.GetPackageSources()   at async Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetCodeFixesAsync(&amp;lt;Unknown Parameters&amp;gt;)   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&amp;lt;Unknown Parameters&amp;gt;)   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)---### Original Comments#### Visual Studio Feedback System on 6/27/2019, 01:59 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 6/27/2019, 10:19 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;#### Joey Robichaud [MSFT] on 6/27/2019, 00:50 PM: &lt;p&gt;&lt;a target='_blank' href=" Sorry that we broke you. We introduced a bug in Preview 3 when querying NuGet packages that has already been resolved for the final release. &lt;/p&gt;&lt;p&gt;Can you find the Using Directives group in Tools &amp;gt; Options &amp;gt; Text Editor &amp;gt; C# &amp;gt; Advanced and try turning off `Suggest usings for types in NuGet packages`?&lt;/p&gt;&lt;p&gt;Please let me know if you still have any more trouble.&lt;/p&gt;&lt;p&gt;-Joey&lt;/p&gt;#### sean on 10/24/2019, 07:30 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="121162"&gt;@Joey Robichaud [MSFT]&lt;/a&gt; This appears to still be broken in 16.3.6, however the solution of disabling "Suggest usings for types in NuGet packages" did solve the problem for me.&lt;/p&gt;&lt;p&gt;This bug is brutal, because the cause (and solution) isn't obvious and importing usings is such a common practice, not having it kills productivity.&lt;/p&gt;#### Joey Robichaud [MSFT] on 10/25/2019, 02:16 PM: &lt;p&gt;@&lt;a target='_blank' href=" I was wondering if you could help me with some steps to reproduce your issue?&lt;/p&gt;&lt;p&gt;I expected a minimal repro with 16.3.5 to be:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create new Console app project&lt;/li&gt;&lt;li&gt;Inside the Main method type &lt;code&gt;JsonConvert&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Press ctrl+. to bring up quick fixes&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Expected Outcome:&lt;br&gt;Suggestion to import Newtonsoft.Json&lt;/p&gt;&lt;p&gt;Actual Outcome:&lt;br&gt;Gold bar warning that CSharpAddImportCodeFixProvider had encountered an error.&lt;/p&gt;&lt;p&gt;However I am not getting an error locally.&lt;/p&gt;&lt;p&gt;-Joey&lt;/p&gt;#### sean on 10/25/2019, 02:53 PM: &lt;p&gt;Joey,&lt;/p&gt;&lt;p&gt;I'm not sure how to reproduce the issue - however I'm on 16.3.6.&lt;/p&gt;&lt;p&gt;The issue I originally reported was closed and my voted was merged into this one.&lt;br&gt;In my original issue I reported my VS version was 16.3.6 and the issue appeared after upgrade from 16.3.5.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39529</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>39529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 16.3.0 Preview 2 - Error List IDE0047 Description Blank</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>02/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---The error list is missing a description for IDE0047. See attached screenshot.---### Original Comments#### Visual Studio Feedback System on 8/28/2019, 09:25 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Vatsalya Agrawal [MSFT] on 8/29/2019, 09:50 AM: &lt;p&gt;Please provide the snapshot of the behavior. It’ll help us understand the issue better.&lt;/p&gt;#### bugreporter5367 on 8/29/2019, 10:19 AM: Please see attached repro project.#### bugreporter5367 on 10/16/2019, 01:43 PM: @jinujoseph Reattaching the sample repro. I just confirmed that it still repros with VS 16.4.0 Preview 2.0.#### Jinu Joseph [MSFT] on 10/16/2019, 01:29 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="5345"&gt;@bugreporter5367&lt;/a&gt;, unfortunately, the repro project is missing from the attachment. Could you pls update to the latest build and see if you still see this issue and if so could you try reattaching the project again pls. &lt;/p&gt;&lt;p&gt;We have not been able to repro this issue. Sorry for the inconvinence caused.&lt;/p&gt;#### Jinu Joseph [MSFT] on 10/16/2019, 01:54 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="5345"&gt;@bugreporter5367&lt;/a&gt; thanks much for the project . I have a repro now&lt;/p&gt;#### Visual Studio Feedback System on 10/16/2019, 01:57 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39529</IssueID>
        <PullRequestID>39649</PullRequestID>
        <Title>Add support for custom unnecessary locations on a diagnostic.</Title>
        <CreatedDate>02/11/2019</CreatedDate>
        <ClosedDate>02/01/2020</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39529</IssueID>
            <PullRequestID>39649</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39524</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>39524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Breaking change in 3.3.1</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>30/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>39524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>39524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
return new CSharpCompilationOptions(
    OutputKind.DynamicallyLinkedLibrary,
    allowUnsafe: true,
    specificDiagnosticOptions: CreateSpecificDiagnosticOptions(descriptors, suppressed));


It is compiled vs `Microsoft.CodeAnalysis.CSharp.Workspaces 3.0.0` and shipped in a nuget with dependency constraint `Microsoft.CodeAnalysis.CSharp.Workspaces (&gt;= 3.0.0) `

Problem is if consumer of the library updates to `Microsoft.CodeAnalysis.CSharp.Workspaces 3.3.1` things explode:


System.MissingMethodException : Method not found: 'Void Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions..ctor(Microsoft.CodeAnalysis.OutputKind, Boolean, System.String, System.String, System.String, System.Collections.Generic.IEnumerable1&lt;System.String&gt;, Microsoft.CodeAnalysis.OptimizationLevel, Boolean, Boolean, System.String, System.String, System.Collections.Immutable.ImmutableArray1&lt;Byte&gt;, System.Nullable1&lt;Boolean&gt;, Microsoft.CodeAnalysis.Platform, Microsoft.CodeAnalysis.ReportDiagnostic, Int32, System.Collections.Generic.IEnumerable1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;, Boolean, Boolean, Microsoft.CodeAnalysis.XmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider, Boolean, Microsoft.CodeAnalysis.MetadataImportOptions, Microsoft.CodeAnalysis.CSharp.NullableContextOptions)'.
`</Code>
    <Description>I have a library that has this call:
``

![image](

It is painful!</Description>
  </Issue>
  <Issue>
    <IssueID>39522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>39522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Switch Expression Crash</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``

This causes a crash in Visual Studio every time it opens</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39522</IssueID>
        <PullRequestID>39104</PullRequestID>
        <Title>Handle a missing case in bad conversion error reporting.</Title>
        <Description>Fixes #39082</Description>
        <CreatedDate>07/10/2019</CreatedDate>
        <ClosedDate>14/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>39522</IssueID>
            <PullRequestID>39104</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>39522</IssueID>
            <PullRequestID>39104</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>39104</PullRequestID>
            <IssueID>39522</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39519</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>39519</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intellisense suggests numeric identifier name.</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>31/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39519</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39519</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>39519</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Community 2019
**Steps to Reproduce**:

1. Create an identifier of a type whose name contains a number
2. Type [control] + [space] to produce a list of suggested names for the identifier

**Expected Behavior**:
Do not suggest an invalid identifier name (identifier names cannot start with a number)
**Actual Behavior**:
![image](

related: #22011</Description>
  </Issue>
  <Issue>
    <IssueID>39517</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>39517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration tests sometimes have broken installation</Title>
    <CreatedDate>25/10/2019</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>39517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>39517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Tests:

Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorList
Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicErrorListNetCore.ErrorsDuringMethodBodyEditing
Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicSquigglesNetCore.VerifySemanticErrorSquiggles
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorsDuringMethodBodyEditing
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorList
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpErrorListNetCore.ErrorLevelWarning
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySemanticErrorSquiggles
Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSquigglesNetCore.VerifySyntaxErrorSquiggles
Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.OpenCSharpThenVBSolution
Roslyn.VisualStudio.IntegrationTests.Workspace.WorkspacesNetCore.ProjectReference

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39517</IssueID>
        <PullRequestID>39450</PullRequestID>
        <Title>Enable logging of informational telemetry for analyzers/fixers/refact…</Title>
        <Description>…orings executed during Ctrl + .

If user enables informational RoslynEventSource telemetry following the steps at  we log the execution times for each analyzer/fixer/refactorings when computing the code fixes and refactorings to show in the light bulb. This will help us identify slow analyzers/fixers/refactorings that lead to UI delays with "Gathering suggestions" dialog.



**Customer and scenario info**
**Who is impacted by this bug?**
Users seeing UI delays on Ctrl + . to bring up the light bulb cannot provide actionable performance traces.

**Bugs fixed**
Additional telemetry to help diagnose VSO [#944957]( in future

**What is the customer scenario and impact of the bug?**
We are seeing UI delays in Ctrl + . code path, where users see prolonged "Gathering suggestions" dialog. This delay can be caused by any IDE or third party extension (analyzer/fixer/refactoring) that run on this code path. Currently, we do not log telemetry to aid identifying the slow extension. This change allows users to provide actionable performance data for this code path.

**What is the workaround?**
N/A

**How was the bug found?**
UI delay VSO [#944957](

**If this fix is for a regression - what had regressed, when was the regression introduced, and why was the regression originally missed?**
This is a new top UI delay for 16.3. We are adding additional telemetry to help us investigate this better in future.

**Testing**
Verified the new telemetry is indeed logged.</Description>
        <CreatedDate>22/10/2019</CreatedDate>
        <ClosedDate>25/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>39517</IssueID>
            <PullRequestID>39450</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>39517</IssueID>
            <PullRequestID>39450</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>39517</IssueID>
        <PullRequestID>39587</PullRequestID>
        <Title>Run integration tests with .NET Core SDK shipped with VS</Title>
        <Description>Integration tests were being run with the dotnet SDK from the build environment. This broke when VS updated to creating new .NET Core projects against a TFM not supported by the version of the SDK we were building against.

This change allows the .NET Core SDK that shipped with VS to be found when running integration tests. Which is likely the desired behavior.

Fixes #39588</Description>
        <CreatedDate>30/10/2019</CreatedDate>
        <ClosedDate>31/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>39517</IssueID>
            <PullRequestID>39587</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>PR For Personal Review Only</Name>
            <IssueID>39517</IssueID>
            <PullRequestID>39587</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>39504</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New line setting for C# switch expression is missing</Title>
    <CreatedDate>24/10/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
int value = sample switch
{
    EnumSample.A =&amp;gt; 0,
    EnumSample.B =&amp;gt; 1,
    _ =&amp;gt; 2,
};


But I want to format as follows.

cs
int value = sample switch {
    EnumSample.A =&amp;gt; 0,
    EnumSample.B =&amp;gt; 1,
    _ =&amp;gt; 2,
};
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I hope that &amp;quot;Place open brace on new line for switch expression&amp;quot; setting will be added to &amp;quot;Options -&amp;gt; Text Editor -&amp;gt; C# -&amp;gt; Code Style -&amp;gt; Formatting -&amp;gt; New Lines -&amp;gt; New line options for braces&amp;quot;.Visual Studio now formats the switch expression as follows.``---### Original Comments#### Visual Studio Feedback System on 10/21/2019, 11:04 PM: Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.</Description>
  </Issue>
  <Issue>
    <IssueID>39496</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>39496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>implementing a nullable guard method</Title>
    <CreatedDate>24/10/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>39496</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there any way I can write the guard method `Guard.ThrowIfNotNull` for the example below so that the compiler warning CS8602 goes away?

``</Description>
  </Issue>
  <Issue>
    <IssueID>39489</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect CS0165: Use of unassigned local variable</Title>
    <CreatedDate>24/10/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---The following code incorrectly produces an &amp;quot;Use of unassigned local variable&amp;quot;``---### Original Comments#### Visual Studio Feedback System on 9/19/2019, 01:00 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39475</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>39475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Live Share - Support Empty -&gt; Nonempty Workspace</Title>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>02/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Live Share recently added a feature for empty workspace sharing. After sharing an empty workspace, the host may then open a solution/folder. Today, Roslyn will not update its remote workspace to reflect the added solution/folder, which results in the absence of many language feature, e.g. FAR and go to def. Roslyn should subscribe to a "workspace roots changed event" and update the remote workspace appropriately. 
</Description>
  </Issue>
  <Issue>
    <IssueID>39472</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>39472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Too many info bars for "A new .editorconfig file was detected..."</Title>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39472</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I have a solution containing over 10 projects. I added an .editorconfig file and a whole bunch of info bars popped up--it seems like 1 per project. Steps to reproduce:Create a solution with multiple projects inside a folder in VS (see attached)Right click on folder, &amp;quot;Add-&amp;gt;New EditorConfig (IntelliCode) which generates the .editorconfigAfter the file is generated, a whole bunch of info bars pop up asking to make .editoroconfig a solution item. Expected: I should only see 1 info bar.---### Original Comments#### Visual Studio Feedback System on 10/22/2019, 02:54 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39471</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>39471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SDK 'Microsoft.NET.Sdk' not found loading CSharp project via MSBuildWorkspace.OpenProjectAsync</Title>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>25/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>39471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the 15.9 generation of build assemblies and so forth.

We think *Roslyn* should be emitting some diagnostics, but more than likely we are either not handling a `Solution` or `Project` correctly, or perhaps have not fed *Roslyn* with the correct options, properties, etc, along these lines.

We cooked up some unit tests here [for demonstration and verification purposes](/mwpowellhtx/Kingdom.Roslyn.Compilation.Services) if someone could take a look.

Unit tests are appropriately named, one should be producing obvious errors. The other one may or may not, but in its current form we cannot know for certain.</Description>
  </Issue>
  <Issue>
    <IssueID>39468</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intellisense not suggest properties of type in Lambda Expression</Title>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39468</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39468</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39468</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---The scenario of the problem is as follows:I have 3 projects in one solution:Project 1. EFDAL (C #)Project 2. EFDAL. Test (C #)Project 3. EFDALVB (VB)In the EFDAL project (C #) I have the classes: articulo, marca.From projects 2 and 3 reference to the EFDAL project.In project 3 (VB), intellisense does not suggest the properties of the type of entity that is queried in the Lambda expression of the . Include method.Include &amp;lt;T, TProperty&amp;gt; (IQueryable &amp;lt;T&amp;gt;, Expression &amp;lt;Func &amp;lt;T, TProperty &amp;gt;&amp;gt;)According to the tests I found that the problem occurs in projects of type Visual Basic. **In C#** if the intellisense works correctly.Example C #`var currentArticulo = (from m in DC.articulos.Include(t =&amp;gt; t.marca) where m.codigo == &amp;quot;6463&amp;quot; select m). First();`The property t.marca is suggested correctlyExample VB`Dim currentArt = (From m In DC.articulos.Include(Function(t) t.marca) Where m.codigo = &amp;quot;6463&amp;quot; Select m)`The property t.marca is **NOT** suggestedI attached video (.gif) and SourceCode.zip with the evidence.Thank you---### Original Comments#### Visual Studio Feedback System on 10/17/2019, 10:59 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 10/21/2019, 10:17 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39461</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>39461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title> FXCop Analyzers setting Severity causes an error and strange behaviour</Title>
    <CreatedDate>23/10/2019</CreatedDate>
    <ClosedDate>30/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  &amp;lt;entry&amp;gt;
    &amp;lt;record&amp;gt;988&amp;lt;/record&amp;gt;
    &amp;lt;time&amp;gt;2019/09/27 12:12:11.168&amp;lt;/time&amp;gt;
    &amp;lt;type&amp;gt;Error&amp;lt;/type&amp;gt;
    &amp;lt;source&amp;gt;Editor or Editor Extension&amp;lt;/source&amp;gt;
    &amp;lt;description&amp;gt;System.NotSupportedException: Changing document &amp;amp;apos;D:\PROJECTNAME\SOMEPATH\SOMEPATH\SOMEPATH\Views\SOMEVIEW\SOMEVIEWSFILE.g.cs&amp;amp;apos; is not supported.&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.CodeActions.ApplyChangesOperation.TryApply(Workspace workspace, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ProcessOperations(Workspace workspace, ImmutableArray`1 operations, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;amp;#x000D; &amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.Apply(Workspace workspace, Document fromDocument, ImmutableArray`1 operations, String title, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument, IProgressTracker progressTracker, CancellationToken cancellationToken)&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&amp;amp;lt;&amp;amp;gt;c__DisplayClass20_0.&amp;amp;lt;InvokeCore&amp;amp;gt;b__0()&amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager, Object extension, Action action)&amp;amp;#x000D;&amp;amp;#x000A;--- End of stack trace from previous location where exception was thrown --- &amp;amp;#x000D;&amp;amp;#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)&amp;lt;/description&amp;gt;
  &amp;lt;/entry&amp;gt;
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---This problem started when i followed your message and installed the FXCop Analyzers into Visual Studio. I really like some warnings it gives but some specifying logging and naming conventions i want to ignore. So i tried to set the Severity of that issue to a certian level. No matter what level you will end up in an error (attached as PNG File).Once Visual Studio encountered that error the spacebar, Backspace and Enter button on the keyboard sometimes do no longer work until you restarted Visual Studio. The rest of the Buttons functions as normal. This is an ASP .NET Core 3.0 Project that started with Preview 2 and is now updated to the latest release. The Rosyln Analyzers are updated 2.9.5-beta1.final. Visual Studio is running Version 16.3.0 Preview 3.``---### Original Comments#### Visual Studio Feedback System on 9/28/2019, 06:23 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 9/30/2019, 00:33 AM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;#### Manish Vasani [MSFT] on 10/16/2019, 04:45 PM: &lt;p&gt;Thank you for reporting the issue. I think this may have been fixed by &lt;a target='_blank' href=" which was fixed in VS2019 16.4 Preview1. Would you mind installing the latest preview from &lt;a target='_blank' href=" and checking if it still repros?&lt;/p&gt;#### Sebastian on 10/17/2019, 01:42 AM: Hi, &lt;br&gt;yes it seems to work right now.&lt;br&gt;&lt;br&gt;Only one small thing: Every second time i am setting a severity the recommendation window for the Roslyn anayzers pops up again on the top, even if they are installed. But this is not really annoying. &lt;br&gt;&lt;br&gt;Thanks for fixing :)&lt;br&gt;#### Manish Vasani [MSFT] on 10/17/2019, 05:43 AM: &lt;p&gt;&amp;gt; Only one small thing: Every second time i am setting a severity the recommendation window for the Roslyn anayzers pops up again on the top, even if they are installed. But this is not really annoying.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Ah, I have seen that prop up a few times as well. I will try to harden the detection. Thanks!&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Renaming local variable with "Attribute" suffix inserts another "Attribute" in the name</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:
 
``

Inline rename `myAttribute`.

**Expected Behavior**:

No `Attribute` duplication.

**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>39173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intellisense conditional conversion option finnicky</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:16.1]
``It offered to simplify the String and convert to conditional. I simplified String first and then it lost the option to change the conditional. As soon as I converted string back to String, the option came back, I used it, then I changed String back to string.---### Original Comments#### Visual Studio Feedback System on 10/3/2019, 02:08 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>switch expression "no best type found" conflicts with IDE0007 C# use 'var' instead of explicit type</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>31/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---First of all I have a switch expression that returns instances of classes that all have a common superclass, so I would expect the switch expression to return the common superclass type instead of having a &amp;quot;no best type found&amp;quot; error.Secondly, if I manually specify the type of the variable to put the result of the switch expression in, I get the IDE0007 suggestion.  If I follow the suggestion I'm back at the &amp;quot;no best type found&amp;quot; error.---### Original Comments#### Visual Studio Feedback System on 10/7/2019, 02:19 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39168</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>39168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# code formating of braces</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>39168</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:16.2.x]
1. In a C# code editor, Type the following code in editor, Ensure the cursor after the close curly bracket :``This problem occurred after the update VisualStudio and was **previously normal.**Ok, so mush.best regards---### Original Comments#### Visual Studio Feedback System on 10/9/2019, 02:57 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39158</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using cref to itself inside inheritdoc crashes VS</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>12/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---This is a new issue as inheritdoc is just being added in 16.4.0 preview 1. This problem therefor only happens in 16.4.0 preview 1 (or later?). With the new feature, we can use /// &amp;lt;inheritdoc/&amp;gt; to define the same xml comments from the inheritted class on members that are inherited. /// &amp;lt;inheritdoc/&amp;gt; works fine, but /// &amp;lt;inheritdoc cref=&amp;quot;MyProperty&amp;quot; /&amp;gt; crashes Visual Studio to desktop ('CTD') upon hovering the mouse over MyProperty. To recreate:1. Create a new .NET Core Console App.2. Create a new interface: IMyClass with a member (can be property, method, ...) MyMember and add a summary to it with ///.3. Create a new class: MyClass that implements IMyClass (add &amp;quot;: IMyClass&amp;quot;).4. Implement the member MyMember. 5. Add /// &amp;lt;inheritdoc /&amp;gt; above MyMember. So far so good.6. Change &amp;lt;inheritdoc /&amp;gt; to &amp;lt;inheritdoc cref=&amp;quot;MyMember&amp;quot;/&amp;gt; and move your mouse over MyMember. VS will crash before it can show the tooltip.---### Original Comments#### Visual Studio Feedback System on 10/6/2019, 09:24 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### Visual Studio Feedback System on 10/8/2019, 01:54 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inconsist diagnostics on extension GetAwaiter</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>39155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>39155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }

- **CS4036** Specialised  for WinRT async interfaces
csharp
    public class Foo
    {
        async void M(Windows.Foundation.IAsyncAction ia)
        {
            await ia;
        }
    }

- **CS1929** Extension method overload resolution fail
csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            await foo;
        }
    }

    public static class BarExtension
    {
        public static Extension.FooAwaiter GetAwaiter(this string s) =&gt; default;
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static FooAwaiter GetAwaiter(this Foo foo) =&gt; default;
    }

    public struct FooAwaiter : INotifyCompletion
    {
        public bool IsCompleted { get; }
        public void OnCompleted(Action continuation) {}
        public void GetResult() {}
    }
}



Currently, add imports service can only recognize the first case **CS1061**.
Linq syntax provides a specialised **CS1929** and the general **CS1936**.
However, missing method for deconstruction provides one consist error code **CS8129**:
csharp
using System;
using System.Runtime.CompilerServices;

namespace A
{
    public class Foo
    {
        async void M(Foo foo)
        {
            var (a, b) = foo;
        }
    }

    public static class BarExtension
    {
        // Reports CS8129 no matter existence of this method
        public static void Deconstruct(this string foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}

namespace A.Extension
{
    public static class FooExtensions
    {
        public static void Deconstruct(this Foo foo, out int a, out int b)
        {
            a = 1;
            b = 2;
        }
    }
}
`</Code>
    <Description>After invesgating #25861, I've found that using `await` when missing `GetAwaiter()` *extension* method can results in 3 different error codes:
- **CS1061** No such instance or extension member
``
This makes code fix much easier to deal with it.
In all the three syntaxes, diagnostics span differs on existence of extension on other type.

Can we unify the error codes and diagnostics span for such scenarios? </Description>
  </Issue>
  <Issue>
    <IssueID>39150</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>39150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Degraded IntelliSense on RHS of await</Title>
    <CreatedDate>09/10/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Range</Name>
        <IssueID>39150</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.IO;
using System.Threading.Tasks;

namespace ConsoleApp24
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var request = new Request();
            var meh = await request$$.ReadAsStreamAsync();
        }
    }

    class Request
    {
        public Task&lt;Stream&gt; ReadAsStreamAsync() =&gt; null;
    }
}
`</Code>
    <Description>**Version Used**:  VS 16.4 P1

**Steps to Reproduce**:
``
1. Place cursor at `$$`
2. Type `.`
3. IntelliSense window does not open and cannot be prompted with `CTRL + Spacebar`

**Expected Behavior**:
IntelliSense window opens, suggesting members of `request`

**Actual Behavior**:
IntelliSense window denies me</Description>
  </Issue>
  <Issue>
    <IssueID>39139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>&lt;see&gt; tags in XML docs should be clickable links in the IntelliSense popups.</Title>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>39139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---What it says on the tin :)---### Original Comments#### Jane Wu [MSFT] on 9/3/2019, 07:50 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>39133</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.Runtime.CompilerServices.NullableAttribute is not returning if there are no even properties with null and without null.</Title>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>39133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    static void Main(string[] args)
    {
        var props = typeof(Todo).GetProperties();

        foreach (var propItem in props)
        {
            var attrs = propItem.GetCustomAttributes();
        }
    }
}


public class Todo
{
    public string? Content { get; set; }
    //public string? Content2 { get; set; }
    public Test? MyProperty { get; set; }

    public string dummy { get; set; } = string.Empty;
    public Test dummy2 { get; set; } = default!;
}

public class Test
{
    public int MyProperty { get; set; }
}
`</Code>
    <Description>**Version Used**:  netcoreapp3.0, sdk - 3.0.100

**Steps to Reproduce**:
If a class has 3 nullable props and 3 non-nullable props ``NullableAttribute`` is **returned**.
But if a class has 3 nullable and 2 non nullable ''NullableAttribute'' is **not returned**.

Below program will work fine. 
But if you un-comment ``Content2`` or comment out ``dummy`` this will give 0 attrs.

That is everything must be even.

``

**Expected Behavior**:
``System.Runtime.CompilerServices.NullableAttribute`` must be returned for nullable properties.

**Actual Behavior**:
``System.Runtime.CompilerServices.NullableAttribute`` is not returned for nullable properties.
</Description>
  </Issue>
  <Issue>
    <IssueID>39132</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Proposal] String interpolation</Title>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39132</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>An option to expand the string interpolation to a call other than string.Format would be nice to have.

For example, I want
`logger.LogInformation($"Hello {name}")`
to be expanded to
`logger.LogInformation("Hello {0}", name)`
rather than
`logger.LogInformation(string.Format("Hello {0}", name))`

Compiler can require the method to have a specific signature and annotated with an attribute for this.</Description>
  </Issue>
  <Issue>
    <IssueID>39130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS0618 shown in error when method uses obsolete element internally</Title>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Visual Studio 16.3.2

I have a method using an obsolete element INTERANALLY - it is not used as parameter, nor is it actually returned.

I am getting offered to add the obsolete attribute to the method:

![image](

This is factually incorrect. While the warning on the obsolete element is sensible, adding obsolete to the method would mark this method as obsolete - which is wrong. It may need rework, but it is not obsolete - it is still to be used.

This would be different if the obsolete element would be part of input or output parameters. But in this case, it is not - it is defined within the method body and then discarded.
</Description>
  </Issue>
  <Issue>
    <IssueID>39128</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxFactory.MethodDeclaration no longer accepts SyntaxKind.EndOfFileToken for semicolonToken</Title>
    <CreatedDate>08/10/2019</CreatedDate>
    <ClosedDate>24/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39128</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39128</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Previous to upgrading to 3.3.1 (was on 3.1.0) I was able to pass a SyntaxKind.EndofFileToken into semicolon parameter on the SyntaxFactory.MethodDeclaration method but after the upgrade to 3.3.1  now receive a runtime exception … System.ArgumentException: 'semicolonToken'. 


**Steps to Reproduce**:
 
 SyntaxFactory.MethodDeclaration(attributeLists: SyntaxFactory.List&lt;AttributeListSyntax&gt;(),
              modifiers: modifiers,
              returnType: SyntaxFactory.ParseTypeName("void"),
              explicitInterfaceSpecifier: interfaceSpecifier,
              identifier: SyntaxFactory.Identifier("On" + method.Name.Replace(" ", "")),
              typeParameterList: null,
              parameterList: parameterList,
              constraintClauses: SyntaxFactory.List&lt;TypeParameterConstraintClauseSyntax&gt;(),
              body: SyntaxFactory.Block()
            .WithOpenBraceToken(
                SyntaxFactory.Token(SyntaxKind.OpenBraceToken))
            .WithCloseBraceToken(
                SyntaxFactory.Token(SyntaxKind.CloseBraceToken)),                
                semicolonToken: SyntaxFactory.Token(SyntaxKind.EndOfFileToken)).NormalizeWhitespace();

2. Runs perfectly on 3.1.0

3. Switch to 3.3.1 to receive an argument exception "SemiColon"
 

**Expected Behavior**:
3.1.0 sample generation...

partial void OnInitializeConstructorParameters(RoleId roleId, ApplicationId appId, string name, string description, List&lt;Permission&gt; permissions)
        {
        }
**Actual Behavior**:
Runtime Argument Exception "SemiColon"</Description>
  </Issue>
  <Issue>
    <IssueID>39120</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntroduceVariableCondeRefactoringProvider threw an exception</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>39113</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add support for xmldoc tags on local functions (C# 7.0+)</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Support for [local functions]( was added in C# 7.0, which is awesome.  However, decorating a local function with `&amp;lt;summary&amp;gt;...&amp;lt;/summary&amp;gt; ` tags will not produce any Intellisense in Visual Studio 2019 (as of version 16.2.5):``It would be great to have some way of producing Intellisense for local functions.---### Original Comments#### Jane Wu [MSFT] on 9/18/2019, 08:07 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>39111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatically fix naming style across file/project/solution</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Would love do see something like what Resharper does: I especially need it when doing the following:- I want to create C# classes from some json file. The Paste Special feature is great for that.- However, the sample json files I have usually use camel case- I need to change to Pascal case- Today, VS only allows me to do it one by one, which becomes very tedious as I have tens of properties.---### Original Comments#### Jane Wu [MSFT] on 9/20/2019, 01:16 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>39107</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add or change parameter in an existing method (ReSharper style)</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;This previous feature suggestion was incorrectly marked as included in VS2017. This capability is still not available in the general case.&lt;/p&gt;&lt;p&gt;&lt;a href=" steps provided here: &lt;/p&gt;&lt;p&gt;&lt;a href=" not applicable generally.&lt;/p&gt;&lt;p&gt;I have&lt;/p&gt;&lt;p&gt;-An interface defining a code contract with a particular method&lt;/p&gt;&lt;p&gt;-Several classes implementing this method&lt;/p&gt;&lt;p&gt;The add parameter mentioned in the above public doc does not appear in my case (in VS 2019).&lt;/p&gt;&lt;p&gt;I additionally want the ability to&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change the type of an existing parameter&lt;/li&gt;&lt;li&gt;Add new parameters&lt;/li&gt;&lt;li&gt;Remove existing parameters&lt;/li&gt;&lt;li&gt;Rename existing parameters&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And I need these changes to take effect on every implementation of the method. Resharper has had this for years. When can we expect this same functionality in Vanilla VS 2019?&lt;/p&gt;---### Original Comments#### Jane Wu [MSFT] on 9/22/2019, 11:27 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>39102</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use a singleton for AnalyzerActions.Empty</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>17/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>39102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Unknown

:link: 

One of the heap dumps showed 3,486,047 instances of Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions, but at most 5,000 were not empty. Using a singleton for the empty case would save a large amount of memory.

As a step past this, we could attempt avoid placing empty items in the dictionary at all, and internally treat missing the same as empty.</Description>
  </Issue>
  <Issue>
    <IssueID>39100</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NRT - Deeper analysis inside constructor for indirect intialization scenarios</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
    <IssueLabels />
    <Code>cs
public class Foo {
    public Foo() { // warning here about _x not being initialized
        InitializeComponent();
    }

    public InitializeComponent() {
         _x = "Foo";
         // initialize fields and stuff
    }

    private string _x;
}


Also, happened to me on the first project I'm updating with NRTs:

cs
public class Foo {
    public Foo(Uri baseUrl) {
        baseUrl = null!; // current workaround
        BaseUrl = baseUrl;
    }

    private Uri _baseUrl;
    public Uri BaseUrl { get =&gt; _baseUrl; set { /* some logic*/ _baseUrl = value; } }
}
`</Code>
    <Description>The `InitializeComponent` scenario:

``

The compiler should follow on the method calls inside a constructor to a reasonable depth in order to determine nullability. </Description>
  </Issue>
  <Issue>
    <IssueID>39095</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>False positive IDE0060 on VB xml syntax</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 16.3.2

**Steps to Reproduce**:
Found at 

Minimal repro:
``

**Expected Behavior**:
The xml element is treated as used.
**Actual Behavior**:
IDE0060 reported.</Description>
  </Issue>
  <Issue>
    <IssueID>39094</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>39094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SuppressMessage works in IDE but still produces warnings in build output</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>13/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>39094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    using System;
  
    namespace ConsoleApp2
    {
        class Program
        {
            private string test;
    
            static void Main(string[] args)
            {
                var p = new Program() { test = "bl" };
                Console.WriteLine("Hello World!" + p.test);
            }
        }
    }

   
2. Enable nullable in `.csproj` (field `test` will show green squigles with non initilized non-nullable warning)
3.  Add Gloabl suppression file with
  c#
  [assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Code Quality", "CS8618:Non-nullable field is uninitialized. Consider declaring as nullable.", Justification = "&lt;Pending&gt;", Scope = "member", Target = "~F:ConsoleApp2.Program.test")]
  `</Code>
    <Description>**Version Used**: 
VS 16.3.2
**Steps to Reproduce**:

1. Create new c# .net core Console Project with following code
   ``
  (warning in source code will vanish)

**Expected Behavior**:

Bild shows no warnings

**Actual Behavior**:
Build shows warning  `Program.cs(7,24,7,28): warning CS8618: Non-nullable field 'test' is uninitialized. Consider declaring the field as nullable.`</Description>
  </Issue>
  <Issue>
    <IssueID>39093</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>39093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractSymbolCompletionProvider `s_cachedDocuments` caches also cancelled task</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
any, but I have: `3.4.0-beta1-19462-14+2f21c63bb29a816d4a62191a1a0739deb64d387c`
**Steps to Reproduce**:
I assume this is hard to reproduce, it happened to me while debugging. Steps are something like this:
1. Move mouse to error so QuickFix(light bulb) would appear and then move to next 
2. You must do 2nd move at exact moment so `CreateContext` is canceled at 
3. What will happen now is CancelledTask will be cached
4. Any following call will throw exception that task was cancelled with token not be cancelled...

**Expected Behavior**:
Successive calls return value instead of throwing `TaskCanceledException`
**Actual Behavior**:
It keeps throwing `TaskCanceledException`

What I think should happen... inside `GetOrCreateContext` method, it should not cache task if it's canceled...</Description>
  </Issue>
  <Issue>
    <IssueID>39092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>39092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualStudioUnresolvedAnalyzerReference not overriding Display property provokes VS 16.3 crash.</Title>
    <CreatedDate>07/10/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>39092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>39092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Regression from what shipped with VS 16.2.



does not override the `Display`property, meaning whoever uses that property will get a null value back despite the comment in `AnalyzerReference` suggesting the opposite.

Enter VS 16.3's `FxCopAnalyzersSuggestedActionCallback.IsNuGetInstalled()`



Crash. Unhandled .NET exception.

Sure, it's VS acting up (and perhaps especially bad it's not handling this exception), but it seems this code is not doing what it `Should` (to quote)


A quick (and dirty?) "fix" could be to just add an override for that property, forwarding to `_underlying.Display`, since that seems to have a non-null string, but I also believe this code needs a bit more unit testing, the baseclass comment "should" could benefit from some clarification (is it supposed to be dependable non-null, or is it an optional suggestion), and

@mavasani  that FxCop code needs to be fixed to not blindly trust reference values.

Since this is currently a show-stopper for us (we're at an effective stand still, not able to trust VS to not crash while editing code), perhaps that could be incentive to fast track a fix?

Edit: Just in case it helps understanding the issue, `_underlying.Display` contains the string
`Unresolved: MyProjPath\\mscorlib.dll`, where MyProjPath is the local filesystem absolute (with doubled-up backslashes) path to the directory holding the .csproj, which seems obvious to me since there are no dll's at all in that directory.</Description>
  </Issue>
  <Issue>
    <IssueID>39082</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>39082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Switch expression that returns lambda crashes VS right after typing block's open brace</Title>
    <CreatedDate>05/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS Community 2019 Preview 16.4.0 Preview 1.0

**Steps to Reproduce**:

1. Paste: `var x = ((Func&lt;int, decimal&gt;)(0 switch { 0 =&gt; _ =&gt; {}}))(0);`
2. Visual Studio dies

**Expected Behavior**: I can start writing lambda block

**Actual Behavior**: VS crashes
</Description>
  </Issue>
  <Issue>
    <IssueID>39075</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>39075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract method drops nullable annotation on explicit cast</Title>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>14/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>39075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Copy into a C# 8.0 app:

``

Invoke extract method on the "o" in the "var s..." line. Do *not* select the cast, just the o.

**Expected:** the generated method returns string? because that's the explicit cast before it.
**Actual:** it returns just string which breaks code.</Description>
  </Issue>
  <Issue>
    <IssueID>39072</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>39072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OutOfMemoryException from parser while typing in VS</Title>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>18/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>39072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class Foo
{
        public enum ReferenceType
        {
            None,
            Project,
            Metadata
        }

        public IEnumerable&lt;object[]&gt; GetSomething
            =&gt; (new[] { ReferenceType.None, ReferenceType.Project, ReferenceType.Metadata }).Select(refType =&gt; new[] { ref[||] });
}



Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateEntry(TKey key, TValue value)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(TKey key, TValue value)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16 kind, DiagnosticInfo[] diagnostics, SyntaxAnnotation[] annotations)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.MissingTokenWithTrivia.SetDiagnostics(DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[TNode](TNode node, DiagnosticInfo[] diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.CreateMissingToken(SyntaxKind expected, SyntaxKind actual, Boolean reportError)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.EatToken(SyntaxKind kind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrayInitializer()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseImplicitlyTypedArrayCreation()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNewExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaBody()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression(SyntaxToken asyncToken)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean isIndexer)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(SyntaxToken&amp; openToken, SeparatedSyntaxList`1&amp; arguments, SyntaxToken&amp; closeToken, SyntaxKind openKind, SyntaxKind closeKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(ExpressionSyntax expr)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrowExpressionClause()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePropertyDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers, TypeSyntax type, ExplicitInterfaceSpecifierSyntax explicitInterfaceOpt, SyntaxToken identifier, TypeParameterListSyntax typeParameterList)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(SyntaxListBuilder`1 attributes, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp; openBrace, NamespaceBodyBuilder&amp; body, SyntaxListBuilder&amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclarationCore(SyntaxListBuilder`1 attributeLists, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration(SyntaxListBuilder`1 attributeLists, SyntaxListBuilder modifiers)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(SyntaxToken&amp; openBrace, NamespaceBodyBuilder&amp; body, SyntaxListBuilder&amp; initialBadNodes, SyntaxKind parentKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[TNode](Func`1 parseFunc, Func`1 createEmptyNodeFunc)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(SourceText newText, IReadOnlyList`1 changes)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Resize()
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].CreateEntry(System.__Canon, System.__Canon)
   at System.Runtime.CompilerServices.ConditionalWeakTable`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Add(System.__Canon, System.__Canon)
   at Microsoft.CodeAnalysis.GreenNode..ctor(UInt16, Microsoft.CodeAnalysis.DiagnosticInfo[], Microsoft.CodeAnalysis.SyntaxAnnotation[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken+MissingTokenWithTrivia.SetDiagnostics(Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.GreenNodeExtensions.WithDiagnosticsGreen[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.WithAdditionalDiagnostics[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, Microsoft.CodeAnalysis.DiagnosticInfo[])
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.CreateMissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Boolean)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxParser.EatToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrayInitializer()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseImplicitlyTypedArrayCreation()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNewExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaBody()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseLambdaExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentExpression(Boolean)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SeparatedSyntaxList`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax&gt; ByRef, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseParenthesizedArgumentList()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePostFixExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExpressionSyntax)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTerm(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpressionCore(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseSubExpression(Precedence)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePossibleRefExpression()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseArrowExpressionClause()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParsePropertyDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ExplicitInterfaceSpecifierSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken, Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.TypeParameterListSyntax)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseClassOrStructOrInterfaceDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseTypeDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatementCore(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseMemberDeclarationOrStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, NamespaceBodyBuilder ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclarationCore(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceDeclaration(Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AttributeListSyntax&gt;, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseNamespaceBody(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken ByRef, NamespaceBodyBuilder ByRef, Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxListBuilder ByRef, Microsoft.CodeAnalysis.CSharp.SyntaxKind)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnitCore()
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseWithStackGuard[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1&lt;System.__Canon&gt;, System.Func`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LanguageParser.ParseCompilationUnit()
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChanges(Microsoft.CodeAnalysis.Text.SourceText, System.Collections.Generic.IReadOnlyList`1&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(Microsoft.CodeAnalysis.TextAndVersion, Microsoft.CodeAnalysis.TreeAndVersion, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.DocumentState+&lt;IncrementallyParseTreeAsync&gt;d__15, Microsoft.CodeAnalysis.Workspaces, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;IncrementallyParseTreeAsync&gt;d__15 ByRef)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(Roslyn.Utilities.ValueSource`1&lt;Microsoft.CodeAnalysis.TreeAndVersion&gt;, Roslyn.Utilities.ValueSource`1&lt;Microsoft.CodeAnalysis.TextAndVersion&gt;, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;&gt;c__DisplayClass14_0.&lt;CreateLazyIncrementallyParsedTree&gt;b__0(System.Threading.CancellationToken)
   at Roslyn.Utilities.AsyncLazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].StartAsynchronousComputation(AsynchronousComputationToStart&lt;System.__Canon&gt;, Request&lt;System.__Canon&gt;, System.Threading.CancellationToken)
   at Roslyn.Utilities.AsyncLazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetValueAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.DocumentState+&lt;GetSyntaxTreeAsync&gt;d__42.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.DocumentState+&lt;GetSyntaxTreeAsync&gt;d__42, Microsoft.CodeAnalysis.Workspaces, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetSyntaxTreeAsync&gt;d__42 ByRef)
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Document.GetSyntaxTreeAsync(System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Host.BackgroundParser+&lt;&gt;c__DisplayClass20_0.&lt;ParseDocumentAsync&gt;b__0()
   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

`</Code>
    <Description>typing the code below reliably triggers the crash in dogfood build 16.4 preview2 29403.147master, [||] is where the cursor is.

``</Description>
  </Issue>
  <Issue>
    <IssueID>39070</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Flaky Test] TestExpanderWithImportCompletionDisabled</Title>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>39070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>39070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.Threading.Tasks.TaskCanceledException : Se canceló una tarea.
en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.TestState.VB$StateMachine_63_WaitForUIRenderedAsync.MoveNext() en /_/src/EditorFeatures/TestUtilities2/Intellisense/TestState.vb:línea 495
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   en Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.CSharpCompletionCommandHandlerTests.VB$StateMachine_209_TestExpanderWithImportCompletionDisabled.MoveNext() en /_/src/EditorFeatures/Test2/IntelliSense/CSharpCompletionCommandHandlerTests.vb:línea 5007
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.TestInvoker`1.&lt;&gt;c__DisplayClass48_1.&lt;&lt;InvokeTestMethodAsync&gt;b__1&gt;d.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\Runners\TestInvoker.cs:línea 264
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExecutionTimer.&lt;AggregateAsync&gt;d__4.MoveNext() en C:\projects\xunit\src\xunit.execution\Sdk\Frameworks\ExecutionTimer.cs:línea 48
--- Fin del seguimiento de la pila de la ubicación anterior donde se produjo la excepción ---
   en System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   en System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   en Xunit.Sdk.ExceptionAggregator.&lt;RunAsync&gt;d__9.MoveNext() en C:\projects\xunit\src\xunit.core\Sdk\ExceptionAggregator.cs:línea 90
`</Code>
    <Description>Tracking re-enabling this test.

CI run with a failure (see attempt 1): 

``</Description>
  </Issue>
  <Issue>
    <IssueID>39062</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compilation allows method to return without assigning out variable of custom value type</Title>
    <CreatedDate>04/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39062</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>39062</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 15.9.11

**Steps to Reproduce**:
Compile the following program:
``

**Expected Behavior**:
Compiles with error "CS0177 The out parameter 'cancellationToken' must be assigned to before control leaves the current method"

**Actual Behavior**:
Compiles with no errors. X is set to the default cancellation token value.

**Notes**:
From my experimentation, this happens for `CancellationToken` or other custom value types (e. g. `internal struct Foo { }`, but does not happen for reference types or primitive value types (e. g. `int`, `string`).</Description>
  </Issue>
  <Issue>
    <IssueID>39046</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>39046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EnC: Disable editor warning "changes made in project will not be applied while the application is running"</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>11/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>39046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>39046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Please do not show this warning if _Enable Edit and Continue_ is disabled. The developer knows that the changes don't match with the current running application and the decorated source code is distracting.---### Original Comments#### Visual Studio Feedback System on 9/28/2019, 08:23 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### oa on 10/1/2019, 04:25 AM: btw: Tools-&gt;Options-&gt;Fonts and Colors-&gt;Stale Code has no impact on the color of the drawn lines#### Doug Meeker on 10/3/2019, 09:18 AM: &lt;p&gt;It looks like &lt;em&gt;Other Error&lt;/em&gt; is the one with default set to purple squiggles.  But that does not effect this error display either.&lt;/p&gt;#### Visual Studio Feedback System on 10/3/2019, 02:31 PM: &lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39043</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go To Member not working</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>10/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>39043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>39043</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Sometimes the &amp;quot;Go To Member&amp;quot; functionality is not working. It is just showing &amp;quot;no results&amp;quot;. Running &amp;quot;Go To All&amp;quot; shows the corresponding symbols but also stuff from other files. A restart of Visual studio fixes the problem at least for some time. We are using Visual Studio 2019 16.3.1---### Original Comments#### Visual Studio Feedback System on 9/26/2019, 11:34 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>christophertrml</FixedById>
        <IssueID>39042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio says that cast to double is redundant when it is not (C#)</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;Visual Studio says “Cast is redundant” here:&lt;/p&gt;&lt;pre&gt;            long x = 121645100408832000;            return ((long)(double)x == x) &amp;amp;&amp;amp; ((long)(double)(x + 1) == x + 1);&lt;/pre&gt;&lt;p&gt;If I “Remove Unnecessary Cast” as Visual Studio suggests, then the return value changes from false to true.&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 9/27/2019, 00:00 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39040</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>allisonchou</FixedById>
        <IssueID>39040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS C# Editor, Advanced, Editor Help, "Split string literals on enter" broken</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>31/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39040</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
&amp;quot;Split string literals on enter&amp;quot; has been broken since it was introduced, and still is in VS2019.

![image](

Additionally, it's _completely_ broken if you use multi-carets. Then it doesn't even pretent to attempt to &amp;quot;Split string literals on enter&amp;quot;, it just splits and indents each caret without inserting quotes, totally destroying the string literal.

I can be more forgiving about the latter bug, since multi-caret was a later addition to the editor, &amp;lt;rant_mode=&amp;quot;on&amp;quot;&amp;gt;but please - stuff like this needs to be _checked_ before release&amp;lt;rant_mode=&amp;quot;off&amp;quot;&amp;quot;&amp;gt;.
Anyway, it's a clear bug and needs to be fixed. Should be no more than a few minutes of work after the main bug has been fixed.

---
### Original Comments

#### Visual Studio Feedback System on 9/28/2019, 09:18 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39028</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>39028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Methods marked with the JetBrains UsedImplicitly attribute have an IDE0051 warning</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>39028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>39028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>39028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---[regression] [worked-in:15.9.16]
Methods marked with the JetBrains attribute [UsedImplicitly] are greyed out with an IDE0051 analysis warningFor instance using PropertyChanged.Fody for classes that implement INotifyPropertyChanged there is no need to call the private method OnPropertyChanged in the C# file. In Visual Studio 2017 the UsedImplicitly attribute was correctly recognised and there was no IDE0051 warning``---### Original Comments#### Visual Studio Feedback System on 10/3/2019, 00:11 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>39025</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ScriptState&lt;T&gt; should be serializable so it can be stored in non-InProc ASP.NET session state</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
    <IssueLabels />
    <Description>I was hoping to create an initial C# script (per website user), run it, cache its current state in ASP.NET Framework 4.7.2 session state, and then continue execution as website users type in subsequent commands (submitted to the website's serverside via AJAX).  The mechanism is described here:- 

But because my website uses `Microsoft.Web.Redis.RedisSessionStateProvider` and `Microsoft.AspNet.SessionState.SessionStateModuleAsync` for session state (i.e. it's not InProc), I think that this plan is doomed to failure because `ScriptState&lt;T&gt;` is not serializable.

Could `ScriptState&lt;T&gt;` (and any other participating classes) be made to be serializable to enable this usage?
</Description>
  </Issue>
  <Issue>
    <IssueID>39024</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Proposal: ability to refer to generic type</Title>
    <CreatedDate>03/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
    <IssueLabels />
    <Code>c#
public struct Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;
        where TPart1 : struct, IPart&lt;T1&gt;
        where TPart2 : struct, IPart&lt;T2&gt;
        where TPart3 : struct, IPart&lt;T3&gt;
        where TPart4 : struct, IPart&lt;T4&gt;
    {

        // ... some code here

        private static readonly Func&lt;
            Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;,
            Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;[] Modifiers = GetModifiers().ToArray();

        private static IEnumerable&lt;Func&lt;Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;, Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;&gt; GetModifiers()
        {
            return Modifier.GetModifiers&lt;Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;&gt;(
                // ... some code here
            );
        }


If we could refer to the current closed type definition, code would be much more readable, for example by using Self:
c#
public struct Identifier&lt;TPart1, TPart2, TPart3, TPart4, T1, T2, T3, T4&gt;
        where TPart1 : struct, IPart&lt;T1&gt;
        where TPart2 : struct, IPart&lt;T2&gt;
        where TPart3 : struct, IPart&lt;T3&gt;
        where TPart4 : struct, IPart&lt;T4&gt;
    {

        // ... some code here

        private static readonly Func&lt;Self, Self&gt;[] Modifiers = GetModifiers().ToArray();

        private static IEnumerable&lt;Func&lt;Self,Self&gt;&gt; GetModifiers()
        {
            return Modifier.GetModifiers&lt;Self&gt;(
                // ... some code here
            );
        }
`</Code>
    <Description>Imagine if you have the following generic struct definition:

``

If you believe it could be useful I would be happy to make a PR. I would need some guidance.</Description>
  </Issue>
  <Issue>
    <IssueID>39007</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`default` needs explicit type in if cond expr</Title>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>39007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    public interface Iface { }
    static Iface GetImpl() =&gt; null;
    static void Main(string[] args)
    {
        var impl = GetImpl();

        if (impl != default)
        {

        }
    }
}


[Sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATAAmwEYB2AWACgBvS/OwgZnwEsA7eBAMwgGM58Aktz74q+AL616xAGyDh/AOJwYAsAAcANgAoAlPgC8APnysArps0BuKXVmEALPgCyENtuIAGANoBdfBAIAOZQurai4fT4AG6BLBqahvjKqgl6NhSR9Myc+NrMCfgAhAb4KHDcFjBhFFFRNJm1dXSSTS2UrUA===) compiles this code successfully with `Default (3.3.1)` but fails on `master (23 Sep 2019)`.
 
**Expected Behavior**: compilation successful
Was there a spec change?

**Actual Behavior**:
Compilation fails on the `if` line:

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0019	Operator '!=' cannot be applied to operands of type 'Program.Iface' and 'default'	default1	C:\Work\source\repos\default1\Program.cs	12	Active
`</Code>
    <Description>**Version Used**: Visual Studio Community 2019 Preview v16.4.0 preview 1.0

**Steps to Reproduce**:
1. Check `.NET Core 3.0 SDK` in the Individual Components section of the installer
2. Compile this .NET Core console program:
``

Changing the condition to `impl != default(Iface)` fixes the error.</Description>
  </Issue>
  <Issue>
    <IssueID>39001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Generate method' action does not appear on name token following `?.`</Title>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>23/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>39001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>39001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>39001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 16.3.1

'Generate method' should appear for `foo?.NonExistentMethodName`, whether `foo` is a reference or value type. It currently shows up for neither.

I ran into this in several unrelated projects when changing the type of `foo` somewhere else in the file and then wanting to generate the same methods that had been called on the type it used to have.

The workaround is to delete the `?` and add `.Value` if `foo` is a value-typed expression, generate the method, then manually undo.</Description>
  </Issue>
  <Issue>
    <IssueID>39000</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>39000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash in OOP tore down VS (hard crash, not yellow bar).</Title>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>39000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>39000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>39000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>39000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Fault bucket 125730739576, type 5
Event Name: PerfWatsonVS12Data
Response: Not available
Cab Id: 1196763729810304088

Problem signature:
P1: PerfWatsonTcdb
P2: 0
P3: 0
P4: 0
P5: 0
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\Users\cyrus\AppData\Local\Temp\VSTelem.Out\201910021820_D16.4_16.4.29319.158_17696_b97f4571-7b9e-4f72-a70f-8ea07281a5cd.tcdb
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6675.tmp.WERInternalMetadata.xml
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER66A5.tmp.xml
WPR_initiated_DiagTrackMiniLogger_OneTrace User Logger 20190930 1 Event Collector_0_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66E5.tmp.etl
WPR_initiated_DiagTrackMiniLogger_WPR System Collector_inject.etl
\\?\C:\Users\cyrus\AppData\Local\Temp\WER66F5.tmp.etl
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6706.tmp.csv
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER6765.tmp.txt
\\?\C:\Users\cyrus\AppData\Local\Temp\WER6A90.tmp.WERDataCollectionStatus.txt

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportArchive\NonCritical_PerfWatsonTcdb_688f135dd185f2a8133a474a2518efc6ce6cc4a_00000000_cab_9769bf93-8256-46a3-9794-2743f97428f4

Analysis symbol: 
Rechecking for solution: 0
Report Id: 9769bf93-8256-46a3-9794-2743f97428f4
Report Status: 268435464
Hashed bucket: fb30d2b9a7acf0305d4da51668259751
Cab Guid: 797189b6-552d-47a5-b09b-c245836a2c58



Faulting application name: devenv.exe, version: 16.4.29319.158, time stamp: 0x5d845bb8
Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000
Exception code: 0x80131623
Fault offset: 0x62ac6b4a
Faulting process id: 0x4ee8
Faulting application start time: 0x01d578b6a67c1fc8
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\Common7\IDE\devenv.exe
Faulting module path: unknown
Report Id: bff26ea4-c774-46df-9501-c81b19986300
Faulting package full name: 
Faulting package-relative application ID: 



Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: This instance must be flushed before being reinitialized.
   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter, Encoding encoding)
   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer, JToken json)
   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)
   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)
   at StreamJsonRpc.MessageHandlerBase.&lt;WriteAsync&gt;d__15.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at StreamJsonRpc.JsonRpc.&lt;TransmitAsync&gt;d__115.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()
   at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__94`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Framework.RemoteServiceBroker.&lt;GetPipeAsync&gt;d__29.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;GetPipeAsync&gt;d__33.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.ServiceHub.Client.HubClient.&lt;RequestServiceAsync&gt;d__30.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RetryRemoteCallAsync&gt;d__0`2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.&lt;RequestServiceAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryCreateNewConnectionAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.&lt;TryGetConnectionFromPoolAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.&lt;TryRunRemoteAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.SolutionChecksumUpdater.&lt;&gt;c__DisplayClass17_0.&lt;&lt;PushTextChanges&gt;b__0&gt;d.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)
   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)
   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()

`</Code>
    <Description>Watson bucket and other relevant information.

``</Description>
  </Issue>
  <Issue>
    <IssueID>38995</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect IDE0044 (Make field readonly) when used with "ref"</Title>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>15/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
using System;

class Program
{
    private static Int32 Value;

    static void Main()
    {
        ref var value = ref Value;
        value += 1;
    }
}

**Expected Behavior**: No errors / warnings / messages.

**Actual Behavior**:  IDE0044	Make field readonly.

Here is a counter example where it works as expected:
 csharp
using System;

class Program
{
    private static Int32 Value;

    static void Main()
    {
        Increment( ref Value );
    }

    static void Increment( ref Int32 value ) =&gt; value += 1;
}
`</Code>
    <Description>**Version Used**: 16.3.1

**Steps to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38993</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Pattern matching: override deconstruct</Title>
    <CreatedDate>02/10/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
    <IssueLabels />
    <Description>I'm not sure if this is the right place for this issue. If it is inappropriate for this repository, I would be thankful if you could direct me to a more suitable repository. Thank you in advance.

---

For pattern matching, I'd like to deconstruct a certain struct I made as follows:

	public struct Result&lt;T&gt;
	{
		public readonly bool IsSuccess;
		public readonly T Value;
		public readonly string? Message;

		private Result(bool success, T value, string? message) =&gt;
			(IsSuccess, Value, Message) = (success, value, message);

		public void Deconstruct(out bool success, out T value, out string? message) =&gt;
			(success, value, message) = (IsSuccess, Value, Message);

		public void Deconstruct(out bool success, out string? message) =&gt;
			(success, message) = (IsSuccess, Message);
		public void Deconstruct(out bool success, out T value) =&gt;
			(success, value) = (IsSuccess, Value);


		public static Result&lt;T&gt; Fail(string message) =&gt; new Result&lt;T&gt;(false, default, message);
		public static Result&lt;T&gt; Success(T value) =&gt; new Result&lt;T&gt;(true, value, null);
	}

so that I would be able to do something like this:

	switch (TryGetValue(ref input, ref length))
	{
		case (false, string e):
			return Result&lt;JsonNode&gt;.Fail(e);
		case (true, JsonNode value):
			values.Add(value);
			break;
	}

This currently doesn't compile, saying that the deconstruction is ambiguous, despite explicitly declaring their types.

This works:

	switch (TryGetValue(ref input, ref length))
	{
		case (false, _, var e):
			return Result&lt;JsonNode&gt;.Fail(e);
		case (true, var value, _):
			values.Add(value);
			break;
	}

but the `_` seems verbose to me.</Description>
  </Issue>
  <Issue>
    <IssueID>38982</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable reference type: possible generics inconsistency</Title>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>03/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38982</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38982</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>38982</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38982</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Greetings,

with the new C# feature of nullable reference types there appears to be an inconsistency with generics:

``

Shouldn't "a" be of type "string?"?</Description>
  </Issue>
  <Issue>
    <IssueID>38975</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot apply null-conditional operator for Nullable&lt;T&gt; returned by null-conditional operator (CS0023)</Title>
    <CreatedDate>01/10/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Community 2019 Version 16.2.5


**Steps to Reproduce**:

``

I think there is no difference between b1 and b2, but cannot build b1.
</Description>
  </Issue>
  <Issue>
    <IssueID>38726</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38726</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect IL generated for struct collection initializer call to Add extension method</Title>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38726</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38726</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Compile:
``
See  for related issue with `await new S()`.</Description>
  </Issue>
  <Issue>
    <IssueID>38725</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>38725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"csc.exe" exited with code -2146232797</Title>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>38725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Application: csc.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.IndexOutOfRangeException: Index was outside the bounds of the array.
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.IsCapturedInLocalFunction(Int32 slot)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.GetCapturedBitmask(BitVector&amp; state)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordCapturedChanges(BitVector&amp; oldState, BitVector&amp; newState)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordChangedVars(LocalState&amp; oldWrites, LocalState&amp; newWrites, BitVector&amp; oldReads, BitVector&amp; newReads)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitLocalFunctionStatement(BoundLocalFunctionStatement localFunc)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitForEachStatement(BoundForEachStatement node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean&amp; badRegion, Optional`1 initialState)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(Boolean&amp; badRegion, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.IsCapturedInLocalFunction(Int32)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.GetCapturedBitmask(Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordCapturedChanges(Microsoft.CodeAnalysis.BitVector ByRef, Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordChangedVars(LocalState ByRef, LocalState ByRef, Microsoft.CodeAnalysis.BitVector ByRef, Microsoft.CodeAnalysis.BitVector ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.BoundForEachStatement)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].VisitAlways(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Scan(Boolean ByRef)
   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1[[Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass+LocalState, Microsoft.CodeAnalysis.CSharp, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].Analyze(Boolean ByRef, Microsoft.CodeAnalysis.Optional`1&lt;LocalState&gt;)
   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(Boolean ByRef, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Analyze(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.DiagnosticBag)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>**Version Used**: 
16.3.0 Preview 1
16.3.0 Preview 2
16.3.0 Preview 3
16.3.0 Preview 4

**Steps to Reproduce**:

I can't tell, the only thing I see in VS is a one-line error message in build output:
C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\Roslyn\Microsoft.CSharp.Core.targets(59,5): error MSB6006: "csc.exe" exited with code -2146232797.

At least I found this in the event log which should be related:
``

It's a huge WPF project being part of a huge solution (&gt;130 projects) so I can't give any code. Please give a hint how to narrow this down (or get the jit debugger attached to the failing csc process).

(BTW: There is no problem with the release version of VS2019 16.2.x)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38725</IssueID>
        <PullRequestID>38929</PullRequestID>
        <Title>Fix crash in flow analysis</Title>
        <Description>When we added support for tracking static fields as part of nullable
analysis, we used -1 for their containing slot. Negative numbers are
not meant to be used as actual slots and flowed through the flow analysis
code, they are only used as sentinels from slot-returning methods to indicate
that the variable in question is not tracked. The appropriate root
slot for a static variable is the same as the root slot for a top-level tracked
variable (like a local), which is 0.

Fixes #38725</Description>
        <CreatedDate>27/09/2019</CreatedDate>
        <ClosedDate>04/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38725</IssueID>
            <PullRequestID>38929</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38723</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type pattern: definite assignment false positive for struct that has only reference type properties and is declared in another assembly</Title>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
// Lib
namespace Lib
{
	public struct StructWithStringProp
	{
		public string Text { get; set; }
	}
}

// App
namespace App
{
	internal class CallSites
	{
		private static string ExternalStringPropCallSite(Lib.StructWithStringProp? nullable)
		{
			bool flag = nullable is Lib.StructWithStringProp notNull;
			return flag ? notNull.ToString() : "";
		}
	}
}
`</Code>
    <Description>**Version Used**: 
Visual Studio 16.2.5
MSBuild 16.2.37902+b5aaefc9f
csc.exe 3.2.1-beta4-19408-03

**Steps to Reproduce**:
You need two assemblies for this, `Lib` and `App`, where `App` references `Lib`.
``

**Expected Behavior**:
error CS0165: Use of unassigned local variable 'notNull'

**Actual Behavior**:
The code compiles.

**Additional information**:
If you make any of the following changes, the code stops compiling and the expected error appears:
- replace struct's property with a field
- change struct's property type from `string` to, let's say, `int`
- move struct declaration from Lib to App

You can check out a solution that illustrates all these permutations and their effect on the compiler behavior [here](</Description>
  </Issue>
  <Issue>
    <IssueID>38722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>38722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] CodeLens does not work for Visual Basic</Title>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>38722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.4.0 Preview 2.0 [29316.148.master]

**Steps to Reproduce**:
![image](

**Expected Behavior**:
CodeLens to show

**Actual Behavior**:
Space is reserved for CodeLens but the lenses themselves don't show up.</Description>
  </Issue>
  <Issue>
    <IssueID>38720</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make constant folding of `&lt;&lt;` and `&gt;&gt;` host platform independent</Title>
    <CreatedDate>17/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Determinism</Name>
        <IssueID>38720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
                case BinaryOperatorKind.IntLeftShift:
                    return valueLeft.Int32Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.LongLeftShift:
                    return valueLeft.Int64Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.UIntLeftShift:
                    return valueLeft.UInt32Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.ULongLeftShift:
                    return valueLeft.UInt64Value &lt;&lt; valueRight.Int32Value;
                case BinaryOperatorKind.IntRightShift:
                    return valueLeft.Int32Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.LongRightShift:
                    return valueLeft.Int64Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.UIntRightShift:
                    return valueLeft.UInt32Value &gt;&gt; valueRight.Int32Value;
                case BinaryOperatorKind.ULongRightShift:
                    return valueLeft.UInt64Value &gt;&gt; valueRight.Int32Value;
`</Code>
    <Description>Constant folding of `&lt;&lt;` and `&gt;&gt;` in the C# compiler depends on the (undefined) behavior of the underlying platform when the shift amount is greater than the size of the shifted value.  We should mask the shift amount to get deterministic behavior matching the X86 behavior.

Here is the offending source:
``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38720</IssueID>
        <PullRequestID>38729</PullRequestID>
        <Title>Mask the shift count during constant folding to imitate the X86 behavior when unspecified.</Title>
        <Description>Fixes #38720</Description>
        <CreatedDate>17/09/2019</CreatedDate>
        <ClosedDate>20/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38720</IssueID>
            <PullRequestID>38729</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Concept-Determinism</Name>
            <IssueID>38720</IssueID>
            <PullRequestID>38729</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>38729</PullRequestID>
            <IssueID>38720</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38717</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>38717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>正在下载用于nuget.org的intellisense index-Downloading intellisense index for nuget.org</Title>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>07/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38717</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;VSF_TYPE_MARKDOWNDownloading the IntelliSense index for nuget.org is running all the time, unable to debug the program, prompt to install the Android SDK when debugging the program&lt;/p&gt;---### Original Comments#### Visual Studio Feedback System on 5/22/2019, 00:45 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;#### 冰尘 on 5/23/2019, 07:54 AM: I has this problem too. This prolbem was found since VisualStudio2019 upgrade to v16.1.0#### Visual Studio Feedback System on 5/24/2019, 11:30 AM: &lt;p&gt;Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at:   . In case you need answers to common questions or need assisted support, be sure to use   . We'll keep you posted on any updates to this feedback.&lt;/p&gt;#### Eduardo Gasparoto Semprebon on 5/28/2019, 05:31 AM: &lt;p&gt;Same issue here, using 16.1.1.&lt;/p&gt;&lt;p&gt;Already tried to clear the solution, deleted the .vs folder... Nothing&lt;/p&gt;#### jim liu on 6/2/2019, 00:02 AM: I repair the installation solved this  issue.#### 彬彬 廖 on 6/11/2019, 05:26 PM: &lt;p&gt;I repair the installation, and still can't solve this issue.&lt;/p&gt;&lt;p&gt;my computer works in offline mode.&lt;/p&gt;#### Mayuresh Sawardekar on 6/18/2019, 08:40 AM: &lt;p&gt;Any update on the issue above ? Even repairing the installation did not help.&lt;/p&gt;#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 11:35 AM: &lt;p&gt;Thanks for the feedback. Is it possible for you to use the 'record' functionality in the 'send feedback' tool and capture VS when it is having the problem? It will get us perf traces that should let us figure out what's going on. Thanks!&lt;/p&gt;#### Mayuresh Sawardekar on 6/18/2019, 01:27 PM: Hopefully the video comes through. Thanks#### David Roth on 6/18/2019, 00:33 PM: &lt;p&gt;After upgrading to 16.1.3 yesterday, I do not see this issue anymore&lt;/p&gt;#### Mayuresh Sawardekar on 6/18/2019, 00:44 PM: &lt;p&gt;I am on VS 2019 v16.1.3 . I am not able to see "record functionality" in "send feedback". All I see is "Report a problem" and "Suggest a feature"&lt;/p&gt;#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 00:46 PM: &lt;p&gt;This might help: &lt;a target='_blank' href="#### Mayuresh Sawardekar on 6/18/2019, 01:31 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="480"&gt;@Cagri (Charlie) Aslan [MSFT]&lt;/a&gt; : I did send over the VS capture via the "send feedback" tool. Hopefully it came through.&lt;/p&gt;#### Cagri (Charlie) Aslan [MSFT] on 6/18/2019, 01:43 PM: &lt;p&gt;It says it is still uploading. I'll check again in a couple of hours. Thanks!&lt;/p&gt;#### Mayuresh Sawardekar on 6/19/2019, 06:25 AM: &lt;p&gt;&lt;a rel="user" href=" nodeid="480"&gt;@Cagri (Charlie) Aslan [MSFT]&lt;/a&gt;  Any update on it yet ?&lt;/p&gt;#### 419830883 on 6/26/2019, 08:30 PM: &lt;p&gt;In 16.1.4,this problem still exists.Is there any solution?&lt;/p&gt;#### 刘涛 on 6/26/2019, 08:37 PM: &lt;p&gt;我目前的解决办法是通过Android Studio 中Android Sdk tool 下载对应的SDK与工具 到C:\Program Files (x86)\Android\android-sdk暂时解决的,&lt;/p&gt;&lt;p&gt;关于Bug修复进度Allen在帮忙跟进&lt;/p&gt;&lt;p&gt; from Bing:&lt;/p&gt;&lt;p&gt;My current solution is to download the corresponding SDK and tools from Android Sdk tool in Android Studio to C:\Program Files (x86)\Android\android-sdk for temporary solution.&lt;/p&gt;&lt;p&gt;Allen is helping to follow up on the bug fix progress&lt;/p&gt;&lt;p&gt;Https://developercommunity.visualstudio.com/content/problem/600284/xamarinandroid-sdk-manager-offline-mode-after-upgr.html&lt;/p&gt;#### Eduardo Gasparoto Semprebon on 6/27/2019, 01:07 AM: &lt;p&gt;Still same issue in 16.1.4. I don't have Android SDK in the machine.&lt;/p&gt;#### Mayuresh Sawardekar on 6/27/2019, 04:50 AM: &lt;p&gt;I too dont have Android SDK in the machine. Help needed to resolve this issue.&lt;/p&gt;#### John Burke on 6/28/2019, 11:40 AM: &lt;p&gt;I am having the issue as well.  Upgraded to 16.1.4 and it still exists.  Anything I can do to workaround?&lt;/p&gt;#### 419830883 on 7/9/2019, 08:44 PM: &lt;p&gt;This issue has been solved in 16.1.6,thanks for everyone!&lt;/p&gt;#### John Burke on 7/11/2019, 10:56 AM: &lt;p&gt;I upgraded to 16.1.6 and it is not fixed.  Still getting the message.&lt;/p&gt;#### Ray on 8/23/2019, 01:55 AM: It's now 16.2.3 and.... you guessed it: issue is still here!  &lt;br&gt;&lt;br&gt;Removed nuget.org from VS.NET setting and solution settings, restarted several times, reinstalled VS.NET, told my mum about it...  and it just refuses to move on like a bad date. &lt;br&gt;&lt;br&gt;Thankfully I don't have OCD otherwise this would drive me crazy#### zebal on 9/13/2019, 05:23 AM: &lt;p&gt;I have the same issue, VS 16.2.5&lt;/p&gt;&lt;p&gt;Fresh installed system and VS.&lt;/p&gt;&lt;p&gt;"Downloading intellisense index for nuget.org"&lt;/p&gt;&lt;p&gt;Firewall is open.&lt;/p&gt;&lt;p&gt;This should be fixed, what information do you need?&lt;/p&gt;#### Rob Relyea [MSFT] on 9/13/2019, 03:42 PM: &lt;p&gt;No idea which component is trying to download some intellisense index from &lt;a target='_blank' href="I strongly believe this is not the NuGet team trying to do this.&lt;/p&gt;&lt;p&gt;It would be interesting to figure out who might be downloading an intellisense index via &lt;a target='_blank' href="Which component of VS? Which workload are you running?&lt;/p&gt;&lt;p&gt;Does this only happen when you have a solution loaded?&lt;br&gt;Etc…&lt;/p&gt;&lt;p&gt;-Rob Relyea&lt;br&gt;NuGet Team.&lt;/p&gt;#### Ge Ge on 9/13/2019, 11:08 PM: &lt;p&gt;&lt;a rel="user" href=" nodeid="1707"&gt;@Rob Relyea [MSFT]&lt;/a&gt; "Downloading intellisense index for nuget.org" will only show in the Background Task button (in the bottom left of the screen). And yes, it seems only happen when having a solution loaded.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;My solution:&lt;/p&gt;&lt;p&gt;1. Use VPN to finish the download.&lt;/p&gt;&lt;p&gt;2. If it doesn't work, go to Options &amp;gt; NuGet Package Manager &amp;gt; Package Sources, and delete "nuget.org" item (back up the info if you want). Restart VS 2019, problem solved. And then you can add the "nuget.org" back.&lt;/p&gt;&lt;p&gt;At least works for me :P&lt;/p&gt;#### zebal on 9/14/2019, 05:20 AM: &lt;p&gt;&lt;a rel="user" href=" nodeid="1707"&gt;@Rob Relyea [MSFT]&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It's a background task in VS usually starting together with intellisense (that is when intellisense is doing parsing job on load of solution). and so far only when loading Unreal Engine 4 project.&lt;/p&gt;&lt;p&gt;It happens randomly, sometime yes sometimes not, I usually restart VS to get rid of it thanks to to its randomness.&lt;/p&gt;&lt;p&gt;I tried to reproduce the issue why recording my system with perfview but the problem didn't occur :(&lt;/p&gt;&lt;p&gt;I also tried the suggestion to remove and re-add nuget.org link in options, but can't tell if that solved the issue, it's too early to conclude, I'm sure this background task will come back once, and if so I'll record system and send you pefview logs.&lt;/p&gt;#### Visual Studio Feedback System on 9/14/2019, 01:35 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions#### Ge Ge solved on 7/25/2019, 09:04 PM, 0 votes: &lt;p&gt;Use VPN to finish the download.&lt;/p&gt;&lt;p&gt;If it doesn't work, go to Options &amp;gt; NuGet Package Manager &amp;gt; Package Sources, and delete "nuget.org" item (make a screen shot if you want). Restart VS 2019, problem solved. And then it won't start donwloading any more if you add the "nuget.org" back.&lt;/p&gt;#### 419830883 solved on 7/9/2019, 08:43 PM, -3 votes: &lt;p&gt;This issue has been solved in 16.1.6,thanks for everyone!&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38711</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning is not reported for a type shadowing a declaration from base interface.</Title>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>18/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>38711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>38711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>

        [Fact]
        public void NestedTypes_33()
        {
            var source1 =
@"
interface I1
{
    interface I2
    { }
}

interface I3 : I1
{
    interface I2
    {
    }
}

class C1
{
    public interface I4
    { }
}

class C3 : C1
{
    public interface I4
    {
    }
}
";

            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular);

            compilation1.VerifyDiagnostics(
                // (23,22): warning CS0108: 'C3.I4' hides inherited member 'C1.I4'. Use the new keyword if hiding was intended.
                //     public interface I4
                Diagnostic(ErrorCode.WRN_NewRequired, "I4").WithArguments("C3.I4", "C1.I4").WithLocation(23, 22)
                );
        }
`</Code>
    <Description>``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38711</IssueID>
        <PullRequestID>38731</PullRequestID>
        <Title>Detect when type/field declared in an interface shadows a member from base interface.</Title>
        <Description>Fixes #38711.</Description>
        <CreatedDate>17/09/2019</CreatedDate>
        <ClosedDate>18/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38711</IssueID>
            <PullRequestID>38731</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-C#</Name>
            <IssueID>38711</IssueID>
            <PullRequestID>38731</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Default Interface Impl</Name>
            <IssueID>38711</IssueID>
            <PullRequestID>38731</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38708</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IntroduceVariableCodeRefactoring Crash</Title>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>38708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.
Parameter name: position
   at Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position,Boolean findInsideTrivia)
   at Microsoft.CodeAnalysis.CodeRefactoringHelpers.IsNodeUnderselected(SyntaxNode node,TextSpan selection)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.TryInitializeAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.State.GenerateAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.AbstractIntroduceVariableService`6.IntroduceVariableAsync[TService,TExpressionSyntax,TTypeSyntax,TTypeDeclarationSyntax,TQueryExpressionSyntax,TNameSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.IntroduceVariable.IntroduceVariableCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)


The selection here appears to be a little finicky, it need to be in the middle of some kind of nested expression, I think? Here's a screenshot of my selection:
![image](https://user-images.githubusercontent.com/2371880/64991005-db1ef580-d885-11e9-8cf5-0d61bcce5a57.png)
As far as I can tell, the offer to rename the method is unrelated, it's just showing that as I was simplifying my repro.

Raw code as well:
cs
using System;
class C {
    public void M()
    {
        Console.WriteLine("Hello world");
        Console.WriteLine(new C());
    }
}
`</Code>
    <Description>``

VS Version 29312.127 Int Preview</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38708</IssueID>
        <PullRequestID>39091</PullRequestID>
        <Title>Fix: Underselection test bug</Title>
        <Description>+ Fix for #38708 
+ Enabled interleaving of {| and |] in tests (required for the issue regression tests)
+ Added general tests for IsUnderselected + machinery.</Description>
        <CreatedDate>06/10/2019</CreatedDate>
        <ClosedDate>09/10/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>38708</IssueID>
            <PullRequestID>39091</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>38708</IssueID>
            <PullRequestID>39091</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>39091</PullRequestID>
            <IssueID>38708</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38700</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Go to base" on override says "The symbol has no base"</Title>
    <CreatedDate>16/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class F
{
    public override string ToString() // caret on ToString here
    {
        return base.ToString();
    }
}
`</Code>
    <Description>**Version Used**: Version 16.4.0 Preview 2.0 [29315.5.master]

**Steps to Reproduce**:

``

With the caret on `ToString` in the method signature, invoke "Go to base". 

**Expected Behavior**:

Does the same as "Go to definition" on `base.ToString()` call (i.e. MAS).

**Actual Behavior**:

Dialog appears saying:

&gt; The symbol has no base.</Description>
  </Issue>
  <Issue>
    <IssueID>38697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Broken Links on Building Testing and Debugging Wiki Page</Title>
    <CreatedDate>14/09/2019</CreatedDate>
    <ClosedDate>03/09/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On  the following links are broken:

![image](

Happy to submit a PR to fix but I don't know where they're supposed to point to 😀
</Description>
  </Issue>
  <Issue>
    <IssueID>38694</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>38694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable directive changes not considered top level edit</Title>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>23/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
namespace ConsoleApp12
{
    class Class1
    {
        public static void SomeMethod(string someString)
        {

        }
    }
}

Program.cs
cs
#nullable enable

namespace ConsoleApp12
{
    class Program
    {
        static void Main(string[] args)
        {
            string? someString = null;
            Class1.SomeMethod(someString);
        }
    }
}
`</Code>
    <Description>**Version Used**: 16.4 P1 (29312.127 master)

**Steps to Reproduce**:
Create two files in a .net core 3 project
Class1.cs
``

Add `#nullable enable` to Class1.cs
Go back to Program.cs and note that there is no warning on calling Class1.SomeMethod(someString) may be null.

Make an edit to anywhere in Program.cs and note that the warning appears after the edit.

**Expected Behavior**:
The warning should appear without needing to make an edit in Program.cs

Through debugging, it appears that the nullable edit is [not being considered a top level edit](  Since the nullable annotation is trivia, `SyntaxTree.IsEquivalentTo` is returning that the trees are equivalent.
</Description>
  </Issue>
  <Issue>
    <IssueID>38686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unexpected value exception with switch expression in error scenarios</Title>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>38686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
#nullable enable
public static class C {
    static void M(object p) {
       // either of these would crash
        _= (C)(o switch { _ =&gt; default }); 
        _= (C)(o switch { _ =&gt; throw null }); 
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

``

See the [stack trace](

([sharplab repro](

**Expected Behavior**: no thrown exception

**Actual Behavior**: `System.InvalidOperationException: Unexpected value 'SwitchExpression' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'`

Discovered while working on new(). Basically, this can occur with any untyped arm which yields a valid conversion to *any* type. We should either handle the conversion in the error case or return NoConversion when the target type is invalid. If we decide to do the former, it means an unconverted switch expression *can* sneak into the next stage and we may need to take it into account everywhere.</Description>
  </Issue>
  <Issue>
    <IssueID>38684</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.editorconfig warning/error support</Title>
    <CreatedDate>13/09/2019</CreatedDate>
    <ClosedDate>15/09/2019</ClosedDate>
    <IssueLabels />
    <Description>Hello,
I [asked a question in the .NET community standup yesterday]( about the .editorconfig warnings work that was demoed. My question was whether it was considered how this feature would interact with warnings/errors configured in MSBuild (csproj). I believe the response was that using .editorconfig allowed the configuration to be more easily shared between projects than a csproj implementation, since .editorconfig applies in a "cascading" manner and thus common settings can be applied to multiple projects. That makes total sense, and I completely agree with the design goal. 

Have you considered using [Directory.Build.props]( instead? Directory.Build.props would allow the settings to cascade/inherit in the same way that .editorconfig does, and already integrates with MSBuild, so wouldn't require any extra work to integrate.

.editorconfig is a wonderful thing, but it seems that up to this point it is focused on code style, with which warnings/errors don't totally align. This feature will be duplicating functionality that has historically been managed through the MSBuild (csproj). I would expect a command line build to be producing the same warnings/errors as the IDE, so an .editorconfig implementation would require adding some smarts to the existing MSBuild scripts to understand .editorconfig.

It's hard for me to find documentation on some of the MSBuild properties, but some of the ones I can find/remember are:
- **NoWarn** (error list) suppress listed warnings. These warnings will simply not be emitted by the compiler.
- **WarningsAsErrors** (error list) a list of specific warnings to treat as errors.
- **TreatWarningsAsErrors** (true/false) treats all warnings as errors. Defaults to false.
- **WarningsNotAsErrors** (error list) can be used with TreatWarningsAsErrors to not elevate certain warnings to errors. This is a lesser-known property, because the VS properties UI didn't expose it, which is unfortunately because it is very useful.
- **WarningLevel** (0-4) Not really sure how this works, but I think the default is 4 which enables all warnings.

The way I like to setup projects is to turn on TreatWarningsAsErrors, then exclude certain errors `&lt;WarningsNotAsErrors&gt;CS1591,CS0612,CS1030`. Those 3 are a few that I actually care about, but the community could probably provide a more complete set. These will continue to surface as warnings, so won't "break the build".

CS1591 : missing doc comments on public members. I turn this on because too many team members will provide empty comments to suppress the error, which is harder to detect and fix than a warning. There are a lot of related warnings (like [CS1573]( that might also be reasonable to exclude.

CS0612: warnings about obsolete usage. Debatable if this should be an error, but I find that sometimes I "Obsolete" something, but continue to use it internally. I think CS0618 is similar

CS1030: explicit warning pragmas (#warning). I like to use these as more aggressive "TODO". Elevating them doesn't make sense when #error also exists.</Description>
  </Issue>
  <Issue>
    <IssueID>38674</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bulk configuration/suppression of analyzer diagnostics</Title>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>08/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>38674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
# Format 1 - configure default severity for all analyzer diagnostics
dotnet_analyzer_diagnostic.severity = error | warning | suggestion | silent | none

# Format 2 - configure default severity for analyzer diagnostics with a specific 'diagnostic_category'
dotnet_analyzer_diagnostic.&lt;%diagnostic_category%&gt;.severity = error | warning | suggestion | silent | none

# Format 3 - suppress all/category-based analyzer diagnostics for specific files/folders
dotnet_analyzer_diagnostic.suppress = true | false
dotnet_analyzer_diagnostic.&lt;%diagnostic_category%&gt;.suppress = true | false


Using the above supported formats, the user scenarios listed in this issue can be addressed with following simple configuration entries:

# Scenario 1 - switching all analyzer diagnostics to be suggestions by default, and promoting individual diagnostics to warning/error
[*.cs]
dotnet_analyzer_diagnostic.severity = suggestion
dotnet_diagnostic.CA1801.severity = warning
dotnet_diagnostic.CA1802.severity = error

# Scenario 2 - category based diagnostic configuration
[*.cs]
dotnet_analyzer_diagnostic.security.severity = error
dotnet_analyzer_diagnostic.correctness.severity = warning
dotnet_analyzer_diagnostic.performance.severity = suggestion

# Scenario 3 - suppress all analyzer diagnostics, except security ones, on my generated code
[*.MyGeneratedFileExtension.cs]
dotnet_analyzer_diagnostic.suppress = true
dotnet_analyzer_diagnostic.security.suppress = false
`</Code>
    <Description>## User scenarios
Lot of internal discussions and external requests in the area of analyzer adoption have pointed to a need for a better _bulk diagnostic configuration_ story based on real world user scenarios, such as:

1. **Default severity configuration to reduce analyzer noise and remove analyzer adoption barriers**: I want to configure the default severity of all analyzer diagnostics (from every analyzer package that I have installed in my project) without having to configure every single diagnostic ID. For example, demote all analyzer diagnostics to be _suggestions by default_, so they are equivalent to IDE code style suggestions, which do not affect my CI builds and do not pollute my editor with squiggles and tons of warnings and errors. This breaks the analyzer adoption barrier as installing a new analyzer package has no drastic implications on my workflow. It allows me to opportunistically fix analyzer diagnostics whenever I want to address them and selectively promote individual diagnostic IDs that I want to execute in CI to warning/error severity with explicit diagnostic ID based configuration entries. This allows the end users to choose opt-in vs opt-out model for analyzer execution in CI.
2. **Category based configuration to prioritize buckets of analyzer diagnostics**: I want to configure all diagnostics with a specific diagnostic [category]( without having to manually identify and configure every single diagnostic ID in that category. For example, bump up all security rules to errors, demote all performance issues to suggestions, etc. These are extremely common operations during targeted code quality work such as security push, performance push, maintenance push, etc.
3. **Suppress all current and future analyzer diagnostics inside a specific file or folder**: say legacy code folders or documents based on extensions (for example, generated code with special extensions:  etc. This issue has long been known as one of the biggest analyzer adoption barrier that needs an end user configuration point to reduce analyzer noise. Requiring end users to add custom autogenerated comments at top of their generated code files may not always be feasible or scalable and is also an unnecessary burden for customers. Performing a baseline operation  in Visual Studio (`Build and suppress active issues` command in `Analyze` menu) only suppresses diagnostics from current project/solution snapshot and also generates a very hard to maintain list of in-source suppressions (pragmas or suppress message attributes). 

## Difficulties with current support
Each of the above actions are very common when installing a new analyzer package, or doing targeted code analysis cleanup work (for example, security push, performance push, code maintenance push, etc.). [Current support for diagnostic configuration]( requires user to configure each diagnostic ID with a distinct configuration entry per diagnostic ID reported by every analyzer from all of the consumed analyzer packages. This approach becomes even more untenable with analyzer package upgrades, which generally brings in bunch of new analyzers and diagnostics IDs and requires the user to manually update their per-ID configuration lists to include the new diagnostic IDs.

## Design Proposal - editorconfig options for analyzer driver
In past, adding any such bulk diagnostic configuration support would have required providing new MSBuild and command line compiler switches or updating existing ones, which had a high implementation and design cost and higher risk of bugs/regressions. With the recently added support in [VS2019 16.3]( to pass in project's .editorconfig files into the compiler for analyzer configuration, implementing this feature has become considerably easier.

Proposal is to _allow end users to specify editorconfig options that are respected by the core analyzer driver in the compiler layer_. Proposed formats for analyzer driver options:

``

Possible future enhancements:
1. Allow bulk configuration of diagnostics from specific analyzer package or for all diagnostics with a specific diagnostic prefix, say `dotnet_analyzer_diagnostic.CA.severity = ...` would only configure diagnostics with a `CA` prefix. I suggest we don't add such a functionality until it is required and we can provide specific user scenarios where the other proposed formats are not sufficient.</Description>
  </Issue>
  <Issue>
    <IssueID>38665</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>I hate the error highlighting on a case fallthrough error</Title>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>02/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>38665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38665</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Dear d(otnet💻|iary📔), I hate the error highlighting on a `case` fallthrough error. It indicates to me that something is wrong with the pattern I have specified rather than a `case` fallthrough issue. I would much rather see a highlight on the `case` keyword to indicate that something is wrong with the `case` mechanism itself as opposed to the pattern used to select it. Maybe we all have an error highlighting system that we have to learn to steer in order to flourish. 🤔</Description>
  </Issue>
  <Issue>
    <IssueID>38664</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expression evaluator output differs for `is` type check involving generic interface type parameter covariance for value types</Title>
    <CreatedDate>12/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>38664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>38664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Diagnostics;

namespace ReproCovarianceIssue
{
    interface IFoo&lt;out T&gt;
    {
    }

    class Foo&lt;T&gt; : IFoo&lt;T&gt;
    {
    }

    class Program
    {
        static void Main()
        {
            var foo = new Foo&lt;int&gt; { };
            Console.WriteLine(foo is IFoo&lt;object&gt;);

            // Eval "foo is Foo&lt;object&gt;" in the Immediate Window or Watch Window.
            Debugger.Break();
        }
    }
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 2019 16.2 Preview 2
C# compiler version `3.2.0-beta2-19303-01 (c9689b7a)`

**Steps to Reproduce**:

``

**Expected Behavior**:

Console prints `false` and debugger prints `false` when evaluating `foo is IFoo&lt;object&gt;`.

**Actual Behavior**:

Console prints `false` and debugger prints `true` when evaluating `foo is IFoo&lt;object&gt;`.

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>38651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Containing Type and Containing Member in FAR are unknown in F# projects</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Master 29311.136 + Vsix from (InternalServer)\ContainingMemberAndContainingTypeColumns 
**Steps to Reproduce**:

1. Create a new F# Console App (.NET Core)
2. Right click argv
3. Select Find all references

**Expected Behavior**:
References are shown with all info
**Actual Behavior**:
Containing type and member are set as unknown

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OOM in SymbolUsageAnalysis when analyzing large methods</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>12/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>38650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 16.3 preview3

One of the dump files provided in  points to an OOM from SymbolUsageAnalysis for a very large method (CFG with around 1000 basic blocks) and large number of local variables. I also have an internal repro (cannot be shared) where I get the same OOM.
</Description>
  </Issue>
  <Issue>
    <IssueID>38649</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>38649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Go-To-Member not finding members</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>20/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38649</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Using go-to-all with the `m` filter will occasionally not find any members whatsoever. I haven't found a consistent repro for this yet, but when it starts it repros continuously. Repros on Version 16.4.0 Preview 1.0 [29310.158.master]

</Description>
  </Issue>
  <Issue>
    <IssueID>38643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>3.4.0 Compiler Toolset does not allow comparing to "default"</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>38643</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft.Net.Compilers.Toolset v3.4.0-beta1-19456-03

**Steps to Reproduce**:

1. Create a new console app with

``

3. Compile and see the failure

Program.cs(10,17): error CS0019: Operator '!=' cannot be applied to operands of type 'object' and 'default' 

This compiles using `Microsoft (R) Visual C# Compiler version 3.4.0-beta1-19417-02 (64f75cda)` that's shipped with a SDK, but not using `Microsoft (R) Visual C# Compiler version 3.4.0-beta1-19456-03 
(3c865821)` 

</Description>
  </Issue>
  <Issue>
    <IssueID>38640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Assert in OperationExtension.GetValueUsageInfo for code with switch expressions</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>26/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
 	System.dll!System.Diagnostics.AssertWrapper.ShowMessageBoxAssert(string stackTrace, string message, string detailMessage)	Unknown
 	System.dll!System.Diagnostics.DefaultTraceListener.Fail(string message, string detailMessage)	Unknown
 	System.dll!System.Diagnostics.DefaultTraceListener.Fail(string message)	Unknown
 	System.dll!System.Diagnostics.TraceInternal.Fail(string message)	Unknown
 	System.dll!System.Diagnostics.Debug.Fail(string message)	Unknown
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.OperationExtensions.GetValueUsageInfo(Microsoft.CodeAnalysis.IOperation operation) Line 83	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.IOperation operation) Line 101	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(Microsoft.CodeAnalysis.Operations.IDeclarationPatternOperation operation) Line 280	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 7098	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 36	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.VisitOperationArrayElement&lt;Microsoft.CodeAnalysis.IOperation&gt;(Microsoft.CodeAnalysis.IOperation operation) Line 25	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray&lt;Microsoft.CodeAnalysis.IOperation&gt;(System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; operations) Line 19	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(Microsoft.CodeAnalysis.IOperation operation) Line 47	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchExpressionArm(Microsoft.CodeAnalysis.Operations.ISwitchExpressionArmOperation operation) Line 8318	C#
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BaseSwitchExpressionArmOperation.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 7782	C#

`</Code>
    <Description>**Version Used**: Latest master sources

**Steps to Reproduce**:

1. Open Roslyn.sln and F5
2. Create a C# class library project with switch expression in the new VS instance

**Actual Behavior**:
Following assert fires:



We need to handle recently added `Microsoft.CodeAnalysis.Operations.CSharpLazySwitchExpressionArmOperation`

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38638</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider representing nullable flow state as: MaybeNull, NotNull, or T</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>21/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigating</Name>
        <IssueID>38638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38638</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider adding a distinct nullable flow state, T, to allow distinguishing "maybe null when the type allows null" from "maybe null even when type disallows null".
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38636</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inline method</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>04/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38636</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38636</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Customer Request Copying Here

&gt;It should propose to replace method calls with content of the method and delete the method definition (this is really tedious to do manually):

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>38679</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Parsing issue on conditional ref operator</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>38679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With the classic conditional operator, you can use an 'is' condition without any issue:
`var x = o1 is string ? o2 : o3;`
If you use the conditional ref operator `var x = o1 is string ? ref o2 : ref o3;`
 the "string ?" part is interpreted as a nullable type and the compiler emits an error on the first "ref".</Description>
  </Issue>
  <Issue>
    <IssueID>38633</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide an option to auto fill switch cases based on switch parameter</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels />
    <Description>Customer Request Copying Here

&gt;Provide an option to auto fill switch cases based on switch parameter. </Description>
  </Issue>
  <Issue>
    <IssueID>38629</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>38629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Re-enable caching on docker builds</Title>
    <CreatedDate>11/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Docker build caching is temporarily disabled to fix apt-get slowing us down. 

We need to reenable / figure out a better solution in the future. </Description>
  </Issue>
  <Issue>
    <IssueID>38607</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] Why I was able to overrid a implemented method with an extension method?</Title>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38607</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
  public static void Main()
  {
    bla test = new blup();    
    Console.WriteLine(test.Any());
    
  }
}
public class blup: bla{
  public bool Any(){
    return true;
  }
}
public class bla{

}
public static class Extensions{
  public static bool Any(this bla klaus){
    return false;
  }
}


The `Console.WriteLine(test.Any())` returns `false`. So the extension method was called. But in the [documentation ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods#binding-extension-methods-at-compile-time) about extension methods there is this sentence `You can use extension methods to extend a class or interface, but not to override them.`.
But this is not true for the code above.

The simple answer is, that the IL only knows the static code and not the runtime values. So with the explicit casting in the line `bla test = new blup();` to `bla` the IL think the extension method is the right thing. 
But this is maybe a big problem. In my real case, I have a class that inherited from `IEnumerable` and tries to override extension methods like `Any`. But like in the sample above that wouldn't work in a function that wants an `IEnumerable` as input like this:

csharp
public void sample(IEnumerable&lt;supertype&gt; source)
`</Code>
    <Description>Hi corefx Team,

I have a big Question to the following Code:

``
In this method, always the extension method for `IEnumerable` is preferred. Because at compile time you can't know the real type.

So now to the question:

Is this behavior by design or is this a bug?

And question number 2:

How I can override the extension methods of IEnumerable for my type so all functions in the framework use my implementations?</Description>
  </Issue>
  <Issue>
    <IssueID>38606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Enable VSSDK006</Title>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>🔗 Split from #38545</Description>
  </Issue>
  <Issue>
    <IssueID>38603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Hitting Environment.FailFast when opening ProjectSystem.sln</Title>
    <CreatedDate>10/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Not sure exactly the repro here, so hopefully the exception and dump are useful.

On VS master, 29307.11

``

Dump at `\\mlangfs1\public\dawengie\ProjectSystemCrashOnStartup.zip`.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38603</IssueID>
        <PullRequestID>38592</PullRequestID>
        <Title>Fix race condition in AnalyzerConfigSet</Title>
        <Description>When I added the dedup dictionary for diagnostic IDs in AnalyzerConfigSet
it wasn't clear to me that the GetOptionsForSourcePath method was intended
to be called on multiple threads. This change fixes the dedup dictionary
to be thread safe.</Description>
        <CreatedDate>09/09/2019</CreatedDate>
        <ClosedDate>09/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38603</IssueID>
            <PullRequestID>38592</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38599</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>38599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0004 on pointer cast in return statement</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

class Program
{
    public static int Value;

    public static unsafe int Read(IntPtr pointer, int offset)
    {
        Value = ((int*)pointer)[offset]; // No warning
        return ((int*)pointer)[offset];
        //      ~~~~~~
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.3

**Steps to Reproduce**:

``

**Expected Behavior**:

IDE0004 is not reported for the cast.

**Actual Behavior**:

IDE0004 is reported for the cast.</Description>
  </Issue>
  <Issue>
    <IssueID>38596</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn completion cannot find Blazor document on commit</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>10/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>38596</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here 

Roslyn looks for a document in Roslyn workspace but the snapshot may belong to,e.g. a Blazor buffer. Therefore, now document is found and the completion commit is cancelled.

Therefore, completion not working in Blazor scenarios like this one:

</Description>
  </Issue>
  <Issue>
    <IssueID>38595</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Avoid duplicating GetAdditionalProperties by using an extension method</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>22/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
_Originally posted by @chborl in </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38595</IssueID>
        <PullRequestID>37802</PullRequestID>
        <Title>Add Containing Type and Containing Member columns to FAR</Title>
        <Description>Fixes #34336 

This PR adds 2 new columns to the FAR window: Containing Type and Containing Member.  
![GroupByContaining](
</Description>
        <CreatedDate>07/08/2019</CreatedDate>
        <ClosedDate>19/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>38595</IssueID>
            <PullRequestID>37802</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38587</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>38587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider suppressing the formatter when IDE0055 is suppressed</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>27/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-Formatter</Name>
        <IssueID>38587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#pragma warning suppress IDE0055 // Fix formatting
int value = new int ( );
#pragma warning suppress IDE0055 // Fix formatting
`</Code>
    <Description>**Version Used**: 16.3 Preview 3

**Steps to Reproduce**:

Run **Format Document** on a file containing the following:

``

**Expected Behavior**:

The code inside the IDE0055 suppression is not reformatted.

**Actual Behavior**:

The **Format Document** command ignores the IDE0055 suppression, and formats the code anyway.
</Description>
  </Issue>
  <Issue>
    <IssueID>38586</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'warning CS8655: The switch expression does not handle some null inputs' on suppressed nulls</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>16/12/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
public class C {
    public int M0(C a)  =&gt; a switch { C _ =&gt; 0 }; // ok
    public int M1(C? a) =&gt; a switch { C _ =&gt; 0 }; // warns
    public int M2(C? a) =&gt; a! switch { C _ =&gt; 0 }; // warns (none expected)
}
`</Code>
    <Description>**Version Used**: master 

**Steps to Reproduce**:

``

**Expected Behavior**: no warnings in M2

**Actual Behavior**: compiler warns about unhandled null in M2
</Description>
  </Issue>
  <Issue>
    <IssueID>38585</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Refactoring "Apply implicit/explicit type preferences" breaks working code using named tuples with explicit type specifier as out parameter</Title>
    <CreatedDate>09/09/2019</CreatedDate>
    <ClosedDate>09/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[*.cs]
#csharp_style_var_for_built_in_types = false : suggestion
#csharp_style_var_when_type_is_apparent = true : suggestion
csharp_style_var_elsewhere = true : suggestion

(other options left commented, since I wasn't sure if they affect the outcome)
3. Add a C# source file containing the following snippet:
c#
var dict = new Dictionary&lt;string, (int, int)&gt;();

if (dict.TryGetValue("test", out (int One, int Two) tuple))
    Console.WriteLine("One={0}, Two={1}", tuple.One, tuple.Two);

4. Invoke a Code Cleanup profile that includes "Apply implicit/explicit type preferences".

**Expected Behavior**:
Code still compiles afterwards.

**Actual Behavior**:
CS1061 shows for both tuple member accesses. The code has changed to the following (which doesn't compile anymore because the names `One` and `Two` are not known):
c#
var dict = new Dictionary&lt;string, (int, int)&gt;();

if (dict.TryGetValue("test", out var tuple))
    Console.WriteLine("One={0}, Two={1}", tuple.One, tuple.Two);
`</Code>
    <Description>**Version Used**:
Visual Studio Enterprise 2019, Version 16.2.4

**Steps to Reproduce**:
1. Create a C# Project.
2. Add an `.editorconfig` file with `csharp_style_var_elsewhere = true`:
``

**Note**:
While this is probably not the best style of code (and I'd rather encourage the use of `new Dictionary&lt;string, (int One, int Two)&gt;()` - which in fact is the fix I applied afterwards); refactorings in combination with `.editorconfig` directives should not cause code that was previously fine to fail compiling afterwards.

This does _not_ happen for direct indexer access and others; where using `var` would be fine (but deconstruction would be the better option). But as `out` parameter, deconstruction is not (yet) an option, so this is the way to go for now.</Description>
  </Issue>
  <Issue>
    <IssueID>38579</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>38579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Why does compiler generate a br instruction?</Title>
    <CreatedDate>08/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Why does compiler generate so many IL instructions?  Especially, why does compiler generate a br instruction?
</Description>
  </Issue>
  <Issue>
    <IssueID>38578</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VBCS Compiler takes almost 70 % of cpu on every page run on first time in ASP .Net MVC project</Title>
    <CreatedDate>08/09/2019</CreatedDate>
    <ClosedDate>03/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>38578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
![vbcs complier1](
**Version Used**:  2.0.1

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**: Should not use that much of CPU and it takes almost 30 seconds on each page every deployment

**Actual Behavior**: Taking too much time and too much CPU
</Description>
  </Issue>
  <Issue>
    <IssueID>38575</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>38575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code analysis throws NullReferenceException causing VS\csc crash</Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>13/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable

namespace Repro
{
    using System;
    
    class C 
    {
        void M() 
        {
            var value = GetValue((dynamic)"");
            new DateTime?(value);
        }

        DateTime GetValue(string text) =&gt; null;
    }
}
`</Code>
    <Description>**Version Used**: 
VS: `VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61`
.NET Core SDK: `3.0.100-preview9-014004`

**Steps to Reproduce**:

1.  Open the following snippet in VS (you can also check [here](
``

**Expected Behavior**:
No crash.

**Actual Behavior**:
VS crashes when\if the file is open, csc.exe crashes when the compilation is launched without having the file open in VS.</Description>
  </Issue>
  <Issue>
    <IssueID>38572</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS0103 Generate method preview shows empty line only</Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61

**Steps to Reproduce**:
``
Preview the quick fix of generating the `Test()` method

**Expected Behavior**:
![image](

**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38571</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS8509 The switch expression does not handle all possible inputs when it does</Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>20/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>38571</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61

**Steps to Reproduce**:
``

**Expected Behavior**: no warnings (or at least not on the first two)

**Actual Behavior**: CS8509 for all switch expression

At minimum, "the switch expression does not handle all possible inputs" is simply not true.
</Description>
  </Issue>
  <Issue>
    <IssueID>38570</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`MSB4062: Assembly with same name is already loaded` when `Microsoft.Net.Compilers.Toolset` is only used for a part of projects in solution</Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.Net.Compilers.Toolset" Version="3.2.1"&gt;
      &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;
      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
    &lt;/PackageReference&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;

xxxx1.csproj
xml
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;ItemGroup&gt;
    &lt;ProjectReference Include="..\xxxx\xxxx.csproj" /&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
`</Code>
    <Description>**Version Used**: 
dotnet-sdk: 3.0.100-preview9-014004(Also not work for old versions)
Microsoft.Net.Compilers.Toolset: 3.2.1

**Steps to Reproduce**:

1. Create two csproj, add reference of `Microsoft.Net.Compilers.Toolset` to the first, and add reference of the first to the second, no code is needed.
xxxx.csproj
``
2. Try `dotnet build` with the second csproj. (Run `dotnet clean` first if already has an successful build for the first csproj.

**Expected Behavior**:
Build success.

**Actual Behavior**:
&gt; C:\Program Files\dotnet\sdk\3.0.100-preview9-014004\Roslyn\Microsoft.CSharp.Core.targets(59,5): error MSB4062: Failed to get from assembly C:\Program Files\dotnet\sdk\3.0.100-preview9-014004\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll Load the task "Microsoft.CodeAnalysis.BuildTasks.Csc". Assembly with same name is already loaded Please confirm that the &lt;UsingTask&gt; declaration is correct, the assembly and all its dependencies are available, and the task contains a public class that implements Microsoft.Build.Framework.ITask.

It is something by designed, that must reference the same version of `Microsoft.Net.Compilers.Toolset` for all projects in solution?
An workaround is to use `dotnet build /nodeReuse:false` instead or reference the same version of `Microsoft.Net.Compilers.Toolset` for all projects.</Description>
  </Issue>
  <Issue>
    <IssueID>38568</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Regression: Operator '==' cannot be applied to operands of type 'T' and 'default'</Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
    <IssueLabels />
    <Code>
corefx/System.Buffers/ArrayPoolTests.cs(44,21): error CS0019: Operator '==' cannot be applied to operands of type 'T' and 'default' [/Users/filipnavara/agent/_work/1/s/work/performance/src/benchmarks/micro/MicroBenchmarks.csproj]
`</Code>
    <Description>**Version Used**: 

.NET SDK 5.0.100-alpha1-014075

**Steps to Reproduce**:

1. Get 
2. Run `dotnet run -f netcoreapp5.0 -c Release` from `performance/src/benchmarks/micro/` directory

**Expected Behavior**:

No error.

**Actual Behavior**:

``

Relevant code: 



This worked few hours ago with the latest .NET SDK from git master (as of 06/09/2019, 18:09:56 UTC; reported by BDN as `.NET Core 5.0.0-alpha1.19456.2 (CoreCLR 5.0.19.45509, CoreFX 5.0.19.45516), X64 RyuJIT`). I assume the Roslyn dependency got bumped and introduced some breaking change.
</Description>
  </Issue>
  <Issue>
    <IssueID>38567</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unnecessary code colapse points </Title>
    <CreatedDate>07/09/2019</CreatedDate>
    <ClosedDate>23/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
16.4.intpreview

**Steps to Reproduce**:
Have code with sufficient amount of constructs that have header and then block. Look at collapsible regions.

``

![image](


**Expected Behavior**:
Only the top marked collapsible region is there.

**Actual Behavior**:
Both are, the lower one is redundant from UX point of view.

Useful:
![image](

Not useful:
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>38561</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Null reference warning when validation expression result relayed as boolean</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>38561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If I write the following code,
``
&gt; **Note:** This is obviously a contrived example. A real implementation would be far more sophisticated, accounting for e.g. variable names and/or error messages.

FWIW, the project I'm working on happens to be targeting .NET Standard 2.2, but I wouldn't expect that to be relevant here since I'm just referencing internal code and not .NET Standard libraries. </Description>
  </Issue>
  <Issue>
    <IssueID>38560</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refine nullability checks on interface implementations</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>38560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Implementing the same interface twice, indirectly and with nullability differences involving oblivious currently produces a warning, but arguably shouldn't:
``
([sharplab](

Finally, this behavior is not consistently enforced on type constraints: direct scenarios (`where T : I&lt;object?&gt;, I&lt;object&gt;`) produce an error and indirect scenarios (`where T : I&lt;object?&gt;, IObjectUnannotated`) produce no diagnostic.

Relates to tuple name checks on interface implementations (issue  tracks some irregularities).
Relates to PR  (type inference can now handle types that implement duplicate interfaces with nullability differences).</Description>
  </Issue>
  <Issue>
    <IssueID>38559</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>38559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn IDE features exhibiting numerous regressions</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>38559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 Int Preview 16.4

**Steps to Reproduce**:

1. Open a C# project
2. Type some method name 'Foo'

**Expected Behavior**:
Signature help appears and is classified.

**Actual Behavior**:
Signature help appears unclassified.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38556</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Degraded nullable analysis with conditional expression of Generic type</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>29/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
using System;

public class Program
{
    public static void Main()
    {
        var x = new Test&lt;object&gt;(new object());
        Console.WriteLine(x.Value.ToString()); // NullReferenceException here!
    }
}

public class Test&lt;T&gt;
{
    public T Value { get; }


    public Test(T value)
    {
        // this.Value = default; // this raises CS8602 correctly even at 16.2.0 Preview 2.0

        var dummyCond = value == null;
        this.Value = (dummyCond) ? value : default; // no nullable warnings since 16.2.0 Preview 2.0
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
This code raised null reference warning at conditional expression assignment until on VS 16.2.0 Preview 1.0.
But now no warnings and happens NullReferenceException at runtime.
Please check below.

``

---
### Original Comments

#### Visual Studio Feedback System on 6/17/2019, 03:47 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/17/2019, 08:14 PM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>38555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FixupSpan tests are flaky</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>38555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following two tests are failing in otherwise good builds:

- `CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans`
- `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`

Error message: 

``

</Description>
  </Issue>
  <Issue>
    <IssueID>38554</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0018 removes necessary nullable annotations</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>03/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
``
which fails to compile with "warning CS8600: Converting null literal or possible null value to non-nullable type.".</Description>
  </Issue>
  <Issue>
    <IssueID>38552</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE1006 doesn't provide a "fix all"?</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>07/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38552</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38552</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

IDE1006 (naming violations) doesn't provide a "fix all".  My project has &gt; 1000 violations; how do I fix them all based on my editorconfig settings without going through one-by-one?</Description>
  </Issue>
  <Issue>
    <IssueID>38548</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>38548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null dereference warning within local function</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>05/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The compiler generates a warning for `y.ToString()` in 16.4 but no warning in 16.3.
``</Description>
  </Issue>
  <Issue>
    <IssueID>38543</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ternary operator in async method crashes the compiler</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38543</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
using System;
using System.Threading.Tasks;

class Program
{
    static Task Foo(bool b) =&gt; Bar(async () =&gt;
        b ? await Task.Delay(1) : await Task.Delay(2));

    static T Bar&lt;T&gt;(Func&lt;T&gt; f) =&gt; f();

    static void Main(string[] args) {}
}

This code crashes the compiler with the following stack:
&lt;details&gt;
  &lt;summary&gt;Stack trace&lt;/summary&gt;


  Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(BoundStatement body)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(BoundStatement body, MethodSymbol moveNextMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(SynthesizedImplementationMethod moveNextMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()
   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(BoundStatement bodyWithAwaitLifted, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, AsyncStateMachine&amp; stateMachineType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
Stack Trace:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+&lt;&gt;c__DisplayClass41_0.&lt;VisitBlock&gt;b__0()
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;, System.Func`1&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(Microsoft.CodeAnalysis.CSharp.BoundStatement)
   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedImplementationMethod)
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()
   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()
   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.AsyncStateMachine ByRef)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()

&lt;/details&gt;

Replacing ternary operator with the code block fixes compilation error:
C#
    static Task Foo(bool b) =&gt; Bar(async () =&gt;
    {
        if (b)
            await Task.Delay(1);
        else
            await Task.Delay(2);
    });
`</Code>
    <Description>**Version Used**: 3.2.1-beta4-19408-03 (2fc6a049) included with the Visual Studio 2019 (16.2.4)

**Steps to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38542</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider add an diagnostic to report call to an virtual method via base from an different method?</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
    <IssueLabels />
    <Code>cs
    public class Class1
    {
        public virtual void Test1()
        {
        }

        /*public void Test2()
        {
        }*/
    }
    public class Class2 : Class1
    {
        public void Test2()
        {
            base.Test1();
        }
    }
    public class Class3 : Class2
    {
        public override void Test1()
        {
            Console.WriteLine("Do something.");
        }
    }
`</Code>
    <Description>**Version Used**: 
VS2019 16.3.0preview3.0(3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b)
with `Microsoft.CodeAnalysis.FxCopAnalyzers` 2.9.4

**Steps to Reproduce**:

``

**Expected Behavior**:
It will be better if roslyn can report an diagnostic(Info or Warn) for `base.Test1();`(call virtual method `Class1.Test1()` via `base` from another method `Test2()`), it can easily be an mistake of `base.Test2()` or `this.Test1()`(I used to use `base` when there is no `Test1()` in `Class2`, but it will also make the override in `Class3.Test1()` useless).

**Actual Behavior**:
No diagnostic is reported.
</Description>
  </Issue>
  <Issue>
    <IssueID>38539</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Using with alias in suggestions</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>21/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>38539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Add the option to automatically add a using statement with an alias instead. I have a class that I need a using, but I don't want to include everything in that namespace so I need something like this : `using MyClass = Namespace.Something.MyClass`It would be nice if it was in the suggestions instead of the more common `using Namespace.Something`---### Original Comments#### Jane Wu [MSFT] on 8/26/2019, 00:55 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38535</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Considerer using async method instead of sync</Title>
    <CreatedDate>06/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38535</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---&lt;p&gt;I would like to suggest a warning or message when a sync method is being used instead of its async version. For example, supposing we have this interface:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public interface IFoo  {      int DoSomething();      Task&amp;lt;int&amp;gt; DoSomethingAsync(); } &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in the code we are using the sync version:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var result = foo. DoSomething(); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I would like to see a warning/message saying that &lt;code&gt;DoSomething&lt;/code&gt; has an async version.&lt;br&gt; This idea came to my mind when I noticed that a service in my company was suffering from thread starvation. &lt;br&gt;After some hours we figured out that a few methods were being called with the sync version instead of async, which was blocking the thread and causing a lot of timeouts.&lt;/p&gt;---### Original Comments#### Jane Wu [MSFT] on 7/25/2019, 09:48 PM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38529</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatically add . ConfigureAwait(false) when extracting an async method</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>13/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When using the c# Extract Method feature, if the method created is an async method, Visual Studio should automatically add . ConfigureAwait(false) to the end of the call to the new method it replaces the original code with, if the final await statement in the extracted code (on any branch of execution) has . ConfigureAwait(false)---### Original Comments#### Jane Wu [MSFT] on 8/23/2019, 00:08 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38525</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>38525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline rename with file rename fails in a shared project</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Create a C# shared project
2. Add a new class named Class1 and file Class1.cs
3. Try to rename the class to something else. Make sure that "Rename file" is checked, otherwise the issue does not repro.

**Expected Behavior**:
Rename succeeds

**Actual Behavior**:
Rename fails with the following exception:

``</Description>
  </Issue>
  <Issue>
    <IssueID>38523</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposing two new refactoring options for tuple assignments in constructors</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>01/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>38523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
        {
            _server = server;
            _actor = actor;
        }
    }
    
    interface IServer { }
    interface IActor { }
}

To be converted to this:

csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
        {
            (_server, _actor) = (server, actor);
        }
    }
    
    interface IServer { }
    interface IActor { }
}


Taking it a step further, if the user has already defined that their styling preference is to prefer constructor expressions when possible -- the result of the refactoring would be as follows:

csharp
class Program
{
    class FooBar 
    {
        readonly IServer _server;
        readonly IActor _actor;

        public FooBar(IServer server, IActor actor) 
            =&gt; (_server, _actor) = (server, actor);
    }
    
    interface IServer { }
    interface IActor { }
}
`</Code>
    <Description>**Version Used**: 
3.3.0-beta3-19407-03+d961190a1b4b2a81ac178b567840dfeff048b037

**Steps to Reproduce**:

There are certain language features that could use a bit more tooling support, this is one of those situations. I would like to see a styling option for refactoring that enabled code that looks like this:

``

These refactoring would need to work in the opposite manner too, going from tuple to separate statements. This proposal comes from a conversation with @BillWagner, @mikadumont and I were having in the [twitter verse](

- From statements to tuple expression.
- From tuple to separate statements.

I'm assuming this should be labeled as "Area-IDE" and "IDE-CodeStyle"</Description>
  </Issue>
  <Issue>
    <IssueID>38522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null check with 'as' does not update nullable state</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>06/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
SomeType? value = null;
if (value?.Property as AnotherType != null)
{
  _ = value.Property;
}

SomeType? value2 = null;
if (value2?.Property is AnotherType)
{
  _ = value2.Property;
}
`</Code>
    <Description>**Version Used**: 16.3 Preview 2

**Steps to Reproduce**:

``

**Expected Behavior**:

No warning is reported on the access of `value.Property` or `value2.Property`.

**Actual Behavior**:

A warning is reported on the access of `value.Property`, but no warning is reported on the access of `value2.Property`.</Description>
  </Issue>
  <Issue>
    <IssueID>38517</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>#region Auto-Indenting Misbehaving</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>17/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---C#/Tabs/Indenting: BlockC#/Tabs/Tab/Tab_size: 4C#/Tabs/Tab/Indent_size: 4C#/Tabs/Tab/Keep_tabs (true)I have to stipulate that I am somewhat old-school, and have tried to disable _most-if-not-all_ auto-formatting.  All I want is the _guarantee_ that when I press [ENTER], the editor Inserts a newline plus indentation to place the cursor at (R+1, C).**EXAMPLE 1**:  Start with the following code:``Not observing the Block is frustrating enough without the &amp;quot;spooky action at a distance.&amp;quot;---### Original Comments#### Visual Studio Feedback System on 8/22/2019, 04:05 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38515</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Wrap parameters style should be configurable from code style</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>10/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When you right click on a method name you get options on the context menu to wrap and align parameters.Rather than picking the style of wrapping each time it is used, I would like to be able to configure which style of wrapping is to be used for the whole solution in the code style options and save them to .editorConfig rather than having each developer choose on a case-by-ca se basis.I would also like code cleanup to automatically wrap parameters using my chosen style when the line length is over a configured length.---### Original Comments#### Jane Wu [MSFT] on 8/20/2019, 03:54 AM: &lt;p&gt;Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.&lt;/p&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38513</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EditorConfig applicable_kinds 'type_parameter' and 'interface' stopped working</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
root = true

# DotNet style
[*.{cs,vb,cshtml,vbhtml}]

### Naming Conventions

## Styles

# The basics
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Underscore camel style
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization = camel_case

# Pascal I prefix
dotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix = I
dotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization = pascal_case

# Pascal T prefix
dotnet_naming_style.pascal_case_and_prefix_with_T_style.required_prefix = T
dotnet_naming_style.pascal_case_and_prefix_with_T_style.capitalization = pascal_case

## Symbols

# Interfaces
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

# Type parameters
dotnet_naming_symbols.type_parameter_symbols.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameter_symbols.applicable_accessibilities = *

# Pascal most of the things
dotnet_naming_symbols.pascal_symbols.applicable_kinds = class, struct, enum, property, method, event, namespace, delegate, local_function
dotnet_naming_symbols.pascal_symbols.applicable_accessibilities = *

# Parameters, locals
dotnet_naming_symbols.locals_and_parameters_symbols.applicable_kinds = parameter, local
dotnet_naming_symbols.locals_and_parameters_symbols.applicable_accessibilities = *

# Constants
dotnet_naming_symbols.constant_symbols.applicable_kinds = field
dotnet_naming_symbols.constant_symbols.required_modifiers = const
dotnet_naming_symbols.constant_symbols.applicable_accessibilities = *

# Public fields
dotnet_naming_symbols.public_field_symbols.applicable_kinds = field
dotnet_naming_symbols.public_field_symbols.applicable_accessibilities = public, internal, friend, protected, protected_internal, protected_friend, private_protected

# Private fields
dotnet_naming_symbols.private_field_symbols.applicable_kinds = field
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities = private

## Naming Rules

# Interfaces
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.symbols = interface_symbols
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.style = pascal_case_and_prefix_with_I_style
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.severity = warning

# Type parameters
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.symbols = type_parameter_symbols
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.style = pascal_case_and_prefix_with_T_style
dotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.severity = warning

# Pascal most of the things
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.symbols = pascal_symbols
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.severity = warning

# Parameters, locals
dotnet_naming_rule.parameters_must_be_camel_cased.symbols = locals_and_parameters_symbols
dotnet_naming_rule.parameters_must_be_camel_cased.style = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_cased.severity = warning

# Constants
dotnet_naming_rule.constants_must_be_pascal_cased.symbols = constant_symbols
dotnet_naming_rule.constants_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.constants_must_be_pascal_cased.severity = warning

# Public fields
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = public_field_symbols
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = pascal_case_style
dotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning

# Private fields
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = private_field_symbols
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = camel_case_and_prefix_with_underscore_style
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning


And the given file in an SDK style class library project:
 csharp
using System;

namespace classLibrary1
{
    public interface fooInterface
    {
        
    }

    public class class1
    {
        public delegate void delegateFoo();

        public event EventHandler&lt;class1&gt; eventFoo;

        public static readonly string pubFoo = "PubBar";

        public const string conFoo = "ConBar";
        private const string foo = "Bar";

        private readonly string name;

        public class1(string Name)
        {
            string Local = "";

            name = Name ?? foo + Local;
        }

        public string getName()
        {
            doThing();
            DoOtherThing&lt;object&gt;();

            return name;

            void doThing()
            {

            }

            void DoOtherThing&lt;arg&gt;()
            {

            }
        }
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 16.3.0 Preview 3

**Steps to Reproduce**:
With the given .editorconfig:
``

Open the file. Nearly every symbol was written to trigger naming rule breaks.

**Expected Behavior**:
Virtually every symbol should have a rule break warning. This works in 16.2.3.

**Actual Behavior**:
The interface `fooInterface` and the type arg in `DoOtherThing&lt;arg&gt;()` do not have warnings for breaking naming conventions.

Attaching an image depicting the differences visually:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38512</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ctrl+. on a long // comment (or on on of a number of // comment lines) distibutes the comment over multiple lines</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Let's say you have:``---### Original Comments(no comments)</Description>
  </Issue>
  <Issue>
    <IssueID>38511</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate Local variable outside of current block</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38511</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38511</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38511</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>38511</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When Quick Actions suggest to create a local variable, when we are in a code block (if, using, etc.) The local variable could be created outside of the block (just before)This should be a new quick action or replacing the Create Local variable.Example:``The quick action is called on blogs---### Original Comments(no comments)</Description>
  </Issue>
  <Issue>
    <IssueID>38508</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Auto-completion initializing nullable local creates invalid code</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>09/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-IntelliSense</Name>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
Add this code:
``
Then type:
`o = new`
and hit space.  It pops up IntelliSense to complete the new expression:
![image](
Then type Tab.

**Expected Behavior**:
IntelliSense should select `object`, not `object?`.

**Actual Behavior**:
The selected item is `object?`, which is invalid in a constructor:
![image](</Description>
  </Issue>
  <Issue>
    <IssueID>38507</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0059 has misleading auto-fix name / incorrect preview with unnecessary ??= assignment</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>11/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE0059 triggers about using `??=` instead of `??` here.

**Actual Behavior**:
![image](

The good news is the auto-fix will correctly substitute the "??" for the "??=".  However, two issues:
1) It names the auto-fix "Use discard _", even though it won't.
2) The preview doesn't show either the old or the new code being transformed.</Description>
  </Issue>
  <Issue>
    <IssueID>38506</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0041 only offers `is null` when there's a cast</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE0041 offers to "Use 'is null' check" on both M1 and M2.

**Actual Behavior**:
IDE0041 only offers to "Use 'is null' check" in M1.</Description>
  </Issue>
  <Issue>
    <IssueID>38503</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# compiler should report CS1525 when "new" keyword followed by type name is not specified inside object initializer for a type member.</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>38503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38503</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017 
Version 15.9.12
VisualStudio.15.Release/15.9.12+28307.665
Microsoft .NET Framework
Version 4.7.03056
**Steps to Reproduce**:

1. Write object initializer as below in method:
`           var paymentResponse = new PaymentResponse();

            paymentResponse.PaymentCard = new Card
            {
                Number = "number",
                ExpirationDate = new DateTime(year: _validCreditCard.Expiry.Year, month:_validCreditCard.Expiry.Month,day:1),
                Cvv="cvv",
                Type="type",
                Name= "Name",
                Address ={ Address1= "Address1", City= "City", State= "State", Country= "Country", PostalCode= "PostalCode" }
            };
`
2.Try to build above code 

**Expected Behavior**:
Compiler should report CS1525 for line assigning "Address" inside object initializer.
**Actual Behavior**:
Code gets built successfuly. But throws null reference exception while running code since Address property is null.
If code line that assigns "Address" is moved outside Card initializer it reports error CS1525.</Description>
  </Issue>
  <Issue>
    <IssueID>38502</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>petrroll</FixedById>
        <IssueID>38502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A bunch of code refactorings crash if you attempt to add an attribute to a parameter</Title>
    <CreatedDate>05/09/2019</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38502</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.4.0 Preview 1.0 [29303.122.master]

**Steps to Reproduce**:

This affects about ~10 refactorings all with the same stack:

1. Where indicated by $ add a `[`
``</Description>
  </Issue>
  <Issue>
    <IssueID>38491</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>winforms ResetPropertyName and ShouldSerializePropertyName incorrectly marked with IDE0051: Private member is unused</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>11/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38491</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---When I have a member `void ResetX() {}` in a class inheriting from `System.Windows.Forms.Control` with a member `public object X { get; set; } `, Visual Studio incorrectly reports IDE0051 and provides a codefix to remove “unused code”. However, that method is actually discovered and called by Designer if the user right-clicks on the property in the PropertyGridView and selects Reset.Visual Studio should know about the private members that winforms will discover and not mark them unused. It should, for example, find unused members that are unused because the property referenced by the naming convention is not found. For example, it should report `void ResetY() {}` as unused if there is no `public object Y { get; set; } `.---### Original Comments#### Visual Studio Feedback System on 8/6/2019, 00:12 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38489</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>38489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Fix typo 'paramereters' in IDE0060 FxCop analyzer rule</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38489</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

``

**Steps to Reproduce**:

1. Use this rule and trigger IDE0060 by having an unused parameter
2. See typo in message
3. Or, more simply, use this GitHub search to see the typos: 

**Expected Behavior**:
No typos.

**Actual Behavior**:
Tpyos.


Note: This typo was mentioned in  but not addressed.</Description>
  </Issue>
  <Issue>
    <IssueID>38486</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Relaxed ordering for ref this does not check language version</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>02/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>38486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>38486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

class Program
{
    static void Main()
    {
        string code = @"
struct S {}

static class Extensions
{
    static void M1(this ref S s) {}
    static void M2(ref this S s) {}
}";

        var tree = SyntaxFactory.ParseSyntaxTree(code, new CSharpParseOptions(LanguageVersion.CSharp7));

        var compilation = CSharpCompilation.Create("a.dll", options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
            .AddSyntaxTrees(tree)
            .AddReferences(MetadataReference.CreateFromFile(typeof(object).Assembly.Location));

        foreach (var diag in compilation.GetDiagnostics())
            Console.WriteLine(diag.ToString());
    }
}
`</Code>
    <Description>**Version Used**: Roslyn 2.7.0 or newer

**Steps to Reproduce**:

Run the following code:

``

**Expected Behavior**:

Both methods report an error saying that such code is not available in C# 7.0.

**Actual Behavior**:

Only `M2` reports an error:

&gt; (7,20): error CS8107: Feature 'ref extension methods' is not available in C# 7.0. Please use language version 7.2 or greater.

I think this happens because when the ordering of modifiers on `ref` extension methods was relaxed in 2.7.0, a language version check wasn't added for the new syntax.

I think this isn't a serious problem and fixing it would be a breaking change, so this might not be worth fixing, but I thought it was worth reporting anyway.

This behavior was discovered in </Description>
  </Issue>
  <Issue>
    <IssueID>38485</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler fails to parse is operator with a recursive pattern using type parameters</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public readonly struct Box&lt;T&gt;
{
    public T Obj { get; }

    public Box(T obj)
    {
        this.Obj = obj;
    }
}

2. Attempt to use that type in an `is` expression with recursive pattern matching:
cs
public static bool RecursiveIsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; { Obj: T _ };
}

3. The following 5 errors are emitted:

error CS1525: Invalid expression term '{'
error CS1002: ; expected
error CS1002: ; expected
error CS0305: Using the generic type 'Box&lt;T&gt;' requires 1 type arguments
error CS0119: 'T' is a type, which is not valid in the given context


p.s.: SharpLab sample [here](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEDMACBcIBMD2AdgDYCeGsCArgMYwYBC+AHgDwAqAfALABQA3nwzCM6DOwwB5YACsM/DAHM4MANwYAvnyEixTZgAoJ+WQEodwwbxE2MMABYBLKADppcgLwYTM1Rc18Wrx8YigAjABsogBMjHxWNqGRGMD4+MQYAJJQ+hycBj5wdBjM5tYiCbbCKADsJRjOjCx5KSwYAGTtrcxusg1Q4hgA+n7lwkE2/klRqekYAEpFVAhQjgBucNm5XAWyRfSl/pVVtfWN25zyUrIgg0OaozZBGkA=)

**Expected Behavior**:
The code is parsed and accepted and works in the same way as if the operations were done separately as in the following code:
cs
public static bool IsBox&lt;T&gt;(object x)
{
    return x is Box&lt;T&gt; box &amp;&amp; box.Obj is T _;
}
`</Code>
    <Description>**Version Used**: master (31 Aug 2019) on SharpLab

**Steps to Reproduce**:
1.  Create a type with generic type parameters:
``

**Actual Behavior**:
The errors are emitted.</Description>
  </Issue>
  <Issue>
    <IssueID>38480</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Design issues around moving IDE code style analyzers to CodeStyle Analyzers NuGet package</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As part of  we want to move as many IDE analyzers as possible into the CodeStyle analyzers NuGet package so the rules can be enforced on build/CI. We have already moved IDE0055 (Formatting analyzer) to this NuGet package, and I tried to move an additional analyzer to the package ( but ran into bunch of design questions/issues that need to be discussed.

1. **Diagnostic Analyzer:** This is the core piece that needs to be ported from IDE Features project to CodeStyle project. Design questions in this effort:
   1. **Should we re-use the same IDE diagnostic IDs for the ported analyzer?**
       Design Proposal: "yes", otherwise we run into issue about identical diagnostics with just a differing ID for each violation, duplicate suppressions, duplicate configuration (editorconfig/ruleset/nowarn entries) etc.
   2. **De-duping of diagnostics from different sources:** If we re-use the diagnostic IDs for the ported analyzer, this will likely happen by default. We should confirm with @heejaechang. 
   3. **De-duping of diagnostic analyzers from different sources:** Given that the analyzer assembly containing these analyzers have different name (CodeStyle versus Features), there will be no automatic-deduping of analyzers and the analyzer from both these sources will execute. Do we care about the performance impact from duplicate analyzer execution? Should we add custom logic to IDE diagnostic service to not execute the IDE analyzer when there is an identical analyzer (say with same name and reporting same supported diagnostic IDs)?
   4. **Should we move the CodeStyle package to reference Microsoft.CodeAnalysis 3.x?** Currently, the CodeStyle NuGet package targets Microsoft.CodeAnalysis 2.8.2 to enable running on Dev15 to promote dogfooding. However, this prevents porting of bunch of analyzers which use APIs from Microsoft.CodeAnalysis 3.x. We can take couple of approaches here:
      1. Move to Microsoft.CodeAnalysis 3.x and officially state that newer CodeStyle NuGet packages are only supported with Dev16 and 3.x compiler toolset. Dev15 users can use prior CodeStyle packages.
      2. Stay on Microsoft.CodeAnalysis 2.8.2, and use Reflection based approach to light up analyzers using newer APIs if user is on Dev16.
      Personally, I hate the reflection based approach and would strongly prefer just moving to Microsoft.CodeAnalysis 3.x.

2. **Code fixer:** This is likely the most controversial and tricky piece to port, given that majority of our code fixers depend on internal IDE workspace and language services and extension methods, which in turn use bunch of internal utilities, helper utilities (for example, symbol equivalence comparer), etc.
   1. **Should we port IDE code fixers to Code Style layer?** Theoretically speaking, this is not required as code fixers never execute in CI. Following are the pros and cons of this porting effort:
      1. PROS:
         1. Code style layer can remain isolated from IDE, and can be on par with other third party analyzer/fix packages. This can help us identify potential IDE internal APIs and utilities that should be made public.
         2. Protects us against breaking change in the analyzer, where IDE code fixers do not need to handle all versions of analyzer (from different version of NuGet packages)
       2. CONS:
          1. Implementation cost: As mentioned above, porting code fixers would likely be the most costly part of the port effort, possibly also making this whole work item unfeasible and unrealistic.
          2. Unmaintainable code: The entire IDE Workspaces and Features layer would be filled with linked files, #ifdefs based on code style preprocessor directive, splitting of extension methods into two separate files, one included in both Code Style and IDE layers, and one only in IDE layer. IMO, the code keeps getting pretty mess to work with and maintain.
           3. De-duping code fixers: We will end up showing duplicate, identical code fixes from CodeStyle NuGet and IDE (need to confirm), which means we need to design a way to de-dupe code fixers and implement it. This would mean more work.

      **Design Proposal:** Given the extremely large number of highly impactful CONS and the overall implementation and maintenance cost likely being a deal breaker for this effort, I would like to propose that we don't port the code fixers to code style layer. We should harden the code fixers so they gracefully bail out if the diagnostic location/properties is not as it expects, so it can handle analyzer breaking changes gracefully, and we can recommend customers to just upgrade to latest analyzer NuGet package to light-up the IDE code fixers again.

2. **Unit tests:** 
   1. **Should we port and/or clone unit tests for analyzers/fixers CodeStyle project?** We have following possible approaches, each with its own PROS and CONS:
      1. **Clone unit test files into CodeStyle project:** This approach is only applicable if we decide that we are going to port the code fixers into CodeStyle NuGet layer, otherwise the unit tests need to continue using IDE code fixers and hence cannot be moved to CodeStyle unit tests project. Formatting analyzer port did not port any existing formatting tests, but added just a few additional formatting analyzer tests in the CodeStyle package for the ported analyzer. This approach will certainly not work for other analyzers, as we want to run every authored analyzer/fixer unit test for both the IDE version of the analyzer and the ported analyzer in CodeStyle package. Creating cloned test files in CodeStyle unit test project will likely be impossible to maintain and keep them in sync with Features unit test project. Additionally, if we decide not to re-use the IDE test framework, and use the new Microsoft.CodeAnalysis testing library, we will have to edit each and every ported unit test, which will enormously increase the port and maintenance effort.
      2. **Link unit test files into CodeStyle project and continue using the IDE test framework:** This is comparatively much easier to implement and maintain compared to the prior approach. Again this approach is only applicable if we decide to port the code fixers into CodeStyle NuGet layer. I think this might be the most feasible approach if we decide to keep the CodeStyle package and its test project isolated from rest of Roslyn.sln.
      3. **Tweak the existing IDE test helpers in Features test project to test analyzers and/or fixers from both the Features and Code Style layer:** With this approach, the core unit test helpers just have an additional test dimension where they run with CodeStyle analyzer and/or CodeStyle fixer (latter is needed if we decide to port the fixers). This would be similar to how our IDE analyzer/fixer tests run for both regular and script code kind by default. Each test file would just need to override a helper indicating additional analyzer/fixer against which to run all the tests. This approach would likely be minimal porting effort and also easiest to maintain.

**Overall Design Proposal:** I think we should try to keep a very good balance between ideal and practical aspects of the above approaches. I fear taking the ideal approach, which would be to port analyzer, code fixers and unit tests (also moving them to new analyzer/fixer test library) would make this effort almost impossible to complete.
IMO, we should do the minimal implementation/maintenance cost approach which would be feasible and also gives end user value add: **port just the diagnostic analyzers and do not port the code fixers or unit tests**, but just ensure that the code fixers are hardened against analyzer breaking changes and tweak existing IDE unit tests to also run with ported CodeStyle analyzers.

</Description>
  </Issue>
  <Issue>
    <IssueID>38479</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio Profession 2019 Performance Issue.</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38479</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38479</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Microsoft Visual Studio Profession 2019. Version 16.2.3. Window 10 with Lates updates**: 

**Main Issue**:
I have just opened two projects in two different VS IDE windows. The servicehub.host.clr.x86(32 bit) take 96% of CPU time for a minute and during this time IDE behaves very slow, even IntelliSense are not show the suggestion very slow. I am not sure how to solve this issue, either I have to switch back to VS Community 2017 or what.

**Expected Behavior**:
VS IDE should be smooth and.
**Actual Behavior**:
Very hight cpu utilization and 900 MB of RAM usage.</Description>
  </Issue>
  <Issue>
    <IssueID>38477</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dibarbet</FixedById>
        <IssueID>38477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Liveshare FAR requires UI thread</Title>
    <CreatedDate>04/09/2019</CreatedDate>
    <ClosedDate>24/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, liveshare FAR requires the UI thread as it calls into the [AbstractFindUsagesService](  This requires the UI thread to get third party definitions (which in this case means XAML).  We need to remove UI thread dependencies (and editor dependencies) from the liveshare implementation in order to create a proper LSP version of FAR.

Known UI dependencies in FAR
1.  [XAML navigation](
    a.  Service provider
    b.  IVsHierarchy
    c.  IVsSymbolicNavigationNotify
2.  [Invisible editor]( (find source line)

For 1), we need to work with the XAML team to define a way to provide navigation in the new VS APIs as many of the concepts being used there may go away.

Generally, the approach being considered is to move to the lower level data API SymbolFinder, but we still need to figure out how to handle 1).</Description>
  </Issue>
  <Issue>
    <IssueID>38429</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>provide a power save mode</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>20/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
  </Issue>
  <Issue>
    <IssueID>38427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Check for matching tuple names missing in type constraints</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`where T : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` should produce an error just like `class C : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` does.

I think this should also apply to indirect constraints, such as `where T : I&lt;(int a, int b)&gt;, I2` with `interface I2 : I&lt;(int c, int d)&gt;` out of consistency with implementation scenario (`class C : I&lt;(int a, int b)&gt;, I2 { }` produces an error).

Note: this would be a breaking change.</Description>
  </Issue>
  <Issue>
    <IssueID>38426</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.editorconfig is causing memory explosion in syntax trees</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Open</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>(FYI: This may be one of the root causes of #38330 reported by @davkean.)

I have a solution which is made up of multiple copies of the project-system repo (~400 projects in total). Looking a dump of the managed heap, nearly 10% of the managed heap (243mb of 2.3Gb) is consumed by duplicated strings held by `CSharpSyntaxTree.ParsedSyntaxTree`. The issue is that the project-system repo has an .editorconfig that turns diagnostics on/off and `Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath` does substring parsing of rules of the form "dotnet_diagnostic.&lt;diagnostic&gt;.severity". Since it does this _for each syntax tree in the solution_ (~6 million of them in this case), each substring parse is duplicated over and over and over again. It looks like if `AnalyzerConfig.Section` just did this substring parsing once and passed back the same string for everyone, this would eliminate the duplication.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38462</PullRequestID>
        <Title>Cache diagnostic ID strings in the AnalyzerConfigSet</Title>
        <Description>I'm not sure if this is exactly where we want to do the caching, so I've
taken the opportunity to make all the non-core AnalyzerConfig APIs internal.
There are no existing consumers depending on them, so this is not a breaking
change.

Fixes #38426</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38462</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38760</PullRequestID>
        <Title>Cache AnalyzerConfigOptionsResult instances</Title>
        <Description>A common case for editorconfig is for most of the source files to have the same
options specified, which means if we store options for each source file it's
likely we'll have many duplicate sets. This change adds a cache to AnalyzerConfigSet
to try to de-dup identical options dictionaries to a single shared instance.</Description>
        <CreatedDate>19/09/2019</CreatedDate>
        <ClosedDate>25/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38760</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Include parameters', this class' fields' and local variables' values on stack trace</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels />
    <Description>I've seen this when executing Python in some environments: when an error (exception) is raised, all pertinent values up and down the stack are captured. This greatly improves debugging, in many cases allowing a bug to be fixed without having to reproduce the entire scenario by stepping through code, etc.

**Version Used**: Both .NET Framework and Core

**Steps to Reproduce**:

Throw an exception, or use "new StackTrace()"

**Expected Behavior**: Values are captured and shown in the stack trace

**Actual Behavior**: Values are not captured
</Description>
  </Issue>
  <Issue>
    <IssueID>38422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Option Explicit On" does not report an error when there is an undeclared variable</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I always use &amp;quot;Option Explicit On&amp;quot;, it always works very reliably!But today, in this case I do not see an error with the command &amp;quot;For i = f.Count - 1 To 0 Step -1&amp;quot; when the counter i has not been declared in one of my functions.This is the first time I encountered this strange phenomenon. Please review and correct. Thank you very much!Source code:Private Function FMsys_to_List() As List(Of String)        Dim f As List(Of String)        f = New List(Of String)(File.ReadAllLines(FM_Sys, encoding:=Encoding.Unicode))        For i = f.Count - 1 To 0 Step -1            f(i) = f(i). Trim            ' Bo comment va dong trong            ' Phai dung (Left,1) ko duoc dung Chars(0) vi s.Chars(0) bao loi khi s=&amp;quot;&amp;quot;            If f(i). Length = 0 Or Left(f(i), 1) = &amp;quot;'&amp;quot; Then f.RemoveAt(i)        Next        f.TrimExcess()        Return f    End Function ' FMsys_to_List* Of course I have the &amp;quot;Option Explicit On&amp;quot; declaration at the top, outside the Module* The price that the Sub / Function name automatically notes right after End Sub / Function is too good. Extensive for everything else. Thanks!---### Original Comments#### Visual Studio Feedback System on 8/8/2019, 03:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38420</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Object synchronization method was called from an unsynchronized block of code</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>git checkout netcoreapp3.0
go to folder: test/ENode.Kafka.Tests
run dotnet build "ENode.Kafka.Tests.csproj" -c Release -o /app/build

**Exception**

 You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
`</Code>
    <Description>**Version Used**: 
net core sdk version: 3.0.100-preview8-013656
os version: ubuntu 16.04.4 LTS x64

**Steps to Reproduce**:
clone this [project]( 
checkout: ``
</Description>
  </Issue>
  <Issue>
    <IssueID>38405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Upgraded to Preview 2.0 and VB Core 3.0 applications no longer compile, they are multiple errors and warnings.---### Original Comments#### Visual Studio Feedback System on 8/14/2019, 03:00 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions#### James Mu solved on 8/13/2019, 11:35 PM, 0 votes: &lt;p&gt;I solved this problem by adding the following code to a new VB code file:&lt;/p&gt;&lt;pre&gt;Namespace Global.Microsoft.VisualBasic.MyServices.Internal    Public Class ContextValue(Of T)        Public Property Value As T    End ClassEnd Namespace&lt;/pre&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38403</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2019 (and preview) crashes when I paste this code into the editor</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System;
using System.Collections.Generic;
using System.Text;

public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}

public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
What steps will reproduce the problem?
1. Create a new .NET Core 3.0 (preview 7 or 8) Console Project in latest Visua Studio 2019 16.2 or preview 2.0 16.3.0 
2.  Just paste the following code below into the editor (replace the existing code)
3. Visual Studio just hangs and after a while just crash

What is the expected output? What do you see instead?

Editor shoudl not crash, confirmed on a blank fresh installed Windows 10, with fresh install of latest VS2019 and .NET Core 3 preview.

Please provide any additional information below.

The code that I paste in (don't ask me why),  just copied from some website while exploring the non-nullable types feature.

``

---
### Original Comments

#### Fiona Niu[MSFT] on 8/22/2019, 00:15 AM: 

&lt;p&gt;Thank you for taking the time to log this issue! Could you please provide more information via the Visual Studio Feedback Tool(Help -&amp;gt; Send Feedback -&amp;gt; Report A Problem)so that we can conduct further research?  The feedback tool  will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).&lt;br&gt;
Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• Open Visual Studio Feedback tool.
 
• Click the banner letting you know that you have problems requesting your attention.
 
• Click this problem from the list

• Click &amp;quot;View their request and respond&amp;quot; from the problem details banner

• Add a comment, in the Attachments/Record: click Start Recording

• When the Steps Recorder tool appears, perform the steps that reproduce the problem.

• When you're done, choose the Stop Record button.
 
• Wait a few minutes for Visual Studio to collect and package the information that you recorded.

• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full instructions, please see: &lt;a target='_blank' href=" . For information about what data is collected, see &lt;a target='_blank' href="
We look forward to hearing from you!&lt;/p&gt;

#### visualstudio on 8/22/2019, 00:28 AM: 

I just copy paste the code from the issue and bang the studio stops responding, just crashes/dies after a while.  I can't type anything else after I paste the code into a new fresh console appliction.
#### Tore Nestenius on 8/22/2019, 00:32 AM: 

&lt;p&gt;You got my recording?&lt;/p&gt;

#### Fiona Niu[MSFT] on 8/22/2019, 00:51 AM: 

&lt;p&gt;Thanks a lot for providing the information. We got your attachments. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Greg Smith on 8/26/2019, 08:53 AM: 

I also get this crash on the third paste of std::isfinite to replace _finite. Exactly as the OP reports, VS goes unreponsive for a few seconds, then restarts.

---
### Original Solutions
(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38403</IssueID>
        <PullRequestID>38617</PullRequestID>
        <Title>VisitType should visit type arguments for error types.</Title>
        <Description>Fixes #38403.</Description>
        <CreatedDate>10/09/2019</CreatedDate>
        <ClosedDate>11/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38617</PullRequestID>
            <IssueID>38403</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38401</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS1580 fired with a paramater that is generic and nullable (xml doc)</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
I'm using VS2019 16.1.1 (in VS2017 15.9.12 this does not happen)
The app is using .net core 2.2, and the analyzers Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.2
StyleCop.Analyzers 1.1.118 

I have method with this definition:

``

and in a xml doc I have this:

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// Internally uses &amp;lt;see cref=&amp;quot;TypeValidations.HasValue{T}(T?) &amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
&lt;/pre&gt;

In VS2019 this fires the error:

&gt; Error	CS1580	Invalid type for parameter T? in XML comment cref attribute: 'TypeValidations.HasValue{T}(T?) '

If I change the documentation to `TypeValidations.HasValue{T}(Nullable{T})`  now I got an analyzer error (SA1125) telling me that I should use the shorthand notation for nullable types.

---
### Original Comments

#### Visual Studio Feedback System on 5/30/2019, 07:14 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 02:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 04:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38398</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent accessibility checks  produce unexpected errors when types nested into interfaces are involved</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void InconsistentAccessibility()
        {
            var source1 =
@"
    interface I1
    {
        protected interface I2
        {
        }
    }

    class C1
    {
        protected interface I2
        {
        }
    }

    interface I3 : I1
    {
        protected I1.I2 M1();
    }

    class C3 : I1
    {
        protected void M1(I1.I2 x) { }
    }

    class C33 : C1
    {
        protected void M1(C1.I2 x) { }
    }
";
            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            compilation1.VerifyDiagnostics(
                // (18,25): error CS0050: Inconsistent accessibility: return type 'I1.I2' is less accessible than method 'I3.M1()'
                //         protected I1.I2 M1();
                Diagnostic(ErrorCode.ERR_BadVisReturnType, "M1").WithArguments("I3.M1()", "I1.I2").WithLocation(18, 25),
                // (23,24): error CS0051: Inconsistent accessibility: parameter type 'I1.I2' is less accessible than method 'C3.M1(I1.I2)'
                //         protected void M1(I1.I2 x) { }
                Diagnostic(ErrorCode.ERR_BadVisParamType, "M1").WithArguments("C3.M1(I1.I2)", "I1.I2").WithLocation(23, 24)
                );
        }
`</Code>
    <Description>``

Expected: No errors. Note, we don't produce the error for scenario when protected interface is nested into a class, the C33 case. </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38398</IssueID>
        <PullRequestID>38451</PullRequestID>
        <Title>Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.</Title>
        <Description>Fixes #38398.</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>05/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Default Interface Impl</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38451</PullRequestID>
            <IssueID>38398</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Search in Git history window doesn't work fine with multiline.</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes, we will commit with multiline message, such as:

Enter the following commit message:
``
Search `first` in git history window can find this commit, but `second` can't.

</Description>
  </Issue>
  <Issue>
    <IssueID>38382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense lists unfitting generic extension methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.IO;

namespace ExampleLib
{
    public class Class1
    {
        public void Test()
        {
            object x;
            x. // use IntelliSense here
        }
    }

public static class StreamExtensions
    {
        public static T Read&amp;lt;T&amp;gt;(this T self, out int result) where T : Stream
        {
            result = 1234; // sample code
            return self;
        }
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Hence the following code:``I defined an extension method using a generic type parameter for the extended class, but it is limited to `Stream` instances due to the type constraint on `T`. This was done to return an extended, typed instance to allow chain calling such methods.However, when typing `x.` at the marked position in `Class1::Test`, IntelliSense also lists the `Stream` only extension method `Read&amp;lt;&amp;gt;` even though `object` is not guaranteed to be of type `Stream`. The full list shown by IntelliSense then is- Equals- GetHashCode- GetType- Read&amp;lt;&amp;gt;- ToStringIs this expected behavior? Of course, theoretically `x` could be passed by calling the method &amp;quot;normally&amp;quot; without syntactic extension method sugar. However, it turns generic extension methods into IntelliSense-cluttering bad guys.Can this behavior be made optional?---### Original Comments#### Visual Studio Feedback System on 8/22/2019, 09:36 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 16.3.0 Preview 2 - IDE0060 Double Underscore False Positive</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---IDE0060 Remove unused parameter '__' is thrown here on the double underscore. Shouldn't this be considered a valid pattern for a discard variable?``---### Original Comments#### Visual Studio Feedback System on 8/28/2019, 09:22 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Replace property with method refactoring discards unsafe modifier</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Program
{
    public static unsafe void* Pointer =&gt; default;
}


diff
+Expected Behavior
-Actual Behavior


diff
class Program
{
+    public static unsafe void* GetPointer()
-    public static void* GetPointer()
    {
        return default;
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.3 Preview 2

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>38377</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler does no longer report local variable scope conflict</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class C
{
    public List&lt;string&gt; Values = new List&lt;string&gt;();
    
    public void M(IEnumerable&lt;C&gt; source) 
    {
        source.Where(x =&gt; x.Values.Any(x =&gt; x == "Hello World"));
    }
}


**Expected Behavior**:

error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
`</Code>
    <Description>**Version Used**:  16.3 Preview 2

**Steps to Reproduce**:
I don't know if this is an expected new feature or not, i've noticed because it broke on the build server (having only 16.2.3 installed) and my .NET Framework project is set to Language version `Automatically selected based on framework version` (7.3).
[Sharplab](
``
**Actual Behavior**:
Compiles fine</Description>
  </Issue>
  <Issue>
    <IssueID>38369</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][roslyn] Localizability of "0; "WRN_UninitializedNonNullableField"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Non-nullable {0} '{1}' is uninitialized. Consider declaring the {0} as nullable.

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
assumed that the placeholder {0} will be replaced with "field" and translated accordingly. Please kindly inform us what this placeholder will be replaced with.</Description>
  </Issue>
  <Issue>
    <IssueID>38368</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][Roslyn] Localizability of "0; "IDS_CSCHelp"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
\r\n                             Visual C# Compiler Options\r\n\r\n                       - OUTPUT FILES -\r\n-out:&lt;file&gt;                   Specify output file name (default: base name of\r\n                              file with main class or first file)\r\n-target:exe                   Build a console executable (default) (Short\r\n                              form: -t:exe)\r\n-target:winexe                Build a Windows executable (Short form:\r\n                              -t:winexe)\r\n-target:library               Build a library (Short form: -t:library)\r\n-target:module                Build a module that can be added to another\r\n                              assembly (Short form: -t:module)\r\n-target:appcontainerexe       Build an Appcontainer executable (Short form:\r\n                              -t:appcontainerexe)\r\n-target:winmdobj              Build a Windows Runtime intermediate file that\r\n                              is consumed by WinMDExp (Short form: -t:winmdobj)\r\n-doc:&lt;file&gt;                   XML Documentation file to generate\r\n-refout:&lt;file&gt;                Reference assembly output to generate\r\n-platform:&lt;string&gt;            Limit which platforms this code can run on: x86,\r\n                              Itanium, x64, arm, arm64, anycpu32bitpreferred, or\r\n                              anycpu. The default is anycpu.\r\n\r\n                       - INPUT FILES -\r\n-recurse:&lt;wildcard&gt;           Include all files in the current directory and\r\n                              subdirectories according to the wildcard\r\n                              specifications\r\n-reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly\r\n                              file using the given alias (Short form: -r)\r\n-reference:&lt;file list&gt;        Reference metadata from the specified assembly\r\n                              files (Short form: -r)\r\n-addmodule:&lt;file list&gt;        Link the specified modules into this assembly\r\n-link:&lt;file list&gt;             Embed metadata from the specified interop\r\n                              assembly files (Short form: -l)\r\n-analyzer:&lt;file list&gt;         Run the analyzers from this assembly\r\n                              (Short form: -a)\r\n-additionalfile:&lt;file list&gt;   Additional files that don't directly affect code\r\n                              generation but may be used by analyzers for producing\r\n                              errors or warnings.\r\n-embed                        Embed all source files in the PDB.\r\n-embed:&lt;file list&gt;            Embed specific files in the PDB.\r\n\r\n                       - RESOURCES -\r\n-win32res:&lt;file&gt;              Specify a Win32 resource file (.res)\r\n-win32icon:&lt;file&gt;             Use this icon for the output\r\n-win32manifest:&lt;file&gt;         Specify a Win32 manifest file (.xml)\r\n-nowin32manifest              Do not include the default Win32 manifest\r\n-resource:&lt;resinfo&gt;           Embed the specified resource (Short form: -res)\r\n-linkresource:&lt;resinfo&gt;       Link the specified resource to this assembly\r\n                              (Short form: -linkres) Where the resinfo format\r\n                              is &lt;file&gt;[,&lt;string name&gt;[,public|private]]\r\n\r\n                       - CODE GENERATION -\r\n-debug[+|-]                   Emit debugging information\r\n-debug:{full|pdbonly|portable|embedded}\r\n                              Specify debugging type ('full' is default,\r\n                              'portable' is a cross-platform format,\r\n                              'embedded' is a cross-platform format embedded into\r\n                              the target .dll or .exe)\r\n-optimize[+|-]                Enable optimizations (Short form: -o)\r\n-deterministic                Produce a deterministic assembly\r\n                              (including module version GUID and timestamp)\r\n-refonly                      Produce a reference assembly in place of the main output\r\n-instrument:TestCoverage      Produce an assembly instrumented to collect\r\n                              coverage information\r\n-sourcelink:&lt;file&gt;            Source link info to embed into PDB.\r\n\r\n                       - ERRORS AND WARNINGS -\r\n-warnaserror[+|-]             Report all warnings as errors\r\n-warnaserror[+|-]:&lt;warn list&gt; Report specific warnings as errors\r\n-warn:&lt;n&gt;                     Set warning level (0-4) (Short form: -w)\r\n-nowarn:&lt;warn list&gt;           Disable specific warning messages\r\n-ruleset:&lt;file&gt;               Specify a ruleset file that disables specific\r\n                              diagnostics.\r\n-errorlog:&lt;file&gt;              Specify a file to log all compiler and analyzer\r\n                              diagnostics.\r\n-reportanalyzer               Report additional analyzer information, such as\r\n                              execution time.\r\n\r\n                       - LANGUAGE -\r\n-checked[+|-]                 Generate overflow checks\r\n-unsafe[+|-]                  Allow 'unsafe' code\r\n-define:&lt;symbol list&gt;         Define conditional compilation symbol(s) (Short\r\n                              form: -d)\r\n-langversion:?                Display the allowed values for language version\r\n-langversion:&lt;string&gt;         Specify language version such as\r\n                              `latest` (latest version, including minor versions),\r\n                              `default` (same as `latest`),\r\n                              `latestmajor` (latest version, excluding minor versions),\r\n                              `preview` (latest version, including features in unsupported preview),\r\n                              or specific versions like `6` or `7.1`\r\n-nullable[+|-]                Specify nullable context option enable|disable.\r\n-nullable:{enable|disable|warnings|annotations}\r\n                              Specify nullable context option enable|disable|warnings|annotations.\r\n\r\n                       - SECURITY -\r\n-delaysign[+|-]               Delay-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-publicsign[+|-]              Public-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-keyfile:&lt;file&gt;               Specify a strong name key file\r\n-keycontainer:&lt;string&gt;        Specify a strong name key container\r\n-highentropyva[+|-]           Enable high-entropy ASLR\r\n\r\n                       - MISCELLANEOUS -\r\n@&lt;file&gt;                       Read response file for more options\r\n-help                         Display this usage message (Short form: -?)\r\n-nologo                       Suppress compiler copyright message\r\n-noconfig                     Do not auto include CSC.RSP file\r\n-parallel[+|-]                Concurrent build.\r\n-version                      Display the compiler version number and exit.\r\n\r\n                       - ADVANCED -\r\n-baseaddress:&lt;address&gt;        Base address for the library to be built\r\n-checksumalgorithm:&lt;alg&gt;      Specify algorithm for calculating source file\r\n                              checksum stored in PDB. Supported values are:\r\n                              SHA1 or SHA256 (default).\r\n-codepage:&lt;n&gt;                 Specify the codepage to use when opening source\r\n                              files\r\n-utf8output                   Output compiler messages in UTF-8 encoding\r\n-main:&lt;type&gt;                  Specify the type that contains the entry point\r\n                              (ignore all other possible entry points) (Short\r\n                              form: -m)\r\n-fullpaths                    Compiler generates fully qualified paths\r\n-filealign:&lt;n&gt;                Specify the alignment used for output file\r\n                              sections\r\n-pathmap:&lt;K1&gt;=&lt;V1&gt;,&lt;K2&gt;=&lt;V2&gt;,...\r\n                              Specify a mapping for source path names output by\r\n                              the compiler.\r\n-pdb:&lt;file&gt;                   Specify debug information file name (default:\r\n                              output file name with .pdb extension)\r\n-errorendlocation             Output line and column of the end location of\r\n                              each error\r\n-preferreduilang              Specify the preferred output language name.\r\n-nosdkpath                    Disable searching the default SDK path for standard library assemblies.\r\n-nostdlib[+|-]                Do not reference standard library (mscorlib.dll)\r\n-subsystemversion:&lt;string&gt;    Specify subsystem version of this assembly\r\n-lib:&lt;file list&gt;              Specify additional directories to search in for\r\n                              references\r\n-errorreport:&lt;string&gt;         Specify how to handle internal compiler errors:\r\n                              prompt, send, queue, or none. The default is\r\n                              queue.\r\n-appconfig:&lt;file&gt;             Specify an application configuration file\r\n                              containing assembly binding settings\r\n-moduleassemblyname:&lt;string&gt;  Name of the assembly which this module will be\r\n                              a part of\r\n-modulename:&lt;string&gt;          Specify the name of the source module\r\n

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
Would you please check if the elements wihtin angle brackets can be translated?</Description>
  </Issue>
  <Issue>
    <IssueID>38366</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler should emit CS0161 for expression-bodied async iterator methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; GenerateSequence() 
     =&gt; await Task.FromResult(0);
`</Code>
    <Description>**Version Used**: csc 3.3.0-beta3-19407-03 (d961190a)

**Steps to Reproduce**:

``

**Expected Behavior**:
A compiler error message along the lines of "GenerateSequence(): not all code paths return a value"

**Actual Behavior**:
Compiler error CS7038 Failed to emit module '{0}'.</Description>
  </Issue>
  <Issue>
    <IssueID>38365</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Code fix previews are not visible by default</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Visual Studio Version**:
Version 16.4.0 Preview 1.0 [29228.128.master]

**Summary**:

Not sure if this also occurs in 16.3 as don't currently have build installed.


**Steps to Reproduce**:

1. Navigate to a code fix/refactoring that has a preview

**Expected Behavior**:
![image](


**Actual Behavior**:
![image](

**User Impact**:
</Description>
  </Issue>
  <Issue>
    <IssueID>38363</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Covariance does not consider type parameter constraints</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
interface IFoo&lt;out T&gt; { }
class Foo&lt;T&gt; : IFoo&lt;T&gt;
{
    static void Bar&lt;U&gt;() where U : T
    {
        U x1 = default;
        T y1 = x1; // works, thanks to constraint

        IFoo&lt;string&gt; x2 = new Foo&lt;string&gt;();
        IFoo&lt;object&gt; y2 = x2; // works, thanks to covariance

        IFoo&lt;U&gt; x3 = new Foo&lt;U&gt;();
        IFoo&lt;T&gt; y3 = x3; // error CS0266
    }
}


I would expect `IFoo&lt;U&gt;` to be implicitly convertible to `IFoo&lt;T&gt;` due to the covariance rule, since U is a subclass of T according to the constraint.

Instead I get:

Error CS0266 Cannot implicitly convert type 'IFoo&lt;U&gt;' to 'IFoo&lt;T&gt;'. An explicit conversion exists (are you missing a cast?)
`</Code>
    <Description>Minimal reproduction:

``

`Foo&lt;U&gt;` is also not implicitly convertible to `IFoo&lt;T&gt;`, but casts do succeed at runtime for any U and T that satisfy the type parameter constraint.</Description>
  </Issue>
  <Issue>
    <IssueID>38360</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8617 warning. Maybe fixed but....</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- VS2019 16.2.3
- .Net Core 3.0 Preview 8

**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

``

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning CS8617 Nullability of reference types in type of parameter 'isDefault' doesn't match implemented member 'bool? IFace.LoadSolverConfiguration(bool isDefault)'.

Maybe the same case as in [#37927]( (CS8614) but please verify it's not.
</Description>
  </Issue>
  <Issue>
    <IssueID>38357</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update our cached reference count in server</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>17/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
        // Store 100 entries -- arbitrary number
        private const int CacheSize = 100;
`</Code>
    <Description>Presently the compiler server will cache the last 100 references read off of disk. This number was chosen arbitrarily as dictated by the comment in [the file](

``

At the time this number was chosen though desktop was the primary scenario. It's possible this number was based off of the average reference count for desktop projects which is typically less than 100. Hence the cache would comfortably persist across compilations for desktop projects (or maybe the number was completely arbitrary). 

This number though doesn't help us with .NET Core style projects where reference counts are significantly higher:

|Target Framework|Average Reference Count|
|--|--|
|.NET Standard|165|
|.NET Core|201|
|ASP.NET Core|323|

This means for newer projects the compiler server reference cache effectively does not exist. At least half of the references are getting evicted on every compilation. Based on this I think we need to update our reference cached count to 350 to ensure we're providing the most value for the

</Description>
  </Issue>
  <Issue>
    <IssueID>38352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bad error message for generic field</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>12/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
public class C&lt;T&gt; {
	T t;
}


warning CS8618: Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.
`</Code>
    <Description>``
The recommendation here is something that cannot be done, we shouldn't recommend making the field nullable when it's of type T.</Description>
  </Issue>
  <Issue>
    <IssueID>38351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failures in PR validation [Test Logs](
``</Description>
  </Issue>
  <Issue>
    <IssueID>38350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38349</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0004 doesn't trigger for method arguments to local function in same scope</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE004 offered on all casts to decimal.

**Actual Behavior**:
IDE004 isn't offered on the casts in `SameScope((decimal)a + (decimal)b)`.
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability infotip is not shown with &lt;Nullable&gt;enable&lt;/Nullable&gt; in csproj</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Nullable&gt;enable&lt;/Nullable&gt;

3. Write the following code
c#
namespace Demo
{
    using System;
    using System.Text.Json;

    class Program
    {
        static void Main(string[] args)
        {
            string s3 = JsonSerializer.Serialize((a: 1, b: 2, c: null as string));
            Console.WriteLine(s3);
                        
        }
    }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 Preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Enable nullable reference types in csproj by adding this to the csproj file.
``
4. Mouse over to the `s3` in the last line

**Expected Behavior**:
A tooltip window shows up, and the nullability analysis result is included.

![image](

**Actual Behavior**:
The nullability analysis is not available in the tooltip; it is not available until you add `#nullable enable` to the open file.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38345</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code Action preview window showing the end of the content</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Move the cursor to `Program` and hit `Ctrl` + `.`
3. Move the cursor to select "Add accessibility modifier"

**Expected Behavior**:
Code Action preview window shows up, also the about-to-change content is visible from the first line without the need to scroll mouse up or down

![image](

**Actual Behavior**:
Code Action preview window shows up, the about-to-change content isn't visible, the content is showing the end of the changes and I need to scroll up to see the diff. 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>typeof(GenericType&lt;&gt;) can produce invalid IL and cause BadImageFormatException at runtime</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Message: An attempt was made to load a program with an incorrect format. (0x8007000B)
Stack Trace:
   at RoslynBug.Program.Test(Type type) in RoslynBug\RoslynBug\Program.cs:line 19
   at RoslynBug.Program.Main(String[] args) in RoslynBug\RoslynBug\Program.cs:line 11


**Version Used**: 
dotnet-sdk-3.0.100-preview9-19414-10

**Steps to Reproduce**:
csproj
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;Deterministic&gt;true&lt;/Deterministic&gt;
    &lt;PathMap&gt;$(SolutionDir)=$(SolutionName)&lt;/PathMap&gt;
    &lt;Features&gt;pdb-path-determinism&lt;/Features&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;RuntimeIdentifier&gt;win10-x64&lt;/RuntimeIdentifier&gt;
    &lt;TargetLatestRuntimePatch&gt;true&lt;/TargetLatestRuntimePatch&gt;
    &lt;TieredCompilation&gt;true&lt;/TieredCompilation&gt;
    &lt;TieredCompilationQuickJit&gt;true&lt;/TieredCompilationQuickJit&gt;
    &lt;LinkDuringPublish&gt;false&lt;/LinkDuringPublish&gt;
    &lt;CrossGenDuringPublish&gt;true&lt;/CrossGenDuringPublish&gt;
    &lt;PublishReadyToRun&gt;false&lt;/PublishReadyToRun&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;



c#
using System;
using System.Collections.Generic;

namespace RoslynBug
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            Test(typeof(IDictionary&lt;string, long&gt;));
        }

        static Type[] Test(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }

        static Type[] Test2(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }
    }

    public readonly struct Example&lt;T&gt; : IComparable&lt;Example&lt;T&gt;&gt;, IEquatable&lt;Example&lt;T&gt;&gt;
        where T : notnull, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
    {
        public readonly ulong Id;
        public readonly T Value;

        public Example(ulong id, T value)
        {
            Id = id;
            Value = value;
        }

        public readonly int CompareTo(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return Id &lt; other.Id ? -1 : 1;

            return Comparer&lt;T&gt;.Default.Compare(Value, other.Value);
        }

        public readonly bool Equals(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return false;
            if (!EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value))
                return false;

            return true;
        }

        public override readonly int GetHashCode() =&gt; Id.GetHashCode();
        public override readonly bool Equals(object? obj) =&gt; obj is Example&lt;T&gt; other &amp;&amp; Equals(other);
        public override readonly string ToString() =&gt; Value.ToString() + "/" + Id.ToString();

        public static bool operator ==(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; a.Equals(b);
        public static bool operator !=(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; !a.Equals(b);
    }
}


**Expected IL**:
msil
    IL_000a:  ldtoken    RoslynBug.Example`1
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)


**Actual IL**:
msil
    IL_000a:  ldtoken    valuetype RoslynBug.Example`1&lt;!0&gt;
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)
`</Code>
    <Description>Sometimes using ``typeof(GenericType&lt;&gt;)`` produces invalid IL. This will result in a BadImageFormatException at run time as soon as the method is called. The exception is probably thrown by RyuJit, because it can't process invalid IL.

I'm not sure what the conditions are, but you can find the repro below. When you remove ``Console.WriteLine("Hello World!");`` it produces correct IL.

**Exception**
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null suppression operator not skipped when searching for bindable parent</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
            // skip up past parens and ref expressions, as we have no bound nodes for them.
            while (true)
            {
                switch (parent.Kind())
                {
                    case SyntaxKind.ParenthesizedExpression:
                    case SyntaxKind.RefExpression:
                    case SyntaxKind.RefType:
                        var pp = parent.Parent;
                        if (pp == null) break;
                        parent = pp;
                        break;
                    default:
                        goto foundParent;
                }
            }
`</Code>
    <Description>This code in `MemberSemanticModel.GetBindableParentNode` does not handle the postfix `!` operator, which has no bound node:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38339</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable warnings for default(T) but not default</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

class C&lt;T&gt;
{
    [AllowNull]
    internal T _f1 = default(T);
    [AllowNull]
    internal T _f2 = default;
}


**Expected Behavior**:
No warnings.

**Actual Behavior**:
Warning on the `default(T)`.

warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.
`</Code>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

cc: @jcouv, @cston</Description>
  </Issue>
  <Issue>
    <IssueID>38333</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crash</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.9.15 &amp; 16.2.3

**Steps to Reproduce**:

1. Open git history window
2. Click keyword textbox
3. Type :  `\` `Enter` `BackSpace`

**Actual Behavior**: VS crash.
</Description>
  </Issue>
  <Issue>
    <IssueID>38332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Calling this() from struct constructor removes nullable warnings</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
public struct C
{
    string _a;
    object _b;
    
    public C(string a) : this()
    {
        _a = a;
    }
    
    public C(object b) : this()
    {
        _b = b;
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

``



I use this pattern to implement a form of discriminated unions, and so this pattern is not rare in my code base. I imagine I'm not the only one.

**Expected Behavior**:

warning CS8618: Non-nullable field '_b' is uninitialized. Consider declaring the field as nullable.
warning CS8618: Non-nullable field '_a' is uninitialized. Consider declaring the field as nullable.

**Actual Behavior**:

No warning
</Description>
  </Issue>
  <Issue>
    <IssueID>38331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable] Get asked to simplify cast needed to remove nullable warning</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels />
    <Code> C#
#nullable enable

class Bar
{       
       protected override Task&lt;string?&gt; FindFileAsync(IProjectTreeProvider provider, IProjectTree root)
       {
               return Task.FromResult((string?)"");
                                       _______
       }
}


**Expected Behavior**:
No simplification

**Actual Behavior**:
Get prompted to simplify as indicated. If follow through with simplification, get a warning:


Warning	CS8619	Nullability of reference types in value of type 'Task&lt;string&gt;' doesn't match target type 'Task&lt;string?&gt;'.	Microsoft.VisualStudio.ProjectSystem.Managed	C:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed\ProjectSystem\SpecialFileProviders\AbstractFindByNameSpecialFileProvider2.cs	26	Active
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>38330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] ServiceHub.RoslynCodeAnalysisService32.exe is OOMing multiple times a day</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

This is a regresssion, either because we've opt'd into more analyzers when we moved over to .editorconfig enforcement of analyzer levels, or because we're running on newer builds of VS.

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 369551a45088071ec37673d11cfca67658c5ba25`
4. `ProjectSystem.sln`
5. Work for a couple of hours.

This occurs 3 or 4 times a day, and I've also experienced it in other codebases. I had a look at the watsons and every time this crashes its getting into a unique bucket due to the random nature of what frame the OOM is being thrown.

[internalshare]\\public\davkean\Roslyn\38330.zip</Description>
  </Issue>
  <Issue>
    <IssueID>38329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MaybeNullWhenAttribute ignored on TryGetValue, CS8600 nullable reference warning emitted</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Collections.Generic;

namespace NullTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary&lt;int, Program&gt; dictionary = new Dictionary&lt;int, Program&gt;();

            // CS8600 warning here:       v
            if (dictionary.TryGetValue(5, out Program val))
                Console.WriteLine(val);
        }
    }
}


**Expected Behavior**: No warning.

**Actual Behavior**: Warning appears: _CS8600: Converting null literal or possible null value to non-nullable type_.

This was (supposedly recently) attributed with

cs
public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);
`</Code>
    <Description>**Version Used**:  VS2019 16.3.0 Preview 2.0, with .NET Core 3.0.100-preview8-013656, targeting .NET Core 3.0

**Steps to Reproduce**:

1) Make a new project and use`&lt;Nullable&gt;enable&lt;/Nullable&gt;` with a netcoreapp3.0 console project.

2) Set the following code

``

but the attribute is not be respected in the example I posted. Or am I using some outdated version and need to update? I assume I'm on the bleeding edge releases but I can easily be wrong. I also use `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;` for what its worth.</Description>
  </Issue>
  <Issue>
    <IssueID>38326</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Public API for `GetDocument(DocumentId)` that returns non-null Document</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public Document GetRequiredDocument(DocumentId documentId);
`</Code>
    <Description>We should add a public API to get `Document` from a `DocumentId` that returns a non-null `Document` or throw if not found.  This would help us avoid using null-forgiving operator (!) when enabling nullable ref.

e.g.

``

We will probably also need an analyzer/codefix to flag usage of `GetDocument(id)!` in code with nullable-ref already enabled.</Description>
  </Issue>
  <Issue>
    <IssueID>38315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>guard over duplicated project references in msbuildworkspace</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>our VS layer has a proper safeguard on malformed project files such as duplicated p2p references.

it looks like MSBuildWorkspace doesn't have one. causing this kind of exception.

``

looks like this line - 

we should either let CompilationTracker handle this situation or update MSbuildWorkspace to handle this case.</Description>
  </Issue>
  <Issue>
    <IssueID>38314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find-Refs filter-list includes lots of options unnecessarily.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here's an example of what i see when i bring up the filter list:

![image](

Note that in my case i just have 28 reads and 2 writes.  However, the list is filled with a bunch of other inapplicable cases, all with 0 count.  These should not be in the list.  Note: this is def a bug.  No where else do things work this way.  We always only see items for the values actually in the list.  For example, imagine if filtering on error code worked this way.  You'd have thousands of items in the list, almost all with `(0)` next to them.  Instead, the control works properly and you get:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler NuPkg MSBuild version check needs to be updated. </Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example: 



The props file here, and for related packages, need to be labeling everything before 16.0 as unsupported. That includes 15.0 - 15.3. </Description>
  </Issue>
  <Issue>
    <IssueID>38310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Show content and select full row in bookmark window.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Now, bookmark window only show file path, it's better to show content preview.
And I think should highlight full row rather than only the first column.</Description>
  </Issue>
  <Issue>
    <IssueID>38309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FailFast in SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 28,76 ms for &lt;path-to-project&gt;.csproj.
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : FailFast: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Environment.FailFast(System.String, System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(Microsoft.CodeAnalysis.CSharp.BoundConversion) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, Boolean, Boolean) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Exception details: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]

Build FAILED.
`</Code>
    <Description>**Version Used**:

.NET Core SDK 2.2.401

**Steps to Reproduce**:

None as of yet; affected project is rather large and no source information is available in the error message.

**Expected Behavior**:

Project builds (it does under 2.2.108).

**Actual Behavior**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38429</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>provide a power save mode</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>20/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
  </Issue>
  <Issue>
    <IssueID>38427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Check for matching tuple names missing in type constraints</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`where T : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` should produce an error just like `class C : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` does.

I think this should also apply to indirect constraints, such as `where T : I&lt;(int a, int b)&gt;, I2` with `interface I2 : I&lt;(int c, int d)&gt;` out of consistency with implementation scenario (`class C : I&lt;(int a, int b)&gt;, I2 { }` produces an error).

Note: this would be a breaking change.</Description>
  </Issue>
  <Issue>
    <IssueID>38426</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.editorconfig is causing memory explosion in syntax trees</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Open</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>(FYI: This may be one of the root causes of #38330 reported by @davkean.)

I have a solution which is made up of multiple copies of the project-system repo (~400 projects in total). Looking a dump of the managed heap, nearly 10% of the managed heap (243mb of 2.3Gb) is consumed by duplicated strings held by `CSharpSyntaxTree.ParsedSyntaxTree`. The issue is that the project-system repo has an .editorconfig that turns diagnostics on/off and `Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath` does substring parsing of rules of the form "dotnet_diagnostic.&lt;diagnostic&gt;.severity". Since it does this _for each syntax tree in the solution_ (~6 million of them in this case), each substring parse is duplicated over and over and over again. It looks like if `AnalyzerConfig.Section` just did this substring parsing once and passed back the same string for everyone, this would eliminate the duplication.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38462</PullRequestID>
        <Title>Cache diagnostic ID strings in the AnalyzerConfigSet</Title>
        <Description>I'm not sure if this is exactly where we want to do the caching, so I've
taken the opportunity to make all the non-core AnalyzerConfig APIs internal.
There are no existing consumers depending on them, so this is not a breaking
change.

Fixes #38426</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38462</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38760</PullRequestID>
        <Title>Cache AnalyzerConfigOptionsResult instances</Title>
        <Description>A common case for editorconfig is for most of the source files to have the same
options specified, which means if we store options for each source file it's
likely we'll have many duplicate sets. This change adds a cache to AnalyzerConfigSet
to try to de-dup identical options dictionaries to a single shared instance.</Description>
        <CreatedDate>19/09/2019</CreatedDate>
        <ClosedDate>25/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38760</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Include parameters', this class' fields' and local variables' values on stack trace</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels />
    <Description>I've seen this when executing Python in some environments: when an error (exception) is raised, all pertinent values up and down the stack are captured. This greatly improves debugging, in many cases allowing a bug to be fixed without having to reproduce the entire scenario by stepping through code, etc.

**Version Used**: Both .NET Framework and Core

**Steps to Reproduce**:

Throw an exception, or use "new StackTrace()"

**Expected Behavior**: Values are captured and shown in the stack trace

**Actual Behavior**: Values are not captured
</Description>
  </Issue>
  <Issue>
    <IssueID>38422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Option Explicit On" does not report an error when there is an undeclared variable</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I always use &amp;quot;Option Explicit On&amp;quot;, it always works very reliably!But today, in this case I do not see an error with the command &amp;quot;For i = f.Count - 1 To 0 Step -1&amp;quot; when the counter i has not been declared in one of my functions.This is the first time I encountered this strange phenomenon. Please review and correct. Thank you very much!Source code:Private Function FMsys_to_List() As List(Of String)        Dim f As List(Of String)        f = New List(Of String)(File.ReadAllLines(FM_Sys, encoding:=Encoding.Unicode))        For i = f.Count - 1 To 0 Step -1            f(i) = f(i). Trim            ' Bo comment va dong trong            ' Phai dung (Left,1) ko duoc dung Chars(0) vi s.Chars(0) bao loi khi s=&amp;quot;&amp;quot;            If f(i). Length = 0 Or Left(f(i), 1) = &amp;quot;'&amp;quot; Then f.RemoveAt(i)        Next        f.TrimExcess()        Return f    End Function ' FMsys_to_List* Of course I have the &amp;quot;Option Explicit On&amp;quot; declaration at the top, outside the Module* The price that the Sub / Function name automatically notes right after End Sub / Function is too good. Extensive for everything else. Thanks!---### Original Comments#### Visual Studio Feedback System on 8/8/2019, 03:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38420</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Object synchronization method was called from an unsynchronized block of code</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>git checkout netcoreapp3.0
go to folder: test/ENode.Kafka.Tests
run dotnet build "ENode.Kafka.Tests.csproj" -c Release -o /app/build

**Exception**

 You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
`</Code>
    <Description>**Version Used**: 
net core sdk version: 3.0.100-preview8-013656
os version: ubuntu 16.04.4 LTS x64

**Steps to Reproduce**:
clone this [project]( 
checkout: ``
</Description>
  </Issue>
  <Issue>
    <IssueID>38405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Upgraded to Preview 2.0 and VB Core 3.0 applications no longer compile, they are multiple errors and warnings.---### Original Comments#### Visual Studio Feedback System on 8/14/2019, 03:00 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions#### James Mu solved on 8/13/2019, 11:35 PM, 0 votes: &lt;p&gt;I solved this problem by adding the following code to a new VB code file:&lt;/p&gt;&lt;pre&gt;Namespace Global.Microsoft.VisualBasic.MyServices.Internal    Public Class ContextValue(Of T)        Public Property Value As T    End ClassEnd Namespace&lt;/pre&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38403</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2019 (and preview) crashes when I paste this code into the editor</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System;
using System.Collections.Generic;
using System.Text;

public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}

public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
What steps will reproduce the problem?
1. Create a new .NET Core 3.0 (preview 7 or 8) Console Project in latest Visua Studio 2019 16.2 or preview 2.0 16.3.0 
2.  Just paste the following code below into the editor (replace the existing code)
3. Visual Studio just hangs and after a while just crash

What is the expected output? What do you see instead?

Editor shoudl not crash, confirmed on a blank fresh installed Windows 10, with fresh install of latest VS2019 and .NET Core 3 preview.

Please provide any additional information below.

The code that I paste in (don't ask me why),  just copied from some website while exploring the non-nullable types feature.

``

---
### Original Comments

#### Fiona Niu[MSFT] on 8/22/2019, 00:15 AM: 

&lt;p&gt;Thank you for taking the time to log this issue! Could you please provide more information via the Visual Studio Feedback Tool(Help -&amp;gt; Send Feedback -&amp;gt; Report A Problem)so that we can conduct further research?  The feedback tool  will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).&lt;br&gt;
Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• Open Visual Studio Feedback tool.
 
• Click the banner letting you know that you have problems requesting your attention.
 
• Click this problem from the list

• Click &amp;quot;View their request and respond&amp;quot; from the problem details banner

• Add a comment, in the Attachments/Record: click Start Recording

• When the Steps Recorder tool appears, perform the steps that reproduce the problem.

• When you're done, choose the Stop Record button.
 
• Wait a few minutes for Visual Studio to collect and package the information that you recorded.

• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full instructions, please see: &lt;a target='_blank' href=" . For information about what data is collected, see &lt;a target='_blank' href="
We look forward to hearing from you!&lt;/p&gt;

#### visualstudio on 8/22/2019, 00:28 AM: 

I just copy paste the code from the issue and bang the studio stops responding, just crashes/dies after a while.  I can't type anything else after I paste the code into a new fresh console appliction.
#### Tore Nestenius on 8/22/2019, 00:32 AM: 

&lt;p&gt;You got my recording?&lt;/p&gt;

#### Fiona Niu[MSFT] on 8/22/2019, 00:51 AM: 

&lt;p&gt;Thanks a lot for providing the information. We got your attachments. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Greg Smith on 8/26/2019, 08:53 AM: 

I also get this crash on the third paste of std::isfinite to replace _finite. Exactly as the OP reports, VS goes unreponsive for a few seconds, then restarts.

---
### Original Solutions
(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38403</IssueID>
        <PullRequestID>38617</PullRequestID>
        <Title>VisitType should visit type arguments for error types.</Title>
        <Description>Fixes #38403.</Description>
        <CreatedDate>10/09/2019</CreatedDate>
        <ClosedDate>11/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38617</PullRequestID>
            <IssueID>38403</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38401</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS1580 fired with a paramater that is generic and nullable (xml doc)</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
I'm using VS2019 16.1.1 (in VS2017 15.9.12 this does not happen)
The app is using .net core 2.2, and the analyzers Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.2
StyleCop.Analyzers 1.1.118 

I have method with this definition:

``

and in a xml doc I have this:

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// Internally uses &amp;lt;see cref=&amp;quot;TypeValidations.HasValue{T}(T?) &amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
&lt;/pre&gt;

In VS2019 this fires the error:

&gt; Error	CS1580	Invalid type for parameter T? in XML comment cref attribute: 'TypeValidations.HasValue{T}(T?) '

If I change the documentation to `TypeValidations.HasValue{T}(Nullable{T})`  now I got an analyzer error (SA1125) telling me that I should use the shorthand notation for nullable types.

---
### Original Comments

#### Visual Studio Feedback System on 5/30/2019, 07:14 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 02:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 04:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38398</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent accessibility checks  produce unexpected errors when types nested into interfaces are involved</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void InconsistentAccessibility()
        {
            var source1 =
@"
    interface I1
    {
        protected interface I2
        {
        }
    }

    class C1
    {
        protected interface I2
        {
        }
    }

    interface I3 : I1
    {
        protected I1.I2 M1();
    }

    class C3 : I1
    {
        protected void M1(I1.I2 x) { }
    }

    class C33 : C1
    {
        protected void M1(C1.I2 x) { }
    }
";
            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            compilation1.VerifyDiagnostics(
                // (18,25): error CS0050: Inconsistent accessibility: return type 'I1.I2' is less accessible than method 'I3.M1()'
                //         protected I1.I2 M1();
                Diagnostic(ErrorCode.ERR_BadVisReturnType, "M1").WithArguments("I3.M1()", "I1.I2").WithLocation(18, 25),
                // (23,24): error CS0051: Inconsistent accessibility: parameter type 'I1.I2' is less accessible than method 'C3.M1(I1.I2)'
                //         protected void M1(I1.I2 x) { }
                Diagnostic(ErrorCode.ERR_BadVisParamType, "M1").WithArguments("C3.M1(I1.I2)", "I1.I2").WithLocation(23, 24)
                );
        }
`</Code>
    <Description>``

Expected: No errors. Note, we don't produce the error for scenario when protected interface is nested into a class, the C33 case. </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38398</IssueID>
        <PullRequestID>38451</PullRequestID>
        <Title>Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.</Title>
        <Description>Fixes #38398.</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>05/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Default Interface Impl</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38451</PullRequestID>
            <IssueID>38398</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Search in Git history window doesn't work fine with multiline.</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes, we will commit with multiline message, such as:

Enter the following commit message:
``
Search `first` in git history window can find this commit, but `second` can't.

</Description>
  </Issue>
  <Issue>
    <IssueID>38382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense lists unfitting generic extension methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.IO;

namespace ExampleLib
{
    public class Class1
    {
        public void Test()
        {
            object x;
            x. // use IntelliSense here
        }
    }

public static class StreamExtensions
    {
        public static T Read&amp;lt;T&amp;gt;(this T self, out int result) where T : Stream
        {
            result = 1234; // sample code
            return self;
        }
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Hence the following code:``I defined an extension method using a generic type parameter for the extended class, but it is limited to `Stream` instances due to the type constraint on `T`. This was done to return an extended, typed instance to allow chain calling such methods.However, when typing `x.` at the marked position in `Class1::Test`, IntelliSense also lists the `Stream` only extension method `Read&amp;lt;&amp;gt;` even though `object` is not guaranteed to be of type `Stream`. The full list shown by IntelliSense then is- Equals- GetHashCode- GetType- Read&amp;lt;&amp;gt;- ToStringIs this expected behavior? Of course, theoretically `x` could be passed by calling the method &amp;quot;normally&amp;quot; without syntactic extension method sugar. However, it turns generic extension methods into IntelliSense-cluttering bad guys.Can this behavior be made optional?---### Original Comments#### Visual Studio Feedback System on 8/22/2019, 09:36 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 16.3.0 Preview 2 - IDE0060 Double Underscore False Positive</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---IDE0060 Remove unused parameter '__' is thrown here on the double underscore. Shouldn't this be considered a valid pattern for a discard variable?``---### Original Comments#### Visual Studio Feedback System on 8/28/2019, 09:22 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Replace property with method refactoring discards unsafe modifier</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Program
{
    public static unsafe void* Pointer =&gt; default;
}


diff
+Expected Behavior
-Actual Behavior


diff
class Program
{
+    public static unsafe void* GetPointer()
-    public static void* GetPointer()
    {
        return default;
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.3 Preview 2

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>38377</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler does no longer report local variable scope conflict</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class C
{
    public List&lt;string&gt; Values = new List&lt;string&gt;();
    
    public void M(IEnumerable&lt;C&gt; source) 
    {
        source.Where(x =&gt; x.Values.Any(x =&gt; x == "Hello World"));
    }
}


**Expected Behavior**:

error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
`</Code>
    <Description>**Version Used**:  16.3 Preview 2

**Steps to Reproduce**:
I don't know if this is an expected new feature or not, i've noticed because it broke on the build server (having only 16.2.3 installed) and my .NET Framework project is set to Language version `Automatically selected based on framework version` (7.3).
[Sharplab](
``
**Actual Behavior**:
Compiles fine</Description>
  </Issue>
  <Issue>
    <IssueID>38369</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][roslyn] Localizability of "0; "WRN_UninitializedNonNullableField"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Non-nullable {0} '{1}' is uninitialized. Consider declaring the {0} as nullable.

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
assumed that the placeholder {0} will be replaced with "field" and translated accordingly. Please kindly inform us what this placeholder will be replaced with.</Description>
  </Issue>
  <Issue>
    <IssueID>38368</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][Roslyn] Localizability of "0; "IDS_CSCHelp"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
\r\n                             Visual C# Compiler Options\r\n\r\n                       - OUTPUT FILES -\r\n-out:&lt;file&gt;                   Specify output file name (default: base name of\r\n                              file with main class or first file)\r\n-target:exe                   Build a console executable (default) (Short\r\n                              form: -t:exe)\r\n-target:winexe                Build a Windows executable (Short form:\r\n                              -t:winexe)\r\n-target:library               Build a library (Short form: -t:library)\r\n-target:module                Build a module that can be added to another\r\n                              assembly (Short form: -t:module)\r\n-target:appcontainerexe       Build an Appcontainer executable (Short form:\r\n                              -t:appcontainerexe)\r\n-target:winmdobj              Build a Windows Runtime intermediate file that\r\n                              is consumed by WinMDExp (Short form: -t:winmdobj)\r\n-doc:&lt;file&gt;                   XML Documentation file to generate\r\n-refout:&lt;file&gt;                Reference assembly output to generate\r\n-platform:&lt;string&gt;            Limit which platforms this code can run on: x86,\r\n                              Itanium, x64, arm, arm64, anycpu32bitpreferred, or\r\n                              anycpu. The default is anycpu.\r\n\r\n                       - INPUT FILES -\r\n-recurse:&lt;wildcard&gt;           Include all files in the current directory and\r\n                              subdirectories according to the wildcard\r\n                              specifications\r\n-reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly\r\n                              file using the given alias (Short form: -r)\r\n-reference:&lt;file list&gt;        Reference metadata from the specified assembly\r\n                              files (Short form: -r)\r\n-addmodule:&lt;file list&gt;        Link the specified modules into this assembly\r\n-link:&lt;file list&gt;             Embed metadata from the specified interop\r\n                              assembly files (Short form: -l)\r\n-analyzer:&lt;file list&gt;         Run the analyzers from this assembly\r\n                              (Short form: -a)\r\n-additionalfile:&lt;file list&gt;   Additional files that don't directly affect code\r\n                              generation but may be used by analyzers for producing\r\n                              errors or warnings.\r\n-embed                        Embed all source files in the PDB.\r\n-embed:&lt;file list&gt;            Embed specific files in the PDB.\r\n\r\n                       - RESOURCES -\r\n-win32res:&lt;file&gt;              Specify a Win32 resource file (.res)\r\n-win32icon:&lt;file&gt;             Use this icon for the output\r\n-win32manifest:&lt;file&gt;         Specify a Win32 manifest file (.xml)\r\n-nowin32manifest              Do not include the default Win32 manifest\r\n-resource:&lt;resinfo&gt;           Embed the specified resource (Short form: -res)\r\n-linkresource:&lt;resinfo&gt;       Link the specified resource to this assembly\r\n                              (Short form: -linkres) Where the resinfo format\r\n                              is &lt;file&gt;[,&lt;string name&gt;[,public|private]]\r\n\r\n                       - CODE GENERATION -\r\n-debug[+|-]                   Emit debugging information\r\n-debug:{full|pdbonly|portable|embedded}\r\n                              Specify debugging type ('full' is default,\r\n                              'portable' is a cross-platform format,\r\n                              'embedded' is a cross-platform format embedded into\r\n                              the target .dll or .exe)\r\n-optimize[+|-]                Enable optimizations (Short form: -o)\r\n-deterministic                Produce a deterministic assembly\r\n                              (including module version GUID and timestamp)\r\n-refonly                      Produce a reference assembly in place of the main output\r\n-instrument:TestCoverage      Produce an assembly instrumented to collect\r\n                              coverage information\r\n-sourcelink:&lt;file&gt;            Source link info to embed into PDB.\r\n\r\n                       - ERRORS AND WARNINGS -\r\n-warnaserror[+|-]             Report all warnings as errors\r\n-warnaserror[+|-]:&lt;warn list&gt; Report specific warnings as errors\r\n-warn:&lt;n&gt;                     Set warning level (0-4) (Short form: -w)\r\n-nowarn:&lt;warn list&gt;           Disable specific warning messages\r\n-ruleset:&lt;file&gt;               Specify a ruleset file that disables specific\r\n                              diagnostics.\r\n-errorlog:&lt;file&gt;              Specify a file to log all compiler and analyzer\r\n                              diagnostics.\r\n-reportanalyzer               Report additional analyzer information, such as\r\n                              execution time.\r\n\r\n                       - LANGUAGE -\r\n-checked[+|-]                 Generate overflow checks\r\n-unsafe[+|-]                  Allow 'unsafe' code\r\n-define:&lt;symbol list&gt;         Define conditional compilation symbol(s) (Short\r\n                              form: -d)\r\n-langversion:?                Display the allowed values for language version\r\n-langversion:&lt;string&gt;         Specify language version such as\r\n                              `latest` (latest version, including minor versions),\r\n                              `default` (same as `latest`),\r\n                              `latestmajor` (latest version, excluding minor versions),\r\n                              `preview` (latest version, including features in unsupported preview),\r\n                              or specific versions like `6` or `7.1`\r\n-nullable[+|-]                Specify nullable context option enable|disable.\r\n-nullable:{enable|disable|warnings|annotations}\r\n                              Specify nullable context option enable|disable|warnings|annotations.\r\n\r\n                       - SECURITY -\r\n-delaysign[+|-]               Delay-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-publicsign[+|-]              Public-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-keyfile:&lt;file&gt;               Specify a strong name key file\r\n-keycontainer:&lt;string&gt;        Specify a strong name key container\r\n-highentropyva[+|-]           Enable high-entropy ASLR\r\n\r\n                       - MISCELLANEOUS -\r\n@&lt;file&gt;                       Read response file for more options\r\n-help                         Display this usage message (Short form: -?)\r\n-nologo                       Suppress compiler copyright message\r\n-noconfig                     Do not auto include CSC.RSP file\r\n-parallel[+|-]                Concurrent build.\r\n-version                      Display the compiler version number and exit.\r\n\r\n                       - ADVANCED -\r\n-baseaddress:&lt;address&gt;        Base address for the library to be built\r\n-checksumalgorithm:&lt;alg&gt;      Specify algorithm for calculating source file\r\n                              checksum stored in PDB. Supported values are:\r\n                              SHA1 or SHA256 (default).\r\n-codepage:&lt;n&gt;                 Specify the codepage to use when opening source\r\n                              files\r\n-utf8output                   Output compiler messages in UTF-8 encoding\r\n-main:&lt;type&gt;                  Specify the type that contains the entry point\r\n                              (ignore all other possible entry points) (Short\r\n                              form: -m)\r\n-fullpaths                    Compiler generates fully qualified paths\r\n-filealign:&lt;n&gt;                Specify the alignment used for output file\r\n                              sections\r\n-pathmap:&lt;K1&gt;=&lt;V1&gt;,&lt;K2&gt;=&lt;V2&gt;,...\r\n                              Specify a mapping for source path names output by\r\n                              the compiler.\r\n-pdb:&lt;file&gt;                   Specify debug information file name (default:\r\n                              output file name with .pdb extension)\r\n-errorendlocation             Output line and column of the end location of\r\n                              each error\r\n-preferreduilang              Specify the preferred output language name.\r\n-nosdkpath                    Disable searching the default SDK path for standard library assemblies.\r\n-nostdlib[+|-]                Do not reference standard library (mscorlib.dll)\r\n-subsystemversion:&lt;string&gt;    Specify subsystem version of this assembly\r\n-lib:&lt;file list&gt;              Specify additional directories to search in for\r\n                              references\r\n-errorreport:&lt;string&gt;         Specify how to handle internal compiler errors:\r\n                              prompt, send, queue, or none. The default is\r\n                              queue.\r\n-appconfig:&lt;file&gt;             Specify an application configuration file\r\n                              containing assembly binding settings\r\n-moduleassemblyname:&lt;string&gt;  Name of the assembly which this module will be\r\n                              a part of\r\n-modulename:&lt;string&gt;          Specify the name of the source module\r\n

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
Would you please check if the elements wihtin angle brackets can be translated?</Description>
  </Issue>
  <Issue>
    <IssueID>38366</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler should emit CS0161 for expression-bodied async iterator methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; GenerateSequence() 
     =&gt; await Task.FromResult(0);
`</Code>
    <Description>**Version Used**: csc 3.3.0-beta3-19407-03 (d961190a)

**Steps to Reproduce**:

``

**Expected Behavior**:
A compiler error message along the lines of "GenerateSequence(): not all code paths return a value"

**Actual Behavior**:
Compiler error CS7038 Failed to emit module '{0}'.</Description>
  </Issue>
  <Issue>
    <IssueID>38365</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Code fix previews are not visible by default</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Visual Studio Version**:
Version 16.4.0 Preview 1.0 [29228.128.master]

**Summary**:

Not sure if this also occurs in 16.3 as don't currently have build installed.


**Steps to Reproduce**:

1. Navigate to a code fix/refactoring that has a preview

**Expected Behavior**:
![image](


**Actual Behavior**:
![image](

**User Impact**:
</Description>
  </Issue>
  <Issue>
    <IssueID>38363</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Covariance does not consider type parameter constraints</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
interface IFoo&lt;out T&gt; { }
class Foo&lt;T&gt; : IFoo&lt;T&gt;
{
    static void Bar&lt;U&gt;() where U : T
    {
        U x1 = default;
        T y1 = x1; // works, thanks to constraint

        IFoo&lt;string&gt; x2 = new Foo&lt;string&gt;();
        IFoo&lt;object&gt; y2 = x2; // works, thanks to covariance

        IFoo&lt;U&gt; x3 = new Foo&lt;U&gt;();
        IFoo&lt;T&gt; y3 = x3; // error CS0266
    }
}


I would expect `IFoo&lt;U&gt;` to be implicitly convertible to `IFoo&lt;T&gt;` due to the covariance rule, since U is a subclass of T according to the constraint.

Instead I get:

Error CS0266 Cannot implicitly convert type 'IFoo&lt;U&gt;' to 'IFoo&lt;T&gt;'. An explicit conversion exists (are you missing a cast?)
`</Code>
    <Description>Minimal reproduction:

``

`Foo&lt;U&gt;` is also not implicitly convertible to `IFoo&lt;T&gt;`, but casts do succeed at runtime for any U and T that satisfy the type parameter constraint.</Description>
  </Issue>
  <Issue>
    <IssueID>38360</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8617 warning. Maybe fixed but....</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- VS2019 16.2.3
- .Net Core 3.0 Preview 8

**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

``

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning CS8617 Nullability of reference types in type of parameter 'isDefault' doesn't match implemented member 'bool? IFace.LoadSolverConfiguration(bool isDefault)'.

Maybe the same case as in [#37927]( (CS8614) but please verify it's not.
</Description>
  </Issue>
  <Issue>
    <IssueID>38357</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update our cached reference count in server</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>17/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
        // Store 100 entries -- arbitrary number
        private const int CacheSize = 100;
`</Code>
    <Description>Presently the compiler server will cache the last 100 references read off of disk. This number was chosen arbitrarily as dictated by the comment in [the file](

``

At the time this number was chosen though desktop was the primary scenario. It's possible this number was based off of the average reference count for desktop projects which is typically less than 100. Hence the cache would comfortably persist across compilations for desktop projects (or maybe the number was completely arbitrary). 

This number though doesn't help us with .NET Core style projects where reference counts are significantly higher:

|Target Framework|Average Reference Count|
|--|--|
|.NET Standard|165|
|.NET Core|201|
|ASP.NET Core|323|

This means for newer projects the compiler server reference cache effectively does not exist. At least half of the references are getting evicted on every compilation. Based on this I think we need to update our reference cached count to 350 to ensure we're providing the most value for the

</Description>
  </Issue>
  <Issue>
    <IssueID>38352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bad error message for generic field</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>12/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
public class C&lt;T&gt; {
	T t;
}


warning CS8618: Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.
`</Code>
    <Description>``
The recommendation here is something that cannot be done, we shouldn't recommend making the field nullable when it's of type T.</Description>
  </Issue>
  <Issue>
    <IssueID>38351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failures in PR validation [Test Logs](
``</Description>
  </Issue>
  <Issue>
    <IssueID>38350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38349</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0004 doesn't trigger for method arguments to local function in same scope</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE004 offered on all casts to decimal.

**Actual Behavior**:
IDE004 isn't offered on the casts in `SameScope((decimal)a + (decimal)b)`.
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability infotip is not shown with &lt;Nullable&gt;enable&lt;/Nullable&gt; in csproj</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Nullable&gt;enable&lt;/Nullable&gt;

3. Write the following code
c#
namespace Demo
{
    using System;
    using System.Text.Json;

    class Program
    {
        static void Main(string[] args)
        {
            string s3 = JsonSerializer.Serialize((a: 1, b: 2, c: null as string));
            Console.WriteLine(s3);
                        
        }
    }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 Preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Enable nullable reference types in csproj by adding this to the csproj file.
``
4. Mouse over to the `s3` in the last line

**Expected Behavior**:
A tooltip window shows up, and the nullability analysis result is included.

![image](

**Actual Behavior**:
The nullability analysis is not available in the tooltip; it is not available until you add `#nullable enable` to the open file.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38345</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code Action preview window showing the end of the content</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Move the cursor to `Program` and hit `Ctrl` + `.`
3. Move the cursor to select "Add accessibility modifier"

**Expected Behavior**:
Code Action preview window shows up, also the about-to-change content is visible from the first line without the need to scroll mouse up or down

![image](

**Actual Behavior**:
Code Action preview window shows up, the about-to-change content isn't visible, the content is showing the end of the changes and I need to scroll up to see the diff. 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>typeof(GenericType&lt;&gt;) can produce invalid IL and cause BadImageFormatException at runtime</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Message: An attempt was made to load a program with an incorrect format. (0x8007000B)
Stack Trace:
   at RoslynBug.Program.Test(Type type) in RoslynBug\RoslynBug\Program.cs:line 19
   at RoslynBug.Program.Main(String[] args) in RoslynBug\RoslynBug\Program.cs:line 11


**Version Used**: 
dotnet-sdk-3.0.100-preview9-19414-10

**Steps to Reproduce**:
csproj
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;Deterministic&gt;true&lt;/Deterministic&gt;
    &lt;PathMap&gt;$(SolutionDir)=$(SolutionName)&lt;/PathMap&gt;
    &lt;Features&gt;pdb-path-determinism&lt;/Features&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;RuntimeIdentifier&gt;win10-x64&lt;/RuntimeIdentifier&gt;
    &lt;TargetLatestRuntimePatch&gt;true&lt;/TargetLatestRuntimePatch&gt;
    &lt;TieredCompilation&gt;true&lt;/TieredCompilation&gt;
    &lt;TieredCompilationQuickJit&gt;true&lt;/TieredCompilationQuickJit&gt;
    &lt;LinkDuringPublish&gt;false&lt;/LinkDuringPublish&gt;
    &lt;CrossGenDuringPublish&gt;true&lt;/CrossGenDuringPublish&gt;
    &lt;PublishReadyToRun&gt;false&lt;/PublishReadyToRun&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;



c#
using System;
using System.Collections.Generic;

namespace RoslynBug
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            Test(typeof(IDictionary&lt;string, long&gt;));
        }

        static Type[] Test(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }

        static Type[] Test2(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }
    }

    public readonly struct Example&lt;T&gt; : IComparable&lt;Example&lt;T&gt;&gt;, IEquatable&lt;Example&lt;T&gt;&gt;
        where T : notnull, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
    {
        public readonly ulong Id;
        public readonly T Value;

        public Example(ulong id, T value)
        {
            Id = id;
            Value = value;
        }

        public readonly int CompareTo(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return Id &lt; other.Id ? -1 : 1;

            return Comparer&lt;T&gt;.Default.Compare(Value, other.Value);
        }

        public readonly bool Equals(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return false;
            if (!EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value))
                return false;

            return true;
        }

        public override readonly int GetHashCode() =&gt; Id.GetHashCode();
        public override readonly bool Equals(object? obj) =&gt; obj is Example&lt;T&gt; other &amp;&amp; Equals(other);
        public override readonly string ToString() =&gt; Value.ToString() + "/" + Id.ToString();

        public static bool operator ==(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; a.Equals(b);
        public static bool operator !=(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; !a.Equals(b);
    }
}


**Expected IL**:
msil
    IL_000a:  ldtoken    RoslynBug.Example`1
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)


**Actual IL**:
msil
    IL_000a:  ldtoken    valuetype RoslynBug.Example`1&lt;!0&gt;
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)
`</Code>
    <Description>Sometimes using ``typeof(GenericType&lt;&gt;)`` produces invalid IL. This will result in a BadImageFormatException at run time as soon as the method is called. The exception is probably thrown by RyuJit, because it can't process invalid IL.

I'm not sure what the conditions are, but you can find the repro below. When you remove ``Console.WriteLine("Hello World!");`` it produces correct IL.

**Exception**
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null suppression operator not skipped when searching for bindable parent</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
            // skip up past parens and ref expressions, as we have no bound nodes for them.
            while (true)
            {
                switch (parent.Kind())
                {
                    case SyntaxKind.ParenthesizedExpression:
                    case SyntaxKind.RefExpression:
                    case SyntaxKind.RefType:
                        var pp = parent.Parent;
                        if (pp == null) break;
                        parent = pp;
                        break;
                    default:
                        goto foundParent;
                }
            }
`</Code>
    <Description>This code in `MemberSemanticModel.GetBindableParentNode` does not handle the postfix `!` operator, which has no bound node:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38339</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable warnings for default(T) but not default</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

class C&lt;T&gt;
{
    [AllowNull]
    internal T _f1 = default(T);
    [AllowNull]
    internal T _f2 = default;
}


**Expected Behavior**:
No warnings.

**Actual Behavior**:
Warning on the `default(T)`.

warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.
`</Code>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

cc: @jcouv, @cston</Description>
  </Issue>
  <Issue>
    <IssueID>38333</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crash</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.9.15 &amp; 16.2.3

**Steps to Reproduce**:

1. Open git history window
2. Click keyword textbox
3. Type :  `\` `Enter` `BackSpace`

**Actual Behavior**: VS crash.
</Description>
  </Issue>
  <Issue>
    <IssueID>38332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Calling this() from struct constructor removes nullable warnings</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
public struct C
{
    string _a;
    object _b;
    
    public C(string a) : this()
    {
        _a = a;
    }
    
    public C(object b) : this()
    {
        _b = b;
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

``



I use this pattern to implement a form of discriminated unions, and so this pattern is not rare in my code base. I imagine I'm not the only one.

**Expected Behavior**:

warning CS8618: Non-nullable field '_b' is uninitialized. Consider declaring the field as nullable.
warning CS8618: Non-nullable field '_a' is uninitialized. Consider declaring the field as nullable.

**Actual Behavior**:

No warning
</Description>
  </Issue>
  <Issue>
    <IssueID>38331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable] Get asked to simplify cast needed to remove nullable warning</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels />
    <Code> C#
#nullable enable

class Bar
{       
       protected override Task&lt;string?&gt; FindFileAsync(IProjectTreeProvider provider, IProjectTree root)
       {
               return Task.FromResult((string?)"");
                                       _______
       }
}


**Expected Behavior**:
No simplification

**Actual Behavior**:
Get prompted to simplify as indicated. If follow through with simplification, get a warning:


Warning	CS8619	Nullability of reference types in value of type 'Task&lt;string&gt;' doesn't match target type 'Task&lt;string?&gt;'.	Microsoft.VisualStudio.ProjectSystem.Managed	C:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed\ProjectSystem\SpecialFileProviders\AbstractFindByNameSpecialFileProvider2.cs	26	Active
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>38330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] ServiceHub.RoslynCodeAnalysisService32.exe is OOMing multiple times a day</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

This is a regresssion, either because we've opt'd into more analyzers when we moved over to .editorconfig enforcement of analyzer levels, or because we're running on newer builds of VS.

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 369551a45088071ec37673d11cfca67658c5ba25`
4. `ProjectSystem.sln`
5. Work for a couple of hours.

This occurs 3 or 4 times a day, and I've also experienced it in other codebases. I had a look at the watsons and every time this crashes its getting into a unique bucket due to the random nature of what frame the OOM is being thrown.

[internalshare]\\public\davkean\Roslyn\38330.zip</Description>
  </Issue>
  <Issue>
    <IssueID>38329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MaybeNullWhenAttribute ignored on TryGetValue, CS8600 nullable reference warning emitted</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Collections.Generic;

namespace NullTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary&lt;int, Program&gt; dictionary = new Dictionary&lt;int, Program&gt;();

            // CS8600 warning here:       v
            if (dictionary.TryGetValue(5, out Program val))
                Console.WriteLine(val);
        }
    }
}


**Expected Behavior**: No warning.

**Actual Behavior**: Warning appears: _CS8600: Converting null literal or possible null value to non-nullable type_.

This was (supposedly recently) attributed with

cs
public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);
`</Code>
    <Description>**Version Used**:  VS2019 16.3.0 Preview 2.0, with .NET Core 3.0.100-preview8-013656, targeting .NET Core 3.0

**Steps to Reproduce**:

1) Make a new project and use`&lt;Nullable&gt;enable&lt;/Nullable&gt;` with a netcoreapp3.0 console project.

2) Set the following code

``

but the attribute is not be respected in the example I posted. Or am I using some outdated version and need to update? I assume I'm on the bleeding edge releases but I can easily be wrong. I also use `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;` for what its worth.</Description>
  </Issue>
  <Issue>
    <IssueID>38326</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Public API for `GetDocument(DocumentId)` that returns non-null Document</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public Document GetRequiredDocument(DocumentId documentId);
`</Code>
    <Description>We should add a public API to get `Document` from a `DocumentId` that returns a non-null `Document` or throw if not found.  This would help us avoid using null-forgiving operator (!) when enabling nullable ref.

e.g.

``

We will probably also need an analyzer/codefix to flag usage of `GetDocument(id)!` in code with nullable-ref already enabled.</Description>
  </Issue>
  <Issue>
    <IssueID>38315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>guard over duplicated project references in msbuildworkspace</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>our VS layer has a proper safeguard on malformed project files such as duplicated p2p references.

it looks like MSBuildWorkspace doesn't have one. causing this kind of exception.

``

looks like this line - 

we should either let CompilationTracker handle this situation or update MSbuildWorkspace to handle this case.</Description>
  </Issue>
  <Issue>
    <IssueID>38314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find-Refs filter-list includes lots of options unnecessarily.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here's an example of what i see when i bring up the filter list:

![image](

Note that in my case i just have 28 reads and 2 writes.  However, the list is filled with a bunch of other inapplicable cases, all with 0 count.  These should not be in the list.  Note: this is def a bug.  No where else do things work this way.  We always only see items for the values actually in the list.  For example, imagine if filtering on error code worked this way.  You'd have thousands of items in the list, almost all with `(0)` next to them.  Instead, the control works properly and you get:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler NuPkg MSBuild version check needs to be updated. </Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example: 



The props file here, and for related packages, need to be labeling everything before 16.0 as unsupported. That includes 15.0 - 15.3. </Description>
  </Issue>
  <Issue>
    <IssueID>38310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Show content and select full row in bookmark window.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Now, bookmark window only show file path, it's better to show content preview.
And I think should highlight full row rather than only the first column.</Description>
  </Issue>
  <Issue>
    <IssueID>38309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FailFast in SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 28,76 ms for &lt;path-to-project&gt;.csproj.
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : FailFast: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Environment.FailFast(System.String, System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(Microsoft.CodeAnalysis.CSharp.BoundConversion) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, Boolean, Boolean) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Exception details: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]

Build FAILED.
`</Code>
    <Description>**Version Used**:

.NET Core SDK 2.2.401

**Steps to Reproduce**:

None as of yet; affected project is rather large and no source information is available in the error message.

**Expected Behavior**:

Project builds (it does under 2.2.108).

**Actual Behavior**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38429</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>provide a power save mode</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>20/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>38429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.

these people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.

basically no solution crawler running, no background compilation running and etc. 

it requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.</Description>
  </Issue>
  <Issue>
    <IssueID>38427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Check for matching tuple names missing in type constraints</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38427</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`where T : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` should produce an error just like `class C : I&lt;(int a, int b)&gt;, I&lt;(int c, int d)&gt;` does.

I think this should also apply to indirect constraints, such as `where T : I&lt;(int a, int b)&gt;, I2` with `interface I2 : I&lt;(int c, int d)&gt;` out of consistency with implementation scenario (`class C : I&lt;(int a, int b)&gt;, I2 { }` produces an error).

Note: this would be a breaking change.</Description>
  </Issue>
  <Issue>
    <IssueID>38426</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.editorconfig is causing memory explosion in syntax trees</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>04/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Performance-Scenario-Solution-Open</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>38426</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>(FYI: This may be one of the root causes of #38330 reported by @davkean.)

I have a solution which is made up of multiple copies of the project-system repo (~400 projects in total). Looking a dump of the managed heap, nearly 10% of the managed heap (243mb of 2.3Gb) is consumed by duplicated strings held by `CSharpSyntaxTree.ParsedSyntaxTree`. The issue is that the project-system repo has an .editorconfig that turns diagnostics on/off and `Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath` does substring parsing of rules of the form "dotnet_diagnostic.&lt;diagnostic&gt;.severity". Since it does this _for each syntax tree in the solution_ (~6 million of them in this case), each substring parse is duplicated over and over and over again. It looks like if `AnalyzerConfig.Section` just did this substring parsing once and passed back the same string for everyone, this would eliminate the duplication.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38462</PullRequestID>
        <Title>Cache diagnostic ID strings in the AnalyzerConfigSet</Title>
        <Description>I'm not sure if this is exactly where we want to do the caching, so I've
taken the opportunity to make all the non-core AnalyzerConfig APIs internal.
There are no existing consumers depending on them, so this is not a breaking
change.

Fixes #38426</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>04/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38462</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38426</IssueID>
        <PullRequestID>38760</PullRequestID>
        <Title>Cache AnalyzerConfigOptionsResult instances</Title>
        <Description>A common case for editorconfig is for most of the source files to have the same
options specified, which means if we store options for each source file it's
likely we'll have many duplicate sets. This change adds a cache to AnalyzerConfigSet
to try to de-dup identical options dictionaries to a single shared instance.</Description>
        <CreatedDate>19/09/2019</CreatedDate>
        <ClosedDate>25/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38426</IssueID>
            <PullRequestID>38760</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Include parameters', this class' fields' and local variables' values on stack trace</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels />
    <Description>I've seen this when executing Python in some environments: when an error (exception) is raised, all pertinent values up and down the stack are captured. This greatly improves debugging, in many cases allowing a bug to be fixed without having to reproduce the entire scenario by stepping through code, etc.

**Version Used**: Both .NET Framework and Core

**Steps to Reproduce**:

Throw an exception, or use "new StackTrace()"

**Expected Behavior**: Values are captured and shown in the stack trace

**Actual Behavior**: Values are not captured
</Description>
  </Issue>
  <Issue>
    <IssueID>38422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Option Explicit On" does not report an error when there is an undeclared variable</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>16/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>38422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---I always use &amp;quot;Option Explicit On&amp;quot;, it always works very reliably!But today, in this case I do not see an error with the command &amp;quot;For i = f.Count - 1 To 0 Step -1&amp;quot; when the counter i has not been declared in one of my functions.This is the first time I encountered this strange phenomenon. Please review and correct. Thank you very much!Source code:Private Function FMsys_to_List() As List(Of String)        Dim f As List(Of String)        f = New List(Of String)(File.ReadAllLines(FM_Sys, encoding:=Encoding.Unicode))        For i = f.Count - 1 To 0 Step -1            f(i) = f(i). Trim            ' Bo comment va dong trong            ' Phai dung (Left,1) ko duoc dung Chars(0) vi s.Chars(0) bao loi khi s=&amp;quot;&amp;quot;            If f(i). Length = 0 Or Left(f(i), 1) = &amp;quot;'&amp;quot; Then f.RemoveAt(i)        Next        f.TrimExcess()        Return f    End Function ' FMsys_to_List* Of course I have the &amp;quot;Option Explicit On&amp;quot; declaration at the top, outside the Module* The price that the Sub / Function name automatically notes right after End Sub / Function is too good. Extensive for everything else. Thanks!---### Original Comments#### Visual Studio Feedback System on 8/8/2019, 03:17 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38420</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Object synchronization method was called from an unsynchronized block of code</Title>
    <CreatedDate>30/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38420</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>git checkout netcoreapp3.0
go to folder: test/ENode.Kafka.Tests
run dotnet build "ENode.Kafka.Tests.csproj" -c Release -o /app/build

**Exception**

 You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---&gt; System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]
`</Code>
    <Description>**Version Used**: 
net core sdk version: 3.0.100-preview8-013656
os version: ubuntu 16.04.4 LTS x64

**Steps to Reproduce**:
clone this [project]( 
checkout: ``
</Description>
  </Issue>
  <Issue>
    <IssueID>38405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Upgraded to Preview 2.0 and VB Core 3.0 applications no longer compile, they are multiple errors and warnings.---### Original Comments#### Visual Studio Feedback System on 8/14/2019, 03:00 AM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions#### James Mu solved on 8/13/2019, 11:35 PM, 0 votes: &lt;p&gt;I solved this problem by adding the following code to a new VB code file:&lt;/p&gt;&lt;pre&gt;Namespace Global.Microsoft.VisualBasic.MyServices.Internal    Public Class ContextValue(Of T)        Public Property Value As T    End ClassEnd Namespace&lt;/pre&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>38403</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 2019 (and preview) crashes when I paste this code into the editor</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>11/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38403</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
using System;
using System.Collections.Generic;
using System.Text;

public abstract class QueryAsserterBase
{
    public abstract void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;Nullable&lt;TResult&gt;&gt;&gt; actualQuery)
        where TResult : struct;
}

public class QueryAsserter&lt;TContext&gt; : QueryAsserterBase
{
    public override void AssertQueryScalar&lt;TItem1, TResult&gt;(
        Func&lt;IQueryable&lt;TItem1&gt;, IQueryable&lt;TResult?&gt;&gt; actualQuery)
    {          
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
What steps will reproduce the problem?
1. Create a new .NET Core 3.0 (preview 7 or 8) Console Project in latest Visua Studio 2019 16.2 or preview 2.0 16.3.0 
2.  Just paste the following code below into the editor (replace the existing code)
3. Visual Studio just hangs and after a while just crash

What is the expected output? What do you see instead?

Editor shoudl not crash, confirmed on a blank fresh installed Windows 10, with fresh install of latest VS2019 and .NET Core 3 preview.

Please provide any additional information below.

The code that I paste in (don't ask me why),  just copied from some website while exploring the non-nullable types feature.

``

---
### Original Comments

#### Fiona Niu[MSFT] on 8/22/2019, 00:15 AM: 

&lt;p&gt;Thank you for taking the time to log this issue! Could you please provide more information via the Visual Studio Feedback Tool(Help -&amp;gt; Send Feedback -&amp;gt; Report A Problem)so that we can conduct further research?  The feedback tool  will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).&lt;br&gt;
Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• Open Visual Studio Feedback tool.
 
• Click the banner letting you know that you have problems requesting your attention.
 
• Click this problem from the list

• Click &amp;quot;View their request and respond&amp;quot; from the problem details banner

• Add a comment, in the Attachments/Record: click Start Recording

• When the Steps Recorder tool appears, perform the steps that reproduce the problem.

• When you're done, choose the Stop Record button.
 
• Wait a few minutes for Visual Studio to collect and package the information that you recorded.

• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full instructions, please see: &lt;a target='_blank' href=" . For information about what data is collected, see &lt;a target='_blank' href="
We look forward to hearing from you!&lt;/p&gt;

#### visualstudio on 8/22/2019, 00:28 AM: 

I just copy paste the code from the issue and bang the studio stops responding, just crashes/dies after a while.  I can't type anything else after I paste the code into a new fresh console appliction.
#### Tore Nestenius on 8/22/2019, 00:32 AM: 

&lt;p&gt;You got my recording?&lt;/p&gt;

#### Fiona Niu[MSFT] on 8/22/2019, 00:51 AM: 

&lt;p&gt;Thanks a lot for providing the information. We got your attachments. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Greg Smith on 8/26/2019, 08:53 AM: 

I also get this crash on the third paste of std::isfinite to replace _finite. Exactly as the OP reports, VS goes unreponsive for a few seconds, then restarts.

---
### Original Solutions
(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38403</IssueID>
        <PullRequestID>38617</PullRequestID>
        <Title>VisitType should visit type arguments for error types.</Title>
        <Description>Fixes #38403.</Description>
        <CreatedDate>10/09/2019</CreatedDate>
        <ClosedDate>11/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Nullable Reference Types</Name>
            <IssueID>38403</IssueID>
            <PullRequestID>38617</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38617</PullRequestID>
            <IssueID>38403</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38401</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS1580 fired with a paramater that is generic and nullable (xml doc)</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](

---
I'm using VS2019 16.1.1 (in VS2017 15.9.12 this does not happen)
The app is using .net core 2.2, and the analyzers Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.2
StyleCop.Analyzers 1.1.118 

I have method with this definition:

``

and in a xml doc I have this:

&lt;pre&gt;
/// &amp;lt;summary&amp;gt;
/// Internally uses &amp;lt;see cref=&amp;quot;TypeValidations.HasValue{T}(T?) &amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
&lt;/pre&gt;

In VS2019 this fires the error:

&gt; Error	CS1580	Invalid type for parameter T? in XML comment cref attribute: 'TypeValidations.HasValue{T}(T?) '

If I change the documentation to `TypeValidations.HasValue{T}(Nullable{T})`  now I got an analyzer error (SA1125) telling me that I should use the shorthand notation for nullable types.

---
### Original Comments

#### Visual Studio Feedback System on 5/30/2019, 07:14 PM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 02:19 AM: 

&lt;p&gt;This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.&lt;/p&gt;

#### Visual Studio Feedback System on 6/10/2019, 04:13 AM: 

&lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;


---
### Original Solutions
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38398</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent accessibility checks  produce unexpected errors when types nested into interfaces are involved</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Default Interface Impl</Name>
        <IssueID>38398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void InconsistentAccessibility()
        {
            var source1 =
@"
    interface I1
    {
        protected interface I2
        {
        }
    }

    class C1
    {
        protected interface I2
        {
        }
    }

    interface I3 : I1
    {
        protected I1.I2 M1();
    }

    class C3 : I1
    {
        protected void M1(I1.I2 x) { }
    }

    class C33 : C1
    {
        protected void M1(C1.I2 x) { }
    }
";
            var compilation1 = CreateCompilation(source1, options: TestOptions.DebugDll,
                                                 parseOptions: TestOptions.Regular,
                                                 targetFramework: TargetFramework.NetStandardLatest);
            compilation1.VerifyDiagnostics(
                // (18,25): error CS0050: Inconsistent accessibility: return type 'I1.I2' is less accessible than method 'I3.M1()'
                //         protected I1.I2 M1();
                Diagnostic(ErrorCode.ERR_BadVisReturnType, "M1").WithArguments("I3.M1()", "I1.I2").WithLocation(18, 25),
                // (23,24): error CS0051: Inconsistent accessibility: parameter type 'I1.I2' is less accessible than method 'C3.M1(I1.I2)'
                //         protected void M1(I1.I2 x) { }
                Diagnostic(ErrorCode.ERR_BadVisParamType, "M1").WithArguments("C3.M1(I1.I2)", "I1.I2").WithLocation(23, 24)
                );
        }
`</Code>
    <Description>``

Expected: No errors. Note, we don't produce the error for scenario when protected interface is nested into a class, the C33 case. </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>38398</IssueID>
        <PullRequestID>38451</PullRequestID>
        <Title>Adjust inconsistent accessibility checks to properly handle protected types declared within interfaces.</Title>
        <Description>Fixes #38398.</Description>
        <CreatedDate>03/09/2019</CreatedDate>
        <ClosedDate>05/09/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Default Interface Impl</Name>
            <IssueID>38398</IssueID>
            <PullRequestID>38451</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>38451</PullRequestID>
            <IssueID>38398</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>38385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Search in Git history window doesn't work fine with multiline.</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes, we will commit with multiline message, such as:

Enter the following commit message:
``
Search `first` in git history window can find this commit, but `second` can't.

</Description>
  </Issue>
  <Issue>
    <IssueID>38382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense lists unfitting generic extension methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.IO;

namespace ExampleLib
{
    public class Class1
    {
        public void Test()
        {
            object x;
            x. // use IntelliSense here
        }
    }

public static class StreamExtensions
    {
        public static T Read&amp;lt;T&amp;gt;(this T self, out int result) where T : Stream
        {
            result = 1234; // sample code
            return self;
        }
    }
}
`</Code>
    <Description>_This issue has been moved from [a ticket on Developer Community](---Hence the following code:``I defined an extension method using a generic type parameter for the extended class, but it is limited to `Stream` instances due to the type constraint on `T`. This was done to return an extended, typed instance to allow chain calling such methods.However, when typing `x.` at the marked position in `Class1::Test`, IntelliSense also lists the `Stream` only extension method `Read&amp;lt;&amp;gt;` even though `object` is not guaranteed to be of type `Stream`. The full list shown by IntelliSense then is- Equals- GetHashCode- GetType- Read&amp;lt;&amp;gt;- ToStringIs this expected behavior? Of course, theoretically `x` could be passed by calling the method &amp;quot;normally&amp;quot; without syntactic extension method sugar. However, it turns generic extension methods into IntelliSense-cluttering bad guys.Can this behavior be made optional?---### Original Comments#### Visual Studio Feedback System on 8/22/2019, 09:36 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 16.3.0 Preview 2 - IDE0060 Double Underscore False Positive</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_This issue has been moved from [a ticket on Developer Community](---IDE0060 Remove unused parameter '__' is thrown here on the double underscore. Shouldn't this be considered a valid pattern for a discard variable?``---### Original Comments#### Visual Studio Feedback System on 8/28/2019, 09:22 PM: &lt;p&gt;We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.&lt;/p&gt;---### Original Solutions(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>38379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Replace property with method refactoring discards unsafe modifier</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>03/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Program
{
    public static unsafe void* Pointer =&gt; default;
}


diff
+Expected Behavior
-Actual Behavior


diff
class Program
{
+    public static unsafe void* GetPointer()
-    public static void* GetPointer()
    {
        return default;
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2019 version 16.3 Preview 2

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>38377</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler does no longer report local variable scope conflict</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>38377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;

public class C
{
    public List&lt;string&gt; Values = new List&lt;string&gt;();
    
    public void M(IEnumerable&lt;C&gt; source) 
    {
        source.Where(x =&gt; x.Values.Any(x =&gt; x == "Hello World"));
    }
}


**Expected Behavior**:

error CS0136: A local or parameter named 'x' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
`</Code>
    <Description>**Version Used**:  16.3 Preview 2

**Steps to Reproduce**:
I don't know if this is an expected new feature or not, i've noticed because it broke on the build server (having only 16.2.3 installed) and my .NET Framework project is set to Language version `Automatically selected based on framework version` (7.3).
[Sharplab](
``
**Actual Behavior**:
Compiles fine</Description>
  </Issue>
  <Issue>
    <IssueID>38369</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][roslyn] Localizability of "0; "WRN_UninitializedNonNullableField"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
Non-nullable {0} '{1}' is uninitialized. Consider declaring the {0} as nullable.

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
assumed that the placeholder {0} will be replaced with "field" and translated accordingly. Please kindly inform us what this placeholder will be replaced with.</Description>
  </Issue>
  <Issue>
    <IssueID>38368</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title> [loc][Query][Roslyn] Localizability of "0; "IDS_CSCHelp"</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>38368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,
please help localization team to answer question from translator.
In case translator is not sure about context/meaning/localizability of string we raise a question.

Source:
\r\n                             Visual C# Compiler Options\r\n\r\n                       - OUTPUT FILES -\r\n-out:&lt;file&gt;                   Specify output file name (default: base name of\r\n                              file with main class or first file)\r\n-target:exe                   Build a console executable (default) (Short\r\n                              form: -t:exe)\r\n-target:winexe                Build a Windows executable (Short form:\r\n                              -t:winexe)\r\n-target:library               Build a library (Short form: -t:library)\r\n-target:module                Build a module that can be added to another\r\n                              assembly (Short form: -t:module)\r\n-target:appcontainerexe       Build an Appcontainer executable (Short form:\r\n                              -t:appcontainerexe)\r\n-target:winmdobj              Build a Windows Runtime intermediate file that\r\n                              is consumed by WinMDExp (Short form: -t:winmdobj)\r\n-doc:&lt;file&gt;                   XML Documentation file to generate\r\n-refout:&lt;file&gt;                Reference assembly output to generate\r\n-platform:&lt;string&gt;            Limit which platforms this code can run on: x86,\r\n                              Itanium, x64, arm, arm64, anycpu32bitpreferred, or\r\n                              anycpu. The default is anycpu.\r\n\r\n                       - INPUT FILES -\r\n-recurse:&lt;wildcard&gt;           Include all files in the current directory and\r\n                              subdirectories according to the wildcard\r\n                              specifications\r\n-reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly\r\n                              file using the given alias (Short form: -r)\r\n-reference:&lt;file list&gt;        Reference metadata from the specified assembly\r\n                              files (Short form: -r)\r\n-addmodule:&lt;file list&gt;        Link the specified modules into this assembly\r\n-link:&lt;file list&gt;             Embed metadata from the specified interop\r\n                              assembly files (Short form: -l)\r\n-analyzer:&lt;file list&gt;         Run the analyzers from this assembly\r\n                              (Short form: -a)\r\n-additionalfile:&lt;file list&gt;   Additional files that don't directly affect code\r\n                              generation but may be used by analyzers for producing\r\n                              errors or warnings.\r\n-embed                        Embed all source files in the PDB.\r\n-embed:&lt;file list&gt;            Embed specific files in the PDB.\r\n\r\n                       - RESOURCES -\r\n-win32res:&lt;file&gt;              Specify a Win32 resource file (.res)\r\n-win32icon:&lt;file&gt;             Use this icon for the output\r\n-win32manifest:&lt;file&gt;         Specify a Win32 manifest file (.xml)\r\n-nowin32manifest              Do not include the default Win32 manifest\r\n-resource:&lt;resinfo&gt;           Embed the specified resource (Short form: -res)\r\n-linkresource:&lt;resinfo&gt;       Link the specified resource to this assembly\r\n                              (Short form: -linkres) Where the resinfo format\r\n                              is &lt;file&gt;[,&lt;string name&gt;[,public|private]]\r\n\r\n                       - CODE GENERATION -\r\n-debug[+|-]                   Emit debugging information\r\n-debug:{full|pdbonly|portable|embedded}\r\n                              Specify debugging type ('full' is default,\r\n                              'portable' is a cross-platform format,\r\n                              'embedded' is a cross-platform format embedded into\r\n                              the target .dll or .exe)\r\n-optimize[+|-]                Enable optimizations (Short form: -o)\r\n-deterministic                Produce a deterministic assembly\r\n                              (including module version GUID and timestamp)\r\n-refonly                      Produce a reference assembly in place of the main output\r\n-instrument:TestCoverage      Produce an assembly instrumented to collect\r\n                              coverage information\r\n-sourcelink:&lt;file&gt;            Source link info to embed into PDB.\r\n\r\n                       - ERRORS AND WARNINGS -\r\n-warnaserror[+|-]             Report all warnings as errors\r\n-warnaserror[+|-]:&lt;warn list&gt; Report specific warnings as errors\r\n-warn:&lt;n&gt;                     Set warning level (0-4) (Short form: -w)\r\n-nowarn:&lt;warn list&gt;           Disable specific warning messages\r\n-ruleset:&lt;file&gt;               Specify a ruleset file that disables specific\r\n                              diagnostics.\r\n-errorlog:&lt;file&gt;              Specify a file to log all compiler and analyzer\r\n                              diagnostics.\r\n-reportanalyzer               Report additional analyzer information, such as\r\n                              execution time.\r\n\r\n                       - LANGUAGE -\r\n-checked[+|-]                 Generate overflow checks\r\n-unsafe[+|-]                  Allow 'unsafe' code\r\n-define:&lt;symbol list&gt;         Define conditional compilation symbol(s) (Short\r\n                              form: -d)\r\n-langversion:?                Display the allowed values for language version\r\n-langversion:&lt;string&gt;         Specify language version such as\r\n                              `latest` (latest version, including minor versions),\r\n                              `default` (same as `latest`),\r\n                              `latestmajor` (latest version, excluding minor versions),\r\n                              `preview` (latest version, including features in unsupported preview),\r\n                              or specific versions like `6` or `7.1`\r\n-nullable[+|-]                Specify nullable context option enable|disable.\r\n-nullable:{enable|disable|warnings|annotations}\r\n                              Specify nullable context option enable|disable|warnings|annotations.\r\n\r\n                       - SECURITY -\r\n-delaysign[+|-]               Delay-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-publicsign[+|-]              Public-sign the assembly using only the public\r\n                              portion of the strong name key\r\n-keyfile:&lt;file&gt;               Specify a strong name key file\r\n-keycontainer:&lt;string&gt;        Specify a strong name key container\r\n-highentropyva[+|-]           Enable high-entropy ASLR\r\n\r\n                       - MISCELLANEOUS -\r\n@&lt;file&gt;                       Read response file for more options\r\n-help                         Display this usage message (Short form: -?)\r\n-nologo                       Suppress compiler copyright message\r\n-noconfig                     Do not auto include CSC.RSP file\r\n-parallel[+|-]                Concurrent build.\r\n-version                      Display the compiler version number and exit.\r\n\r\n                       - ADVANCED -\r\n-baseaddress:&lt;address&gt;        Base address for the library to be built\r\n-checksumalgorithm:&lt;alg&gt;      Specify algorithm for calculating source file\r\n                              checksum stored in PDB. Supported values are:\r\n                              SHA1 or SHA256 (default).\r\n-codepage:&lt;n&gt;                 Specify the codepage to use when opening source\r\n                              files\r\n-utf8output                   Output compiler messages in UTF-8 encoding\r\n-main:&lt;type&gt;                  Specify the type that contains the entry point\r\n                              (ignore all other possible entry points) (Short\r\n                              form: -m)\r\n-fullpaths                    Compiler generates fully qualified paths\r\n-filealign:&lt;n&gt;                Specify the alignment used for output file\r\n                              sections\r\n-pathmap:&lt;K1&gt;=&lt;V1&gt;,&lt;K2&gt;=&lt;V2&gt;,...\r\n                              Specify a mapping for source path names output by\r\n                              the compiler.\r\n-pdb:&lt;file&gt;                   Specify debug information file name (default:\r\n                              output file name with .pdb extension)\r\n-errorendlocation             Output line and column of the end location of\r\n                              each error\r\n-preferreduilang              Specify the preferred output language name.\r\n-nosdkpath                    Disable searching the default SDK path for standard library assemblies.\r\n-nostdlib[+|-]                Do not reference standard library (mscorlib.dll)\r\n-subsystemversion:&lt;string&gt;    Specify subsystem version of this assembly\r\n-lib:&lt;file list&gt;              Specify additional directories to search in for\r\n                              references\r\n-errorreport:&lt;string&gt;         Specify how to handle internal compiler errors:\r\n                              prompt, send, queue, or none. The default is\r\n                              queue.\r\n-appconfig:&lt;file&gt;             Specify an application configuration file\r\n                              containing assembly binding settings\r\n-moduleassemblyname:&lt;string&gt;  Name of the assembly which this module will be\r\n                              a part of\r\n-modulename:&lt;string&gt;          Specify the name of the source module\r\n

File Name:
Compilers\CSharp\Portable\xlf\CSharpResources.xlf

==========================================
Query:
Would you please check if the elements wihtin angle brackets can be translated?</Description>
  </Issue>
  <Issue>
    <IssueID>38366</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler should emit CS0161 for expression-bodied async iterator methods</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38366</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static async System.Collections.Generic.IAsyncEnumerable&lt;int&gt; GenerateSequence() 
     =&gt; await Task.FromResult(0);
`</Code>
    <Description>**Version Used**: csc 3.3.0-beta3-19407-03 (d961190a)

**Steps to Reproduce**:

``

**Expected Behavior**:
A compiler error message along the lines of "GenerateSequence(): not all code paths return a value"

**Actual Behavior**:
Compiler error CS7038 Failed to emit module '{0}'.</Description>
  </Issue>
  <Issue>
    <IssueID>38365</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] Code fix previews are not visible by default</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>38365</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Visual Studio Version**:
Version 16.4.0 Preview 1.0 [29228.128.master]

**Summary**:

Not sure if this also occurs in 16.3 as don't currently have build installed.


**Steps to Reproduce**:

1. Navigate to a code fix/refactoring that has a preview

**Expected Behavior**:
![image](


**Actual Behavior**:
![image](

**User Impact**:
</Description>
  </Issue>
  <Issue>
    <IssueID>38363</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Covariance does not consider type parameter constraints</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>38363</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
interface IFoo&lt;out T&gt; { }
class Foo&lt;T&gt; : IFoo&lt;T&gt;
{
    static void Bar&lt;U&gt;() where U : T
    {
        U x1 = default;
        T y1 = x1; // works, thanks to constraint

        IFoo&lt;string&gt; x2 = new Foo&lt;string&gt;();
        IFoo&lt;object&gt; y2 = x2; // works, thanks to covariance

        IFoo&lt;U&gt; x3 = new Foo&lt;U&gt;();
        IFoo&lt;T&gt; y3 = x3; // error CS0266
    }
}


I would expect `IFoo&lt;U&gt;` to be implicitly convertible to `IFoo&lt;T&gt;` due to the covariance rule, since U is a subclass of T according to the constraint.

Instead I get:

Error CS0266 Cannot implicitly convert type 'IFoo&lt;U&gt;' to 'IFoo&lt;T&gt;'. An explicit conversion exists (are you missing a cast?)
`</Code>
    <Description>Minimal reproduction:

``

`Foo&lt;U&gt;` is also not implicitly convertible to `IFoo&lt;T&gt;`, but casts do succeed at runtime for any U and T that satisfy the type parameter constraint.</Description>
  </Issue>
  <Issue>
    <IssueID>38360</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8617 warning. Maybe fixed but....</Title>
    <CreatedDate>29/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38360</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- VS2019 16.2.3
- .Net Core 3.0 Preview 8

**Steps to Reproduce**:

1. Create a solution with two .Net Core libraries (Lib2 references Lib1).

``

**Expected Behavior**:

No warning.

**Actual Behavior**:

Warning CS8617 Nullability of reference types in type of parameter 'isDefault' doesn't match implemented member 'bool? IFace.LoadSolverConfiguration(bool isDefault)'.

Maybe the same case as in [#37927]( (CS8614) but please verify it's not.
</Description>
  </Issue>
  <Issue>
    <IssueID>38357</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update our cached reference count in server</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>17/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38357</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
        // Store 100 entries -- arbitrary number
        private const int CacheSize = 100;
`</Code>
    <Description>Presently the compiler server will cache the last 100 references read off of disk. This number was chosen arbitrarily as dictated by the comment in [the file](

``

At the time this number was chosen though desktop was the primary scenario. It's possible this number was based off of the average reference count for desktop projects which is typically less than 100. Hence the cache would comfortably persist across compilations for desktop projects (or maybe the number was completely arbitrary). 

This number though doesn't help us with .NET Core style projects where reference counts are significantly higher:

|Target Framework|Average Reference Count|
|--|--|
|.NET Standard|165|
|.NET Core|201|
|ASP.NET Core|323|

This means for newer projects the compiler server reference cache effectively does not exist. At least half of the references are getting evicted on every compilation. Based on this I think we need to update our reference cached count to 350 to ensure we're providing the most value for the

</Description>
  </Issue>
  <Issue>
    <IssueID>38352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bad error message for generic field</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>12/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38352</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#nullable enable
public class C&lt;T&gt; {
	T t;
}


warning CS8618: Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.
`</Code>
    <Description>``
The recommendation here is something that cannot be done, we shouldn't recommend making the field nullable when it's of type T.</Description>
  </Issue>
  <Issue>
    <IssueID>38351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failures in PR validation [Test Logs](
``</Description>
  </Issue>
  <Issue>
    <IssueID>38350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38349</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>38349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Multiple failures in PR validation [Test Logs](

``</Description>
  </Issue>
  <Issue>
    <IssueID>38347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0004 doesn't trigger for method arguments to local function in same scope</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

**Expected Behavior**:
IDE004 offered on all casts to decimal.

**Actual Behavior**:
IDE004 isn't offered on the casts in `SameScope((decimal)a + (decimal)b)`.
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullability infotip is not shown with &lt;Nullable&gt;enable&lt;/Nullable&gt; in csproj</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>30/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;Nullable&gt;enable&lt;/Nullable&gt;

3. Write the following code
c#
namespace Demo
{
    using System;
    using System.Text.Json;

    class Program
    {
        static void Main(string[] args)
        {
            string s3 = JsonSerializer.Serialize((a: 1, b: 2, c: null as string));
            Console.WriteLine(s3);
                        
        }
    }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 Preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Enable nullable reference types in csproj by adding this to the csproj file.
``
4. Mouse over to the `s3` in the last line

**Expected Behavior**:
A tooltip window shows up, and the nullability analysis result is included.

![image](

**Actual Behavior**:
The nullability analysis is not available in the tooltip; it is not available until you add `#nullable enable` to the open file.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38345</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Code Action preview window showing the end of the content</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>38345</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2019 16.3 preview 3 d16.3

**Steps to Reproduce**:

1. Create a C# project
2. Move the cursor to `Program` and hit `Ctrl` + `.`
3. Move the cursor to select "Add accessibility modifier"

**Expected Behavior**:
Code Action preview window shows up, also the about-to-change content is visible from the first line without the need to scroll mouse up or down

![image](

**Actual Behavior**:
Code Action preview window shows up, the about-to-change content isn't visible, the content is showing the end of the changes and I need to scroll up to see the diff. 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>typeof(GenericType&lt;&gt;) can produce invalid IL and cause BadImageFormatException at runtime</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>05/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>38344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Message: An attempt was made to load a program with an incorrect format. (0x8007000B)
Stack Trace:
   at RoslynBug.Program.Test(Type type) in RoslynBug\RoslynBug\Program.cs:line 19
   at RoslynBug.Program.Main(String[] args) in RoslynBug\RoslynBug\Program.cs:line 11


**Version Used**: 
dotnet-sdk-3.0.100-preview9-19414-10

**Steps to Reproduce**:
csproj
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;PropertyGroup&gt;
    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;Deterministic&gt;true&lt;/Deterministic&gt;
    &lt;PathMap&gt;$(SolutionDir)=$(SolutionName)&lt;/PathMap&gt;
    &lt;Features&gt;pdb-path-determinism&lt;/Features&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
    &lt;RuntimeIdentifier&gt;win10-x64&lt;/RuntimeIdentifier&gt;
    &lt;TargetLatestRuntimePatch&gt;true&lt;/TargetLatestRuntimePatch&gt;
    &lt;TieredCompilation&gt;true&lt;/TieredCompilation&gt;
    &lt;TieredCompilationQuickJit&gt;true&lt;/TieredCompilationQuickJit&gt;
    &lt;LinkDuringPublish&gt;false&lt;/LinkDuringPublish&gt;
    &lt;CrossGenDuringPublish&gt;true&lt;/CrossGenDuringPublish&gt;
    &lt;PublishReadyToRun&gt;false&lt;/PublishReadyToRun&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;



c#
using System;
using System.Collections.Generic;

namespace RoslynBug
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            Test(typeof(IDictionary&lt;string, long&gt;));
        }

        static Type[] Test(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }

        static Type[] Test2(Type type)
        {
            var genericArguments = type.GetGenericArguments();
            genericArguments[0] = typeof(Example&lt;&gt;).MakeGenericType(genericArguments[0]);
            return genericArguments;
        }
    }

    public readonly struct Example&lt;T&gt; : IComparable&lt;Example&lt;T&gt;&gt;, IEquatable&lt;Example&lt;T&gt;&gt;
        where T : notnull, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
    {
        public readonly ulong Id;
        public readonly T Value;

        public Example(ulong id, T value)
        {
            Id = id;
            Value = value;
        }

        public readonly int CompareTo(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return Id &lt; other.Id ? -1 : 1;

            return Comparer&lt;T&gt;.Default.Compare(Value, other.Value);
        }

        public readonly bool Equals(Example&lt;T&gt; other)
        {
            if (Id != other.Id)
                return false;
            if (!EqualityComparer&lt;T&gt;.Default.Equals(Value, other.Value))
                return false;

            return true;
        }

        public override readonly int GetHashCode() =&gt; Id.GetHashCode();
        public override readonly bool Equals(object? obj) =&gt; obj is Example&lt;T&gt; other &amp;&amp; Equals(other);
        public override readonly string ToString() =&gt; Value.ToString() + "/" + Id.ToString();

        public static bool operator ==(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; a.Equals(b);
        public static bool operator !=(Example&lt;T&gt; a, Example&lt;T&gt; b) =&gt; !a.Equals(b);
    }
}


**Expected IL**:
msil
    IL_000a:  ldtoken    RoslynBug.Example`1
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)


**Actual IL**:
msil
    IL_000a:  ldtoken    valuetype RoslynBug.Example`1&lt;!0&gt;
    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)
`</Code>
    <Description>Sometimes using ``typeof(GenericType&lt;&gt;)`` produces invalid IL. This will result in a BadImageFormatException at run time as soon as the method is called. The exception is probably thrown by RyuJit, because it can't process invalid IL.

I'm not sure what the conditions are, but you can find the repro below. When you remove ``Console.WriteLine("Hello World!");`` it produces correct IL.

**Exception**
``
</Description>
  </Issue>
  <Issue>
    <IssueID>38343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null suppression operator not skipped when searching for bindable parent</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>21/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Semantic Model</Name>
        <IssueID>38343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
            // skip up past parens and ref expressions, as we have no bound nodes for them.
            while (true)
            {
                switch (parent.Kind())
                {
                    case SyntaxKind.ParenthesizedExpression:
                    case SyntaxKind.RefExpression:
                    case SyntaxKind.RefType:
                        var pp = parent.Parent;
                        if (pp == null) break;
                        parent = pp;
                        break;
                    default:
                        goto foundParent;
                }
            }
`</Code>
    <Description>This code in `MemberSemanticModel.GetBindableParentNode` does not handle the postfix `!` operator, which has no bound node:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>38339</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Nullable warnings for default(T) but not default</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>08/01/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38339</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
#nullable enable
using System.Diagnostics.CodeAnalysis;

class Program
{
    static void Main() { }
}

class C&lt;T&gt;
{
    [AllowNull]
    internal T _f1 = default(T);
    [AllowNull]
    internal T _f2 = default;
}


**Expected Behavior**:
No warnings.

**Actual Behavior**:
Warning on the `default(T)`.

warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.
`</Code>
    <Description>**Version Used**: 
3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147

**Steps to Reproduce**:
``

cc: @jcouv, @cston</Description>
  </Issue>
  <Issue>
    <IssueID>38333</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crash</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.9.15 &amp; 16.2.3

**Steps to Reproduce**:

1. Open git history window
2. Click keyword textbox
3. Type :  `\` `Enter` `BackSpace`

**Actual Behavior**: VS crash.
</Description>
  </Issue>
  <Issue>
    <IssueID>38332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Calling this() from struct constructor removes nullable warnings</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
#nullable enable
public struct C
{
    string _a;
    object _b;
    
    public C(string a) : this()
    {
        _a = a;
    }
    
    public C(object b) : this()
    {
        _b = b;
    }
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

Compile the following:

``



I use this pattern to implement a form of discriminated unions, and so this pattern is not rare in my code base. I imagine I'm not the only one.

**Expected Behavior**:

warning CS8618: Non-nullable field '_b' is uninitialized. Consider declaring the field as nullable.
warning CS8618: Non-nullable field '_a' is uninitialized. Consider declaring the field as nullable.

**Actual Behavior**:

No warning
</Description>
  </Issue>
  <Issue>
    <IssueID>38331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Nullable] Get asked to simplify cast needed to remove nullable warning</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels />
    <Code> C#
#nullable enable

class Bar
{       
       protected override Task&lt;string?&gt; FindFileAsync(IProjectTreeProvider provider, IProjectTree root)
       {
               return Task.FromResult((string?)"");
                                       _______
       }
}


**Expected Behavior**:
No simplification

**Actual Behavior**:
Get prompted to simplify as indicated. If follow through with simplification, get a warning:


Warning	CS8619	Nullability of reference types in value of type 'Task&lt;string&gt;' doesn't match target type 'Task&lt;string?&gt;'.	Microsoft.VisualStudio.ProjectSystem.Managed	C:\project-system\src\Microsoft.VisualStudio.ProjectSystem.Managed\ProjectSystem\SpecialFileProviders\AbstractFindByNameSpecialFileProvider2.cs	26	Active
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>38330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] ServiceHub.RoslynCodeAnalysisService32.exe is OOMing multiple times a day</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>04/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 16.3.0 Preview 3.0 [29221.207.master]

This is a regresssion, either because we've opt'd into more analyzers when we moved over to .editorconfig enforcement of analyzer levels, or because we're running on newer builds of VS.

**Steps to Reproduce**:

1. `git clone 
2. `cd project-system`
3. `git checkout 369551a45088071ec37673d11cfca67658c5ba25`
4. `ProjectSystem.sln`
5. Work for a couple of hours.

This occurs 3 or 4 times a day, and I've also experienced it in other codebases. I had a look at the watsons and every time this crashes its getting into a unique bucket due to the random nature of what frame the OOM is being thrown.

[internalshare]\\public\davkean\Roslyn\38330.zip</Description>
  </Issue>
  <Issue>
    <IssueID>38329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MaybeNullWhenAttribute ignored on TryGetValue, CS8600 nullable reference warning emitted</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>38329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Collections.Generic;

namespace NullTest
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary&lt;int, Program&gt; dictionary = new Dictionary&lt;int, Program&gt;();

            // CS8600 warning here:       v
            if (dictionary.TryGetValue(5, out Program val))
                Console.WriteLine(val);
        }
    }
}


**Expected Behavior**: No warning.

**Actual Behavior**: Warning appears: _CS8600: Converting null literal or possible null value to non-nullable type_.

This was (supposedly recently) attributed with

cs
public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);
`</Code>
    <Description>**Version Used**:  VS2019 16.3.0 Preview 2.0, with .NET Core 3.0.100-preview8-013656, targeting .NET Core 3.0

**Steps to Reproduce**:

1) Make a new project and use`&lt;Nullable&gt;enable&lt;/Nullable&gt;` with a netcoreapp3.0 console project.

2) Set the following code

``

but the attribute is not be respected in the example I posted. Or am I using some outdated version and need to update? I assume I'm on the bleeding edge releases but I can easily be wrong. I also use `&lt;LangVersion&gt;preview&lt;/LangVersion&gt;` for what its worth.</Description>
  </Issue>
  <Issue>
    <IssueID>38326</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Public API for `GetDocument(DocumentId)` that returns non-null Document</Title>
    <CreatedDate>28/08/2019</CreatedDate>
    <ClosedDate>16/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>38326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public Document GetRequiredDocument(DocumentId documentId);
`</Code>
    <Description>We should add a public API to get `Document` from a `DocumentId` that returns a non-null `Document` or throw if not found.  This would help us avoid using null-forgiving operator (!) when enabling nullable ref.

e.g.

``

We will probably also need an analyzer/codefix to flag usage of `GetDocument(id)!` in code with nullable-ref already enabled.</Description>
  </Issue>
  <Issue>
    <IssueID>38315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>guard over duplicated project references in msbuildworkspace</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>03/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>38315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>our VS layer has a proper safeguard on malformed project files such as duplicated p2p references.

it looks like MSBuildWorkspace doesn't have one. causing this kind of exception.

``

looks like this line - 

we should either let CompilationTracker handle this situation or update MSbuildWorkspace to handle this case.</Description>
  </Issue>
  <Issue>
    <IssueID>38314</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find-Refs filter-list includes lots of options unnecessarily.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>38314</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here's an example of what i see when i bring up the filter list:

![image](

Note that in my case i just have 28 reads and 2 writes.  However, the list is filled with a bunch of other inapplicable cases, all with 0 count.  These should not be in the list.  Note: this is def a bug.  No where else do things work this way.  We always only see items for the values actually in the list.  For example, imagine if filtering on error code worked this way.  You'd have thousands of items in the list, almost all with `(0)` next to them.  Instead, the control works properly and you get:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>38312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler NuPkg MSBuild version check needs to be updated. </Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>16/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example: 



The props file here, and for related packages, need to be labeling everything before 16.0 as unsupported. That includes 15.0 - 15.3. </Description>
  </Issue>
  <Issue>
    <IssueID>38310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Show content and select full row in bookmark window.</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>28/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>38310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Now, bookmark window only show file path, it's better to show content preview.
And I think should highlight full row rather than only the first column.</Description>
  </Issue>
  <Issue>
    <IssueID>38309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FailFast in SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator</Title>
    <CreatedDate>27/08/2019</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>38309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 28,76 ms for &lt;path-to-project&gt;.csproj.
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : FailFast: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Environment.FailFast(System.String, System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.BoundReturnStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(Microsoft.CodeAnalysis.CSharp.BoundLambda) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(Microsoft.CodeAnalysis.CSharp.BoundConversion) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.RefKind&gt;, Boolean, Boolean) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(Microsoft.CodeAnalysis.CSharp.BoundCall) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32 ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder ByRef, Microsoft.CodeAnalysis.CSharp.BoundExpression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Collections.Immutable.ImmutableArray`1&lt;System.__Canon&gt;) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Boolean ByRef, Boolean ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Roslyn.Utilities.UICultureUtilities+&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at System.Threading.ThreadPoolWorkQueue.Dispatch() [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :  [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : Exception details: [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error : System.InvalidOperationException: This program location is thought to be unreachable. [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitUserDefinedConditionalLogicalOperator(BoundUserDefinedConditionalLogicalOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitReturnStatement(BoundReturnStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitLambda(BoundLambda node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitConversion(BoundConversion node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionList(BoundSpillSequenceBuilder&amp; builder, ImmutableArray`1 args, ImmutableArray`1 refKinds, Boolean forceSpill, Boolean sideEffectsOnly) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitCall(BoundCall node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitAssignmentOperator(BoundAssignmentOperator node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpression(BoundSpillSequenceBuilder&amp; builder, BoundExpression expression) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.VisitExpressionStatement(BoundExpressionStatement node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitStatementList(BoundStatementList node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundStatementList.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePointWithSpan(BoundSequencePointWithSpan node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundSequencePointWithSpan.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(BoundBlock node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.SpillSequenceSpiller.Rewrite(BoundStatement body, MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.Rewrite(CSharpCompilation compilation, MethodSymbol method, Int32 methodOrdinal, NamedTypeSymbol containingType, BoundStatement statement, TypeCompilationState compilationState, SynthesizedSubmissionFields previousSubmissionFields, Boolean allowOmissionOfConditionalCalls, Boolean instrumentForDynamicAnalysis, ImmutableArray`1&amp; dynamicAnalysisSpans, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean&amp; sawLambdas, Boolean&amp; sawLocalFunctions, Boolean&amp; sawAwaitInExceptionHandler) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType) [&lt;path-to-project&gt;.csproj]
C:\Program Files\dotnet\sdk\2.2.401\Roslyn\Microsoft.CSharp.Core.targets(59,5): error :    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass22_0.&lt;CompileNamedTypeAsTask&gt;b__0() [&lt;path-to-project&gt;.csproj]

Build FAILED.
`</Code>
    <Description>**Version Used**:

.NET Core SDK 2.2.401

**Steps to Reproduce**:

None as of yet; affected project is rather large and no source information is available in the error message.

**Expected Behavior**:

Project builds (it does under 2.2.108).

**Actual Behavior**:

``
</Description>
  </Issue>
</Issues>