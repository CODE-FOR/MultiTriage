<Issues>
  <Issue>
    <IssueID>25722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>25722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Feature request] Code Fixer for adding /unsafe option</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Just like UpgradeProject, we could trigger a fixer when the following diagnostic is produced by the compiler and fix the project for you.
![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>25721</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nullable reference types NuGet feed</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>26/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25721</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
[C# Nullable Reference Types Preview 3/6/18](

**Steps to Reproduce**:
1. Create a new analyzer project
2. Update Microsoft.CodeAnalysis NuGet reference to Nullable References preview
3. Inspect object model and write experimental analyzer/fixer

**Expected Behavior**:
Retrieve NuGet package with these latest bits from somewhere

**Actual Behavior**:
Cannot find any. Tried a few versions at  but keep getting this error for `string?`:
``

tagging @cston </Description>
  </Issue>
  <Issue>
    <IssueID>25720</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Interpolated strings not correctly converted to FormattableString when extension method is called</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>25720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: C# 7.0, .NET 4.6.1

**Code to Reproduce**:

    static class StringExtensions
    {
        public static void DoSomething(this FormattableString str)
        {
            Console.WriteLine(str.Format);
        }
    }

    static class Program
    {
        static void Main(string[] args)
        {
            $"".DoSomething();
        }
    }

**Expected Behavior**:

Interpolated string is converted to FormattableString and extension method is called.

**Actual Behavior**:

Error	CS1929	'string' does not contain a definition for 'DoSomething' and the best extension method overload 'StringExtensions.DoSomething(FormattableString)' requires a receiver of type 'FormattableString'</Description>
  </Issue>
  <Issue>
    <IssueID>25718</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>25718</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Pattern cast matching with dynamic object causes CS0165</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25718</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25718</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>25718</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# 7.0 (VS 2017)

**Steps to Reproduce**:

``

**Expected Behavior**:
Successful compilation

**Actual Behavior**:
error CS0165: Use of unassigned local variable 'o'</Description>
  </Issue>
  <Issue>
    <IssueID>25716</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Regression] Syntax no longer shows up in Find All References if it refers to symbols outside of the project</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.7.0 Preview 3.0 [27523.0.d15.7]

**Steps to Reproduce**:

1. File -&gt; New Console App (.NET Framework)
2. In `Main` in Program.cs, add:
``
3. Right-click on WriteLine and choose _Find All References_

**Expected Behavior**:
In 15.6.3:
![image](

**Actual Behavior**:
![image](


~Note: I tried to repro this on a new project and couldn't - however, it repros in every FAR I've done in project-system and CPS solution.~

I've found a 100% repro, updated steps.</Description>
  </Issue>
  <Issue>
    <IssueID>25715</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] "Refresh CodeLens Team Indicators" always visible on editor context menu instead of just over CodeLens</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25715</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25715</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Regression</Name>
        <IssueID>25715</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.7.0 Preview 3.0 [27523.0.d15.7]

**Steps to Reproduce**:

1. Create a new Console App (.NET Framework)
2. In status bar, choose Add to Source Control -&gt; Git
3. Right-click on Editor within a method body

**Expected Behavior**:

No **Refresh CodeLens Team Indicators**

**Actual Behavior**:
![image](

Tried 15.6.3 and it does not repro, so this appears to be a regression.</Description>
  </Issue>
  <Issue>
    <IssueID>25714</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No reference when awaiting custom GetAwaiter method</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:   v15.6.4

**Steps to Reproduce**:

1. Create a class with a custom `GetAwaiter` that returns an awaitable.
2. Instantiate that class and `await` on it from a separate `async` method.

**Expected Behavior**:

That the `GetAwaiter` method shows references from being used in an `await` expression.

**Actual Behavior**:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>25713</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"dotnet build" does not work on OpenSUSE Tumbleweed when logged in with Active Directory account (without /p:UseSharedCompilation=false)</Title>
    <CreatedDate>26/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
.NET Command Line Tools (2.1.300-preview1-008174)
Product Information:
 Version:            2.1.300-preview1-008174
 Commit SHA-1 hash:  b8df89a54f
Runtime Environment:
 OS Name:     opensuse
 OS Version:  20180320
 OS Platform: Linux
 RID:         linux-x64
 Base Path:   /usr/share/dotnet/sdk/2.1.300-preview1-008174/
Microsoft .NET Core Shared Framework Host
  Version  : 2.1.0-preview1-26216-03
  Build    : f2c3216183d20416568a4bbf5bb7d153e826f153

Operating system is OpenSUSE Tumbleweed.

From `lsb_release -a`:

LSB Version:    n/a
Distributor ID: openSUSE
Description:    openSUSE Tumbleweed
Release:        20180320
Codename:       n/a


Related `sssd` configuration:

`/etc/sssd/sssd.conf`
ini
[sssd]
config_file_version = 2
services = pam,nss
domains = homedomain.local
default_domain_suffix = homedomain.local
debug_level = 3
[pam]
[nss]
[domain/homedomain.local]
id_provider = ad
auth_provider = ad
enumerate = false
cache_credentials = true
case_sensitive = false
ad_server = dc.homedomain.local
ad_hostname = laptop.homedomain.local
debug_level = 3
override_homedir = /home/%F/%u
ldap_user_shell = loginShell
[domain/default]
auth_provider = krb5
chpass_provider = krb5
krb5_realm = HOMEDOMAIN.LOCAL
krb5_server = DC.homedomain.local
krb5_validate = False
krb5_renewable_lifetime = 1d
krb5_lifetime = 1d


**Steps to Reproduce**:

1. Install OpenSUSE Tumbleweed, and add the computer to a domain using `User Logon Management` in `yast` (this uses `sssd` rather than samba rather than `Windows Domain Membership`.
(or)  
Run `zypper in sssd sssd-ad sssd-ldap sssd-tools` and use the above `sssd.conf` file, replacing values with the ones appropriate for the target domain.  Add the computer to the domain via the CLI (I really have no idea how to do this; I used `yast` ... it's really simple to do from there)
2. Login with a domain account.  Verify that the domain account uses the `sAMAccountName` rather than `userPrincipalName` format (`whoami` will display this correctly)
3. Run the following
bash
mkdir ~/test
cd ~/test
dotnet new "ASP.NET Core Empty"
dotnet build
# Error will occur

**Expected Behavior**:
The following output is what I get when I run as `sudo -u (any local account) dotnet build`, `sudo dotnet build` or just `dotnet build` as a local user:

Microsoft (R) Build Engine version 15.7.11.29948 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.
  Restoring packages for /home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj...
  Generating MSBuild file /home/DIAGONACTIC/acousticiris/RiderProjects/test/obj/test.csproj.nuget.g.props.
  Restore completed in 574.58 ms for /home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj.
  test -&gt; /home/DIAGONACTIC/acousticiris/RiderProjects/test/bin/Debug/netcoreapp2.1/test.dll
Build succeeded.
    0 Warning(s)
    0 Error(s)
Time Elapsed 00:00:06.28

**Actual Behavior**:
msbuild
Microsoft (R) Build Engine version 15.7.11.29948 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.
  Restore completed in 69.1 ms for /home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj.
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:  [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : System.AggregateException: One or more errors occurred. (The filename, directory name, or volume label syntax is incorrect) ---&gt; System.IO.IOException: The filename, directory name, or volume label syntax is incorrect [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext() [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : --- End of inner exception stack trace --- [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : ---&gt; (Inner Exception #0) System.IO.IOException: The filename, directory name, or volume label syntax is incorrect [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext()&lt;--- [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
Build FAILED.
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:  [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : System.AggregateException: One or more errors occurred. (The filename, directory name, or volume label syntax is incorrect) ---&gt; System.IO.IOException: The filename, directory name, or volume label syntax is incorrect [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext() [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : --- End of inner exception stack trace --- [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : ---&gt; (Inner Exception #0) System.IO.IOException: The filename, directory name, or volume label syntax is incorrect [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew) [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
/usr/share/dotnet/sdk/2.1.300-preview1-008174/Roslyn/Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext()&lt;--- [/home/DIAGONACTIC/acousticiris/RiderProjects/test/test.csproj]
    0 Warning(s)
    11 Error(s)
`</Code>
    <Description>I use OpenSUSE Tumbleweed on my laptop which is joined to an Active Directory domain (using sssd).  I login with the account, `a_domain_user`&lt;sup&gt;1&lt;/sup&gt;, which results in my user name under linux being "HOMEDOMAIN\a_domain_user"&lt;sup&gt;2&lt;/sup&gt;.

If I try to `dotnet build` an "ASP.NET Core Empty", it fails with the error under *Actual Behavior*, however `sudo dotnet build`, `sudo -u (any local account) dotnet build` and logging in as a local account and running `dotnet build` works. 

After [asking about this on SO]( Martin Ullrich had me try adding the parameter `/p:UseSharedCompilation=false".  This also resolves the issue, so I'm opening up this issue as suggested.

**Version Used**: 

Both .NET Core `2.0.6` and `2.1.300-preview1-008174` (output from `dotnet --info` 2.1.300-preview):
``

---

&lt;sup&gt;1&lt;/sup&gt; I created the "a_domain_user" account for testing and ran this after a fresh login to rule out anything odd about my (rather heavily customized) configuration under the other account, but I kept the initial character the same because I *have* had problems in simple things like my `zsh` prompt due to the `\a` being processed into a "bell".

&lt;sup&gt;2&lt;/sup&gt; Previously I had been domain joined via samba, which uses the `sAMAccountName` format rather than `userPrincipalName`, so when I set up `sssd`, I had it continue to use this format.  I have not tried it with UPN because it would be inconsistent with my current configuration.
</Description>
  </Issue>
  <Issue>
    <IssueID>25709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Workspaces.Desktop.csproj not included in Compilers.sln</Title>
    <CreatedDate>25/03/2018</CreatedDate>
    <ClosedDate>28/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
dev.15.7.x

**Steps to Reproduce**:

1. Build on mac via `./build.sh --restore --build --test --mono`
2. See that Workspaces.Desktop is not built
3. See that Workspaces.Desktop.Tests are not run
</Description>
  </Issue>
  <Issue>
    <IssueID>25708</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Generate Equals" refactorings produce faulty code when using ref structs</Title>
    <CreatedDate>25/03/2018</CreatedDate>
    <ClosedDate>03/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
ref struct ReproA
{
	ReproB r;

	$$
}

ref struct ReproB
{
}


**Expected Behavior**: I'm not sure. (Is it even possible to determine equality/hash code for ref structs with the "traditional" approach?)
VS could a) not suggest these refactorings inside ref structs, and b) not suggest ref struct members in the member selection list.

**Actual Behavior**: The class looks something like this and cannot compile:

c#
ref struct ReproA : IEquatable&lt;ReproA&gt; // Errors CS0306, CS8343
{
	ReproB r; // Warning CS0169

	public override bool Equals(object obj)
	{
		return obj is ReproA &amp;&amp; Equals((ReproA)obj); // Warning CS0184, error CS0030
	}

	public bool Equals(ReproA other)
	{
		return EqualityComparer&lt;ReproB&gt;.Default.Equals(r, other.r); // Error CS0306
	}

	public override int GetHashCode()
	{
		return -947233955 + EqualityComparer&lt;ReproB&gt;.Default.GetHashCode(r); // Error CS0306
	}
}
`</Code>
    <Description>**Version Used**: VS 15.7 Preview 2 (2.8.0.62716)

**Steps to Reproduce**:

1. Copy the source below into a C# source file.
2. Invoke the Quick Fix menu at the marked location and select either "Generate Equals" or "Generate Equals and GetHashCode".
3. Make sure the field "r" is selected in the list, and "Implement IEquatable&lt;ReproA&gt;" is checked. Press "OK".

``
</Description>
  </Issue>
  <Issue>
    <IssueID>25707</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Generate Equals" refactorings should not include set-only properties</Title>
    <CreatedDate>25/03/2018</CreatedDate>
    <ClosedDate>14/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Repro
{
	int SetOnly { set { } }
	$$
}


**Expected Behavior**: The property is not included in the list, and thus doesn't appear in the generated code.

**Actual Behavior**: The generated code looks something like this:

c#
public override bool Equals(object obj)
{
	var repro = obj as Repro;
	return repro != null &amp;&amp;
		   this.SetOnly == repro.SetOnly; // Emits two CS0154 errors
}

public override int GetHashCode()
{
	return 257811045 + this.SetOnly.GetHashCode(); // Emits one CS0154 error
}
`</Code>
    <Description>**Version Used**: VS 15.7 Preview 2 (Roslyn 2.8.0.62716)

**Steps to Reproduce**:

1. Copy the class below into a C# source file.
2. Invoke the Quick Fix menu at the marked location and select either "Generate Equals" or "Generate Equals and GetHashCode".
3. Make sure SetOnly is marked in the list and press "OK".

``</Description>
  </Issue>
  <Issue>
    <IssueID>25706</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Possible mistake in DisplayVisitor_Types?</Title>
    <CreatedDate>25/03/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The `As` at [SymbolDisplayVisitor_Types Line 373]( is stated to be a `Punctuation`.  Whereas other `As` usage in `DisplayVisitor` consider it as `Keyword`.  If so I'll update it and the related tests when treating it as a `keyword`
``</Description>
  </Issue>
  <Issue>
    <IssueID>25692</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>25692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Produce much better code for CInt(Fix(number))</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>16/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>25692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We believe the code produced for `CInt(Fix(number))` can be significantly improved by emitting an IL instruction for simply truncating the floating-point number to its integral part.
1. Check this assumption, and
2. Change the Roslyn VB compiler to produce the more efficient sequence

This is a compiler-only change that requires no change to the VB language specification, as the emitted code would be functionally equivalent.

See also  and 

/cc @AnthonyDGreen </Description>
  </Issue>
  <Issue>
    <IssueID>25690</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Generate Equals" refactorings produce non-compiling code when using indexers</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>14/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25690</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Repro
{
	public int this[int index]
	{
		get =&gt; index;
	}
	$$
}


**Expected Behavior**: The generated methods are syntactically valid. (Although I don't know how one could use an indexer to implement Equals or GetHashCode.)

**Actual Behavior**: The generated code looks something like this, which is syntactically invalid:

c#
public override bool Equals(object obj)
{
	var repro = obj as Repro;
	return repro != null &amp;&amp;
		this[] == repro.this[]; // Emits four compiler errors and one warning
}

public override int GetHashCode()
{
	return -529683855 + this[].GetHashCode(); // Emits one compiler error
}
`</Code>
    <Description>**Version Used**: VS 15.7 Preview 2 (Roslyn 2.8.0.62716, `e205ae18`)

**Steps to Reproduce**:

1. Copy the class below into a C# source file.
2. Invoke the Quick Fix menu at the marked location and select either "Generate Equals(object)…" or "Generate Equals and GetHashCode…".
3. Make sure the indexer "this[int]" is selected in the list. Press OK.

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25690</IssueID>
        <PullRequestID>25700</PullRequestID>
        <Title>"Generate Equals" should ignore indexers and setter-only properties</Title>
        <Description>fixes #25690 
fixes #25707</Description>
        <CreatedDate>24/03/2018</CreatedDate>
        <ClosedDate>14/04/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>25690</IssueID>
            <PullRequestID>25700</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>25690</IssueID>
            <PullRequestID>25700</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>25687</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>FatalExecutionEngineError with Microsoft.EntityFrameworkCore 2.0.2 referenced in .NET 4.6.1</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25687</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @RussKeldorph on March 22, 2018 22:8__From @dalibor983 on March 22, 2018 9:42_When I run IISExpress everything working great  until I rebuild project and IISExpress tries to reload new dlls in memory. Then I get this exception when DbContext is initialized that crashes IISExpress:
``
After starting IISExpress again everything working again.

I must restart IISExpress on every new build :(_Copied from original issue: dotnet/coreclr#17121__Copied from original issue: aspnet/EntityFrameworkCore#11391_</Description>
  </Issue>
  <Issue>
    <IssueID>25682</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>25682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rename crash when overriding method illegally has private accessibility and the overridden method is in another project</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>31/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>25682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Developer Community: 

1. Create a C# Class Library `ClassLibrary1` with code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>25679</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>25679</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuildWorkspace: Microsoft.Build assembly problem</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>14/04/2018</ClosedDate>
    <IssueLabels />
    <Description>I'm posting this issue to respond to many issues that can be resolved by this way.
So the problem for me was that when i open a solution, the metadataReferences was always empty and the diagnostics had many issues like "PredefinedType System.Object is not defined".... After days of investigating :/ the problem was the version of the dll Microsoft.Build.Framework used, because even if you update the nuget package, your program will be using whatever version installed in your GAC (C:\Windows\Assembly\...) which is usually an old version that's causing all these problems. So you should redirect that version in the app.config (or web.config ☺)like bellow:

&lt;dependentAssembly&gt;
        &lt;assemblyIdentity name="Microsoft.Build.Framework" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" /&gt;
        &lt;bindingRedirect oldVersion="0.0.0.0-15.1.0.0" newVersion="15.1.0.0" /&gt;
&lt;/dependentAssembly&gt;

Of course 15.1.0.0 is whatever version you installed via nuget ☺.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25679</IssueID>
        <PullRequestID>1</PullRequestID>
        <Title>Initial port and addition of README.md</Title>
        <Description>This is a port of the readme from CodePlex.  Some of the links have been updated to point to locations on GitHub, but many of the links still point back to CodePlex as comparable GitHub locations are currently absent.</Description>
        <CreatedDate>14/01/2015</CreatedDate>
        <ClosedDate>14/01/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>25679</IssueID>
            <PullRequestID>1</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>25678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Guid is not right</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>23/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>25678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: any version

I want to know why when i open a solution and get the real guid (the one in .sln or .csproj file). But it just create a new Guid() for each project while opening the solution.</Description>
  </Issue>
  <Issue>
    <IssueID>25677</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Wrong default value of a nullable parameter with Microsoft.Net.Compilers 2.4.0</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# 7.1 with NuGet package Microsoft.Net.Compilers 2.4.0

**Steps to Reproduce**:

1. In VS2017, create a new console application and change C# version to 7.1
2. Enter the following:

		using System.Diagnostics;

		namespace Test
		{
			class Program
			{
				static void Foo(int? x = default)
				{
					Debug.Assert(x == null);
				}

				static void Main()
				{
					Foo();
				}
			}
		}

3. Run the program. It works because `default` of `int?` is `null`.
4. Add NuGet package Microsoft.Net.Compilers version 2.4.0 (not the latest). 
5. Run the program again. The assertion fails because `x` is `0` (`default` of `int`).

**Expected Behavior**:

The default value of `int?` parameter should be `null`.

**Actual Behavior**:

The default value of `int?` parameter is `0`.

This appears to be fixed in  Microsoft.Net.Compilers 2.6.0 and later, but I have to use 2.4.0 since it is the last version that does not require MS Build v15.0 which is not installed on our build server. 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25677</IssueID>
        <PullRequestID>22527</PullRequestID>
        <Title>Fix default literal in default value of nullable parameter</Title>
        <Description>Fixes &lt;s&gt; 

This is a breaking change: for example, the code in the added unit test currently compiles and prints `0`, this PR changes the output to `null`. But I believe the old behavior is incorrect and that the fix is worth it, especially considering that the breaking change only affects those who opted in for C# 7.1.</Description>
        <CreatedDate>04/10/2017</CreatedDate>
        <ClosedDate>10/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>25677</IssueID>
            <PullRequestID>22527</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>25677</IssueID>
            <PullRequestID>22527</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>25677</IssueID>
            <PullRequestID>22527</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>25677</IssueID>
            <PullRequestID>22527</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>22527</PullRequestID>
            <IssueID>25677</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>25675</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Manifest Issue with System.Security.Cryptography.Algorithms</Title>
    <CreatedDate>23/03/2018</CreatedDate>
    <ClosedDate>24/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS
Master as of 
``
</Description>
  </Issue>
  <Issue>
    <IssueID>25670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash Visual Studio 2017</Title>
    <CreatedDate>22/03/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>25670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This Code leads to an error.public virtual ref readonly ValidationResult Quality { ref readonly get { GetQuality(out var quality); ref return quality; } }version lang 7.1When you try to insert or type code, the &amp;quot;finding word extend&amp;quot; window appears. And begins memory leak. You can close only through Task Manager._This issue has been moved from VSTS ticketId: 576251__These are the original issue comments:_Fiona Niu - MSFT on ‎3‎/‎5‎/‎2018, 01:42 AM (17 days ago): &lt;p&gt;Thank you for your feedback! In order for us to investigate this further, could you please give us a dump file so that we can conduct further research?&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; You are able to get the files with the following steps:&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 1. Start Visual Studio.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 2. Start another instance of VS.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 3. Select Help-&amp;gt;Send Feedback-&amp;gt;Report a problem.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 4. Click &amp;quot;Report new problem&amp;quot;.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 5. Record your actions to reproduce the issue.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 6. In the list locate the first instance of VS and select 'Start Recording'.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 7. Go back to the first instance and repro the issue.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 8. Stop Record and the dmp file could be found in the temporary folder in your local pc : %TEMP%\Microsoft\VSFeedbackCollector .&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt; 9. Upload the files to this ticket by choosing insert file tag on add comment field then submit after signing in.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;We look forward to hearing from you&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25668</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[IDE][Request] GoTo Line Number</Title>
    <CreatedDate>22/03/2018</CreatedDate>
    <ClosedDate>22/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>25668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When line numbering is enable, we should also a right click menu entry to `GoTo line number`.
So that it is possible to jump straight to a particular line.</Description>
  </Issue>
  <Issue>
    <IssueID>25663</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>25663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>open issues from recursive-patterns(6-8)</Title>
    <CreatedDate>22/03/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>25663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### These open issues remain from code review of 

- In `CheckConsistentDecision`, use some notation like `v != null --&gt; !(v == null)` for more clarity than the English language comment.
- Add a private constructor to prevent construction of `DagStateEquivalence`
- Hint creation size in `            var sectionBuilder = ArrayBuilder&lt;BoundPatternSwitchSection&gt;.GetInstance();`
- Hint creation size in `                var labelBuilder = ArrayBuilder&lt;BoundPatternSwitchLabel&gt;.GetInstance();`
- Suppress subsumption errors on switch expression case if the pattern has an error.
- In `LowerDecision`, we have special handling for decisions on constant-valued input. But such decisions should already have been removed from the decision dag. Assert that this situation cannot occur and remove the special handling code.
- Remove commented code `                            //Debug.Assert(w.WhenTrue != null);`
- Merge two cases in `switch (sortedNodes[0])`
- Add a comment explaining why we don't call `GenerateSwitchDispatch` for the final node in `LowerDecisionDag`
- Comment on `GetDagNodeLabel` seems somewhat redundant.
- In `AwaitExpressionSpiller.cs`, move `VisitSwitchDispatch` to right after `EnterStatement` so it is in the same place where `VisitSwitchStatement` used to be to make deltas more clear in the end.

### These open issues remain from code review of 

- In `ComputeLabelSet` delete the commented out code.
- Remove `params` overload `public BoundStatement Switch(BoundExpression ex, params SyntheticSwitchSection[] sections)` and force caller to properly construct an immutable array.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25663</IssueID>
        <PullRequestID>24059</PullRequestID>
        <Title>recursive-patterns(6): Build and use decision tree to lower pattern-matching operations</Title>
        <Description>This PR replaces the existing "decision tree" with the new "decision dag", which is constructed using an iterative worklist algorithm.

- Iteration 1: Minor changes responding to previous code reviews
- Iteration 2: Use double.IsNaN to test for constant pattern that is double.NaN.
- Iteration 3: Use RemoveAt(0) instead of WhereAsArray(d =&gt; d != first)
- Iteration 4: Merge from parent branch
- Iteration 5: Add a skeleton for pattern switch local rewriter; use double.IsNan to test for NaN
- Iteration 6: Merge from parent branch
- Iteration 7: Initial (recursive) implementation of lowering and code gen for pattern switch statement using the new dag data structure.
- Iteration 8: More of the same (review together with iteration 7)
- Iteration 9: Merge from parent branch
- Iteration 10: Merge topological sort implementation.
- Iteration 11: Merge from parent branch
- Iteration 12: Merge from parent branch
- Iteration 13: Complete replacement for pattern switch binder, lowering, and code gen; binding but not lowering and code gen for the switch expression.
- Iteration 14: Merge from parent branch
- Iteration 15: Fix up a missing reference
- Iteration 16: Merge from parent branch and merge fixup
- Iteration 17: Replace recursive algorithms by iterative worklist algorithms (the dag is now a dag, not a tree)
- Iteration 18: Use a decision dag to lower the is-pattern expression (to take advantage of the dag optimizations).
- Iteration 19: Adjust reference for test - code now uses `Nullable&lt;T&gt;.GetValueOrDefault()`
- Iteration 20: Minor simplifications suggested in code review.
- Iteration 21: Minor changes suggested in code review.
</Description>
        <CreatedDate>05/01/2018</CreatedDate>
        <ClosedDate>22/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>24059</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>24059</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>24059</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>24059</PullRequestID>
            <IssueID>25663</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25663</IssueID>
        <PullRequestID>25544</PullRequestID>
        <Title>recursive-patterns(8): Replace old switch implementation with new one</Title>
        <Description>This PR removes the old switch bound nodes, lowering, etc, and replaces it all with the new one.

&gt; Replace old switch implementation with new one
&gt; 
&gt; - Add a new bound node to represent the dispatch of a switch statement, and use it for a sequence of value tests in the pattern switch.
&gt; - Generate a string switch using a hash code (as before) for a pattern switch.
&gt; - Remove much of the old switch binder, except what is still used.
&gt; - Fix wrong `InputType` recorded for BoundRecursivePattern.
&gt; - Prevent cascaded subsumption errors from erroneous patterns.
&gt; - Make the bound node factory use BoundSwitchDispatch rather than BoundSwitchStatement.
&gt; - Remove obsolete bound nodes from previous switch implementation.
</Description>
        <CreatedDate>16/03/2018</CreatedDate>
        <ClosedDate>26/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>25544</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>25544</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>25544</PullRequestID>
            <IssueID>25663</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>25663</IssueID>
        <PullRequestID>25767</PullRequestID>
        <Title>recursive-patterns(13): Address issues from previous recursive-patterns code reviews</Title>
        <Description>**ONLY THE LAST DELTA IS UNIQUE THIS PR and needs to be reviewed**. Others are from previous PRs.

Fixes #25663

### From 

- In `CheckConsistentDecision`, use some notation like `v != null --&gt; !(v == null)` for more clarity than the English language comment.
- Add a private constructor to prevent construction of `DagStateEquivalence`
- Hint creation of builder size in `CheckSwitchErrors`
- Suppress subsumption errors on switch expression case if the pattern has an error.
- In `LowerTest`, we have special handling for decisions on constant-valued input. But such decisions should already have been removed from the decision dag. Assert that this situation cannot occur and remove the special handling code.
- Merge two cases in `switch (sortedNodes[0])` in `LowerDecisionDag`
- Comment on `GetDagNodeLabel` is now less redundant.

### From 

- In `AwaitExpressionSpiller.cs`, move `VisitSwitchDispatch` to right before `VisitThrowStatement` so it is in the same place where `VisitSwitchStatement` used to be to make deltas more clear in the end.
- Remove `params` overload `public BoundStatement Switch(BoundExpression ex, params SyntheticSwitchSection[] sections)` and force caller to properly construct an immutable array.
</Description>
        <CreatedDate>27/03/2018</CreatedDate>
        <ClosedDate>30/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>25767</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>25663</IssueID>
            <PullRequestID>25767</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>25767</PullRequestID>
            <IssueID>25663</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>25655</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>25655</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>F# project referencing C# project, rename the file of C# project VS crashed.</Title>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>27/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25655</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25655</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>25655</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @Xiu-Li on March 16, 2018 10:46_## **Repro steps:**
1. Create a new F# .net core console app project;
2. Add a new C# .net standard classlib project；
3. Add a reference from the F# project to the C# project.
4. Rename the Class1.cs file of the C# project, VS crashed.
Note: 
Repro Machine: [CLRVM49256](
Please see the .DMP file from C:\Users\CORBVT\Documents\devenv.DMP on the repro machine.
![image](

## **Related information:**
VS build: D15.7/27515.00 (15.7 Preview 2)
dotnet --info:
``_Copied from original issue: dotnet/project-system#3396_</Description>
  </Issue>
  <Issue>
    <IssueID>25654</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type inference doesn't work with a pointer of a generic unmanaged type</Title>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>21/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Constraints</Name>
        <IssueID>25654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C {
    unsafe void M&lt;T&gt;(T* a) where T : unmanaged {
        var p = stackalloc T[10];
        M(p);
    }
}
`</Code>
    <Description>**Version Used**:  `dev15.7.x`

**Steps to Reproduce**:

``

**Expected Behavior**: No error

**Actual Behavior**:

`The type arguments for method 'C.M&lt;T&gt;(T*)' cannot be inferred from the usage. Try specifying the type arguments explicitly.`

/cc @OmarTawfik </Description>
  </Issue>
  <Issue>
    <IssueID>25652</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>25652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rewrite the MakeFieldReadonly analyzer using IOperation</Title>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>22/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>25652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The Make Field Readonly analyzer added in #19067 may be simplified by rewriting the analysis using `IOperation`.</Description>
  </Issue>
  <Issue>
    <IssueID>25649</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Build fails due to missing NETCoreSdkVersion</Title>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>02/04/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 2017 15.7 Preview 1 

**Steps to Reproduce**:  on `dev15.7.x` branch

1. Install dotnet-sdk-2.1.300-preview2-008324-win-x64.exe
2. Run restore.cmd
3. Run build.cmd

**Actual Behavior**:

Build fails with the following error for 161 projects, (notice the empty string in "**`found  instead`**")
``

</Description>
  </Issue>
  <Issue>
    <IssueID>25642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code fix doesn't see changes in document/project/solution</Title>
    <CreatedDate>21/03/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Trying to invoke the &amp;quot;Require accessibility modifier&amp;quot; code fix shows a preview for a single item but then does not see/fix changes for a document/project/solution.

_This issue has been moved from 
VSTS ticketId: 585383_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25635</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>25635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add unit tests that cover logic in compiler targets files</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>27/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>25635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Replace Compilers\Core\MSBuildTaskTests\IntegrationTests.cs which are obsolete and disabled.

Include tests of SourceRoot mapping, SourceLink and DeterministicSourcePaths.</Description>
  </Issue>
  <Issue>
    <IssueID>25628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>I would like a way to find references to a symbol, without cascading being involved.</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I think @jnm2 has some good ideas on how we could accomplish that.</Description>
  </Issue>
  <Issue>
    <IssueID>25626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio Can't Publish Consistently to Azure Using Compiler &gt; 2.4</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Visual Studio Community 2015 Update 3

**Steps to Reproduce**:

1.  Update NuGet Microsoft Compiler to 2.7
2.  Attempt to Publish project to Azure App Services (Previously worked many times)
3. See publish failure message. Compiler thinks the built project that successfully built many times 
    failed to build on it's previous build. Visual Studio then cancels the publish. Project always builds without issue when not attempting to publish. I attempted to publish after upgrading the compiler nuget package to the latest stable, 2.7. Per a stack overflow post, I downgraded to 2.61 and it published out to Azure ONCE. After leaving my PC on all night and working in the morning, I attempted to publish again and it failed. I downgraded the compiler from 2.61 to 2.4 and then it worked. 
 I can supply my zipped up project directly to anyone from Microsoft looking into this. Since Visual Studio is THE gateway to Azure, I'd like for the left hand at Microsoft to actually start a relationship with right hand and get the Azure team and Visual Studio team HELPING US EFFICIENTLY.  I am paying for Azure support, yet I still have to go to the Visual studio compilers issues list to get any hope of an answer for this. It's ridiculous.

I have an open issue with Azure Support.
Tech Sainath Setti - Issue Number: REG:118031217795823

![image](


**Expected Behavior**:
It should have published to Azure
**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>25619</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>25619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Highlighting] TODO comments</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>27/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>InternalAsk</Name>
        <IssueID>25619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>25619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In VS4MAC we had a list of tags for comments like todo/fixme and so on these got added to the task list - AFAIK VS.NET shares this feature.

VS4Mac added colorization for these tags inside comments - is that something that's planed for VS.NET as well ? </Description>
  </Issue>
  <Issue>
    <IssueID>25618</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Completion] Include defined symbols in pre processor completion</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>06/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For example in the #if context I only get true &amp; false but not the defined symbols.

#if DEBUG 

for example should complete by typing #if d&lt;tab&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>25612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompiler should add a file header on top like Metadata As Source</Title>
    <CreatedDate>20/03/2018</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Decompiled files should have a comment header on top like Metadata As Source, containing the full path to the assembly being decompiled.

This feature of Metadata As Source is incredibly useful and without it I really don't know how to determine which assembly the symbol is defined in.</Description>
  </Issue>
  <Issue>
    <IssueID>25608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>25608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ArgumentNullException thrown from IToolTipPresenter.StartOrUpdate when running test</Title>
    <CreatedDate>19/03/2018</CreatedDate>
    <ClosedDate>10/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When calling StartOrUpdate(ITrackingSpan applicableToSpan, IEnumerable&lt;object&gt; content) in Editor sdk and passing in an array of ClassifiedTextElement, it works fine when running experiment VS instance, but throws ArgumentNullException when running unit tests. 
Probably it is a MEF issue. 

Currently passing in string[] to unblock unit tests. 
\src\VisualStudio\CSharp\Impl\EventHookup\EventHookupSessionManager.cs
</Description>
  </Issue>
  <Issue>
    <IssueID>25606</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>25606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Restore Stackframe counts in OverflowOnFluentCall</Title>
    <CreatedDate>19/03/2018</CreatedDate>
    <ClosedDate>07/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25606</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Blocked by  Once that's restored, we should run restore the number of frames to original counts (add 50 to each) and run the tests continuously on Jenkins to get a dump and fix the bug.</Description>
  </Issue>
  <Issue>
    <IssueID>25605</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test plan for "indexing movable fixed buffer"</Title>
    <CreatedDate>19/03/2018</CreatedDate>
    <ClosedDate>20/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Indexing into fixed buffer is a new operation, whereas previously it was two: getting a pointer and indexing from the pointer.

### Test
- [x] langver   (`CS1666ERR_FixedBufferNotFixedErr`)
- [x] Verify semantic model and IOperation for indexer
---
- [ ] static field of struct type with fixed array (ok to index)
- [ ] `ref struct parameter` or `ref struct local` with fixed array (ok to index)
- [x] No PROTOTYPE markers
- [x] class with a struct with a fixed array (ok to index) (SimpleFixedBufferNestedFieldClass)
- [x] blocking: check unsafe is still required (SimpleFixedBufferIndexingNoUnsafe)
- [x] readonly field with struct type: index and assign to it (error) (SimpleFixedBufferNestedFieldClassRo)

The fixed array necessarily hold unmanaged primitive (ie. not nested) elements. So limited to `int`, `byte`, `int*`, etc but no struct containing those.

### IDE

### Spec

Proposal 
PR </Description>
  </Issue>
  <Issue>
    <IssueID>25604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>25604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need to capture binary log for restore in CI</Title>
    <CreatedDate>19/03/2018</CreatedDate>
    <ClosedDate>21/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Our restore process should be capturing binary logs when run in CI. This is necessary to track down random restore failures that have no output. 

</Description>
  </Issue>
  <Issue>
    <IssueID>25603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>25603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>procdump is not capturing dumps for stack overflows</Title>
    <CreatedDate>19/03/2018</CreatedDate>
    <ClosedDate>22/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider this run for context:



Here the CSharpCompilerEmitTest are failing with a `StackoverflowException`. Yet no dump file is created for inspection. Need to figure out why procdump is failing here. </Description>
  </Issue>
  <Issue>
    <IssueID>25487</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tuple equality: remember which temps are never null and optimize lowering further</Title>
    <CreatedDate>15/03/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25487</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
In `RewriteTupleNestedOperators`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>25485</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS2017 crashes when parsing C#  Span code</Title>
    <CreatedDate>15/03/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

namespace ClassLibrary1
{
    public class Class1
    {
        public void Foo(Thing[] first, Thing[] second)
        {
            var x = first[0];
        }
    }

    public struct Thing { }
}


4. On line 7, change the first `Thing[]` to `Span&lt;Thing&gt;[]`

**Expected Behavior**:

error CS0611: Array elements cannot be of type 'Span&lt;Thing&gt;'

**Actual Behavior**:

Entire Visual Studio IDE locks up and eventually crashes.

Exception:


System.InvalidOperationException
  HResult=0x80131509
  Message=Unexpected value 'ArrayAccess expression of System.Span&lt;ClassLibrary1.Thing&gt; type' of type 'System.String'
  Source=Microsoft.CodeAnalysis.CSharp
  StackTrace:
   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(NameSyntax name, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.AddClassifications(SyntaxNode syntax, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNode(SyntaxNode syntax)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.&lt;AddSemanticClassificationsAsync&gt;d__5.MoveNext()
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2017
Version 15.6.2

**Steps to Reproduce**:

1. Create a new Class Library (Classic Desktop) project
2. Add a NuGet package reference to System.Memory (4.5.x pre-release)
3. Modify Class1.cs to contain the following:

``</Description>
  </Issue>
  <Issue>
    <IssueID>25475</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Tuple equality: ExtractMethod on typeless tuple in tuple equality produces bad code</Title>
    <CreatedDate>14/03/2018</CreatedDate>
    <ClosedDate>01/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>25475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The refactoring produces a method returning `object`, which means it's no longer a tuple equality.
Instead the refactoring should not be offered, or a tuple type of `(object, int)` should be inferred, instead of `object`.

It's possible that  (fixed in 15.8) will have improved this scenario already.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>25470</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>25470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove unused variable should not show up above 'add using'.</Title>
    <CreatedDate>14/03/2018</CreatedDate>
    <ClosedDate>08/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

This happens when you type your declaration fully, then hit ctrl-dot to 'add using'.  i.e. your cursor is at the end of the line, not on the tyep that is missing.</Description>
  </Issue>
  <Issue>
    <IssueID>25456</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Simplify Default Expression" produces bad constant pattern.</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
class Program
{
    public static void Main()
    {
        object o = null;
        int i = 1;
        char c = '\0';

        if (o is default(object)) { }
        if (i is default(int)) { }
        if (c is default(char)) { }
    }
}


The IDE offers to simplify things to

 c#
        if (o is default) { }
        if (i is default) { }
        if (c is default) { }


However, that is not correct and causes a compile-time error. `default` cannot be used as a pattern.

The IDE should instead offer to simplify things to

 c#
        if (o is null) { }
        if (i is 0) { }
        if (c is '\0') { }
`</Code>
    <Description>In this code under a recent language version

``

Generally speaking, this fixer should offer `null` as a simplification of `default(T)` when `T` is a reference type or nullable value type, `0m` when `T` is `decimal`, `0` when `T` is another numeric type, `false` if `T` is `bool`, and `'\0'` if T is `char`. That covers all of the situations you can use in a pattern, so it is fine to offer `default` for other types.
</Description>
  </Issue>
  <Issue>
    <IssueID>25453</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>25453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Discussion] Solution size threshold for falling back to persistent storage</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>25453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>25453</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.8.0-beta2-62708-11 

Currently, persistent storage is used only in the case of a solution that is larger than 50MB.

Doing a bit of grepping around, I've come to this conclusion, that was based on Esent being the storage service.



I'm wondering whether the solution threshold should be decreased in the case of SQLite or not via profiling, but I've done some research on the slqite cache size.

&gt; Since the SQLite database file format was designed (in 2003) the default page size for new databases has been 1024 bytes. This was a reasonable choice in 2003. But on modern hardware, a 4096 byte page is a faster and better choice. So, beginning with SQLite version 3.12.0 (2016-03-29)) the default page size for new database files has been increased to 4096 bytes.

&gt; The upper bound on the database cache size has traditionally defaulted to 2000 pages. SQLite version 3.12.0 also changes this default setting to be "-2000" which means 2000*1024 bytes, regardless of page size. So, the upper bound on the amount of memory used for the page cache is unchanged.

That means that, compared to esent's cache of 50MB, we're now using a &lt;2MB cache.

See  and </Description>
  </Issue>
  <Issue>
    <IssueID>25450</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8363: A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern 'var _'.</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25450</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since version 15.6.0 I get hundreds of errors in our projects because &amp;quot;is default&amp;quot; is generating an error: &amp;quot;CS8363	A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern 'var _'.&amp;quot;It looks like a wonderful feature from a previous version is removed. Which was not in the release notes at all!To solve the build-error, we have to go back to the old notation &amp;quot;is default(T)&amp;quot; where T is the specific class. Which is annoying step backwards... Since the compiler knows the type of the object.The most annoying part it that visual studio still will recommend that &amp;quot;is default(T)&amp;quot; can be simplified to &amp;quot;is default&amp;quot;, which will result in the above error...Hopefully the removal of this features will be reconsidered in a coming version. So far, my other colleagues will not upgrade to version 15.6.x._This issue has been moved from VSTS ticketId: 579646__These are the original issue comments:_Michael Johnson on 3/9/2018, 05:15 AM (4 days ago): I have the exact same issue - only started today after installing VS updated 15.6.1Dmitriy Bobrovskiy on 3/11/2018, 08:43 PM (40 hours ago): &lt;p&gt;I have same trouble after updating today on 15.6.1&lt;/p&gt;NJ on 3/13/2018, 05:53 AM (6 hours ago): &lt;p&gt;Would it be possible that the solutions to this issue could be the cause of our problems: &lt;a target='_blank' href=" target="_blank"&gt; seems that the solution mentioned in the issue above has a completely different purpose. Trying to fix a mix up with the default case in a switch statement. I am wondering if the fix to this, might be the cause of the problems I am having.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25447</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Typo: AddRefrenceCountToAndCreateWrapper</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>good first issue</Name>
        <IssueID>25447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>25447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

Replace with AddReferenceCountToAndCreateWrapper</Description>
  </Issue>
  <Issue>
    <IssueID>25445</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Naming: "Stand-alone Code Analysis Tool" should not be hyphenated</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels />
    <Description>The templates delivered with the .NET Compiler Platform SDK includes one for a "Stand-Alone Code Analysis Tool".  Microsoft naming conventions follow the recommendations in the [American Heritage Dictionay]( where "Stand-alone" should not be hyphenated. It should be "Standalone".</Description>
  </Issue>
  <Issue>
    <IssueID>25443</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[VB bugs report] Null member access failed</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Microsoft Visual Studio Community 2017 
Version 15.5.7
VisualStudio.15.Release/15.5.7+27130.2036
Microsoft .NET Framework
Version 4.7.02558

Installed Version: Community

Visual Basic 2017   00369-60000-00001-AA986
Microsoft Visual Basic 2017

Visual C# 2017   00369-60000-00001-AA986
Microsoft Visual C# 2017

Visual C++ 2017   00369-60000-00001-AA986
Microsoft Visual C++ 2017

Visual F# 4.1   00369-60000-00001-AA986
Microsoft Visual F# 4.1

ASP.NET and Web Tools 2017   15.0.31129.0
ASP.NET and Web Tools 2017

ASP.NET Core Razor Language Services   1.0
Provides languages services for ASP.NET Core Razor.

Azure App Service Tools v3.0.0   15.0.31106.0
Azure App Service Tools v3.0.0

Common Azure Tools   1.10
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

Dotfuscator Community Edition   5.32.1.6167-6ce295ebd
PreEmptive Protection - Dotfuscator CE

GitHub.VisualStudio   2.4.1.1219
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

JavaScript Language Service   2.0
JavaScript Language Service

JavaScript Project System   2.0
JavaScript Project System

Microsoft JVM Debugger   1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

Microsoft Visual C++ Wizards   1.0
Microsoft Visual C++ Wizards

Microsoft Visual Studio VC Package   1.0
Microsoft Visual Studio VC Package

Node.js Tools   1.4.11025.7
Adds support for developing and debugging Node.js apps in Visual Studio

NuGet Package Manager   4.5.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit 

TypeScript Tools   15.5.11025.1
TypeScript Tools for Microsoft Visual Studio

Visual Studio Code Debug Adapter Host Package   1.0
Interop layer for hosting Visual Studio Code debug adapters in Visual Studio

**Steps to Reproduce**:

1. Writing code with nullable object for ``For`` iterator:

``

2. The program compile without error but throw out a ``NullReferenceException`` at ``populateNothing()?.data``

![default](


**Expected Behavior**:

``populateNothing()?.data`` should returns ``Nothing`` without any error.

**Actual Behavior**:

``populateNothing()?.data`` throw ``NullReferenceException``</Description>
  </Issue>
  <Issue>
    <IssueID>25439</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>25439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>25439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move to dotnet pack</Title>
    <CreatedDate>13/03/2018</CreatedDate>
    <ClosedDate>05/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25439</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Presently our build infrastructure uses `nuget pack` to create our NuGet packages. This means we can only build our packages on Windows. Need to move to using `dotnet pack` for package creation.</Description>
  </Issue>
  <Issue>
    <IssueID>25436</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unknown checkbox in change signature settings</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>06/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>25436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>what is this checkbox for? (at change signature settings) version 15.6.1

![capture](</Description>
  </Issue>
  <Issue>
    <IssueID>25433</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove SHA stamps from generated compiler files</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25433</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>25429</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>UseAutoProperty generates invalid code when using ref on the field</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>06/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Class
{
    int value;
    int Value
    {
        get { return value; }
    }

    void M()
    {
        ref int x = ref value;
    }
}


applying the code fix results in:
c#
class Class
{
    int Value { get; set; }
    
    void M()
    {
        ref int x = ref Value;
    }
}
`</Code>
    <Description>``
which doesn't compile because Value doesn't return by ref.</Description>
  </Issue>
  <Issue>
    <IssueID>25427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MEF composition failure around AbstractGenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>12/03/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
2.8.0-beta2-62708-11

**Steps to Reproduce**:
VSMac updated to Roslyn 2.8.0-beta2-62708-11 and our MEF composition fails with:

``

This is because this abstract class shouldn't export itself?



**Expected Behavior**:
No errors in VSMEF

**Actual Behavior**:
As above
</Description>
  </Issue>
  <Issue>
    <IssueID>25424</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn is producing a strong-name signed dll even when DelaySign is set to true</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>16/03/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 2.8.0-beta2-62711-03

**Steps to Reproduce**:

We are trying to get the latest version of Roslyn consumed by corefx so that we can start using the compiler server for non-Windows builds. The problem seems to be that after updating to the latest version, we can't force the compiler to NOT strong-name sign the assemblies. In corefx we need this since we run some post-compilation tools on the dll and we manually sign the binaries after that. Here are the parameters we are passing in to the CSC task:

![image](

**Expected Behavior**: output assembly shouldn't be strong-name signed

**Actual Behavior**: assembly is strong name signed causing a build error when we try to sign it manually after running our tools.

This is currently blocking the adoption of roslyn into corefx so it would be appreciated if addressed soon. cc: @agocke @jaredpar 
</Description>
  </Issue>
  <Issue>
    <IssueID>25421</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler warning for not awaited call is not showing inside for each statement</Title>
    <CreatedDate>12/03/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>25421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs

using System.Collections.Generic;
using System.Threading.Tasks;

class C
{
    private void M(List&lt;Product&gt; products)
    {
        foreach (IProduct p in products){
            p.doSomethingAsync(); //this call should be awaited
        }
    }
   
}

public interface IProduct
{
    Task doSomethingAsync();
}

class Product : IProduct {
    public async Task doSomethingAsync() =&gt; await Task.Delay(0);
}
`</Code>
    <Description>**Version Used**: 

visual studio 2017 - .net 4.7 ( haven't checked net core but guessing similar issue?)
C#

**Steps to Reproduce**:

1.  create a sample class with a simple method with a for each loop, void or not returning task.
2.  inside the for each loop actually call an async method without awaiting it (hided by interface)
3.  the code runs without showing any compiler warning of the kind (

``
**Expected Behavior**:
would expect some compiler warning for non-awaited calls inside for each.

**Actual Behavior**:
does not display any compiler warning, and spotting after refactoring code can be tricky.
</Description>
  </Issue>
  <Issue>
    <IssueID>25410</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`await` parsed as a keyword in a non-async lambda within an async method</Title>
    <CreatedDate>11/03/2018</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>25410</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;

class C
{
    async void M()
    {
        Action a = () =&gt;
        {
            await x;
        };
    }
}
`</Code>
    <Description>Version used: Visual Studio 15.6.1.

``

`await x` is parsed as an AwaitExpression even though the lambda itself is not `async`. If I replace the lambda with a non-async anonymous method or local function, it is parsed as a variable declaration instead.

Am I correct thinking that this is a bug in the parser?</Description>
  </Issue>
  <Issue>
    <IssueID>25406</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ImplementInterface adds the 'new' keyword to members that don't actually hide other members</Title>
    <CreatedDate>11/03/2018</CreatedDate>
    <ClosedDate>17/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2017
Version 15.5.6
VisualStudio.15.Release/15.5.6+27130.2027
Microsoft .NET Framework
Version 4.7.02556

**Steps to Reproduce**:

1. Write the following code to a file inside a C# project:
``

**Expected Behavior**:
No 'new' keywords, since no members are actually hidden by the implementation.

**Actual Behavior**:
'new' keywords are added to the implementation.</Description>
  </Issue>
  <Issue>
    <IssueID>25405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add support for .editorconfig and Visual Studio "Enable full solution analysis"</Title>
    <CreatedDate>11/03/2018</CreatedDate>
    <ClosedDate>11/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio 2017 v15.6.1

**Steps to Reproduce**:

1. Create .editorconfig file with the [.NET coding conventions]( configured within it.
2. Enable `Options\Text Editor\C#\Advanced\Enable full solution analysis`

**Expected Behaviour**:

VS will run all code convention rules, on all files in the solution, whether they are open or not.
This is the behaviour when using the Visual Studio Code Style rules configured directly in the options dialog.

**Actual Behaviour**:

The rules only get applied to the currently open file(s).

Could we add support for and respect this option?

I originally posted this on the [editorconfig]( board. I hope this is the correct place for this item?
</Description>
  </Issue>
  <Issue>
    <IssueID>25401</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: IDE0032 "Use auto property" should consider accessibility of setters/getters.</Title>
    <CreatedDate>11/03/2018</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25401</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio Community 2017 v15.5.6

**Steps to Reproduce**:

Paste the following code into a VB project:

``

However, **the above code is not equivalent to the initial code** which had the setter using `Protected` accessibility. Even the [docs]( say you can't use auto properties if you want different accessibility levels for the getter/setter.

**Expected Behavior**:

The "use auto property" suggestion should only be offered when the original code uses getters/setters with the same accessibility level.

PS: I've looked really hard around the IDE and there is no obvious way to disable these auto-fixes in cases where they are either broken or disagree with one's coding style. Is there a way to do it?</Description>
  </Issue>
  <Issue>
    <IssueID>25400</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>25400</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for "recursive patterns"</Title>
    <CreatedDate>10/03/2018</CreatedDate>
    <ClosedDate>09/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25400</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>25400</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a place to collect notes and ideas for validating the recursive patterns feature.

- [ ] EnC</Description>
  </Issue>
  <Issue>
    <IssueID>25399</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>partial methods shouldn't be allowed to have different ref-kinds</Title>
    <CreatedDate>10/03/2018</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25399</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25399</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
partial class C {
    partial void M(in int i);
    partial void M(ref int i) {}  
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:
``
**Expected Behavior**: Error: ref-kind doesn't match

` CS0759: No defining declaration found for implementing declaration of partial method `

**Actual Behavior**: No error


/cc @OmarTawfik </Description>
  </Issue>
  <Issue>
    <IssueID>25398</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>25398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash when awaiting a task of ref struct</Title>
    <CreatedDate>10/03/2018</CreatedDate>
    <ClosedDate>31/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25398</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi Roslyn team,

I'm attempting to make use of the new ref struct modifier in VS 15.6.1, and am getting hard crashes when attempting to do so.  I have verified the same behavior in VS 15.6.1 Preview 1 as well.

I believe that the issue is similar to (and collocated with) the following issue: #24776 

Could somebody take a look into a possible fix?
Thanks!

---------
Here is a capture from Event Log (apologies for the formatting):

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: Unexpected value 'AwaitExpression expression of Jabberwocky.Core.Utils.LockingUtil.LockObject type' of type 'System.String'
   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckInvocationArgMixing(SyntaxNode syntax, Symbol symbol, BoundExpression receiverOpt, ImmutableArray'1 parameters, ImmutableArray'1 argsOpt, ImmutableArray'1 argRefKindsOpt, ImmutableArray'1 argsToParamsOpt, UInt32 scopeOfTheContainingExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued(SyntaxNode node, SyntaxNode expression, String methodName, OverloadResolutionResult'1 result, AnalyzedArguments analyzedArguments, MethodGroup methodGroup, NamedTypeSymbol delegateTypeOpt, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLambdaExpressionAsBlock(ExpressionSyntax body, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.PlainUnboundLambdaState.BindLambdaBody(LambdaSymbol lambdaSymbol, Binder lambdaBodyBinder, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.ReallyBind(NamedTypeSymbol delegateType)
   at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.Bind(NamedTypeSymbol delegateType)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithDelegate(UnboundLambda anonymousFunction, TypeSymbol type)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithType(UnboundLambda anonymousFunction, TypeSymbol type)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.HasAnonymousFunctionConversion(BoundExpression source, TypeSymbol destination)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.CheckArgumentForApplicability(Symbol candidate, BoundExpression argument, RefKind argRefKind, TypeSymbol parameterType, RefKind parRefKind, Boolean ignoreOpenTypes, HashSet'1&amp; useSiteDiagnostics, Boolean forExtensionMethodThisArg)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable(Symbol candidate, EffectiveParameters parameters, AnalyzedArguments arguments, ImmutableArray'1 argsToParameters, Boolean isVararg, Boolean hasAnyRefOmittedArgument, Boolean ignoreOpenTypes, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder'1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray'1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder'1 results, ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary'2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet'1&amp; useSiteDiagnostics, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[TMember](ArrayBuilder'1 results, ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.MethodOrPropertyOverloadResolution[TMember](ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, OverloadResolutionResult'1 result, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveDefaultMethodGroup(BoundMethodGroup node, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(BoundMethodGroup methodGroup, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(BoundMethodGroup node, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(DiagnosticBag diagnostics, ExpressionSyntax argumentExpression, RefKind refKind, Boolean allowArglist)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics, ArgumentSyntax argumentSyntax, Boolean allowArglist, RefKind refKind)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean&amp; hadError, Boolean&amp; hadLangVersionError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLambdaExpressionAsBlock(ExpressionSyntax body, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.PlainUnboundLambdaState.BindLambdaBody(LambdaSymbol lambdaSymbol, Binder lambdaBodyBinder, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.ReallyBind(NamedTypeSymbol delegateType)
   at Microsoft.CodeAnalysis.CSharp.UnboundLambdaState.Bind(NamedTypeSymbol delegateType)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithDelegate(UnboundLambda anonymousFunction, TypeSymbol type)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.IsAnonymousFunctionCompatibleWithType(UnboundLambda anonymousFunction, TypeSymbol type)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.HasAnonymousFunctionConversion(BoundExpression source, TypeSymbol destination)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.CheckArgumentForApplicability(Symbol candidate, BoundExpression argument, RefKind argRefKind, TypeSymbol parameterType, RefKind parRefKind, Boolean ignoreOpenTypes, HashSet'1&amp; useSiteDiagnostics, Boolean forExtensionMethodThisArg)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable(Symbol candidate, EffectiveParameters parameters, AnalyzedArguments arguments, ImmutableArray'1 argsToParameters, Boolean isVararg, Boolean hasAnyRefOmittedArgument, Boolean ignoreOpenTypes, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsApplicable[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder'1 typeArgumentsBuilder, AnalyzedArguments arguments, EffectiveParameters originalEffectiveParameters, EffectiveParameters constructedEffectiveParameters, ImmutableArray'1 argsToParamsMap, Boolean hasAnyRefOmittedArgument, Boolean inferWithDynamic, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.IsMemberApplicableInNormalForm[TMember](TMember member, TMember leastOverriddenMember, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Boolean inferWithDynamic, Boolean completeResults, HashSet'1&amp; useSiteDiagnostics)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.AddMemberToCandidateSet[TMember](TMember member, ArrayBuilder'1 results, ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, Dictionary'2 containingTypeMapOpt, Boolean inferWithDynamic, HashSet'1&amp; useSiteDiagnostics, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.PerformMemberOverloadResolution[TMember](ArrayBuilder'1 results, ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, Boolean completeResults, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.OverloadResolution.MethodOrPropertyOverloadResolution[TMember](ArrayBuilder'1 members, ArrayBuilder'1 typeArguments, AnalyzedArguments arguments, OverloadResolutionResult'1 result, Boolean isMethodGroupConversion, Boolean allowRefOmittedArguments, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveDefaultMethodGroup(BoundMethodGroup node, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroupInternal(BoundMethodGroup methodGroup, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.ResolveMethodGroup(BoundMethodGroup node, SyntaxNode expression, String methodName, AnalyzedArguments analyzedArguments, Boolean isMethodGroupConversion, HashSet'1&amp; useSiteDiagnostics, Boolean inferWithDynamic, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor'2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor'2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor'2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor'2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor'2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate'1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForMethodBodiesInTree(SyntaxTree tree, Nullable'1 span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable'1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable'1 span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents(AnalysisScope analysisScope, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GenerateCompilationEventsAndPopulateEventsCacheAsync&gt;d__58.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsAsync&gt;d__57.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action'1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsAsync&gt;d__57.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;ComputeAnalyzerDiagnosticsAsync&gt;d__57.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+&lt;GetAnalyzerDriverAsync&gt;d__62.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Threading.Tasks.UnwrapPromise'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)
   at System.Threading.Tasks.UnwrapPromise'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)
   at System.Threading.Tasks.UnwrapPromise'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;&gt;c__DisplayClass38_0+&lt;&lt;Initialize&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+&lt;GetAnalyzerActionsAsync&gt;d__87.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetAnalyzerActionsAsync&gt;d__10.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetSessionAnalysisScopeAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder'1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+&lt;GetSessionAnalysisScopeCoreAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.FinishContinuations()
   at System.Threading.Tasks.Task.FinishStageThree()
   at System.Threading.Tasks.Task.FinishStageTwo()
   at System.Threading.Tasks.Task.Finish(Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
</Description>
  </Issue>
  <Issue>
    <IssueID>25379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0032 should not be reported for volatile fields</Title>
    <CreatedDate>09/03/2018</CreatedDate>
    <ClosedDate>06/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Class1
{
    private volatile int _field1;

    public int Property1
    {
        get { return this._field1; }
        set { this._field1 = value; }
    }

    public int Property2 { get; set; }
}
`</Code>
    <Description>**Version Used**: Visual Studio Community 15.6.1

**Steps to Reproduce**:
Here is the example code.

``

`Property1` is a wrapper for `_field1`, which has `volatile` modifier. `Property2` is a normal auto property, which is written for comparison.

Visual Studio says `_field1` can be an auto property.

![Screenshot of Code Action](

**Expected Behavior**: This suggestion should not be shown because the field has `volatile` modifier.

The way to access to volatile fields is different from the way to access to normal fields. Access to volatile fields needs `volatile.` prefix in IL. So the field cannot be an auto property in the present case.</Description>
  </Issue>
  <Issue>
    <IssueID>25375</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>25375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Warning reported for `null` passed to `params` array of nullable elements</Title>
    <CreatedDate>09/03/2018</CreatedDate>
    <ClosedDate>20/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reports: `(8,15): warning CS8600: Cannot convert null to non-nullable reference.`
``</Description>
  </Issue>
  <Issue>
    <IssueID>25357</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Referencing the latest compiler from MyGet returns in failure due to error in props file.</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels />
    <Code>csproj
&lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.NETCore.Compilers" Version="2.8.0-beta1-62621-05" PrivateAssets="All" /&gt;
&lt;/ItemGroup&gt;


**Expected Behavior**:
`dotnet run` behaves exactly as it did without the PackageReference and outputs:
Hello World!

**Actual Behavior**:
We get a build failure.
text
C:\Users\ahkha\.nuget\packages\microsoft.netcore.compilers\2.8.0-beta1-62621-05\build\Microsoft.NETCore.Compilers.props(34,11): error MSB4101: Expected a closing quote after position 153 in condition "'$(BuildingProject)' == 'true' AND                      '$(OS)' != 'Windows_NT' AND                      ('$(CscToolPath)' != '' OR '$(VbcToolPath) != '')". [D:\GitHub\Fork\corefxlab\TestCompiler\TestCompiler.csproj]

The build failed. Please fix the build errors and run again.


In the Microsoft.NETCore.Compilers.props file (`C:\Users\&lt;user&gt;\.nuget\packages\microsoft.netcore.compilers\2.8.0-beta1-62621-05\build\Microsoft.NETCore.Compilers.props`), you will notice, we are missing a closing quote around `VbcToolPath`:
**This:**
csproj
  &lt;Target Name="MakeCompilerScriptsExecutable"
          Condition="'$(BuildingProject)' == 'true' AND
                     '$(OS)' != 'Windows_NT' AND
                     ('$(CscToolPath)' != '' OR '$(VbcToolPath) != '')"

**Should be:**
csproj
  &lt;Target Name="MakeCompilerScriptsExecutable"
          Condition="'$(BuildingProject)' == 'true' AND
                     '$(OS)' != 'Windows_NT' AND
                     ('$(CscToolPath)' != '' OR '$(VbcToolPath)' != '')"
`</Code>
    <Description>**Version Used**:  2.8.0 and 2.8.0-beta1-62621-05 (from MyGet)

**Steps to Reproduce**:

1. Create a new dotnet core application (`dotnet new console`).
2. Confirm that it runs as expected (`dotnet run`).
3. Add a pacakge reference to the latest Microsoft.NetCore.Compilers.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>25356</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No completion after dot inside async lambda</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>28/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25356</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25356</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25356</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
app.Run(async (context) =&gt;
            {
                context.Items.&lt;There is not anything appear!!&gt;
                await context.Response.WriteAsync("Hello World!");
            });
but when you writer this:
app.Run(async (context) =&gt;
            {
                context.Items.&lt;Add a semicolon at the end of the line beforehand,and it would be ok&gt;;
                await context.Response.WriteAsync("Hello World!");
            });
`</Code>
    <Description>Copied from 
C# extension for VS Code just uses CompletionService API, so porting this to Roslyn.

Use dotnet's "Web" template to write code in "Startup.cs" in the following cases: 

``</Description>
  </Issue>
  <Issue>
    <IssueID>25355</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Regression in BinaryFormatter's serialization of lambdas in very particular circumstances from VS 2017 v15.4 to VS 2017 v15.5</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>09/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace ConsoleApplicationVS2017
{
    public static class Serialization
    {
        public static byte[] Serialize(Func&lt;int&gt; o)
        {
            var binaryFormatter = new BinaryFormatter();
            using (var stream = new MemoryStream())
            {
                binaryFormatter.Serialize(stream, o);
                return stream.ToArray();
            }
        }
    }

    [Serializable]
    public class Class1
    {
        private int Property { get; set; }

        public void Run()
        {
            Serialization.Serialize(() =&gt; Property + 5);

            var localVariable = Property;
            Func&lt;int, int&gt; func2 = o =&gt; localVariable + o;
        }
    }

    public static class Program
    {
        public static void Main()
        {
            new Class1().Run();
        }
    }
}

2. Run this application.

**Expected Behavior**:
Program executes successfully

**Actual Behavior**:
Program throws an exception:

Unhandled Exception: System.Runtime.Serialization.SerializationException: Type 'ConsoleApplicationVS2017.Class1+&lt;&gt;c__DisplayClass4_0' in Assembly 'ConsoleAppVS2017, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' is not marked as serializable.
   at System.Runtime.Serialization.FormatterServices.InternalGetSerializableMembers(RuntimeType type)
   at System.Runtime.Serialization.FormatterServices.&lt;&gt;c__DisplayClass9_0.&lt;GetSerializableMembers&gt;b__0(MemberHolder _)
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at System.Runtime.Serialization.FormatterServices.GetSerializableMembers(Type type, StreamingContext context)
   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitMemberInfo()
   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder)
   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo)
   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, Header[] inHeaders, __BinaryWriter serWriter, Boolean fCheck)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Header[] headers, Boolean fCheck)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)

   at ConsoleApplicationVS2017.Serialization.Serialize(Func`1 o) in e:\source\scratch\ConsoleAppVS2017\ConsoleAppVS2017\Program.cs:line 14
   at ConsoleApplicationVS2017.Class1.Run() in e:\source\scratch\ConsoleAppVS2017\ConsoleAppVS2017\Program.cs:line 27
   at ConsoleApplicationVS2017.Program.Main() in e:\source\scratch\ConsoleAppVS2017\ConsoleAppVS2017\Program.cs:line 38


I'm pretty sure this did not happen with Visual Studio 2017 v15.4. I haven't double-checked this, but I did run this exact repro against Visual Studio 2015, which definitely does produce code that runs successfully. For good measure, I looked at the IL generated by the different versions of the compiler in .NET Reflector.

Here's the IL generated by Visual Studio 2015 which works:

[CompilerGenerated]
private sealed class &lt;&gt;c__DisplayClass4_0
{
    public int localVariable;

    internal int &lt;Run&gt;b__1(int o) =&gt; 
        (this.localVariable + o);
}


and `Class1` has a member

[CompilerGenerated]
private int &lt;Run&gt;b__4_0() =&gt; 
    (this.Property + 5);


Here's the IL generated by Visual Studio 2017 which doesn't work:

[CompilerGenerated]
private sealed class &lt;&gt;c__DisplayClass4_0
{
    public Class1 &lt;&gt;4__this;
    public int localVariable;

    internal int &lt;Run&gt;b__0() =&gt; 
        (this.&lt;&gt;4__this.Property + 5);

    internal int &lt;Run&gt;b__1(int o) =&gt; 
        (this.localVariable + o);
}
`</Code>
    <Description>**Version Used**: Visual Studio 2017 v15.5.7

**Steps to Reproduce**:

1. In Visual Studio 2017 v15.5.7, create a new C# Console Application, and make Program.cs look like:
``

As far as I can describe, it, the problem happens when we try to serialize a lambda that has an implicit reference to `this`, from inside of a function that also has a lambda (that is never explicitly serialized!) that has a reference to a local variable. If any of these things are changed (the first lambda doesn’t have the implicit reference, the second non-serialized lambda is in a different function, the second non-serialized lambda doesn’t reference a local variable), the function serializes.</Description>
  </Issue>
  <Issue>
    <IssueID>25353</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Property set member using reference</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>10/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>25353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25353</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.8.0.62701

**Steps to Reproduce**:

1. define a member variable
2. create a property that sets the value i.e. the member via it's reference (such as in Reactive UI)
3. set the Property in the constructor

**Expected Behavior**:
No warning is being displayed.
**Actual Behavior**:
A null warning is displayed for the member variable.</Description>
  </Issue>
  <Issue>
    <IssueID>25350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ref struct locals are allowed in iterators</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>03/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>25350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We seem to allow ref struct locals in iterators as long as they are not captured.

That is safe, but relies on implementation details. The spec says that ref struct locals in iterators are strictly forbidden.
</Description>
  </Issue>
  <Issue>
    <IssueID>25349</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MSBuild skips a 'copy local' reference if it is only used in XAML</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>04/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25349</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
&lt;UserControl x:Class="DatabaseSelection"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             mc:Ignorable="d" 
             d:DesignHeight="114" d:DesignWidth="450"&gt;

    &lt;fa:ImageAwesome Icon="UserSecret" Margin="1" /&gt;
&lt;/UserControl&gt;


5. in project A, use the user control somewhere.
6. compile the solution. This will work.
7. debug or run the solution. This fails.

**Expected Behavior**:
In step 6, MSBuild should recognize that FontAwesome.WPF must be copied to project **A**'s output directory.

**Actual Behavior**:
MSBuild incorrectly believes that FontAwesome.WPF isn't actually being used and thus doesn't need copying. As a result, when actually trying to *run* the code, `PresentationFramework` tries and fails to load the library:


System.Windows.Markup.XamlParseException: 'Could not load file or assembly 'FontAwesome.WPF, PublicKeyToken=0758b07a11a4f466' or one of its dependencies. The system cannot find the file specified.'


**Workaround**:
A dummy method somewhere within project **B** causes MSBuild to copy the library. For example:

csharp
    private static void _FontAwesome_MSBuildXamlFix()
    {
        /*
         * WORKAROUND
         * we need this method so that FontAwesome.WPF.dll gets copied as part of the build process
         * 
         * https://stackoverflow.com/a/18221455/1600
         */

        var type = typeof(FontAwesome.WPF.FontAwesome);
        Console.WriteLine(type.FullName);
    }
`</Code>
    <Description>**Version Used**: 15.6.0

**Steps to Reproduce**:

1. create a solution with a WPF Windows application project (project **A**)
2. add a WPF class library project (project **B**). Add a project reference so you can use B within A.
3. in project B, reference a library that you will only use from within XAML, such as FontAwesome.WPF in our example. Make sure the library is set to **Copy Local**.
4. in project B, create a user control like this:

``</Description>
  </Issue>
  <Issue>
    <IssueID>25348</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Anonymous type display mismatch for nullable vs non-nullable</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25348</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
static void Main(string[] args)
{
    var foo = new { obj = new A() };
}
public class A {
    public string Name { get; set; }
}
`</Code>
    <Description>Non type display has mismatches for anon-types. Regardless of how we want them to infer or work, the display is an issue either way. Minimal repro:

``
Here's a view of the tooltips for this case:
![image](
![image](

It's unclear if `obj` is being inferred as nullable or not (separate bug), but in either case the tooltip has an inconsistency issue.

cc @cston </Description>
  </Issue>
  <Issue>
    <IssueID>25347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`out var` treated as non-nullable</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>26/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    static void TryGet(out string? s)
    {
        s = null;
    }
    static void Main()
    {
        TryGet(out var s); // string with null assignment warning
        int n = s.Length;  // no warning
    }
}
`</Code>
    <Description>`out var` is treated as non-nullable, regardless of parameter declaration.
``</Description>
  </Issue>
  <Issue>
    <IssueID>25346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Null warning not reported for non-nullable parameter with null default value</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    static void F(object o = null)
    {
    }
}
`</Code>
    <Description>Warning should be reported for `= null`.
``</Description>
  </Issue>
  <Issue>
    <IssueID>25343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make IAddImportsService public?</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The need for adding using directives comes up every now and then in code fixes.</Description>
  </Issue>
  <Issue>
    <IssueID>25340</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>25340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Strong Name signing with a key installed in a container</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>16/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25340</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After upgrading to respectively installing Visual Studio 2017 Version 15.6 no assemblies will be signed with a strong name.We are using the AssemblyKeyName Attribute in AssemblyInfo.cs.Using a KeyFile instead (created from the projects properties) will work.Am I missing something?_This issue has been moved from VSTS ticketId: 578075__These are the original issue comments:_Matthew Dodds on 3/7/2018, 10:24 AM (12 hours ago): &lt;p&gt;I am also having this problem with using AssemblyKeyName, which is showing up as two different issues. I am using C#, ASP.NET, .NET 4.7.1. Both of these issues were fixed once I reverted to Visual Studio 15.5.7. I also confirmed that using AssemblyKeyFile referencing a .snk instead of using AssemblyKeyName fixed both issues.&lt;/p&gt;&lt;p&gt;First: &lt;/p&gt;&lt;p&gt;Attempting to load the program in IIS results in the exception: "Could not load file or assembly '[redacted], Culture=neutral, PublicKeyToken=928c297f0d8e5e72' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference." &lt;/p&gt;&lt;p&gt;Fusion log contained: "Comparing the assembly name resulted in the mismatch: PUBLIC KEY TOKEN" &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Second:&lt;/p&gt;&lt;p&gt;Building of a solution that references some of our C# libraries built outside of the solution will result in: "Error CS8002: Referenced assembly '[redacted], Version=6.3.0.144, Culture=neutral, PublicKeyToken=null' does not have a strong name." &lt;/p&gt;&lt;p&gt;Building this solution a second time will result it successfully building, but will always fail if telling Visual Studio to rebuild. &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25337</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect 'default expression can be simplified' in switch case</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25337</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
switch (true)
{
    case default(bool):
        break;
}
`</Code>
    <Description>``
`(bool)` is greyed out with an offered fix to simplify. Applying the fix results in an error (CS8313 A default literal 'default' is not valid as a case constant.)</Description>
  </Issue>
  <Issue>
    <IssueID>25336</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing completion for 'else' after nested if with else</Title>
    <CreatedDate>08/03/2018</CreatedDate>
    <ClosedDate>17/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25336</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25336</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
if (true)
    if (true)
        Console.WriteLine();
    else
        Console.WriteLine();
$$ // 'else' is not in the completion list
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>25323</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>25323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: Smart indent issue with argument lists</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.7.0 Preview 1.0 [27506.1.d15.7]

The here is that VB smart indent for argument lists is *always* based on the position of the first argument, regardless of where other arguments are positioned.

**Steps to Reproduce**:

1. Create Visual Basic Console App project
2. Add the following line of code to `Main()`:

``

Note that this happens for every single argument after the first one. If the user wants a different indentation level, the IDE fights them by trying to force every argument to align with the first argument.</Description>
  </Issue>
  <Issue>
    <IssueID>25315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormat failure</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>31/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>25315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormat` failed in the signed build,  Unfortunately test results for this test seem to be missing (though the failure is in the console output and failed the build), so I don't have a stack trace. Possibly related to </Description>
  </Issue>
  <Issue>
    <IssueID>25313</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Possible stack overflow in IntegrationHelper</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>17/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Use of an incorrect variable on the following line can produce a stack overflow at runtime:

</Description>
  </Issue>
  <Issue>
    <IssueID>25310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompilation is producing invalid C#</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Single` and choose **Go to Definition**

``

5. Click member down drop

**Expected:** Every single member of Assert to be listed (&gt; 100)
**Actual:** Only the following are listed:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>25305</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GenerateMethod doesn't recognize tuple output</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>25305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Start with two locals `x` and `y`, then type `(x, y) = NewMethod(x, y);` and invoke `GenerateMethod`.
The return type of the generated method is `object`.</Description>
  </Issue>
  <Issue>
    <IssueID>25304</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unlike interfaces, "Go To Implemention" on an abstract base class doesn't go direct to implementation</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> C#

    abstract class Base
    {

    }

    interface IBase
    {

    }

    abstract class Derived : Base, IBase
    {

    }


**Expected:** To go straight to the only implementation; `Derived`
**Actual:**

Find Results window opens with two results:


Code	File	Line	Column	Project
abstract class Derived : Base	c:\users\davkean\Source\Repos\ConsoleApp192\ConsoleApp192\Program.cs	29	20	ConsoleApp192
abstract class Base	c:\users\davkean\Source\Repos\ConsoleApp192\ConsoleApp192\Program.cs	24	20	ConsoleApp192
`</Code>
    <Description>_From @davkean on March 7, 2018 5:26_1. Right-click on IBase and choose **Go To Implementation**

-- Notice that you go straight to the only implementation; `Derived`

2. Right-click on Base and choose **Go To Implementation**


``_Copied from original issue: dotnet/project-system#3355_</Description>
  </Issue>
  <Issue>
    <IssueID>25302</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompilation inconsistently uses keywords in decompiled code</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>18/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>25302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create Console App (.NET Framework)
2. Create Console App (.NET Core)
3. In the following code, CTRL+Click `int` in both projects

``

</Description>
  </Issue>
  <Issue>
    <IssueID>25300</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompiler doesn't handle malformed XML</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>25298</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Tool to generate a hyperlinked grammar.</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@ljw1004 wrote a while back a version Hyperlinked implementation of the [vb and c grammar](
We should include a version in the respective repositories. It would make exploring the grammar little easier.
Even better if there was a tool to generate them from the `syntax.xml` and `bound.xml`.</Description>
  </Issue>
  <Issue>
    <IssueID>25295</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tuple equality: relax requirement for ValueTuple type</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>25295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void TestWithoutValueTuple()
        {
            var source = @"
class C
{
    static bool M()
    {
        return (1, 2) == (3, 4);
    }
}";
            var comp = CreateCompilationWithMscorlib40(source);

            comp.VerifyDiagnostics(
                // (6,16): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(1, 2)").WithArguments("System.ValueTuple`2").WithLocation(6, 16),
                // (6,26): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(3, 4)").WithArguments("System.ValueTuple`2").WithLocation(6, 26),
                // (6,16): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(1, 2)").WithArguments("System.ValueTuple`2").WithLocation(6, 16),
                // (6,26): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
                //         return (1, 2) == (3, 4);
                Diagnostic(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, "(3, 4)").WithArguments("System.ValueTuple`2").WithLocation(6, 26)
                );
        }
`</Code>
    <Description>I don't think that will be very easy to do, but it'd be nice if we could.

``</Description>
  </Issue>
  <Issue>
    <IssueID>25294</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to use re-throw in expression form</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>25294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Throw Expression</Name>
        <IssueID>25294</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Expected:
No error, an exception should be re-thrown as appropriate.
I didn't check whether the current behavior is according to the specification of the "Throw Expression" feature, however it feels to me that it would be good if the code would just work.
 </Description>
  </Issue>
  <Issue>
    <IssueID>25293</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Annoying completion when adding pattern conditional in front of expression</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When inserting some code into an existing expression, I find it common to get an annoying completion when trying to type `null`.
For example, if you want to make a declaration into a conditional (from `var x = z;` to `var x = something is null ? y : z;`), `null` is not offered.

![image](

Tagging @Neme12 who is fixing some other completion issues with patterns.</Description>
  </Issue>
  <Issue>
    <IssueID>25292</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Introduce Local: trigger the refactoring with a cursor position but no selection</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>15/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, you have to select the whole expression that you want to introduce a local for. For example, `[|x.Field.Method()|]`.
But I think in most cases, if not all, it should be possible to trigger from just a cursor position, such as `x.Field.Meth$$od()`.</Description>
  </Issue>
  <Issue>
    <IssueID>25287</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisualBasicCompletionCommandHandlerTests_Projections.TestInObjectCreationExpression failed in CI</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>01/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>25287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>25287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.InvalidOperationException: Should have been disposed!
DataSource-StackTrace:
   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1..ctor(IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
   at Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1..ctor(IAsynchronousOperationListener asyncListener, IForegroundNotificationService notificationService)
   at Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.AbstractDiagnosticsTaggerProvider`1..ctor(IDiagnosticService diagnosticService, IForegroundNotificationService notificationService, IAsynchronousOperationListener listener)
   at Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.AbstractDiagnosticsAdornmentTaggerProvider`1..ctor(IDiagnosticService diagnosticService, IForegroundNotificationService notificationService, IAsynchronousOperationListenerProvider listenerProvider)
   at Microsoft.CodeAnalysis.Editor.Implementation.Diagnostics.DiagnosticsSuggestionTaggerProvider..ctor(IDiagnosticService diagnosticService, IForegroundNotificationService notificationService, IAsynchronousOperationListenerProvider listenerProvider)
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.RuntimePartLifecycleTracker.CreateValue()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.Create()
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveNext(PartLifecycleState nextState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.MoveToState(PartLifecycleState requiredState)
   at Microsoft.VisualStudio.Composition.ExportProvider.PartLifecycleTracker.GetValueReadyToExpose()
   at Microsoft.VisualStudio.Composition.RuntimeExportProviderFactory.RuntimeExportProvider.&lt;&gt;c__DisplayClass15_0.&lt;GetExportedValueHelper&gt;b__0()
   at Microsoft.VisualStudio.Composition.DelegateServices.&lt;&gt;c__DisplayClass2_0`1.&lt;As&gt;b__0()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.GatherTaggers(ITextBuffer textBuffer)
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.&lt;Initialize&gt;b__13_0(ITextBuffer buffer)
   at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.GetTextBuffers(Predicate`1 match)
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.Initialize()
   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.EnsureInitialized()
   at Microsoft.VisualStudio.Utilities.JoinableTaskHelper.&lt;&gt;c__DisplayClass4_0.&lt;&lt;RunOnUIThread&gt;b__0&gt;d.MoveNext()
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()
   at Xunit.Sdk.AsyncTestSyncContext.&lt;&gt;c__DisplayClass7_0.&lt;Post&gt;b__0()
   at Xunit.Sdk.XunitWorkerThread.&lt;&gt;c.&lt;QueueUserWorkItem&gt;b__4_0(Object _)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>25286</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csc failed in CI with exist code 255 and -1073741819</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels />
    <Code>
15:53:23 D:\j\workspace\windows_debug---d977f134\Binaries\Bootstrap\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.exe" exited with code 255. [D:\j\workspace\windows_debug---d977f134\src\Tools\Source\CompilerGeneratorTools\Source\BoundTreeGenerator\CompilersBoundTreeGenerator.csproj]
15:53:27 D:\j\workspace\windows_debug---d977f134\Binaries\Bootstrap\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.exe" exited with code -1073741819. [D:\j\workspace\windows_debug---d977f134\src\Compilers\Core\Portable\CodeAnalysis.csproj]
15:53:37 D:\j\workspace\windows_debug---d977f134\Binaries\Bootstrap\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.exe" exited with code -1073741819. [D:\j\workspace\windows_debug---d977f134\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\CSharpSyntaxGenerator.csproj]
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>25285</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ubuntu_16_mono_debug_prtest  in CI</Title>
    <CreatedDate>07/03/2018</CreatedDate>
    <ClosedDate>19/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25285</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>25283</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Completion should probably preselect shorter names</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>24/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Create a new console app. Inside Main method, type `C`.
Expected behavior: Preferrably I get `Console`, but at the very least I would expect something a little less specific than this:
![image](

Type `Co`. Expected behavior: I get `Console`. Actual competion: `Comparer&lt;&gt;`

What if completion preselected the shortest item as opposed to the first one by alphabet order?</Description>
  </Issue>
  <Issue>
    <IssueID>25279</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Debugging scenario: Breakpoints and EnC in WPF application</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>25279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>25279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a C# WPF Application(.NET framework 4.6.1).

2. Set breakpoint in MainWindow.xaml.cs (line 25).

![image](

3. F5 and Start debugging.

4. Add breakpoint on the next line 26 (F9 or use mouse to click).

5. Step (F10).

6. Active statement is now on closing `}`. Insert a new line with `int x = 1;` in front of `}`. 

7. Move active statement (current IP) to the new line.

8. Step (F10).

**Expected**

The new code is executed and the value of local `x` is `1`.
</Description>
  </Issue>
  <Issue>
    <IssueID>25268</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler generated selectors for Linq queries in C# use regular IObjectCreationOperation instead of IAnonymousObjectCreationOperation</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - LINQ Conversion</Name>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>25268</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Examine shape of SelectMany selector in base-line for existing unit-test TransparentIdentifiers_FromLet_IOperation in src\Compilers\CSharp\Test\Semantic\Semantics\QueryTests.cs

``

Observed:
Even though this represents creation of an instance of an Anonymous Type, the node is  IObjectCreationOperation rather than an IAnonymousObjectCreationOperation. Semantically this is accurate, but some useful information is not exposed and left for the consumer to figure out. In particular, it is hard to say what properties are being initializer with values passed as constructor arguments. Also, a simple direct serialization of the IObjectCreationOperation into syntax will never produce valid syntax because Anonymous Types cannot be explicitly named and, therefore, their constructors cannot be explicitly invoked. The only valid way to represent this in syntax is to use an Anonymous Type creation expression, which is usually mapped to IAnonymousObjectCreationOperation.

Expected: 
IAnonymousObjectCreationOperation node. BTW, this is what happens for VB.

I believe this issue is blocking for "Linq query to method calls" refactoring feature.

CC @dotnet/analyzer-ioperation, @ivanbasov  </Description>
  </Issue>
  <Issue>
    <IssueID>25267</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Introduce variable inside string literals</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
string x = "a string";
              `----- selection

-&gt;
cs
string v1 = "string";
string x = $"a {v1}";
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>25266</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>25266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent tree shape is used for initializers within IAnonymousObjectCreationOperation</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>25266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - LINQ Conversion</Name>
        <IssueID>25266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>25266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        &lt;CompilerTrait(CompilerFeature.IOperation, CompilerFeature.Dataflow)&gt;
        &lt;Fact()&gt;
        Public Sub Test_01()
            Dim source =
&lt;compilation&gt;
    &lt;file name="a.vb"&gt;
        &lt;![CDATA[
Public Class C1
    Sub M1(a as integer, b as integer) 
        DIm result = new with {Key .a = a, Key b} 
    End Sub
End Class
         ]]&gt;
    &lt;/file&gt;
&lt;/compilation&gt;

            Dim compilation = CreateCompilationWithMscorlibAndVBRuntime(source, parseOptions:=TestOptions.RegularWithFlowAnalysisFeature)

            compilation.AssertNoDiagnostics()

            Dim tree = compilation.SyntaxTrees.Single()
            Dim node = tree.GetRoot().DescendantNodes().OfType(Of AnonymousObjectCreationExpressionSyntax)().Single()

            compilation.VerifyOperationTree(node, expectedOperationTree:=
            &lt;![CDATA[
IAnonymousObjectCreationOperation (OperationKind.AnonymousObjectCreation, Type: &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;) (Syntax: 'new with {K ... = a, Key b}')
  Initializers(2):
      ISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: System.Int32) (Syntax: 'Key .a = a')
        Left: 
          IPropertyReferenceOperation: ReadOnly Property &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;.a As System.Int32 (OperationKind.PropertyReference, Type: System.Int32) (Syntax: 'a')
            Instance Receiver: 
              null
        Right: 
          IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'a')
      IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Int32) (Syntax: 'b')
]]&gt;.Value)
        End Sub


Observed:
The first initializer has a form of ISimpleAssignmentOperation  for the anonymous type property, this meets my expectations. The second initilaizer, however, is just an IParameterReferenceOperation, i.e. just the value that should be saved in the next property. 

Expected:
All initializers should be ISimpleAssignmentOperation nodes, nodes that don't have corresponding syntax should simply be marked as implicit. Otherwise, 
- the consumer has to figure out what property is being initialized, which might be tricky because that has to be done by position.
- in C#, an assignment is a valid value for an property, consumer might easily confuse that with initializer.

I think that consistent shape of IAnonymousObjectCreationOperation will make it much easier for consumers to make sense what the node represents and we should ensure that across both languages. Also, I believe that this issue is blocking for "Linq query to method calls" refactoring because it appears that compiler generated selectors for query operators never use assignment for initializers. Like in the example below.


        &lt;CompilerTrait(CompilerFeature.IOperation, CompilerFeature.Dataflow)&gt;
        &lt;Fact()&gt;
        Public Sub Test_03()
            Dim source =
&lt;compilation&gt;
    &lt;file name="a.vb"&gt;
        &lt;![CDATA[
Imports System.Linq

Public Class C1
    Sub M1(aa as integer(), bb as integer(), cc as integer()) 
        DIm result = From a in AA From b in BB From c in CC
    End Sub
End Class
         ]]&gt;
    &lt;/file&gt;
&lt;/compilation&gt;

            Dim compilation = CreateCompilationWithMscorlibAndVBRuntime(source, additionalRefs:={SystemCoreRef})

            compilation.AssertTheseDiagnostics()

            Dim tree = compilation.SyntaxTrees.Single()
            Dim node = tree.GetRoot().DescendantNodes().OfType(Of QueryExpressionSyntax)().Single()

            compilation.VerifyOperationTree(node, expectedOperationTree:=
            &lt;![CDATA[
ITranslatedQueryOperation (OperationKind.TranslatedQuery, Type: System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;)) (Syntax: 'From a in A ... rom c in CC')
  Expression: 
    IInvocationOperation ( Function System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;).SelectMany(Of System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;)(collectionSelector As System.Func(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, System.Collections.Generic.IEnumerable(Of System.Int32)), resultSelector As System.Func(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;)) As System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;)) (OperationKind.Invocation, Type: System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;), IsImplicit) (Syntax: 'c in CC')
      Instance Receiver: 
        IInvocationOperation ( Function System.Collections.Generic.IEnumerable(Of System.Int32).SelectMany(Of System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;)(collectionSelector As System.Func(Of System.Int32, System.Collections.Generic.IEnumerable(Of System.Int32)), resultSelector As System.Func(Of System.Int32, System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;)) As System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;)) (OperationKind.Invocation, Type: System.Collections.Generic.IEnumerable(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;), IsImplicit) (Syntax: 'b in BB')
          Instance Receiver: 
            IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Collections.Generic.IEnumerable(Of System.Int32), IsImplicit) (Syntax: 'a in AA')
              Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: True, IsUserDefined: False) (MethodSymbol: null)
              Operand: 
                IParameterReferenceOperation: aa (OperationKind.ParameterReference, Type: System.Int32()) (Syntax: 'AA')
          Arguments(2):
              IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: collectionSelector) (OperationKind.Argument, Type: null, IsImplicit) (Syntax: 'BB')
                IDelegateCreationOperation (OperationKind.DelegateCreation, Type: System.Func(Of System.Int32, System.Collections.Generic.IEnumerable(Of System.Int32)), IsImplicit) (Syntax: 'BB')
                  Target: 
                    IAnonymousFunctionOperation (Symbol: Function (a As System.Int32) As System.Collections.Generic.IEnumerable(Of System.Int32)) (OperationKind.AnonymousFunction, Type: null, IsImplicit) (Syntax: 'BB')
                      IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'BB')
                        IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'BB')
                          ReturnedValue: 
                            IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Collections.Generic.IEnumerable(Of System.Int32), IsImplicit) (Syntax: 'b in BB')
                              Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: True, IsUserDefined: False) (MethodSymbol: null)
                              Operand: 
                                IParameterReferenceOperation: bb (OperationKind.ParameterReference, Type: System.Int32()) (Syntax: 'BB')
                InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
              IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: resultSelector) (OperationKind.Argument, Type: null, IsImplicit) (Syntax: 'From b in BB')
                IDelegateCreationOperation (OperationKind.DelegateCreation, Type: System.Func(Of System.Int32, System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;), IsImplicit) (Syntax: 'From b in BB')
                  Target: 
                    IAnonymousFunctionOperation (Symbol: Function (a As System.Int32, b As System.Int32) As &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;) (OperationKind.AnonymousFunction, Type: null, IsImplicit) (Syntax: 'From b in BB')
                      IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'From b in BB')
                        IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'From b in BB')
                          ReturnedValue: 
                            IAnonymousObjectCreationOperation (OperationKind.AnonymousObjectCreation, Type: &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, IsImplicit) (Syntax: 'b in BB')
                              Initializers(2):
                                  IParameterReferenceOperation: a (OperationKind.ParameterReference, Type: System.Int32, IsImplicit) (Syntax: 'a')
                                  IParameterReferenceOperation: b (OperationKind.ParameterReference, Type: System.Int32, IsImplicit) (Syntax: 'b')
                InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
      Arguments(2):
          IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: collectionSelector) (OperationKind.Argument, Type: null, IsImplicit) (Syntax: 'CC')
            IDelegateCreationOperation (OperationKind.DelegateCreation, Type: System.Func(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, System.Collections.Generic.IEnumerable(Of System.Int32)), IsImplicit) (Syntax: 'CC')
              Target: 
                IAnonymousFunctionOperation (Symbol: Function ($VB$It As &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;) As System.Collections.Generic.IEnumerable(Of System.Int32)) (OperationKind.AnonymousFunction, Type: null, IsImplicit) (Syntax: 'CC')
                  IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'CC')
                    IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'CC')
                      ReturnedValue: 
                        IConversionOperation (TryCast: False, Unchecked) (OperationKind.Conversion, Type: System.Collections.Generic.IEnumerable(Of System.Int32), IsImplicit) (Syntax: 'c in CC')
                          Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: True, IsUserDefined: False) (MethodSymbol: null)
                          Operand: 
                            IParameterReferenceOperation: cc (OperationKind.ParameterReference, Type: System.Int32()) (Syntax: 'CC')
            InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
            OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
          IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: resultSelector) (OperationKind.Argument, Type: null, IsImplicit) (Syntax: 'From c in CC')
            IDelegateCreationOperation (OperationKind.DelegateCreation, Type: System.Func(Of &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, System.Int32, &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;), IsImplicit) (Syntax: 'From c in CC')
              Target: 
                IAnonymousFunctionOperation (Symbol: Function ($VB$It1 As &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, c As System.Int32) As &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;) (OperationKind.AnonymousFunction, Type: null, IsImplicit) (Syntax: 'From c in CC')
                  IBlockOperation (1 statements) (OperationKind.Block, Type: null, IsImplicit) (Syntax: 'From c in CC')
                    IReturnOperation (OperationKind.Return, Type: null, IsImplicit) (Syntax: 'From c in CC')
                      ReturnedValue: 
                        IAnonymousObjectCreationOperation (OperationKind.AnonymousObjectCreation, Type: &lt;anonymous type: Key a As System.Int32, Key b As System.Int32, Key c As System.Int32&gt;, IsImplicit) (Syntax: 'c in CC')
                          Initializers(3):
                              IPropertyReferenceOperation: ReadOnly Property &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;.a As System.Int32 (OperationKind.PropertyReference, Type: System.Int32, IsImplicit) (Syntax: 'a')
                                Instance Receiver: 
                                  IParameterReferenceOperation: $VB$It1 (OperationKind.ParameterReference, Type: &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, IsImplicit) (Syntax: 'From c in CC')
                              IPropertyReferenceOperation: ReadOnly Property &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;.b As System.Int32 (OperationKind.PropertyReference, Type: System.Int32, IsImplicit) (Syntax: 'b')
                                Instance Receiver: 
                                  IParameterReferenceOperation: $VB$It1 (OperationKind.ParameterReference, Type: &lt;anonymous type: Key a As System.Int32, Key b As System.Int32&gt;, IsImplicit) (Syntax: 'From c in CC')
                              IParameterReferenceOperation: c (OperationKind.ParameterReference, Type: System.Int32, IsImplicit) (Syntax: 'c')
            InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
            OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
]]&gt;.Value)
        End Sub
`</Code>
    <Description>``
 
CC @dotnet/analyzer-ioperation, @ivanbasov  </Description>
  </Issue>
  <Issue>
    <IssueID>25264</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio crashes when writing `new ref[]` in a Method</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 15.6.0
**Steps to Reproduce**:

1. Write `new ref[]` in a Method

**Expected Behavior**:
error report
**Actual Behavior**:
Visual Studio crashes</Description>
  </Issue>
  <Issue>
    <IssueID>25261</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>25261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Follow up on feeback on #24817</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Constraints</Name>
        <IssueID>25261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@alekseyts left some feedback on #24817 after it was approved and merged.
Comments should be reviewed. This bugs tracks this for 15.7 so that it doesn't get lost.</Description>
  </Issue>
  <Issue>
    <IssueID>25260</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Deconstruct variable declaration" introduces error.</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>25260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
        (int x, int y) t = default;
        Console.WriteLine(t.x + t.y);


Use 'Deconstruct variable declaration' on 't'.  It produces the following code:

c#
        (int x, int y) = default;
        Console.WriteLine(x + y);
`</Code>
    <Description>Start with code:

``

This is not allowed because 'default' is not deconstructable to a tuple.  </Description>
  </Issue>
  <Issue>
    <IssueID>25259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] Tips and tricks for performance</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>25/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>25259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>25259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi folks,

We have noticed we have quite a lot of performance issues with our analyzers but we cannot find any way to have a correct measurement/profiling of the analyzers. I know that there is some project for bench-marking them that is in progress but in the meantime I am wondering if you guys would have some tips on things to avoid or things to try to enforce when developing analyzer so that we avoid some big performance pitfall.

For example when checking for a type, is it recommended to check the string value before getting to the symbol? Shall we avoid to use `FirstAncestorOrSelf&lt;T&gt;` or `ChildNode().Where` or `DescendantNodes().Where...`

Cheers</Description>
  </Issue>
  <Issue>
    <IssueID>25257</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>error MSB4064: The "EmbedAllSources" parameter is not supported by the "Csc" task</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Visual Studio 2017 version 15.6 Release

Microsoft.CSharp.Core.targets : error MSB4064: The "EmbedAllSources" parameter is not supported by the "Csc" task</Description>
  </Issue>
  <Issue>
    <IssueID>25256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Feature Request: Allow value tuple deconstruction with default keyword</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels />
    <Description>Hi,
I apologize for neglecting the form, but I see not how to fill "expected behavior" etc. correctly.

In C# 7, we currently are able to use the `default` keyword in the following way:

`int x = default;`
meaning
`int x = default(int);`

We also can use tuple deconstruction like that:

``
Or with the default keyword:
`(int x, bool y) = default((int, bool))`
But what seems to be impossible to me at the moment is this pattern of syntax:
`(int x, bool y) = default;`

In my eyes, the is some kind of logical gap that deserves to be filled soon. Okay, in this example, we could either write
`var (x, y) = default((int, bool))`

But assume `x` and `y` have been declared already before, then the use of `var` keyword is not possible.
That's why I would like to propose allowing this syntax.

While enjoying this language for a few years now, I am new to this forum, so I would be thankful to someone explaining me what's happening next with this proposal - if not already submitted by another user, but I couldn't find one. Thank your for your attention!</Description>
  </Issue>
  <Issue>
    <IssueID>25255</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Enable Navigation to Decompiled Sources" option only partially works in a VB.NET project</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After enabling the &amp;quot;Enable Navigation to Decompiled Sources&amp;quot; option I attempted to Go To Definition of `.Show()` of a `System.Windows.Forms.Form` from my VB.NET project. This incorrectly opens just the decompiled file rather than also jumping to the function definition. However, it seems to work perfectly fine from a C# project, additionally I can jump to the definition of the class itself from a VB project.Also, it seems to be syntax highlighting the code in the decompiled file with VB syntax rather than C# syntax._This issue has been moved from VSTS ticketId: 576951__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25253</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>25253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No semantic errors in IDE for .NET Core project with NullableReferenceTypes build</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>03/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>25253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Syntax errors are reported in IDE for .NET Core project with build from `features/NullableReferenceTypes`, but binding errors are not reported.</Description>
  </Issue>
  <Issue>
    <IssueID>25252</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Feature Request: assembly name and path with navigation to decompiled source</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#region Assembly System.Runtime, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.dll
#endregion
`</Code>
    <Description>**Version Used**: 

VS 2017 15.6.0

**Steps to Reproduce**:

"navigation to decompiled sources" disabled:

![image](

enabled:

![image](

I want the decompiled sources to have assembly name and path information too.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>25251</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompilation should simplify "type" usage</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25251</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Decompilation isn't apply the simplifier on the result of the decompilation, resulting in more complex code:

Current:

``</Description>
  </Issue>
  <Issue>
    <IssueID>25248</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompilation only decompiles "public" API</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Contains` and choose **Go to Definition**

``</Description>
  </Issue>
  <Issue>
    <IssueID>25246</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Decompilation cannot decompile xUnit's `Assert.All`</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>01/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Attempted to decompile `Assert.All` from xUnit.Assert (2.1.0) and got the following:

``</Description>
  </Issue>
  <Issue>
    <IssueID>25245</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Decompilation cannot navigate to xUnit's "Assert.Single"</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a new Console Application
2. Install **xUnit 2.1.0** NuGet package
3. Turn on decompilation
4. Right-click on `Assert.Single` and choose **Go to Definition**

``

**Expected:** Caret to be placed on Assert.Single 
**Actual:** Assert class is decompiled but caret is at the top of the class

~Other methods work, just not this one.~ Actually looks like it cannot navigate to any of these methods on Assert.</Description>
  </Issue>
  <Issue>
    <IssueID>25244</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Turning off/on decompilation doesn't take effect until you restart VS</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>29/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Turn on 
![image](

2. _Go to definition_ for an external API
3. Close document window
4. Turn off above option
5. _Go to definition_ for the same API

**Expected:** For metadata as source to be used
**Actual:** The code is decompiled</Description>
  </Issue>
  <Issue>
    <IssueID>25243</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer throws null reference</Title>
    <CreatedDate>06/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25243</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
Warning	AD0001	Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.	App3		1	Active	Analyzer 'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: App3
SyntaxTree: C:\Users\jmarolf\source\repos\App3\App3\App3\ViewModels\BaseViewModel.cs
SyntaxNode: return; [ReturnStatementSyntax]@[1481..1488) (49,16)-(49,23)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.GetLeftmostCondition(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.SyntaxNodeAction(SyntaxNodeAnalysisContext syntaxContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__43`1.&lt;ExecuteSyntaxNodeAction&gt;b__43_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----
'.


**Code:**
C#
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

using Xamarin.Forms;

using App3.Models;
using App3.Services;

namespace App3.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public IDataStore&lt;Item&gt; DataStore =&gt; DependencyService.Get&lt;IDataStore&lt;Item&gt;&gt;() ?? new MockDataStore();

        bool isBusy = false;
        public bool IsBusy
        {
            get { return isBusy; }
            set { SetProperty(ref isBusy, value); }
        }

        string title = string.Empty;
        public string Title
        {
            get { return title; }
            set { SetProperty(ref title, value); }
        }

        protected bool SetProperty&lt;T&gt;(ref T backingStore, T value,
            [CallerMemberName]string propertyName = "",
            Action onChanged = null)
        {
            if (EqualityComparer&lt;T&gt;.Default.Equals(backingStore, value))
                return false;

            backingStore = value;
            onChanged?.Invoke();
            OnPropertyChanged(propertyName);
            return true;
        }

        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            var changed = PropertyChanged;
            if (changed == null)
                return;

            changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion
    }
}
`</Code>
    <Description>**Error:**
``</Description>
  </Issue>
  <Issue>
    <IssueID>25238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate Constructor should not copy "protected" from abstract base class</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. CTRL+. on `Abstract` and choose Generate Constructor

``
</Description>
  </Issue>
  <Issue>
    <IssueID>25237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>25237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NRE in Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>25237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 15.7

**Steps to Reproduce**:

1. Repo 
2. Branch Dev/rchiodo/add_logical_view_2
3. NuGet restore the main solution (src/Microsoft.VisualStudio.SLNX.sln) and then open in the IDE.

**Actual Behavior**:

Severity | Code | Description | Project | File | Line | Suppression State | Detail Description
-- | -- | -- | -- | -- | -- | -- | --
Error | AD0001 | Analyzer   'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer'   threw an exception of type 'System.NullReferenceException' with message   'Object reference not set to an instance of an object.'. | Microsoft.VisualStudio.Workspace.Implementation |   | 1 | Active | Analyzer   'Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer'   threw the following exception:'Exception occurred with following   context:Compilation: Microsoft.VisualStudio.Workspace.ImplementationSyntaxTree:   F:\Anycode\Repo\src\Microsoft.VisualStudio.Workspace.Implementation\Workspace.csSyntaxNode:   return; [ReturnStatementSyntax]@[23344..23351)   (485,16)-(485,23)System.NullReferenceException: Object reference not set to   an instance of an object.   at   Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.GetLeftmostCondition(SyntaxNode   node)   at   Microsoft.CodeAnalysis.CSharp.UsePatternMatching.CSharpAsAndNullCheckDiagnosticAnalyzer.SyntaxNodeAction(SyntaxNodeAnalysisContext   syntaxContext)   at   Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__43`1.&lt;ExecuteSyntaxNodeAction&gt;b__43_0(ValueTuple`2   data)   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer   analyzer, Action`1 analyze, TArg argument, Nullable`1 info)-----'.

</Description>
  </Issue>
  <Issue>
    <IssueID>25236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Auto-Implemented Property Accessor-Targeted Attributes</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels />
    <Description>Unable to apply MethodImpl attribute to Expression-bodied Property Get. Tested with latest version of VS 2017.15.6.0.

Note, program is for illustration purpose only and have no real value.

    class Program
    {
        public int Working1
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get { return 1; }
        }

        public int Working2
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get;
        } = 3;

        public int Working3
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get =&gt; 2;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int NotWorking1 =&gt; 2;

        static void Main(string[] args)
        {
        }
    }

Expected Behavior: Program compiles.

Actual Behavior: Error CS0592 Attribute 'MethodImpl' is not valid on this declaration type. It is only valid on 'constructor, method' declarations.</Description>
  </Issue>
  <Issue>
    <IssueID>25235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>25235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for Improved Overload Candidates</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>06/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Test plan for **Improved Overload Candidates**, aka **Bestest Betterness**.

Championed language proposal: 
Initial implementation: 

## General
- [ ] No change to overload resolution with `/langversion=7.2`
  - [x] Run test pass with `LanguageVersion.Latest = CSharp7_2` to verify (Neal: done 2018-03-19. Many minor changes to the character range associated with the diagnostics for overload resolution changes where the source is still an error. It failed final verification before but now failed to find a candidate; we give the same error message, but where we used to point to the whole invocation, now we point just to the method being invoked. The tests expect the C# 7.3 location but the errors are at the C# 7.2 location)
- [ ] If overload resolution does not find a matching candidate after dropping candidates with new rules, all candidates are considered for error reporting, unchanged from 7.2 (Neal: Roughly correct, verified in all modified tests which test old and new versions. However, these new failure reasons are prioritized for reporting purposes so we generate the same diagnostic that we previously used to report during final validation. It is easy to identify these apparently unaffected but technically affected tests because it changes the character range on which the diagnostic is reported. See 

## Instance and static members
- [ ] Overload resolution ignores _static_ methods and indexed properties when (Indexed properties are not relevant. C# does not support static indexed properties. Soon see `IndexedPropertyTest01`)
  - [ ] invoked with an explicit receiver (see `TestInstanceReceiver01`)
  - [ ] invoked with `this` or `base` (soon see `TestInstanceReceiver02`)
  - [ ] implicitly invoked `Add()` method in a collection initializer (soon see `TestInstanceReceiver03`)
  - [ ] implicitly invoked `GetEnumerator()` and `MoveNext()` in `foreach` (soon see `TestInstanceReceiver04` and `TestInstanceReceiver05`)
  - [ ] implicitly invoked `Deconstruct()` (soon see `TestInstanceReceiver06`)
  - [ ] implicitly invoked `GetAwaiter()` and `GetResult()` for `await` (soon see `TestInstanceReceiver07` and `TestInstanceReceiver08`)
  - [ ] implicitly invoked method from LINQ query on instance (soon see `TestInstanceReceiver09`)
- [ ] Overload resolution ignores _instance_ methods and indexed properties when
  - [ ] invoked with an explicit type qualifier and with no field or property with the same name as the type (see `TestStaticReceiver01` and others)
  - [ ] invoked without a qualifier in a static member (see `TestStaticContext01`)
  - [ ] invoked without a qualifier in a field initializer or property initializer (see `TestStaticContext02`)
  - [ ] invoked without a qualifier in a constructor initializer `this(...)` or `base(...)` (see `TestStaticContext04`)
  - [ ] invoked without a qualifier in an attribute argument (see `TestStaticContext05`)
  - [ ] invoked without a qualifier in a default parameter value (Not so. soon see `TestStaticContext06`. Though today it doesn't make any difference for legal programs, a parameter default value is not a static context in an instance method. That will remain so in order to support the proposal for "with" methods in records.)
  - [ ] implicitly invoked method from LINQ query on type (see `QueryTests.QueryOnLambda`)
- [ ] Overload resolution considers both instance and static methods and indexed properties (unchanged from 7.2) when
  - [ ] invoked without an explicit receiver in instance method (see `TestInstanceContext01`)
  - [ ] invoked with an explicit type qualifier with a field or property with the same name as the type (see `TestAmbiguousContext01`)
- [ ] `SymbolInfo.CandidateSymbols` will include all overloads on failure, including those that would be dropped on success, unchanged from 7.2 (soon see `TestAmbiguous01`)
- [ ] IDE Name Simplification
  - [ ] should not offer to remove receiver from `this.F(...)` or `base.F(...)` if an ambiguous static overload exists
  - [ ] should not offer to remove type qualifier from `Type.F(...)` if an ambiguous instance overload exists
  - [ ] should offer to remove type qualifier from `Type.F(...)` in static contexts (such as field or constructor initializer) even when an instance overload exists

## Constraints not satisfied
- [ ] Overload resolution with generic methods ignores methods where type arguments do not satisfy constraints when
  - [ ] type arguments are implicit (see `TestConstraintFailed01` et al)
  - [ ] type arguments are explicit (see `OverloadResolutionTests.TestConstraintViolationApplicabilityErrors`)
- [ ] Overloads for `ref struct` and `T*` can be invoked successfully even when generic overloads exist since `ref struct` and `T*` are not valid type arguments (see `TestConstraintFailed04`, `TestConstraintFailed05`)
- [ ] `SymbolInfo.CandidateSymbols` will not include methods where type arguments do not satisfy constraints (It does include all overloads on failure. We don't remove "filtered-out" candidates today and this PR doesn't change that. Soon see `TestAmbiguous02` and `TestAmbiguous03`)

## Method group return type or `ref` mismatch
- [ ] Method group conversion ignores
  - [ ] methods for which there is not an identity or implicit reference conversion from the method return type to the delegate type (see `TestReturnTypeMismatch01` et al)
  - [ ] methods that are `ref` returning if the delegate is not `ref` returning (see `TestReturnRefMismatch01`)
  - [ ] methods that are not `ref` returning if the delegate is `ref` returning (soon see `TestReturnRefMismatch02`)
- [ ] **`SymbolInfo.CandidateSymbols` will not include methods that do not match delegate return type** or `ref` (it *will* include them, as we do not remove "filtered" candidates today; soon see `TestAmbiguous04`)
</Description>
  </Issue>
  <Issue>
    <IssueID>25234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misbehaving refactorings in 15.6 RoslynDev crash Visual Studio</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>25234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler) Line 156
	at C:\Users\neme1\Source\Repos\roslyn\src\Compilers\Core\Portable\InternalUtilities\FatalError.cs(156)
Microsoft.VisualStudio.IntegrationTest.Setup.dll!Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(object sender, System.Exception exception) Line 15
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\IntegrationTest\TestSetup\TestExtensionErrorHandler.cs(15)
Microsoft.VisualStudio.IntegrationTest.Setup.dll!Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionManager.ExtensionManager.HandleException(object provider, System.Exception exception) Line 49
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\IntegrationTest\TestSetup\TestExtensionManager.cs(49)
Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan state, Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringProvider provider, Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, System.Threading.CancellationToken cancellationToken) Line 161
	at C:\Users\neme1\Source\Repos\roslyn\src\Features\Core\Portable\CodeRefactorings\CodeRefactoringService.cs(161)
Microsoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringsAsync.AnonymousMethod__0() Line 105
	at C:\Users\neme1\Source\Repos\roslyn\src\Features\Core\Portable\CodeRefactorings\CodeRefactoringService.cs(105)
[External Code]
`</Code>
    <Description>If I run VisualStudioSetup.Next from VS 15.5 and and encounter an exception from a refactoring, I get the usual message about a crashing refactoring with an option to re-enable it.

But for some reason if I do this in VS 15.6 P7, the exception from the refactoring causes all of VS to crash (by freezing, forcing me to use Task Manager). This really makes working on these sorts of issues a pain.

Building using the corresponding dev command prompt and then running RoslynDev has the same effect - in 15.5, I get a message, in 15.6, VS crashes. With both Debug &amp; Release builds.

Here's an example issue: 

This is the call stack I get if I debug:
``</Description>
  </Issue>
  <Issue>
    <IssueID>25231</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect check on BinaryOperatorKind.NullableNull</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>21/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>25231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The proper check should be `node.OperatorKind.OperandTypes() != BinaryOperatorKind.NullableNull` in the following method (in `DiagnosticsPass_Warnings.cs`)

``

Found while reviewing </Description>
  </Issue>
  <Issue>
    <IssueID>25228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>25228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SigningTestHelpers needs to be portable</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The `SigningTestHelpers` type is desktop only and it makes it hard to use in our multi-target test projects. Need to factor this out to a portable subset that can be used in our portable / mulit-target projects.</Description>
  </Issue>
  <Issue>
    <IssueID>25226</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>05/03/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>25223</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>UseInferredName offers incorrect fix</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>30/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25223</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When a variable is simplified when using With, a simplification of the variable, but rather than simplify it this suggests eliminating.
``
when compiling this brand an error as it should lead '. ' before art.

_This issue has been moved from 
VSTS ticketId: 570972_
_These are the original issue comments:_

Ariel Yang - MSFT on 2/22/2018, 05:58 PM (10 days ago): &lt;p&gt;
&lt;/p&gt;&lt;p&gt;Translated from bing:&lt;/p&gt;&lt;p&gt;When a variable is simplified when using With, it suggests a simplification of the variable, but instead of simplifying it, it is deleting it.
&lt;br&gt;Dim form _ As Meform = New Meform With \{
. Art = Art,
. desc = desc,
. dt = DT,
. AplicaID = AplicaID
}
&lt;br&gt;Intelisense suggests simplifying variables:
&lt;br&gt;Dim form _ As Meform = New Meform With \{
Art,
Desc,
Dt,
AplicaID
}
&lt;br&gt;When compiling this marks an error because it must carry '. ' Before Art.&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>25221</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Intellisense does not completely handle null conditionals</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>25221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>class A
{
public bool Foo(){return true;}
}

A a = null;
if(a?.Foo()) // does not compile, as expected, IntelliSense complains about not being able to cast bool? to bool, as expected

if(a?.Foo() == true) // Compiles as expected, however IntelliSense treats &amp;quot;a?.Foo()&amp;quot; as if it was bool, tooltip for == shows bool operator==(bool,bool), etc.

_This issue has been moved from 
VSTS ticketId: 552073_
_These are the original issue comments:_

</Description>
  </Issue>
  <Issue>
    <IssueID>25219</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.NETCore.Compilers props file has a syntax error</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>29/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25219</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There's an unmatched quote on this line: </Description>
  </Issue>
  <Issue>
    <IssueID>25214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>T in Lazy&lt;T&gt; should be factored in when suggesting names</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>30/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When suggesting names for Task&lt;T&gt;, Task is ignored, and the type passed to "T" is used as input into the suggestions:

![image](

The same should happen to Lazy&lt;T&gt; to avoid these situations:

![image](

![image](

I'd rather see these as the suggestions:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>25212</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>25212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualBasicSnippetInfoService is failing MEF cache for 15.7</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>15.7.0 Preview 1.0 [27501.3002.d15.7stg]

``</Description>
  </Issue>
  <Issue>
    <IssueID>25211</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractGenerateEqualsAndGetHashCodeFromMembersCodeRefactoringProvider failure in the MEF cache for 15.7</Title>
    <CreatedDate>05/03/2018</CreatedDate>
    <ClosedDate>16/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>15.7.0 Preview 1.0 [27501.3002.d15.7stg]

``</Description>
  </Issue>
  <Issue>
    <IssueID>25202</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'Use block body' is broken with async</Title>
    <CreatedDate>03/03/2018</CreatedDate>
    <ClosedDate>17/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System.Threading.Tasks;

class C
{
    async Task M() =&gt; await Task.Yield();
}


expected behavior:
c#
    async Task M()
    {
        await Task.Yield();
    }


actual behavior:
c#
    async Task M()
    {
        return await Task.Yield();
    }
`</Code>
    <Description>``
(doesn't compile)</Description>
  </Issue>
  <Issue>
    <IssueID>25192</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to retrieve IMethodSymbol for IfTrue operator</Title>
    <CreatedDate>02/03/2018</CreatedDate>
    <ClosedDate>05/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25192</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>25192</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25192</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,

I'm used *Microsoft.CodeAnalysis.VisualBasic.1.3.2* and they dependents.

I just want to retrieve a `IMethodSymbol` for the `A.op_True` during getting the semantic info for the  `new A()` node (`ObjectCreationExpressionSyntax`) that is a part of the ` If New A() Then Console.WriteLine("Test")` (`SingleLineIfStatementSyntax` ) node from the code bellow:

``

I tried to retrieve symbol using `GetSymbolInfo` and `GetConversion` but they returned to me `IMethodSymbol` of the `.ctor`. 
I tried to parse this code with `IOperation` feature, disable `OptionsStrict` in the corresponding compilation and retrieve symbol using `GetOperation`, but It also didn't give to me the `A.op_True`.

I know that I can retrieve a returning type of expression, and than try to find in a members collection some conversions and operators by order that was described in [this article]( but it doesn't good solution for my case.

So, how I can retrieve `IMethodSymbol`? Any suggestion would be grateful.


</Description>
  </Issue>
  <Issue>
    <IssueID>25187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow 'ref readonly struct' for 'readonly ref struct'</Title>
    <CreatedDate>02/03/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>25187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>25187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 27428.0.d15.7

**Steps to Reproduce**:

1. Create a C# project for netcoreapp2.1
2. Write a declaration of a ref struct:
``

**Expected Behavior**:
The order of 'ref' and 'readonly' should not matter; I can either use 'readonly ref struct' or 'ref readonly struct' to declare readonly ref-like types.

**Actual Behavior**:
'ref readonly struct' is not allowed. looks like `ref struct` is a compound keyword like `partial class`.</Description>
  </Issue>
  <Issue>
    <IssueID>25185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>25185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove workaround for using Arm64 without updating System.Reflection.Metadata</Title>
    <CreatedDate>02/03/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The implementation of the actual Arm64 header detail hass been moved to System.Reflection.Metadata: #25182 but we aren't using it yet due to not updating SRM.

Remove it from Roslyn once it's available thru the version of SRM we use.
</Description>
  </Issue>
  <Issue>
    <IssueID>25182</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Update Roslyn to support building Arm64 binaries</Title>
    <CreatedDate>02/03/2018</CreatedDate>
    <ClosedDate>22/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Expected Behavior**:
Roslyn compilers such as vbc and csc should support the /platform:arm64 switch.

**Actual Behavior**:
Arm64 PE files cannot be generated by Roslyn based compilers.</Description>
  </Issue>
  <Issue>
    <IssueID>25176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>25176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>UseImplicitType should not be offered when an explicit type is necessary for disambiguating between method overloads</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>11/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2017 
Version 15.5.6
VisualStudio.15.Release/15.5.6+27130.2027
Microsoft .NET Framework
Version 4.7.02556

Installed Version: Community

Visual C# 2017   00369-60000-00001-AA314
Microsoft Visual C# 2017

**Steps to Reproduce**:

1. Write the following code to a file inside a C# project:
``

**Expected Behavior**:
No warning, as the explicit type is necessary to determine which overload of SomeMethod to use.

**Actual Behavior**:
IDE0007 warning is thrown. Using the fix options (in Visual Studio) leads to CS0121 "The call is ambiguous ..." being thrown.</Description>
  </Issue>
  <Issue>
    <IssueID>25174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>25174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C#: warning / error messages relating to `ref` and `out` do not mention `in` parameters</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>25174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>25174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017
Version 15.5.7
VisualStudio.15.Release/15.5.7+27130.2036
Visual C# 2017 00369-60000-00001-AA058
Microsoft Visual C# 2017

**Steps to Reproduce**:

The following compiler messages refer to locations where `ref` and `out` parameters cannot be used.  In all these cases, `in` parameters are also invalid:

*CS0663* (ERR_OverloadRefKind): Overloads differ only on `ref` and `out` (works properly in test ` OverloadsWithDifferentParameterModifiers_Ref_In`)
*CS1107* (ERR_DupParamMod): A parameter can only have one 'modifier name' modifier. (works properly in test `BadRefOrInWithThisParameterModifiers`)
*CS1108* (deprecated): A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter.
*CS1611* (ERR_ParamsCantBeWithModifier): The params parameter cannot be declared as ref or out. (works properly in test `BadInWithParamsParameterModifiers`)
*CS1623* (ERR_BadIteratorArgType, [bug still exists]( in 15.7): Iterators cannot have ref or out parameters.
*CS1628* (ERR_AnonDelegateCantUse): Cannot use ref or out parameter 'parameter' inside an anonymous method, lambda expression, or query expression
*CS1951* (ERR_ByRefParameterInExpressionTree, [bug still exists]( in 15.7): An expression tree lambda may not contain an out or ref parameter.
*CS1988* (ERR_BadAsyncArgType, [bug still exists]( in 15.7):  Async methods cannot have ref or out parameters.
 
**Expected Behavior**:

Substituting `in` for `out` or `ref` in all those situations should produce a message that includes `in`.

**Actual Behavior**:

The messages are as shown above.

/cc @VSadov </Description>
  </Issue>
  <Issue>
    <IssueID>25173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB project gives target error, not compiler error</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @KathleenDollard on March 1, 2018 21:57_When building a Visual Basic application via the CLI in 2.1.300-Preview2, compiler errors are not reported to the user. 

## Steps to reproduce

* Create a VB console ap
* Create an error in the application. Mine was (the Program.cs)

``_Copied from original issue: dotnet/sdk#2015_</Description>
  </Issue>
  <Issue>
    <IssueID>25171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>25171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C#: ambiguous overload should produce warning CS1957</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>28/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>25171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>25171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Base&lt;T, S&gt;
{
    public virtual string Test(out T x) // CS1957  
    {
        x = default(T);
        return "Base.Test: out";
    }
    public virtual void Test(ref S x) =&gt;
        System.Console.WriteLine("Base.Test: ref");
}

class Derived : Base&lt;int, int&gt;
{
    public override string Test(out int x)
    {
        x = 0;
        return "Derived.Test";
    }

    static void Main()
    {
        int x;
        System.Console.WriteLine(new Derived().Test(out x));
        new Derived().Test(ref x);
    }
}
`</Code>
    <Description>**Version Used**:  

Microsoft Visual Studio Enterprise 2017 
Version 15.5.7
VisualStudio.15.Release/15.5.7+27130.2036
Visual C# 2017   00369-60000-00001-AA058
Microsoft Visual C# 2017

**Steps to Reproduce**:

Use the following code:

``

**Expected Behavior**:

The declaration of Derived.Test() should produce a warning, because it could override either overload declared in Base.

**Actual Behavior**:

No warning is produced. The derived version is called. in the first call in Main(), the base version that has a void return in the second. It appears that either the difference in return type, or the difference between 'ref' and 'out' is participating in overload resolution
</Description>
  </Issue>
  <Issue>
    <IssueID>25167</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ensure analyzers are able to subscribe and get notifications for new IMethodBodyOperation and IConstructorBodyOperation nodes </Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>25167</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The APIs were added in 
</Description>
  </Issue>
  <Issue>
    <IssueID>25166</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Symbol API docs</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>25166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>25166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Can anybody give me a good documentation of Symbol API and how to retrieve symbols in all cases. Because i really can't a good one in your docs or any book i look for and it's making me loose so much time looking for the right method to implement. And thanks in advance.</Description>
  </Issue>
  <Issue>
    <IssueID>25163</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EditorConfig: trim_trailing_whitespaces rule is not applied to the whole file</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>02/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25163</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
D15.6 Preview 6
**Steps to Reproduce**:
1. Add the following rules to editorconfig:
``
6. Remove added method
7. Add trailing spaces for each line
8. Add a method to class also with trailing spaces.

Actual: trailing spaces trimmed in few lines.
Expected: trailing spaces not trimmed in the whole file.
Note: Also nothing changes on Save/Save All.

</Description>
  </Issue>
  <Issue>
    <IssueID>25160</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test plan for "stackalloc initializers"</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>08/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>25160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>25160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In addition to the currently allowed syntax (`stackalloc int[3]`) we should allow stack allocated arrays be created with initialization:
``

Proposal 


Here is the rough testplan for the stackalloc initializers feature.

Some tests may already exist or be part of other tests. In such case we can just check them off. 


## Evaluation semantics ##

### correctness ###
- [x] langver
- [x] simple cases - target is pointer, target is `Span`, target is `ReadOnlySpan`
- [x] nested cases - in conditional expressions.
- [x] use sideeffecting value expressions. Check the order of evaluation.
- [x] when buffer is not used. Check that element sideeffects are not lost.
- [x] when element inits are side-effecting and one throws. Check sideeffects are not lost.
- [x] ~~check that partial result is not visible. - if element throws and exception caught, whole thing is not reassigned to the new value. (try spans and ordinary stackallocs)~~ (not possible due to stackalloc restrictions)
- [x] trivial case - no elements. Check that there is no `localloc`
- [x] put `await` in the size or in the middle of element initializers
- [x] initializer uses a local that is captured by a lambda expression. See that if lambda changes the value of the local, then we see the updated value when initializing
- [x] test data flow. 
	- [x] use of locals in initializers is checked
	- [x] assignments of locals in initializers have effect

### optimizations ###
- [x] initializers are byte-size literals. (blob init)
- [x] initializers are larger than byte-size literals. (elementwise init)
- [x] initializers are byte-size literals  + some nonliterals. (blob init + patching)
- [x] when all bytes in the payload have same values, `initblk` is used, Check 1 and 1+ element size cases.

### errors ##
- [x] parsing tests and error tolerance
- [x] cannot infer array element type (targeting a pointer, a span)
- [x] invalid array shapes - multidimensional, nested, size mismatches, ... 
- [x] bad conversions
- [x] bad local initialization contexts - using, fixed, ref, const, argument ...
	- [x] should actually work in `for` initializer
- [x] should it work in `for(int* x = stackalloc...)`, probably the same ways as before... ?  
- [x] missing initializer and size .
- [x] outer expression is not usable in elements (not assigned yet)
- [x] in the array type inference case, the outer expression cannot be used to determine the type - should be an error and should not be some kind of crash due to circular dependency
- [x] make it to infer strange types. 
	- [x] dynamic
	- [x] ref-struct
	- [x] void   (use a void method to initialize an element)
	- [x] lambda expression   (formally typeless)
	- [x] null
	- [x] discard  `_` - is not even a value. 
- [x] missing span type 
- [x] missing span .ctor 
- [x] pointer variant in `safe` code

## API ##
- [x] Region analysis. 
	- [x] stackalloc with initializer is a write
	- [x] Using locals in in stackalloc is a use 
- [x] GetSymbolInfo
	- [x] on the whole node (checked for ordinary int* and Span)
	- [x] on size expression (including cases when implicit conversions happen)
	- [x] on element expressions (including cases when implicit conversions happen)	
	- [x] In particular thee was an interest about error cases where the expression refers to itself.
- [x] GetDeclaredSymbol
	- [x] the expression does not declare anything, try with whole node, elements, just in case..
- [x] GetOperation
	
## From the  feature review ##
- [x] test with "unmanaged" constraint. Whenever the features are in the same branch.
- [x] More tests for region analysis. 
- [x] Assign to discard - ` _ = stackalloc .. . .` (Also check what semantic model says about this)
- [x] Try stackalloc inside `lock`, `select`, `let`, in a ternary in an initializer of a `for` variable.
- [x] Check semantic model when unexpected/invalid element type is inferred 

## Manual IDE testing ##
The more detailed plan is here  although many items may end up N/A.  We will have to go through the list before merging.

(This may not be possible to be done with just public bits)

Preliminary - the scenarios of concern are not many, since this is an expression and fairly simple too.

- [x] extract whole thing to a method (regardless whether that works for stackallocks, it should behave rationally, even if resulting code has errors due to escape rules, etc...)
- [x] extract array size and elements to a method, especially if there are implicit conversions. (should just work if semantic APIs work correctly)
- [x] general typing of the construct 
	- [x] IDE should not autocorrect into something meaningless
	- [x] inside the initializer the dropdowns shoudl be as expected - i.e. variables in scope
	- [x] autocompletion of parens and braces - [] { }  
 

</Description>
  </Issue>
  <Issue>
    <IssueID>25152</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[VSMac] Persistent storage service is a singleton</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
d15-6

**Steps to Reproduce**:

1. Create a workspace and register it for persistent storage
1. Create another workspace and register it for persistent storage
1. (d15-6 specific) See an assertion when trying to register the 2nd one
1. (master) the first registration is discarded

**Expected Behavior**:
An IWorkspaceService should be workspace specific. It should not be the same result. It should be totally valid to have 2 persistent storages alive at once.

**Actual Behavior**:
See steps to reproduce. d15-6 crash, master discard.</Description>
  </Issue>
  <Issue>
    <IssueID>25148</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Not all projects use versions from Packages.props</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>15/02/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>25148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>25148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
master

Seen first in 

Modifying a package version in Version.props does not guarantee a successful build on Windows. Some projects in the VisualStudio folder seem to require manual tinkering with the versions.

The list of references I've found by grepping for NugetPackageRoot:
</Description>
  </Issue>
  <Issue>
    <IssueID>25145</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Cosifne</FixedById>
        <IssueID>25145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Quick Action] Push members up</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>29/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25145</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From several customers:

"_I use this daily. In test driven development, we use interfaces for everything. I prefer to write the implementation first, and promote the method to the interface when I’m happy with it. “Extract Interface” isn’t the same, because I’m trying to append an existing interface.

This is the main use case, especially relevant to developers who prefer a “bottom up” style of coding. On the other hand, Visual Studio has had the opposite operation forever, where you write the interface signature first, and then have it create a method body in the derived class._"

"_I’ve seen a few different versions:
- ReSharper, “Pull Members Up” 
- Roslynator, “Add member to interface” (
- Standalone Extension, “Add to interface” (

"_This ties in with my request for a “change modifiers” quick action/refactoring – I’m promoting and demoting visibility or abstract/virtual-ity frequently_."
</Description>
  </Issue>
  <Issue>
    <IssueID>25143</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>25143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Change Method Signature: add parameter</Title>
    <CreatedDate>01/03/2018</CreatedDate>
    <ClosedDate>11/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>25143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>25143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>25143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>25143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have a way to add a parameter to a constructor ( but the only way to do it for a method is to generate an entirely new method.</Description>
  </Issue>
  <Issue>
    <IssueID>24658</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing File Banner not using the most common banner?</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have four C# files with banners, one file has &amp;quot;// Banner 1&amp;quot; and three have &amp;quot;// Banner 2&amp;quot;. Now I added a new C# file, and try the Missing File Banner code fix.  &amp;quot;// Banner 1&amp;quot; was provided.How do you decide which banner to use when there are multiple ones inside of a project?_This issue has been moved from VSTS ticketId: 502137__These are the original issue comments:_Anthony D. Green [MSFT] on 9/29/2017, 04:59 PM (129 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>2.6.1: NullReferenceException in BatchFixAllProvider</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24653</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryAddDocumentMergeChangesAsync&gt;d__19.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFinalDocumentTextAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetDocumentIdToFinalTextAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryMergeFixesAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryGetMergedFixAsync&gt;d__9.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFixAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFixAsync&gt;d__2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.&lt;GetOperationsAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.SolutionProcessor.&lt;ApplyFixesAsync&gt;d__2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.SolutionProcessor.&lt;ProcessSolutionAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.Processor.&lt;ProcessAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;MainAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;Main&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;Main&gt;(String[] args)


Or, simplified:


Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryAddDocumentMergeChangesAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFinalDocumentTextAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetDocumentIdToFinalTextAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryMergeFixesAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryGetMergedFixAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync
   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.GetOperationsAsync
   at WTG.BulkAnalysis.Core.SolutionProcessor.ApplyFixesAsync
   at WTG.BulkAnalysis.Core.SolutionProcessor.ProcessSolutionAsync
   at WTG.BulkAnalysis.Core.Processor.ProcessAsync
   at WTG.BulkAnalysis.Runner.Program.MainAsync
   at WTG.BulkAnalysis.Runner.Program.Main(String[] args)


`CodeFixEquivalenceGroup.GetOperationsAsync` looks like this:


public async Task&lt;ImmutableArray&lt;CodeActionOperation&gt;&gt; GetOperationsAsync(CancellationToken cancellationToken)
{
    var diagnostic = documentDiagnosticsToFix
        .Values
        .SelectMany(i =&gt; i.Values)
        .Concat(projectDiagnosticsToFix.Values)
        .First()
        .First();

    var document = solution.GetDocument(diagnostic.Location.SourceTree);

    var diagnosticIds = new HashSet&lt;string&gt;(
        documentDiagnosticsToFix
            .Values
            .SelectMany(i =&gt; i.Values)
            .Concat(projectDiagnosticsToFix.Values)
            .SelectMany(i =&gt; i)
            .Select(j =&gt; j.Id));

    var diagnosticsProvider = new TesterDiagnosticProvider(
        documentDiagnosticsToFix,
        projectDiagnosticsToFix);

    var context = new FixAllContext(
        document,
        codeFixProvider,
        FixAllScope.Solution,
        codeFixEquivalenceKey,
        diagnosticIds,
        diagnosticsProvider,
        cancellationToken);

    var action = await fixAllProvider
        .GetFixAsync(context)
        .ConfigureAwait(false);

    return await action
        .GetOperationsAsync(cancellationToken)
        .ConfigureAwait(false);
}
`</Code>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis v2.6.1, running on .NET Framework 4.7.1

**Steps to Reproduce**:

This is tricky - I have a program (not open-source) that applies code fixes across large amounts of solutions.

When upgrading it from Roslyn 2.2 to Roslyn 2.6.1, I encountered this exception.

**Expected Behavior**:

Program works as it used to.

**Actual Behavior**:

``

`fixAllProvider` comes from `Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider()`.

The cause of the crash appears to be that `differenceService` is null [here](</Description>
  </Issue>
  <Issue>
    <IssueID>24652</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Compiler is not consistent with the CLR for the underlying representation of bool</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Issue

Today the C# compiler does not emit code handling for `bool` that is consistent with the underlying representation of `bool` in the CLR.

The C# specification states:
&gt; The bool type represents boolean logical quantities. The possible values of type bool are true and false.

The spec also indicates that it is 1-byte. Specifically that the result of the `sizeof(bool)` expression is `1`.

While the ECMA 335 specification states:
&gt; A CLI Boolean type occupies 1 byte in memory. A bit pattern of all zeroes denotes a value of
false. A bit pattern with any one or more bits set (analogous to a non-zero integer) denotes a
value of true. For the purpose of stack operations boolean values are treated as unsigned 1-byte
integers (§III.1.1.1).

This can lead to confusion about the handling and cause various inconsistencies in various edge cases (see  for such a thread).

### Proposal

It would be good to determine:
* Should the spec be updated?
  * The spec would explicitly list the expected values of `true`/`false` so that two implementations don't behave differently
* Can the compiler be updated?
  * Given that we are emitting for the CLR, we would make our handling match the expected representations for the two boolean values (`0`/`not 0`) of the underlying platform

### Current Behavior

The majority of the behaviors below actually match the CLR expectation that a `bool` can be more than just `0` or `1`. However some of the behaviors (such as `&amp;&amp;`) does not match this expectation and can cause issues when interoping with any code that would assume otherwise (generally this is some kind of interop or unsafe code).

* `!value`
``</Description>
  </Issue>
  <Issue>
    <IssueID>24650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetOperation should succeed on local function with block and expression bodies</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>02/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the test below, `GetOperation` should not return `null` since the semantic model allows querying that piece of syntax.

``

Follow-up to </Description>
  </Issue>
  <Issue>
    <IssueID>24647</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda after Local Function will crash VS</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>By writing the following code:namespace LocalFunc{    class Program    {        static void Main(string[] args)        {            void Func() { } =&amp;gt; new object(); // invalid code        }    }}After couple of seconds VS will freez and crash with the following Stack trace from Event Viewer:Application: devenv.exeFramework Version: v4.0.30319Description: The application requested process termination through System.Environment.FailFast(string message).Message: System.NullReferenceException: Object reference not set to an instance of an object.   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionBodyAsBlock(ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp;amp; bindableNode, BoundNode&amp;amp; lowestBoundNode, BoundNode&amp;amp; highestBoundNode, BoundNode&amp;amp; boundParent)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, ISemanticFactsService semanticFacts, ISyntaxFactsService syntaxFacts, SyntaxToken token, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, SyntaxToken token, Workspace workspace, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;GetSemanticInfoAtPositionAsync&amp;gt;d__2.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindSymbolAtPositionAsync&amp;gt;d__1.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&amp;lt;GetDocumentHighlightsInCurrentProcessAsync&amp;gt;d__2.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&amp;lt;GetDocumentHighlightsAsync&amp;gt;d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;&amp;lt;TryNewServiceAsync&amp;gt;b__14_0&amp;gt;d.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;TryServiceAsync&amp;gt;d__15`1.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;ProduceTagsAsync&amp;gt;d__12.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&amp;lt;RecomputeTagsAsync&amp;gt;d__73.MoveNext()Stack:   at System.Environment.FailFast(System.String, System.Exception)   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&amp;lt;System.Exception&amp;gt;)   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()   at System.Threading.Tasks.Task.Execute()   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.Task.FinishContinuations()   at System.Threading.Tasks.Task.FinishStageThree()   at System.Threading.Tasks.Task.FinishStageTwo()   at System.Threading.Tasks.Task.Finish(Boolean)   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)   at System.Threading.Tasks.Task.FinishContinuations()   at System.Threading.Tasks.Task.FinishStageThree()   at System.Threading.Tasks.Task.FinishStageTwo()   at System.Threading.Tasks.Task.Finish(Boolean)   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()   at System.Threading.ThreadPoolWorkQueue.Dispatch()   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()The recorder is also crashing when trying to record the crash._This issue has been moved from VSTS ticketId: 557232__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24646</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Multi-target build task to net4x/netcoreapp20</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>.NET Standard msbuild tasks are problematic and just about everyone has converged on multi-targeting instead (including SDK and core nuget tasks).  is one example of the problems that can be hit. There are workarounds, but it is fragile.

Recently, the build task added a dependency on Pipes.AccessControl that is not part of the shared framework, so it needed to be included in the package. To do this, the netstandard1.3 was published dropping a bunch of other unnecessary dependencies next to the build tasks and breaking crossgen upon insertion in to the CLI.

Publishing a netstandard library is basically a broken scenario. See  which goes on to discuss warnings/errors for this case. When you publish, you should really use a "runnable" TFM like net46 or netcoreapp2.0.

For now, CLI is deleting the extra assemblies to unblock the insertion, but this isn't sustainable because it's implemented with fragile wild-cards ("System.*", but not Pipes.AccessControl) that are subject to change at any time. 

Assigning to @jaredpar as he asked me to do so offline.</Description>
  </Issue>
  <Issue>
    <IssueID>24644</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function can access a variable before initialization</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 15.5.5
**Steps to Reproduce**:

    internal class Program
    {
        private static void Main(string[] args)
        {
            var result = GuessWhatWillHappen();
            Console.WriteLine($"Is result null? {result == null}");
            Console.ReadLine();
        }

        private static string GuessWhatWillHappen()
        {
            SetStringValue();
            string foo = null;

            void SetStringValue()
            {
                foo = "bar";
            }

            return foo;
        }
    }

**Expected Behavior**:
"Cannot use local variable 'foo' before it is declared" or runtime error cannot access uninitialized variable 'foo'.


**Actual Behavior**:
When local funcion SetStringValue is called the foo is assigned the value of "bar" then the foo initialization code is reached and it is set to null
</Description>
  </Issue>
  <Issue>
    <IssueID>24643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Using ref-assembly feature breaks GoToDefinition</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 15.6.0 preview 3

**Steps to Reproduce**:
1. Create a solution with project A referencing project B where A calls a method defined in B
2. Add `&lt;ProduceReferenceAssembly&gt;true&lt;/ProduceReferenceAssembly&gt;` to the project file of project B
3. Press F12 on the call site where project A calls project B (works, goes to definition of B)
4. Compile project, restart VS
5. Press F12 on the call site where project A calls project B (fails, goes to ref-assembly stub)

**Expected Behavior**:
It should not matter whether the project was compiled in a previous VS instance, "go to definition" should always go to the definition in project B.

**Actual Behavior**:
If the project is compiled and VS is restarted, Roslyn uses the ref-assembly without connecting it to project B, and instead generates a source file from metadata when doing "go to definition". It does not go to the actual definition in project B.</Description>
  </Issue>
  <Issue>
    <IssueID>24641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generic extension method with `in this` parameter fails to compile</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
public static class C {
  public static ref readonly T E&lt;T&gt;(this ref T x) where T : struct =&gt; ref x;
}


**Expected Behavior**:

Successful compilation, the same as for `ref` extension version:
c#
public static class C {
  public static ref readonly T E&lt;T&gt;(this ref T x) where T : struct =&gt; ref x;
}
`</Code>
    <Description>**Version Used**: 

master branch @ feb 5

**Steps to Reproduce**:

Compile the following code:
``

**Actual Behavior**:

&gt; error CS8338: The first parameter of an 'in' extension method 'E' must be a value type
</Description>
  </Issue>
  <Issue>
    <IssueID>24640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio hangs while writing a set property body with a typo</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
     private string _hello;
     public string Hello
      {
            get =&gt; _hello;
            set =&gt; SetProperty)ref
      }
`</Code>
    <Description>While writing a property set body, and having a typo, VS hangs, e.g.:

``

And then attempt to remove the typo..

_This issue has been moved from 
VSTS ticketId: 562172_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Metadata file System.Runtime.dll could not be found</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
1.0.8

**Steps to Reproduce**:
Can only reliably reproduce on some servers

**Expected Behavior**:
The assembly compiles.

**Actual Behavior**:
The assembly doesn't compile, and the error message makes no sense.

We use Roslyn for compiling code inside our app. We've been using it for about a year or so and have had no issues. But, recently we've been getting this error when we try to compile. I can't recreate the problem locally. It works fine on my dev computer, but the problem is occurring on two different servers where we have the app deployed.

&gt; Compiler Error Number: CS0006
&gt; Error Text: Metadata file &amp;apos;C:\Windows\system32\config\systemprofile\AppData\Local\assembly\dl3\8GTGDQKQ.4QR\V42JN801.7NM\36a4366e\f1f27652_1972d301\System.Runtime.dll&amp;apos; could not be found

Here is a list of referenced DLLs. Note that System.Runtime.dll is not one of them:

&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll
&gt; C:\inetpub\wwwroot\Portal\AMS\Adapt.Model.Common.dll

If I add a reference to the version System.Runtime.dll that is packaged with the app (in the bin folder of the app), I get the same error message.

Why is the compiler looking for the DLL at C:\Windows\system32\config\systemprofile\AppData\Local\assembly\dl3\8GTGDQKQ.4QR\V42JN801.7NM\36a4366e\f1f27652_1972d301\System.Runtime.dll? I never told it to look there. Why won't the compiler accept the reference to System.Runtime.dll that I am giving it?

Note: on my local dev machine where the assembly DOES compile, I don't have to add any reference to System.Runtime.dll
</Description>
  </Issue>
  <Issue>
    <IssueID>24628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Analyzer gives wrong fix solution</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
if (arg == null) throw new ArgumentNullException();
var key = MakeKey(arg);
dict[key] = arg;


The analyzer suggests using throw expressions:

csharp
var key = MakeKey(arg);
dict[key] = arg ?? throw new ArgumentNullException();
`</Code>
    <Description>My code looks like:

``

But in fact the two are not identical because `MakeKey` method can have side effects.

_This issue has been moved from 
VSTS ticketId: 556384_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24627</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.InvalidOperationException: Unexpected value 'TypeExpression expression</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>07/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
CLR: Managed code called FailFast, saying "System.InvalidOperationException: Unexpected value 'TypeExpression expression of MyStruct&lt;MyStruct&lt;A, B&gt;, B&gt; type' of type 'System.String'
   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckInvocationArgMixing(SyntaxNode syntax, Symbol symbol, BoundExpression receiverOpt, ImmutableArray`1 parameters, ImmutableArray`1 argsOpt, ImmutableArray`1 argRefKindsOpt, ImmutableArray`1 argsToParamsOpt, UInt32 scopeOfTheContainingExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued(SyntaxNode node, SyntaxNode expression, String methodName, OverloadResolutionResult`1 result, AnalyzedArguments analyzedArguments, MethodGroup methodGroup, NamedTypeSymbol delegateTypeOpt, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()"
`</Code>
    <Description>**Version Used**:  2.6.1 (

**Steps to Reproduce**: 

1. Compile attached program: 

[Program.txt](

**Expected Behavior**: Compile error reported

**Actual Behavior**: Compiler crash

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>KirillOsenkov</FixedById>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SuggestedActionsSourceProvider is not resilient against documents that are not part of a workspace</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>16/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
NullReferenceException:

Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.&lt;GetFixLevelAsync&gt;d__40.MoveNext() in /_/src/EditorFeatures/Core.Wpf/Suggestions/SuggestedActionsSource.cs:line 736
`</Code>
    <Description>**Version Used**: 
adbce761b91992740c128b7d4233f51b49541e97

**Steps to Reproduce**:

1. Have a C# .cs document that is not a part of a workspace (content type must be CSharp)
2. Open that document in an editor

**Expected Behavior**:
SuggestedActionsSource should be resilient against the situation where the text view/buffer for the .cs document is not added to the workspace.

**Actual Behavior**:
``

In these locations, we need to gracefully deal with the fact that document may be null:




Note that this location already does the right thing:
</Description>
  </Issue>
  <Issue>
    <IssueID>24618</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC test scenario: Recursive function update</Title>
    <CreatedDate>03/02/2018</CreatedDate>
    <ClosedDate>03/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>24618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>24618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This scenario has been broken prior Dev15.7.

Validates that remap list contains as many entries as there are active frames that need remapping and entries that point to the same instruction are not de-duplicated (as they need to be used to remap all the affected frames).

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>24615</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>F12 on Span type includes unnecessary attributes</Title>
    <CreatedDate>03/02/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In a new .NET Core project, add a reference to `System.Memory` package from myget (see info below).
Then use `Span` in code and GoToDefinition.

The `IsByRefLike` and the `IsReadOnly` attributes are displayed.
This is likely a compiler problem. The `GetAttributes` method should filter those attributes out.

![image](

![image](

Tagging @VSadov @OmarTawfik 

Relates to  (`[Obsolete]`)
Relates to  (`[deprecated]`)
Relates to  (`in` parameters)</Description>
  </Issue>
  <Issue>
    <IssueID>24612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New generic class, No prompts if initialization</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>19/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The generic T constraint is a subclass of an interface with parameterless constructors, both A and B are properties of the interface new t{a=&amp;quot;&amp;quot;,b=&amp;quot;&amp;quot;}; The IDE does not hint_This issue has been moved from VSTS ticketId: 544394__These are the original issue comments:_Ariel Yang - MSFT on ‎12‎/‎26‎/‎2017, 08:36 PM (37 days ago): &lt;p&gt;Translated from bing :&lt;/p&gt;&lt;p&gt;A generic t constraint is a subclass of an interface with a parameterless constructor, and A and B are all properties of an interface&lt;br&gt;New T\{a= "", b= ""};&lt;br&gt;The IDE does not hint&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;Jinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:00 PM (25 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>List VBCSCompiler as a non-critical process</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Need to update our SWIX files to have the following entry:

``

This will allow setup to silently kill VBCSCompiler during installations vs. showing a popup to users. Need to update to the SWIX build 1.0.295 in order for this to take effect. 

</Description>
  </Issue>
  <Issue>
    <IssueID>24609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Quick Actions and Refactoring - Implementing Interface dumps a ton of "NotImplementedExceptions" after EVERY interface member</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is pretty ridiculous. I get it, these aren't implemented, but I don't need the hassle of choosing to go through and remove every single exception or having to load the interface and copy over the member definitions. It's ESPECIALLY stupid because any getter-setter property gets two of these giant freaking exceptions for both getter and setter.It's so bulky and stupid. I don't know who thought it'd be a good idea.Give us an option to just add them in without all the exceptions._This issue has been moved from VSTS ticketId: 545636__These are the original issue comments:_Jinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:51 PM (25 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: VisualBasicParseOptions.ValidateOptions localizes error argument eager.</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>CS
diagnostics.Add(
    messageProvider.CreateDiagnostic(code, Location.None, 
        new CodeAnalysisResourcesLocalizableErrorArgument(errorArgumentResourceId)));

It seems there isn't a VBResourcesLocalizableErrorArgument class (at least I couldn't find anything suitable).

@AlekseyTs
There is Microsoft.CodeAnalysis.VisualBasic.LocalizableErrorArgument type.
Alternatively, for consistency with other places where the same diagnostics is created (that is the approach I would prefer), we should be able to call Diagnostic.Create overload that takes DiagnosticInfo. Like this:
CS
Diagnostic.Create(ErrorFactory.ErrorInfo(ERRID.ERR_ConditionalCompilationConstantNotValid,
                                            ErrorFactory.ErrorInfo(ERRID.ERR_ExpectedIdentifier),
                                            symbol.Key))
`</Code>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetDiagnosticsTests.CompilingCodeWithInvalidPreProcessorSymbolsShouldProvideDiagnostics` on a non-english machine. (There are more tests affected by this bug. See the original PR for details).

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails because [VisualBasicParseOptions.ValidateOptions]( localizes the error argument eager.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

@Mastr11
The diagnostic under test is created here like so:
`builder.Add(Diagnostic.Create(MessageProvider.Instance, ERRID.ERR_ConditionalCompilationConstantNotValid, VBResources.ERR_ExpectedIdentifier, symbol.Key))`
If I got you you right it should be created like this one:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: BoundTupleExpression.Display returns a string instead a FormattableString</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErrTuples` on a non-english machine.

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails for Diagnostics with a `BoundTupleExpression` because `BoundTupleExpression.Display` returns a localized string (e.g. German during the test run). BoundTupleExpression.Display should return a formattable string instead. There are some more tests that also fail. See the original PR for details.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

@Mastr11
The diagnostic is created [here]( and the argument is created via  `argument.Display` 
The problem here is that the [BoundTupleExpression.Display]( uses a stringbuilder. So the argument is a text as opposed to a `LocalizableErrorArgument`. I don't see any straight forward way on how to resolve this. @AlekseyTs I would propose to revert my changes here and let the test fail on non english machines for now. 

@AlekseyTs 
It would be great if you could fix it because you can easily verify the effect, but it is up to you.
I think there is a simple fix for BoundTupleExpression.Display. Instead of building complete string, we can build a format string with argument markers and collect arguments in an array. Then we call to System.Runtime.CompilerServices.FormattableStringFactory.Create and return its result.
There is also an issue with

``

This one can be fixed by creating an object that is very similar to LocalizableErrorArgument, that calls Format after getting the string for requested culture.</Description>
  </Issue>
  <Issue>
    <IssueID>24602</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: CodeGenRefReturnTests.RefReturnLateBoundCall</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>02/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenRefReturnTests.RefReturnLateBoundCall` on a non-english machine.

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails because the `expectedOutput:="Public member 'G' on type 'A' not found."` is culture dependent.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

``

@AlekseyTs:

&gt; Modify code in the Main function above to change to invariant culture and restore at the end. The same way as it is done in Spilling_ExceptionInArrayAccess unit test for example.</Description>
  </Issue>
  <Issue>
    <IssueID>24591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move to a 2.1.300-preview build of .NET Core SDK</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently the roslyn build depends on a daily build of .NET Core SDK 2.2.0-preview.  However, following  the .NET Core SDK release that was going to be named 2.2 is now named 2.1.300.  So recent 2.1.300 builds are actually newer than historical 2.2.0 builds. 

Roslyn moving to a 2.1.300 build helps in several ways:

1. We shouldn't reference 2.2.0 SDK in the contributor docs since it no longer corresponds to a real upcoming version of the SDK.
2. Installing a 2.2.0 build on your machine will shadow 2.1.300 so you'll be using this build instead of a 2.1.300 preview (that is really newer) in projects without global.json (*)
3. We'd like to get roslyn on to a newer build to get more dogfooding coverage of recent SDK changes (particularly around build perf).

(*) Folks should also be instructed somewhere to uninstall any 2.2.0-preview on their machines when installing 2.1.300-preview.

cc @jaredpar 

</Description>
  </Issue>
  <Issue>
    <IssueID>24584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misleading CS1628 error message for "in" parameters</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public readonly struct Point {
    public Struct(int x, int y) {
        X = x;
        Y = y;
    }
    public int X { get; }
    public int Y { get; }
}

public IEnumerable&lt;Point&gt; FindMatching(
    this IEnumerable&lt;Point&gt; points, 
    in Point toMatch) {
    return point.Where(p =&gt; p.X == point.X &amp;&amp; p.Y == point.Y);
}


**Expected Behavior**:

Error message mentioning the `in` parameter

**Actual Behavior**:


error CS1628: Cannot use ref or out parameter 'toMatch' inside an anonymous method, lambda expression, or query expression
`</Code>
    <Description>**Version Used**: 7.2

**Steps to Reproduce**:

``

The parameter is not marked `ref` or `out`</Description>
  </Issue>
  <Issue>
    <IssueID>24574</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>add [Obsolete] and checkin VS side change for this change - https://github.com/dotnet/roslyn/pull/24512</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> added shim and it require vs side change (

make sure to add [Obsolete] to shim once vs side change is in.</Description>
  </Issue>
  <Issue>
    <IssueID>24938</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>24938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Strange IOperation tree for single-statement lambda.</Title>
    <CreatedDate>20/02/2018</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>24938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>24938</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
Action a = () =&gt; {
            Console.WriteLine();
        };
`</Code>
    <Description>I've got the following lambda:

``

The IOperation tree here is not quite what i expected. Specifically, the IAnonymousFunctionOperation has a body with *two* operations in it.  One operation is the ExpxressionStatement corresponding to Console.WriteLine();.  The second is an Implicit ReturnStatement.  

is that expected?  Seems very strange to me that there's any sort of return statement placed here for this lambda.  

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>24936</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>It looks like SemanticModel.GetMemberGroup always return an empty set for a ConstructorInitializerSyntax</Title>
    <CreatedDate>19/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24936</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Expected:
Perhaps should return a group of constructors?</Description>
  </Issue>
  <Issue>
    <IssueID>24933</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>*</Title>
    <CreatedDate>19/02/2018</CreatedDate>
    <ClosedDate>19/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>24933</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**bug recalled**</Description>
  </Issue>
  <Issue>
    <IssueID>24932</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash on arm/arm64 with mono due to missing memory barriers</Title>
    <CreatedDate>19/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24932</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24932</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

2.6.0. Doesn't matter

**Steps to Reproduce**:

I've seen random roslyn crashes / compilation errors with mono ever since switching to it for building the BCL (on arm/arm64 linuxes)
For reproduction you just need to build mono, but the bug is extremely evasive. I have reliably reproduced it on a scaleway.com arm64 vm and also on a compulab utilite2. I can provide access to a machine where it should be easy to reproduce.

**Expected Behavior**:

Don't crash 

**Issue**:

As far as I've investigated the crashes and my small understanding of object pools, it looks like missing memory barriers here 

The thread that owns the object and puts it back for reuse doesn't use any synchronisation primitives, so the thread that will reuse this freed object is not guaranteed to see the correct state of the freed object.
</Description>
  </Issue>
  <Issue>
    <IssueID>24923</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>24923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuildWorkspace.OpenProjectAsync cannot resolve $(Configuration) correctly</Title>
    <CreatedDate>18/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24923</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:

1. Use `MSBuildWorkspace.OpenProjectAsync` to open a ProjectA that references a ProjectB dll using a hint path as follows:
``
2. Make sure to build in Release **only**.

**Expected Behavior**:
The types in ProjectB to load correctly.

**Actual Behavior**:
The types in ProjectB are unavailable.

Replacing `$(Configuration)` with `Release` fixes the issue, which shows that `MSBuildWorkspace` is replacing `$(Configuration)` with `Debug` instead of `Release`.
</Description>
  </Issue>
  <Issue>
    <IssueID>24922</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>I my doing my project in asp.net using c#</Title>
    <CreatedDate>18/02/2018</CreatedDate>
    <ClosedDate>19/02/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>24919</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow collapsing of large, multi-line string literals.</Title>
    <CreatedDate>17/02/2018</CreatedDate>
    <ClosedDate>23/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24919</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24919</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24919</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Title is self explanatory :)  I have some large constant strings in my file.  It's unfortunate i can't collapse them like any other large construct.

Tnx!</Description>
  </Issue>
  <Issue>
    <IssueID>24907</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Wrong "Format document" for C# code with inconsistent line endings</Title>
    <CreatedDate>17/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24907</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24907</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When file has inconsistent line endings, &amp;quot;Format document&amp;quot; does not work as expected. It adds empty lines to c# code.Please see attached file. It is using CR+LF but in comment element there is only LF ending.Open file in VS2015 or VS2017, ignore &amp;quot;Inconsistent file ending&amp;quot; warning if it pops up (or better disable this option before) and use Ctrl+K,D command (or Format document from menu). Empty lines are added after summay element.See attached files._This issue has been moved from VSTS ticketId: 567458__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24906</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method with Local Function</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24906</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24906</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24906</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I selected some code that contained a local function to extract the method.It created the method without arguments.For example...string user = &amp;quot;Mark&amp;quot;;// Start swipe&amp;lt;A block with some statements using user&amp;gt;&amp;lt;A local void function, also with arguments, called from the block above&amp;gt;// End swipeCreated...NewMethod() instead ofNewMethod(user)_This issue has been moved from VSTS ticketId: 565295__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24905</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Find All References not working with var</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24905</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24905</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Find All References done on a class name does not return usages of this class if var is used instead of the class name.In this example, Find All References done on the class name in the class definition (first line) finds the line 13 where class name is used (TestObject o2 = GetTestObject()) but not the line 12 where var is used (var o1 = GetTestObject())public class TestObject{}private TestObject GetTestObject(){	return new TestObject();}private void Test(){	var o1 = GetTestObject();	TestObject o2 = GetTestObject();}Found in VS 15.5.5 but it seems it was already like that in VS 2015.Thank you._This issue has been moved from VSTS ticketId: 563885__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24900</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No IOperation node returned for an ArrowExpressionClauseSyntax, which is PropertyDeclarationSyntax.ExpressionBody, in erroneous scenarios.</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24900</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24900</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>24900</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24900</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>24899</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Latest Microsoft.CodeAnalysis nupkg still contains version 1.1.0 of Microsoft.CodeAnalysis.Analyzers</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>05/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24899</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24899</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24899</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:

1. Install Microsoft.CodeAnalysis version 2.6.1 as a NuGet package reference to a C# console app
2. Check the version of Microsoft.CodeAnalysis.Analyzers that comes along with the package

OR
1. Create a new Analyzer with Code Fix project
2. Upgrade the Microsoft.CodeAnalysis.CSharp.Workspaces NuGet reference to 2.6.1
3. Check the version of Microsoft.CodeAnalysis.Analyzers that comes along with the package

**Expected Behavior**:
Latest stable version 2.6.0 of Microsoft.CodeAnalysis.Analyzers ( built on top of Microsoft.CodeAnalysis 2.6.0

**Actual Behavior**:
Version 1.1.0 of Microsoft.CodeAnalysis.Analyzers </Description>
  </Issue>
  <Issue>
    <IssueID>24898</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Support .editorconfig option for new line before constructor initializers</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24898</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    protected VSSDK003SupportAsyncToolWindowAnalyzerTests(ITestOutputHelper logger)
        : base(logger)
    {
    }


**Actual**

csharp
    protected VSSDK003SupportAsyncToolWindowAnalyzerTests(ITestOutputHelper logger) : base(logger)
    {
    }
`</Code>
    <Description>The [.editorconfig doc for newline settings]( is lacking any option for complying with [SA1128]( (constructor initializers should be placed on their own line). Can one be added so that generated constructors (when I derive from a class with a non-default constructor) are formatted per StyleCop rules?

**Expected**

``</Description>
  </Issue>
  <Issue>
    <IssueID>24896</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Convert var to explicit type name.</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>12/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24896</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>light bulb to convert `var` to explicit type name and vice versa would be useful. (similar in resharper)</Description>
  </Issue>
  <Issue>
    <IssueID>24888</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Much slower debugger whith conditional break points</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24888</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>24888</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm not sure if this is the right place. 

I'm wondering why breakpoints with condition are much slower than normal breakpoints or no breakpoints.

If I put no breakpoint and run my program it takes about 1 second to finish. If I put conditional break point it takes 5 seconds to reach that break point. 

 obviously doing nothing is faster than doing something. but a simple condition like `p &gt;= 757000` shouldn't cause that much performance hit.

Is this normal? </Description>
  </Issue>
  <Issue>
    <IssueID>24887</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler ignore `new` keyword for properties</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>16/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>24887</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
    public class TestClassBase
    {
        public string Test { get; set; }
    }

    public class TestChildClass : TestClassBase
    {
        public new double Test
        {
            get { return 35;}
            set { base.Test = value.ToString(); }
        }
    }

2. Compile this code with Roslyn:

            var references = new List&lt;MetadataReference&gt;();
            var allAssemblies = AppDomain.CurrentDomain.GetAssemblies();
            foreach (var asm in allAssemblies)
            {
                if (asm.IsDynamic) continue;
                references.Add(MetadataReference.CreateFromFile(asm.Location));
            }

            var text = File.ReadAllText("E:\\Test\\Test\\Class1.cs");
            var tree = CSharpSyntaxTree.ParseText(text);

            var options = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary,  optimizationLevel: OptimizationLevel.Release, assemblyIdentityComparer: AssemblyIdentityComparer.Default);
            var compilation = CSharpCompilation.Create("Test.dll", new[] { tree }, references, options);
            using (var file = new FileStream("E:\\Test.dll", FileMode.Create))
            {
                EmitResult result = compilation.Emit(file);
                Console.WriteLine(result.Success);
            }

`result.Success` return `true`
3. Decompilate `Test.dll` (I use dotPeek)

**Expected Behavior**:
I want to see this code:

namespace Test
{
  public class TestClassBase
  {
    public string Test { get; set; }
  }
  
  public class TestChildClass : TestClassBase
  {
    public new double Test
    {
      get
      {
        return 35.0;
      }
      set
      {
        base.Test = value.ToString();
      }
    }
  }
}

**Actual Behavior**:
But i see this:

namespace Test
{
  public class TestClassBase
  {
    public string Test { get; set; }
  }
  
  public class TestChildClass : TestClassBase
  {
    public double Test
    {
      get
      {
        return 35.0;
      }
      set
      {
        this.Test = value.ToString();
      }
    }
  }
}
`</Code>
    <Description>**Version Used**: 
All libs are 2.6.0.0:
Microsoft.CodeAnalysis
Microsoft.CodeAnalysis.CSharp
Microsoft.CodeAnalysis.CSharp.Workspaces

**Steps to Reproduce**:

1. Write some code, for example:
``
As u see, `Test` property in `TestChildClass` generated without `new` keyword, and in `set` replace `base` on `this`. 

Problems with `this.Test = value.ToString();`:
1. This is compilation error
2. This is recursive call

Besides, I add `Test.dll` in my console application. When i tried to start it, i get a *System.IO.FileNotFoundException: Could not load file or assembly "Test.dll, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"*</Description>
  </Issue>
  <Issue>
    <IssueID>24886</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>kuhlenh</FixedById>
        <IssueID>24886</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find All References should give a better message when not invoked on a symbol</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24886</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I thought FAR was broken every 1 out of 10 searches because it stated:

![image](

Turns out, 1 out of 10 searches I miss the symbol and do a FAR on whitespace, and it shows the above.

Other commands give a better indication that haven't chosen a symbol, FAR should do the same thing.</Description>
  </Issue>
  <Issue>
    <IssueID>24885</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer packages are hard to create and do right</Title>
    <CreatedDate>16/02/2018</CreatedDate>
    <ClosedDate>17/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24885</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24885</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Properly packaging up analyzers is not automatic. .NET SDK projects that contain analyzers pack themselves with the analyzer assembly in the lib folder instead of the `analyzers\cs` folder. Fixing this requires suppressing default lib folder placement then writing a custom target to output the right set of assemblies. Care is required to properly suppress all (or most) package dependencies including to Roslyn itself.

[StyleCop.Analyzers]( discovered and [others]( later did as well, the little known fact that analyzers must not reference the roslyn Workspaces package although their code fixes are required to. To do this reliably, one must split these into *two* assemblies, yet we want to package them up together, which again the .NET SDK pack target makes awkward. Consider a package called My.Analyzers with these assemblies:

My.Analyzers.dll
My.Analyzers.CodeFixes.dll

I tend to want My.Analyzers.CodeFixes.dll to reference My.Analyzers.dll (so that the code fixes can reference the analyzer Id property, share utilities, etc.) But that means I have to make my CodeFixes project do the actual packaging. This is particularly awkward because the package will be given the name of the first project, which NuGet doesn't like unless I give the first project an artificial package ID that won't matter since I need to set IsPackable=false on the analyzer project so that I don't get an analyzer-only package too. Gah! So many things to do. You can see this all in the VSSDK-Analyzers PR that I link to above.

We also have satellite assemblies for some of our analyzers.

Then we have versioning: what version of Roslyn should an analyzer compile against? We want to compile against the latest so we do the right thing when C# 7.1 syntax is encountered, but then we want to keep working on VS2015. Can the package layout include analyzer versions (ala target frameworks) so we can offer analyzer\cs71 and analyzer\cs60 folders side-by-side in the package?

Can all this be simplified, both in build authoring, and with a (multi-)project template in VS?</Description>
  </Issue>
  <Issue>
    <IssueID>24881</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisualBasicSyntaxTree.ParseText with SourceCodeKind.Script option does not always parse Dim statements correctly</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24881</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24881</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
SyntaxTree scriptTree = VisualBasicSyntaxTree.ParseText(
    "Dim foo As Integer = 4",
    new VisualBasicParseOptions(kind: SourceCodeKind.Script)
);

2. Examine the resulting tree by standard methods such as the debugger, or a visitor impl like the following:
cs
public class VBVisitor : VisualBasicSyntaxWalker
{
    static int Tabs = -1;
    public override void Visit(SyntaxNode node)
    {
        Tabs++;
        var indents = new String(' ', Tabs * 2);
        Console.WriteLine(indents + (node as VisualBasicSyntaxNode).Kind());
        base.Visit(node);
        Tabs--;
    }
}
`</Code>
    <Description>**Version Used**: 
v2.6.1 of all NuGet packages

**Steps to Reproduce**:

1. Create a SyntaxTree similar to the following. The only requirement for the script being parsed is that there is a variable declaration at the top block (i.e. not within a loop or if statement).

``

**Expected Behavior**:

Expected the SyntaxNode representing the Dim statement to be a LocalDeclarationSyntax

**Actual Behavior**:

The SyntaxNode representing the Dim statement came out as a FieldDeclarationSyntax

In my case I was able to fix using a Rewriter that visits all FieldDeclarations and changes them to LocalDeclarations, but I'm not sure if the behavior demonstrated currently is correct or not.</Description>
  </Issue>
  <Issue>
    <IssueID>24880</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Offer variable name suggestions in a Rename session</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24880</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24880</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24880</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We currently offer "smart" variable name suggestions while you are typing, but we don't do it when you are renaming...</Description>
  </Issue>
  <Issue>
    <IssueID>24879</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Is pattern matching not supposed to be used like this?</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>15/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24879</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>24879</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24879</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
C# 7.1

**Steps to Reproduce**:

![grafik](

**Expected Behavior**:
no initializer error
**Actual Behavior**:
initializer error

A workaround is to rename variables on the end of it with another pattern matching expression, which is obviously rather ugly. Could pattern matching be modified so the null check resolves this issue?
</Description>
  </Issue>
  <Issue>
    <IssueID>24878</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go To All : Include Go To Recent Files</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24878</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24878</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Prioritize recent/open files in Go To All because most of the time developers are working in the same set of files. This will also probably help with "perceived performance".</Description>
  </Issue>
  <Issue>
    <IssueID>24877</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>24877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Categorize References by Read/Write</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>03/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>24877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24877</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The C++ team has this in their Find All References, where users can filter to see only read/write usages.

Relates to </Description>
  </Issue>
  <Issue>
    <IssueID>24875</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>take advantage of Trackspan of ITextImage that are used as underlying implementation of SnapshotSourceText</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24875</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>currently, in a lot of places, we move back and forth between roslyn SourceText to Editor ITextSnapshot just to move some span around between snapshots.

if we make SourceText to be able to do so (even for internal only), we probably can remove many places where we need to find Editor ITextSnapshot from SourceText.</Description>
  </Issue>
  <Issue>
    <IssueID>24874</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>24874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ref reassignment should propagate `readonly` as proposed.</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>05/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Ref Reassignment</Name>
        <IssueID>24874</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- if LHS is readonly, the whole expression is readonly

It looks like the logic above is NYI.

Example:

``</Description>
  </Issue>
  <Issue>
    <IssueID>24873</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IsSafeForReordering forwards unboxing conversion to the underlying operand. Is that correct?</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24873</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Technically unboxing is not sideeffects-free, since it can throw.

Same goes for other explicit conversions. If they can throw, are they not reorderable regardless of the operand?
</Description>
  </Issue>
  <Issue>
    <IssueID>24872</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Accept License Terms?</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>15/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>24872</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24872</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there an approved set of license terms that have to be accepted? Before the user can install a roslyn derived compiler VSIX? That is one that is non-official release, or still experimental.

So the we (Microsoft and releasee) can't accept liability for any loses from using it.</Description>
  </Issue>
  <Issue>
    <IssueID>24871</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>24871</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Run .Ruleset files using .build files+vs2017</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>25/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24871</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>24871</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
# Run .Ruleset files using .build files
How to use code analysis in vs2017 to create .ruleset file.Have to create manually or any tool available.
How to create .ruleset file having  .net libraries  (custom rulesets) and include ruleset file in .build file.
Build the solution in command prompt (Vs2017)
we have support to run rulseet files using .build files ?
or 
Any tools to run ruleset file while building the solution.</Description>
  </Issue>
  <Issue>
    <IssueID>24869</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>StackOverflowException reporting error in overload resolution</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>19/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24869</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Compile:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24868</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Completion after using keyword should be in suggestion mode</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>15/02/2018</ClosedDate>
    <IssueLabels />
    <Description>If I type using, completion comes up with a list of namespaces. However, it's in completion mode. If I try to type an alias (e.g. using BF = System.Reflection.BindingFlags) it interferes with me typing the alias. It should be in suggestion mode.</Description>
  </Issue>
  <Issue>
    <IssueID>24865</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>24865</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler does not detect exhaustive bool switch</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24865</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24865</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>24865</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

public class C {
    public void M(bool e) {
        bool b;
        switch (e) {
            case true:
                b = true;
                break;
            case false:
                b = true;
                break;
        }
        Console.WriteLine(b); // error CS0165: Use of unassigned local variable 'b'
    }
}
`</Code>
    <Description>Reported by @HaloFour in 

The compiler does not determine `b` to be definitely assigned unless you also have `default` case which assigns `b`:

``

That's clearly exhaustive.</Description>
  </Issue>
  <Issue>
    <IssueID>24856</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ctrl+Alt+Click for Go To Implementation</Title>
    <CreatedDate>15/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24856</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24856</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Several developers have asked us to extend Ctrl+Click for Go To Definition to work for Go To Implementation. They are expecting "Ctrl+Alt+Click" to take them to Implementations.

&gt; Note: if we are considering inlining GoToImpl results (rather than bringing a search result window), these two features would pair well together to round off the feature.</Description>
  </Issue>
  <Issue>
    <IssueID>24853</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24853</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Introduce Local: multiple unnecessary casts generated and also not grayed out</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24853</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24853</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24853</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This came up while working on Roslyn test `RefReadOnlyIsWrittenToMetadata_SameAssembly_Method` in PR 

Select `((PEModuleSymbol)module)` and invoke "Introduce Local" for all occurrences. The generated code is peppered with unnecessary casts.

![image](

![image](

Other simplifications were not made either:
![image](

Note: I've run into a similar [issue ]( (unnecessary cast not simplified, when invoking "Inline Temp") a couple of days ago. I hope there is not a more systematic issue here. I haven't had this problem before.
Tagging @jinujoseph FYI</Description>
  </Issue>
  <Issue>
    <IssueID>24850</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky Test - Skipped PasteCommandWithOutInteractiveFormat test</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>24850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24850</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

PasteCommandWithOutInteractiveFormat test is being skipped.</Description>
  </Issue>
  <Issue>
    <IssueID>24846</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky Test - TestRegionCompletionCommitFormatting</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>06/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>24846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24846</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Projections.TestRegionCompletionCommitFormatting is skipped because it is flaky. </Description>
  </Issue>
  <Issue>
    <IssueID>24845</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Document encoding can throw in SourceTextStream.Read</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>24845</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6 Preview 5 /  2.7.0.62608

1. Enable the Gothic input language. Note this is not an out of BMP issue, but makes the repro easier.
2. Create a new console application.
3. Type any letter on the Gothic keyboard into the code, for example to replace the main method name.

Visual Studio crashes. (Also an extension might throw an UriFormatException in activity log #19542).

If the crash does not occur, use Advanced save options to ensure the document is saved in some ANSI, non-Unicode encoding (which is sadly the default) before step 3.
 
The [SourceTextStream]( uses document's throwing encoding if available, for text that has potentially not been stored in that encoding. If a file cannot be saved in a codepage, Visual Studio either automatically or after prompt saves the document in Unicode (depending on Options &gt; Environment &gt; Documents &gt; Save documents as Unicode when data cannot be saved in codepage). **All operations on unsaved text data (code analysis, background compilation, etc.) should not use the encoding of dirty files since the unsaved text might not be valid in that encoding.**</Description>
  </Issue>
  <Issue>
    <IssueID>24844</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Typing does not produce any out of BMP characters during rename session</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24844</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6 Preview 5 / 2.7.0.62608

**Steps to Reproduce**:

1. Enable Gothic input language
2. Create a new console application.
3. Enter renaming session, e.g. press F2 to rename the Program class name.
4. Type using the Gothic keyboard.

**Expected Behavior**: Typing renames the class.

**Actual Behavior**: Nothing happening.

Might be related to #24845
</Description>
  </Issue>
  <Issue>
    <IssueID>24841</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected overload used for completion in incomplete code</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24841</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  15.5.5

**Steps to Reproduce**:

write this class

    public class Test&lt;TKey, TValue&gt;
    {
        public void AddOrUpdate(TKey key, TValue value, Func&lt;(TKey key, TValue newValue, TValue oldValue), TValue&gt; updateFunction)
        {
        }

        public void AddOrUpdate(TKey key, Func&lt;TKey, TValue&gt; addFunction, Func&lt;(TKey key, TValue oldValue), TValue&gt; updateFunction)
        {
        }

        public void AddOrUpdate&lt;TArg&gt;(TKey key, TArg arg, Func&lt;(TKey key, TArg arg), TValue&gt; addFunction, Func&lt;(TKey key, TArg arg, TValue oldValue), TValue&gt; updateFunction)
        {
        }
    }

then write this code snippet for test

    new Test&lt;int, int&gt;().AddOrUpdate(key: 0, new object(), t =&gt; t.); // see suggestions for "t."

**Expected Behavior**:

I expect to get suggestions `key` and `arg` when typing `t.`, because `object` is not assignable to `int` so first overload and second overload are really out of list and intellisense should already know that.

**Actual Behavior**:

I get suggestions `key`, `oldValue` and `newValue`. if I remove first overload I still get `key` and `oldValue`.

Only if I use named parameter `arg:` then I get correct suggestions.

    new Test&lt;int, int&gt;().AddOrUpdate(key: 0, arg: new object(), t =&gt; t.); // correct suggestions.
</Description>
  </Issue>
  <Issue>
    <IssueID>24839</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>24839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Scripting not working on Server - Method not found exception</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24839</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  
2.6.1

**Steps to Reproduce**:

1. Create a VisualStudio Solution with Template SharePoint Empty Project
2. Add a Visual Webpart to the Project and insert a CSharpScript-Snippet to be run or evaluated to the Page_load.Method

**Expected Behavior**: 
it should run (as it does with version 1.3.2)

**Actual Behavior**: 
Error thrown - Method not found: 'System.Collections.Immutable.ImmutableArray`1&lt;Byte&gt; System.Reflection.Metadata.MetadataReader.GetBlobContent(System.Reflection.Metadata.BlobHandle)'


I think there is an issue within the GAC of the Sharepoint-Server, as there were also errors concerning wrong versions of Microsoft.Codeanalysis und System.Collections.Immutable in the GAC. After installing these versions to the GAC (and consequently having multiple versions of them installed), the error  shown in **Actual Behavior** occurs. 

Thank you for your help</Description>
  </Issue>
  <Issue>
    <IssueID>24837</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>use Dispose/Disposing pattern in Connection</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>24837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>24837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Applicable</Name>
        <IssueID>24837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>RemoteHostClient.Connection. use Dispose/Disposing pattern.</Description>
  </Issue>
  <Issue>
    <IssueID>24836</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider removing SessionWithSolution so that we can make connection truely stateless</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>24836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-OOP</Name>
        <IssueID>24836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>right now, we have this


that has 


just to remove Solution from each call. not sure whether that's worth it since it just makes things complex since connection becomes stateful.

we might consider just remove that one and make all call to give the solution in and make connection stateless.</Description>
  </Issue>
  <Issue>
    <IssueID>24835</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ErrorLog and suppressed errors lead to error in csc.dll</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>23/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24835</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
dotnet --info
.NET Command Line Tools (2.1.2)

Product Information:
 Version:            2.1.2
 Commit SHA-1 hash:  5695315371

Runtime Environment:
 OS Name:     Windows
 OS Version:  6.3.9600
 OS Platform: Windows
 RID:         win81-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.1.2\

Microsoft .NET Core Shared Framework Host

  Version  : 2.0.3
  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df


**Steps to Reproduce**:

1. ``PS E:\Projekte\!Test\ErrorLogTest&gt; dotnet new console``
2. ``PS E:\Projekte\!Test\ErrorLogTest&gt; dotnet add package Microsoft.CodeAnalysis.FxCopAnalyzers``

3. Disable CA1801 using ``#pragma warning disable CA1801``:

using System;
namespace ErrorLogTest
{
    class Program
    {
        #pragma warning disable CA1801
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        } }}

4. Build the project treating warnings as errors and log analysis report to report.json
``dotnet build /p:TreatWarningsAsErrors=true /p:ErrorLog=report.json``

**Expected Behavior**:
An assembly is build and the CA1801 is logged in report.json

**Actual Behavior**:

Build FAILED.
C:\Program Files\dotnet\sdk\2.1.2\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.dll" exited with code 1. [E:\Projekte\!Test\ErrorLogTest\ErrorLogTest.csproj]
    0 Warning(s)
    1 Error(s)
`</Code>
    <Description>**Version Used**: 
``
The report.json is created correctly regardless and contains the CA1801 error as suppressedInSource.

**Additional Information**:
* This happens with every CA and SA rule.
* Not using ``/p:ErrorLog``, ``/p:TreatWarningsAsErrors=true``, or not suppressing the CA1801 all lead to everything working as expected.

</Description>
  </Issue>
  <Issue>
    <IssueID>24827</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can we get NormalizeWhiteSpace that Preserves LineFeeds</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>26/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
All
**Steps to Reproduce**:
1. Add extra EndOfLine Trivia or Put EndOfLIne Trivia after OperandTokens
2. Call NormalizeWhiteSpace
3. This is specifically for VB but it may apply to all languages

**Desired Behavior**:
The EndOfLine Trivia is preserved
**Actual Behavior**:
All unrequired EndOfLine Trivia are removed

Today I need to call NormalizeWhiteSpace for indenting and adding whitespace around tokens but I want to breakup long lines. I have two choices, don't call NormalizeWhiteSpace and I get the CRLF 's I want but a program what will not compile
``

</Description>
  </Issue>
  <Issue>
    <IssueID>24826</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature request] Offer completion when defining a variable that is already used but squiggled</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I've run into this situation a few times, where I use a non-existing variable first, and then want to define it. When typing that definition, IntelliSense doesn't help typing the same identifier.

![image](

This could be extended to offer variable identifiers that already exist elsewhere in the code, since there is much re-use.

@CyrusNajmabadi Any thoughts?

I've not prototyped yet, but two implementation problems seem salient:
- currently, no completion is offered in such spot, rather than some soft completion. I don't know if that will be easy to relax without opening a dam and getting too many completions offered.
- I'm not sure how to efficiently list diagnostics within a certain scope, to collect squiggled identifiers. Any tips?</Description>
  </Issue>
  <Issue>
    <IssueID>24825</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Rename buffers are slow in the F# editor in a .NET Core SDK project</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 15.6 Preview 4

**Steps to Reproduce**:

Code:

``

Rename on `validateQuery` and type fast-ish. Then do it again.

**Expected Behavior**:

All buffers in the editor change as I type.

**Actual Behavior**:

Severe lag:

![rename-buffer-slow](
</Description>
  </Issue>
  <Issue>
    <IssueID>24823</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add CamelHumps selection similar to that of resharper</Title>
    <CreatedDate>14/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>ReSharper has a CamelHumps option which lets you select segments of text based on the casing. Using Ctrl+Shift + left or right will select segments of CamelCasedText instead of the entire thing. I'd really like to see visual studio support this out of the box._This issue has been moved from VSTS ticketId: 419362__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24816</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>csc.runtimeconfig.json is not correctly generated and is broken by additional deps light-up</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels />
    <Description>In Azure AppService ASP.NET Core ligthup scenario we bring additional deps and runtime store for 2.1-* runtime and set `DOTNET_ADDITIONAL_DEPS/ASPNETCORE_HOSTINGSTARTUPASSEMBLIES` environment variables that affect all dotnet processes 

`csc.runtimeconfig.json` has TFM set to `netcoreapp2.0` but shared framework version `2.1.0-preview1-26116-04` which causes additional deps file to be resolved from `2.1.0-preview1-26116-04` hive while runtime store is resolved from `netcoreapp2.0` hive that doesn't even exists (we only care about 2.1). Corehost running csc.dll is unable to resolve libraries from additional deps and crashes.

# csc.runtimeconfig.json 
``

/cc @eerhardt</Description>
  </Issue>
  <Issue>
    <IssueID>24815</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Umbrella] Make `dynamic` understand new language features.</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24815</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24815</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is an umbrella bug for all the issues related to **dynamic** is not being on parity with static compiler one way or another.

The reality is that while static version of the language is implemented here in  , the run-time behavior of the `dynamic` requires more. 

The behavior of `dynamic` is implemented mostly in the dynamic binder which is a run-time component. Any work to support new language features would need to be done in that component, possibly in coordination with the static compiler - to ensure that it passes enough information to be used at run-time.

The problem here is 
* versioning (what happens if old binder is used? the feature should still be blocked if possible)

* servicing of the .NET FX version of the binder.
While changes to the Core FX could be done relatively easy, matching that on the .NET FX side is harder.  
.NET FX has different release cadence and different bar for fixes, and that also depends on version/milestone. 

As a result - It is hard to tell at the moment when we can implement major changes/fixes to the dynamic binder.

See also 

#### The following expression forms do not "work" with dynamic
- [ ] The null-conditional operators `?.` and `?[]`
- [ ] Tuple deconstruction
- [ ] Pattern-matching
- [ ] Some situations involving ref locals and returns
</Description>
  </Issue>
  <Issue>
    <IssueID>24814</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Static array of static arrays enumeration causes NRE</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>21/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>24814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
dotnet --info
.NET Command Line Tools (15.5.0-preview-007044)

Product Information:
 Version:            15.5.0-preview-007044
 Commit SHA-1 hash:  278cbf6c44

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.16299
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\15.5.0-preview-007044\

Microsoft .NET Core Shared Framework Host

  Version  : 2.1.0-preview2-26131-06
  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c


**Steps to Reproduce**:

csharp
using System;
using System.Collections.Generic;

namespace ConsoleApp75
{
    class Program
    {
        static void Main(string[] args)
        {
            foreach (var t in All())
            {
                Console.WriteLine(t);
            }
        }

        static IEnumerable&lt;string&gt; All()
        {
            foreach (var arr in ab)
                foreach (var el in arr)
                    yield return el;
        }

        static string[][] ab = new[] { a, b };
        static string[] a = new[] { "a", "b", "c" };
        static string[] b = new[] { "d", "e", "f" };
    }
}


**Expected Behavior**:

Prints letters or compile error

**Actual Behavior**:


Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at ConsoleApp75.Program.&lt;All&gt;d__1.MoveNext() in &lt;path&gt;\ConsoleApp75\ConsoleApp75\Program.cs:line 19
   at ConsoleApp75.Program.Main(String[] args) in &lt;path&gt;\ConsoleApp75\ConsoleApp75\Program.cs:line 10
`</Code>
    <Description>Not sure if this is compiler or some other component so putting here for now for triage. If this is not meant to work then at least compiler error or warning would be useful.
Switching field order (ab in the end) fixes the problem.

**Version Used**:

Also repros on full framework (.NET 4.7.02556 / VS Enterprise 15.6.0 Preview 5.0 [27409.1.d15.6])

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24811</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code fix providers should be able to add assembly/nuget references</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Apparently Roslyn can already do this internally courtesy of their [IAddMetadataReferenceCodeActionOperationFactoryWorkspaceService]( 
and [InstallPackageDirectlyCodeActionOperation]( but these are internal.

I have code fix providers that introduce compile errors into the receiving project unless certain references exist, which I'd like to add as part of the offered fix. Can Roslyn please support this?</Description>
  </Issue>
  <Issue>
    <IssueID>24810</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn is using deprecated CommandExecutionContext.WaitContext property</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>13/02/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 20127 15.7stg

CommandExecutionContext.WaitContext property is deprecated in VS 2017 15.6 Preview4 in favor of identical CommandExecutionContext.OperationContext property. CommandExecutionContext.WaitContext property is slated to be removed in 15.7.
Roslyn is still using CommandExecutionContext.WaitContext property, which blocks editor from removing it.

This is addressed by </Description>
  </Issue>
  <Issue>
    <IssueID>24807</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Introduce Local generates an invalid return statement for void-returning expression methods</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>27/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24807</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
private void bar(int baz)
{ }

private void foo()
    =&gt; bar(100);


Mark the `100` and "Introduce local constant"

**Expected Behavior**:
cs
private void bar(int baz)
{ }

private void foo()
{
    const int Baz = 100;
    bar(Baz);
}


**Actual Behavior**:
cs
private void bar(int baz)
{ }

private void foo()
{
    const int Baz = 100;
    return bar(Baz); // note the additional return statement
}
`</Code>
    <Description>**Version Used**:

VS 15.6 Preview 4

**Steps to Reproduce**:

``

![introduce-local-return](
</Description>
  </Issue>
  <Issue>
    <IssueID>24806</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>24806</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>in parameter aliasing for non-l-values</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24806</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24806</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

public class Test
{
    static void Main(string[] args)
    {
        int x = 50;
        Foo(x + 0, () =&gt; x = 60);
    }
    
    static void Foo(in int y, Action change)
    {
        Console.WriteLine(y);
        change();
        Console.WriteLine(y);
    }
}
 

**Expected Behavior**:

50, 50 - I'd expect the expression `x + 0` to be treated as a computed value rather than an l-value, and therefore passed via a temporary copy.

**Actual Behavior**:

50, 60 - `x` is passed by reference

Note that if you *explicitly* use the `in` modifier, the compiler complains:

csharp
Foo(in (x + 0), () =&gt; x = 60);
`</Code>
    <Description>**Version Used**: 2.6.0.62329 (5429b35d)

**Steps to Reproduce**:

Compile and run this code (with `/langversion:latest`)

``

gives an error message of 

&gt; error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference

So if the compiler recognizes that that expression can't be passed by reference, why does it pass it by reference implicitly?</Description>
  </Issue>
  <Issue>
    <IssueID>24805</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Mispelling of VS code style option</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24805</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

"Prefere" instead of "Prefer".</Description>
  </Issue>
  <Issue>
    <IssueID>24794</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky Test - FindReferencesCommandHandlerTests.TestSelection</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24794</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>24794</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24794</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Here is the flaky test:

``</Description>
  </Issue>
  <Issue>
    <IssueID>24791</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cast not simplified or grayed out</Title>
    <CreatedDate>13/02/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Starting from this code, I inline the two variables:
![image](

That produces the following code, with two unexpected and un-necessary casts:
![image](

Furthermore, those casts are not recognized as un-necessary and so are not grayed out or offered to simplify. I suspect that is another symptom of the same root problem.

The two methods involved and the operators all operate on `bool` types:
![image](

![image](

I'll try to provide a self-contained repro, but for context the above code is from PR </Description>
  </Issue>
  <Issue>
    <IssueID>24790</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Rename of parameter not updating callsite</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24790</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro steps

- Open Roslyn.sln
- Open CSharpTestBase.cs
- Navigate to CompileAndVerify on line 66
- Refactor Rename "additionalRefs" to "references"

Expectation is that it will update callsites using that parameter by name. It does not. </Description>
  </Issue>
  <Issue>
    <IssueID>24787</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Shortcomings in computing diagnostics for extension methods</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>24787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was recently implementing support for dotnet/csharplang#98 and discovered a regression in the quality of diagnostic for the situation in test `DelegatesFromInvalidOverloads`.

It is caused by a combination of two shortcomings in the computation of diagnostics. First, in `BindExtensionMethod` when we fail to find an applicable extension method, we only report a diagnostic for the first extension method group that failed, even if some other extension method group contains a much better candidate. In the case of this test the first extension method group contains a method with the wrong number of parameters, while the second one has an extension method that fails only because of its return type mismatch.

Second, in `OverloadResolutionResult&lt;TMember&gt;.ReportDiagnostics&lt;T&gt;`, we do not report a diagnostic for the failure `MemberResolutionKind.NoCorrespondingParameter`, leaving it to the caller to notice that we failed to produce a diagnostic (the caller has to grub through the diagnostic bag to see that there is no error there) and then the caller has to produce a generic error message, which we see below. It does not appear that all callers have that test, though, suggesting there may be a latent bug of missing diagnostics.
</Description>
  </Issue>
  <Issue>
    <IssueID>24786</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer suggestion: Use lambda expression</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24786</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24786</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>24786</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the spirit of analyzers that suggest the use of newer language features, I propose an analyzer that would flag anonymous methods and offer to replace them with lambda expressions. Lambda expressions are definitely not a new feature today but they once were and my guess is that if they were introduced after Roslyn, there would have been an analyzer for this already. So maybe it's not a bad idea to revisit established language features that in some or even all cases replace even older ones.

This analyzer would be very similar to "Use local function" and would also have a code style option to "Prefer lambda expressions to anonymous methods", which would be set as a suggestion by default.

Should this be a 2-way code fix?
- On the one hand, this is a very local &amp; *mostly* syntactic change similar to "use expression body", which would suggest that there should also be a code fix to convert it back. That's one way of looking at it.
- On the other hand, is this really a code style preference? If my preference is to use expression-bodied members, it's very reasonable that I might want to change it back into a block in the future if an expression won't cut it anymore. But are there any reasons you might want to go back to an anonymous method? Are there any coding styles that tell you to prefer anonymous methods over lambdas? And do we really want people to use them? Maybe this is just not worth it. Also, if we consider lambda expressions in this case to just be the "new language feature" that we suggest as a better way of doing things, then in that sense there shouldn't be a code fix to go back. We don't offer one to undo pattern matching for example.

Other questions:
- Would this try to remove parameter types when possible?
- Would this also simplify to a simple lambda when possible?
- Possibly even convert the block to an expression, if possible? Here a better thing to do in my opinion might be to generalize "use expression body" for lambdas too. That would make this a 2 step change.

My first two questions bring up another, unrelated question. Should lambda parameter types be faded out *when they're not necessary* with an option to remove them? Should parentheses around a single lambda parameter also be marked as unnecessary? Maybe some people would prefer to have them, but we already do this with usings even though most people probably prefer to leave the default System usings there in case they need them later.</Description>
  </Issue>
  <Issue>
    <IssueID>24784</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IAssemblySymbol.TypeNames are not fully qualified</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24784</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24784</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
15.5.3

**Steps to Reproduce**:
This code is in the context of a DiagnosticAnalyzer
``

**Expected Behavior**:
I'm trying  to get an INamedTypeSymbol from an assembly and I would expect that TypeNames is returning fully qualified names that can be used with GetTypeByMetadataName().

**Actual Behavior**:
TypeNames returns just plain type names (even doubles if the assembly contains a type twice in different namespaces) and GetTypeByMetadataName() returns always null because the name is not fully qualified.

If the behavior is by design I would be glad to hear another way to get the fully qualified name to use with GetTypeByMetadataName() later on. The example above is simplified and the type is in an referenced assembly and not in the currently analyzed code.
</Description>
  </Issue>
  <Issue>
    <IssueID>24782</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use local function (IDE0039) - introducing allocations and cannot be disabled by pragma</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>24782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Program
{
    static Action resultAction;

    static void Main()
    {
        var myClass = new MyClass();

        Action a = () =&gt; Console.WriteLine();

        myClass.Event += () =&gt;
        {
            resultAction = a;
        };

        while (true)
        {
            myClass.Raise();
        }
    }

    class MyClass
    {
        public event Action Event;

        public void Raise() =&gt; Event();
    }
}


Action 'a' is allocated only once before while cycle. IDE0039 tells us we can use local function instead of lambda for definition of 'a'. Than we have:
c#
void a() =&gt; Console.WriteLine();

But now the code is creating new delegate every time we call 'Raise' method in while cycle.

Not sure if it is even possible to be able to decide if change will lead to this degradation (though it would be ideal solution), but we should at least be able to disable such suggestion. Disabling by pragma work only partially.

Before pragma addion I see (correctly):
![r1](https://user-images.githubusercontent.com/11704036/36098037-b46b2a6e-0ffd-11e8-82ad-6a102f0b36a1.png)

After adding pragma:
c#
#pragma warning disable IDE0039 // Use local function
        Action a = () =&gt; Console.WriteLine();
#pragma warning restore IDE0039 // Use local function
`</Code>
    <Description>**Version Used**: 15.5.5

**Steps to Reproduce**:
Suppose we have following code:
``
I see following in tooltip (incorrectly):
![r2](
but in Quick Actions it is not listed (correctly)
![r3](</Description>
  </Issue>
  <Issue>
    <IssueID>24781</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>TReturn of Func&lt;T, TResult&gt; cannot be inferred in if T is value tuple.</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public interface IDo&lt;T&gt;
{
    IResult&lt;TReturn&gt; Do&lt;TReturn&gt;(Func&lt;T, TReturn&gt; fn);
}

public interface IResult&lt;TReturn&gt;
{
}

public class Class1
{
    public void Test1(IDo&lt;(int, int)&gt; impl)
    {
        var case1 = impl.Do&lt;int&gt;(((int x, int y) a) =&gt; a.x * a.y); // compiles
        var case2 = impl.Do(a =&gt;
        {
            (var x, var y) = a;
            return x * y;
        }); // compiles

        var case3 = impl.Do(((int x, int y) a) =&gt; a.x * a.y); // &lt;-- does not compile
    }

    public void Test2(IDo&lt;(int x, int y)&gt; impl)
    {
        var case4 = impl.Do(a =&gt; a.x * a.y); // compiles
    }
}
`</Code>
    <Description>I'am not sure if it is actually a bug or not, but this behaviour seems strange to me. Please, consider the following code:

``

Can anyone explain why `case3` fails with error
  

&gt; Class1.cs(25, 27): [CS0411] The type arguments for method 'IDo&lt;(int, int)&gt;.Do&lt;TReturn&gt;(Func&lt;(int, int), TReturn&gt;)' cannot be inferred from the usage. Try specifying the type arguments explicitly.

I don't understand why the compiler cannot infer the return type automatically.</Description>
  </Issue>
  <Issue>
    <IssueID>24780</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.NET 4.7 -  '\0' char in String causes GetHashCode to ignore remainder -- but on x64 only</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>13/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>24780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The `GetHashCode(...)` function for the **ordinal** `String` comparisons In **.NET 4.7** has a grossly different behavior between running on **x86** versus **x64**. Note: ***I am not talking about the different hash code values, per-platform***, since these are intended as opaque -- rather, the issue here is a ***semantic difference*** in runtime behavior between the two platforms.

On **x86**, the full length of a `String` is always hashed, regardless of any `\0` characters.

On **x64**, the hashing terminates at the first `\0` character.

This is trivial to demonstrate:

	var h1 = "\0AAAAAAAAA".GetHashCode();
	var h2 = "\0BBBBBBBBBBBB".GetHashCode();
	var h3 = "\0CCCCCCCCCCCCCCC".GetHashCode();


	// x64 results:
	//		0x162a16fe
	//		0x162a16fe
	//		0x162a16fe


	// x86 results:
	//		0x07b801bc
	//		0x048e22a3
	//		0x21e2037d

As shown above, this affects the `GetHashCode` instance virtual method (overriden by the `String` type), as well as two other **.NET**-provided techniques for obtaining an ordinal-based `String` hash code: `StringComparer.Ordinal.GetHashCode` and also `CultureInfo.CurrentCulture.CompareInfo.GetHashCode` (when using `CompareOptions.Ordinal`). These results are summarized below:

&lt;pre&gt;
-------------------------- x86 --------------------------
&amp;quot;\0AAAAAAAAA&amp;quot;
s.GetHashCode					0x07b801bc
StringComparer.Ordinal.GetHashCode		0x07b801bc
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x07b801bc


&amp;quot;\0BBBBBBBBBBBB&amp;quot;
s.GetHashCode					0x00001505
StringComparer.Ordinal.GetHashCode		0x00001505
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x00001505


&amp;quot;\0CCCCCCCCCCCCCCC&amp;quot;
s.GetHashCode					0x21e2037d
StringComparer.Ordinal.GetHashCode		0x21e2037d
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x21e2037d




-------------------------- x64 --------------------------
&amp;quot;\0AAAAAAAAA&amp;quot;
s.GetHashCode					0x162a16fe
StringComparer.Ordinal.GetHashCode		0x162a16fe
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x162a16fe


&amp;quot;\0BBBBBBBBBBBB&amp;quot;
s.GetHashCode					0x162a16fe
StringComparer.Ordinal.GetHashCode		0x162a16fe
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x162a16fe


&amp;quot;\0CCCCCCCCCCCCCCC&amp;quot;
s.GetHashCode					0x162a16fe
StringComparer.Ordinal.GetHashCode		0x162a16fe
CompareInfo.GetHashCode/CompareOptions.Ordinal	0x162a16fe
&lt;/pre&gt;

While I do realize that theoretical practice deems hash codes purely advisory, in practice applications will be designed to expect that hash code collisions are rare. Being able to trivially produce an infinite number of identical hashes, at will -- such as one can do via &amp;quot;\0A&amp;quot;, &amp;quot;\0B&amp;quot;, &amp;quot;\0C&amp;quot;, &amp;quot;\012345...&amp;quot;  (on **x64** all of these give the same hash code as above, `0x162a16fe`)-- is neither in the spirit of hashing nor accepted/expected common practice.

Worse, this only happens on the  x86 platform and not x64, which could cause considerable loss of design and development effort, if such proceeded based on a false impression of consistent behavior.

_This issue has been moved from 
VSTS ticketId: 565715_
_These are the original issue comments:_

Glenn Slayden on 2/9/2018, 06:39 PM (2 days ago): &lt;p&gt;I should also mention that the **x64** version of `String.GetHashCode(...)` in fact makes no reference to the string's length whatsoever, neither to incorporate that value into the hash, nor to determine how many characters to compute the hash code for. Instead, the x64 code ***just scans the string forward until it hits the first '\0' char***. If there are no embedded nulls, then it will scan to the end, where the **CLR** ensures there will always be an extra `\0` char (that is not included in the `Length`).&lt;/p&gt;&lt;p&gt;Thus, by ignoring the stored length of the string, the x64 code *takes a critical dependency* on that zero-terminating char being present. If that `\0` gets corrupted somehow, the failure mode is severe, since that loop can immediately scan off the end of the string into unrelated memory areas. &lt;/p&gt;&lt;p&gt;Since the **x86** version refers to the stored string length to determine how many chars to hash--it might seem like that code doesn't have the same problem, and it's true that it's not as fatal, as follows:&lt;/p&gt;&lt;p&gt;The x86 code does actually take a ***different kind of dependency*** on the zero terminator, namely, that loop is written such that the 16-bit terminator value itself is `XORed` into the returned hash value whenever the two lowest bits of the input string length are equal to `0b_00000011 == 0x03`. For that operation to have no effect, the terminator must be zero (since `xor` with zero is a `nop`.)  So if the terminator somehow becomes corrupted, the returned hash code value will be affected, but there won't likely be an immediate `AccessViolationException` (as with the x64 case).&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24777</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>A linq error: System.Data.SqlClient.SqlException (0x80131904)</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var ss = from a in dbContext.comm_work
					 from part in dbContext.class_class.Where(x =&gt; x.child == a.partid).DefaultIfEmpty()
					 from czy in dbContext.usergl_czy.Where(x =&gt; x.czyid == a.czyid).DefaultIfEmpty()
					 from spczy in dbContext.usergl_czy.Where(x =&gt; x.czyid == a.shenpiczyid).DefaultIfEmpty()
					 from node in dbContext.comm_shenpinode.Where(x =&gt; x.id == a.shenpizt).DefaultIfEmpty()
					 where a.xh == info.QueryCondition.Xhs
					 select new
					 {
						 #region MyRegion
						 a,
						 part = new
						 {
							 part.child,
							 part.childname
						 },
						 czy = new
						 {
							 czy.czyid,
							 czy.czybm,
							 czy.czy
						 },
						 shenpiczy = new
						 {
							 spczy.czyid,
							 spczy.czybm,
							 spczy.czy
						 },
						 node = new
						 {
							 node.id,
							 node.mc
						 }
						 #endregion
					 };

			var lst_ss = ss.ToList();


a error happied:


{System.Data.SqlClient.SqlException (0x80131904): 无法绑定由多个部分组成的标识符 "a.shenpizt"。
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean&amp; dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task&amp; task, Boolean asyncWrite, SqlDataReader ds)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource`1 completion, Int32 timeout, Task&amp; task, Boolean asyncWrite, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.ExecuteReader()


but i change the linq order ,like this below,it is normal :

csharp
var ss = from a in dbContext.comm_work
					 from part in dbContext.class_class.Where(x =&gt; x.child == a.partid).DefaultIfEmpty()
					 from node in dbContext.comm_shenpinode.Where(x =&gt; x.id == a.shenpizt).DefaultIfEmpty()
					 from czy in dbContext.usergl_czy.Where(x =&gt; x.czyid == a.czyid).DefaultIfEmpty()
					 from spczy in dbContext.usergl_czy.Where(x =&gt; x.czyid == a.shenpiczyid).DefaultIfEmpty()
					 where a.xh == info.QueryCondition.Xhs
					 select new
					 {
						 #region MyRegion
						 a,
						 part = new
						 {
							 part.child,
							 part.childname
						 },
						 node = new
						 {
							 node.id,
							 node.mc
						 },
						 czy = new
						 {
							 czy.czyid,
							 czy.czybm,
							 czy.czy
						 },
						 shenpiczy = new
						 {
							 spczy.czyid,
							 spczy.czybm,
							 spczy.czy
						 }
						 #endregion
					 };

			var lst_ss = ss.ToList();
`</Code>
    <Description>A linq like this:

``

_This issue has been moved from 
VSTS ticketId: 529808_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24776</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>24776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.exe compiler error -2146232797 with ref struct C# 7.2 modifier</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>05/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public ref struct Tensor {
    public void TryFree() { }
}
public class C {
        public static unsafe void TryFree(params Tensor[] tensors)
        {
            fixed (Tensor* p = tensors)
                for (int i = 0; i &lt; tensors.Length; i++)
                    p[i].TryFree();
        }
}

It hits the following assert:

System.InvalidOperationException: Unexpected value 'PointerElementAccess expression of Tensor type' of type 'System.String'
   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckInvocationArgMixing(SyntaxNode syntax, Symbol symbol, BoundExpression receiverOpt, ImmutableArray`1 parameters, ImmutableArray`1 argsOpt, ImmutableArray`1 argRefKindsOpt, ImmutableArray`1 argsToParamsOpt, UInt32 scopeOfTheContainingExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued(SyntaxNode node, SyntaxNode expression, String methodName, OverloadResolutionResult`1 result, AnalyzedArguments analyzedArguments, MethodGroup methodGroup, NamedTypeSymbol delegateTypeOpt, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.ForLoopBinder.BindForParts(ForStatementSyntax node, Binder originalBinder, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.ForLoopBinder.BindForParts(DiagnosticBag diagnostics, Binder originalBinder)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindFixedStatementParts(FixedStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindFixedStatement(FixedStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()

`</Code>
    <Description>Hello, both VS 15.5 Preview 5 and the official VS 15.5 fail to compile my library using the C# 7.2 ref struct modifier in one of the structs I'm using.

Here's the link to the exact code that reproduces the error, just clone and try to compile the library &amp;quot;NeuralNetwork.NET&amp;quot;:


Removing the ref struct modifier from the &amp;quot;FloatSpan2D&amp;quot; struct solves the issue.

If this is not a bug and that struct is actually being moved to the heap somehow/somewhere, it'd be useful to have some sort of warning to be able to fix the code error.
Otherwise, I hope this will help you pinpoint the cause of the issue.
Cheers!

_This issue has been moved from 
VSTS ticketId: 533142_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)

---

Edit by @OmarTawfik
Smaller repro:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24775</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# 7.2 private protected not respected by dynamic</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>21/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

namespace NetFXAccessTest
{
    class Program
    {
        static void Main(string[] args)
        {
            new B().CheatPrivateProtected(new A());
            Console.Read();
        }
        public class A
        {
            private protected void Method(int x)
            {
                Console.WriteLine(x);
            }
        }

        public class B
        {
            public void CheatPrivateProtected(A a)
            {
                dynamic d = a;
                d.Method(2);
            }
        }
    }
}
`</Code>
    <Description>Reproducing program:

``

Expected behaviour:

Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: ''NetFXAccessTest.Program.A.Method(int)' is inaccessible due to its protection level'

Actual behaviour:

Outputs '2' to the console.

 reports this as far as CoreFX goes. This report is intended as per NetFX.

_This issue has been moved from 
VSTS ticketId: 532955_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24774</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24774</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make OOP to use connection pool</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24774</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>connection pool will make creating new connection to OOP almsot no cost at all. right now it is between 1-15ms based on how busy OOP is at the moment.

this should let feature writer to consume OOP easier than before when they need to make hundreds of connections.</Description>
  </Issue>
  <Issue>
    <IssueID>24772</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis.Common - need NetStandard 2.0 version</Title>
    <CreatedDate>12/02/2018</CreatedDate>
    <ClosedDate>13/02/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.Common - 2.6.1

**Steps to Reproduce**:
1. Add Microsoft.CodeAnalysis.Common to dotnet core 2.0 project. 
2. Deploy project on Linux or Windows.
3. Project fails to load in Linux, Windows fresh install. 

**Expected Behavior**:
Error due to dependency on netstandard1.3

**Actual Behavior**:
Need a version that compiles or installs on dotnet core 2.0 

</Description>
  </Issue>
  <Issue>
    <IssueID>24768</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Rename tuple members</Title>
    <CreatedDate>11/02/2018</CreatedDate>
    <ClosedDate>12/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>24768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>allow to rename tuple names

    (int x, int y) s;

 - right click on `x`
 - select rename

you get this error "You can not rename this element."

Originally I wanted to rename tuple member name from inherited member. 

    public override (Foo foo, Bar bar) Current =&gt; ...

so renaming `foo` requires me to rename base thus rename every where else manually.

---

Either allow inherited tuple member to have different name, or give us option to easily rename tuple member names.
</Description>
  </Issue>
  <Issue>
    <IssueID>24767</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>24767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Project's list of documents should not be empty when project contains one or more .cs files</Title>
    <CreatedDate>11/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;

namespace RoslynTest
{
	class Program
	{
		static void Main(string[] args)
		{
			Program program = new Program();
			Task task = Task.Run(() =&gt; program.Main());
			task.Wait();
		}

		async Task Main()
		{
			MSBuildWorkspace	build	= MSBuildWorkspace.Create();
			Solution		solution = await build.OpenSolutionAsync("..\\..\\..\\RoslynTest.sln");
			Project			project	= solution.Projects.Where(currentProject =&gt; currentProject.Name == "TestProject").First();

			foreach(Document document in project.Documents)
				Trace.WriteLine(document.Name);
		}
	}
}

`</Code>
    <Description>**Version Used**:  Microsoft.CodeAnalysis NuGet package version 2.6.1

**Steps to Reproduce**:

1. Create empty console project with .NET framework 4.6, call this project "RoslynTest".
2. Add Microsoft.CodeAnalysis NuGet package version 2.6.1 to project.
3. Add new console project with .NET framework 4.6, to solution, call this project "TestProject".
4. Add the following code to "RoslynTest" project's Program.cs file:

``
5. Run RoslynTest project.

**Expected Behavior**:
Expected to see "Program.cs" document in the list of documents contained in "TestProject" project.

**Actual Behavior**:
The project.Documents collection is empty.</Description>
  </Issue>
  <Issue>
    <IssueID>24764</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Use local function' breaks code that uses named arguments</Title>
    <CreatedDate>10/02/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
delegate void MyDelegate(string arg);

void M()
{
    MyDelegate d = s =&gt; { };

    d(arg: "hello");
}


after invoking 'Use local function' on `d`:

c#
void d(string s)
{ }

d(arg: "hello");
`</Code>
    <Description>**Steps to Reproduce**:

``

code doesn't compile because there's no `arg` on `d`.</Description>
  </Issue>
  <Issue>
    <IssueID>24760</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24760</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Use local function' should be offered for anonymous methods as well as lambdas</Title>
    <CreatedDate>10/02/2018</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24760</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24760</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24760</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
Action a = () =&gt; { Console.WriteLine(); };
Action b = delegate () { Console.WriteLine(); };
`</Code>
    <Description>**Steps to Reproduce**:

``

Click on `a`. 'Use local function' is suggested. No such thing on `b`.</Description>
  </Issue>
  <Issue>
    <IssueID>24758</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test failed in CI: TryGetSymbolTouchingPositionOnLeadingTrivia</Title>
    <CreatedDate>10/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24758</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24758</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24758</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#### Microsoft.CodeAnalysis.Editor.UnitTests.Extensions.ISemanticSnapshotExtensionTests.TryGetSymbolTouchingPositionOnLeadingTrivia (from Roslyn.Services.Editor.UnitTests)



``
</Description>
  </Issue>
  <Issue>
    <IssueID>24754</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flakey Test - Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.NavigationBarControllerTests.ProjectionBuffersWork</Title>
    <CreatedDate>10/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>24754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Branch Used**: dev15.7.x-vs-deps 

This is the log of the test:

    Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.NavigationBarControllerTests.ProjectionBuffersWork
      System.Reflection.TargetParameterCountException : Parameter count mismatch.
      Stack Trace:
           at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
           at System.Delegate.DynamicInvokeImpl(Object[] args)
           at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
           at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
           at System.Windows.Threading.DispatcherOperation.InvokeImpl()
           at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)
           at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
           at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
           at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
           at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)
           at System.Windows.Threading.DispatcherOperation.Invoke()
           at System.Windows.Threading.Dispatcher.ProcessQueue()
           at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
           at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)
           at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)
           at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
           at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
           at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)
           at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)
           at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)
           at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)
           at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)
           at Roslyn.Test.Utilities.DispatcherExtensions.DoEvents(Dispatcher dispatcher)
           at Roslyn.Test.Utilities.AsynchronousOperationListenerExtensions.&lt;&gt;c.&lt;WaitAllDispatcherOperationAndTasksAsync&gt;b__0_0()
           at Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListenerProvider.&lt;WaitAllAsync&gt;d__11.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at Microsoft.CodeAnalysis.Editor.UnitTests.NavigationBar.NavigationBarControllerTests.VB$StateMachine_3_ProjectionBuffersWork.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)</Description>
  </Issue>
  <Issue>
    <IssueID>24752</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>24752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Support User-Defined Conditional Logical Operators</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>21/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>24752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

The BoundUserDefinedConditionalLogicalOperator is currently being exposed as a NoneOperation. This is going to block CFG generation for this scenario until fixed.

/cc @AlekseyTs @dotnet/analyzer-ioperation</Description>
  </Issue>
  <Issue>
    <IssueID>24749</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flakey Test - Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormatAsBoxCopy</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>07/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>24749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>24749</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Branch**: master-vs-deps

Test is failing and passing sometimes. Here it is failing:

Microsoft.CodeAnalysis.Editor.UnitTests.InteractivePaste.InteractivePasteCommandhandlerTests.PasteCommandWithInteractiveFormatAsBoxCopy

``</Description>
  </Issue>
  <Issue>
    <IssueID>24737</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>24737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replace usage of SHA1 with a non-crypto hash algorithm where not used for security purposes</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>07/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>24737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Determinism</Name>
        <IssueID>24737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [ ] Calculating MVID and timestamp of PE file when building deterministically
- [ ] PrivateImplementationDetails.GenerateDataFieldName </Description>
  </Issue>
  <Issue>
    <IssueID>24736</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.dll exited with code 1</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>22/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
/home/rybrande/dotnet/sdk/2.1.300-preview1-008030/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.dll" exited with code 1. [/home/rybrande/functional/src/Fail/Fail.csproj]

The build failed. Please fix the build errors and run again.

with no other identifying or helpful information.

## Environment data
`dotnet --info` output:

.NET Command Line Tools (2.1.300-preview1-008030)

Product Information:
 Version:            2.1.300-preview1-008030
 Commit SHA-1 hash:  be228a492f

Runtime Environment:
 OS Name:     ubuntu
 OS Version:  16.04
 OS Platform: Linux
 RID:         ubuntu.16.04-x64
 Base Path:   /home/rybrande/dotnet/sdk/2.1.300-preview1-008030/

Microsoft .NET Core Shared Framework Host

  Version  : 2.1.0-preview1-26207-04
  Build    : f2c3216183d20416568a4bbf5bb7d153e826f153
`</Code>
    <Description>_From @ryanbrandenburg on February 9, 2018 19:58_## Steps to reproduce
1. dotnet new mvc
2. Add `.AddFormatterMappings(m =&gt; {);` between `.AddMvc()` and `.SetCompatibilityVersion` in 'Startup.cs'.
3. dotnet run

## Expected  behavior
I would expect to get an informative error message about the mistakes I've just made (leaving off a trailing "}" and adding a ";", then trying to call `.SetCompatibilityVersion`.).

## Actual behavior
It returns:
``

Ubuntu 16.04

Found while doing aspnet/Release#215._Copied from original issue: dotnet/cli#8581_</Description>
  </Issue>
  <Issue>
    <IssueID>24735</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Set EmitOptions.HashAlgorithmName from value of /checksumalgorithm</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24735</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>24735</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>24734</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Idea] SubTokens</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>07/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24734</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24734</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With pull request #23984 and #24110 being considered, which rely on parsing a string literal to expose feature / details within that string. Should we have a mechanism that we can hook up to, so can add additional information. These sub tokens will not affect to parsing, syntactic or semantic meaning of the code, that could be used later to provide syntax highlighting.
 </Description>
  </Issue>
  <Issue>
    <IssueID>24733</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Xml Documentation on Methods shows difference in SyntaxTree structure with VS2017 IDE code analysis in background Vs explicitly triggered msbuild</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        /// &lt;summary&gt;
        /// API:Yes
        /// &lt;/summary&gt;
        public void Method()
        {
        }
    

2. I use below code snippet to read XML Documentation.

csharp
var leadingTrivia = methodDeclarationSyntaxNode.GetLeadingTrivia();
var singleLineDocumentation = leadingTrivia.FirstOrDefault(trivia =&gt; trivia.Kind() == SyntaxKind.SingleLineDocumentationCommentTrivia);
`</Code>
    <Description>**Version Used**: 
Roslyn v2.6.0
VS2017 15.5.6

**Steps to Reproduce**:

1. I have an analyzer for reading the XML Documentation and analyzing it. We have this analyzer added as an analyzer reference to a project where we have methods documented with XML Documentation.
E.g.

    ``

3.  This works fine when we do code analysis from VS2017 IDE which is triggered in the background.
The leading trivia list retrieved from the method declaration syntax shows 3 trivias.
![xmldocumentationleadingtrivialistworkingcase](

Analyzer identifies this as proper XML documentation as it uses SingleLineDocumentationCommentTrivia for identifying XML Documentation.

4. When we are building the solution using msbuild (VS2017 IDE Rebuild All) there is no SingleLineDocumentationTrivia, all are SingleLineCommentTrivia.
![xmldocumentationleadingtrivialistnotworkingcase](

**Expected Behavior**: 
Both VS2017 IDE Code analysis and msbuild compilation which triggers Roslyn analyzers should give same SyntaxTree structure for LeadingTrivia.

Actually, we should get SingleLineDocumentationTrivia as we have XML documentation, not just a comment node.

**Actual Behavior**:
VS2017 IDE Shows proper SingleLineDocumentationTrivia when we have a proper XML documentation. But msbuild triggered analyzer instance shows different syntax tree where only SingleLineCommentTrivia observed.

Please let me know your comment on this difference in behavior which is affecting one of our XML Documentation related analyzer.

Thanks
Basanth</Description>
  </Issue>
  <Issue>
    <IssueID>24732</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Installed analyzers should not run in referencing projects</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>24732</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I've got two projects "A" and "A.Tests", where the second one is referencing the first one. I installed a Roslyn analyzer (via PackageReference) in project "A" and it works just fine. However, the analyzer is also executed for "A.Tests" which I don't want.

I cannot seem to remove it from "A.Tests" though, it is not contained in the csproj, it looks like the transitive dependency forces the analyzer to project "A.Tests". Is there a workaround to run the analyzer only for project "A" and not for "A.Tests"?</Description>
  </Issue>
  <Issue>
    <IssueID>24725</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Comparison on "default" literal is inconsistent</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>28/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

![image](

The code shown is in context of `RewriteUsingStatementTryFinally`.
`SyntaxToken` has a custom `==` operator, while `AwaitableInfo` doesn't.</Description>
  </Issue>
  <Issue>
    <IssueID>24720</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CompositionFailedException when using RoslynDev in 15.6</Title>
    <CreatedDate>09/02/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>24720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
Microsoft.VisualStudio.Composition.CompositionFailedException
  HResult=0x80131500
  Message=Expected 1 export(s) with contract name "Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory" but found 0 after applying applicable constraints.
  Source=Microsoft.VisualStudio.Composition
  StackTrace:
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExports(ImportDefinition importDefinition)
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExports[T,TMetadataView](String contractName, ImportCardinality cardinality)
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T,TMetadataView](String contractName)
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T](String contractName)
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T]()
   at Microsoft.VisualStudio.Composition.ExportProvider.GetExportedValue[T]()
   at Microsoft.VisualStudio.ComponentModelHost.ComponentModel.GetService[T]()
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceAdapter..ctor(ITextView textView, ITextBuffer subjectBuffer, IOleCommandTarget nextCommandTarget)
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.EnsureCommandHandlerServiceAdapter()
   at Microsoft.VisualStudio.Editor.Implementation.CommandHandlerServiceFilter.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerQueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.QueryVisualStudio2000Status(Guid&amp; pguidCmdGroup, UInt32 commandCount, OLECMD[] prgCmds, IntPtr commandText) in C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\AbstractOleCommandTarget.Query.cs:line 208
   at Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 commandCount, OLECMD[] prgCmds, IntPtr commandText) in C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\AbstractOleCommandTarget.Query.cs:line 30
   at Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerQueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 commandCount, OLECMD[] prgCmds, IntPtr commandText)
   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)
   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.QueryStatus(Guid&amp; pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText)

[External Code]
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.QueryVisualStudio2000Status(ref System.Guid pguidCmdGroup, uint commandCount, Microsoft.VisualStudio.OLE.Interop.OLECMD[] prgCmds, System.IntPtr commandText) Line 208
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\AbstractOleCommandTarget.Query.cs(208)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.QueryStatus(ref System.Guid pguidCmdGroup, uint commandCount, Microsoft.VisualStudio.OLE.Interop.OLECMD[] prgCmds, System.IntPtr commandText) Line 30
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\AbstractOleCommandTarget.Query.cs(30)
[External Code]


It keeps constantly getting thrown. If I try to ignore it, VS is completely unusable, it won't allow me to type (but I can navigate). I will even get the exception message when trying to close VS so I have to use task manager at that point. 

This does **not** happen with 15.5.

Before that, I also get this (don't know if related) one-time exception:
c#
Managed Debugging Assistant 'LoaderLock' 
  Message=Managed Debugging Assistant 'LoaderLock' : 'Attempting managed execution inside OS Loader lock. Do not attempt to run managed code inside a DllMain or image initialization function since doing so can cause the application to hang.'

[External Code]
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService&lt;Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage, Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpLanguageService&gt;.GetServices() Line 154
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractLanguageService`2.cs(154)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService&lt;Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage, Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpLanguageService&gt;.Setup() Line 96
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractLanguageService`2.cs(96)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage&lt;Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage, Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpLanguageService&gt;.Initialize.AnonymousMethod__9_0() Line 51
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractPackage`2.cs(51)
Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractPackage&lt;Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpPackage, Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService.CSharpLanguageService&gt;.RegisterLanguageService.AnonymousMethod__0(System.ComponentModel.Design.IServiceContainer container, System.Type type) Line 130
	at C:\Users\neme1\Source\Repos\roslyn\src\VisualStudio\Core\Def\Implementation\LanguageService\AbstractPackage`2.cs(130)
[External Code]
`</Code>
    <Description>**Version Used**:  Visual Studio 15.6 preview 4 (happened on preview 3 as well; don't know before that)

When I run VisualStudioSetup/Next or just build and run RoslynDev in 15.6 and open a C# project, I keep getting this exception:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24718</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"The project system has encountered an error." popup</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>24718</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Using the Int preview.

I tried running some Roslyn tests from VS using the "Run Tests" TestDriven menu item from the Explorer window.

![image](

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24714</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Tagging gets very out of sync when typing, and takes a long time to get into a consistent state.</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>24714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>24714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This started happening when i moved to 15.6 preview 4.  I've also confirmed with @sharwell that this isn't happening only on my machine.  A gif will be helpful to show the issue:

![simpleediting](

As you can see tags get very out of sync with the code (the worst example of this is how the `` tags just end up in random locations).  it also seems to take a while for those tags to snap back to where they should be.  </Description>
  </Issue>
  <Issue>
    <IssueID>24713</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test with AllInOneCSharpCode should fail when new syntax nodes are introduced</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently we have to remember to update those tests, and more often than not we forget.</Description>
  </Issue>
  <Issue>
    <IssueID>24712</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove DebugDirectoryExtensions</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>24712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>24712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The implementation needs to be moved to System.Reflection.Metadata: 

Remove it from Roslyn once it's available thru SRM.
</Description>
  </Issue>
  <Issue>
    <IssueID>24710</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature Request: Removed Unused Usings Ignore List</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Copied from 

Regardless of if they are currently used or not in the file, I always like to have 
``
In my list of usings. It would be fantastic if there was an option that let us specify which namespace should be ignored when the Remove unnecessary usings function is run.</Description>
  </Issue>
  <Issue>
    <IssueID>24709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>24709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Exception : C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets not found</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.3.2
**Steps to Reproduce**:

1. We have a Windows **server** machine having following installed:
- .NET Framework 4.0. to .NET framework 7.2.
-  Build Tool for VS 2013
- Build tool for VS 2015

NOTE: We cannot install any flavor of Visual Studios on this machine as this is a server machine.

2. We have a simple C# application using Roslyn capabilities for opening .csproj projects through code. **We have to open old .NET code written using Visual Studios 2010/2012 and 2013 using Roslyn.**
3.  The code which we are trying to use for opening all such .csproj projects is : 
   ``
4.  With the set of installations done on the server machine as mentioned above, if we try to run the above application and try to open .csproj files build using VS 2010/12/13, we get **multiple errors** in **WorkspaceOnWorkspaceFailed**. 
5. The prominent error which we can see is  **C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets not found**

6. Obviously we dont even have any **Microsoft** folder under MSBuild folder. 
7. We know that VS installation would add all these required folders under MSBuild. But we cannot install VS on the server machine.
8. Copying these folders from the developers machine on to the server is one option. But thats a dirty option. 

**Expected Behavior**:
I am not sure how will the MSBuildWorkspace used by Roslyn will get these dependencies. 
Do i need to install any thing specific? Some package? 
**Actual Behavior**:
Exception : C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets not found</Description>
  </Issue>
  <Issue>
    <IssueID>24707</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"..." on error list sometimes never go away</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>even though there is no activity in devenv, "..." on error list never goes away</Description>
  </Issue>
  <Issue>
    <IssueID>24701</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>24701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Improve parsing error recovery on an implicit array creation with a length</Title>
    <CreatedDate>08/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class C {
    public void M() {
        var x = new [3] { 1, 2, 3 }
    }
}


error CS1003: Syntax error, ']' expected
error CS1514: { expected
error CS1003: Syntax error, ',' expected
error CS1003: Syntax error, ',' expected
error CS1002: ; expected
error CS1513: } expected
error CS0623: Array initializers can only be used in a variable or field initializer. Try using a new expression instead.
`</Code>
    <Description>It currently produces various syntax errors.
``</Description>
  </Issue>
  <Issue>
    <IssueID>24699</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>24699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for "stackalloc initializers"</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>01/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a place to collect test ideas and track work items.
Relates to 

- [ ] optimization and endianess issue
- [ ] Test `GetOperation`
- [ ] Test [IDE scenarios](

Tagging @alrz 

</Description>
  </Issue>
  <Issue>
    <IssueID>24698</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Fix all in document" doesn't work for "Use expression bodies" refactoring</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>17/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

1. Open TestMessageProvider.cs in Roslyn.sln (commit 000735ee9c887c644e02c7b8bfb5ae44b06b4621)
2. Invoke "Use expression bodies" on one of the methods or properties
3. Select Fix all in document.

**Expected Behavior**:

Refactoring applied to all methods/properties in the document.

**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>24697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate Overrides UI doesn't support multi-selection</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

![image](

1. Click on an item
2. Shift+Click on another line below the selected item

**Expected Behavior**:

Multiple items should be selected.

**Actual Behavior**:

Single item is selected.
</Description>
  </Issue>
  <Issue>
    <IssueID>24696</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Stepping is slow when Callstack Window has "Show Parameter Values" set</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>24696</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Stepping through Roslyn code is slow when the Locals Window and Callstack Window are visible and "Show Parameter Values" is set. Stepping is noticeably faster when parameter values are not included.
</Description>
  </Issue>
  <Issue>
    <IssueID>24691</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>24691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuildWorkspace: Exception : Unable to cast object of type 'Microsoft.CodeAnalysis.BuildTasks.Csc' to type 'Microsoft.Build.Framework.ITask'.</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using (var workspace = MSBuildWorkspace.Create())
{
     Project currentProject = workspace.OpenProjectAsync(projectPath).Result;
     workspace.LoadMetadataForReferencedProjects = true;
 }

here the **projectPath** is a path of .csproj file.

**Expected Behavior**:
`workspace.OpenProjectAsync(projectPath).Result;` should run successfully and open the project.

**Actual Behavior**:
`Unable to cast object of type 'Microsoft.CodeAnalysis.BuildTasks.Csc' to type 'Microsoft.Build.Framework.ITask'.
`
**Stack Trace:**
 `  at Microsoft.Build.Shared.TaskLoader.CreateTask(LoadedType loadedType, String taskName, String taskLocation, Int32 taskLine, Int32 taskColumn, LogError logError, AppDomainSetup appDomainSetup, Boolean isOutOfProc, AppDomain&amp; taskAppDomain)`

**Additional Info**:

Following are the nuget packages refereed


&lt;package id="Microsoft.Build" version="15.5.180" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.Build.Framework" version="15.5.180" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.Build.Tasks.Core" version="15.5.180" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.Build.Utilities.Core" version="15.5.180" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Analyzers" version="1.1.0" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Common" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp.Features" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.CSharp.Workspaces" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Features" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.VisualBasic" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.VisualBasic.Features" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.VisualBasic.Workspaces" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.CodeAnalysis.Workspaces.Common" version="2.6.1" targetFramework="net461" /&gt;
  &lt;package id="Microsoft.Net.Compilers" version="2.6.1" targetFramework="net461" developmentDependency="true" /&gt;
`</Code>
    <Description>**Version Used**: 2.6.1 

**Steps to Reproduce**:

1. Create console app using VS 2015 and add nuget reference to Microsoft.CodeAnalysis (.NET framework 4.6.1)
2. On the same machine, VS 2017 comunity version is also installed.
3.  Try to call below program: 

`` </Description>
  </Issue>
  <Issue>
    <IssueID>24682</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Create solution file containing only projects necessary for IDE feature development</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>24682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>24682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn.sln is pretty huge and slows down the development cycle, it's only useful when you want to work across all layers. We have Compilers.sln but there is no Features.sln for IDE-only work. I think compiler tests, for example, doesn't need to be in this solution.

It's also useful to separate C# and VB. I currently workaround this by manually adding projects to a new solution, but it does not always contain exactly what I need for a particular work. Would be nice to have them in the repository.

The question is how we can seperate things out in a couple of smaller solution files, each suitable for a specific feature-work.</Description>
  </Issue>
  <Issue>
    <IssueID>24680</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove Unnecessary Usings misunderstands extension methods</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>07/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24680</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24680</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Linq;
using System.Reactive.Linq;

class Program
{
    static void Main()
    {
        var array = new[] { 1, 2, 3, 4, 5 };
        //var linq = Enumerable.Select(array, x =&gt; x * x);
        var linq = array.Select(x =&gt; x * x);
    }
}
`</Code>
    <Description>**Version Used**: 

VS 2017 15.5.6
VS 2017 15.6.0 Preview 3.0

**Steps to Reproduce**:

Write the following code:

``

![image](

![image](

**Expected Behavior**:

Both removes `using System.Reactive.Linq;`.

**Actual Behavior**:

One using an extension method doesn't remove it.
</Description>
  </Issue>
  <Issue>
    <IssueID>24678</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# compiler should not report CS1983 when ValueTask&lt;T&gt; is returned from async method.</Title>
    <CreatedDate>07/02/2018</CreatedDate>
    <ClosedDate>15/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24678</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netstandard1.0&lt;/TargetFramework&gt;
    &lt;/PropertyGroup&gt;

    &lt;ItemGroup&gt;
        &lt;PackageReference Include="System.Threading.Tasks.Extensions" Version="4.0.0" /&gt;
    &lt;/ItemGroup&gt;

&lt;/Project&gt;


and one class:

using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;

#pragma warning disable CS1983 // The return type of an async method must be void, Task or Task&lt;T&gt;

namespace ClassLibrary
{
    public class MyClass
    {
        [SuppressMessage("Concurrency", "CS1983", Justification = "Returns a ValueTask instead of a Task, but is still awaitable.")]
        public async ValueTask&lt;int&gt; DoStuffAsync()
        {
            await Task.Delay(100);
            return 5;
        }
    }
}


**Expected Behavior**:
This code is just a simplistic example, but it should still compile without errors or warnings.

**Actual Behavior**:
Visual Studio shows error `CS1983: The return type of an async method must be void, Task or Task&lt;T&gt;` (with no context help to fix it) until I add either the `SuppressMessage` attribute or the `#pragma`. But even with both of those in place, when I go to build, the C# compiler still throws the same exception:


1&gt;  Task "Csc"
1&gt;    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1705,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;DEBUG;NETSTANDARD1_0 /errorendlocation /preferreduilang:en-US /reference:C:\Users\...\.nuget\packages\system.collections\4.3.0\ref\netstandard1.0\System.Collections.dll /reference:C:\Users\...\.nuget\packages\system.diagnostics.debug\4.3.0\ref\netstandard1.0\System.Diagnostics.Debug.dll /reference:C:\Users\...\.nuget\packages\system.diagnostics.tools\4.3.0\ref\netstandard1.0\System.Diagnostics.Tools.dll /reference:C:\Users\...\.nuget\packages\system.globalization\4.3.0\ref\netstandard1.0\System.Globalization.dll /reference:C:\Users\...\.nuget\packages\system.io\4.3.0\ref\netstandard1.0\System.IO.dll /reference:C:\Users\...\.nuget\packages\system.linq\4.3.0\ref\netstandard1.0\System.Linq.dll /reference:C:\Users\...\.nuget\packages\system.linq.expressions\4.3.0\ref\netstandard1.0\System.Linq.Expressions.dll /reference:C:\Users\...\.nuget\packages\system.net.primitives\4.3.0\ref\netstandard1.0\System.Net.Primitives.dll /reference:C:\Users\...\.nuget\packages\system.objectmodel\4.3.0\ref\netstandard1.0\System.ObjectModel.dll /reference:C:\Users\...\.nuget\packages\system.reflection\4.3.0\ref\netstandard1.0\System.Reflection.dll /reference:C:\Users\...\.nuget\packages\system.reflection.extensions\4.3.0\ref\netstandard1.0\System.Reflection.Extensions.dll /reference:C:\Users\...\.nuget\packages\system.reflection.primitives\4.3.0\ref\netstandard1.0\System.Reflection.Primitives.dll /reference:C:\Users\...\.nuget\packages\system.resources.resourcemanager\4.3.0\ref\netstandard1.0\System.Resources.ResourceManager.dll /reference:C:\Users\...\.nuget\packages\system.runtime\4.3.0\ref\netstandard1.0\System.Runtime.dll /reference:C:\Users\...\.nuget\packages\system.runtime.extensions\4.3.0\ref\netstandard1.0\System.Runtime.Extensions.dll /reference:C:\Users\...\.nuget\packages\system.text.encoding\4.3.0\ref\netstandard1.0\System.Text.Encoding.dll /reference:C:\Users\...\.nuget\packages\system.text.encoding.extensions\4.3.0\ref\netstandard1.0\System.Text.Encoding.Extensions.dll /reference:C:\Users\...\.nuget\packages\system.text.regularexpressions\4.3.0\ref\netstandard1.0\System.Text.RegularExpressions.dll /reference:C:\Users\...\.nuget\packages\system.threading\4.3.0\ref\netstandard1.0\System.Threading.dll /reference:C:\Users\...\.nuget\packages\system.threading.tasks\4.3.0\ref\netstandard1.0\System.Threading.Tasks.dll /reference:C:\Users\...\.nuget\packages\system.threading.tasks.extensions\4.0.0\lib\netstandard1.0\System.Threading.Tasks.Extensions.dll /reference:C:\Users\...\.nuget\packages\system.xml.readerwriter\4.3.0\ref\netstandard1.0\System.Xml.ReaderWriter.dll /reference:C:\Users\...\.nuget\packages\system.xml.xdocument\4.3.0\ref\netstandard1.0\System.Xml.XDocument.dll /debug+ /debug:portable /filealign:512 /nologo /optimize- /out:obj\Debug\netstandard1.0\ClassLibrary.dll /ruleset:"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /target:library /warnaserror- /utf8output /deterministic+ MyClass.cs "C:\Users\...\AppData\Local\Temp\.NETStandard,Version=v1.0.AssemblyAttributes.cs" obj\Debug\netstandard1.0\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\Debug\netstandard1.0\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\Debug\netstandard1.0\\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\Debug\netstandard1.0\ClassLibrary.AssemblyInfo.cs /warnaserror+:NU1605
1&gt;    Using shared compilation with compiler from directory: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn
1&gt;    MyClass.cs(11,31,11,43): error CS1983: The return type of an async method must be void, Task or Task&lt;T&gt;
1&gt;  Done executing task "Csc" -- FAILED.
`</Code>
    <Description>This seems to be the same issue as #19616, and I read through #17417 and #16530 as well. But since they're all closed, and it seems like it's been a while since #12621 was last worked on, I created this new issue.

I've been working with `ValueTask&lt;T&gt;` over the past month or so, and it's been OK (with the `SuppressMessage` attribute), until just today I got this error that I can't get rid of. I wonder if this issue could have re-surfaced in a recent patch or something.

**Version Used**: 
Visual Studio 15.5.6

**Steps to Reproduce**:
Simple solution containing one `.csproj` file:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24677</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>24677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update System.Reflection.Metadata dependency</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24677</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.1

Roslyn builds and ships using old System.Reflection.Metadata dependency. The [fix]( was made to make System.Reflection.Metadata work on big-endian systems but Roslyn is still using very old version.

This blocks using Roslyn on big-endian systems and also makes features/enhancements like #24621 testing harder.

/cc @jaredpar</Description>
  </Issue>
  <Issue>
    <IssueID>24675</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>24675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler should report why a delegate conversion failed</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>14/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>24675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24675</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
delegate void D();
class Program
{
    static void Main()
    {
        D d = new D(Program.Method);
    }
    void Method() {}
}


We used to report
 none
error CS0120: An object reference is required for the non-static field, method, or property 'Program.Method()'


It used to be that `Program.Method` was a perfectly good method group that converts to the delegate type `D` with an error. However, under the new proposed rules for https://github.com/dotnet/csharplang/issues/98 it remains a perfectly good method group that no longer converts to the delegate type `D`, as no method in the group survives the new overload resolution rules. The compiler, under the new rules, reports

 none
error CS0123: No overload for 'Method' matches delegate 'D'
`</Code>
    <Description>I was recently implementing support for  and discovered a regression in the quality of diagnostic for the following situation

``

The compiler has enough information internally to know *why* overload resolution failed here (it is because "An object reference is required for the non-static field, method, or property 'Program.Method()'"). However, the C# compiler currently never reports the underlying reason for a method group conversion failure.

I propose that some or all causes of a method group conversion failure should be reported. That would restore the quality of diagnostic for this particular case.
</Description>
  </Issue>
  <Issue>
    <IssueID>24671</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>M.CA.CS.UT.DeclarationParsingTests.ProduceErrorsOnRef_Properties_Ref_Get failed on ubuntu</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> from PR </Description>
  </Issue>
  <Issue>
    <IssueID>24670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>support for recursive DebuggerDisplay .</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It would be nice to have DebuggerDisplay represent complex types recursively. so we don't have to rewrite everything again.

    [DebuggerDisplay("Foo: {FooProperty}, Bar: {BarProperty}")]

here `FooProperty` has its own `DebuggerDisplay` as well as `BarProperty`. It would be nice if this could be chained. (either via additional syntax or simply represent like this by default)

---

I did search on SO but couldn't find an accurate answer. 


</Description>
  </Issue>
  <Issue>
    <IssueID>24669</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>LinkList.RemoveFirst/Last should return node</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>06/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>24669</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Its strange. AddFirst and AddLast returns the node. but remove doesn't return the node. makes it harder to work with LinkList.

I don't think it would be a breaking change to make void method to return something. unless there are reflection uses, but you are not promising on implementation details, do you? please fix it. thank you so much.
</Description>
  </Issue>
  <Issue>
    <IssueID>24668</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS lacks ability to reset expandabale regions</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>based on this post you can see that visual studio lacks the ability to do a very simple feature. 



Please add this feature. I like to have my defined regions always collapsed to have minimalist view in entire project. 

only when I want, I can expand them. and after some work, I like to set them back to default to keep clean view of my project. 

deleting `.vs` folder seems to work, but that's not accurate solution. I think this feature should be added, considering near zero effort it takes and very good benefit it gives. (clean view and keeps #regions tight and manageable)
</Description>
  </Issue>
  <Issue>
    <IssueID>24658</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing File Banner not using the most common banner?</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>24658</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have four C# files with banners, one file has &amp;quot;// Banner 1&amp;quot; and three have &amp;quot;// Banner 2&amp;quot;. Now I added a new C# file, and try the Missing File Banner code fix.  &amp;quot;// Banner 1&amp;quot; was provided.How do you decide which banner to use when there are multiple ones inside of a project?_This issue has been moved from VSTS ticketId: 502137__These are the original issue comments:_Anthony D. Green [MSFT] on 9/29/2017, 04:59 PM (129 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24657</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>brace indent incorrect after return</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24657</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24657</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24657</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24657</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
if (something)
    {
}
`</Code>
    <Description>Since 15.5.6 update
typing in c#

``

The open brace after a return is incorrectly indented but the close brace is correctly positioned.

_This issue has been moved from 
VSTS ticketId: 560668_
_These are the original issue comments:_

George Csikos on 1/31/2018, 10:19 PM (4 days ago): &lt;p&gt;Here is a screen shot.&lt;/p&gt;&lt;p&gt;&lt;a target='_blank' href="

_These are the original issue solutions:_

Michael Csikos solved on 1/31/2018, 10:57 PM (4 days ago), 0 votes: &lt;p&gt;This happens for me on 15.5.5 also. With "&lt;strong&gt;Automatic brace completion&lt;/strong&gt;" switched off and &lt;strong&gt;Code Style&lt;/strong&gt; &amp;gt; &lt;strong&gt;Formatting&lt;/strong&gt; &amp;gt; &lt;strong&gt;General&lt;/strong&gt; &amp;gt; (all options off) it will not line up the \{ as expected but the } is lined up. If "&lt;strong&gt;Automatically format when typing&lt;/strong&gt;" is switched on with all other options off, it does work. I don't know if there are any unwanted side effects, though.&lt;/p&gt;

</Description>
  </Issue>
  <Issue>
    <IssueID>24654</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected red squiggles when working inside lambda</Title>
    <CreatedDate>06/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void InIsWrittenToMetadata_NeedsToBeGenerated_Delegate_Parameter()
        {
            var text = @"
public delegate void D(in int x);
";

            CompileAndVerify(text, symbolValidator: module =&gt;
            {
                var parameter = module.ContainingAssembly.GetTypeByMetadataName("D").DelegateInvokeMethod.GetParameters().Single();
                Assert.Equal(RefKind.In, parameter.RefKind);

                Assert.Empty(parameter.GetAttributes(), module.ContainingAssembly.Name); // there is an error on this line (extra argument), which somehow causes squiggles on line above
            });
        }


![image](https://user-images.githubusercontent.com/12466233/35835539-17040560-0a90-11e8-857b-9e53ae0e9416.png)

![image](https://user-images.githubusercontent.com/12466233/35835572-47a69e4e-0a90-11e8-9bcb-47959c4e1baa.png)

Removing the extra argument clears the problem:
![image](https://user-images.githubusercontent.com/12466233/35835581-55bd1eb8-0a90-11e8-9da2-e7a973cdb6e7.png)

![image](https://user-images.githubusercontent.com/12466233/35835626-9f9f5442-0a90-11e8-9eb5-5888b8072522.png)


8&gt;Attributes\AttributeTests_RefReadOnly.cs(518,24,518,29): error CS1501: No overload for method 'Empty' takes 2 arguments
8&gt;Attributes\AttributeTests_RefReadOnly.cs(515,33,515,106): error CS1929: 'IMethodSymbol' does not contain a definition for 'GetParameters' and the best extension method overload 'SymbolExtensions.GetParameters(Symbol)' requires a receiver of type 'Symbol'
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>24653</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>2.6.1: NullReferenceException in BatchFixAllProvider</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>19/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24653</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryAddDocumentMergeChangesAsync&gt;d__19.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFinalDocumentTextAsync&gt;d__14.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetDocumentIdToFinalTextAsync&gt;d__13.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryMergeFixesAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;TryGetMergedFixAsync&gt;d__9.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFixAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.&lt;GetFixAsync&gt;d__2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.&lt;GetOperationsAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.SolutionProcessor.&lt;ApplyFixesAsync&gt;d__2.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.SolutionProcessor.&lt;ProcessSolutionAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Core.Processor.&lt;ProcessAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;MainAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;Main&gt;d__0.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at WTG.BulkAnalysis.Runner.Program.&lt;Main&gt;(String[] args)


Or, simplified:


Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryAddDocumentMergeChangesAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFinalDocumentTextAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetDocumentIdToFinalTextAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryMergeFixesAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryGetMergedFixAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync
   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync
   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.GetOperationsAsync
   at WTG.BulkAnalysis.Core.SolutionProcessor.ApplyFixesAsync
   at WTG.BulkAnalysis.Core.SolutionProcessor.ProcessSolutionAsync
   at WTG.BulkAnalysis.Core.Processor.ProcessAsync
   at WTG.BulkAnalysis.Runner.Program.MainAsync
   at WTG.BulkAnalysis.Runner.Program.Main(String[] args)


`CodeFixEquivalenceGroup.GetOperationsAsync` looks like this:


public async Task&lt;ImmutableArray&lt;CodeActionOperation&gt;&gt; GetOperationsAsync(CancellationToken cancellationToken)
{
    var diagnostic = documentDiagnosticsToFix
        .Values
        .SelectMany(i =&gt; i.Values)
        .Concat(projectDiagnosticsToFix.Values)
        .First()
        .First();

    var document = solution.GetDocument(diagnostic.Location.SourceTree);

    var diagnosticIds = new HashSet&lt;string&gt;(
        documentDiagnosticsToFix
            .Values
            .SelectMany(i =&gt; i.Values)
            .Concat(projectDiagnosticsToFix.Values)
            .SelectMany(i =&gt; i)
            .Select(j =&gt; j.Id));

    var diagnosticsProvider = new TesterDiagnosticProvider(
        documentDiagnosticsToFix,
        projectDiagnosticsToFix);

    var context = new FixAllContext(
        document,
        codeFixProvider,
        FixAllScope.Solution,
        codeFixEquivalenceKey,
        diagnosticIds,
        diagnosticsProvider,
        cancellationToken);

    var action = await fixAllProvider
        .GetFixAsync(context)
        .ConfigureAwait(false);

    return await action
        .GetOperationsAsync(cancellationToken)
        .ConfigureAwait(false);
}
`</Code>
    <Description>**Version Used**: 

Microsoft.CodeAnalysis v2.6.1, running on .NET Framework 4.7.1

**Steps to Reproduce**:

This is tricky - I have a program (not open-source) that applies code fixes across large amounts of solutions.

When upgrading it from Roslyn 2.2 to Roslyn 2.6.1, I encountered this exception.

**Expected Behavior**:

Program works as it used to.

**Actual Behavior**:

``

`fixAllProvider` comes from `Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider()`.

The cause of the crash appears to be that `differenceService` is null [here](</Description>
  </Issue>
  <Issue>
    <IssueID>24652</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Compiler is not consistent with the CLR for the underlying representation of bool</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Issue

Today the C# compiler does not emit code handling for `bool` that is consistent with the underlying representation of `bool` in the CLR.

The C# specification states:
&gt; The bool type represents boolean logical quantities. The possible values of type bool are true and false.

The spec also indicates that it is 1-byte. Specifically that the result of the `sizeof(bool)` expression is `1`.

While the ECMA 335 specification states:
&gt; A CLI Boolean type occupies 1 byte in memory. A bit pattern of all zeroes denotes a value of
false. A bit pattern with any one or more bits set (analogous to a non-zero integer) denotes a
value of true. For the purpose of stack operations boolean values are treated as unsigned 1-byte
integers (§III.1.1.1).

This can lead to confusion about the handling and cause various inconsistencies in various edge cases (see  for such a thread).

### Proposal

It would be good to determine:
* Should the spec be updated?
  * The spec would explicitly list the expected values of `true`/`false` so that two implementations don't behave differently
* Can the compiler be updated?
  * Given that we are emitting for the CLR, we would make our handling match the expected representations for the two boolean values (`0`/`not 0`) of the underlying platform

### Current Behavior

The majority of the behaviors below actually match the CLR expectation that a `bool` can be more than just `0` or `1`. However some of the behaviors (such as `&amp;&amp;`) does not match this expectation and can cause issues when interoping with any code that would assume otherwise (generally this is some kind of interop or unsafe code).

* `!value`
``</Description>
  </Issue>
  <Issue>
    <IssueID>24650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetOperation should succeed on local function with block and expression bodies</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>02/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the test below, `GetOperation` should not return `null` since the semantic model allows querying that piece of syntax.

``

Follow-up to </Description>
  </Issue>
  <Issue>
    <IssueID>24647</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda after Local Function will crash VS</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>By writing the following code:namespace LocalFunc{    class Program    {        static void Main(string[] args)        {            void Func() { } =&amp;gt; new object(); // invalid code        }    }}After couple of seconds VS will freez and crash with the following Stack trace from Event Viewer:Application: devenv.exeFramework Version: v4.0.30319Description: The application requested process termination through System.Environment.FailFast(string message).Message: System.NullReferenceException: Object reference not set to an instance of an object.   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionBodyAsBlock(ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp;amp; bindableNode, BoundNode&amp;amp; lowestBoundNode, BoundNode&amp;amp; highestBoundNode, BoundNode&amp;amp; boundParent)   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, ISemanticFactsService semanticFacts, ISyntaxFactsService syntaxFacts, SyntaxToken token, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, SyntaxToken token, Workspace workspace, CancellationToken cancellationToken)   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;GetSemanticInfoAtPositionAsync&amp;gt;d__2.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.&amp;lt;FindSymbolAtPositionAsync&amp;gt;d__1.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&amp;lt;GetDocumentHighlightsInCurrentProcessAsync&amp;gt;d__2.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.DocumentHighlighting.AbstractDocumentHighlightsService.&amp;lt;GetDocumentHighlightsAsync&amp;gt;d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;&amp;lt;TryNewServiceAsync&amp;gt;b__14_0&amp;gt;d.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;TryServiceAsync&amp;gt;d__15`1.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.ReferenceHighlighting.ReferenceHighlightingViewTaggerProvider.&amp;lt;ProduceTagsAsync&amp;gt;d__12.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1.TagSource.&amp;lt;RecomputeTagsAsync&amp;gt;d__73.MoveNext()Stack:   at System.Environment.FailFast(System.String, System.Exception)   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&amp;lt;System.Exception&amp;gt;)   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()   at System.Threading.Tasks.Task.Execute()   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.Task.FinishContinuations()   at System.Threading.Tasks.Task.FinishStageThree()   at System.Threading.Tasks.Task.FinishStageTwo()   at System.Threading.Tasks.Task.Finish(Boolean)   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)   at System.Threading.Tasks.Task.FinishContinuations()   at System.Threading.Tasks.Task.FinishStageThree()   at System.Threading.Tasks.Task.FinishStageTwo()   at System.Threading.Tasks.Task.Finish(Boolean)   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()   at System.Threading.ThreadPoolWorkQueue.Dispatch()   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()The recorder is also crashing when trying to record the crash._This issue has been moved from VSTS ticketId: 557232__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24646</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Multi-target build task to net4x/netcoreapp20</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24646</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>.NET Standard msbuild tasks are problematic and just about everyone has converged on multi-targeting instead (including SDK and core nuget tasks).  is one example of the problems that can be hit. There are workarounds, but it is fragile.

Recently, the build task added a dependency on Pipes.AccessControl that is not part of the shared framework, so it needed to be included in the package. To do this, the netstandard1.3 was published dropping a bunch of other unnecessary dependencies next to the build tasks and breaking crossgen upon insertion in to the CLI.

Publishing a netstandard library is basically a broken scenario. See  which goes on to discuss warnings/errors for this case. When you publish, you should really use a "runnable" TFM like net46 or netcoreapp2.0.

For now, CLI is deleting the extra assemblies to unblock the insertion, but this isn't sustainable because it's implemented with fragile wild-cards ("System.*", but not Pipes.AccessControl) that are subject to change at any time. 

Assigning to @jaredpar as he asked me to do so offline.</Description>
  </Issue>
  <Issue>
    <IssueID>24645</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Verify unused strings are eventually removed from the SQLite string table</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>24645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>24645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.5.1

:link: 

In the performance trace included with the feedback ticket, more than 2GB is allocated in `TryFetchStringTable`, with more than 700MB allocated just for the `byte[]` buffers used to hold the raw database string contents. This indicates one of the following is occurring:

1. `TryFetchStringTable` is called too many times
2. The database contains far more strings than are actually needed by the IDE
3. The string table is simply gigantic for this project</Description>
  </Issue>
  <Issue>
    <IssueID>24644</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function can access a variable before initialization</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24644</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 15.5.5
**Steps to Reproduce**:

    internal class Program
    {
        private static void Main(string[] args)
        {
            var result = GuessWhatWillHappen();
            Console.WriteLine($"Is result null? {result == null}");
            Console.ReadLine();
        }

        private static string GuessWhatWillHappen()
        {
            SetStringValue();
            string foo = null;

            void SetStringValue()
            {
                foo = "bar";
            }

            return foo;
        }
    }

**Expected Behavior**:
"Cannot use local variable 'foo' before it is declared" or runtime error cannot access uninitialized variable 'foo'.


**Actual Behavior**:
When local funcion SetStringValue is called the foo is assigned the value of "bar" then the foo initialization code is reached and it is set to null
</Description>
  </Issue>
  <Issue>
    <IssueID>24643</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Using ref-assembly feature breaks GoToDefinition</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 15.6.0 preview 3

**Steps to Reproduce**:
1. Create a solution with project A referencing project B where A calls a method defined in B
2. Add `&lt;ProduceReferenceAssembly&gt;true&lt;/ProduceReferenceAssembly&gt;` to the project file of project B
3. Press F12 on the call site where project A calls project B (works, goes to definition of B)
4. Compile project, restart VS
5. Press F12 on the call site where project A calls project B (fails, goes to ref-assembly stub)

**Expected Behavior**:
It should not matter whether the project was compiled in a previous VS instance, "go to definition" should always go to the definition in project B.

**Actual Behavior**:
If the project is compiled and VS is restarted, Roslyn uses the ref-assembly without connecting it to project B, and instead generates a source file from metadata when doing "go to definition". It does not go to the actual definition in project B.</Description>
  </Issue>
  <Issue>
    <IssueID>24642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Poor error recovery after missing &gt;</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Example
{
    class Class1
    {
        public static IEnumerable&lt;(String Value, String Description) GetAllValues(Type t)
        {
            if (!t.IsEnum)
                throw new ArgumentException("no good");

            return Enum.GetValues(t).Cast&lt;Enum&gt;().Select(e =&gt; (e.ToString(), e.ToString()));
        }
    }
}
`</Code>
    <Description>Reported at [Link](
**Version Used**: 15.6 Preview 3

**Steps to Reproduce**:

``

**Expected Behavior**:

A message saying the `&gt;` is missing between `Description)` and `GetAllValues`.

**Actual Behavior**:

48 errors, and an editor that looks like this:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>24641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generic extension method with `in this` parameter fails to compile</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
public static class C {
  public static ref readonly T E&lt;T&gt;(this ref T x) where T : struct =&gt; ref x;
}


**Expected Behavior**:

Successful compilation, the same as for `ref` extension version:
c#
public static class C {
  public static ref readonly T E&lt;T&gt;(this ref T x) where T : struct =&gt; ref x;
}
`</Code>
    <Description>**Version Used**: 

master branch @ feb 5

**Steps to Reproduce**:

Compile the following code:
``

**Actual Behavior**:

&gt; error CS8338: The first parameter of an 'in' extension method 'E' must be a value type
</Description>
  </Issue>
  <Issue>
    <IssueID>24640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio hangs while writing a set property body with a typo</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>16/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
     private string _hello;
     public string Hello
      {
            get =&gt; _hello;
            set =&gt; SetProperty)ref
      }
`</Code>
    <Description>While writing a property set body, and having a typo, VS hangs, e.g.:

``

And then attempt to remove the typo..

_This issue has been moved from 
VSTS ticketId: 562172_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24631</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ReplacePropertyWithMethodsCodeRefactoringProvider encounted an error and has been disabled</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24631</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello,
Since 15.5.5 I am getting ReplacePropertyWithMethodsCodeRefactoringProvider  disabled quite ofter when trying to refactor property with this error:

exception:

``

_This issue has been moved from 
VSTS ticketId: 558836_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Metadata file System.Runtime.dll could not be found</Title>
    <CreatedDate>05/02/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
1.0.8

**Steps to Reproduce**:
Can only reliably reproduce on some servers

**Expected Behavior**:
The assembly compiles.

**Actual Behavior**:
The assembly doesn't compile, and the error message makes no sense.

We use Roslyn for compiling code inside our app. We've been using it for about a year or so and have had no issues. But, recently we've been getting this error when we try to compile. I can't recreate the problem locally. It works fine on my dev computer, but the problem is occurring on two different servers where we have the app deployed.

&gt; Compiler Error Number: CS0006
&gt; Error Text: Metadata file &amp;apos;C:\Windows\system32\config\systemprofile\AppData\Local\assembly\dl3\8GTGDQKQ.4QR\V42JN801.7NM\36a4366e\f1f27652_1972d301\System.Runtime.dll&amp;apos; could not be found

Here is a list of referenced DLLs. Note that System.Runtime.dll is not one of them:

&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll
&gt; C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll
&gt; C:\inetpub\wwwroot\Portal\AMS\Adapt.Model.Common.dll

If I add a reference to the version System.Runtime.dll that is packaged with the app (in the bin folder of the app), I get the same error message.

Why is the compiler looking for the DLL at C:\Windows\system32\config\systemprofile\AppData\Local\assembly\dl3\8GTGDQKQ.4QR\V42JN801.7NM\36a4366e\f1f27652_1972d301\System.Runtime.dll? I never told it to look there. Why won't the compiler accept the reference to System.Runtime.dll that I am giving it?

Note: on my local dev machine where the assembly DOES compile, I don't have to add any reference to System.Runtime.dll
</Description>
  </Issue>
  <Issue>
    <IssueID>24628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Analyzer gives wrong fix solution</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
if (arg == null) throw new ArgumentNullException();
var key = MakeKey(arg);
dict[key] = arg;


The analyzer suggests using throw expressions:

csharp
var key = MakeKey(arg);
dict[key] = arg ?? throw new ArgumentNullException();
`</Code>
    <Description>My code looks like:

``

But in fact the two are not identical because `MakeKey` method can have side effects.

_This issue has been moved from 
VSTS ticketId: 556384_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24628</IssueID>
        <PullRequestID>21616</PullRequestID>
        <Title>Do not offer 'use throw expression' if value is accessed before being checked for null.</Title>
        <Description>Fixes </Description>
        <CreatedDate>18/08/2017</CreatedDate>
        <ClosedDate>19/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>24628</IssueID>
            <PullRequestID>21616</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24627</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.InvalidOperationException: Unexpected value 'TypeExpression expression</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>07/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
CLR: Managed code called FailFast, saying "System.InvalidOperationException: Unexpected value 'TypeExpression expression of MyStruct&lt;MyStruct&lt;A, B&gt;, B&gt; type' of type 'System.String'
   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckInvocationArgMixing(SyntaxNode syntax, Symbol symbol, BoundExpression receiverOpt, ImmutableArray`1 parameters, ImmutableArray`1 argsOpt, ImmutableArray`1 argRefKindsOpt, ImmutableArray`1 argsToParamsOpt, UInt32 scopeOfTheContainingExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued(SyntaxNode node, SyntaxNode expression, String methodName, OverloadResolutionResult`1 result, AnalyzedArguments analyzedArguments, MethodGroup methodGroup, NamedTypeSymbol delegateTypeOpt, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation(SyntaxNode syntax, SyntaxNode expression, String methodName, BoundMethodGroup methodGroup, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(SyntaxNode node, SyntaxNode expression, String methodName, BoundExpression boundExpression, AnalyzedArguments analyzedArguments, DiagnosticBag diagnostics, CSharpSyntaxNode queryClause, Boolean allowUnexpandedForm)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, Boolean allowsAnyExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.BindMethodBody(MethodSymbol method, TypeCompilationState compilationState, DiagnosticBag diagnostics, ImportChain&amp; importChain, Boolean&amp; originalBodyNested)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()"
`</Code>
    <Description>**Version Used**:  2.6.1 (

**Steps to Reproduce**: 

1. Compile attached program: 

[Program.txt](

**Expected Behavior**: Compile error reported

**Actual Behavior**: Compiler crash

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Decompiler: NullReferenceException in DecompileSymbolAsync</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
adbce761b91992740c128b7d4233f51b49541e97

**Steps to Reproduce**:

When hosting Roslyn outside of Visual Studio we try to go to definition for `System.Windows.Media.Colors` and the decompiler is invoked. When trying to decompile, this line gets called:



This is because `var reference = compilation.GetMetadataReference(symbol.ContainingAssembly);` returns null. It asks for PresentationCore, and there is a PresentationCore in the list of references, however the object in the list is a different instance, and the lookup is simply done using ReferenceEquals, so since the objects are different the lookup fails. Not sure if the lookup in here should be using value identity:

Not sure what the contract of the `GetMetadataReference` method is (reference identity or value identity?)

**Expected Behavior**:
Should work.

**Actual Behavior**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>24625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>KirillOsenkov</FixedById>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SuggestedActionsSourceProvider is not resilient against documents that are not part of a workspace</Title>
    <CreatedDate>04/02/2018</CreatedDate>
    <ClosedDate>16/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
NullReferenceException:

Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.&lt;GetFixLevelAsync&gt;d__40.MoveNext() in /_/src/EditorFeatures/Core.Wpf/Suggestions/SuggestedActionsSource.cs:line 736
`</Code>
    <Description>**Version Used**: 
adbce761b91992740c128b7d4233f51b49541e97

**Steps to Reproduce**:

1. Have a C# .cs document that is not a part of a workspace (content type must be CSharp)
2. Open that document in an editor

**Expected Behavior**:
SuggestedActionsSource should be resilient against the situation where the text view/buffer for the .cs document is not added to the workspace.

**Actual Behavior**:
``

In these locations, we need to gracefully deal with the fact that document may be null:




Note that this location already does the right thing:
</Description>
  </Issue>
  <Issue>
    <IssueID>24622</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC scenario: stack corruption when editing recursive function</Title>
    <CreatedDate>03/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>24622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>24622</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Likely a CLR bug: 

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24618</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC test scenario: Recursive function update</Title>
    <CreatedDate>03/02/2018</CreatedDate>
    <ClosedDate>03/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>24618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>24618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This scenario has been broken prior Dev15.7.

Validates that remap list contains as many entries as there are active frames that need remapping and entries that point to the same instruction are not de-duplicated (as they need to be used to remap all the affected frames).

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>24615</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>F12 on Span type includes unnecessary attributes</Title>
    <CreatedDate>03/02/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24615</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In a new .NET Core project, add a reference to `System.Memory` package from myget (see info below).
Then use `Span` in code and GoToDefinition.

The `IsByRefLike` and the `IsReadOnly` attributes are displayed.
This is likely a compiler problem. The `GetAttributes` method should filter those attributes out.

![image](

![image](

Tagging @VSadov @OmarTawfik 

Relates to  (`[Obsolete]`)
Relates to  (`[deprecated]`)
Relates to  (`in` parameters)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24615</IssueID>
        <PullRequestID>22553</PullRequestID>
        <Title>Compiler API not to return [Obsolete] for IsByRefLikeTypes</Title>
        <Description>Fixes #22450
Replaces #22504

The fix here is to stop returning [Obsolete] from compiler APIs.

@VSadov @dotnet/roslyn-compiler @dotnet/roslyn-ide for code review
@jaredpar for ask mode approval</Description>
        <CreatedDate>05/10/2017</CreatedDate>
        <ClosedDate>11/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Readonly References</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22553</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>OmarTawfik</FixedById>
            <PullRequestID>22553</PullRequestID>
            <IssueID>24615</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24615</IssueID>
        <PullRequestID>22504</PullRequestID>
        <Title>Hide [deprecated] quick info on ref-like types</Title>
        <Description>Fixes #22450

@dotnet/roslyn-compiler @dotnet/roslyn-ide for code review
@gafter for API review
@jaredpar for ask mode approval</Description>
        <CreatedDate>03/10/2017</CreatedDate>
        <ClosedDate>04/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22504</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22504</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22504</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Readonly References</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22504</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>22504</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>OmarTawfik</FixedById>
            <PullRequestID>22504</PullRequestID>
            <IssueID>24615</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24615</IssueID>
        <PullRequestID>24492</PullRequestID>
        <Title>Override completion with in parameter should omit IsReadOnly attribute</Title>
        <Description>Fixes 
Fixes 

Update: the PR now filters the `IsReadOnly` and `IsByRefLike` attributes in the compiler `GetAttributes()` API.
</Description>
        <CreatedDate>27/01/2018</CreatedDate>
        <ClosedDate>16/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>24492</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>24492</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>24615</IssueID>
            <PullRequestID>24492</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>24492</PullRequestID>
            <IssueID>24615</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>New generic class, No prompts if initialization</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>19/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The generic T constraint is a subclass of an interface with parameterless constructors, both A and B are properties of the interface new t{a=&amp;quot;&amp;quot;,b=&amp;quot;&amp;quot;}; The IDE does not hint_This issue has been moved from VSTS ticketId: 544394__These are the original issue comments:_Ariel Yang - MSFT on ‎12‎/‎26‎/‎2017, 08:36 PM (37 days ago): &lt;p&gt;Translated from bing :&lt;/p&gt;&lt;p&gt;A generic t constraint is a subclass of an interface with a parameterless constructor, and A and B are all properties of an interface&lt;br&gt;New T\{a= "", b= ""};&lt;br&gt;The IDE does not hint&lt;strong&gt;&lt;/strong&gt;&lt;u&gt;&lt;/u&gt;&lt;sub&gt;&lt;/sub&gt;&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;Jinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:00 PM (25 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>List VBCSCompiler as a non-critical process</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Need to update our SWIX files to have the following entry:

``

This will allow setup to silently kill VBCSCompiler during installations vs. showing a popup to users. Need to update to the SWIX build 1.0.295 in order for this to take effect. 

</Description>
  </Issue>
  <Issue>
    <IssueID>24609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Quick Actions and Refactoring - Implementing Interface dumps a ton of "NotImplementedExceptions" after EVERY interface member</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>05/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is pretty ridiculous. I get it, these aren't implemented, but I don't need the hassle of choosing to go through and remove every single exception or having to load the interface and copy over the member definitions. It's ESPECIALLY stupid because any getter-setter property gets two of these giant freaking exceptions for both getter and setter.It's so bulky and stupid. I don't know who thought it'd be a good idea.Give us an option to just add them in without all the exceptions._This issue has been moved from VSTS ticketId: 545636__These are the original issue comments:_Jinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:51 PM (25 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: VisualBasicParseOptions.ValidateOptions localizes error argument eager.</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>CS
diagnostics.Add(
    messageProvider.CreateDiagnostic(code, Location.None, 
        new CodeAnalysisResourcesLocalizableErrorArgument(errorArgumentResourceId)));

It seems there isn't a VBResourcesLocalizableErrorArgument class (at least I couldn't find anything suitable).

@AlekseyTs
There is Microsoft.CodeAnalysis.VisualBasic.LocalizableErrorArgument type.
Alternatively, for consistency with other places where the same diagnostics is created (that is the approach I would prefer), we should be able to call Diagnostic.Create overload that takes DiagnosticInfo. Like this:
CS
Diagnostic.Create(ErrorFactory.ErrorInfo(ERRID.ERR_ConditionalCompilationConstantNotValid,
                                            ErrorFactory.ErrorInfo(ERRID.ERR_ExpectedIdentifier),
                                            symbol.Key))
`</Code>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetDiagnosticsTests.CompilingCodeWithInvalidPreProcessorSymbolsShouldProvideDiagnostics` on a non-english machine. (There are more tests affected by this bug. See the original PR for details).

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails because [VisualBasicParseOptions.ValidateOptions]( localizes the error argument eager.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

@Mastr11
The diagnostic under test is created here like so:
`builder.Add(Diagnostic.Create(MessageProvider.Instance, ERRID.ERR_ConditionalCompilationConstantNotValid, VBResources.ERR_ExpectedIdentifier, symbol.Key))`
If I got you you right it should be created like this one:
``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24604</IssueID>
        <PullRequestID>24539</PullRequestID>
        <Title>Localization test failures 4</Title>
        <Description>Fix for #23837.
Follow up for #24407,#24424, #24426 and #24460.

This is the fifth of a series of PRs meant to resolve the unit test failures caused by missing localizations.

This PR includes test related to the compiler and fixes the remaining errors of #24460

### Roslyn.Compilers.CSharp.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.CSharp.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Emit.UnitTests
Unresolved. See below.
### Roslyn.Compilers.VisualBasic.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Symbol.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).

### Remarks for Roslyn.Compilers.VisualBasic.Emit.UnitTests 

There is only one failing test here but I couldn't resolve it.
The localization error could not be fixed, because the localized text is not part of Roslyn. The error message is produced by the runtime. There are options to circumvent the problem but the solutions are not straight forward, because there is an AppDomain created by the test. I just added a comment for the moment and awaiting further advices from the code review.</Description>
        <CreatedDate>30/01/2018</CreatedDate>
        <ClosedDate>02/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Localization</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24604</IssueID>
        <PullRequestID>25194</PullRequestID>
        <Title>Localization test failures VB Fix creation of diagnostic in VisualBasicParseOptions.ValidateOptions</Title>
        <Description>### Customer scenario

Running unit test `Microsoft.CodeAnalysis.VisualBasic.UnitTests.GetDiagnosticsTests.CompilingCodeWithInvalidPreProcessorSymbolsShouldProvideDiagnostics` and about 6 others on non English machines failed due to localization issues. The root cause was that the diagnostic for error `ERR_ConditionalCompilationConstantNotValid` wasn't created properly.

The solution was proposed by @AlekseyTs in #24604 
&gt; Alternatively, for consistency with other places where the same diagnostics is created (that is the approach I would prefer), we should be able to call Diagnostic.Create overload that takes DiagnosticInfo. Like this:

``

With this change in place the unit tests do not fail on a German machine.

### Bugs this fixes

Fixes #24604 

### Workarounds, if any

Ignore test failures.

### Risk

Low. 

### Performance impact

Low.

### Is this a regression from a previous update?

No.

### Root cause analysis

Diagnostics are meant to be localization neutral. This diagnostic was created with eager localized arguments.

### How was the bug found?

Contributor reported.

### Test documentation updated?

No.</Description>
        <CreatedDate>02/03/2018</CreatedDate>
        <ClosedDate>05/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>25194</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>25194</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>25194</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-VB</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>25194</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Localization</Name>
            <IssueID>24604</IssueID>
            <PullRequestID>25194</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: BoundTupleExpression.Display returns a string instead a FormattableString</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>06/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErrTuples` on a non-english machine.

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails for Diagnostics with a `BoundTupleExpression` because `BoundTupleExpression.Display` returns a localized string (e.g. German during the test run). BoundTupleExpression.Display should return a formattable string instead. There are some more tests that also fail. See the original PR for details.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

@Mastr11
The diagnostic is created [here]( and the argument is created via  `argument.Display` 
The problem here is that the [BoundTupleExpression.Display]( uses a stringbuilder. So the argument is a text as opposed to a `LocalizableErrorArgument`. I don't see any straight forward way on how to resolve this. @AlekseyTs I would propose to revert my changes here and let the test fail on non english machines for now. 

@AlekseyTs 
It would be great if you could fix it because you can easily verify the effect, but it is up to you.
I think there is a simple fix for BoundTupleExpression.Display. Instead of building complete string, we can build a format string with argument markers and collect arguments in an array. Then we call to System.Runtime.CompilerServices.FormattableStringFactory.Create and return its result.
There is also an issue with

``

This one can be fixed by creating an object that is very similar to LocalizableErrorArgument, that calls Format after getting the string for requested culture.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24603</IssueID>
        <PullRequestID>24539</PullRequestID>
        <Title>Localization test failures 4</Title>
        <Description>Fix for #23837.
Follow up for #24407,#24424, #24426 and #24460.

This is the fifth of a series of PRs meant to resolve the unit test failures caused by missing localizations.

This PR includes test related to the compiler and fixes the remaining errors of #24460

### Roslyn.Compilers.CSharp.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.CSharp.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Emit.UnitTests
Unresolved. See below.
### Roslyn.Compilers.VisualBasic.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Symbol.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).

### Remarks for Roslyn.Compilers.VisualBasic.Emit.UnitTests 

There is only one failing test here but I couldn't resolve it.
The localization error could not be fixed, because the localized text is not part of Roslyn. The error message is produced by the runtime. There are options to circumvent the problem but the solutions are not straight forward, because there is an AppDomain created by the test. I just added a comment for the moment and awaiting further advices from the code review.</Description>
        <CreatedDate>30/01/2018</CreatedDate>
        <ClosedDate>02/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Localization</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24603</IssueID>
        <PullRequestID>25209</PullRequestID>
        <Title>Localization test failures Return FormattableString for BoundTupleExpression.Display</Title>
        <Description>### Customer scenario

Running unit test `OverloadResolutionTests.GenericInferenceOnInErrTuples` on non English machines failed due to localization issues. The root cause was that `BoundTupleExpression.Display` returned a string instead of a localizable string. The PR implements the solution proposed by @AlekseyTs in #24603. 
As noted in #24603 `BoundStackAllocArrayCreation.Display` a few lines down needs also to be fixed. This will be done once the fix `BoundTupleExpression.Display` is reviewed as being valid.

### Bugs this fixes

Fixes #24603 

### Workarounds, if any

Ignore test failures.

### Risk

The proposed solution requires to allow `FormattableString` types in `DiagnosticInfo.Arguments`. This might lead to unwanted code patterns in respect to DiagnosticInfo and localizability in the future.

### Performance impact

Low.

### Is this a regression from a previous update?

### Root cause analysis

Localization wasn't tested before.

### How was the bug found?

Contributor reported.

### Test documentation updated?

No.
</Description>
        <CreatedDate>04/03/2018</CreatedDate>
        <ClosedDate>06/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>25209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>25209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-C#</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>25209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Localization</Name>
            <IssueID>24603</IssueID>
            <PullRequestID>25209</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24602</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test localization failures on non english machines: CodeGenRefReturnTests.RefReturnLateBoundCall</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>02/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Localization</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Extracted from the closed PR #24539 

**Steps to Reproduce**:

Run `Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenRefReturnTests.RefReturnLateBoundCall` on a non-english machine.

**Expected Behavior**:

Test passes.

**Actual Behavior**:

Test fails because the `expectedOutput:="Public member 'G' on type 'A' not found."` is culture dependent.

**History**

The issue was discussed but not resolved in #24539. The relevant sections are:

``

@AlekseyTs:

&gt; Modify code in the Main function above to change to invariant culture and restore at the end. The same way as it is done in Spilling_ExceptionInArrayAccess unit test for example.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24602</IssueID>
        <PullRequestID>24539</PullRequestID>
        <Title>Localization test failures 4</Title>
        <Description>Fix for #23837.
Follow up for #24407,#24424, #24426 and #24460.

This is the fifth of a series of PRs meant to resolve the unit test failures caused by missing localizations.

This PR includes test related to the compiler and fixes the remaining errors of #24460

### Roslyn.Compilers.CSharp.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.CSharp.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Emit.UnitTests
Unresolved. See below.
### Roslyn.Compilers.VisualBasic.Semantic.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Symbol.UnitTests
Done. Tested local (de-DE) and CI (en-US).
### Roslyn.Compilers.VisualBasic.Syntax.UnitTests
Done. Tested local (de-DE) and CI (en-US).

### Remarks for Roslyn.Compilers.VisualBasic.Emit.UnitTests 

There is only one failing test here but I couldn't resolve it.
The localization error could not be fixed, because the localized text is not part of Roslyn. The error message is produced by the runtime. There are options to circumvent the problem but the solutions are not straight forward, because there is an AppDomain created by the test. I just added a comment for the moment and awaiting further advices from the code review.</Description>
        <CreatedDate>30/01/2018</CreatedDate>
        <ClosedDate>02/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24602</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Localization</Name>
            <IssueID>24602</IssueID>
            <PullRequestID>24539</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24601</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Confusing error when generic extension methods with `in this` and T struct not compiling.</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    public static class TestExtension
    {
        public static void TestDispose&lt;T&gt;(in this T thisArg) where T : struct, IDisposable
        {

        }
    }


**Expected Behavior**:

The extension method should compile.

**Actual Behavior**:


Error	CS8338	The first parameter of an 'in' extension method 'TestDispose' must be a value type.
`</Code>
    <Description>Case: Using generic extension method with `in this T` and where T is a struct

**Version Used**: 
C# 7.2 (VS 2017 15.5.4)

**Steps to Reproduce**:

``
</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>24591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move to a 2.1.300-preview build of .NET Core SDK</Title>
    <CreatedDate>02/02/2018</CreatedDate>
    <ClosedDate>21/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently the roslyn build depends on a daily build of .NET Core SDK 2.2.0-preview.  However, following  the .NET Core SDK release that was going to be named 2.2 is now named 2.1.300.  So recent 2.1.300 builds are actually newer than historical 2.2.0 builds. 

Roslyn moving to a 2.1.300 build helps in several ways:

1. We shouldn't reference 2.2.0 SDK in the contributor docs since it no longer corresponds to a real upcoming version of the SDK.
2. Installing a 2.2.0 build on your machine will shadow 2.1.300 so you'll be using this build instead of a 2.1.300 preview (that is really newer) in projects without global.json (*)
3. We'd like to get roslyn on to a newer build to get more dogfooding coverage of recent SDK changes (particularly around build perf).

(*) Folks should also be instructed somewhere to uninstall any 2.2.0-preview on their machines when installing 2.1.300-preview.

cc @jaredpar 

</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>24589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to detect if Full Code Analysis is on/off</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 1.3.2

**Steps to Reproduce**:

1. In a DiagnosticAnalyzer register a analyzer callback(s) with RegisterCompliationStartAction
2. Observe callbacks don't fire with Full Code Analysis turned off.

**Expected Behavior**:
It's as expected.

**Actual Behavior**
Expose via the public api the "CSharpClosedFileDiagnostics" option so analyzer can make a decision on on how to be registered(if at all).
</Description>
  </Issue>
  <Issue>
    <IssueID>24584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misleading CS1628 error message for "in" parameters</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public readonly struct Point {
    public Struct(int x, int y) {
        X = x;
        Y = y;
    }
    public int X { get; }
    public int Y { get; }
}

public IEnumerable&lt;Point&gt; FindMatching(
    this IEnumerable&lt;Point&gt; points, 
    in Point toMatch) {
    return point.Where(p =&gt; p.X == point.X &amp;&amp; p.Y == point.Y);
}


**Expected Behavior**:

Error message mentioning the `in` parameter

**Actual Behavior**:


error CS1628: Cannot use ref or out parameter 'toMatch' inside an anonymous method, lambda expression, or query expression
`</Code>
    <Description>**Version Used**: 7.2

**Steps to Reproduce**:

``

The parameter is not marked `ref` or `out`</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24120</PullRequestID>
        <Title>moved waiter from diagnostics.dll to features.dll where all interface…</Title>
        <Description>…s are defined.

### Customer scenario

This doesn't affect customer experience. this is purely for testing. 

### Bugs this fixes



### Workarounds, if any

install our Roslyn.Test.Setup.vsix to machines that want to test our asynchronous features.

### Risk

This only affects Testing, so there shouldn't be user facing risk.

### Performance impact

There should be no perf impact due to this change to users. only affects testing.

### Is this a regression from a previous update?

N/A

### Root cause analysis

As all other Roslyn design, we separated out test related component from product component, and used vsix and MEF to inject those when it is needed (test env). it gave us clean separation. but gave us yet one more thing to setup when running test.

it was fine for our own test env, but when it meets with other components in VS and when other team needed to run some of their test with our test hook, it became yet one more point that can fail for test setup.

so, we now put those hooks in Roslyn dlls itself which can be enabled by env variable.

### How was the bug found?

during testing.

</Description>
        <CreatedDate>09/01/2018</CreatedDate>
        <ClosedDate>17/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24120</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>23920</PullRequestID>
        <Title>Fix a crash for a codeaction with overridden PostProcessAsync in the PreviewChanges dialog</Title>
        <Description>PreviewCodeAction was overriding ComputeOperations but returning a post-processed operation from the original action. This results in another PostProcess being called on the codeaction. If postprocess was overriden in originalaction that'll be ignored the second time

### Customer scenario
Bring up the a lightbulb for a codeaction that has the postprocess method overridden. Click on the Preview Changes button to bring up the preview dialog and then apply the codeaction. This can lead to the codeaction crashing and being disabled.

### Bugs this fixes
[556195](

### Workarounds, if any

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

### Risk

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

### Performance impact

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

### Is this a regression from a previous update?

### Root cause analysis

How did we miss it?  What tests are we adding to guard against it in the future?

### How was the bug found?

(E.g. customer reported it vs. ad hoc testing)

### Test documentation updated?

If this is a new non-compiler feature or a significant improvement to an existing feature, update  once you know which release it is targeting.
</Description>
        <CreatedDate>22/12/2017</CreatedDate>
        <ClosedDate>31/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>23920</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24458</PullRequestID>
        <Title>fix a case where persistent storage registration fails and some clean…</Title>
        <Description>… up code around it.

### Customer scenario

User creates a new solution with "Projects and Solutions" -&gt; "Save new projects when created" option off  and then later save the solution. and see yellow info bar on issues on Roslyn OOP a few seconds later.

### Bugs this fixes



### Workarounds, if any

No workaround

### Risk

No risk

### Performance impact

There is no change on perf since there is no change on persistent service's behavior.

### Is this a regression from a previous update?

No

### Root cause analysis

code was expecting very specific order of API calls from Host (here VS) when solution location is changed. basically, it expected register/unregisterPrimarySolution to be always called in pair. and this bug found one corner case which doesn't follow the expectation. in this specific case, VS won't raise events which will in turn make us to call unregister/register call, rather it will make us to call register twice with same solution. since we can't control host's behavior (this code is in lower layer than VS), code is changed to handle this kind of case properly. 

### How was the bug found?

user feedback.
</Description>
        <CreatedDate>25/01/2018</CreatedDate>
        <ClosedDate>31/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24458</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24512</PullRequestID>
        <Title>moved waiter from diagnostics.dll to features.dll where all interfaces are defined.</Title>
        <Description>this put this ( back into dev15.7.x and added shim to make old interface work until partner teams move out of them.

### Customer scenario

This doesn't affect customer experience. this is purely for testing. 

### Bugs this fixes



### Workarounds, if any

install our Roslyn.Test.Setup.vsix to machines that want to test our asynchronous features.

### Risk

This only affects Testing, so there shouldn't be user facing risk.

### Performance impact

There should be no perf impact due to this change to users. only affects testing.

### Is this a regression from a previous update?

N/A

### Root cause analysis

As all other Roslyn design, we separated out test related component from product component, and used vsix and MEF to inject those when it is needed (test env). it gave us clean separation. but gave us yet one more thing to setup when running test.

it was fine for our own test env, but when it meets with other components in VS and when other team needed to run some of their test with our test hook, it became yet one more point that can fail for test setup.

so, we now put those hooks in Roslyn dlls itself which can be enabled by env variable.

### How was the bug found?

during testing.

</Description>
        <CreatedDate>29/01/2018</CreatedDate>
        <ClosedDate>31/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24512</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24551</PullRequestID>
        <Title>added and cleaned up logs around build and live diagnostics.</Title>
        <Description>also added RoslynActivityLogger that can be enabled through project-system-tool

### Customer scenario

There is no user experience change in this PR. 

This PR is to let our project-system-tool ( to inject Roslyn logger so that we can use that tool to see roslyn activity around build/live errors and behavior of error list.

### Bugs this fixes

this doesn't fix any issue. but hopefully, help us to figure out what is causing this issue (

### Workarounds, if any

No workaround

### Risk

All these changes are no-op if Roslyn logger is not enabled explicitly through the tool.

### Performance impact

All these changes are no-op if Roslyn logger is not enabled explicitly through the tool.

### Is this a regression from a previous update?

No

### Root cause analysis

we are getting bunch of bugs around error list (error not showing, error not going away, build and live errors not consistent and etc). but since error list is just presentation that reflects current state, either dump or etl are not enough to find out how error list got to this state. this change let us to monitor activities around error list so that we can get better idea on how things moved to this state.

### How was the bug found?

Feedbacks.</Description>
        <CreatedDate>31/01/2018</CreatedDate>
        <ClosedDate>01/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24551</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24632</PullRequestID>
        <Title>Don't use inferred member name if that creates duplicates</Title>
        <Description>### Customer scenario
Use inferred name fixer on `var t = (alice: alice, alice);`. No fix should be offered, as it would result in the name for the first element being lost rather than inferred.

### Bugs this fixes
Fixes 

### Workarounds, if any
Don't invoke the fixer in such cases.

### Risk

### Performance impact


### Is this a regression from a previous update?
No

### How was the bug found?
Reported by customer</Description>
        <CreatedDate>05/02/2018</CreatedDate>
        <ClosedDate>05/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24632</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24632</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>24632</PullRequestID>
            <IssueID>24584</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24584</IssueID>
        <PullRequestID>24547</PullRequestID>
        <Title>Fix `is` and pattern-matching behavior in presence of implicit UD conversion</Title>
        <Description>Fix `is` and pattern-matching behavior in presence of implicit UD conversion
and also an explicit reference conversion between the same types.
User-defined conversions should never be considered for `is` and pattern-matching.

### Customer scenario

See #24522 

### Bugs this fixes

Fixes #24522

### Workarounds, if any

Casting the left-hand-side to `object` is often a work-around.

### Risk

Low, as the fix is quite localized.

### Performance impact

Should be slight performance improvement, as we now only check built-in conversions for certain type-check operations.

### Is this a regression from a previous update?

Yes. C#6 did not have this bug.

### Root cause analysis

We did not realize that it is possible for an implicit user-defined operator to be present when an explicit reference conversion applies.

We now have tests for the ways that symptoms can arise.

### How was the bug found?

Customer reported.

### Test documentation updated?

N/A
</Description>
        <CreatedDate>31/01/2018</CreatedDate>
        <ClosedDate>06/02/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24547</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24547</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>24584</IssueID>
            <PullRequestID>24547</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>24547</PullRequestID>
            <IssueID>24584</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24575</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Refactor: Rename - Renaming to Discard doesn't report 'Invalid Identifier'</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
- Visual Studio 15.5.5
- Project [Advanced Build Settings] - Language Version: C# latest major version (default)

**Steps to Reproduce**:
1. Using the two statements below:

        var (a, b) = (3, 4);
        Console.WriteLine(b);
2. Refactor `b` to `_`
3. Refactor window does not properly indicate that `_` is not a valid identifier.  

**Expected Behavior**:
Refactor Rename should indicate `The new name is not a valid identifier` or some other indication of what a discard is.

**Actual Behavior**:
Rename seems to indicate the discard name will not be an issue when it will cause a compilation error if there are one or more references.</Description>
  </Issue>
  <Issue>
    <IssueID>24574</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>add [Obsolete] and checkin VS side change for this change - https://github.com/dotnet/roslyn/pull/24512</Title>
    <CreatedDate>01/02/2018</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> added shim and it require vs side change (

make sure to add [Obsolete] to shim once vs side change is in.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>24574</IssueID>
        <PullRequestID>24512</PullRequestID>
        <Title>moved waiter from diagnostics.dll to features.dll where all interfaces are defined.</Title>
        <Description>this put this ( back into dev15.7.x and added shim to make old interface work until partner teams move out of them.

### Customer scenario

This doesn't affect customer experience. this is purely for testing. 

### Bugs this fixes



### Workarounds, if any

install our Roslyn.Test.Setup.vsix to machines that want to test our asynchronous features.

### Risk

This only affects Testing, so there shouldn't be user facing risk.

### Performance impact

There should be no perf impact due to this change to users. only affects testing.

### Is this a regression from a previous update?

N/A

### Root cause analysis

As all other Roslyn design, we separated out test related component from product component, and used vsix and MEF to inject those when it is needed (test env). it gave us clean separation. but gave us yet one more thing to setup when running test.

it was fine for our own test env, but when it meets with other components in VS and when other team needed to run some of their test with our test hook, it became yet one more point that can fail for test setup.

so, we now put those hooks in Roslyn dlls itself which can be enabled by env variable.

### How was the bug found?

during testing.

</Description>
        <CreatedDate>29/01/2018</CreatedDate>
        <ClosedDate>31/01/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>24574</IssueID>
            <PullRequestID>24512</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>24238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AlternateContent XAML tag causes IDE error but no compile error</Title>
    <CreatedDate>15/01/2018</CreatedDate>
    <ClosedDate>18/01/2018</ClosedDate>
    <IssueLabels />
    <Code>
&lt;mc:AlternateContent&gt;
	&lt;mc:Choice Requires="admin"&gt;
		&lt;Button x:Name="adminButton" Content="Admin Button"/&gt;
	&lt;/mc:Choice&gt;
&lt;/mc:AlternateContent&gt;

3.
Put this code in Properties/AssemblyInfo.cs 


#if ADMIN
[assembly: XmlnsDefinition("admin", "YourAssemblyName")]
#endif
`</Code>
    <Description>**Version Used**: 
Visual Studio 2017 15.6.0
C# 7.2

**Steps to Reproduce**:

1. 
Create a WPF project with the following code
Put this in the XAML file header
`xmlns:admin="admin"
`
2.
Put this XAML code somewhere in the visual tree
``
4.
Ensure you have a build flag named ADMIN in the build properties of your project.

Build the project, despite intellisene errors the project builds and runs as expected.

**Expected Behavior**:
XAML Designer does not display "Invalid Markup"
Intellisense does not highlight the text as if there is an error.

**Actual Behavior**:
![image](

Also raised the issue here:


Stack overflow discussion:


If this does not belong in Roslyn could someone please move the issue to the relevant repository?

Thank you.</Description>
  </Issue>
  <Issue>
    <IssueID>24237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>24237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider 'value is null' instead of 'value == null' for the "Add null check" codefix</Title>
    <CreatedDate>15/01/2018</CreatedDate>
    <ClosedDate>23/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It's possible that there could be a custom operator defined for `==`, which could be slower than a simple pointer comparison. `is null` reads better and is guaranteed to be just a pointer comparison.

This may warrant looking into the user's code style to see if they already have a lot of `== null`s or `is null`s, to see which codefix should be offered to maintain consistency.</Description>
  </Issue>
  <Issue>
    <IssueID>24236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>24236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Go To X - default selection is not intuitive</Title>
    <CreatedDate>14/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>24236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm used to Resharper which's GoToX feature works very intuitive. 99% of the time it selects the element I'm looking for.

In VisualStudio it's very strange. See the following examples:

Example1:
![image](

Why would you preselect the file without the right extension? I'd expect (1) to be the first file.

Example2:
![image](

Why is the filter 'greedy'. I'd expect (1) to be the first file.

Okay, maybe I can get to my MainViewModel without using the Mouse/Arrow-Keys with some tricks...

Example3:
![image](

Hmm... okay....

Example4:
![image](

ARE YOU SERIOUS??


I'd be very thankful if you could improve the search, since the idea is great but practically it's useless.

_This issue has been moved from 
VSTS ticketId: 550334_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB projects, by default, suppress warnings from 3rd party analyzers.</Title>
    <CreatedDate>14/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
&gt;	Microsoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProjectOptionsHelper.CreateCompilationOptions(baseCompilationOptionsOpt, newParseOptions, compilerOptions, compilerHost, globalImports, projectDirectoryOpt, ruleSetOpt) Line 52	Basic
 	Microsoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.CreateCompilationOptions(commandLineArguments, newParseOptions) Line 389	Basic
 	Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.UpdateOptions() Line 65	C#
 	Microsoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.UpdateOptions() Line 409	Basic
 	Microsoft.VisualStudio.LanguageServices.VisualBasic.ProjectSystemShim.VisualBasicProject.SetCompilerOptions(pCompilerOptions) Line 380	Basic


https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/VisualBasic/Impl/ProjectSystemShim/VisualBasicProjectOptionsHelper.vb#L50-L53

vb
            Dim generalDiagnosticOption As ReportDiagnostic = DetermineGeneralDiagnosticOption(compilerOptions.WarningLevel, ruleSetFileGeneralDiagnosticOption)
            Dim specificDiagnosticOptions As IReadOnlyDictionary(Of String, ReportDiagnostic) = DetermineSpecificDiagnosticOptions(compilerOptions, ruleSetFileSpecificDiagnosticOptions)
            Dim outputKind = GetOutputKind(compilerOptions)



At this point we set 'generalDiagnosticOption' to ReportDiagnostic.Supress.  

Later on when the analyzer reports the diagnostic, we get to:


&gt;	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetDiagnosticSink.AnonymousMethod__0(diagnostic, analyzer, isSyntaxDiagnostic) Line 1161	C#
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.GetAddDiagnostic.AnonymousMethod__0(diagnostic) Line 1472	C#
 	Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(diagnostic) Line 626	C#


This does:

c#
                var filteredDiagnostic = GetFilteredDiagnostic(diagnostic, compilation);
                if (filteredDiagnostic != null)
                {
                    addLocalDiagnosticCore(filteredDiagnostic, analyzer, isSyntaxDiagnostic);
                }


We end up filtering out the diagnostic.  The reason for this is:


&gt;	Microsoft.CodeAnalysis.VisualBasic.VisualBasicDiagnosticFilter.GetDiagnosticReport(severity, isEnabledByDefault, id, location, category, generalDiagnosticOption, caseInsensitiveSpecificDiagnosticOptions, hasDisableDirectiveSuppression) Line 109	Basic
 	Microsoft.CodeAnalysis.VisualBasic.VisualBasicDiagnosticFilter.Filter(diagnostic, generalDiagnosticOption, specificDiagnosticOptions) Line 71	Basic
 	Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.FilterDiagnostic(diagnostic) Line 1030	Basic
 	Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetFilteredDiagnostic(diagnostic, compilation) Line 1183	C#


https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Portable/Compilation/VisualBasicDiagnosticFilter.vb#L107-L110

vb
            If generalDiagnosticOption = ReportDiagnostic.Suppress AndAlso
            (severity = DiagnosticSeverity.Warning OrElse severity = DiagnosticSeverity.Info) Then
                Return ReportDiagnostic.Suppress
            End If
`</Code>
    <Description>I have an analyzer that reports warnings for C# and VB.  C# warnings show up fine in the IDE, but VB warnings do not show up at all (either squiggles or error list).  I debugged through both and found what the issue is.  However, i can't understand the logic and i don't know what the right fix is.

Here's the parts that are going wrong:

First:

``

Basically, because the 'generalDiagnosticOption' is Suppress (due to the top bit i linked), and because we reported something at Warning level, the diagnostic is Suppressed.  

 </Description>
  </Issue>
  <Issue>
    <IssueID>24234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue a warning when a field initializer is used with [ThreadStatic]</Title>
    <CreatedDate>14/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>24234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>C# compiler should warn if a field initializer is used with [ThreadStatic]. I think this is almost always a bug - I can't think of a scenario where this would be desired.

The initializer will run only once per appdomain, and not per thread (as a novice might expect). For all other threads the field will be initialized with null instead.</Description>
  </Issue>
  <Issue>
    <IssueID>24233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SIMD 64 Bit Memory-Alignment Bug</Title>
    <CreatedDate>14/01/2018</CreatedDate>
    <ClosedDate>29/01/2018</ClosedDate>
    <IssueLabels />
    <Code>`CSharp
        static unsafe void Test()
        {
            var value = new Vector3(0, 0, -41);
            var a = *(Numerics.Vector3*)(&amp;value);
        }

        static unsafe void TestB()
        {
            var value = new Vector3(0, 0, -41);
            var d = &amp;value;
            var a = *(Numerics.Vector3*)d;
        }
`

IL-Code:

`CIL
                 .method private hidebysig static 
			void Test () cil managed 
		{
			// Method begins at RVA 0x2144
			// Code size 33 (0x21)
			.maxstack 4
			.locals init (
				[0] valuetype [engenious]engenious.Vector3 'value',
				[1] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a
			)

			IL_0000: nop
			IL_0001: ldloca.s 'value'
			IL_0003: ldc.r4 0.0
			IL_0008: ldc.r4 0.0
			IL_000d: ldc.r4 -41
			IL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)
			IL_0017: ldloca.s 'value'
			IL_0019: conv.u
			IL_001a: ldobj [System.Numerics.Vectors]System.Numerics.Vector3
			IL_001f: stloc.1
			IL_0020: ret
		} // end of method Program::Test

		.method private hidebysig static 
			void TestB () cil managed 
		{
			// Method begins at RVA 0x2174
			// Code size 35 (0x23)
			.maxstack 4
			.locals init (
				[0] valuetype [engenious]engenious.Vector3 'value',
				[1] valuetype [engenious]engenious.Vector3* d,
				[2] valuetype [System.Numerics.Vectors]System.Numerics.Vector3 a
			)

			IL_0000: nop
			IL_0001: ldloca.s 'value'
			IL_0003: ldc.r4 0.0
			IL_0008: ldc.r4 0.0
			IL_000d: ldc.r4 -41
			IL_0012: call instance void [engenious]engenious.Vector3::.ctor(float32, float32, float32)
			IL_0017: ldloca.s 'value'
			IL_0019: conv.u
			IL_001a: stloc.1
			IL_001b: ldloc.1
			IL_001c: ldobj [System.Numerics.Vectors]System.Numerics.Vector3
			IL_0021: stloc.2
			IL_0022: ret
		} // end of method Program::TestB
``</Code>
    <Description>**Version Used**: .NET 4.7.1 C# 7.2

**Steps to Reproduce**:

1. Install engenious via nuget or wrote your own packed Vector3 or use a other packed Vector3
2. Cast with pointer to System.Numerics.Vector3 or own unpacked Vector3
3.  Just do the same thing, just put the pointer in a variable before it.
4. Compare the results

**A brief example:**

C#-Code:

``

**Expected Behavior**: Both methods should produce the same result on all systems.

Method Test: a should be &lt;0. 0. -41&gt;
Method TestB: a should be &lt;0. 0. -41&gt;

**Actual Behavior**: When you cast a packed vector into an unpacked vector, the result will always be a zero vector on some computers with 64 Bit and the use of a direct assignment.

Method TestB works on all systems no matter if 32 Bit or 64 Bit.
Method Test does not work as 64 bit version on some systems. Could this be related to the CPU used?

My Results compiled as 64 Bit:

Method Test: a is &lt;0. 0. 0&gt;
Metod TestB: a is &lt;0. 0. -41&gt;

On my PC, Method Test doesn't work. My CPU is Intel i7-5960X.

The only difference in CIL are the following lines:

IL_001a: stloc.1
IL_001b: ldloc.1</Description>
  </Issue>
  <Issue>
    <IssueID>24232</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>editorconfig not working for VB.NET in 15.5.2</Title>
    <CreatedDate>14/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I updated my Visual Studio to version 15.5.2 since then the editorconfig settings are not applied to vb files anymore.

I created a sample project here: 
It includes an interface that doesn't start with an I and a member variable that starts with `m_` instead of just an `_`. Both rules are included in the editorconfig file but are not applied anymore. When I open the project in a older version of Visual Studio 15.4.0 on my notebook it is working fine. The warnings are displayed as expected.

The warnings and suggestions for C# files seem to work fine, too.

Let me know if I need to provide more information.

Best regards,
Philipp

_This issue has been moved from 
VSTS ticketId: 549243_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24229</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Feature request: String interpolation as Expression&lt;Func&lt;string&gt;&gt;</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels />
    <Description>I'm not sure if this has already been requested once, but for C# string interpolation I would like to be able to have an Expression&lt;string&gt;, as with Linq expressions. This would allow for much richer string string formatting model usable for querying, templating and semantic logging.

I mentioned this first in a comment here: 

**Expected Behavior**:
string city = "London";
Expression&lt;Func&lt;string&gt;&gt; sql = $"SELECT * FROM cities where name={city}"

And it would prevent a library like Serilog from having to pass all parameters in addition to the message template, so instead of this: 
Log.Information("I live in {city}", city);

You can just write this:
Log.Information($"I live in {city}");

But STILL have access to the original message template and parameters.

Edit: So I noticed FormattableString now, which seems to solve a similar problem, except it doesn't provide access to he original list of arguments (and their names), only the values?
</Description>
  </Issue>
  <Issue>
    <IssueID>24228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>24228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add 'invert if' refactoring</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>08/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Community</Name>
        <IssueID>24228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We supposedly already have this written. Can we get it turned on?

@Pilchie for more context here.</Description>
  </Issue>
  <Issue>
    <IssueID>24227</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add refactoring for using var/explicit type</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>12/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Just like we did for expression-bodied members/block bodies, let's add a toggle for var/explicit type. This will allow developers to have their cursor on a `var` and use Ctrl+. to convert it to the explict type (and vice versa) without having to have a code suggestion.</Description>
  </Issue>
  <Issue>
    <IssueID>24226</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide a contextual IntelliSense option</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24226</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We currently preselect an item in the completion list that matches the target type of the current location. Several developers have asked that we additionally offer a 'mode' that will filter the list  to *only* items that match the target type of the current location _and_ name matching.

We can even consider always scoping the list down to matching target types unless there are none, in which case it will revert to the normal completion list.</Description>
  </Issue>
  <Issue>
    <IssueID>24225</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>24225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add some dead code analysis</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>22/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We now fade unreachable code and should be able to start identifying dead code.

To start, it would be nice to fade dead private and internal methods.</Description>
  </Issue>
  <Issue>
    <IssueID>24224</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Support more code snippets</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Filing on behalf of a customer who wants to be able to have postfix templates and custom templates (similar to ReSharper live templates).

Examples:
- .var
- .foreach
- "My own custom templates, e.g. I have a "ref" template for quick insertion of types in xmldoc: &lt;see cref="$TYPE$"/&gt;"

We have some of these with snippets, but I don't think we have all of them and our customization story isn't great. Also need to make sure we document all of these...</Description>
  </Issue>
  <Issue>
    <IssueID>24222</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC test scenario: Exception regions after multiple edits</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>24222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>24222</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Demonstrates possible off-by-one error in exception handler tracking.

**Steps to Reproduce**:

Console app:

``

**Wrong Behavior**:

Any other span is highlighted.
</Description>
  </Issue>
  <Issue>
    <IssueID>24221</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can't use applicable_kinds.parameter in Naming conventions in Editor Config</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24221</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm creating a .editorconfig file for our team which includes code style settings, but also contains naming conventions.The issue within the naming conventions is that I can't get the c# editor to show an error under a parameter which violates the rule.Am I missing something?_This issue has been moved from VSTS ticketId: 547550__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24220</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>EnC test scenario: Breakpoints in exception handlers</Title>
    <CreatedDate>13/01/2018</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>24220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test-Scenario</Name>
        <IssueID>24220</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Demonstrates possible off-by-one error in exception handler tracking.

**Steps to Reproduce**:

Console app:

``)
3. F5

**Expected Behavior**:

Breakpoint [2] is hit and use can continue stepping thru the method.

**Wrong Behavior**:

Breakpoint [2] isn't hit.</Description>
  </Issue>
  <Issue>
    <IssueID>24218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Workspace: investigate and design multiple solutions side-by-side</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>24218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>MonoDevelop/VSMac can open more than one solution side-by-side. Potentially it would be possible to rewire references across solutions to be ProjectReferences.

We should consider a design where more than one solution can be added to the workspace at a given time. I'm not saying that CurrentSolution should become CurrentSolutions, but just the AddSolution/RemoveSolution/ReloadSolution parts potentially.

I understand it would be hard to break the Workspace.CurrentSolution API, but maybe we could investigate:
1. having more than one solutions, and have a designated "current" one?
2. merge multiple solutions into a single logical CurrentSolution, basically just taking the projects from all opened solutions and merging them into one?

This would greatly help with current problems such as </Description>
  </Issue>
  <Issue>
    <IssueID>24217</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Font in Locals and Callstack windows is very tiny</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
    <IssueLabels />
    <Description>This is a fresh install of 15.6 preview 3 and the fonts in the Locals and Callstack window are unacceptably and unusually tiny

![image](

![image](

![image](

``

CC @jcouv </Description>
  </Issue>
  <Issue>
    <IssueID>24216</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VBCSCompiler uses a lot of CPU when idle in OSX</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24216</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1.  dotnet new console
2. dotnet build

**Expected Behavior**:
A VBCSCompiler process is created but sits idle when no compilation is being done.

**Actual Behavior**:
A VBCSCompiler process is created and according to Activity Monitor uses about 110% of CPU all the time. I can hear the fans on my Mac running non-stop even when there is nothing else going on in it. Checking activity monitor I can see the dotnet process spinning. The one that hosts the VBCSCompiler.</Description>
  </Issue>
  <Issue>
    <IssueID>24215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler unable to figure out whether to use get or set accessor</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>15/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  Visual Studio Community 15.5.3

**Steps to Reproduce**:
Consider the following code:
``


**Expected Behavior**:
Test2 should compile.
In Test2, the compiler should be able to figure out to use interface IWOClass when making the assignment to 'rw.Name'. And when accessing 'rw.Name', it should be able to figure out to use IROClass  interface. There is no ambiguity between IROClass.Name and IWOClass.Name since IROClass.Name has only a get accessor and IWOClass.Name has only a set accessor.

**Actual Behavior**:
Test1 can be compiled, whereas Test2 fails to compile.
</Description>
  </Issue>
  <Issue>
    <IssueID>24212</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxGenerator.NameOfExpression generates node with incorrect contextual kind</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>07/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24212</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0

**Steps to Reproduce**:

Use the API [SyntaxGenerator.NameOfExpression]( to generate a `nameof` expression for C#. The identifier generated for `nameof` should be a contextual keyword, but it is not. Following test should pass, but fails:

``

See skipped test `TestNameOfExpressions_ContextualKeyword` added with 

As a result,  binding fails for the compilation with generated syntax node with [CS0103]( `The name 'nameof' does not exist in the current context`.</Description>
  </Issue>
  <Issue>
    <IssueID>24211</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract method analyzer crashes in local function</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 15.6 Preview 2.0

**Steps to Reproduce**:

1.  Select statement in local function

**Actual Behavior**:
``


</Description>
  </Issue>
  <Issue>
    <IssueID>24210</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warn if stackalloc would throw with a constant size at runtime</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>24210</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>e.g. `Span&lt;int&gt; s = stackalloc int[int.MaxValue]`

Similar to 
Relates to warning waves</Description>
  </Issue>
  <Issue>
    <IssueID>24209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Enum Types and Enum Values should have different .editorconfig kinds</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>ini
    # Require const fields to be all upper-case
    dotnet_naming_symbols.const_fields.applicable_accessibilities = *
    dotnet_naming_symbols.const_fields.required_modifiers = const
    dotnet_naming_rule.const_fields.symbols = const_fields
    dotnet_naming_rule.const_fields.style = all_upper
    dotnet_naming_rule.const_fields.severity = warning

    # Require enums to be Pascal case
    dotnet_naming_symbols.enums.applicable_kinds = enum
    dotnet_naming_rule.enums.symbols = enums
    dotnet_naming_rule.enums.style = pascal_case
    dotnet_naming_rule.enums.severity = warning

    #Naming styles
    dotnet_naming_style.all_upper.capitalization = all_upper
    dotnet_naming_style.pascal_case.capitalization = pascal_case


and the following C# code.  The in-line comments represent the warnings shown after "`Naming rule violation:`" in Visual Studio:

cs
    public class DerpClass {
        public const int DERP = 5;      // OKAY
        public const int Derp = 5;      // These words cannot contain lower case characters: Derp
    }
    public enum EnumLower {
        val                             // These words cannot contain lower case characters: val
    }
    public enum EnumPascal {
        Val                             // These words cannot contain lower case characters: Val
    }
    public enum EnumUpper {
        VAL                             // OKAY
    }
    public enum derpenum {              // These words must begin with upper case characters: derpenum
        VAL
    }
`</Code>
    <Description>**Version Used**:
Not sure of Roslyn version, but using VS 15.5.3.

**Description**:
In the .editorconfig naming conventions described in the [docs]( symbols can be defined with `applicable_kinds` equal to `class`, `struct`, `enum`, etc.  From my own testing, it appears that enumerated _types_ use the `enum` kind, while enumerated _values_ use the `const` kind.  This can be frustrating, as shown in the code below.  I [asked]( about this on StackOverflow a while back, and nobody had a legitimate solution, so I figured I'd raise an Issue.  If this is not the correct repo for .NET .editorconfig settings, please direct me to the correct one.

Consider the following .editorconfig (the more complete file that I use is available [here](

``

As you can see, the `enums` naming rule applies only to the _name_ of enum types, not to their values.  Instead, enum values share the `const_fields` naming rule with `const` fields.  This is frustrating, as I either have to make my enumerated values all-upper-case or make my const fields Pascal-case, neither of which follows typical naming conventions for a C-based language.  But it's either that or deal with a million `Naming rule violation` warnings throughout my codebase (or Messages, if I change `severity`).

Since the `enum` `applicable_kind` value is clearly meant for enum _type_ names, similar to the `class` and `struct` kinds, it would be great if there were another `applicable_kind` for enumerated values, say `enum_value`.  That way, enum types, enum values, and const fields could all have their own naming styles.  If the Roslyn compiler really treats enum values as consts then I could see this being difficult to implement, but I know nothing of compiler design so hopefully it can be done!</Description>
  </Issue>
  <Issue>
    <IssueID>24208</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>UseExplicitType on var deconstructions doesn't work in Roslyn</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Just tried it on some compiler code `var (..., ...) = ...;` and the fix was not offered. I need to investigate more.</Description>
  </Issue>
  <Issue>
    <IssueID>24207</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>#pragma warning disable not functioning in shared project file</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 
Version 15.5.3
VisualStudio.15.Release/15.5.3+27130.2020
Microsoft .NET Framework
Version 4.7.02556

**Steps to Reproduce**:

#pragma warning disable does not function when it's in a file used by a shared project. See attached screenshot.

The solution is a .NET Framework project with a reference to a shared project.

![pragma warning disable not functioning in shared project file](

**Expected Behavior**:
No warnings should be shown in files marked with #pragma warning disable

**Actual Behavior**:
Warning are shown in files marked with #pragma warning disable</Description>
  </Issue>
  <Issue>
    <IssueID>24206</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ISymbolKind.Kind: Discard missing</Title>
    <CreatedDate>12/01/2018</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> ./src/Compilers/CSharp/Portable/Symbols/Symbol.cs switch case in ISymbol.Kind case SymbolKind.Discard is missing and causing an exception on Discard symbols.</Description>
  </Issue>
  <Issue>
    <IssueID>24194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>olegtk</FixedById>
        <IssueID>24194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Migrate command handlers to the new editor commanding</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In VS 2015 15.6 Preview3 the editor introduced a new commanding system, designed after Roslyn commading, see 
This issue tracks migration of all Roslyn command handlers to the new editor commanding API.
The work is being done in PR </Description>
  </Issue>
  <Issue>
    <IssueID>24191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>24191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GoTo order for types and members is wrong when doing camel case search</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>20/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2017 15.6 Preview2

**Steps to Reproduce**:

1. Create a new C# console app
2. Add 2 new classes to the project: EditorActiveComponentHostStub and EditorCommandHandlerService
3. Ctrl+T, search ECHS

**Expected Behavior**: I'm looking for **E**ditor**C**ommand**H**andler**S**ervice class and ECHS matches it with exact camel case match, so I expect both file and class to be top results. EditorActiveComponentHostStub also matches ECHS term, but with partial camel case match so I expect it to lower in the result list.

The expected result order **is:**
**E**ditor**C**ommand**H**andler**S**ervice.cs (file)
**E**ditor**C**ommand**H**andler**S**ervice (class)
**E**ditorActive**C**omponent**H**ost**S**tub.cs (file)
**E**ditorActive**C**omponent**H**ost**S**tub (class)

**Actual Behavior**: EditorCommandHandlerService class is on the bottom of the result list:
**E**ditor**C**ommand**H**andler**S**ervice.cs (file)
**E**ditorActive**C**omponent**H**ost**S**tub.cs (file)
**E**ditorActive**C**omponent**H**ost**S**tub (class)
**E**ditor**C**ommand**H**andler**S**ervice (class)

**Proposed fix:** Roslyn NavigateTo provider should use (new in VS 2017 15.6) NavigateToItem constructor, which accepts Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind and allows to report more specific match kind.
</Description>
  </Issue>
  <Issue>
    <IssueID>24190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS2017 - Fix All Occurrences Window Missing Line Preview</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static class Class1
{
    public const string One
    public const string Two
}
`</Code>
    <Description>From the Lightbulb context menu, when I select &amp;quot;fix all in document&amp;quot; the line preview is blank for long strings. Can this be fixed or at least a truncated string be used in its place? See attached screenshot.

``

_This issue has been moved from 
VSTS ticketId: 549883_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigate to decompiled sources: Reference assemblies are not supported</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>13/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
		[Conditional("DEBUG")]
		public static void Assert(bool condition)
		{
		}


Now, my guess is this is because of reference assemblies.  However, it's hard to tell what's going on.  The top of the file is just:

![image](https://user-images.githubusercontent.com/4564579/34843308-ea760d3a-f6c2-11e7-9168-6d5526838b79.png)

Perhaps a comment could be added that's similar to what we get with normal metadata-as-source:

c#
#region Assembly System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// C:\Users\cyrus\.nuget\packages\system.collections.immutable\1.3.1\lib\netstandard1.0\System.Collections.Immutable.dll
#endregion
`</Code>
    <Description>For example, in Roslyn i went to Debug.Assert, and this is what i got:

``</Description>
  </Issue>
  <Issue>
    <IssueID>24184</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FindAllReferences on KeyValuePair.Deconstruct extension method finds no usages</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>But it is actually used.
If I comment out this method and re-compile, I get an error:
`1&gt;DiagnosticAnalyzer\AnalysisState.cs(399,47,399,64): error CS1061: 'KeyValuePair&lt;DiagnosticAnalyzer, int&gt;' does not contain a definition for 'Deconstruct' and no extension method 'Deconstruct' accepting a first argument of type 'KeyValuePair&lt;DiagnosticAnalyzer, int&gt;' could be found (are you missing a using directive or an assembly reference?)`</Description>
  </Issue>
  <Issue>
    <IssueID>24182</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Flaky] ProduceErrorsOnRef_Properties_Ref_Set test</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>24182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>24182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
    Microsoft.CodeAnalysis.CSharp.UnitTests.DeclarationParsingTests.ProduceErrorsOnRef_Properties_Ref_Set [FAIL]
17:56:01       
17:56:01       Expected:
17:56:01                       Diagnostic(ErrorCode.ERR_BadMemberFlag, "set").WithArguments("ref").WithLocation(6, 13)
17:56:01       Actual:
17:56:01 
                      // error CS0009: Metadata file 'mscorlib.dll (netstandard 2.0 ref)' could not be opened -- Invalid argument
17:56:01                       Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments("mscorlib.dll (netstandard 2.0 ref)", "Invalid argument").WithLocation(1, 1),
17:56:01                       // (6,13): error CS0106: The modifier 'ref' is not valid for this item
17:56:01                       //         ref set =&gt; throw null;
17:56:01                       Diagnostic(ErrorCode.ERR_BadMemberFlag, "set").WithArguments("ref").WithLocation(6, 13)
17:56:01       Diff:
17:56:01       ++&gt;                 Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments("mscorlib.dll (netstandard 2.0 ref)", "Invalid argument").WithLocation(1, 1),
17:56:01                           Diagnostic(ErrorCode.ERR_BadMemberFlag, "set").WithArguments("ref").WithLocation(6, 13)
17:56:01       Expected: True
17:56:01       Actual:   False
17:56:01       Stack Trace:
17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(91,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(46,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(61,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
17:56:01         /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
17:56:01         /_/src/Compilers/CSharp/Test/Syntax/Parsing/DeclarationParsingTests.cs(6391,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.DeclarationParsingTests.ProduceErrorsOnRef_Properties_Ref_Set()
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>24180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Determine The Hive</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>24180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a way to determine which hive an instance of VS2017 is being used whilst it running?
I need to know so I can reset it.</Description>
  </Issue>
  <Issue>
    <IssueID>24179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigate to decompiled sources: silently fails to navigate</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6 Preview 2

**Steps to Reproduce**:

1. Add a package reference to **ICSharpCode.Decompiler** version 3.0.0.3447.
2. Declare a local variable with type `ICSharpCode.Decompiler.DecompilerSettings`
3. Navigate to `DecompilerSettings`

**Expected Behavior**:

The disassembled source is shown.

**Actual Behavior**:

The metadata as source view is shown.</Description>
  </Issue>
  <Issue>
    <IssueID>24178</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigate to decompiled sources: 'Unknown result type' in output</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>29/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    var array = ImmutableArray.CreateRange(Enumerable.Range(0, 1), x =&gt; x);
    

1. Navigate to `ImmutableArray.CreateRange`

**Expected Behavior**:

1. The signature of `CreateRange` is the following:

    csharp
    public static ImmutableArray&lt;TResult&gt; CreateRange&lt;TSource, TResult&gt;(ImmutableArray&lt;TSource&gt; items, Func&lt;TSource, TResult&gt; selector)
    

2. The decompiled method body does not have comments regarding invalid IL

3. The use of `selector` is proper C# code

**Actual Behavior**:

1. The signature of `CreateRange` is incorrect. Specifically, the generic arguments for the type of `selector` are omitted:

    csharp
    public static ImmutableArray&lt;TResult&gt; CreateRange&lt;TSource, TResult&gt;(ImmutableArray&lt;TSource&gt; items, Func selector)
    

2. The decompiled method body has comments regarding invalid IL:

    csharp
    //IL_0000: Unknown result type (might be due to invalid IL)
    //IL_0029: Unknown result type (might be due to invalid IL)
    //IL_0032: Expected Ref, but got Unknown
    

3. When `selector` is used to assign values to `array[i]`, the types and syntax are incorrect (both `(?)` and `(!0)` are incorrect):

    csharp
    array[i] = (TResult)((Func)(?)selector).Invoke((!0)items[i]);
    

:memo: For reference, here is the complete decompiled method:

csharp
public static ImmutableArray&lt;TResult&gt; CreateRange&lt;TSource, TResult&gt;(ImmutableArray&lt;TSource&gt; items, Func selector)
{
	//IL_0000: Unknown result type (might be due to invalid IL)
	//IL_0029: Unknown result type (might be due to invalid IL)
	//IL_0032: Expected Ref, but got Unknown
	Requires.NotNull&lt;Func&gt;(selector, "selector");
	int length = items.Length;
	if (length == 0)
	{
		return ImmutableArray.Create&lt;TResult&gt;();
	}
	TResult[] array = new TResult[length];
	for (int i = 0; i &lt; array.Length; i++)
	{
		array[i] = (TResult)((Func)(?)selector).Invoke((!0)items[i]);
	}
	return new ImmutableArray&lt;TResult&gt;(array);
}
`</Code>
    <Description>**Version Used**: 15.6 Preview 2

**Steps to Reproduce**:

1. Add a reference to **System.Collections.Immutable**
1. Add the following code:

    ``</Description>
  </Issue>
  <Issue>
    <IssueID>24177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Navigate to decompiled sources fails to load XML documentation for ImmutableArray</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    var array = ImmutableArray.Create(1);
    

1. Navigate to `ImmutableArray`

**Expected Behavior**:

XML documentation comments are shown in the decompiled result.

**Actual Behavior**:

The following message appears at the top of the file:

csharp
/// Exception while reading XmlDoc: System.Xml.XmlException: The 'br' start tag on line 507 position 385 does not match the end tag of 'p'. Line 507, position 391.
///   at System.Xml.XmlTextReaderImpl.Throw(Exception e)
///   at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)
///   at System.Xml.XmlTextReaderImpl.ThrowTagMismatch(NodeData startTag)
///   at System.Xml.XmlTextReaderImpl.ParseEndElement()
///   at System.Xml.XmlTextReaderImpl.ParseElementContent()
///   at System.Xml.XmlTextReaderImpl.Read()
///   at System.Xml.XmlTextReader.Read()
///   at System.Xml.XmlTextReaderImpl.Skip()
///   at System.Xml.XmlTextReader.Skip()
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadMembersSection(XmlTextReader reader, LinePositionMapper linePosMapper, List`1 indexList)
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider.ReadXmlDoc(XmlTextReader reader)
///   at ICSharpCode.Decompiler.Documentation.XmlDocumentationProvider..ctor(String fileName)
///   at ICSharpCode.Decompiler.Documentation.XmlDocLoader.LoadDocumentation(ModuleDefinition module)
///   at ICSharpCode.Decompiler.CSharp.Transforms.AddXmlDocumentationTransform.Run(AstNode rootNode, TransformContext context)
`</Code>
    <Description>**Version Used**: 15.6 Preview 2

**Steps to Reproduce**:

1. Add a reference to **System.Collections.Immutable**
1. Add the following code:

    ``</Description>
  </Issue>
  <Issue>
    <IssueID>24176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Double click in editor selects too large an area</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>30/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When i double click inside an string i expect to select contents inside string not outside it. 

Following picture is taken after double click inside string.

I expect text editor to only select contents inside and not parantheses or semicolon.

![1515687373536745397570](

-----

Im not sure if any of this relates to roslyn. Couldnt find better repo for VS text editor.
</Description>
  </Issue>
  <Issue>
    <IssueID>24175</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Navigate to disassembled source fails to check for SuppressIldasmAttribute</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>29/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compliance</Name>
        <IssueID>24175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6 Preview 2

**Steps to Reproduce**:

1. Create a library which has `[assembly: SuppressIldasm]` applied to it
2. In a separate project, add a reference to the assembly produced by step 1
3. Invoke a method defined in the library, and use Go To Definition

**Expected Behavior**:

The metadata as source window appears, without showing decompiled method bodies.

**Actual Behavior**:

The code runs through ILSpy and shows decompiled method bodies.</Description>
  </Issue>
  <Issue>
    <IssueID>24174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Span stackalloc size is not constant folded</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>25/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
Span&lt;int&gt; s = stackalloc int[100];
int* p = stackalloc int[100];
`</Code>
    <Description>**Version Used**:  

**Steps to Reproduce**:

``
**Expected Behavior**: Push `400` onto the stack for both cases.

**Actual Behavior**: `Span&lt;T&gt;` emits the multiplication itself regardless of the size being a constant. (this is not the case for the pointer)
</Description>
  </Issue>
  <Issue>
    <IssueID>24172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>The ISymbol.GetDocumentationCommentId() from a generic methods and types are not matching the XML Documentation generated on msbuild</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Roslyn v2.6.0
netstandard1.6
VS2017 15.5.2

**Steps to Reproduce**:

1. Create an analyzer which analyzes class, struct or methods 
2. Create a XmlDocumentationCache class which reads the XML Documentation created on msbuild.
3. Get XML Documentation from XmlDocumentationCache instance using the ISymbol.GetDocumentationCommentId().

**Expected Behavior**:
We are able to read XML Documentation by using ISymbol.GetDocumentationCommentId() as member name.

Example XML Documentation file:
&lt;?xml version="1.0"?&gt;
&lt;doc&gt;
    &lt;assembly&gt;
        &lt;name&gt;syngo.Common.ApiProvider.Test&lt;/name&gt;
    &lt;/assembly&gt;
    &lt;members&gt;
        &lt;member name="M:NamespaceName.ClassWithAutoConstructor.YesTagged"&gt;
            &lt;summary&gt;
            API yes tagged method documentation. .........
            &lt;/summary&gt;
        &lt;/member&gt;
     &lt;/members&gt;
 &lt;/doc&gt;

**Actual Behavior**:
This works fine all cases, i.e. we are able to retrieve XML Documentation of methods except for generic methods or methods of generic types.

ISymbol.GetDocumentationCommentId():

``

Because of this difference analyzer is unable to retrieve the XML documentation of the symbol and do further analysis.

How can we get the correct XML Documentation Comment Id from ISymbol for generic methods and types?

Thanks
Basanth</Description>
  </Issue>
  <Issue>
    <IssueID>24171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Legacy C# and VB expression evaluators still required</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 v15.5.2
**Steps to Reproduce**:

1. Debugging VB.NET project, break on line with a string variable containing HTML
2. Copy Value to clipboard
3. Paste Value to text editor

**Expected Behavior**:
Value copied and pasted should contain actual value of string
**Actual Behavior**:
Value copied and pasted contains VbCrLF and other non-HTML characters.  The value of the string gets completely mangled, making it impossible to see what the program variable actually contained.  Debugging therefore impossible.

Switching on the Legacy C# and VB expression evaluators in Options &gt; Debugging resolves this issue, but now this gives a warning saying that the option will be removed in a future version.  This would be a disaster, since it would make string debugging impossible.

Please either fix the issue so that non-legacy expression evaluators preserve the actual value of string variables, or else do not remove the legacy evaluators.
</Description>
  </Issue>
  <Issue>
    <IssueID>24162</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>24162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Properly declare NuGet dependencies on Humanizer and ICSharpCode.Decompiler</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24162</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.7.0-beta3-62509-03

I'm looking at this family of NuGets and I don't see a dependency on Humanizer and ICSharpCode.Decompiler. These need to be explicitly declared on the Roslyn NuGet packages that require them (EditorFeatures?)</Description>
  </Issue>
  <Issue>
    <IssueID>24160</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deconstruct extension methods that use "in" and "ref" should work</Title>
    <CreatedDate>11/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>24160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using C# 7.2 and version 15.5.3 of VS 2017 Enterprise.

Unless I'm doing something wrong, it looks like deconstruction into valuetuples using extension methods along with the in keyword for readonly pass in by reference prevents the unpacking syntax.  See below.

**Steps to Reproduce**:

The following compiles fine: 
``

**Expected Behavior**:
Both should compile fine and the second example that currently does not compile should also pass in the source ushort by reference.
</Description>
  </Issue>
  <Issue>
    <IssueID>24157</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ValueTuple's xml file is not valid xml</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
ValueTuple version 4.4.0

**Steps to Reproduce**:

1. Have any project with target framework 4.6.2 at the most.
2. Install the ValueTuple nuget package into the project.
3. Build the project and find System.ValueTuple.xml near the output file.
4. Open System.ValueTuple.xml with any XML viewer (i.e. Chrome).

**Expected Behavior**:
System.ValueTuple.xml should open normally.

**Actual Behavior**:
Opening the file fails with the following error:

error on line 1241 at column 95: Opening and ending tag mismatch: p line 0 and th
</Description>
  </Issue>
  <Issue>
    <IssueID>24156</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>24156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractDocumentationCommentCommandHandler performs blocking wait on GetCommandState of the InsertComment command</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>24156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>AbstractDocumentationCommentCommandHandler performs blocking wait on GetCommandState of the InsertComment command. This can lead to a bad user experience if the command is ever placed into a context menu or toolbar.

</Description>
  </Issue>
  <Issue>
    <IssueID>24155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>24155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FormatCommandHandler.ReturnKey.cs is not cancellable, but doesn't disable cancellation</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When formatting on Return FormatCommandHandler passes CancellationToken.None:


It should either explicitly disable cancellation or use cancellation token passed via CommandExecutionContext (in the new commanding).</Description>
  </Issue>
  <Issue>
    <IssueID>24154</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CA1032 cause 2 false positives which disappear as you navigate to them</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>12/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
D15.6 Preview 2 + Manish Vasani's fxcop candidate FXCop vsix
**Steps to Reproduce**:
1. Clone Monogame from 
2. Open Monogame.Framework.Windows.sln
3. Install Microsoft.CodeAnalysis.FxCopAnalyzers.vsix to all projects from internal share.
4. Run full solution analysis
5. Once all warnings appear filter to just CA1032.
6. Navigate to CA1032. There should be just 2 warnings.

**Expected Behavior**:
Warnings stay there, or don't show up to begin with
**Actual Behavior**:
Warnings disappear after you navigate to them.
</Description>
  </Issue>
  <Issue>
    <IssueID>24153</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractEncapsulateFieldCommandHandler disables cancellation and still uses cancellation token afterwards</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24153</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Something weird I noticed: AbstractEncapsulateFieldCommandHandler disables cancellation, but still uses cancellation token after that.
Some audit is required. 
First - why exactly it disables cancellation? No other similar refactoring command handlers disable it.
Second - if disabling cancellation is required, we should not use cancellation token that will never be cancelled.</Description>
  </Issue>
  <Issue>
    <IssueID>24152</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Confusing error message for tuple collection initializer that's missing comma</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24152</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class C
{
    void M()
    {
        _ = new[] { ("a", 1) ("b", 2) };
    }
}
`</Code>
    <Description>**Version Used**: SharpLab's "master (1 Dec 2017)" (37ef0cd)

**Steps to Reproduce**:

Try to compile [an initializer for a collection of tuples that's missing a comma](

``

**Expected Behavior**:

&gt; error CS1003: Syntax error, ',' expected

**Actual Behavior**:

&gt; error CS0149: Method name expected

This seems to apply to all parenthesized expressions. E.g. `new[] { (1) (2) }` also produces CS0149. Contrast this with `new[] { 1 2 }`, which produces CS1003, as expected.</Description>
  </Issue>
  <Issue>
    <IssueID>24151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Format Code doesn't work for objects inside a list initialization</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 Int Preview
Version 15.6.0 Preview 1.0
.NET Framework Version 4.7.02556

**Steps to Reproduce**:
Create following code in a function:

``

**Actual Behavior**:
No action. Objects initialized inside documents list stay in the same position.
Also spaces in first abject `new Document { Id="Id1", FileName="Document1"},` does not change.

Alignment works for the top level of object initialization. When I move `List&lt;Document&gt; documents = new List&lt;Document&gt;` by one tabulator in the example above, code formatting works properly.
</Description>
  </Issue>
  <Issue>
    <IssueID>24148</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis.CSharp.Features installs dependency on Nuget package System.ValueTuple, problem with .Net 4.7</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
    <IssueLabels />
    <Description>Version 2.6.1

**Steps to Reproduce**:

1. Create .Net 4.7 project
2. Use value tuples (built-in) in code
3. Install Microsoft.CodeAnalysis.CSharp.Features 2.6.1
3.1 -&gt; Dependency nuget package System.ValueTuple is installed
4. Compiler error, duplicate definition of System.ValueTuple

**Expected Behavior**:
Dependency on System.ValueTuple is not installed

**Actual Behavior**:
Dependency on System.ValueTuple is not installed, compiler error.
</Description>
  </Issue>
  <Issue>
    <IssueID>24146</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>24146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Event handler references should be counted correctly for derived WPF controls</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24146</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class MyButton : Button
{
}

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
    }

    private void ButtonBase_OnClick(object sender, RoutedEventArgs e)
    {
    }
}

XAML:
xaml
  &lt;local:MyButton Click="ButtonBase_OnClick"&gt;Wow&lt;/local:MyButton&gt;
`</Code>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 version 15.5.2
.NET framework 4.6.2
Visual Studio Enterprise 2015 version 14.0.25425.01 Update 3

**Steps to Reproduce**:
1. Create WPF App.
2. Create derived control (e.g. from Button)
3. Use it in XAML
4. In XAML add any event handler for derived control

Code behind:
``
**Expected Behavior**:
CodeLens should show 1 reference for added event handler.
Also [CA1811: Avoid uncalled private code]( should pass.

**Actual Behavior**:
CodeLens shows 0 references for added event handler.
[CA1811: Avoid uncalled private code]( is violated.

**Remarks**:
If in XAML instead of MyButton is used not derived Button (``&lt;Button Click="ButtonBase_OnClick"&gt;Wow&lt;/Button&gt;``), reference count is correct and CA1811 is not violated.</Description>
  </Issue>
  <Issue>
    <IssueID>24140</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Leading underscores in numeric literals (C#7.2 Feature) has squiggly underline error. (likely setup issue)</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>12/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2017: Version 15.6.0 Preview 1.0
Compiler: C# 7.2

**Steps to Reproduce**:
1.  Make a new project with C# 7.2 and the following line of code
`int binaryValue = 0b_0101_0101;`

**Expected Behavior**:
No warnings or squiggly underlines

**Actual Behavior**:
![image](
Error indicated however no build errors and application runs as expected.


  </Description>
  </Issue>
  <Issue>
    <IssueID>24138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generate method does not infer 'bool' return type for method generated in a case-when clause</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>17/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>24137</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Long-running VBCSCompiler.dll process runs at 100% CPU after parent process dies</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>03/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Using dotnet SDK 2.2.0-preview1-007866 on macOS 10.13.2

**Steps to Reproduce**:
TBH not sure 100% how to get into bad state. I don't know what is launching VBCSCompiler.dll. The parent process is gone...which is the issue.

But, it has been happening fairly often over the last few days while working on the  repo using VS Code - Insiders + C# extension 1.13.1.

If someone can point me to how to capture more information about how this long-running compiler server starts, I can provide a better repro.

**Expected Behavior**:
No long running compiler process after I shutdown tools and build scripts.

**Actual Behavior**:
![image](

VS Code is closed, and I've killed the the build.sh script, yet I have two VBCSCompiler processes running. `ps` reports the processes have been open for ~ 18 hours.

The process was launched with these arguments:
``

Process sample: 
[processample.txt](

#### [EDIT]
See below for a workaround: </Description>
  </Issue>
  <Issue>
    <IssueID>24136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract method not offered for expression in 'when' clause of a switch/case pattern match.</Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>24135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>RikkiGibson</FixedById>
        <IssueID>24135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Speculative semantic model produces different behavior for local functions </Title>
    <CreatedDate>10/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        [Fact]
        public void LocalFunctionAttribute()
        {
            const string text = @"
using System;
class A : Attribute {}

class C
{
    static void M()
    {
        void local&lt;[A]T&gt;() {}
    }
}";
            var tree = SyntaxFactory.ParseSyntaxTree(text);
            var comp = CreateStandardCompilation(tree);
            var model = comp.GetSemanticModel(tree);
            var a = tree.GetRoot().DescendantNodes()
                .OfType&lt;IdentifierNameSyntax&gt;().ElementAt(2);
            Assert.Equal("A", a.Identifier.Text);
            var attrInfo = model.GetSymbolInfo(a);
            var attrType = comp.GlobalNamespace.GetTypeMember("A");
            var attrCtor = attrType.GetMember(".ctor");
            Assert.Equal(attrCtor, attrInfo.Symbol);

            // Assert that this is also true for the speculative semantic model
            var newTree = SyntaxFactory.ParseSyntaxTree(text + " ");
            var m = newTree.GetRoot()
                .DescendantNodes().OfType&lt;MethodDeclarationSyntax&gt;().Single();

            Assert.True(model.TryGetSpeculativeSemanticModelForMethodBody(m.Body.SpanStart, m, out model));

            a = newTree.GetRoot().DescendantNodes().OfType&lt;IdentifierNameSyntax&gt;().ElementAt(2);
            Assert.Equal("A", a.Identifier.Text);

            // If we aren't using the right binder here, the compiler crashes going through the binder factory
            var info = model.GetSymbolInfo(a);
            Assert.Equal(attrType, info.Symbol);
        }
`</Code>
    <Description>See the behavior in this test:

``

When using the regular semantic model, the symbol returned by GetSymbolInfo is the attribute constructor. When using the speculative semantic model, the type is returned instead.

The root cause of this seems to be that `TryGetSpeculativeSemanticModelForMethodBody` directly returns a MethodBody semantic model, which bypasses the `GetMemberModel` call which may be needed to retrieve a more specific model (like an Attribute or InitializerSemanticModel) that may be needed to bind pieces of local functions.</Description>
  </Issue>
  <Issue>
    <IssueID>24133</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose ITypeSymbol.IsSerializable as a public API</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>24133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24133</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0

**Steps to Reproduce**:

Implementation of FxCop rule [CA2235]( "Mark all non-serializable fields" requires us to detect if a type is serializable or not. Due to the fact that there are large number of types in metadata (primitive types, DateTime, nullable types, etc.) that are **TypeAttributes.Serializable** (see  but do not have a `SerializableAttribute`, we cannot detect all such serializable types from metadata. See  It would be helpful to expose this property on `ITypeSymbol`.
</Description>
  </Issue>
  <Issue>
    <IssueID>24130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>QuickInfo always shows fully qualified type names for value tuple variables</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>29/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public static void Test()
{
    var a = MakeTuple&lt;int&gt;();
    var b = MakeTuple&lt;DateTime&gt;();
}

private static (T, T) MakeTuple&lt;T&gt;() =&gt; (default, default);


vb
Sub Test()
    Dim a = MakeTuple(Of Integer)()
    Dim b = MakeTuple(Of DateTime)()
End Sub

Function MakeTuple(Of T)() As (T, T)
    Return (Nothing, Nothing)
End Function
`</Code>
    <Description>**Version Used**: VS 15.5.3; VS 15.6.0 Preview 1.1

**Steps to Reproduce**:

1. Create a new implicitly typed variable of a value tuple type. (See snippets below.)
2. Invoke the QuickInfo tooltip on the `var` (or `Dim`) keyword.

**Expected Behavior**:

The tooltip shows one of the following for the tuple member types:

1. the keyword for tuple elements that are types with associated keywords (`string`, `int`, `object` etc),
2. the non fully qualified type name for types that don't fall in the first category, but are accessible via imported namespaces (e.g. `DateTime` when there's a `using System` directive),
3. the fully qualified type name in all other cases.

This is already the case for QuickInfos on the tuple variable itself (*(local  variable) (int, int) a*) and on the method invocation (*(int, int) Demo.MakeTuple&amp;lt;int&amp;gt;()*).

**Actual Behavior**:

The tooltip always shows the fully qualified type name (e.g. *(System.Int32, System.Int32)* for an `(int, int)` tuple) instead of the shorter variants described above.

**Sample code**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>24129</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add "IndentNamespace" formatting option.</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>24129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Some people, myself included, prefer to not indent namespace contents. Currently, I don't think the formatting options to enable this are really exposed.</Description>
  </Issue>
  <Issue>
    <IssueID>24127</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpRenameTrackingCodeFixProvider failed</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

``</Description>
  </Issue>
  <Issue>
    <IssueID>24126</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Apply implicit operator for pattern matching</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
public struct ReadOnly&lt;T&gt; where T : struct
{
   private T? value;
   public T Value
   {
      get =&gt; value ?? throw new InvalidOperationException("Value not set");		
      set
      {                        
         if (this.value.HasValue)
            throw new InvalidOperationException("Value already set");

         this.value = value;        	
      }
   }

   public bool HasValue =&gt; value.HasValue;

   public ReadOnly(T? value) =&gt; this.value = value;

   public static implicit operator T?(ReadOnly&lt;T&gt; value) =&gt; value.value; //attention here!

   public static implicit operator ReadOnly&lt;T&gt;(T? value) =&gt; new ReadOnly&lt;T&gt;(value);

   public static explicit operator T(ReadOnly&lt;T&gt; value) =&gt; value.Value;
}

We get:
c#
var foo = new ReadOnly&lt;int&gt;(2);
if (foo is int bar) { } //CS8121 An expression of type 'ReadOnly&lt;int&gt;' cannot be handled by a pattern of type 'int'.
if ((int?)foo is int baz) { } //Compiles and resolves true.

## Suggestion
When a pattern cannot be handled, the compiler should apply the implicit operator which allows the expression to be resolved, if any. If there are multiple possible implicit operators that would cover the issue, nothing should be done and the compilation error must prevail.
This is a suggestion, not a proposal, which means that no detail is final. Feel free to suggest changes or demonstrate barriers.
## Why?
The compiler has some hard code for the `Nullable&lt;T&gt;` to work in this scenario. Implementing this suggestion would allow the struct to have a `implicit operator T`. If so, the hard code would not be necessary anymore, and users could achieve the same behavior with any type.
## Alternative
One can just use a explicit conversion operator (cast) in order to achieve the expression resolution.
## Unanswered questions
c#
public struct ReadOnly&lt;T&gt; where T : struct
{
   //...
   public static implicit operator T?(ReadOnly&lt;T&gt; value) =&gt; value.value;
   public static implicit operator int(ReadOnly&lt;T&gt; value) =&gt; value.Value is int x ? x : throw new Exception();
   //...
}
var foo = new ReadOnly&lt;int&gt;(2);
if(foo is int bar) { } //what should happen?

c#
public struct ReadOnly&lt;T&gt; where T : struct
{
   //...
   public static implicit operator T?(ReadOnly&lt;T&gt; value) =&gt; value.value;
   public static implicit operator int(ReadOnly&lt;T&gt; value) =&gt; value.Value is int x ? x : throw new Exception();
   //...
}
var foo = new ReadOnly&lt;int&gt;(2);
if(foo is int bar) { } //what should happen?

c#
public struct ReadOnly&lt;T&gt; where T : struct
{
   //...
   public static implicit operator T?(ReadOnly&lt;T&gt; value) =&gt; value.value;
   public static implicit operator T(ReadOnly&lt;T&gt; value) =&gt; value.Value;
   //...
}
var foo = new ReadOnly&lt;int&gt;(2);
if(foo is int bar) { } //what should happen?
`</Code>
    <Description>## Context
Recently, I've opened [this stackoverflow question]( which brought me to 
The idea is to apply implicit operators when matching unhandleable patterns _(I really hope this word does in fact exist)_.
## Scenario
So, considering the following struct:
``
* Should the base class operators be considered? If yes, should the compiler look at the hierarchy for disambiguation or not?
#
Edit1: added "Why?" and "Alternative" sections.</Description>
  </Issue>
  <Issue>
    <IssueID>24125</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS compiler error BC30652 on a COM DLL method using referenced enumeration</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>24125</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

- .net Framework 4.5.2
- Visual Studio 2015
- New VB.NET console application

**Steps to Reproduce**:

1. Create a RCW for a foreign COM dll, called NETLib.dll and reference it in VS
2. Create a RCW for a second foreign COM dll, called RefLib.dll and reference it in VS
3. The NETLib.dll holds the following method:
`Function DoSomething(sData As String, iData As Integer, eData As RefLib.enumDat) As Integer`
4.  Create a new class in the project with the following code:

``

**Actual Behavior**:
The VS compiler throws the following error:

&gt; BC30652: Reference required to assembly 'RefLib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null' containing the type 'enumDat'. Add one to your project.

Both libraries have the same, correct version number, culture setting and are set to **Embed Interop Types = True**
  #</Description>
  </Issue>
  <Issue>
    <IssueID>24124</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error building on Linux</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>04/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Errors
    /tmp/tmpYHoYVk.tmp/l5visbph.cxt/sdk/2.2.0-preview1-007866/Roslyn/Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:  [/tmp/tmpYHoYVk.tmp/nshuithb.5nm/benchmarks/src/Benchmarks/Benchmarks.csproj]
    /tmp/tmpYHoYVk.tmp/l5visbph.cxt/sdk/2.2.0-preview1-007866/Roslyn/Microsoft.CSharp.Core.targets(84,5): System.AggregateException: One or more errors occurred. (The system cannot open the device or file specified) ---&gt; System.IO.IOException: The system cannot open the device or file specified
   at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew)
   at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext()
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)
   at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)
---&gt; (Inner Exception #0) System.IO.IOException: The system cannot open the device or file specified
   at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp; createdNew)
   at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.&lt;RunServerCompilationCore&gt;d__7.MoveNext()&lt;--- [/tmp/tmpYHoYVk.tmp/nshuithb.5nm/benchmarks/src/Benchmarks/Benchmarks.csproj]

`</Code>
    <Description>_From @sebastienros on January 8, 2018 17:33_On Linux only, when building a specific project on Linux with the latest SDK, I get an exception that originates from msbuild.

When using an older SDK the error goes away.

Current installed SDK: `2.2.0-preview1-007866`
SDK that doesn't repro the error: `2.2.0-preview1-007522`

Project to reproduce the issue: 

Logged error
``

I also join the full `msbuild.log`




_Copied from original issue: dotnet/cli#8344_</Description>
  </Issue>
  <Issue>
    <IssueID>24123</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`in` modifier available for operators?</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
    <IssueLabels />
    <Code>c#
public static bool operator ==(in C left, C right) =&gt; true; //compiles
public static bool operator !=(ref C left, C right) =&gt; false; //CS0631: ref and out are not valid in this context
`</Code>
    <Description>``
[Sharplab](

I understand that there is no harm on allowing the `in` modifier for operators, but what's the reason to not use it, then? Isn't it always faster? If so, should the compiler always make operators parameters "readonly ref", for performance optimization?</Description>
  </Issue>
  <Issue>
    <IssueID>24122</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.NET Compiler Platform SDK DISABLED. 2.0.0.6140902 is not compatible with VS 2017 15.5.2</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>24122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Downloaded Roslyn.SDK from Marketplace is disabled in Visual Studio 2017 15.5.2

**Steps to Reproduce**:

1. Uninstall Roslyn.SDK
2. Download Roslyn.SDK from Marketplace (Version 2.0.0.6140902)
3. Start Visual Studio (Version 2017 15.5.2)

**Expected Behavior**:
.NET Compiler Platform enables and Roslyn Visualized Window enabled.

**Actual Behavior**:

Yellow icon:  This extension is disabled. Incompatible with Visual Studio.
![2018-01-09 12_40_06-extensiones y actualizaciones](
</Description>
  </Issue>
  <Issue>
    <IssueID>24121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compilator using wrong extension method</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>24121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System.Collections.Generic;
using Xunit;

namespace ClassLibrary5.Test1
{
    public class Test1Class
    {
        [Fact]
        public void Should_be_generic()
        {
            var item = new object();
            Assert.Equal("generic", item.GetItemsHashCode());
        }

        [Fact]
        public void Should_be_dictionary()
        {
            var item = new Dictionary&lt;string, int&gt;();
            Assert.Equal("dictionary", item.GetItemsHashCode()); // Assert will fail, return type is "generic"
        }
    }

    public static class Extensions
    {
        public static string GetItemsHashCode&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dictionary)
        {
            return "dictionary";
        }

        public static string GetItemsHashCode&lt;T&gt;(this T self)
        {
            return "generic";
        }
    }
}


VS is showing 
![image](https://user-images.githubusercontent.com/357589/34718449-f6062a78-f536-11e7-826d-59efe5e04d6d.png)

IL Spy is showing 
![image](https://user-images.githubusercontent.com/357589/34718463-ff0d5a2e-f536-11e7-9052-df8144d67541.png)

Code that is working
c#
using System.Collections.Generic;
using Xunit;

namespace ClassLibrary5.Test3
{
    public class Test3Class
    {
        [Fact]
        public void Should_be_generic()
        {
            var item = new object();
            Assert.Equal("generic", item.GetItemsHashCode());
        }

        [Fact]
        public void Should_be_dictionary()
        {
            var item = new Dictionary&lt;string, int&gt;();
            Assert.Equal("dictionary", item.GetItemsHashCode());
        }
    }

    public static class Extensions
    {
        public static string GetItemsHashCode&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt; dictionary) // &lt;-- Changed param type
        {
            return "dictionary";
        }

        public static string GetItemsHashCode&lt;T&gt;(this T self)
        {
            return "generic";
        }
    }
}

or
c#
using System.Collections.Generic;
using Xunit;

namespace ClassLibrary5.Test2
{
    public class Test2Class
    {
        [Fact]
        public void Should_be_generic()
        {
            var item = new object();
            Assert.Equal("generic", item.GetItemsHashCode());
        }

        [Fact]
        public void Should_be_dictionary()
        {
            var item = new Dictionary&lt;string, int&gt;();
            Assert.Equal("dictionary", item.GetItemsHashCode());
        }
    }

    public static class Extensions
    {
        public static string GetItemsHashCode&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dictionary)
        {
            return "dictionary";
        }

        public static string GetItemsHashCode(this object self) // &lt;-- Changed param type
        {
            return "generic";
        }
    }
}
`</Code>
    <Description>**Version Used**:  

- Visual Studio 15.5.2 bundled version.
- .NET Framework 4.6.1 class library

**Steps to Reproduce**:

1. Create extensions method that have overloaded "Generic&lt;T&gt;" type
2. Use the non generic type
3. Compile

**Expected Behavior**:
Compilation selecting correct method.

**Actual Behavior**:
Compilation selecting wrong method. This code is always using the "Generic&lt;T&gt;" method.

**Code samples**
``
  </Description>
  </Issue>
  <Issue>
    <IssueID>24119</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implementing MatchesKind and IsKind in a language independent way</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>24119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>24119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.5.2
**Steps to Reproduce**:
1. I want to implement MatchesKind and IsKind in a language independent way but SyntaxKind is defined in Microsoft.CodeAnalysis.CSharp and Microsoft.CodeAnalysis.VisualBasic and I don't know how to access "Kind As SyntaxKind" which is two separate Enum's  and defined as two different Types when the compiler returns (Microsoft.CodeAnalysis.CSharp).SyntaxKind is not (Microsoft.CodeAnalysis.VisualBasi).SyntaxKind. The code below will not compile and the fix suggested is to add  Microsoft.CodeAnalysis.CSharp or Microsoft.CodeAnalysis.VisualBasic, but neither will fix the issue.

``

**Expected Behavior**:
One list with all the values and extensions in Microsoft.CodeAnalysis
**Actual Behavior**:
Two lists, one in Microsoft.CodeAnalysis.CSharp and another in Microsoft.CodeAnalysis.VisualBasic, this also breaks other extensions like "Contains" when you try to access both languages from one file.</Description>
  </Issue>
  <Issue>
    <IssueID>24113</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Keyword "when" does not get completed in switch statement with patterns:</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24113</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I expect `when` to be offered as a completion at that position.

``</Description>
  </Issue>
  <Issue>
    <IssueID>24112</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>24112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Debugger inserts DisplayText instead of InsertionText.</Title>
    <CreatedDate>09/01/2018</CreatedDate>
    <ClosedDate>10/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. New Console App, set a breakpoint, F5. Do not type in the editor.
2. After hitting the breakpoint, open the Watch window and type an expression.
3. Type "List" and observe that "List&lt;&gt;" is highlighted.
4. Press Tab to commit the "List&lt;&gt;" items.

Expected:
`List` inserted into watch window

Actual:
`List&lt;&gt;` inserted into watch window.

Interesting:
If you do the same in the main editor, `List` is always inserted. After doing this in the main editor, Debugger Intellisense starts inserting `List` instead of `List&lt;&gt;`

This was reported by the Pythia team who received a bug report because their CompletionProvider always inserts an InsertionText that differs from its DisplayText.</Description>
  </Issue>
  <Issue>
    <IssueID>24105</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Iteration variable type in deconstruction-foreach is surprising</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>24105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>24105</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
private BoundForEachStatement BindForEachPartsWorker(DiagnosticBag diagnostics, Binder originalBinder)
{
  ...
  switch (_syntax.Kind())
  {
    ...
    case SyntaxKind.ForEachVariableStatement:
    {
      iterationVariableType = inferredType ?? CreateErrorType("var");
      ...
      // this currently captures the type from the collection, but should instead correspond to the
      // type in the syntax, or maybe there should be two types
      boundIterationVariableType = new BoundTypeExpression(variables, aliasOpt: null, type: iterationVariableType).MakeCompilerGenerated();
`</Code>
    <Description>From discussion with Neal, the purpose of `BoundForEachStatement.IterationVariableType` is to capture the type from the syntax, rather than the type from the collection. In a deconstruction, that is currently not the case (step through a test like `ValueTupleNotRequiredIfReturnIsNotUsed` to see that).

``
  </Description>
  </Issue>
  <Issue>
    <IssueID>24104</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose IOperation based Control Flow Graph API</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>24104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - Flow Analysis</Name>
        <IssueID>24104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Story</Name>
        <IssueID>24104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Goal is to expose a **Control Flow Graph (CFG)** API with following characteristics:
1. An API to get a `Basic Block` graph for a given executable code block
2. Each basic block has:
   1. A sequence of `IOperations`
   2. A set of `successor` basic blocks and
   3. A set of `predecessor` basic blocks
3. This graph has following category of basic blocks:
   1. A special `Entry` block, which is the first basic block with no predecessor and marks the start of the code block 
   2. A special `Exit` block, which is the last block with no successor and marks the end of the code block
   3. `Intermediate` blocks which have one or more successors and predecessors
4. Each operation within a basic block has following characteristics:
   1. It represents a logical statement such that the operation has no type or constant value
   2. It has no inherent control flow within it  (except possibly the last operation in the basic block), ie. all the operations within a basic block will always execute once the control enters the basic block. For example, all the loops, if-else statements, conditional expressions, etc. have been lowered to simpler set of operations with conditional and/or unconditional branch operations.
   3. Each operation may map to a high level operation which has a direct mapping to original syntax or a low level operation with no direct mapping to original syntax (for example lowered code generated while synthesizing branch statements within loops).

**High level design issues:**
 - [ ] Design the core API to get the CFG:
       1. Exposed on semantic model?
       2. What parameters does it take? Is the input an `IOperation` or `SyntaxNode` or `Symbol`?
       3. Do we expose a CFG only for top level/root operation of an executable block OR allow users to request a CFG for any arbitrary operation/syntax node within executable code?

 - [ ] Basic block API:
   - [ ] Should the last operation of the block be an implicit branch operation or an explicit conditional/unconditional branch operation?
       1. Implicit branch proposal: Each basic block will have following additional fields to represent control flow out of the block:
           1. `Next` basic block field to represent the target of an unconditional branch
           2. Set of fields `(IOperation Condition, BasicBlock ConditionTarget, Boolean JumpIfConditionTrue)` to represent a conditional branch
       2. Explicit branch proposal: Last operation of a basic block will always be an [IBranchOperation](
           1. Add a new `BranchKind.ConditionalGoTo` to [BranchKind]( enum and add additional fields `IOperation Condition`, `Boolean JumpIfConditionTrue` and `ILabelSymbol ConditionTarget` to [IBranchOperation](
           2. Add an [ILabeledOperation]( at the start of each basic block, such that the underlying label symbol `ILabeledOperation.Label` will be the target of last branch operation of all predecessor blocks.
   - [ ] Basic block scopes:
           1. Do we want to allow basic blocks to contain operations from more than one source level scopes or not? 
           2. Do we want to expose a separate side data structure on Control flow graph that exposes a set of program scopes and the set of basic blocks that map to each scope?

 - [ ] Operations within basic block:
   - [ ] Use Locals (and ref locals) versus special kind of Flow capture operations: When attempting to lower expressions with inherent control flow (conditional expressions, shortcircuiting expressions, etc.), we need to rewrite the operation such that operations within this expression that have been previously been evaluated are captured in prior operations. The result of these prior computed expressions need to be stored at some location and referenced in subsequent operations. We have two proposals to represent such capture:
           1. Locals approach: Use synthesized locals for capturing intermediate results and `ILocalReferenceExpression` for the use. For lvalues, we can use ref locals
           2. Introduce a special operation, say `IFlowCaptureOperation` which represents define or use of some intermediate result or lvalue
   - [ ] High level operations versus low level operations
           1. High level: Retain the high level operation tree for operations that have no inherent control flow. Each operation within a basic block can be a tree of arbitrary height.
           2. Low level: Simplify all operations by writing intermediate operations within an operation tree into temp locals and then replacing sub-tree with a local reference to the temp
   - [ ] List of operations to lower:
           1. ILoopOperation and sub-types (loops)
           2. IConditionalOperation (if statement and conditional expression)
           3. IBinaryOperation (conditional short-circuiting operations and user defined)
           4. ICoalesceOperation (null coalescing)
           5. IConditionalAccessOperation (`?.` operator)

   - [ ] Operation tree rewriter API: We should expose a language agnostic Operation tree rewriter/cloner API. We have public IOperation extension methods that call back into language specific code, which makes is tricky to expose such a rewriter. We need to discuss how we can accomplish this.

 - [ ] Release story:
   - [ ] Do we want to put the APIs under a feature flag, say `FlowAnalysis` until we have validated the APIs with end-to-end dataflow analysis built on top of the API?
   - [ ] Testing strategy and signoff requirements prior to merge into master

 - [ ] Implementation
   - [ ] Single pass to generate basic blocks/flow graph while lowering the control flow operations versus use two separate passes, one for lowering to simpler operation tree and second for generating basic block graph from lowered operation tree. Former is more performant implementation, while the latter is modular and leaves scope for re-using the first lowering pass for exposing low level operation tree (independent of control flow/basic block) via `SemanticModel.GetOperation(operation level)` API.
  </Description>
  </Issue>
  <Issue>
    <IssueID>24102</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>t-camaia</FixedById>
        <IssueID>24102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline functions that are iterators are erroneously not allowed in try blocks with a catch clause</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>22/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Compile the following console app:

``

**Expected Behavior**:
Successful compile and an app that prints "bar" to stdout.

**Actual Behavior**:
CS1626: Cannot yield a value in the body of a try block with a catch clause


It would seem that perhaps the rule is looking at the wrong scope to determine whether yield return is allowed. Moving the definition outside the try works, but might not be possible in some cases due to captured state if the function is more complicated.
  </Description>
  </Issue>
  <Issue>
    <IssueID>24101</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Language service/project system seems to break after editing for a while.</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels />
    <Description>I wish i had more detail to provide to help figure out what's going on here.  I've seen this happen about 5 times over the last two days of using VS 15.6.0 preview 1.  Basically i have this flow:

Make edit in some file.
Build.
Attach vs to xunit test runner
Run tests, hit breakpoints, fix issues
Rince repeat.

After some number of times doing this VS completely breaks, seemingly with a project system issue.  I say project system because one thing i've noticed is that all my usings no longer bind, and i get errors about using things like "default" (i.e. that default isn't allowed in C# 7.0, even though the project should be on a version later than that).  I have no idea what triggers this, and i can't find anything in my event log.

My only recourse is to restart VS when this happens.  Fortunately, this is much faster than it used to be so it isn't too bad.  But it's certainly a nuisance that i would love to get stamped out.

I have no idea if there's any telemetry on your side that could indicate what's going on wrong.

@sharwell @davkean @Pilchie Have you seen or heard about anything like this? </Description>
  </Issue>
  <Issue>
    <IssueID>24099</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Diagnostic CodeFix for CS0433: The type TypeName1 exists in both Assembly1 and Assembly2</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
namespace N1
{
    public class Ambiguous
    {
    }
}

Assembly2 File2.cs
C#
namespace N1
{
    public class Ambiguous
    {
    }
}

TestAssembly
References Assembly1 and Assembly2
File3.cs in TestAssembly
C#
namespace N2
{
    public class Test
    {
        void M()
        {
              new N1.Ambiguous(); //CS0433
        }
    }
}


**After the fix**:

TestAssembly
References Assembly1 **reference is aliased with *Assembly1Alias*** and Assembly2
File3.cs in TestAssembly
C#
extern alias Assembly1Alias;
namespace N2
{
    public class Test
    {
        void M()
        {
              new Assembly1Alias::N1.Ambiguous(); 
        }
    }
}
`</Code>
    <Description>**Version Used**: 

VS 15.5.2

**Steps to Reproduce**:

If a projects references two libraries with the same type defined in the same namespace CS0433 is triggered if this type is used. A code fix should be offered that

1. adds an alias to the library reference,
2. adds an corresponding extern alias directive to the document
3. fully qualifies the type (additionally a type alias could be offered as in #24022)

The fix should also be offered for warning `CS0436 The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.`

**Before the fix**:

Assembly1 File1.cs  
``
Relates to #23326.
  
  </Description>
  </Issue>
  <Issue>
    <IssueID>24096</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Diagnostic CodeFix for CS0121: ambiguous extension methods.</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24096</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 15.5.2

**Steps to Reproduce**:

Method overload resolution for extension methods fails with error `CS0121: The call is ambiguous between the following methods or properties: 'method1' and 'method2'` if two extension methods with the same signature are in scope. A code fix should be provided that transforms the call to the extension method in a call to the static method by fully qualifying the desired method.

**Before the fix**:

``

Relates to #23326 and #24022.</Description>
  </Issue>
  <Issue>
    <IssueID>24095</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>24095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Issue with Microsoft.CodeAnalysis.CSharp.Scripting NuGet package: Referenced component could not be found.</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio: 2017 Enterprise v15.5.2
Target Platform: .NET Framework 4.7.1
NuGet Package: Microsoft.CodeAnalysis.CSharp.Scripting v2.6.1

**Steps to Reproduce**:

1. Open Visual Studio 2017
2. Create a new Class Library project that targets the .NET Framework 4.7.1
3. Install NuGet Package (Microsoft.CodeAnalysis.CSharp.Scripting)
4. Expand References and observe that all references are resolved
4. Save solution
5. Close Visual Studio
6. Open Visual Studio
7. Open solution created in step 2 above
8. Expand References and observe numerous references are missing (e.g. System.AppContext, System.Console, etc.)
9. Rebuilding the project and observe the missing references in the "Error List" window.

Screenshot attached: 
![roslynscriptingissue-brokenreferences](

Short video demonstrating issue available here: 
[ 

**Expected Behavior**:
Expect references to not be missing.

**Actual Behavior**:
References are broken and errors reported "The referenced component 'System.AppContext' could not be found"

Please help!</Description>
  </Issue>
  <Issue>
    <IssueID>24094</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>24094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Migrate to the new async QuickInfo API</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>25/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since VS 2017 15.6 the editor supports new async/cross-IDE QuickInfo. IQuickInfo* API is now deprecated.
This issue tracks migrating Roslyn to the new async QuickInfo API.</Description>
  </Issue>
  <Issue>
    <IssueID>24093</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetHashCode generator doesn't take into account checked environment</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If the compiler needs to &amp;quot;check for arithmetic overflow/underflow&amp;quot;, the GetHashCode code generator should generate code within an &amp;quot;unchecked&amp;quot; scope.It could even do this independently on the compiler setting, such that the code just keeps working when changing the compiler setting later._This issue has been moved from VSTS ticketId: 546722__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24092</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"langword" completion adds an extra set of quotes</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24092</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`langword` completion has regressed the experience for writing `&lt;see langword="[keyword"/&gt;` in the following way:

![langword](

If you type `&lt;see` and then press space, `&lt;see cref="$"/&gt;` is automatically entered. If you go back and replace `cref` with `langword` it adds an extra set quotes, which is annoying.</Description>
  </Issue>
  <Issue>
    <IssueID>24091</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>vbcrlf does not work (visual basic)</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>31/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>24091</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>vbcrlf does not seem to work in my Visial Studio/Visual Basic; it does not produce a linefeed in my code, just seems to ignore it. I have also tried vbLF but that does not work either. vbTab does however work as it shoult. But i need a linefeed in mh code when I iterate through an array. Any suggetions?_This issue has been moved from VSTS ticketId: 537113__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24090</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0032 fires for explict interface implementation of a property</Title>
    <CreatedDate>08/01/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If I have explicit interface implementation, like this:        string IDeploymentOptions.ProjectUniqueName        {            get { return this.projectUniqueName; }        }Then I get IDE0032 warning/error suggesting to use auto-property. I feel it should not be a warning because people use explict interface implementation for a reason, possibly as a stylistic choice (enforcing that class is used via interface only, for example)._This issue has been moved from VSTS ticketId: 545926__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24088</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>unknown hard error visual studio</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>07/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>24088</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>when I have been editing my code , sometimes I have got this message &amp;quot;unknown hard error&amp;quot;_This issue has been moved from VSTS ticketId: 544141__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24087</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inline Refactoring Rename Issue with Regions in Visual Basic</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24087</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24087</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24087</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24087</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When I rename a Property in Visual Basic then normally a little light bulb appears and when I click on it, I can push a button to rename the property in the whole project. When the Property is within a Region or even followed by Region this doesn't work. The light bulb appears and when I click on it, it just dissapears._This issue has been moved from VSTS ticketId: 542431__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24086</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB editor normalizes decimal literals, thereby breaking code</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1D and 1.0D are different literals. Still, the VB editor automatically changes 1.0D to 1D, thereby changing the semantics of the program.

Repro example:

1. Create a new VB.NET console project in Visual Studio 2017.

2. Use an external editor (e.g. Notepad) to enter the following code in Module1.vb:

``

3. Compile and run. Note the following output:
    &gt; 1
    &gt; 1.0 (or &amp;quot;1,0&amp;quot;, depending on your locale).

4. Open Module1.vb with Visual Studio.
5. Add a comment after the line
Dim d2 = 1.0D
e.g.
Dim d2 = 1.0D   ' some comment

6. Note that Visual Studio automatically changed the line to
Dim d2 = 1D    ' some comment

7. Note that you are unable to enter 1.0D without Visual Studio automatically changing it back to 1D.

8. Run the program and note that the output now differs:
    &gt; 1
    &gt; 1

9. Despair

_This issue has been moved from 
VSTS ticketId: 545901_
_These are the original issue comments:_

Heinrich Moser on 1/3/2018, 00:33 AM (4 days ago): &lt;p&gt;Note: This behavior can be turned off by disabling the following option: Tools/Options/Text Editor/Basic/Advanced/"Pretty listing (reformatting) of code". It's still a bug, since "pretty printing" must never change the behavior of a program.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)
  </Description>
  </Issue>
  <Issue>
    <IssueID>24085</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>View in Object Browser not working</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24085</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In Solution Explorer selecting dependencies, clicking on a NuGet package, there's an option &amp;quot;View in Object Browser&amp;quot;. However, this menu does nothing. It doesn't open the Object Browser, it doesn't give any error.- Create a Console Application (.NET Core)- Add a NuGet package (e.g. Microsoft.Extensions.DependencyInjection)- In Solution Explorer, click on Dependencies, NuGet, Microsoft.Extensions.DependencyInjection- context menu, open &amp;quot;View in Object Browser&amp;quot;Nothing happensI would expect to open the Object Browser, and to navigate to this NuGet package_This issue has been moved from VSTS ticketId: 545462__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24084</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove Unnecessary Usings feature doesn't take build directives into account</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>22/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24084</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24084</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>24084</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Suppose some particular function calls for a specific namespace are only used within a DEBUG compiler directive. Intellisense will then apparently ignore all other code when it determines what usings are unnecessary, thereby breaking the code that's compiled under release compile mode._This issue has been moved from VSTS ticketId: 543044__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24082</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bug in NormalizeWhitespace</Title>
    <CreatedDate>07/01/2018</CreatedDate>
    <ClosedDate>07/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>24082</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public override void OnSaveInstanceState(Bundle savedInstanceState)
{
    base.OnSaveInstanceState(savedInstanceState);
    // Save UI state changes to the savedInstanceState.
    // This bundle will be passed to onCreate if the process is
    // killed and restarted.
    savedInstanceState.PutBoolean("MyBoolean", true);
    savedInstanceState.PutDouble("myDouble", 1.9);
    savedInstanceState.PutInt("MyInt", 1);
    savedInstanceState.PutString("MyString", "Welcome back to Android");
    // etc.
}


public override void OnRestoreInstanceState(Bundle savedInstanceState)
{
    base.OnRestoreInstanceState(savedInstanceState);
    // Restore UI state from the savedInstanceState.
    // This bundle has also been passed to onCreate.
    bool myBoolean = savedInstanceState.GetBoolean("MyBoolean");
    double myDouble = savedInstanceState.GetDouble("myDouble");
    int myInt = savedInstanceState.GetInt("MyInt");
    string myString = savedInstanceState.GetString("MyString");
}


Then:

cs
            var tree2 = CSharpSyntaxTree.ParseText(text, new CSharpParseOptions(kind: SourceCodeKind.Script));
            var root2 = tree2.GetRoot();
            root2 = root2.NormalizeWhitespace();
            Console.WriteLine(root2);


**Expected Behavior**: Outputs the same code

**Actual Behavior**: The line with `// etc.` gets unindented

cs
public override void OnSaveInstanceState(Bundle savedInstanceState)
{
    base.OnSaveInstanceState(savedInstanceState);
    // Save UI state changes to the savedInstanceState.
    // This bundle will be passed to onCreate if the process is
    // killed and restarted.
    savedInstanceState.PutBoolean("MyBoolean", true);
    savedInstanceState.PutDouble("myDouble", 1.9);
    savedInstanceState.PutInt("MyInt", 1);
    savedInstanceState.PutString("MyString", "Welcome back to Android");
// etc.
}

public override void OnRestoreInstanceState(Bundle savedInstanceState)
{
    base.OnRestoreInstanceState(savedInstanceState);
    // Restore UI state from the savedInstanceState.
    // This bundle has also been passed to onCreate.
    bool myBoolean = savedInstanceState.GetBoolean("MyBoolean");
    double myDouble = savedInstanceState.GetDouble("myDouble");
    int myInt = savedInstanceState.GetInt("MyInt");
    string myString = savedInstanceState.GetString("MyString");
}
`</Code>
    <Description>**Version Used**: 2.6.1

**Steps to Reproduce**:

Store this string in the variable `text`:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>24079</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# 7.2 'in' keyword not listed in VS 2017 IntelliSense during defining operator</Title>
    <CreatedDate>06/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>24079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24079</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version:Visual Studio 15.5.2Steps to Reproduce:1. type `public static explicit operator double(in`...2. Ctrl+SpaceExpected Behavior:C# 7.2 introduces `in` keyword for operator's argument. So, `in` keyword should be listed in the IntelliSense window.Actual Behavior:Shown in the attached file._This issue has been moved from VSTS ticketId: 542476__These are the original issue comments:_(no comments)_These are the original issue solutions:_Takumi Kadokura solved on 12/20/2017, 06:58 AM (16 days ago), 0 votes: &lt;p&gt;Add attached file&lt;/p&gt;&lt;p&gt;&lt;img src=" </Description>
  </Issue>
  <Issue>
    <IssueID>24076</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide warning in VB similar to CS0219: variable declared and assigned but never used</Title>
    <CreatedDate>06/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24076</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24076</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24076</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>24076</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

**Expected**
Warning regarding variable 'a' is declared and assigned but never used.

**Actual**
None</Description>
  </Issue>
  <Issue>
    <IssueID>24075</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>24075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>There are two 'Use auto property' warnings: IDE0032 and IDE0032WithoutSuggestion</Title>
    <CreatedDate>06/01/2018</CreatedDate>
    <ClosedDate>03/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>24075</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There are two 'Use auto property' warnings: IDE0032 and IDE0032WithoutSuggestion, which creates visual clutter in IDE (repeating same information twice) and in suppression (as you have to suppress both, if you chose so)._This issue has been moved from VSTS ticketId: 545927__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24073</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Lost color on type names during copy &amp; paste in wordprocessor</Title>
    <CreatedDate>06/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24073</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class Student
{
   public string FullName;
}

public class School
{
   public List&lt;Student&gt; students = ...
}
`</Code>
    <Description>If I run a code copy &amp;amp; paste from c# code to Wordpad, LibreOffice, Word, etc, the type names of the variables lose formatting. The names used in the declarations retain formatting. Example:

``

"Student" used in type dclaration retain formatting. 
"Student" used in declaration of field students lost formatting!

_This issue has been moved from 
VSTS ticketId: 544121_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)
  </Description>
  </Issue>
  <Issue>
    <IssueID>24072</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VBCSCompiler server not working in .NET Core on Windows 10</Title>
    <CreatedDate>06/01/2018</CreatedDate>
    <ClosedDate>30/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.NET Core CLI 2.2.0-preview1-007870

**Steps to Reproduce**:
1. Windows 10
2. Install CLI (I used the .zip version)
3. `git clone 
4. `cd OrchardCore`
5. `dotnet build --no-incremental`

**Expected Behavior**:
Compilation happens inside the `dotnet vbcscompiler.dll` process.

**Actual Behavior**:
The `dotnet vbcscompiler.dll` process is started and stays running, but it's doesn't use any CPU.  Instead, one instance of `dotnet csc.dll` is created for each project in the solution.

**Comments**
The same scenario appears to be working correctly on Ubuntu 16.04 LTS.</Description>
  </Issue>
  <Issue>
    <IssueID>24068</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to get "Analyzer with Code Fix (.NET Standard)" project in VS2017</Title>
    <CreatedDate>05/01/2018</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 - 15.5.2

**Steps to Reproduce**:

I have been following this tutorial: 
I have installed the Visual Studio extension development workload.

**Expected Behavior**:
Able to create a new Analyzer with Code Fix (.NET Standard) project

**Actual Behavior**:
This project is missing from list.  Can only see the following:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>24067</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB: Structure guidelines do not show tooltips any more</Title>
    <CreatedDate>05/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24067</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In Visual Studio 2017 (Enterprise) with code structure guidelines activated, the guidelines show fine. However, since some time, they do not show the tooltips while hovering over them any more. The tooltips used to show the nested statement hierarchy very nicely. Why, and what could I do about it? Thanks very mucht!_This issue has been moved from VSTS ticketId: 520010__These are the original issue comments:_Jinu Joseph [MSFT] on ‎11‎/‎12‎/‎2017, 06:56 PM (53 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24066</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Distiguishing auto-generated Constructor from an Custom-Constructor from IMethodSymbol.</Title>
    <CreatedDate>05/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>24066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Roslyn v2.6.0
VS2017 15.5

**Steps to Reproduce**:

1. Declare a class with no constructor
2. Try to analyze the constructor of the class, IMethodSymbol in an analyzer
3. We won't be able to identify whether the constructor is auto-generated Constructor or not.

**Expected Behavior**:
We should have a property to identify whether in IMethodSymbol whether a constructor is auto-generated or not.

**Actual Behavior**:
There is no way to identify whether IMethodSymbol of a constructor whether it is auto-generated or not.

Thanks
Basanth

  </Description>
  </Issue>
  <Issue>
    <IssueID>24061</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Typo in build.cmd options</Title>
    <CreatedDate>05/01/2018</CreatedDate>
    <ClosedDate>30/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Clone Roslyn master
2. build.cmd /?

``</Description>
  </Issue>
  <Issue>
    <IssueID>24060</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>UseExplicitType: var in deconstruction is rewritten with unexpected newlines</Title>
    <CreatedDate>05/01/2018</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A number of undesirable newlines get added to the generated code during formatting.

As far as I can tell the root cause of the newlines getting added is `AbstractTriviaFormatter.GetLineColumnOfWhitespace` which returns a value with lines=1. This causes `AbstractTriviaFormatter.AddWhitespaceTextChange` to add a newline.

``</Description>
  </Issue>
  <Issue>
    <IssueID>24056</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow collapsing of multi-line verbatim strings</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24056</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This would be especially useful in test classes, where I have a bunch of setup code that is extracted to a local const that is copied into every test. Except for the 200 lines of verbatim string, the definitions collapse down enough to be viewed on a single monitor.</Description>
  </Issue>
  <Issue>
    <IssueID>24055</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>24055</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft CodeAnalysis OOM Exception </Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24055</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24055</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24055</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>24055</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

-----------------------------
@chillryan

I've reported this issue through the visual studio feedback tool [see link]( but figured I'd try my chances posting here.

I'm using the Code Analysis 2017 extension for VS 2017 15.5. In looking at the stack trace, I can only assume that since the extension is running inside the devenv process, when its analysis a loaded solution, it hits the OOM. 

Since I've hit this situation a very frequent basis, I've disabled solution analysis for C# projects hoping that will help. I'll report back here if there are any changes or comment on the visual studio feedback link posted prior.
  </Description>
  </Issue>
  <Issue>
    <IssueID>24054</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InvalidOperationException when renaming in projection buffer</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24054</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro:

 1. Create an "ASP .NET Web Site (Razor v3)" // probably actually happens with any cshtml file
 2. Open About.html
 3. Add the following at the bottom
``</Description>
  </Issue>
  <Issue>
    <IssueID>24053</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Support TargetsTriggeredBeforeCompilation property</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>09/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>24053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
2.6.0-beta3

**Existing Related Feature**:

The following line at the end of the `CoreCompile` target in `Microsoft.[CSharp|VisualBasic].Core.targets` enables project file authors to configure a target to run if `CoreCompile` runs-- and not run if `CoreCompile` is skipped (e.g. because the output assembly is already up-to-date with respect to the code). This is very helpful for actions that need to be performed only on newly-generated assemblies. And it relieves the project developer of having to mimic the `CoreCompile` target's `Input` and `Output` attributes and cope with their variance between versions.

    &lt;CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/&gt;

**Desired Feature**:

A comparable `TargetsTriggeredBeforeCompilation` property (or similar mechanism) that is acted on before the `Csc` task runs would be invaluable for use cases such as updating assembly attributes in code.
  </Description>
  </Issue>
  <Issue>
    <IssueID>24052</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Text Editor setting: Automatic Delimiter Highlighting have no effect in VS2017</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24052</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported by @Justin Clareburt

![image](

In previous versions of Visual Studio, you could turn off this setting to stop the matching brace highlighting (and matching regions, curly braces, brackets, etc).
Reference 1. Reference 2.
Now it seems there is nothing I can do to stop braces/regions/etc from highlighting when the caret is on one.
Turning off the Highlighting settings in C# Advanced doesn’t help. (They are intended for different highlighting purposes.)

![image](
Does the Automatic Delimiter Highlighting do anything?
</Description>
  </Issue>
  <Issue>
    <IssueID>24050</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>24050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>With portable signing enabled, Roslyn does not support signing with the ECMA strong name key</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The ECMA strong name key appears to be a special case for signing that will need to be handled separately.</Description>
  </Issue>
  <Issue>
    <IssueID>24048</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please provide API to get PDB document table HashAlgorithm GUID given the standard enum</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>24048</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn 2.6.1

As this switch expands, I'd like to be able to convert from an `EmbeddedText.ChecksumAlgorithm`'s `SourceHashAlgorithm` value to the PDB guid without having to maintain my own copy of the switch:



When made public, it seems like it may belong in some other class than `DebugSourceDocument`.
</Description>
  </Issue>
  <Issue>
    <IssueID>24047</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>24047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Please provide API to serialize `EmbeddedText` to blob suitable for PDB</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>24047</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
// https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Dependencies/CodeAnalysis.Debugging/PortableCustomDebugInfoKinds.cs#L17
private static readonly Guid PortableCustomDebugInfoKinds_EmbeddedSource = new Guid("0E8A571B-6926-466E-B4AD-8AB04611F5FE");

// https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/EmbeddedText.cs#L79
private static readonly Func&lt;EmbeddedText, ImmutableArray&lt;byte&gt;&gt; get_Blob = (Func&lt;EmbeddedText, ImmutableArray&lt;byte&gt;&gt;)
    typeof(EmbeddedText)
    .GetProperty("Blob", BindingFlags.Instance | BindingFlags.NonPublic)
    .GetGetMethod(true)
    .CreateDelegate(typeof(Func&lt;EmbeddedText, ImmutableArray&lt;byte&gt;&gt;));

// ... (MetadataBuilder builder)

builder.AddCustomDebugInformation(
    parent: documentHandle,
    kind: builder.GetOrAddGuid(PortableCustomDebugInfoKinds_EmbeddedSource),
    value: builder.GetOrAddBlob(get_Blob.Invoke(embeddedText)));


## Proposal

Please make these internal APIs public (or provide an equivalent alternative which returns both the serialized blob and the checksum):

diff
namespace Microsoft.CodeAnalysis
{
    public sealed class EmbeddedText
    {
+       public ImmutableArray&lt;byte&gt; Blob { get; } 
    }
}

namespace Microsoft.CodeAnalysis.Debugging
{
+   public static class PortableCustomDebugInfoKinds
+   {
+       public static readonly Guid EmbeddedSource;
+   }
}
`</Code>
    <Description>Roslyn 2.6.1

## Problem

I need a way to add embedded source to a MetadataBuilder. Currently this requires reflection:

``

### Existing API



 - Comment just above:

   


  </Description>
  </Issue>
  <Issue>
    <IssueID>24046</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Debugger is not finding source embedded in PDB with SHA256 hash, only SHA1</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>22/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24046</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consuming PDB with VS 15.5.2, producing PDB with Microsoft.CodeAnalysis 2.6.1 and System.Reflection.Metadata 1.5.0.

Inserting my own embedded source for each document is working great if I use `EmbeddedText.FromStream` with `SourceHashAlgorithm.Sha1` and `MetadataBuilder.AddDocument` with the [SHA-1 guid](

If I use `SourceHashAlgorithm.Sha256` and the [SHA-256 guid]( VS fails to find the source and even says:

&gt; Locating source for *'original file path*'. (No checksum.)

Why would it say "no checksum" with that path?



Is something different with Dev15? Would a minimal repro be helpful?
  </Description>
  </Issue>
  <Issue>
    <IssueID>24045</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Document encoding gets lost on Project.AddDocument</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>24045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24045</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  2.6.1
**Steps to Reproduce**:
When entirely generating the syntax nodes in-memory, the SyntaxGenerator does not allow specifying an encoding.
The workaround is to re-create the syntax tree by using CSharpSyntaxTree.Create with a valid encoding.
Problem 1: how bad is this perf hit?

But even after having a valid encoding in the SyntaxTree, the AddDocument does not keep the information (see the last assert in the code below).
Again, the workaround is to re-apply the encoding after the compilation has been created, but it looks definitely a weird behavor.

- Am I missing something?
- Is there a better way to enforce the encoding for handcrafted in-memory syntax trees?

``

**Expected Behavior**:
1. I expect there a way to specify the default encoding in the SyntaxGenerator
2. I expect that AddDocument keep the encoding stored in the specified syntax tree
3. I want to avoid any possible perf hit that would come from generating the text source code and parsed back in a new syntax tree.

**Actual Behavior**:
The encoding is missing (see asserts in the code)</Description>
  </Issue>
  <Issue>
    <IssueID>24044</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Completion] Easy to accidentally commit wrong completion value for extension methods</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24044</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24044</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24044</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes I forget to type the `static` modifier when I'm writing an extension method, and only realize when the `this` keyword is missing from completion after the open paren, and the completion list commits something else that I didn't want.

It would be nice if the `this ` were in the list and committing it added the `static` modifier.</Description>
  </Issue>
  <Issue>
    <IssueID>24042</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[PersistentStorage] Should not try to re-create the database if native lib probing exceptions occur</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>24042</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  at Microsoft.CodeAnalysis.Storage.StorageDatabaseLogger.LogExceptionWorker (System.Exception) [0x00020] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.StorageDatabaseLogger.LogException (System.Exception) [0x00006] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryCreatePersistentStorage (Microsoft.CodeAnalysis.Solution,string,Microsoft.CodeAnalysis.Host.AbstractPersistentStorage&amp;) [0x0003e] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.TryCreatePersistentStorage (Microsoft.CodeAnalysis.Solution,string) [0x00011] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution,string) [0x000a4] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution,bool) [0x00057] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Storage.AbstractPersistentStorageService.GetStorage (Microsoft.CodeAnalysis.Solution) [0x00003] in &lt;eba66fb254b64fc2bac5f4dea6d5a28c&gt;:0
  at Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/&lt;DeserializeAsync&gt;d__5.MoveNext () [0x0002a] in &lt;9b2be15306ff44fbad0829eadaca768a&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;System.Runtime.CompilerServices.StrongBox`1&lt;System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticData&gt;&gt;&gt;.Start&lt;Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/&lt;DeserializeAsync&gt;d__5&gt; (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer/&lt;DeserializeAsync&gt;d__5&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer.DeserializeAsync (object,string,System.Threading.CancellationToken) [0x00044] in &lt;9b2be15306ff44fbad0829eadaca768a&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.DeserializeAsync (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,object,object,string,System.Threading.CancellationToken) [0x0005d] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeAsync&gt;d__26`2&lt;TKey_REF, TArg_REF&gt;.MoveNext () [0x00035] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;bool&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeAsync&gt;d__26`2&lt;Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder&gt;&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeAsync&gt;d__26`2&lt;Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder&gt;&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.TryDeserializeAsync&lt;TKey_REF, TArg_REF&gt; (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,object,TKey_REF,string,System.Action`3&lt;TArg_REF, TKey_REF, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticData&gt;&gt;,TArg_REF,System.Threading.CancellationToken) [0x00063] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeDocumentAsync&gt;d__25.MoveNext () [0x0005d] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;bool&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeDocumentAsync&gt;d__25&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;TryDeserializeDocumentAsync&gt;d__25&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.TryDeserializeDocumentAsync (Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticDataSerializer,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/Builder,System.Threading.CancellationToken) [0x00048] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;LoadInitialAnalysisDataAsync&gt;d__17.MoveNext () [0x00110] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;LoadInitialAnalysisDataAsync&gt;d__17&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;LoadInitialAnalysisDataAsync&gt;d__17&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.LoadInitialAnalysisDataAsync (Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken) [0x00037] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;GetAnalysisDataAsync&gt;d__9.MoveNext () [0x0006b] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Workspaces.Diagnostics.DiagnosticAnalysisResult&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;GetAnalysisDataAsync&gt;d__9&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState/&lt;GetAnalysisDataAsync&gt;d__9&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectState.GetAnalysisDataAsync (Microsoft.CodeAnalysis.Project,bool,System.Threading.CancellationToken) [0x0003f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/&lt;CreateAsync&gt;d__9.MoveNext () [0x00074] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/&lt;CreateAsync&gt;d__9&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData/&lt;CreateAsync&gt;d__9&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData.CreateAsync (Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/StateSet&gt;,bool,System.Threading.CancellationToken) [0x0003f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/&lt;GetProjectAnalysisDataAsync&gt;d__4.MoveNext () [0x000f5] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/ProjectAnalysisData&gt;.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/&lt;GetProjectAnalysisDataAsync&gt;d__4&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor/&lt;GetProjectAnalysisDataAsync&gt;d__4&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/Executor.GetProjectAnalysisDataAsync (Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers,Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/StateSet&gt;,bool,System.Threading.CancellationToken) [0x00051] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/&lt;AnalyzeProjectAsync&gt;d__84.MoveNext () [0x00168] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/&lt;AnalyzeProjectAsync&gt;d__84&gt; (Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer/&lt;AnalyzeProjectAsync&gt;d__84&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316
  at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.AnalyzeProjectAsync (Microsoft.CodeAnalysis.Project,bool,Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons,System.Threading.CancellationToken) [0x00038] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;&gt;c__DisplayClass11_0.&lt;ProcessProjectAsync&gt;b__0 (Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken) [0x0000f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;&gt;c__DisplayClass32_1`1/&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d&lt;T_REF&gt;.MoveNext () [0x0002e] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;object&gt;.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;&gt;c__DisplayClass32_1`1/&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d&lt;Microsoft.CodeAnalysis.Project&gt;&gt; (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;&gt;c__DisplayClass32_1`1/&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d&lt;Microsoft.CodeAnalysis.Project&gt;&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;&gt;c__DisplayClass32_1`1&lt;T_REF&gt;.&lt;RunAnalyzersAsync&gt;b__0 (T_REF,System.Threading.CancellationToken) [0x00037] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;GetOrDefaultAsync&gt;d__34`2&lt;TData_REF, TResult_REF&gt;.MoveNext () [0x0001f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;object&gt;.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;GetOrDefaultAsync&gt;d__34`2&lt;Microsoft.CodeAnalysis.Project, object&gt;&gt; (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;GetOrDefaultAsync&gt;d__34`2&lt;Microsoft.CodeAnalysis.Project, object&gt;&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor.GetOrDefaultAsync&lt;TData_REF, TResult_REF&gt; (TData_REF,System.Func`3&lt;TData_REF, System.Threading.CancellationToken, System.Threading.Tasks.Task`1&lt;TResult_REF&gt;&gt;,System.Threading.CancellationToken) [0x00037] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;RunAnalyzersAsync&gt;d__32`1&lt;T_REF&gt;.MoveNext () [0x0009b] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;RunAnalyzersAsync&gt;d__32`1&lt;Microsoft.CodeAnalysis.Project&gt;&gt; (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/&lt;RunAnalyzersAsync&gt;d__32`1&lt;Microsoft.CodeAnalysis.Project&gt;&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor.RunAnalyzersAsync&lt;T_REF&gt; (System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;,T_REF,System.Func`4&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer, T_REF, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt;,System.Threading.CancellationToken) [0x0003f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ProcessProjectAsync&gt;d__11.MoveNext () [0x00110] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ProcessProjectAsync&gt;d__11&gt; (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ProcessProjectAsync&gt;d__11&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor.ProcessProjectAsync (System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer&gt;,Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/WorkItem,System.Threading.CancellationTokenSource) [0x0003f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ExecuteAsync&gt;d__3.MoveNext () [0x000c0] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start&lt;Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ExecuteAsync&gt;d__3&gt; (Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor/&lt;ExecuteAsync&gt;d__3&amp;) [0x0002c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:316
  at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService/WorkCoordinator/IncrementalAnalyzerProcessor/LowPriorityProcessor.ExecuteAsync () [0x00027] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor/&lt;ProcessAsync&gt;d__12.MoveNext () [0x0012f] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.InvokeMoveNext (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1089
  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00071] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:957
  at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:904
  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.Run () [0x00024] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1070
  at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction (System.Action,bool,System.Threading.Tasks.Task&amp;) [0x0001c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/TaskContinuation.cs:823
  at System.Threading.Tasks.Task.FinishContinuations () [0x00068] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:3631
  at System.Threading.Tasks.Task.FinishStageThree () [0x0003c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:2373
  at System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetResult (System.Threading.Tasks.VoidTaskResult) [0x0004f] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Future.cs:488
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult (System.Threading.Tasks.VoidTaskResult) [0x0003e] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:608
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;System.Threading.Tasks.VoidTaskResult&gt;.SetResult (System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;) [0x00010] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:636
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult () [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:378
  at Microsoft.CodeAnalysis.SolutionCrawler.IdleProcessor/&lt;WaitForIdleAsync&gt;d__11.MoveNext () [0x000ec] in &lt;c687f5f16d954d66b706836583783302&gt;:0
  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.InvokeMoveNext (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1089
  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00071] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:957
  at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/executioncontext.cs:904
  at System.Runtime.CompilerServices.AsyncMethodBuilderCore/MoveNextRunner.Run () [0x00024] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1070
  at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction (System.Action,bool,System.Threading.Tasks.Task&amp;) [0x0001c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/TaskContinuation.cs:823
  at System.Threading.Tasks.Task.FinishContinuations () [0x00068] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:3631
  at System.Threading.Tasks.Task.FinishStageThree () [0x0003c] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:2373
  at System.Threading.Tasks.Task`1&lt;System.Threading.Tasks.VoidTaskResult&gt;.TrySetResult (System.Threading.Tasks.VoidTaskResult) [0x0004f] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Future.cs:488
  at System.Threading.Tasks.Task/DelayPromise.Complete () [0x00045] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:5962
  at System.Threading.Tasks.Task/&lt;&gt;c.&lt;Delay&gt;b__276_1 (object) [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/Tasks/Task.cs:5916
  at System.Threading.Timer/Scheduler.TimerCB (object) [0x00007] in /home/mkrueger/work/install/mono/mcs/class/corlib/System.Threading/Timer.cs:327
  at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem () [0x00015] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:1279
  at System.Threading.ThreadPoolWorkQueue.Dispatch () [0x00074] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:856
  at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback () [0x00000] in /home/mkrueger/work/install/mono/mcs/class/referencesource/mscorlib/system/threading/threadpool.cs:1211
  at (wrapper runtime-invoke) &lt;Module&gt;.runtime_invoke_bool (object,intptr,intptr,intptr) [0x0001f] in &lt;0f34c28ae3cf4341a062f0b0237f7ae9&gt;:0
`</Code>
    <Description>**Version Used**: 
2.6.0

**Steps to Reproduce**:

1. Use SQLiteStorage
2. Remove the e_sqlite.dll (to mirror what would happen on Linux, for example, when the library can't be probed)
3. Observe that a lot of exceptions are being logged with this stacktrace

``

**Expected Behavior**:
The sqlite storage service should not probe again and again if the native library can't be resolved.

**Actual Behavior**:
Slows down CPU, as it tries to re-create the database on every database operation and failing.

Possible fix:
If the exception is something like `DllNotFoundException`, it might be ok to return NOOP storage on subsequent tries.</Description>
  </Issue>
  <Issue>
    <IssueID>24037</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>24037</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>24037</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Umbrella] Work items and test plan for async streams</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>19/09/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24037</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24037</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Async Streams</Name>
        <IssueID>24037</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Proposal: 

Notes on cancellation token and `[EnumeratorCancellation]`: 


## FAQ and known issues
- "missing ManualResetValueTaskSourceLogic": 
The preview1 compiler is looking for that type, but .NET Core 3 preview 1 contains `ManualResetValueTaskSourceCore`. The solution is to include this [code snippet]( in your program. This will be fixed in preview2.
- enumerator disposed too early (`yield return` in construct with `finally`) (see issue 
- `NullableReferenceTypes` project property doesn't take full effect in legacy projects yet ( 

----


## Async-iterator methods
- [x] EnC
  - [x] ~~block~~
  - [x] enable (issue  issue  for `await using` declarations)
- [x] making cancellation token available to producers (PRs  and  API proposal 
- [ ] Consider optimizing handling of `yield return` when directly following another `yield return` (to reduce cost in `ManualResetValueTaskSourceCore.SetResult`) (issue  needs LDM)
- [ ] Factor the implementation of `GetStatus` and `OnCompleted` for implementing `IValueTaskSource` and `IValueTaskSource&lt;bool&gt;` 
- [ ] Test `goto`, `continue`, `break`
- [ ] Consider optimizing stack consumption 
- [ ] Improve message when missing `async` 
- [ ] test async method returning a custom type that derives from `IAsyncEnumerable&lt;T&gt;` and `IAsyncEnumerator&lt;T&gt;`.
- [x] BCL design
    - [x] ~~factor some code into a base type?~~ (no)
    - [x] ~~introduce new exception type?~~ (not needed at the moment)
    - [x] Any work needed for mono support? (issue  PR  `EnumeratorCancellation` issue 
- [x] test spilling (maybe need to integrate with Neal's changes in patterns branch)
- [x] Get more test ideas from async method and iterator method tests
- [x] Debugging experience (issue  fixed in preview3)
- [x] Consider adding a guard in `DisposeAsync()`: if state is `-1`, then throw. PR 
- [x] Optimize value returned from `MoveNextAsync()` if possible (issue  PR 
- [x] Add optional token to `GetAsyncEnumerator` API (PR 
- [x] Should we add some guards for API mis-use? 
- [x] Generate token checks (answer: no)
- [x] Dispose on async-iterator with `finally` issue  PR 
- [x] Confirm desired behavior for `DisposeAsync()`. it is ok to dispose before enumerating, and then you start enumerating?
- [x] Consider optimizing disposeModeField away when it isn't needed (answer: the optimization is not worth the loss of regularity)
- [x] Emit `AsyncIteratorStateMachineAttribute` PR 
- [x] Test scenario that uses `AwaitOnCompleted` instead of `AwaitUnsafeOnCompleted`
- [x] Adopt new BCL APIs (`AsyncIteratorMethodBuilder`, `ManualResetValueTaskSourceCore`, remove `IStrongBox&lt;T&gt;`) PR 
- [x] Returning `IAsyncEnumerator&lt;T&gt;`  PR 
- [x] What do exception stack traces look like? Does the stack trace simplifier need to be updated?
- [x] Confirm `threadID` design (see 
- [x] `GetAsyncEnumerator()` method should make a new instance in some cases  PR 
- [x] `IOperation` and `CFG` should not crash 
- [x] Update `IAsyncEnumerable` API 
- [x] hand-crafted prototype (
- [x] lowering implementation (
- [x] CoreCLR testing issue 
- [x] support generic methods
- [x] manual testing in IDE (setting up project references, typing, debugging)

## Async using and foreach
- [x] Design and fix IOperation and CFG support 
- [ ] test with ref struct iterator (issue 
- [ ] pattern-based disposal should not even consider extensions (issue 
- [ ] add test with pattern-based GetAsyncEnumerator with a Caller attribute on optional parameter (check LINQ behavior)
- [ ] Allow extension methods to contribute to pattern-based binding (issue 
- [ ] Tweak message for `ERR_AwaitForEachMissingMemberWrongAsync`
- [ ] Implement semantic model API similar to `GetAwaitExpressionInfo`
- [ ] Test scripting
- [ ] Test subtleties of `SatisfiesForEachPattern` (special method of looking up `Current`)
- [ ] Test type that is both `IEnumerable&lt;T&gt;` and `IAsyncEnumerable&lt;T&gt;`.
- [ ] Test type that is both `IDisposable` and `IAsyncDisposable`.
- [x] Allow pattern-based disposal in `await foreach` and `await using` (issue 
- [x] Async-enumerable returned by `ConfigureAwait`/`WithCancellation` not recognized by `await foreach` (issue  PR 
- [x] Pattern-based lookup should pass no argument for `CancellationToken` (issue  PR 
- [x] Integration with "enhanced using and foreach" feature 
- [x] Test/block expression trees (N/A because they are statements)
- [x] `IOperation` and `CFG` should not crash 
- [x] Use `await using` and `await foreach` syntax 
- [x] Update `IAsyncEnumerable` API 
- [x] Do we prefer pattern-based over interface-based? (I assume perf is better)
- [x] ~~Only convert/deconstruct when `TryGetNext` succeeded 
- [x] async using (PR 
- [x] async foreach (PR 
- [x] Update `IAsyncEnumerator.WaitForNextAsync` to return a `ValueTask&lt;bool&gt;`.
- [x] Pattern-based foreach should recognize task-like return from `WaitForNextAsync`
- [x] Verify debugging and sequence points
- [x] Handle `foreach await (ref x in ...) ...` (error, ` TestWithPattern_Ref`)
- [x] Test with missing well-known members, if not already covered
- [x] Pattern-based async-foreach should recognized `WaitForNextAsync` that returns a task-like.

## Productivity (code fixers/refactorings/etc):
- [x] ~~ExtractMethod doesn't work on parts of or entire async-iterator method body~~ (that's expected)
- [x] FindAllReferences (moved all FAR issues into 
    - [x] it should find implicit references to `GetAwaiter` from an async-foreach or async-dispose. 
     - [x] it should find implicit references to `DisposeAsync` from an async-foreach or async-dispose. 
- [x] Verify FAR on `AsyncDispose` method
- [x] ~~decompilation feature in IDE~~ (we'll let ILSpy library fix this)
- [ ] Verify proper warnings if any involved member is obsolete (implicit conversions and such)
- [x] Code fixers: 
    - [x] fix `foreach` (by adding/removing `await`) depending on the collection type. (PR 
    - [x] fix `using` (by adding/removing `await`) depending on resource type. (PR 
    - [x] fix method declaration depending on presence/absence of `yield` or `await` (MakeMethodAsync PR 
    - [x] using `foreach await` in non-async method should offer to convert the method to `async` 
- [x] IDE logic probably needs to be adjusted for completion inside `await using` and `await foreach`. For instance, see `IsLocalVariableDeclarationContext`.
- [x] Review TypeInferrer  (PR 
- [x] parsing (PR 
- [x] IDE completion and colorizing (
- [x] Verify highlighting for `async` and `await` (see  PR  (verified manually on method and local function)
- [x] Test with `ConvertForeachToFor` refactoring (verified manually, not triggered)

## LDM open issues:

- [ ] async LINQ
    - [ ] Parsing issue with `return from e in async-collection select await e + 1; // await isn't a keyword`
    - [ ] how does above scenario and `return from e in async-collection select e + 1;` lower into LINQ APIs? (the one with `await` involves `Task&lt;int&gt;` and the other one involves `int` directly) How many overloads of `Select` do we need?
- [ ] Should there be some helper method to convert from IEnumerable to IAsyncEnumerable, or from Task&lt;T&gt; to IAsyncEnumerable?
- [x] Should the generate token checks be in `GetAsyncEnumerator` or in `MoveNextAsync`? (if we do, we need to store the token and maybe dispose it too) (answer: no)
- [x] Revisit blocking off a word (either in parameter list, like `params`, or for variable name, like `value`) for token (answer: we're not going to use a keyword)
- [x] pattern-based `await using` should recognize a `DisposeAsync` method that returns a task-like (or only `ValueTask`)? (not applicable because no ref structs in async methods)
- [x] Should pattern-based `foreach` recognize `... GetAsyncEnumerator()` (without `CancellationToken`)? (yes, LDM 1/9)
- [x] What attributes should be emitted on async-iterator state machines? (answer: `AsyncIteratorStateMachineAttribute`)
- [x] cancellation of async-streams (both as consumer and producer) (see LDM 11/28)
- [x] confirm syntax for async foreach
- [x] Should we disallow `struct` async enumerator? (no, same as regular async, see ` TestWithPattern_WithStruct_MoveNextAsyncReturnsTask`)
- [x] Should `DisposeAsync` return a non-generic `ValueTask`, since there is now one? Or stick with `Task`?
- [x] Extension methods for `GetAsyncEnumerator`, `WaitForNextAsync`, and `TryGetNext` do not contribute. This mirrors behavior for regular `foreach`. But I'd like to confirm. (answer: this is probably something we want to support. Let's queue that for later in the implementation)
- [x] Should the pattern for async enumerators also recognize when a task-like is returned instead of `Task&lt;bool&gt;`? (answer: yes)
- [x] I think we'll need to block `dynamic` since there is no async counterpart to the non-generic `IEnumerable` that would convert `dynamic` to. (answer: seems ok)
- [x] Do we need `async` keyword on async iterator methods? I assume yes.
- [x] Since not enumerable lambdas, I assume the same for async-enumerable. (answer: correct. No async iterator lambda)
- [x] async-iterator without `yield` or `await`, should warn? (answer: without `yield` it's not recognized as an iterator, warn when no `await`)
- [x] I suspect we'll need to declare the loop variable differently: calling `TryGetNext` first, then checking `success` and only then dealing with conversions and deconstructions.

Championed issue:  (includes LDM notes)

## Test ideas for async foreach:
- [x] Verify that async-dispose doesn't have a similar bug with struct resource

## Test ideas for async using:
- [ ] Look up Lippert's blog on using with struct or generic type T
- [ ] Does the pattern or the interface get picked up first? Is it observable? (maybe if the pattern allows task-like returning method)

## Test ideas for async iterators:
- [ ] From Andy: we should have at least one test that runs using a non-trivial sync context. 
- [ ] From Andy: would it be useful to emit asserts for invalid/unexpected states for at least a little while? We could do it only for debug codegen.
- [x] Test with yield or await in try/catch/finally
- [ ] More tests with exception thrown in async-iterator
- [ ] There is a case in `GetIteratorElementType` with `IsDirectlyInIterator` that relates to speculation, needs testing
- [ ] yield break disallowed in finally and top-level script (see `BindYieldBreakStatement`); same for yield return (see `BindYieldReturnStatement`)
- [ ] binding for yield return (`BindYieldReturnStatement`) validates escape rules, needs testing
- [x] test yield in async lambda (still error)
- [ ] test with `IAsyncEnumerable&lt;dynamic&gt;`
- [ ] other tests with `dynamic`?
- [x] test should cover both case with `AwaitOnCompleted` and `AwaitUnsafeOnCompleted`
- [ ] test `async IAsyncEnumerable&lt;int&gt; M() { return TaskLike(); }`
- [ ] Can we avoid making `IAsyncEnumerable&lt;T&gt;` special from the start? Making mark it with an attribute like we did for task-like?
- [ ] Do some manual validation on debugging scenarios, including with exceptions (thrown after yield and after await).
- [ ] Test with one or both or the threadID APIs missing.


----
## BCL (Core)
- Add `DefaultCancellationAttribute` type: 
- Design IAsyncEnumerable and supporting types to BCL:  
- Design IAsyncDisposable in BCL: 
- Design for CancellationToken in IAsyncEnumerable: 
PRs  and 
- Stack pretty printing 
- Add optional token to `GetAsyncEnumerator` API
- Add extension method `WithCancellation(...)` to call `GetAsyncEnumerator` and wrap the result into an `IAsyncEnumerable`
- AsyncIteratorStateMachineAttribute  PR  (and using it 
- Add `CancellationToken` to `GetAsyncEnumerator()` PR  documentation 
- Add `WithCancellation` design 
- Add `IAsyncDisposable.ConfigureAwait` (PRs  and 

## BCL (mono)
- Port types to mono (

## BCL (package)
- Add `EnumeratorCancellationAttribute` (PR 

-----
## References:
- [ValueTask](
- [IValueTaskSource]( </Description>
  </Issue>
  <Issue>
    <IssueID>24036</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"keyword"</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24036</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24036</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Thats all the exception tells me. Why?_This issue has been moved from VSTS ticketId: 431114__These are the original issue comments:_Matthew Gertz on 5/8/2017, 08:33 AM (240 days ago): &lt;p&gt;Thank you for your feedback! For us to investigate this further, could you please provide us with the repro steps that caused this "keyword" error to appear? We look forward to hearing from you!&lt;/p&gt;Andrew Stanton on 5/23/2017, 03:36 AM (225 days ago): &lt;p&gt;I did, but the feedback tool ate the attachment.  It looked like one of the generated and marginally useful Roslyn  `throw new ArgumentNullException(nameof(keyword))`-like statements&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24035</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio Code-Fix for generating GetHashCode results in OverflowException in checked assembly</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>14/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24035</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Foo
{
    object bar;
    string baz;
}

3. Place the cursor immediately after `Foo`
4. Press Ctrl+. (period)
5. Select "Generate Equals and GetHashCode()..."
6. Create a new `Foo` object and call `GetHashCode()`

Full code:

cs
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            new Foo().GetHashCode();
        }
    }

    class Foo
    {
        object bar;
        string baz;

        public override bool Equals(object obj)
        {
            var foo = obj as Foo;
            return foo != null &amp;&amp;
                   EqualityComparer&lt;object&gt;.Default.Equals(bar, foo.bar) &amp;&amp;
                   baz == foo.baz;
        }

        public override int GetHashCode()
        {
            var hashCode = -1438245972;
            hashCode = hashCode * -1521134295 + EqualityComparer&lt;object&gt;.Default.GetHashCode(bar);
            hashCode = hashCode * -1521134295 + EqualityComparer&lt;string&gt;.Default.GetHashCode(baz);
            return hashCode;
        }
    }
}


**Expected Behavior**:

The compiled program exits with code 0, printing no output.

**Actual Behavior**:

The compiled program crashes with a `System.OverflowException`:


System.OverflowException
  HResult=0x80131516
  Message=Arithmetic operation resulted in an overflow.
  Source=ConsoleApp1
  StackTrace:
   at ConsoleApp1.Foo.GetHashCode() in C:\temp\ConsoleApp1\ConsoleApp1\Program.cs:line 29
   at ConsoleApp1.Program.Main(String[] args) in C:\temp\ConsoleApp1\ConsoleApp1\Program.cs:line 9
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017
Version 15.5.2

**Steps to Reproduce**:
1. Create a new project with "Check for arithmetic overflow/underflow" enabled in the project Build settings
2. Add the following class:

``

I expect that the IDE code-fix should wrap the method body in an `unchecked` block when the assembly is checked.
  </Description>
  </Issue>
  <Issue>
    <IssueID>24034</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Use explicit type instead of 'var'" should opt for adding a "using" instead of fully qualifying</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24034</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Use explicit type will fully qualify a type if there is not already a using in scope. This is annoying if you never want a fully qualified type.

![image](

This in contrast to the spell checker, which does opt for a using vs fully qualifying:

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>24033</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method give inconsistents results</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>24033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    static void Main(string[] args)
    {
        var list = new List&lt;LittleObject&gt;();
        list.Add(new LittleObject { AValue = "a" });

        var firstA = list.FirstOrDefault(o =&gt; o.AValue == "a");
        if(firstA != null)
        {
            //Extract from here
            bool areEquals(LittleObject a, LittleObject b)
            {
                return a.AValue == b.AValue;
            };

            var secondA = list.FirstOrDefault(o =&gt; areEquals(o, firstA));
            //To here
        }
    }
}

class LittleObject
{
    public string AValue { get; set; }
}
`</Code>
    <Description>Extract Method give inconsistents results when a local function is within extracted code (used or described)

_This issue has been moved from 
VSTS ticketId: 523482_
_These are the original issue comments:_

Jinu Joseph [MSFT] on ‎11‎/‎13‎/‎2017, 01:34 AM (51 days ago): &lt;p&gt;Thanks for pointing out the difference , opening this back for consideration.&lt;/p&gt;&lt;p&gt;Thanks for the feedback.&lt;/p&gt;

_These are the original issue solutions:_

Jinu Joseph [MSFT] solved on ‎11‎/‎13‎/‎2017, 00:37 AM (51 days ago), 0 votes: &lt;p&gt;Thank you for your feedback! This issue appears to be similar  to &lt;a target='_blank' href="  We recommend that you follow the reported issue for updates and fix notifications, also feel free to add your specific example in there&lt;/p&gt;


Christophe MOMMER on ‎11‎/‎13‎/‎2017, 01:28 AM (51 days ago): 
&lt;p&gt;From my perspective, it seems not be the same issue. I've posted a video attached to this ticket to demonstrate my issue but here's some code :&lt;/p&gt;

``

&lt;p&gt;When I try to extract what is within the if statement, I get an inconsistent extraction proposed by visual studio (neither list of FirstA are passed as parameters to the new method, which brokes compilation).&lt;/p&gt;
&lt;p&gt;Also, please note that it DOES BREAK the compilation (whereas Github issue mention that compilation is not broken). And finally, the roslyn team added the &amp;quot;area-IDE&amp;quot;, which seems to mean that is a visual studio issue instead of roslyn.&lt;/p&gt;
&lt;p&gt;Please note I added my example to the Github thread for more informations to roslyn team.&lt;/p&gt; 

  </Description>
  </Issue>
  <Issue>
    <IssueID>24032</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Hard to see cursor when using in-place rename refactoring</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-User Friendly</Name>
        <IssueID>24032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I use dark VS theme (don't know if its relevant)
I press Ctrl+R, Ctrl+R on identifier to start Rename refactoring.
Text cursor vanishes.
It is super annoying because I don't understand what will happen when I press something. It returns after finishing Rename

![image](

Can you do something about it? It should be easy fix (I hope) and it will dramatically improve my daily usage of VS

_This issue has been moved from 
VSTS ticketId: 527771_
_These are the original issue comments:_

Jinu Joseph [MSFT] on ‎12‎/‎3‎/‎2017, 04:27 AM (31 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)
  </Description>
  </Issue>
  <Issue>
    <IssueID>24031</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>24031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS2017express C#, tabs replaced with spaces</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need Design Review</Name>
        <IssueID>24031</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello,under the following circumstances, VS2017express replaces tabs with spaces even though I deactivated that feature in the options:- I am working on a C# file- I am pasting a tab from my clipboard into a line of code, but not at the end, e.g. &amp;quot;int i = 0; // init i&amp;quot;. If I want more space between the command and the comment and I use my tab key, then tabs get inserted properly, but if I put a tab into my clipboard and insert it with Ctrl-V, then ALL tabs get replaced with spaces.This problem does not occur in C++ files of the same solution, even though I set the tab configuration identical for all languages.CheersPeter_This issue has been moved from VSTS ticketId: 528589__These are the original issue comments:_Peter Meier on ‎11‎/‎23‎/‎2017, 02:27 AM (41 days ago): &lt;p&gt;Also I just found out that if I hit the auto format keys (Ctrl-K, Ctrl-D), all the tabs I inserted between the command and the comment are replaced with spaces again. I searched through Tools/Options/Text Editor/C#/Code Style/Formatting, but I found no way to change this annoying behavior. I don't understand why C# won't let me align my comments the way I want them to be when it's no problem for C++.&lt;/p&gt;Jinu Joseph [MSFT] on ‎12‎/‎20‎/‎2017, 02:48 AM (14 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24030</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Options ... Naming Style dialog unusable with Dark theme</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24030</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When VS is configured to use Dark theme, &amp;quot;Naming Style&amp;quot; dialog is unusable - text is white on light background (yet input boxes have dark background), see screenshot attached._This issue has been moved from VSTS ticketId: 529630__These are the original issue comments:_Jinu Joseph [MSFT] on ‎12‎/‎3‎/‎2017, 04:48 AM (31 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24029</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Line break options ignored in C# editor</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24029</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I just noticed that the C# editor is formatting my code with line breaks after curly braces, contrary to my Text Editor/C#/Code Style/Formatting/New Line options settings. This is *extremely* annoying. Appreciate a bug fix ASAP._This issue has been moved from VSTS ticketId: 529634__These are the original issue comments:_Jinu Joseph [MSFT] on ‎11‎/‎27‎/‎2017, 03:40 AM (37 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24028</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>One missing closing bracket creates dozens of errors</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>24028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Say I type the following:

``

Now a huge list of errors will appear in the error list and all code below the above line is marked in red.

Of course, the closing bracket is still missing, but that should only create one error in the list, not dozens, and dozens of wavy red underlines. 

However, on my PC all code below the above line is marked in red and most of the code (but not all) has wavy red lines underneath.

_This issue has been moved from 
VSTS ticketId: 530270_
_These are the original issue comments:_

Agustin Paroli on ‎11‎/‎28‎/‎2017, 02:57 PM (36 days ago): &lt;p&gt;When you forget to put a parenthesis (and also a quote, as in your example), the compiler interprets all the code that follows it as if it should be inside the parenthesis, and as what you put inside the parentheses is not valid in that method / object, many errors will be shown depending on the code that continues it. &lt;/p&gt;&lt;p&gt;It is not a bug, it is the normal and expected behavior of the IDE.&lt;/p&gt;

Marc Enzler on ‎11‎/‎29‎/‎2017, 02:17 AM (35 days ago): &lt;p&gt;Dear Augustin,&lt;/p&gt;&lt;p&gt;Thank you for your reply. &lt;/p&gt;&lt;p&gt;I need to clarifiy: it is not the missing closing bracket that causes the errors but the missing closing quote.&lt;/p&gt;&lt;p&gt;If I type: &lt;/p&gt;&lt;p&gt;MessageBox.Show("&lt;/p&gt;&lt;p&gt;the moment I enter the quote dozens of errors appear in the error list and everything below this line gets red. It is very confusing and distracts me massively. After all, I am still typing so it's obvious the statement is uncomplete.&lt;/p&gt;&lt;p&gt;Please note that I am using Visual Basic, not Java, and in Visual Basic semantics only this one line contains an error, all other lines are perfectly sound.&lt;/p&gt;&lt;p&gt;I have now checked with my VS2012 installation which I have been using until a few weeks ago, and there the behavior is differently and as I would expect, no error is show as long as I do not move the focus away from the incomplete line and when I do only one error is shown indicating there is something missing on that line.&lt;/p&gt;&lt;p&gt;If this is not a bug, where might I change this behavior of the error list? It is extremely annoying.&lt;/p&gt;&lt;p&gt;Thanks!&lt;br&gt;&lt;/p&gt;

Jinu Joseph [MSFT] on ‎12‎/‎3‎/‎2017, 05:02 AM (31 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)
  </Description>
  </Issue>
  <Issue>
    <IssueID>24027</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Find all references Goto Next/Prev Location doesn't work as excpected</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>24027</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,I think it should work similarly as navigating between the items of a find in files session. After getting the result, toolwindow gets the focus and hittting F8 (Goto next location) should open up the next result's document. The caret is placed where the match is found and it is blinking (got the input focus). Hitting the F8 again would open up the next document with blinking caret etc.In case of find all references after getting the results and hitting F8 VS opens up the corresponding document the current line marker is set also but doesn't get the input focus, the caret is not visible. Repetitively hitting F8 usually gives the same result, sometimes the caret is visible but usually not. It is a bit annoying given it is not clear where the reference was found and no chance to start typing without using the mouse. Thanks,Marcell_This issue has been moved from VSTS ticketId: 530519__These are the original issue comments:_Jinu Joseph [MSFT] on ‎12‎/‎3‎/‎2017, 05:07 AM (31 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;Tomas Karban on ‎12‎/‎6‎/‎2017, 06:27 AM (28 days ago): &lt;p&gt;I have the same problem, VS2017 15.5.0 running on Windows 7. After F8 the editor does not have proper focus. I cannot type, but Delete/Backspace work... which is strange. Double-clicking on the item in the result window works as expected -- brings focus to the editor (blinking cursor at the right location).&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>24026</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>davkean</FixedById>
        <IssueID>24026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NavigateTo shows no results for types in current solution for a certain period after open solution</Title>
    <CreatedDate>04/01/2018</CreatedDate>
    <ClosedDate>29/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>24026</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @mavasani on April 13, 2017 23:58_![image](

I am hitting this quite often when working on Analyzers.sln from roslyn-analyzers repo. It doesn't show any results for few seconds to couple of minutes after opening the solution, even though the solution load has completed and I get coloring and intellisense for the type. Not sure if it is bug in the project system or Roslyn._Copied from original issue: dotnet/project-system#1992_</Description>
  </Issue>
  <Issue>
    <IssueID>24025</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>`in` keyword is not contextual</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>03/01/2018</ClosedDate>
    <IssueLabels />
    <Description>The new `in` keyword is not treated as contextual and breaks older code that used `in` as an identifier.

</Description>
  </Issue>
  <Issue>
    <IssueID>24019</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>24019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NET Core SDK 2.2 for Visual Studio 2017</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>21/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>24019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>24019</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @VE-2016 on December 20, 2017 13:55_## Steps to reproduce
I would like to build Roslyn platform from sources in Visual Studio 2017. One requirement is to install NET Core SDK 2.2 (preview). After installation of the NET Core SDK 2.2.0_Preview this version is not visible in Visual Studio 2017 in installed NetCore Frameworks

## Expected  behavior
Roslyn cannot be built because Visual Studio 2017 does not find this NET Core SDK 2.2.0 version.  How to install this version for Visual Studio 2017?

## Actual behavior
NET Core SDK 2.2 runs properly from command-line only.







_Copied from original issue: dotnet/cli#8273_</Description>
  </Issue>
  <Issue>
    <IssueID>24018</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>24018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inferred nullability should flow into anonymous type fields</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>22/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>24018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System.Linq;
class C
{
    static void Main()
    {
        var x = new string[] { "" };
        var y = x.Select(s =&gt; new { s }).First().s;
        y.ToString();
    }
}


(jcouv update:)
I also noticed a reference to the feature flag in binding logic for anonymous types, which seems wrong (the feature flag should only affect diagnostics, but not symbols from binding).

C#
    private BoundExpression BindAnonymousObjectCreation(AnonymousObjectCreationExpressionSyntax node, DiagnosticBag diagnostics)
        {
...
                //  calculate the expression's type and report errors if needed
                TypeSymbol fieldType = GetAnonymousTypeFieldType(boundExpressions[i], fieldInitializer, diagnostics, ref hasError);

                // build anonymous type field descriptor
                fieldSyntaxNodes[i] = (nameToken.Kind() == SyntaxKind.IdentifierToken) ? (CSharpSyntaxNode)nameToken.Parent : fieldInitializer;
                fields[i] = new AnonymousTypeField(fieldName == null ? "$" + i.ToString() : fieldName, fieldSyntaxNodes[i].Location, 
                                                   TypeSymbolWithAnnotations.Create(fieldType, isNullableIfReferenceType: node.IsFeatureStaticNullCheckingEnabled()));  // &lt;===== THIS SEEMS FISHY

...
            }
`</Code>
    <Description>The anonymous type field in the following should be declared as `string` rather than `string?`. Instead, `y.ToString()` generates a warning that `y` may be null.
``</Description>
  </Issue>
  <Issue>
    <IssueID>24017</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>incorrect fix for IDE0007 when calling method with implicit generic parameters</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>04/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24017</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24017</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse("Local", out DateTimeKind result) &amp;&amp; result == DateTimeKind.Local);
}


**Expected Behavior**:

either suggestion does not apply in this case or:

csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse&lt;DateTimeKind&gt;("Local", out var result) &amp;&amp; result == DateTimeKind.Local);
}


**Actual Behavior**:

csharp
void Test()
{
    Assert.IsTrue(Enum.TryParse("Local", out var result) &amp;&amp; result == DateTimeKind.Local);
}
`</Code>
    <Description>**Version Used**:  15.5.2

**Steps to Reproduce**:

1. Run quick fix for "use 'var' instead of explicit type" on `out DateTimeKind` this code:

``

Error: CS0411</Description>
  </Issue>
  <Issue>
    <IssueID>24016</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>mef</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>04/01/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>24014</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect arg prep emitted for `ref this` / `ref struct` call with `out` parameter</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Ref Locals and Returns</Name>
        <IssueID>24014</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
#define VERBOSE // turns on pointer address outputs
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

static class PossibleCompilerBug
{
    ref struct MutableRefStruct
    {
        public MutableRefStruct(int foo) { _foo = foo; }
        public int Foo =&gt; _foo;
        private int _foo;
        public void Incr() =&gt; _foo++;
    }
    [Conditional("VERBOSE")]
    unsafe static void ShowAddress(ref this MutableRefStruct val, string name,
        [CallerMemberName] string caller = null)
    {
        fixed(void* ptr = &amp;val)
        {
            var addr = new IntPtr(ptr).ToInt64();
            Console.WriteLine($"{caller}: {name}\t0x{Convert.ToString(addr,16).PadLeft(8,'0')}");
        }
    }
    static void Example1(ref this MutableRefStruct val) // works fine
    {
        ShowAddress(ref val,nameof(val));
        var localCopy = val; // snapshot for rollback (there are reasons)
        ShowAddress(ref localCopy, nameof(localCopy));
        localCopy.Incr();
        val = localCopy; // ldarg0, ldloc0, stobj
    }
    static void Example2(ref this MutableRefStruct val, out int arg) // called incorrectly
    {
        ShowAddress(ref val, nameof(val));
        var localCopy = val; // snapshot for rollback (there are reasons)
        ShowAddress(ref localCopy, nameof(localCopy));
        localCopy.Incr();
        arg = localCopy.Foo;
        val = localCopy; // ldarg0, ldloc0, stobj
    }
    static void Main()
    {
        var obj = new MutableRefStruct(42);
        Console.WriteLine(obj.Foo); // expect 42, get 42

        // ldloca.s struct2
        // call void PossibleCompilerBug::Example1(valuetype PossibleCompilerBug / MutableRefStruct &amp;)
        obj.Example1();
        Console.WriteLine(obj.Foo); // expect 43, get 43
        
        // ldloc.0 &lt;=============== problem here; this should be ldloca[.s]
        // ldloca.s num
        // call void PossibleCompilerBug::Example2(valuetype PossibleCompilerBug / MutableRefStruct &amp;, int32 &amp;)
        obj.Example2(out _); // boom!
        Console.WriteLine(obj.Foo); // expect 44
    }
}

 
Just to be explicit, the locals table is:


    .locals init (
           [0] valuetype PossibleJitBug/MutableRefStruct struct2,
           [1] int32 num
    )
`</Code>
    <Description>csc: 2.6.0.62405 (4939752b)
dotnet: 2.1.2

Expected behaviour: code works and outputs 42/43/44

Alternative acceptable behaviour: if the scenario is not allowed for some reason, a compiler error is generated and the code does not compile.

Actual behaviour: NRE due to invalid IL in call; problematic IL is shown with `&lt;=====`

Workaround: use `return` (possibly with value-tuples) instead of `out`

``

(so `ldloc.0` is definitely not itself a `ref` address)

 
  </Description>
  </Issue>
  <Issue>
    <IssueID>24013</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ryzngard</FixedById>
        <IssueID>24013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find All References doesn't work in a netstandard2.0 / net47 project combination</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>21/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>24013</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
// netstandard2.0 target framework, Microsoft.NET.Sdk
public interface IFoo { void Foo(); }
// net47 target framework, Microsoft.NET.Sdk.Web
interface IBar { void Bar(); }
class FooBar : IFoo, IBar
{
    public void Foo() { }
    public void Bar() { }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio 15.5

**Steps to Reproduce**:
I have a `netstandard2.0` library and a `net47` project referencing that library
``
Now run Find All References on both `Foo` and `Bar` methods (or look at CodeLense)

**Expected Behavior**:

Both `Foo()` and `Bar()` should show references back and forth.

**Actual Behavior**:

Only `Bar()` from within the `net47` project itself has a reference:
![image](

When I change the `netstandard2.0` library to `net47`, the reference for `Foo()` shows up as expected
</Description>
  </Issue>
  <Issue>
    <IssueID>24008</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature Request] Offer to capture a method/property that is repeatedly invoked in a local variable</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);
var semanticModel = await context.Document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);


Placing the cursor over `context.Document` and pressing Ctrl+. should yield a code fix like

cs
var document = context.Document;
// &lt;first location where context.Document is referenced in the method&gt;
...
var root = await document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);
var semanticModel = await document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);
`</Code>
    <Description>**Example scenario:**

``</Description>
  </Issue>
  <Issue>
    <IssueID>24007</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature Request] Offer autocompletion for members that have not been defined but have been invoked</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>24007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
void Foo()
{
    Foobar();
}

void F[|]


cs
int foo = new Bar().Foobar;

class Bar
{
    public int F[|]
}
`</Code>
    <Description>**Scenarios:**

``

It would be nice if `Foobar` appeared in the editor completion list for both of these cases. It's pretty common for people to write out the invocation of the method before they actually define it.</Description>
  </Issue>
  <Issue>
    <IssueID>24006</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>24006</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null reference exception on shutdown VS with Interactive window executing</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>26/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>24006</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingIDE</Name>
        <IssueID>24006</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>24006</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.UIThread[[Microsoft.VisualStudio.Text.Span,_Microsoft.VisualStudio.Text.Data]]
at Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteLine in InteractiveWindow.cs
at Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowWriter.WriteLine in OutputWriter.cs
at mscorlib.ni!System.IO.TextWriter.WriteLine in textwriter.cs
at Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.ReportProcessExited in InteractiveHost.cs
at Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.OnProcessExited in InteractiveHost.cs
at Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost+RemoteService+__c__DisplayClass8_0 in InteractiveHost.RemoteService.cs
`</Code>
    <Description>From VSO: 514822
``</Description>
  </Issue>
  <Issue>
    <IssueID>24005</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB.NET Object initialization can be simplified (IDE0017) bulb not working</Title>
    <CreatedDate>03/01/2018</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2017 - 15.5.2

**Steps to Reproduce**:

1. In any VB.NET project, consider the following code:
``

**Expected Behavior**: Show quick action bulb for "Object initialization can be simplified" in the `Dim c = New Customer()` line.

**Actual Behavior**: Neither suggestion (dots under `New` keyword) nor ctrl+. shows the quick action bulb.

**Note 1**: I tried to turn off and on the "Prefer object initializer" setting in the Tools/Options/Text Editor/Basic/Code Style/General.

**Note 2**: This problem does not manifest in a C# project (works as expected).</Description>
  </Issue>
  <Issue>
    <IssueID>24004</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# compiler only: does not produce complete metadata for optional `DateTime` parameter with default value `default(DateTime)`</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>24004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
   public class SomeType
   {
       public void Method(DateTime timestamp = default(DateTime)) { }
   }

   class Program
   {
       static void Main()
       {
           var parameter = typeof(SomeType).GetMethod("Method").GetParameters()[0];
           System.Diagnostics.Debug.Assert(object.Equals(parameter.DefaultValue, default(DateTime)));
           // Accessing `parameter.DefaultValue` will throw:
           // System.FormatException : Encountered an invalid type for a default value.
       }
   }
   

2.  To back up the claim that this is a problem with the C# compiler, let's do the same in VB.NET. Compile and run the following VB.NET program, which is equivalent to the above C# program. Note that there will be no runtime errors.

   vb
   Public Class SomeType
       Public Sub Method(Optional timestamp As DateTime = Nothing)
       End Sub
   End Class

   Module Program
       Sub Main()
           Dim parameter = GetType(SomeType).GetMethod("Method").GetParameters()(0)
           System.Diagnostics.Debug.Assert(parameter.DefaultValue = DirectCast(Nothing, DateTime))
           ' This should work just fine.
       End Sub
   End Module
   

I'm providing a solution containing xUnit.NET tests demonstrating the same problem in some more detail: 
[DateTimeBug.zip](https://github.com/dotnet/roslyn/files/1598858/DateTimeBug.zip)

### Expected Behavior:

Both the C# program and the equivalent VB.NET program should terminate without producing any error.

Alternatively, if C# does not actually support this scenario, i. e. `default(DateTime)` as a compile-time constant, it should produce a compile-time error.

### Actual Behavior:

Both programs compile without any errors or warnigns, but the C# program throws a `System.FormatException` with message _"Encountered an invalid type for a default value"_.

### Apparent cause:

The C# compiler does not emit a `[DateTimeConstant]` custom attribute placed on the optional method parameter like the VB.NET compiler does. Instead, it sets the default value to the `nullref` constant (like it would for any other value type). The framework (`ParameterInfo.DefaultValue`) probably doesn't expect this for `DateTime` (it expects to find the default value in a custom attribute; when `MdConstant.GetValue` retrieves a null reference from metadata for `DateTime`, it'll throw, see [here]( https://referencesource.microsoft.com/#mscorlib/system/reflection/parameterinfo.cs,617) and [here]( https://referencesource.microsoft.com/#mscorlib/system/reflection/mdconstant.cs,81) in the .NET Framework reference source).

Here's the IL metadata output (as reported by ILDASM) for the above two programs:


// IL output produced by the C# compiler:
.method public hidebysig instance void  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed
{
  .param [1] = nullref
  // ...
}



// IL output produced by the VB.NET compiler:
.method public instance bool  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed
{
  .param [1]
  .custom instance void [mscorlib]System.Runtime.CompilerServices.DateTimeConstantAttribute::.ctor(int64) = ( 01 00 00 00 00 00 00 00 00 00 00 00 ) 
  // ...
}
`</Code>
    <Description>### Version Used:
Visual Studio 15.5.2

### Steps to Reproduce:

1. Compile and run the following C# program. Note that there will be a runtime error:

   ``

  </Description>
  </Issue>
  <Issue>
    <IssueID>24003</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntroduceVariableCodeRefactoringProvider error</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>24003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>24003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>24003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.AggregateException : One or more errors occurred. ---&gt; Unexpected Null
   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)
   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.&lt;&gt;c__DisplayClass18_0.&lt;InvokeCore&gt;b__0()
   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)
---&gt; (Inner Exception #0) System.InvalidOperationException : Unexpected Null
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value,String message)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.InitializeOpenBuffers(SnapshotSpan triggerSpan)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession..ctor(InlineRenameService renameService,Workspace workspace,SnapshotSpan triggerSpan,IInlineRenameInfo renameInfo,IWaitIndicator waitIndicator,ITextBufferAssociatedViewService textBufferAssociatedViewService,ITextBufferFactoryService textBufferFactoryService,IEnumerable`1 refactorNotifyServices,IAsynchronousOperationListener asyncListener)
   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.StartInlineSession(Document document,TextSpan textSpan,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.TryNavigateToLocationOrStartRenameSession(Workspace workspace,Solution oldSolution,Solution newSolution,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Editor.Implementation.CodeActions.CodeActionEditHandlerService.ApplyAsync(&lt;Unknown Parameters&gt;)&lt;---


**Version Used**: Visual Studio 15.5.2

**Steps to Reproduce**:

1. In this piece of code
 C#
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "8"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "useAggregate"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "aggregationLevel"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1809:Avoid Excessive Locals")]
        [System.Web.Mvc.HttpPost]
        public virtual async Task&lt;JsonResult&gt; GetPerimetersList([FromUri]AggregationLevel aggregationLevel, [FromUri]int? universeId, [FromUri]string fromPage, [FromUri]int? status, [FromUri]bool? useAggregate, [FromBody]string textFilter, [FromUri]IList&lt;int&gt; scopeId, [FromUri]bool? autoLoaded, [FromUri]ThirdPartyDataModel thirdPartyDataModel, [FromBody]FilterForAxis filterForAxis, [FromUri] int? refresh, [FromUri] int? timeLevel, [FromUri] bool? stacked, [FromUri] bool? navigation)
        {
            string message = null;
            string messagethir = null;
            string email = User.Identity.Name;
            User user = await UserService.FindUserByEmailAsync(email);
            var universe = new Universe();

            switch (fromPage)
            {
                case "Reliability":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeReliability, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "History":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeHistory, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Enrichments":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeEnrichments, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Consensus":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeConsensus, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                case "Stability":
                    LoggerHelper.AddDataLogHistory(email, TenancyMapping.CustomerName, ActionList.SetScopeStability, await UserService.GetAbsorbentProfileAsync(email));
                    break;
                default:
                    break;
            }

            // TODO: Use StringBuilder
            if (status == null)
            {
                message += $"{fromPage}/All";
                messagethir += $"{fromPage}/All";
            }
            if (status == 2)
            {
                message += $"{fromPage}/ToValidate";
                messagethir += $"{fromPage}/ToValidate";
            }
            if (status == 3)
            {
                message += $"{fromPage}/NotTreated";
                messagethir += $"{fromPage}/NotTreated";
            }
            if (status == 4)
            {
                message += $"{fromPage}/Validated";
                messagethir += $"{fromPage}/Validated";
            }
            //For Simulation
            if (status == 1)
            {
                message += $"{fromPage}/All";
                messagethir += $"{fromPage}/All";
            }
            if (status == 5)
            {
                message += $"{fromPage}/Configured";
                messagethir += $"{fromPage}/Configured";
            }
            if (status == 6)
            {
                message += $"{fromPage}/ToConfigure";
                messagethir += $"{fromPage}/ToConfigure";
            }
            //For Universe
            if (useAggregate == true)
            {
                message += " NoUniverse"; //you have to add the new Perimeter
                messagethir += " NoUniverse";
            }
            if (universeId != null)
            {
                message += " UniverseId:" + universeId;
                messagethir += " WithUniverse";
            }
            if (!string.IsNullOrEmpty(textFilter))
            {
                message += " Filter:" + textFilter;
            }

            //refresh universeScope
            if (universeId &gt; 0)
            {
                universe = await UserService.GetUniverseAsync((int)universeId);
                if (refresh &gt; 0)
                {
                    await UserService.RefreshUniverseAsync(universe);
                }
                //refresh current unit &amp;&amp; currency
                user.CurrentUnit = universe.DefaultUnit;
                user.CurrentCurrency = universe.Currency;
                await UserService.EditUserAsync(user);
            }

            ColibriPage page = GetCurrentColibriPage(fromPage);
            IList&lt;AsideMenuPerimeter&gt; asideMenuPerimeter = new List&lt;AsideMenuPerimeter&gt;();
            //IDictionary&lt;PerimeterFilter, int&gt; counted = new Dictionary&lt;PerimeterFilter, int&gt;();
            IList&lt;ColibriScope&gt; scopes = new List&lt;ColibriScope&gt;();
            //IList&lt;object&gt; perimetersCounted = new List&lt;object&gt;();
            string description = string.Empty;
            var userUniverses = await UserService.GetAvailableUniversesAsync(user, page, false); // UserService.GetUniverses(user);
            var isOwner = false;
            var selectedUniverse = 0;
            bool isSku = false;
            bool isThirdPartyData = false;
            string format = "MMM yy";
            int dateLevel = (timeLevel == null) ? 3 : (int)timeLevel; // Default value is 3 (for Month)
            double? highChartTicks = null; // Default value is 3 (for Month)
            bool fromNavigation = navigation ?? false;
            if ((userUniverses.Any()
             &amp;&amp; ((universeId != null &amp;&amp; !(useAggregate ?? false))
             || (!(useAggregate ?? false) &amp;&amp; scopeId == null)))
             || (fromNavigation &amp;&amp; !(useAggregate ?? false)))
            {
                selectedUniverse = universeId ?? userUniverses.First().UniverseId;

                isOwner = userUniverses.Any(u =&gt; u.UniverseId == selectedUniverse);

                universe = await UserService.GetUniverseAsync(selectedUniverse);
                //refresh current unit &amp;&amp; currency
                if (selectedUniverse != universeId)
                {
                    user.CurrentUnit = universe.DefaultUnit;
                    user.CurrentCurrency = universe.Currency;
                    await UserService.EditUserAsync(user);
                }

                if ((universe.Axis1Level &lt;= 1 || universe.Axis1Level == null) &amp;&amp;
                    (universe.Axis2Level &lt;= 1 || universe.Axis2Level == null) &amp;&amp;
                    (universe.Axis3Level == 1 || universe.Axis3Level == null) &amp;&amp;
                    (universe.Axis4Level == 1 || universe.Axis4Level == null))
                {
                    isSku = true;
                }
                if (universe.Axis1Level != null)
                {
                    message += " AxisLevels:" + universe.Axis1Level;
                }
                if (universe.Axis2Level != null)
                {
                    message += "/" + universe.Axis2Level;
                }
                if (universe.Axis3Level != null)
                {
                    message += "/" + universe.Axis3Level;
                }
                if (universe.Axis4Level != null)
                {
                    message += "/" + universe.Axis4Level;
                }

                isThirdPartyData = universe.ThirdPartyDataDescription.Any();

                if (universe.TimeLevel != null)
                {
                    if (timeLevel == null)
                    {
                        dateLevel = universe.TimeLevel.Value;
                    }
                    format = await TimeLevelService.GetTimeFormatByLevelAsync(dateLevel);
                    highChartTicks = await TimeLevelService.GetHighChartsTicksByLevelAsync(dateLevel);
                }
                description = universe.Description ?? string.Empty;
                description = description.Replace("\n", "&lt;br/&gt;");
                if (isOwner || scopeId != null)
                {
                    int firstScope = 0;
                    if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                    {
                        firstScope = scopeId[0];
                    }
                    if (isOwner)
                    {
                        var scopeOfUniverse = await PerimeterService.GetScopeOfUniverseAsync(user,
                            selectedUniverse, textFilter, status ?? 1, fromPage,
                            TenancyMapping.ConnectionString);
                        if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                        {
                            scopes = scopeOfUniverse.Where(s =&gt; !scopeId.Contains(s.ScopeId))
                                                    .ToList();
                        }
                        else
                        {
                            scopes = scopeOfUniverse.ToList();
                        }
                    }

                    if (await UserService.CheckAuthorizationAsync(user, firstScope, fromPage != "Enrichments"))
                    {
                        if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
                        {
                            for (int i = 0; i &lt; scopeId.Count(); i++)
                            {
                                var scope = scopeId[i];
                                ColibriScope oneScope = await PerimeterService.GetOneScopeAsync(scope, TenancyMapping.ConnectionString);
                                if (oneScope != null)
                                {
                                    scopes.Insert(0, oneScope);
                                    //scopes.Add(oneScope);

                                }
                            }
                            //scopes = scopes.Reverse().ToList();
                        }
                    }
                }
            }
            else if (scopeId != null)
            // &amp;&amp; !fromNavigation)
            {
                description = "Notification view";
                foreach (int scId in scopeId)
                {
                    if (await UserService.CheckAuthorizationAsync(user, scId, fromPage != "Enrichments"))
                    {
                        ColibriScope oneScope = await PerimeterService.GetOneScopeAsync(scId, TenancyMapping.ConnectionString);
                        if (oneScope != null)
                        {
                            scopes.Add(oneScope);
                        }
                    }
                }
            }
            else if ((useAggregate ?? false) &amp;&amp; aggregationLevel != null)
            {
                description = "Aggregation view";
                /*if (!UserService.IsUserInProfile(user.Email, ColibriProfile.SenorForecaster))
                {
                    IList&lt;int&gt; minLevels = UserService.GetAccreditationsMinLevels(user, fromPage);
                    if (aggregationLevel.Axis1Level != 0) { aggregationLevel.Axis1Level += minLevels[0] - 1; }
                    if (aggregationLevel.Axis2Level != 0) { aggregationLevel.Axis2Level += minLevels[1] - 1; }
                    if (aggregationLevel.Axis3Level != 0) { aggregationLevel.Axis3Level += minLevels[2] - 1; }
                    if (aggregationLevel.Axis4Level != 0) { aggregationLevel.Axis4Level += minLevels[3] - 1; }
                }*/
                if (aggregationLevel.Axis1Level &lt;= 1 &amp;&amp; aggregationLevel.Axis2Level &lt;= 1 &amp;&amp;
                    aggregationLevel.Axis3Level &lt;= 1 &amp;&amp; aggregationLevel.Axis1Level &lt;= 1)
                {
                    isSku = true;
                }

                // TODO: Use StringBuilder
                if (aggregationLevel.Axis1Level != 0)
                {
                    message += " AggregationLevels:" + aggregationLevel.Axis1Level;
                }
                if (aggregationLevel.Axis2Level != 0)
                {
                    message += "/" + aggregationLevel.Axis2Level;
                }
                if (aggregationLevel.Axis3Level != 0)
                {
                    message += "/" + aggregationLevel.Axis3Level;
                }
                if (aggregationLevel.Axis4Level != 0)
                {
                    message += "/" + aggregationLevel.Axis4Level;
                }

                //counted = PerimeterService.CountAggregatePerimetersForEachStatus(user, aggregationLevel, string.Empty, (PerimeterFilter)(status ?? 1), fromPage, TenancyMapping.ConnectionString);
                scopes = await PerimeterService.GetAggregateScopeOfUniverseAsync(user, aggregationLevel, textFilter, (PerimeterFilter)(status ?? 1), fromPage, TenancyMapping.ConnectionString, filterForAxis);
            }
            string messagesec = null;
            messagesec += fromPage;

            if (autoLoaded == null || autoLoaded == false)
            {
                LoggerHelper.AddLogNoAggregation(TenancyMapping.CustomerName, messagethir, HttpContext.User.Identity.Name);
            }
            LoggerHelper.BusinessLogger.Info($"[{TenancyMapping.CustomerName}]: {User.Identity.Name}, {DateTime.Now}, Context: {message}");
            //foreach (var count in counted)
            //{
            //    perimetersCounted.Add(new
            //    {
            //        key = count.Key.ToString(),
            //        value = count.Value
            //    });
            //}

            var targetHash = string.Empty;
            var itemId = 0;

            foreach (var scope in scopes)
            {
                var codes = ScopeHelper.GetAxisCodes(scope);
                var url = string.Empty;
                for (int i = 0; i &lt; codes.Count - 1; i++)
                {
                    url += codes[i] + "_";
                }
                url += codes[codes.Count - 1];

                asideMenuPerimeter.Add(new AsideMenuPerimeter
                {
                    Disabled = false,
                    UniverseId = selectedUniverse,
                    ScopeId = scope.ScopeId,
                    HasConfiguration = fromPage == "Simulation" &amp;&amp; await ForecastService.FindForecastConfigurationAsync(scope.ScopeId, universeId ?? 0, false) != null,
                    Label = ScopeHelper.GetScopeRepresentation(scope, ", "),
                    SeparetedLabels = ScopeHelper.GetScopeRepresentation(scope, "&lt;%&gt; "),
                    PerimeterIds = ScopeHelper.GetAxisIds(scope),
                    PerimeterCodes = codes,
                    UrlEncode = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture),
                    Status = scope.Status,
                    ItemId = itemId,
                });
                itemId++;

                /*if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scope.ScopeId == scopeId[0])
                {
                    targetHash = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);

                }*/
                if (fromNavigation &amp;&amp; (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scopeId.Contains(scope.ScopeId)))
                {
                    targetHash += HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);
                    targetHash += '&amp;';
                }
                else if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0 &amp;&amp; scope.ScopeId == scopeId[scopeId.Count() - 1])
                {
                    targetHash = HttpUtility.UrlEncode(url).ToUpper(CultureInfo.CurrentCulture);
                }

            }
            ScopeIdList scopeList = new ScopeIdList();
            if (scopeId != null &amp;&amp; scopeId.Count() &gt; 0)
            {
                var selectedScopesName = asideMenuPerimeter.Where(amp =&gt; scopeId.Contains(amp.ScopeId)).Select(amp =&gt; amp.Label).ToList();
                var selectedScopesCode = asideMenuPerimeter.Where(amp =&gt; scopeId.Contains(amp.ScopeId)).Select(amp =&gt; '#' + amp.UrlEncode).ToList();
                scopeList.ScopeIds = scopeId;
                scopeList.ScopeNames = selectedScopesName;
                scopeList.ScopeCodes = selectedScopesCode;

            }
            for (int i = 0; i &lt; asideMenuPerimeter.Count; i++)
            {
                for (int j = 0; j &lt; asideMenuPerimeter[i].PerimeterCodes.Count; j++)
                {
                    asideMenuPerimeter[i].PerimeterCodes[j] = asideMenuPerimeter[i].PerimeterCodes[j].Replace("\"", "'");
                }
            }

            ViewBag.FromPage = fromPage;
            List&lt;double&gt; timeIds = new List&lt;double&gt;();
            if (fromPage == "ThirdPartyData")
            {
                var startDate = new DateTime(thirdPartyDataModel.StartTime.Ticks);
                if (startDate == new DateTime(1, 1, 1))
                {
                    startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                }
                for (var i = 0; i &lt; thirdPartyDataModel.ThirdPartyDataDuration; i++)
                {
                    timeIds.Add(DateHelper.CreateTimestamp(startDate.AddMonths(i)));
                }
            }

            //var axisInformation = PerimeterService.GetAxisHierarchy(user, TenancyMapping.ConnectionString, aggregationLevel, PerimeterCacheService.FindPerimeters(TenancyMapping.CustomerName));
            // TODO: Fix when default unit is null
            UnitConfiguration unitConfiguration = (await SettingsService.GetUnitByIdAsync((int)universe.DefaultUnit));
            // TODO: Fix when currency is null
            ExchangeRate exchangeRate = (await SettingsService.GetExchangeRateByIdAsync((int)universe.Currency));
            return new JsonResult()
            {
                Data = new AsideMenuPerimeterModel
                {
                    Perimeters = asideMenuPerimeter,
                    SelectedUniverse = selectedUniverse,
                    UniverseOwner = isOwner,
                    IsSku = isSku,
                    //AxisInformation = axisInformation,
                    IsThirdPartyData = isThirdPartyData,
                    DateFormat = format,
                    DateLevel = dateLevel,
                    HighChartTicks = highChartTicks,
                    Description = "&lt;strong&gt;Description : &lt;/strong&gt;&lt;br/&gt;" + description,
                    TargetHash = targetHash,
                    TimeIds = timeIds,
                    SelectedScope = scopeList,
                    Stacked = stacked,
                    // SelectedScopeIds = scopeId,
                    //Scopes = scopes,
                    DefaultUnit = selectedUniverse == 0 ? 0 : (await UserService.GetUniverseAsync(selectedUniverse)).DefaultUnit ?? 0,
                    DefaultUnitCurrencyUniverse = universe.DefaultUnit != null
                        ? unitConfiguration.Name
                        : universe.Currency != null
                            ? exchangeRate.Label
                            : universe.UniverseId == 0
                                ? UnitHelper.GetDefaultUnitName(user,
                                    await SettingsService.GetAllUnitsConfigurationAsync(),
                                    await SettingsService.GetAllExchangeRateAsync())
                                : Resources.Resource.Quantity,
                    UnitCurrencyUniverseId = universe.DefaultUnit != null
                        ? "Unit-" + unitConfiguration.UnitRow.ToString(CultureInfo.CurrentCulture)
                        : universe.Currency != null
                            ? "Currency-" + exchangeRate.CurrencyId
                            : universe.UniverseId == 0
                                ? UnitHelper.GetDefaultUnitValue(user)
                                : "Unit-0",

                },
                MaxJsonLength = int.MaxValue,
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
            };
        }
`</Code>
    <Description>``

2. When I select `(useAggregate ?? false)` and try to introduce local for all occurrences
3. It fails and disables this refactoring

**Expected Behavior**:
Local variable introduced successfully

**Actual Behavior**:
Local variable is created but I cannot rename it
</Description>
  </Issue>
  <Issue>
    <IssueID>24001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue with RCS1163, unused parameter...</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>02/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>24001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>.net 4.0, c# 7.2 Roslynator 1.6.10

The following line of code produces RCS1163, Unused parameter (list).  I believe this to be an error as 'list' is required for this lambda expression.

`    
lReasons = lReasons.OrderBy(list =&gt; ranDom.Next()).ToList();
`
</Description>
  </Issue>
  <Issue>
    <IssueID>24000</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.Net.Compilers langversion not passed to csc.exe by MSBuild</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>24000</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS 2017 15.5.2
VSTS current version

1. Create any C# app
2. Use a C# 7.1 or 7.2 feature 
3. Add Microsoft.Net.Compilers 4.6.1
4. Set the advanced build settings to use the appropriate version of C#

Build locally builds fine
Check in to VSTS and build using hosted build server fails.

See: </Description>
  </Issue>
  <Issue>
    <IssueID>23998</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>23998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unable to resolve .NETFRameWork reference in .NETCore solution</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>23998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>23998</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @shishirsasal on December 26, 2017 18:40_## Steps to reproduce
1. Download roslyn - 
2. Trying to build the whole solution

## Expected  behavior
Build successful

## Actual behavior
Throws error
Error	MSB3644	The reference assemblies for framework ".NETFramework,Version=v4.6.1" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.	CSharpCodeStyleTests	C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets	1122	

## Environment data
Have installed .NETCore 2.0 SDK
Have installed .NETFramework4.6,.NETFramework4.6.1

NOTE: All other projects are referring .NETFrameWork 4.6.1 except the one shown in below attachment

![gitissue](




_Copied from original issue: dotnet/cli#8295_</Description>
  </Issue>
  <Issue>
    <IssueID>23997</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add an API to convert DebugType strings to DebugInformationFormat</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>23997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>23997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>23997</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Mvc does runtime compilation which involves reading [`DependencyContext`]( and builds `ParseOptions`, `CSharpCompilationOptions` etc from it. We recently added support for adding reading the `DebugType` and constructing an `EmitOptions` with the right `DebugInformationFormat` from it. Unlike some of the other enum types which have a string -&gt; type converters (e.g. `LanguageVersionFacts`), parsing `DebugType` is buried inside [`CSharpCommandLineParser`]( I couldn't find any other callable pieces of code that do this and ended up effectively copying the block of code. It would nice if this is an exposed as a callable API instead.</Description>
  </Issue>
  <Issue>
    <IssueID>23996</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unlike lambdas, local functions do not capture scripting globals</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public static class Program
{
    public sealed class Globals
    {
        public int SomeGlobal =&gt; 42;
    }

    public static async Task Main()
    {
        // Works– global captured by lambda
        var script = "var lambda = new System.Action(() =&gt; { _ = SomeGlobal; });";

        // Does not work– global captured by local function declared inside lambda
        var script = "var lambda = new System.Action(() =&gt; { void LocalFunction() { _ = SomeGlobal; } });";

        // Does not work– global captured by local function declared inside method
        var script = "void Method() { void LocalFunction() { _ = SomeGlobal; } }";

        // Works– global captured by lambda declared inside lambda
        var script = "var lambda = new System.Action(() =&gt; { var innerLambda = new System.Action(() =&gt; { _ = SomeGlobal; }); });";

        await CSharpScript.RunAsync(script, globals: new Globals());
    }
}
`</Code>
    <Description>There are workarounds but they are irritating during what should be simple refactors. I use Roslyn Scripting the most via Cake. This issue seems to be with Roslyn itself (2.6.1).

``

**Expected:**

Local functions capture the global; all examples run successfully.

**Actual:**

&gt; Microsoft.CodeAnalysis.Scripting.CompilationErrorException: '(1,44): error CS0120: An object reference is required for the non-static field, method, or property 'Program.Globals.SomeGlobal''

If this is according to the spec, please make it a feature request. I don't see any reason why local functions should fail to capture globals.</Description>
  </Issue>
  <Issue>
    <IssueID>23995</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Conversion of a stackalloc expression</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>23995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>23995</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

unsafe class X
{
	public static void Main ()
	{
		int* stackSpan = (int*) stackalloc int[100];
	}
}


**Expected Behavior**:

C# 7.2 allows stackallow casts (don't really know why) but it now reports an odd error message when the casts are used with pre-7.2 only supported pointer types.

**Actual Behavior**:

error CS8346: Conversion of a stackalloc expression of type 'int' to type 'int*' is not possible`</Code>
    <Description>**Version Used**: 2.6.0.62309 (d3f6b8e7)

**Steps to Reproduce**:

Compile following 

``
</Description>
  </Issue>
  <Issue>
    <IssueID>23991</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>BadImageFormatException with Empty `params void *[]`</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

namespace Bug {
    unsafe class Program {
        static void MyMethod(params void *[]args) {
        }

        static void Main(string[] args) {
            MyMethod();
        }
    }
}


$ dotnet run

Unhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.
 (Exception from HRESULT: 0x8007000B)


However, if it is changed to `MyMethod(null);` or `MyMethod(new void *[0]);`, then it works and does not throw the exception.


$ dotnet --version
2.1.3
$ uname -a
Linux zach-ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux


Also, it does not work with the docker container `microsoft/dotnet:latest` (`3a346648c95a` at the time).

$ docker run --rm -it microsoft/dotnet
root@0dc51089b44c:/# mkdir code
root@0dc51089b44c:/# cd code
root@0dc51089b44c:/code# cat &lt;&lt;EOF &gt; Program.cs
&gt; using System;
&gt; 
&gt; namespace Bug {
&gt;     unsafe class Program {
&gt;         static void MyMethod(params void *[]args) {
&gt;         }
&gt; 
&gt;         static void Main(string[] args) {
&gt;             MyMethod();
&gt;         }
&gt;     }
&gt; }
&gt; EOF
root@0dc51089b44c:/code# cat &lt;&lt;EOF &gt; code.csproj 
&gt; &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
&gt;     &lt;PropertyGroup&gt;
&gt;         &lt;OutputType&gt;Exe&lt;/OutputType&gt;
&gt;         &lt;TargetFramework&gt;netcoreapp1.1.2&lt;/TargetFramework&gt;
&gt;         &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;
&gt;     &lt;/PropertyGroup&gt;
&gt; &lt;/Project&gt;
&gt; EOF
root@0dc51089b44c:/code# dotnet restore
  Restoring packages for /code/code.csproj...
  Generating MSBuild file /code/obj/code.csproj.nuget.g.props.
  Generating MSBuild file /code/obj/code.csproj.nuget.g.targets.
  Writing lock file to disk. Path: /code/obj/project.assets.json
  Restore completed in 953.3 ms for /code/code.csproj.
  
  NuGet Config files used:
      /root/.nuget/NuGet/NuGet.Config
  
  Feeds used:
      https://api.nuget.org/v3/index.json
root@0dc51089b44c:/code# dotnet run

Unhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format.
 (Exception from HRESULT: 0x8007000B)
`</Code>
    <Description>_From @zachdeibert on January 1, 2018 18:48_When calling a method with a `params void *[]` in its signature and leaving that parameter blank (so it should be the same as `new void *[0]`), the runtime throws a `System.BadImageFormatException`.

``
I had to use 1.1.2 because that was the latest version the docker container had installed.  I used 2.0 in my first test._Copied from original issue: dotnet/coreclr#15679_</Description>
  </Issue>
  <Issue>
    <IssueID>23990</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler crashes with error -2146232797 when attempting to call non-static method as static method on ref struct.</Title>
    <CreatedDate>02/01/2018</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23990</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23990</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23990</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: C# 7.2 (Roslyn 2.4.0)

**Steps to Reproduce**:

The following code causes the compiler to crash when compiling:
``

**Expected Behavior**:
Should produce compiler error `Program.cs(14,21): error CS0120: An object reference is required for the non-static field, method, or property 'Test.Create()'`

**Actual Behavior**:
Compiler crashes with error `C:\Program Files\dotnet\sdk\2.1.2\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "csc.dll" exited with code -2146232797.`</Description>
  </Issue>
  <Issue>
    <IssueID>23988</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>PtrDiff between pointers generate DIV with 1</Title>
    <CreatedDate>01/01/2018</CreatedDate>
    <ClosedDate>12/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>23988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>23988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
IL_0000: nop
IL_0001: ldarg.0
IL_0002: ldarg.1
IL_0003: sub
IL_0004: ldc.i4.1
IL_0005: div
IL_0006: conv.i8
IL_0007: conv.u4
IL_0008: ldc.i4.1
IL_0009: shr.un
IL_000a: stloc.0
IL_000b: br.s IL_000d
IL_000d: ldloc.0
IL_000e: ret


ILSPY decompile this IL in C# in this way that makes no sense:

cs
private unsafe static int PtrDiff(char* a, char* b)
{
    return (int)((uint)((long)((a - b) / 1 * 2)) &gt;&gt; 1);
}
`</Code>
    <Description>**Version Used**: 
VS 15.5.2

**Steps to Reproduce**:
During our work in the Cosmos AOT compiler we had encountered this function used in UTF8Encoding class:


it seems that there is a problem in the optimization of this code as the IL generated is this:

``

That is not the hyper optimized code that this complicated casting wanted to obtain...

**Expected Behavior**:
No DIV by 1 should be present

**Actual Behavior**:
DIV by 1 is present
</Description>
  </Issue>
</Issues>