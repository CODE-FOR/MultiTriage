<Issues>
  <Issue>
    <IssueID>23734</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>23734</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VBCSCompiler hangs in CLI build</Title>
    <CreatedDate>12/12/2017</CreatedDate>
    <ClosedDate>19/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23734</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>PR is here: 

When I tried this branch locally on OSX, the first time we build something using the VBCSCompiler, it actually hangs. If I kill that process, then the build progresses until the next compilation, compiles but then hangs again.

You should be able to repro it by simply checking out that branch and running build.sh. I haven't tried on Windows yet.

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>23734</IssueID>
        <PullRequestID>23805</PullRequestID>
        <Title>Fix hang in compiler server</Title>
        <Description>### Customer scenario

The dotnet CLI has been seeing a hang from VBCSCompiler in their build
on non-Windows platforms. The cause is this:

    1. dotnet build starts a child process to do `dotnet pack` and
    redirects its output to a buffer.
    2. `dotnet pack` starts a child process to do `compile`.
    3. `compile` starts vbcscompiler because one is not already running.
    4. VBCSCompiler inherits the output handles from (1).
    5. VBCSCompiler process finishes and processes (1) and (2) exit.
    6. The parent `dotnet build` process  is waiting for (1) to exit,
    which it has, but also to see EOF on its output stream. Because that
    stream has been captured and held open by VBCSCompiler, the EOF
    never comes.
    7. `dotnet build` hangs.

This change fixes the problem by creating new streams for input and
output for the compiler server process. This isn't quite what we do on
Windows -- on Windows we create invalid handles for the input and output
-- but it's as close as we can get using the portable APIs in
System.Diagnostics.Process.

### Bugs this fixes

Fixes #23734

### Workarounds, if any

Disable the compiler server.

### Risk

The change is only for the compiler server on non-Windows platforms and changes the process start code to as closely match the Windows version as possible.

### Performance impact

None, just changing some perf-irrelevent process start options.

### Is this a regression from a previous update?

No.

### Root cause analysis

This bug needs multiple intermediate dotnet processes to appear. I haven't been able to repro this in a unit test yet, but I have done manually testing with the CLI.

### How was the bug found?

Found in CLI build
</Description>
        <CreatedDate>15/12/2017</CreatedDate>
        <ClosedDate>19/12/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>23734</IssueID>
            <PullRequestID>23805</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>23734</IssueID>
            <PullRequestID>23805</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>23730</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Deduplicate Find All References results in multi-targeting projects</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
the version shipped in 15.4.3

**Steps to Reproduce**:

1. Have an SDK-style project that multitargets, e.g. `&lt;TargetFrameworks&gt;net461;netstandard1.5&lt;/TargetFrameworks&gt;`
2. FAR on any symbol from that project

**Expected Behavior**:
Fully identical occurrences should be unified (deduplicated).

**Actual Behavior**:
I'm seeing every definition and reference twice and they're exactly the same location and everything.

![image](

This is a problem with cognitive load. You have double the information. FAR is a very commonly used tool and it needs to get out of the way as much as possible. Having every reference showing twice or more is just not helpful. When looking through the list I often build a mental map of all usages, classifying them and bucketizing by some criteria (aha, it can't be here, can't be here, this one is suspicious, this one we can ignore, etc. etc.)

The current structure makes that really complicated (I have to do twice the work).

Same problem in Navigate To:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>23729</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23729</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0037 codefix introduces extra space, breaks indentation alignment</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23729</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23729</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
   public class Class1
   {
       public void M()
       {
           var x = 23;
           Equals(null, new
           {
               x = x,
               y = 23,
           });
       }
   }
   
2. Execute the code fix

**Expected Behavior**:

The string of whitespace characters between the opening `{` and the first non-whitespace character (i.e., the identifier itself) remains the same as before. This would preserve the “normal” indent that existed prior to executing the code fix and avoids changing the alignment of the variable wrt neighbors.

csharp
public class Class1
{
    public void M()
    {
        var x = 23;
        Equals(null, new
        {
            x,
            y = 23,
        });
    }
}


**Actual Behavior**:

There is an additional ` ` (space, I haven’t verified, it looks like space) character between the opening `{` and the first non-whitespace character after the `{`. The identifier is now out of alignment with neighbors.

csharp
public class Class1
{
    public void M()
    {
        var x = 23;
        Equals(null, new
        {
             x,
            y = 23,
        });
    }
}
`</Code>
    <Description>**Version Used**: 2.6.0.62329 (5429b35d) (Visual Studio 15.5.1 Community)

**Steps to Reproduce**:

1. Write an expression which triggers IDE0037. For example:
   ``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>23729</IssueID>
        <PullRequestID>22797</PullRequestID>
        <Title>UseInferredMemberNamed codefix show treat spaces as elastic</Title>
        <Description>**Customer scenario**

With language version 7.1, use the "simplify tuple name" feature to simplify the "a" member below:
``

**Bugs this fixes:**
Fixes 

**Workarounds, if any**
Format selection or document.

**Risk**
**Performance impact**
Low. This PR only affects this one refactoring.

**Is this a regression from a previous update?**
No.

**How was the bug found?**
Reported by customers.

@sharwell @rchande @dotnet/roslyn-ide for review. Also, please advise whether this should be considered for 15.5 or moved out to 15.later. Thanks</Description>
        <CreatedDate>20/10/2017</CreatedDate>
        <ClosedDate>27/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>23729</IssueID>
            <PullRequestID>22797</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>23729</IssueID>
            <PullRequestID>22797</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>22797</PullRequestID>
            <IssueID>23729</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>23725</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Call to extensions methods using dynamic keyword build time.</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 15.5

**Steps to Reproduce**:
1. Create an extension method for a specific type. (For 100 types with overloads for each types.)
2. Call the extension using dynamic (In other 100 class.)

**Expected Behavior**:
Build time should be 12 seconds.

**Actual Behavior**:
Build time goes from 12 seconds to 2 minutes.
VBCSCompiler take 100% of the CPU.
There is many line of code in the 100 classes that call the extension method.
If I comment the call to the extension using dynamic, build time goes back to 12 seconds.

</Description>
  </Issue>
  <Issue>
    <IssueID>23722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Checksum throws on Mono 64-bit</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0

The latest Roslyn release results in test failures in OmniSharp on Linux/OSX (failing build log: [omnisharp-build-log.txt]( that look so:

``

It appears that this is due to a struct layout padding issue on Mono 64-bit, which was found and "fixed" by  but not in master. This is currently blocking OmniSharp, and thus, VS Code from taking a new Roslyn and adding support for C# 7.2.</Description>
  </Issue>
  <Issue>
    <IssueID>23720</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio hangs when writing ref directly to getter. dotnet cli hangs too if try to build.</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>02/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23720</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Community 15.5.1
NET Core 2.0.3, NET Core SDK 2.1.2
**Steps to Reproduce**:

1. Create project 
2. Create class or struct
3. Write something like `int Property { ref get; set; }`
4. (if using dotnet cli) Try to dotnet build or run

**Expected Behavior**:
Visual Studio and dotnet cli reporting compile error
**Actual Behavior**:
Visual Studio and dotnet cli just freezes.

Also, can it be feature request to allow ref getter with value setter?
This would allow to easy change values in nested structs without using plain fields.</Description>
  </Issue>
  <Issue>
    <IssueID>23719</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Return this type for fluent API</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>23719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    public interface IMyClass
    {
        this SomeChange(int value);
    }

    public class MyClass : IMyClass
    {
        private int _value;
        public this SomeChange(int value)
        {
            _value = value;
        }
    }


To use:
csharp
    public class SomeClass
    {
        public IMyClass MyFirstClass =&gt; new MyClass().SomeChange(1);

        public IMyClass MySecondClass =&gt; new MyClass().SomeChange(2);
    }


Translate to this Code:
csharp
    public interface IMyClass
    {
        void SomeChange(int value);
    }

    public class MyClass : IMyClass
    {
        private int _value;
        public void SomeChange(int value)
        {
            _value = value;
        }
    }

    public class SomeClass
    {
        public IMyClass MyFirstClass 
        { 
            get 
            { 
               var myClass = new MyClass();
               myClass.SomeChange(1);
               return myClass;
            }
         }

         public IMyClass MySecondClass 
         { 
            get 
            { 
               var myClass = new MyClass();
               myClass.SomeChange(2);
               return myClass;
            }
         }
      }
`</Code>
    <Description>Hello, is it realistic to implement this [issue]( in NuGet package?
I want to write fluent API:
``

It's real?</Description>
  </Issue>
  <Issue>
    <IssueID>23717</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler crash when compiling an expression in a local function that accesses variables from higher scopes</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
void Foo()
{
    int bar = 0;
    {
        var baz = new int[0];
        Qux();

        void Qux()
        {
            baz.AsQueryable().Select(_ =&gt; bar);
        }
    }
}
`</Code>
    <Description>**Version Used**: 
Visual Studio Professional 2017 15.4.5

**Steps to Reproduce**:
Try to compile this code:
 ``

This is the most reduced version I've managed to create.
The bar variable has to come from a higher scope than where the local function lives.
Bar has to be used in an expression in a local function. The expression has to be connected to a variable in a different scope than bar.
The types of bar and baz don't matter.

**Expected Behavior**:
Code compiles normally.

**Actual Behavior**:
Compiler crashes: 
"csc.exe" exited with code -2146232797
</Description>
  </Issue>
  <Issue>
    <IssueID>23711</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Prefer "var" doesn't fire if you assign from a delegate field.</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>10/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](


``
</Description>
  </Issue>
  <Issue>
    <IssueID>23710</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add a way to enforce naming of type parameters</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It appears that [`applicable_kinds` doesn't have a concept of "type parameters"]( Please add this symbol so that we can enforce that type parameters begin with 'T'.</Description>
  </Issue>
  <Issue>
    <IssueID>23709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cannot refer to "private protected" in "applicable_accessibilities"</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>19/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>23709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Expected: Warning on the naming
Actual: No warning</Description>
  </Issue>
  <Issue>
    <IssueID>23708</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0039 false-positive in expression tree</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23708</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace RoslynSandbox
{
	public class Class1
	{
		public static void Foo()
		{
			Predicate&lt;object&gt; predicate = _ =&gt; true;
			GetFiltered&lt;object&gt;(o =&gt; predicate(o));
		}

		static IEnumerable&lt;T&gt; GetFiltered&lt;T&gt;(Expression&lt;Predicate&lt;T&gt;&gt; expression) =&gt; default;
	}
}


**Expected Behavior**:

The above code compiles with no error, warnings, or suggestions.

**Actual Behavior**:

Suggestion IDE0039 "Use local function" on line 11.

If I apply the suggested code fix, the code becomes:

cs
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace RoslynSandbox
{
	public class Class1
	{
		public static void Foo()
		{
			bool predicate(object _) =&gt; true;
			GetFiltered&lt;object&gt;(o =&gt; predicate(o));
		}

		static IEnumerable&lt;T&gt; GetFiltered&lt;T&gt;(Expression&lt;Predicate&lt;T&gt;&gt; expression) =&gt; default;
	}
}


This code does **not** compile, due to the following error:


error CS8110: An expression tree may not contain a reference to a local function
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio 2017 Enterprise v15.5

**Steps to Reproduce**:

1.  Load the following code into the editor:

``</Description>
  </Issue>
  <Issue>
    <IssueID>23705</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0007 false positive</Title>
    <CreatedDate>11/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class ClassName
{
    void Bar&lt;T&gt;(out T value)
    {
        Bar(out T value2); // IDE0007

        value = default(T);
    }
}
`</Code>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>23703</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Auto-formatting inserts space between `[]` and `?`</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>11/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Auto-formatting inserts a space between `[]` and `?` when typing a `;` after the declaration:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23702</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warning reported returning `null` from async `Task&lt;object?&gt;`</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23702</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`return null;` results in `warning: cannot convert null to non-nullable reference`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23701</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null warnings not reported for iterator methods</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>14/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23701</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`yield return null;` should generate `warning: cannot convert null to non-nullable reference`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23700</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Report error for `new C?()` when `C` is not a value type</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>05/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Report error for `new C?()` when `C` is not a value type.
</Description>
  </Issue>
  <Issue>
    <IssueID>23699</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cannot obtain symbol for type parameter of local function</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>23699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Foo
{
    void Bar()
    {
        void LocalFunction&lt;T&gt;(T parameter)
        {
        }
    }
}
`</Code>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:
``
I am unable to obtain symbol for `T` in type parameter list.

I can, however, obtain symbol for `T` in parameter.</Description>
  </Issue>
  <Issue>
    <IssueID>23698</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>23698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null warning not reported for constant member</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>09/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23698</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`const string A = null;` should generate `warning: cannot convert null to non-nullable reference`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chsienki</FixedById>
        <IssueID>23697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null warnings not reported for attribute arguments</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>14/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Nullable Reference Types</Name>
        <IssueID>23697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`[MyAttribute(null)]` should generate `warning: cannot convert null to non-nullable reference`:
``

Also: `new string[] { null }` in an attribute.</Description>
  </Issue>
  <Issue>
    <IssueID>23694</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisalStudioWorkspace's WorkspaceChanged is not called with SolutionAdded kind after full solution load</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>22/12/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
[ProvideAutoLoad(UIContextGuids80.SolutionExists)]
public class MyPacakge : Package
{}
`</Code>
    <Description>**Version Used**: 
Visual Studio 2017.5

**Steps to Reproduce**:

1. Develop "Package" using VS SDK
``
2. In "Initialize" method, Get "VisualStudioWorkspace" using GetService method of component model
3. Subscribe to VisualStudioWorkspace's WorkspaceChanged event

**Expected Behavior**:
WorkspaceChanged gets called by WorkspaceChangeKind.SolutionAdded kind after full solution load. This happens in VS2015.3 to VS2017.4

**Actual Behavior**:
WorkspaceChanged gets called several times with any kind such as ProjectAdded, DocumentAdded etc, but it is not called using SolutionAdded kind</Description>
  </Issue>
  <Issue>
    <IssueID>23692</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Passing this to an in parameter crashes</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23692</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

static class Ex
{
    public static void InMethod(in X arg) =&gt; Console.WriteLine(arg);
}

class X
{
    public void M()
    {
        // pass `this` by in-parameter.
        // `ldind.ref` is not emitted.
        // As a result, ExecutionEngineException is thrown.
        Ex.InMethod(this);
    }
}

class Program
{
    static void Main()
    {
        var x = new X();

        // No problem
        Ex.InMethod(x);

        // throws ExecutionEngineException
        x.M();
    }
}
`</Code>
    <Description>
Originally filed by @ufcpp on #23636

``</Description>
  </Issue>
  <Issue>
    <IssueID>23691</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>23691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Optional `in` parameters are passed by value</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>19/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

class Program
{
    static void Main()
    {
        // buffer overrun
        A(1);

        // throw NullReference or AccessViolation Exception
        B(1, 2);
    }

    static void A(in double x = 1, in string y = "") =&gt; Console.WriteLine(y);
    static double B(in float x, in float y, in float z = 1.0f) =&gt; x * y * z;

}
`</Code>
    <Description>Originally filed by @ufcpp on #23636

``</Description>
  </Issue>
  <Issue>
    <IssueID>23690</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Space no longer commits override</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>27/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23690</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.6.0 Preview 1

**Steps to Reproduce**:
``
Press space to commit preselected ToString() in the autocompletion list.

**Expected Behavior**: 
`public override string ToString() =&gt; base.ToString();` like in previous versions

**Actual Behavior**:
`public override string tos |`
</Description>
  </Issue>
  <Issue>
    <IssueID>23689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>23689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use in-parameter operator from different assembly</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>02/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    public struct DifferentAssembly
    {
        ....
        // by-val
        public static DifferentAssembly operator +(DifferentAssembly a, DifferentAssembly b)
        ....

        // by-ref-readonly
        public static DifferentAssembly operator *(in DifferentAssembly a, in DifferentAssembly b)
        ....
    }


2. Use it from another assembly

cs
            var a = new DifferentAssembly(....);
            var b = new DifferentAssembly(....);

            // pass by value. No error.
            Console.WriteLine(a + b);

            // pass by ref readonly.
            // No error in the Visual Studio C# Editor
            // but error on build.
            Console.WriteLine(a * b);
`</Code>
    <Description>**Version Used**: 

VS 15.5.0

**Steps to Reproduce**:



1. Write a struct with in-parameter operator in an assebmly

``

**Expected Behavior**:

successfully compiled

**Actual Behavior**:

There is no error in the Visual Studio C# Editor, but error on build.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>23688</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] How to check for uninitialized local variable symbol at position in syntax tree</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>22/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>23688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>23688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>23688</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
async Task M1Async()
{
    CancellationToken l1;
    await M2Async();
}

async Task M2Async(CancellationToken p1 = default) {}


and I have the `ILocalSymbol` corresponding to `l1`. I don't want to fire the analyzer and generate the fix `await M2Async(l1);` because `l1` is uninitialized. How do I check whether `l1` is initialized at a particular position in the syntax tree, in this case inside the expression `M2Async()`?

**edit:** I also want to handle cases when the `CancellationToken` is a parameter rather than a local that's uninitialized, e.g:

cs
async Task M1Async(out CancellationToken p1)
{
    await M2Async(); // Do not want to offer 'await M2Async(p1);' codefix here
}
`</Code>
    <Description>Suppose I have the following code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>23687</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] Why does IArgumentOperation.Type return null?</Title>
    <CreatedDate>10/12/2017</CreatedDate>
    <ClosedDate>10/12/2017</ClosedDate>
    <IssueLabels />
    <Description>I'm working on an IOperation-based analyzer for the roslyn-analyzers repo. I noticed while debugging that `argument.Type` where `argument` is an `IArgumentOperation` returns null, and I tracked it down to [this line]( which passes null to the Operation ctor. Is this intentional?</Description>
  </Issue>
  <Issue>
    <IssueID>23684</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>23684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consolidate 'remove unused local' fixer in Roslyn and Roslyn-analyzers</Title>
    <CreatedDate>09/12/2017</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23684</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See [Roslyn implementation]( and [Roslyn-Analyzers implementation]( Both of these fixer offer removal of unused local/variable.

Note: Fixer in Roslyn-analyzers also removes additional assignments to the variable, while the one in Roslyn just removes the declaration statement. We should port the fixer from roslyn-analyzers to roslyn.</Description>
  </Issue>
  <Issue>
    <IssueID>23681</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>mac_debug tests are failing due to skipping tests and not being able to find results</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>12/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23681</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/BasicCodeStyleTests/netcoreapp2.0/Microsoft.CodeAnalysis.VisualBasic.CodeStyle.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/CSharpCodeStyleTests/netcoreapp2.0/Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/CSharpCompilerSymbolTest/netcoreapp2.0/Roslyn.Compilers.CSharp.Symbol.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/CSharpCompilerSyntaxTest/netcoreapp2.0/Roslyn.Compilers.CSharp.Syntax.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/CSharpScriptingTest/netcoreapp2.0/Microsoft.CodeAnalysis.CSharp.Scripting.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/CodeStyleTests/netcoreapp2.0/Microsoft.CodeAnalysis.CodeStyle.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/ScriptingTest/netcoreapp2.0/Microsoft.CodeAnalysis.Scripting.UnitTests.dll
08:00:41 Skipping /Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug/Binaries/Debug/UnitTests/VBCSCompilerTests/netcoreapp2.0/Roslyn.Compilers.CompilerServer.UnitTests.dll
08:00:41 [xUnit] [INFO] - Starting to record.
08:00:41 [xUnit] [INFO] - Processing xUnit.Net-v2 (default)
08:00:41 [xUnit] [INFO] - [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern '**/xUnitResults/*.xml' relative to '/Users/dotnet-bot/j/workspace/dotnet_roslyn/master-vs-deps/mac_debug' for the testing framework 'xUnit.Net-v2 (default)'.  Did you enter a pattern relative to the correct directory?  Did you generate the result report(s) for 'xUnit.Net-v2 (default)'?
08:00:41 
[xUnit] [ERROR] - No test reports found for the metric 'xUnit.Net' with the resolved pattern '**/xUnitResults/*.xml'. Configuration error?.`</Code>
    <Description>The mac_debug tests in jenkins are failing constantly due to all of the tests being skipped and then not being able to find any results. 

One of the failures is linked here with an excerpt of the console log:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>23674</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Grammar.xml layout</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23674</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Why do the grammar.xml for C# and VB have different node names?
Could they be unified under a single format?
</Description>
  </Issue>
  <Issue>
    <IssueID>23672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>invalid IDE0028 (explicit interface implementation)</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>04/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>23672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;
using System.Dynamic;

class Program
{
    static void Main()
    {
        // ExpandoObject doesn't have public Add method. Its Add is explicit implementation of IDictionary.
        IDictionary&lt;string, object&gt; obj = new ExpandoObject();
        obj.Add("string", "v");
        obj.Add("int", 1);
        obj.Add("object", new { X=1, Y=2 });
    }
}


2. IDE0028 Quick Action

cs
IDictionary&lt;string, object&gt; obj = new ExpandoObject
{
    // Error CS1061 'ExpandoObject' does not contain a definition for 'Add'
    { "string", "v" },
    { "int", 1 },
    { "object", new { X = 1, Y = 2 } }
};
`</Code>
    <Description>**Version Used**: 

VS 15.5.0

**Steps to Reproduce**:

1. 

``

**Expected Behavior**:

No IDE0028 suggestion.

**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>23670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Instance fields of value types should be allowed to be used inside local functions</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>16/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>23670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>23670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>23670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 15.5.0

**Steps to Reproduce**:
Following code:
``
does not compile with error:
CS1673	Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.

Local functions can be (I believe) compiled as instance methods of containing type (same as for reference types - see also #23669) and therefore they can access instance fields.

**Expected Behavior**:
Local functions in value types can access instance fields.

**Actual Behavior**:
Local functions in value types cannot access instance fields.</Description>
  </Issue>
  <Issue>
    <IssueID>23668</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS0282 misjudgment</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>10/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23668</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
partial struct X // Warning CS0282
{
    // The only field of X is a backing field of A.
    public int A { get; set; }
}

partial struct X : I
{
    // This partial definition has no field.
    int I.A { get =&gt; A; set =&gt; A = value; }
}

interface I
{
    int A { get; set; }
}


**Expected Behavior**:

No warning.

**Actual Behavior**:

![image](https://user-images.githubusercontent.com/3760955/33758621-45853520-dc42-11e7-9e12-9cfd49ad0958.png)

FYI, this misjudgment occurs only when `I.A` has expression-bodied get/set.

cs
partial struct X // No Warning
{
    public int A { get; set; }
}

partial struct X : I
{
    int I.A { get { return A; } set { A = value; } } // {}-bodied
}
`</Code>
    <Description>**Version Used**: 

VS 15.5.0

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>23667</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>UnboundIdentifiers: 'nameof' does not exist in the current context.</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>18/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23667</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
Action action = () =&gt;
{
    var x = nameof(System);
#warning xxx
};
`</Code>
    <Description>In a lambda expression. If I write a `#warning` directive, the `nameof` will be error with 

&gt; CS0103  The name 'nameof' does not exist in the current context.

Test codes:

``

But there is an interesting phenomenon, the codes can be compile successed and run correctly.

In my test, this bug is appears in both of Visual Studio 2015 and Visual Studio 2017.

_This issue has been moved from 
VSTS ticketId: 454314_
_These are the original issue comments:_

彭闽 on 6/21/2017, 11:43 PM (169 days ago): &lt;pre&gt;Action action = () =&amp;gt; \{
    var x = nameof(System);
#warning xxx
};&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="

Dan J on 8/30/2017, 11:06 AM (99 days ago): I also have this happen in 15.3.3, does not prevent build from suceeding, but constantly having 20 errors makes it hard to find what is actually boken
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23666</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# - A breakpoint cound not be inserted at this location because of comments and #regions</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>23666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>23666</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following source code does compile and run, but it is not possible to set a breakpoint in VS 2017.
It seems to be related to the extra line break in the comment within a #region.

Here is the code:
``

WIthout the line-break between the two ///-comments everything is ok.

Intellisense also shows an error message &amp;quot;CS1028	Unexpected preprocessor directive&amp;quot;
at the #endregion line.

_This issue has been moved from 
VSTS ticketId: 513856_
_These are the original issue comments:_

Jinu Joseph [MSFT] on 10/26/2017, 07:10 PM (42 days ago): &lt;p&gt;We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.&lt;/p&gt;

_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23664</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Parameter Info shows abstract attribute property twice</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23664</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        [CustomExportWithBaseClass(BaseOnlyProperty = "A", BasePropertyWithOverride = "B", DerivedTypeOnlyProperty = "C")]
        public class ImportingPartWithCustomExportAttribute
        {
        }

        public class ImportingPartWithCustomExportWithBaseClassAttribute
        {
        }

        [MetadataAttribute]
        [AttributeUsage(AttributeTargets.Class)]
        internal abstract class AbstractCustomExportAttribute : ExportAttribute
        {
            protected AbstractCustomExportAttribute(Type contractType)
                : base(contractType)
            {
            }

            public string BaseOnlyProperty { get; set; }

            public abstract string BasePropertyWithOverride { get; set; }
        }

        internal sealed class CustomExportWithBaseClassAttribute : AbstractCustomExportAttribute
        {
            public CustomExportWithBaseClassAttribute()
                : base(default(Type))
            {
            }

            // This silly override is needed for MEF2 to work correctly :-(
            public override string BasePropertyWithOverride { get; set; }

            public string DerivedTypeOnlyProperty { get; set; }
        }
`</Code>
    <Description>**Version Used**: VS 15.5.0 

**Steps to Reproduce**:

1. Define an attribute with an abstract property, then another attribute that overrides that property. 
1. Use that property and bring up Parameter Info while in the parameter list.

``

**Expected Behavior**:
I expect to see 3 properties 

**Actual Behavior**:
I see 4 properties. The abstract property is displayed twice, as shown:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>23661</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>23661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rename ForegroundThreadAffinitizedObject.InvokeBelowInputPriority</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>17/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>23661</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should be `InvokeBelowInputPriorityAsync`.</Description>
  </Issue>
  <Issue>
    <IssueID>23660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generating fields from constructor arguments isn't respecting "this." settings</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>11/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have these settings in projectsystem:

``

Yet, generate field from constructor parameter is generating this style:
![image](</Description>
  </Issue>
  <Issue>
    <IssueID>23659</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SimplifyMemberName: behaves incorrect on VB object initializer</Title>
    <CreatedDate>08/12/2017</CreatedDate>
    <ClosedDate>19/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>IDE0037 Visual Basic AND  VB.NET Member name can be simplified

Example: 

``

Build Fails

_This issue has been moved from 
VSTS ticketId: 533435_
_These are the original issue comments:_

Shane Hancock on 12/5/2017, 05:40 PM (2 days ago): Same here
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23654</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS asks to remove reference to existing solution from the recent list</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>23/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>23654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:

1. Add new project to solution. Type of project is Windows Classic Desktop Class Library (C#).
2. Do not save the project.
3. Try to open other solution (which does exists) from File - Recent Project and Solutions.
4. Dialog "Save changes to following items" is displayed.
5. Click "Cancel".
6. Dialog is displayed  with text: "xxx.sln" could not be opened. Do you want to remove the reference(s) to it from  the Recent list(s)?
</Description>
  </Issue>
  <Issue>
    <IssueID>23652</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Cannot obtain symbol for tuple sequence in foreach</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>08/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23652</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
void EnumerateTuples(IEnumerable&lt;(int, string)&gt; sequence)
{
    foreach (var (i, s) in sequence)
    {
    }
}
`</Code>
    <Description>**Version Used**: VS 15.5 Community

**Steps to Reproduce**:

``
I am not able to obtain symbol for 'sequence' in foreach.
</Description>
  </Issue>
  <Issue>
    <IssueID>23651</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>TupleElementNames may contain all nulls</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>18/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>23651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23651</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`F((x, x))` results in a `BoundConvertedTupleLiteral` where `TupleElementNames = { null, null }` rather than `default(ImmutableArray&lt;string&gt;)`.
</Description>
  </Issue>
  <Issue>
    <IssueID>23645</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>23645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OperationAnalysisContext should expose a SemanticModel</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>23645</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0-beta3

**Expected Behavior**:
The `OperationAnalysisContext` for analyzers working with operations should expose a `SemanticModel`.

**Actual Behavior**:
`OperationAnalysisContext` does not expose a `SemanticModel`.</Description>
  </Issue>
  <Issue>
    <IssueID>23644</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VB IntelliSense reports errors for a VB project while solution builds fine</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>08/12/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 2017 15.5

**Steps to Reproduce**:

1. git clone 
2. start a VS instance
3. open TestVB\TestVB.sln
4. open Class1.vb

**Expected Behavior**:
No errors

**Actual Behavior**:
IntelliSense reports errors for DayOfWeek, DateTime, and BitArray not defined

5. Go to Project Property, Reference Tab, 

**Expected Behavior**:
Some Imported namespaces should have been checked, as specified in the vbproj

**Actual Behavior**:
All shown as unchecked

6. Now try to check `Microsoft.VisualBasic` in the list

** Actual Behavior**:
``

8. dismiss the dialog.  Looks like `.vs` is created and info is cached. From now on everything is fine. </Description>
  </Issue>
  <Issue>
    <IssueID>23639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Control-M Control-O no longer collapses regions</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I am using Visual Studio 2017 15.5.0 Preview 1.0.In Visual Studio 2015, entering control-m control-o while editing c# source code would collapse all regions in the source. In Visual Studio 2017, it no longer does this. In collapses methods but no regions.This is very annoying as I used to use control-m control-o very often_This issue has been moved from VSTS ticketId: 509521__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23638</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>MSBuildWorkspace incorrectly load a project, the configuration of which is different from current</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>15/01/2018</ClosedDate>
    <IssueLabels />
    <Description>The problem is similar to  but in my case the configuration selected in the project is also in the solution.
I configured the Configuration Manager in Visual Studio and the following text for my project was saved in the SLN file:

`{59054095-4DAA-43F2-93D7-3418D0C5340C} .DebugTest | Mixed Platforms.ActiveCfg = Debug | Any CPU
{59054095-4DAA-43F2-93D7-3418D0C5340C} .DebugTest | Mixed Platforms.Build.0 = Debug | Any CPU
`
As you can see with the DebugTest configuration selected in the solution, the project selected the Debug configuration. 
The Roslyn engine is not able to cope with this task and will try to set a non-existent configuration for the project - DebugTest. And as a result, the project can not compile and becomes completely invalid, because the conditional compilation is used in the correct project configuration.</Description>
  </Issue>
  <Issue>
    <IssueID>23636</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>23636</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using the new C# 7.2 'in' parameters can lead to memory corruptions</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>10/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23636</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23636</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017, Version 15.5.0
Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)


**Steps to Reproduce**:

1. Compile reproduction project (will share privately)
2. Run console application
3. Observe crash when it attempts to print the values

**Expected Behavior**:
It should print the strings it found to the console output

**Actual Behavior**:
AccessViolationException when referencing the strings


**Description**
With the release of Visual Studio 15.5 and C# 7.2 'in' support, we sprinkled this around parts of our code base.
When running the unit tests to confirm everything still worked, we found a big portion of them now failed with varying reasons. Some manifested as OutOfMemoryException, others as AccessViolationException and a few NullReferenceExceptions (one even appeared to be thrown inside `String.IsNullOrEmpty`)
After confirming everything still worked in our other branch, I began digging into this in an attempt to find the root cause, but ended up only getting more and more confused.
I was able to create a small reproduction console app that references a single library project containing our custom message parser, but don't really know how to move forward from here.

I have created a zip file (220KB) of the reproduction project, which includes the source code and the outputted binaries I got, and was hoping someone here could take a look to see if they can find the cause.

I was only able to get permission to share the code in a private manner, so I'm afraid I can't just upload it or link to it here.
I can either upload it to a more private environment, or share a download link via E-mail, Slack/Twitter DM, etc.
</Description>
  </Issue>
  <Issue>
    <IssueID>23628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>OOM while working in Roslyn.sln</Title>
    <CreatedDate>07/12/2017</CreatedDate>
    <ClosedDate>10/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>23628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>23628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

15.6.0 P1 27205.0.d15.6

**Crash dump**:

%internal_share%\public\tomat\Bugs\23628

</Description>
  </Issue>
  <Issue>
    <IssueID>23627</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio Crashes when creating ref struct from readonly struct</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23627</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;

namespace CSharp72TestApp
{
    public ref struct Point
    {
    }
    class Program
    {
        public static readonly Point rwp = new Point();

        static void PrintNormal()
        {
            var tmp = rwp;
        }
    }
}


**Expected Behavior**:

Visual Studio should not freeze, and instead just have a compiler error.

**Actual Behavior**:
Visual Studio freezes, and requires killing in task manager.

Also pasted below is a copy of my csproj file.

&lt;Project Sdk="Microsoft.NET.Sdk"&gt;

  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;

  &lt;PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'"&gt;
    &lt;LangVersion&gt;7.2&lt;/LangVersion&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
`</Code>
    <Description>**Version Used**: 

Visual Studio 15.5

**Steps to Reproduce**:

1. Create a new .NET Core 2.0 C# project. 
2. Set the compiler version to C# 7.2
3. Paste the code below in.

``

@dotnet/roslyn-compiler</Description>
  </Issue>
  <Issue>
    <IssueID>23618</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NormalizeWhitespace() introduces extra whitespaces and inconsistent where constraint format</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>13/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23618</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0-beta3

`NormalizeWhitespace()` adds extra whitespaces in the following cases:
- `new()` constraint becomes `new ()`
- `typeof(T)` becomes `typeof (T)`
- `default(int)` becomes `default (int)`
- `default(int?)` becomes `default (int? )` (note also extra space after question mark, smth missed in 

I believe that spelling on the left is kind of "traditional" one, so it would be good to remove extra whitespaces.

Also `where` constraint has different formatting:
- it starts on a new line in case of classes or interfaces:
``
- in case of methods/delegates it's placed on the same line (and at least leaks whitespace before it):
`public TResult? Func1&lt;TResult&gt;(T? x, IEnumerable&lt;T&gt; y)where TResult : struct`</Description>
  </Issue>
  <Issue>
    <IssueID>23617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Typing &lt;space&gt; after override keyword crashes Visual Studio</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>08/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
1.3.4.60902 (Visual Studio 2015 Update 3 with KB3165756 applied)

**Steps to Reproduce**:

1. Create a C# source file.
2. Insert the following code:
``
I found a gist file which shows the same exception, but I don't know where it belongs to:
</Description>
  </Issue>
  <Issue>
    <IssueID>23613</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Can't have a project that works on a mix of compilers (CI and Dev)</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>23613</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Please see  for details (was requested to redirect to here)

Basically the issue is that we can't have a build that works on our CI environment which has an older C# compiler and dev machines which have upgraded to 15.5. The suggestion was to add  Microsoft.Net.Compilers 2.6.0-beta3 to the references, but then our .NET Full projects start getting:

[08:18:32][build] BaseComponent.cs(25,43): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.

only on the CI environment. We used to have to add NETStandard.Library.NETFramework in .NET Standard 2 Beta for this kind of issue but that was removed when the SDK was released.</Description>
  </Issue>
  <Issue>
    <IssueID>23609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot build on Mac</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels />
    <Code>
CSC error CS8032: An instance of analyzer Microsoft.NetCore.Analyzers.Runtime.TestForNaNCorrectlyAnalyzer cannot be created from /Users/vagrant/.nuget/packages/microsoft.netcore.analyzers/2.6.0-beta1/analyzers/dotnet/cs/Microsoft.NetCore.Analyzers.dll : Could not load type of field 'Microsoft.NetCore.Analyzers.Runtime.TestForNaNCorrectlyAnalyzer:_comparisonOperators' (5) due to: Could not resolve type with token 0100008c (from typeref, class/assembly Microsoft.CodeAnalysis.Operations.BinaryOperatorKind, Microsoft.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35) assembly:Microsoft.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:Microsoft.CodeAnalysis.Operations.BinaryOperatorKind member:&lt;none&gt;. [/Users/vagrant/git/Src/Utility/Utility.csproj]
`</Code>
    <Description>**Version Used**: 

2.6.0-beta1

**Steps to Reproduce**:

1. Consume the 2.6.0-beta1 analyzers from a netstandard library
2. Try to build the library on Mac 

**Expected Behavior**:

It builds.

**Actual Behavior**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>23608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Hang in PackageInstallerService due to NFW when creating a new Console App (.NET Core)</Title>
    <CreatedDate>06/12/2017</CreatedDate>
    <ClosedDate>23/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>23608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>23608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Telemetry.dll!Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.NoPumpSyncContext.Wait(System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	mscorlib.dll!System.Threading.SynchronizationContext.InvokeWaitMethodHelper(System.Threading.SynchronizationContext syncContext, System.IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	mscorlib.dll!System.Threading.WaitHandle.InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext)	Unknown
 	mscorlib.dll!System.Threading.WaitHandle.WaitOne(int millisecondsTimeout, bool exitContext)	Unknown
 	mscorlib.dll!System.Threading.WaitHandle.WaitOne()	Unknown
 	Microsoft.VisualStudio.Telemetry.dll!Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.PostWatsonReport(int maxReportsPerSession)	Unknown
 	Microsoft.VisualStudio.Telemetry.dll!Microsoft.VisualStudio.Telemetry.SessionChannel.WatsonSessionChannel.PostEvent(Microsoft.VisualStudio.Telemetry.TelemetryEvent telemetryEvent)	Unknown
 	Microsoft.VisualStudio.Telemetry.dll!Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(Microsoft.VisualStudio.Telemetry.TelemetryEvent telemetryEvent)	Unknown
 	Microsoft.VisualStudio.Telemetry.dll!Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession telemetrySession, string eventName, string description, System.Exception exceptionObject, System.Func&lt;Microsoft.VisualStudio.Telemetry.IFaultUtility, int&gt; gatherEventDetails, Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation[] correlatedWith)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.Report(string description, System.Exception exception, System.Func&lt;Microsoft.VisualStudio.Telemetry.IFaultUtility, int&gt; callback)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.Report(System.Exception exception)	Unknown
&gt;	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception exception, System.Action&lt;System.Exception&gt; handler)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.ProcessProjectChange(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	[Native to Managed Transition]	
 	mscorlib.dll!System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task task)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask&lt;System.Collections.Generic.List&lt;NuGet.VisualStudio.IVsPackageMetadata&gt;&gt;.CompleteOnCurrentThread()	Unknown
 	Microsoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run&lt;System.Collections.Generic.List&lt;NuGet.VisualStudio.IVsPackageMetadata&gt;&gt;(System.Func&lt;System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;NuGet.VisualStudio.IVsPackageMetadata&gt;&gt;&gt; asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)	Unknown
 	NuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages(EnvDTE.Project project)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.PackageServicesProxy.GetInstalledPackages(EnvDTE.Project project)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.ProcessProjectChange(Microsoft.CodeAnalysis.Solution solution, Microsoft.CodeAnalysis.ProjectId projectId)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.ProcessBatchedChangesOnForeground(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.OnWorkspaceChanged.AnonymousMethod__0(System.Threading.Tasks.Task _)	Unknown
 	mscorlib.dll!System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task task)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Utilities.SynchronizationContextTaskScheduler.PostCallback(object obj)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeImpl()	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext executionContext, System.Threading.ContextCallback callback, object state)	Unknown
 	WindowsBase.dll!System.Windows.Threading.DispatcherOperation.Invoke()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.ProcessQueue()	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.WndProcHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)	Unknown
 	WindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)	Unknown
 	WindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)	Unknown
 	WindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)	Unknown



Underlying exception:


   ArgumentException: The operation failed as details for project ConsoleApp125 could not be loaded.
   at NuGet.PackageManagement.VisualStudio.NetCorePackageReferenceProject.GetPackageSpecsAsync(DependencyGraphCacheContext context)
   at NuGet.VisualStudio.VsPackageInstallerServices.&lt;GetPackagesPathResolverAsync&gt;d__8.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at NuGet.VisualStudio.VsPackageInstallerServices.&lt;&gt;c__DisplayClass10_0.&lt;&lt;GetInstalledPackages&gt;b__0&gt;d.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod, JoinableTaskCreationOptions creationOptions)
   at NuGet.VisualStudio.VsPackageInstallerServices.GetInstalledPackages(Project project)
   at Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.PackageServicesProxy.GetInstalledPackages(Project project)
   at Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.ProcessProjectChange(Solution solution, ProjectId projectId)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>VS hung while I was creating a Console App (.NET COre):

Stack:

``</Description>
  </Issue>
  <Issue>
    <IssueID>23603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0039 potential false-positive</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>06/12/2017</ClosedDate>
    <IssueLabels />
    <Code>cs
using System;

namespace ScratchForRoslyn
{
	public class Class1
	{
		static void DoSomething(int i)
		{
			Func&lt;object&gt; func = () =&gt; SomeFunction();

			if (i &lt; 0)
			{
				Foo(func);
			}

			if (i &lt; 5)
			{
				Bar(func);
			}

			if (i &lt; 10)
			{
				Baz(func);
			}
		}

		static void Foo(Func&lt;object&gt; o) =&gt; throw null;
		static void Bar(Func&lt;object&gt; o) =&gt; throw null;
		static void Baz(Func&lt;object&gt; o) =&gt; throw null;

		static object SomeFunction() =&gt; throw null;
	}
}


**Expected Behavior**:

No warnings, errors, or suggestions.

**Actual Behavior**:

IDE0039 suggests to change line 9 to a local function, like so:

cs
object func() =&gt; SomeFunction();
`</Code>
    <Description>**Version Used**: 
Visual Studio 2017 Enterprise
15.4
15.5

**Steps to Reproduce**:

Write out the following code in the editor:

``

This subtle code change results in three `Func&lt;&gt;` objects being created at runtime, rather than just one.
</Description>
  </Issue>
  <Issue>
    <IssueID>23602</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>23602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>3rd party analyzer help link is useless when user prefer Help Viewer.</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>24/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>23602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>23602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS Community 15.5

When 3rd party extension/nuget contains analyzer with help url (DiagnosticDescriptor.HelpLinkUri) and user prefer to open help link in Help Viewer, user will see something similar to

![helpviewer](

when opening link for analyzer 'XX0001' from Error List.

I would suggest that help link for 3rd party analyzer could open in browser even if user prefer Help Viewer.
</Description>
  </Issue>
  <Issue>
    <IssueID>23601</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CA1507 has faulty heuristic</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

2.6.0-beta1 running in VS 15.5.

**Steps to Reproduce**:

This code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23598</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests_XmlDoc.InvokeWithOverridableKeywordCommitSeeLangword failed</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>23598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>23598</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>


``</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>23595</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.NET Compiler Platform SDK is out of date - does not work with VS 15.5</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>05/12/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**:

After upgrading to  latest VS 15.5 and starting VS a dialog box was displayed that .NET Compiler Platform SDK is incompatible with VS 15.5 Community and will be disabled. Click OK to restart VS.

**Steps to Reproduce**:

1. Install .NET Compiler Platform SDK in VS 15.4
2. Upgrade to VS 15.5
3. Start VS

**Expected Behavior**:

Extension should work or update should be offered.

**Actual Behavior**:

Extension is disabled and no update is available.</Description>
  </Issue>
  <Issue>
    <IssueID>23591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>23591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Feature: MSBuild switch for turning on/off analysis</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>09/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>23591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It would be very handy to have an MSBuild property that switches on/off Roslyn code analysis, so you could so something like:

``

This would work in a similar way to the old `RunCodeAnalysis` MSBuild property for pre-Roslyn code analysis.
</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>23590</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>23590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Typing JObject &lt;space&gt; crashes Visual Studio</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23590</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Affected Branch: 15.6 Preview1
Affected Build: 27129.0.d15.6
Affected Product Language: en-US

Steps to reproduce:

1. File &gt; New &gt; Project &gt; .NET Core &gt; Console App (.NET Core)
2. In Solution Explorer, right-click on the project, select 'Manage Nuget Packages...'
3. Install Newtonsoft.Json version 9.0.1
4. Open a .cs file, add 'using Newtonsoft.Json.Linq;'
5. Within a method, type or autocomplete 'JObject', then hit space bar.
6. Visual Studio hangs, eventually showing dialogs that it's crashed, reporting the problem, restarting.</Description>
  </Issue>
  <Issue>
    <IssueID>23584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>23584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Span&lt;T&gt; stackalloc IntelliSense</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>21/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>23584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>23584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

VS 15.5.0

**Steps to Reproduce**:

1. type `Span&lt;byte&gt; s = stac`...
2. Ctrl + Space

**Expected Behavior**:

C# 7.2 introduce safe `stackalloc` with the `Span&lt;T&gt;` struct. So `stackalloc` keyword should be listed in the IntelliSense window.

**Actual Behavior**:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>23581</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title> IDE0041 Null check can be simplified is shown for Reference Equals of all generic parameters</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>06/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static void NotNull&lt;T&gt;(T value, string parameterName)
{
    if (ReferenceEquals(value, null)) // IDE0041 not valid here
    {
        throw new ArgumentNullException(parameterName);
    }
}
`</Code>
    <Description>IDE0041 should only be shown if the type is nullable or the generic parameter is constrained to a nullable type.
Executing the codefix will create invalid code.

**Version Used**: 
Visual Studio Enterprise 2017 15.5 RTM
**Steps to Reproduce**:

1. Use repro snippet from below
2. Build
3. Look at messages

**Expected Behavior**:
Not shown
**Actual Behavior**:
Message: IDE0041	Null check can be simplified is shown for the Reference Equals

Repro:
`` 

</Description>
  </Issue>
  <Issue>
    <IssueID>23580</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NuGet Microsoft.CodeAnalysis v2.6.0 stable has beta3 suffix in name</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>09/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>23580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>23580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  Latest stable version according to NuGet is 2.4.0. I believe the 2.6.0-beta3 is misnamed. It should be 2.6.0 without the beta3 suffix.</Description>
  </Issue>
  <Issue>
    <IssueID>23579</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>23579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>.NET Compiler Platform SDK in not compatible with Visual Studio 2017 15.5</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
15.5
**Steps to Reproduce**:

1. Open VS after update
2. Windows about incompatible version displayed
3. .NET Compiler Platform SDK is disabled

**Expected Behavior**:
.NET Compiler Platform SDK should work, please provide extension update
**Actual Behavior**:
.NET Compiler Platform SDK is disabled</Description>
  </Issue>
  <Issue>
    <IssueID>23573</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue with Workaround: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'</Title>
    <CreatedDate>05/12/2017</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23573</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi all.

Today, while I'm using Roslyn to compile some code under netcoreapp 2, I got such an error due to using keyword "dynamic":
Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'

If you google this, it will point you to add Microsoft.CSharp as reference while calling Roslyn method. But sadly, it's done in my project.

After several hour digging and testing, I found the problem and solution:
It seems that some methods related to Linq are used in my code. Adding **System.Linq.Expressions** as reference to Roslyn fixes the problem.

Note: Images of these references should be loaded only from TRUSTED_PLATFORM_ASSEMBLIES.</Description>
  </Issue>
  <Issue>
    <IssueID>23568</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Removing unused usings should remove the extra line between copyright and namespace</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>02/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>23568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. 
``
</Description>
  </Issue>
  <Issue>
    <IssueID>23564</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>23564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Build error: The 2.2.0 SDK is required to build this repo</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>20/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>23564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>23564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: bdd16d9d21a3dc59c83ef73980aa574854b32c53 (latest master)

**Steps to Reproduce**:

1. download sdk
2. run restore
3. run build


**Expected Behavior**: no error

**Actual Behavior**:

for every project:
``

</Description>
  </Issue>
  <Issue>
    <IssueID>23563</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Occasional FileNotFoundExceptions in VS Builds coming from CSC.exe and BuildServerConnection type</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
* csc.exe: 2.6.0.62321 (26fb741a)
* Visual Studio: 27129.0.d15.6 (15.6.0 branch)

**Steps to Reproduce**:

1. Rebuild project in VS (I've see it occasionally across multiple machines and projects, but it's inconsistent)

**Expected Behavior**: Successful/failed build results with compiler errors, etc.

**Actual Behavior**: Exception is thrown by csc.exe:

``

It's inconsistent, and can usually be resolved by killing VBCSCompiler.exe, but it's a pain when it happens and once it starts it seems to be consistent until VBCSCompiler is restarted.</Description>
  </Issue>
  <Issue>
    <IssueID>23558</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>FixAll in project/solution does not fix all violations</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
VS 2017.5 Preview 4

**Steps to Reproduce**:

1. Sync to Roslyn master bdd16d9d21a3dc59c83ef73980aa574854b32c53
2. Use latest version of  by updating `MicrosoftNetRoslynDiagnosticsVersion` at 
3. Build to generate a bunch of `RS1016` diagnostics.
4. Try to FixAll C# diagnostics using the IDE code fix.

**Expected Behavior**:
All RS1016 diagnostics in C# projects are fixed.

**Actual Behavior**:
Few RS1016 diagnostics don't get fixed. These unfixed diagnostics keep changing with every attempt, so I am presuming this is some race condition.</Description>
  </Issue>
  <Issue>
    <IssueID>23550</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>After installing .NET 4.7, ValueTuples no longer work on .NET 4.6</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>04/12/2017</ClosedDate>
    <IssueLabels />
    <Description>I have the same problem as described here: 


**Version Used**: 
latest major (7)

**Steps to Reproduce**:

1.  Have a working class lib that targets 4.6 and uses ValueTuple with no errors 
2.  Install 4.7
3.  Project from step 1 doesn't work anymore (error CS1061)

**Expected Behavior**:
Project still compiles (on 4.6)

**Actual Behavior**:
Lot of compile errors (error CS1061) regarding the tuple syntax
</Description>
  </Issue>
  <Issue>
    <IssueID>23547</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>23547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Need to embrace SDK defaults for output paths</Title>
    <CreatedDate>04/12/2017</CreatedDate>
    <ClosedDate>10/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>23547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The Roslyn adoption of the SDK suppresses a couple aspects of how output paths are generated by default. In particular it suppresses the addition of the target framework and runtime identifier directories.

This was initially done to smooth the adoption of the SDK. It was an enormous change and trying to adopt it at the same time as restructuring our output directories made it that much harder.

While it is possible to suppress these elements it does add some complexity to our build. For example not appending the runtime directory means we need to hand manipulate publish directory names. This represents a bit of a tax on our infrastructure and can slow adoption of new SDKs.

Now that everything is mostly settled on the new SDK we should embraces the output. It's comparatively a fairly small change at this point. 
</Description>
  </Issue>
  <Issue>
    <IssueID>23546</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SyntaxKind.VarKeyword is missing</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>04/12/2017</ClosedDate>
    <IssueLabels />
    <Description>Because of that we always check for "var" string instead of ContextualKind. Is there any reason why is that?
</Description>
  </Issue>
  <Issue>
    <IssueID>23545</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SemanticModel.GetTypeInfo().Type is null for array initializers without </Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>23545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>23545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
byte[] arr = { };
`</Code>
    <Description>**Version Used**: latest

**Steps to Reproduce**:

``

1. Find the `InitializerExpression` node correspoding to `{ }`.
2. Evaluate `semanticModel.GetTypeInfo(node, ct).Type` with this node.

**Expected Behavior**: Returns an `ITypeSymbol` corresponding to `System.Byte[]`.

**Actual Behavior**: Returns `null`. However, `ConvertedType` is `System.Byte[]`. Is this intentional behavior?

Filed on request of @mavasani, </Description>
  </Issue>
  <Issue>
    <IssueID>23543</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>suggestion : replace property with field</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>05/12/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 15.4.5

**Actual Behavior**:

When clicking on property, lightbulb only suggests to replace auto property with a method.

**Expected Behavior**:

add another suggestion to replace auto properties with fields and sort out naming (prefix with `_`), and replace get only auto properties with readonly fields.
</Description>
  </Issue>
  <Issue>
    <IssueID>23542</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No projects found when building a solution in memory</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,

I am trying to compile a solution in memory using the Roslyn compiler. I am using the latest stable Nuget packages (version 2.4.0), the project that is compiling the solution is a .Net 4.6.1 class library.

The problem is that the project graph does not contain any projects.

``

I might be missing some point. I have created a MVP solution in case you'd like to help me. Any help will be appreciated.

Thanks, Karel

**Version Used**: 
2.4.0 (Nuget packages)

**Steps to Reproduce**:

1. Get the repo from 
2. Set the path to a SLN file
3. Run

**Expected Behavior**:
`projects` not empty

**Actual Behavior**:
`projects` is empty</Description>
  </Issue>
  <Issue>
    <IssueID>23539</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>c# validationattribute this</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>09/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>23539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a class that inherits from validationattribute.
1. Add a constructor that takes a lambda.
1. Apply the attribute to a property and pass a lambda that uses `this.` in its definition.

Visual studio crashes every time

_This issue has been moved from 
VSTS ticketId: 529812_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23538</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Hard crash when using /// &lt;exception&gt;</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>04/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>23538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

public class Example
{
    /// &lt;exception cref="ArgumentException.ArgumentException"&gt;&lt;/exception&gt;
    public Example()
    {
    }
}
`</Code>
    <Description>Consider the following code:

``

(Yes, it is incorrect, should be `&lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;`)

Hovering over `public Example()` causes the editor to crash. Using just `cref="ArgumentException"` works fine. Curiously, removing `using System;` does prevent it from crashing.

_This issue has been moved from 
VSTS ticketId: 530846_
_These are the original issue comments:_
(no comments)
_These are the original issue solutions:_
(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23536</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>The "Convert to interpolated string" automated refactoring does not escape curly braces</Title>
    <CreatedDate>03/12/2017</CreatedDate>
    <ClosedDate>09/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>23536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The refactoring &amp;quot;Convert to interpolated string&amp;quot; does not escape the exisiting curly braces when converting concatenated strings.Eg. the statementsint number = 9;string test1 = &amp;quot;Something {X} = &amp;quot; + number;string test2 = &amp;quot;Something {&amp;quot; + number + &amp;quot;}&amp;quot;;becomeint number = 9;string test1 = $&amp;quot;Something {X} = {number}&amp;quot;;string test2 = $&amp;quot;Something {{number}}&amp;quot;;The correctly converted strings are:string test1 = $&amp;quot;Something {{X}} = {number}&amp;quot;;string test2 = $&amp;quot;Something {{{number}}}&amp;quot;;_This issue has been moved from VSTS ticketId: 530431__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>23528</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>23528</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing FixAll support for bunch of IDE CodeFixProviders</Title>
    <CreatedDate>02/12/2017</CreatedDate>
    <ClosedDate>17/04/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>23528</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23528</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23528</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	RS1016	'GenerateEndConstructCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	BasicFeatures	c:\roslyn\src\Features\VisualBasic\Portable\CodeFixes\GenerateEndConstruct\GenerateEndConstructCodeFixProvider.vb	16	Active
Warning	RS1016	'GenerateEventCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	BasicFeatures	c:\roslyn\src\Features\VisualBasic\Portable\CodeFixes\GenerateEvent\GenerateEventCodeFixProvider.CodeAction.vb	8	Active	A CodeFixProvider should provide FixAll support to enable users to fix multiple instances of the underlying diagnostic with a single code fix. See documenation at https://github.com/dotnet/roslyn/blob/master/docs/analyzers/FixAllProvider.md for further details.
Warning	RS1016	'HideBaseCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	CSharpFeatures	c:\roslyn\src\Features\CSharp\Portable\CodeFixes\HideBase\HideBaseCodeFixProvider.AddNewKeywordAction.cs	12	Active
Warning	RS1016	'AbstractAddImportCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\AddImport\CodeActions\AssemblyReferenceCodeAction.cs	13	Active
Warning	RS1016	'AbstractAddPackageCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\AddPackage\AbstractAddPackageCodeFixProvider.cs	16	Active
Warning	RS1016	'AbstractAddParameterCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\AddParameter\AbstractAddParameterCodeFixProvider.cs	22	Active
Warning	RS1016	'AbstractGenerateMemberCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\CodeFixes\GenerateMember\AbstractGenerateMemberCodeFixProvider.cs	15	Active
Warning	RS1016	'AbstractIteratorCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\CodeFixes\Iterator\AbstractIteratorCodeFixProvider.cs	12	Active
Warning	RS1016	'NamingStyleCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\CodeFixes\NamingStyle\AbstractNamingStyleCodeFixProvider.cs	22	Active
Warning	RS1016	'AbstractResolveConflictMarkerCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\ConflictMarkerResolution\AbstractConflictMarkerCodeFixProvider.cs	14	Active
Warning	RS1016	'AbstractFullyQualifyCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\FullyQualify\AbstractFullyQualifyCodeFixProvider.cs	18	Active
Warning	RS1016	'AbstractSpellCheckCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\SpellCheck\AbstractSpellCheckCodeFixProvider.cs	15	Active
Warning	RS1016	'AbstractUpgradeProjectCodeFixProvider' registers one or more code fixes, but does not override the method 'CodeFixProvider.GetFixAllProvider'. Override this method and provide a non-null FixAllProvider for FixAll support, potentially 'WellKnownFixAllProviders.BatchFixer', or 'null' to explicitly disable FixAll support.	Features	c:\roslyn\src\Features\Core\Portable\UpgradeProject\AbstractUpgradeProjectCodeFixProvider.cs	15	Active
`</Code>
    <Description>**Version Used**: Roslyn master

**Steps to Reproduce**:

1. Move Roslyn to latest analyzers:  by changing `MicrosoftNetRoslynDiagnosticsVersion` over [here]( to `2.6.0-beta1`. If this value is already greater than equals `2.6.0-beta1`, then search for source suppressions for RS1016.
2. Build solution

**Expected Behavior**:
No RS1016 diagnostics (CodeFixProviders should override GetFixAllProvider).

**Actual Behavior**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>23527</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>API inconsistency in ISwitchCaseOperation</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>07/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>23527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>23527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.6.0-beta3-62329-03

**Steps to Reproduce**:
The `Body` property of `ISwitchCaseOperation` is declared as `ImmutableArray&lt;IOperation&gt;`, while all other statements have their body declared as `IOperation`, which then contains a single other operation or multiple wrapped in a `IBlockOperation`.

**Expected Behavior**:
`ISwitchCaseOperation.Body` is typed as `IOperation`.

**Actual Behavior**:
`ISwitchCaseOperation.Body` is typed as `ImmutableArray&lt;IOperation&gt;`.</Description>
  </Issue>
  <Issue>
    <IssueID>23525</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>23525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compilation.Emit may crash when invalid pdb path is specified</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>PathUtilities.GetFileName instead of Path.GetFileName:
http://source.roslyn.io/#Microsoft.CodeAnalysis/Compilation/Compilation.cs,2428, or we should catch the exception and report a diagnostic.

Path.GetFileName throws if the path contains invalid characters.

Repro from command line:


C:\Temp&gt;csc a.cs /debug:embedded /pathmap:C:\="
Microsoft (R) Visual C# Compiler version 2.6.0.62321 (74213c90)
Copyright (C) Microsoft Corporation. All rights reserved.


Unhandled Exception: System.ArgumentException: Illegal characters in path.
   at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)
   at System.IO.Path.GetFileName(String path)
   at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(CommonPEModuleBuilder moduleBeingBuilt, EmitStreamProvider peStreamProvider, EmitStreamProvider metadataPEStreamProvider, EmitStreamProvider pdbStreamProvider, Func`1 testSymWriterFactory, DiagnosticBag diagnostics, Boolean metadataOnly, Boolean includePrivateMembers, Boolean emitTestCoverageData, String pePdbFilePath, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.RunCore(TextWriter consoleOutput, ErrorLogger errorLogger, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CommonCompiler.Run(TextWriter consoleOutput, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.&lt;&gt;c__DisplayClass1_0.&lt;Run&gt;b__0(TextWriter tw)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Csc.Run(String[] args, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.RunLocalCompilation(String[] arguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.BuildClient.RunCompilation(IEnumerable`1 originalArguments, BuildPaths buildPaths, TextWriter textWriter)
   at Microsoft.CodeAnalysis.CommandLine.DesktopBuildClient.Run(IEnumerable`1 arguments, RequestLanguage language, CompileFunc compileFunc, IAnalyzerAssemblyLoader analyzerAssemblyLoader)
   at Microsoft.CodeAnalysis.CSharp.CommandLine.Program.Main(String[] args)
`</Code>
    <Description>This line should call ``
</Description>
  </Issue>
  <Issue>
    <IssueID>23523</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>PathMap should accept and ignore empty mapping</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>12/05/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csc a.cs /pathmap:a=b,
csc a.cs /pathmap:a=b,,c=d
csc a.cs /pathmap:,c=d

**Expected Behavior**:

The empty mappings are ignored.

**Actual Behavior**:


error CS8101: The pathmap option was incorrectly formatted.


Not accepting empty mapping makes logic that concatenates multiple mappings, for example in msbuild targets files, unnecessary complicates as it needs to avoid inserting extra ,`</Code>
    <Description>**Version Used**: 

master

**Steps to Reproduce**:

``.

</Description>
  </Issue>
  <Issue>
    <IssueID>23522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>PathMap doesn't handle quoted value correctly</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>01/12/2017</ClosedDate>
    <IssueLabels />
    <Code>/pathmap:"C:\Temp\PathMapRepro\A\=/1/,C:\Temp\PathMapRepro\B\=/2/"

Since the msbuild task quotes the value by default, the mapping is incorrect by default when multiple mappings are needed.

As a workaround once can prefix and suffix the path map with dummy values, e.g.

/pathmap:"dummy1=x,C:\Temp\PathMapRepro\A\=/1/,C:\Temp\PathMapRepro\B\=/2/,dummy2=y"


**Version Used**: 

master

**Steps to Reproduce**:

1.  Extract content of [Repro.zip](https://github.com/dotnet/roslyn/files/1522921/Repro.zip) to C:\Temp\PathMapRepro (the path is important)
2. Run C:\Temp\PathMapRepro\Build.cmd
3. Inspect the resulting PDB using [mdv tool](https://dotnet.myget.org/feed/metadata-tools/package/nuget/mdv): 


C:\Temp\PathMapRepro&gt;mdv a.pdb


**Expected Behavior**:


Document (index: 0x30, size: 16):
=====================================================================================================================================
   Name                                 Language  HashAlgorithm  Hash
=====================================================================================================================================
1: '/1/a.cs' (#1d)                    C# (#2)   SHA-1 (#1)     80-F7-EA-A3-9B-CB-9A-13-32-41-A8-0C-88-C6-92-08-1A-C2-D6-E3 (#24)
2: '/2/b.cs' (#4e)                    C# (#2)   SHA-1 (#1)     20-DC-9B-79-3E-44-19-8E-39-CA-8A-C6-72-FF-D0-ED-7B-A4-BC-E2 (#54)


**Actual Behavior**:


Document (index: 0x30, size: 16):
=====================================================================================================================================
   Name                                 Language  HashAlgorithm  Hash
=====================================================================================================================================
1: 'C:\Temp\PathMapRepro\A\a.cs' (#1d)  C# (#2)   SHA-1 (#1)     80-F7-EA-A3-9B-CB-9A-13-32-41-A8-0C-88-C6-92-08-1A-C2-D6-E3 (#24)
2: '/2/"/b.cs' (#4e)                    C# (#2)   SHA-1 (#1)     20-DC-9B-79-3E-44-19-8E-39-CA-8A-C6-72-FF-D0-ED-7B-A4-BC-E2 (#54)
`</Code>
    <Description>Quoted value is parsed incorrectly:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>23521</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>23521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Full signing is broken using csc.exe in 15.6.x</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>04/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23521</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro:

1. Use `sn.exe` to create a keyfile by calling `sn.exe -k test.snk`.
2. Compile hello world with signing using `csc.exe -keyfile:test.snk hello.cs`.
3. Run `sn.exe -vf hello.exe` to verify that the output is signed.

Expected:
``

</Description>
  </Issue>
  <Issue>
    <IssueID>23520</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can't serialize a ProjectId with a null DebugName</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>05/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>23520</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  at &lt;unknown&gt; &lt;0xffffffff&gt;
  at Roslyn.Utilities.ObjectWriter.WriteString (string) [0x00000] in /_/src/Compilers/Core/Portable/Serialization/ObjectWriter.cs:120
  at Microsoft.CodeAnalysis.ProjectId.Roslyn.Utilities.IObjectWritable.WriteTo (Roslyn.Utilities.ObjectWriter) [0x0000c] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectId.cs:90
  at Microsoft.CodeAnalysis.Shared.Extensions.SolutionExtensions.WriteTo (Roslyn.Utilities.IObjectWritable,Roslyn.Utilities.ObjectWriter) [0x00000] in /_/src/Workspaces/Core/Portable/Shared/Extensions/SolutionExtensions.cs:11
  at Microsoft.CodeAnalysis.ProjectInfo/ProjectAttributes.WriteTo (Roslyn.Utilities.ObjectWriter) [0x00000] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectInfo.cs:438
  at Microsoft.CodeAnalysis.Checksum.Create (Microsoft.CodeAnalysis.Serialization.WellKnownSynchronizationKind,Roslyn.Utilities.IObjectWritable) [0x0001d] in /_/src/Workspaces/Core/Portable/Workspace/Solution/Checksum_Factory.cs:55
  at Microsoft.CodeAnalysis.ProjectInfo/ProjectAttributes.Microsoft.CodeAnalysis.IChecksummedObject.get_Checksum () [0x0000e] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectInfo.cs:478
  at Microsoft.CodeAnalysis.Serialization.Serializer.CreateChecksum (object,System.Threading.CancellationToken) [0x00028] in /_/src/Workspaces/Core/Portable/Execution/Serializer.cs:61
  at Microsoft.CodeAnalysis.ProjectState/&lt;ComputeChecksumsAsync&gt;d__111.MoveNext () [0x000c0] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectState_Checksum.cs:41
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Serialization.ProjectStateChecksums&gt;.Start&lt;Microsoft.CodeAnalysis.ProjectState/&lt;ComputeChecksumsAsync&gt;d__111&gt; (Microsoft.CodeAnalysis.ProjectState/&lt;ComputeChecksumsAsync&gt;d__111&amp;) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.ProjectState.ComputeChecksumsAsync (System.Threading.CancellationToken) [0x0002f] in &lt;04e532e269994a46ad655a7ff113b901&gt;:0
  at Roslyn.Utilities.AsyncLazy`1&lt;T_REF&gt;.StartAsynchronousComputation (Roslyn.Utilities.AsyncLazy`1/AsynchronousComputationToStart&lt;T_REF&gt;,Roslyn.Utilities.AsyncLazy`1/Request&lt;T_REF&gt;,System.Threading.CancellationToken) [0x00013] in /_/src/Workspaces/Core/Portable/Utilities/AsyncLazy`1.cs:388
  at Roslyn.Utilities.AsyncLazy`1&lt;T_REF&gt;.GetValueAsync (System.Threading.CancellationToken) [0x00085] in /_/src/Workspaces/Core/Portable/Utilities/AsyncLazy`1.cs:344
  at Microsoft.CodeAnalysis.ProjectState.GetStateChecksumsAsync (System.Threading.CancellationToken) [0x00000] in /_/src/Workspaces/Core/Portable/Workspace/Solution/ProjectState_Checksum.cs:21
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetChecksumAsync&gt;d__55.MoveNext () [0x00011] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex_Persistence.cs:83
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.Checksum&gt;.Start&lt;Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetChecksumAsync&gt;d__55&gt; (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetChecksumAsync&gt;d__55&amp;) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetChecksumAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in &lt;04e532e269994a46ad655a7ff113b901&gt;:0
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexWorkerAsync&gt;d__10.MoveNext () [0x0001d] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex.cs:75
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex&gt;.Start&lt;Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexWorkerAsync&gt;d__10&gt; (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexWorkerAsync&gt;d__10&amp;) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexWorkerAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in &lt;04e532e269994a46ad655a7ff113b901&gt;:0
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexAsync&gt;d__9.MoveNext () [0x00035] in /_/src/Workspaces/Core/Portable/FindSymbols/SyntaxTree/SyntaxTreeIndex.cs:61
  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex&gt;.Start&lt;Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexAsync&gt;d__9&gt; (Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex/&lt;GetIndexAsync&gt;d__9&amp;) [0x0002c] in /Users/builder/data/lanes/5533/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471
  at Microsoft.CodeAnalysis.FindSymbols.SyntaxTreeIndex.GetIndexAsync (Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken) [0x0002f] in &lt;04e532e269994a46ad655a7ff113b901&gt;:0`</Code>
    <Description>**Version Used**: 


**Steps to Reproduce**:

MonoDevelop has a unit-test that crashes because the ProjectId has a null DebugName:


**Expected Behavior**:
Should be able to serialize a null string here:


**Actual Behavior**:
Crash:

``</Description>
  </Issue>
  <Issue>
    <IssueID>23514</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>23514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update build instructions for windows</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>09/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>23514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>23514</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since #22812 roslyn only builds with VS 15.5 Preview. The [build instruction for windows]( should be updated:

* Minimum Version is 15.5 Preview
* Required SDK is 2.1.1 (couldn't find any download link for this)
* SDK 2.1.1 installs with VS 15.5 Preview

</Description>
  </Issue>
  <Issue>
    <IssueID>23513</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JieCarolHu</FixedById>
        <IssueID>23513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add a link to Tools&gt;Options&gt;…&gt;Code Style to link to EditorConfig documentation</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>19/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>23513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>23513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>23512</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[c# Feature Request] CallerUniqueIdAttribute</Title>
    <CreatedDate>01/12/2017</CreatedDate>
    <ClosedDate>03/12/2017</ClosedDate>
    <IssueLabels />
    <Description>The Caller(Members/File/Line) Attributes are very useful in "restricted to class" scenarios like "INotifyChanged" interfaces or exceptions.

But It is not complete in a "per application/library" scenario. (Example "Static variables", "Persistent Variables", etc.)

Stackoverflow has an example of "StaticLocal&lt;T&gt;" implementation showing the problem:


``

I think, it is very simple to the compiler to have a simple counter giving an unique interger value for each [CallerUniqueId] attribute instance when appears.



</Description>
  </Issue>
  <Issue>
    <IssueID>23007</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose invalid nodes under bad foreach</Title>
    <CreatedDate>03/11/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>23007</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In `foreach` statements, we don't expose some error scenarios, so IOperation doesn't have nodes in the tree. An example is GetEnclosingBinderInternalRecovery_11,
``
This is why we are special casing foreach expressions in AssertTypeFromOperation </Description>
  </Issue>
  <Issue>
    <IssueID>23004</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>23004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.NullReferenceException is thrown by CSharpOperationFactory.DeriveArguments for erroneous ElementAccessExpression</Title>
    <CreatedDate>03/11/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>23004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>23004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        [CompilerTrait(CompilerFeature.IOperation)]
        public void CS0856ERR_IndexedPropertyRequiresParams01()
        {
            var source1 =
@"Imports System
Imports System.Runtime.InteropServices
&lt;Assembly: PrimaryInteropAssembly(0, 0)&gt; 
&lt;Assembly: Guid(""165F752D-E9C4-4F7E-B0D0-CDFD7A36E210"")&gt; 
&lt;ComImport()&gt;
&lt;Guid(""165F752D-E9C4-4F7E-B0D0-CDFD7A36E211"")&gt;
Public Interface I
    Property P(x As Object, Optional y As Object = Nothing) As Object
    Property P(Optional x As Integer = 1, Optional y As Integer = 2) As Object
    Property Q(Optional x As Integer = 1, Optional y As Integer = 2) As Object
    Property Q(x As Object, Optional y As Object = Nothing) As Object
    Property R(x As Integer, y As Integer, Optional z As Integer = 3) As Object
    Property S(ParamArray args As Integer()) As Object
End Interface";
            var reference1 = BasicCompilationUtils.CompileToMetadata(source1);
            var source2 =
@"class C
{
    static void M(I i)
    {
        object o;
        o = i.P; // CS0856 (Dev11)
        o = i.Q;
        i.R = o; // CS0856
        i.R[1] = o; // CS1501
        o = i.S; // CS0856 (Dev11)
        i.S = o; // CS0856 (Dev11)
    }
}";
            var compilation2 = CreateStandardCompilation(source2, new[] { reference1 });
            compilation2.VerifyDiagnostics(
                // (8,9): error CS0856: Indexed property 'I.R' has non-optional arguments which must be provided
                Diagnostic(ErrorCode.ERR_IndexedPropertyRequiresParams, "i.R").WithArguments("I.R").WithLocation(8, 9),
                // (9,9): error CS7036: There is no argument given that corresponds to the required formal parameter 'y' of 'I.R[int, int, int]'
                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "i.R[1]").WithArguments("y", "I.R[int, int, int]").WithLocation(9, 9));

            var tree = compilation2.SyntaxTrees.Single();
            var node = tree.GetRoot().DescendantNodes().OfType&lt;ElementAccessExpressionSyntax&gt;().First();

            Assert.Equal("i.R[1]", node.ToString());

            compilation2.VerifyOperationTree(node, expectedOperationTree:
@"
");
        }



System.NullReferenceException: 'Object reference not set to an instance of an object.'

binder was null.


Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.LocalRewriter.GetDefaultParameterValue(Microsoft.CodeAnalysis.SyntaxNode syntax, Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol parameter, Microsoft.CodeAnalysis.ThreeState enableCallerInfo, Microsoft.CodeAnalysis.CSharp.LocalRewriter localRewriter, Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.DiagnosticBag diagnostics) Line 1231	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.LocalRewriter.AppendMissingOptionalArguments(Microsoft.CodeAnalysis.Operations.CSharpOperationFactory operationFactory, Microsoft.CodeAnalysis.SyntaxNode syntax, Microsoft.CodeAnalysis.CSharp.Symbol methodOrIndexer, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol optionalParametersMethod, bool expanded, Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol&gt; missingParameters, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder&lt;Microsoft.CodeAnalysis.Operations.IArgumentOperation&gt; argumentsBuilder) Line 1124	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.LocalRewriter.BuildArgumentsInEvaluationOrder(Microsoft.CodeAnalysis.Operations.CSharpOperationFactory operationFactory, Microsoft.CodeAnalysis.SyntaxNode syntax, Microsoft.CodeAnalysis.CSharp.Symbol methodOrIndexer, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol optionalParametersMethod, bool expanded, System.Collections.Immutable.ImmutableArray&lt;int&gt; argsToParamsOpt, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; arguments, Microsoft.CodeAnalysis.CSharp.Binder binder) Line 799	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder(Microsoft.CodeAnalysis.Operations.CSharpOperationFactory operationFactory, Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.SyntaxNode syntax, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; arguments, Microsoft.CodeAnalysis.CSharp.Symbol methodOrIndexer, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol optionalParametersMethod, bool expanded, System.Collections.Immutable.ImmutableArray&lt;int&gt; argsToParamsOpt, bool invokedAsExtensionMethod) Line 595	C#	Symbols loaded.
&gt;	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(Microsoft.CodeAnalysis.CSharp.BoundNode boundNode, Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.Symbol methodOrIndexer, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol optionalParametersMethod, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; boundArguments, System.Collections.Immutable.ImmutableArray&lt;string&gt; argumentNamesOpt, System.Collections.Immutable.ImmutableArray&lt;int&gt; argumentsToParametersOpt, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.RefKind&gt; argumentRefKindsOpt, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol&gt; parameters, bool expanded, Microsoft.CodeAnalysis.SyntaxNode invocationSyntax, bool invokedAsExtensionMethod) Line 137	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateBoundIndexerAccessOperation.AnonymousMethod__1() Line 412	C#	Symbols loaded.
 	[External Code]		Annotated Frame
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.LazyPropertyReferenceExpression.ArgumentsImpl.get() Line 4181	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BasePropertyReferenceExpression.Arguments.get() Line 4129	C#	Symbols loaded.
 	Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.VisitPropertyReference(Microsoft.CodeAnalysis.Operations.IPropertyReferenceOperation operation) Line 834	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.LazyPropertyReferenceExpression.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 4185	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 36	C#	Symbols loaded.
 	Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 266	C#	Symbols loaded.
 	Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.GetOperationTree(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.IOperation operation, int initialIndent) Line 51	C#	Symbols loaded.
 	Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.AppendOperationTree(Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.SyntaxNode node, System.Text.StringBuilder actualTextBuilder, int initialIndent) Line 231	C#	Symbols loaded.
 	Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.VerifyOperationTree(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.SyntaxNode node, string expectedOperationTree) Line 163	C#	Symbols loaded.
 	Roslyn.Compilers.CSharp.Semantic.UnitTests.dll!Microsoft.CodeAnalysis.CSharp.UnitTests.SemanticErrorTests.CS0856ERR_IndexedPropertyRequiresParams01() Line 12550	C#	Symbols loaded.
`</Code>
    <Description>``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>23004</IssueID>
        <PullRequestID>23028</PullRequestID>
        <Title>More fixes for IOperation tree.</Title>
        <Description>Fixes #23004.
Fixes #23009.
Related to #22548 and #22229.

vso : </Description>
        <CreatedDate>06/11/2017</CreatedDate>
        <ClosedDate>07/11/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>23004</IssueID>
            <PullRequestID>23028</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>23004</IssueID>
            <PullRequestID>23028</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>23004</IssueID>
            <PullRequestID>23028</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>23001</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>23001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Fix SemanticModel.GetOperation to return distinct Ioperation nodes for distinct syntax nodes</Title>
    <CreatedDate>03/11/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>23001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>23001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>23001</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>found by @AlekseyTs 

I looked at some failures flagged by the verifier added by PR 
It looks like many of them are caused by the fact that our implementation adjusts the passed-in syntax node by using SyntaxFactory.GetStandaloneNode method:
        /// &lt;summary&gt;
        /// Gets the containing expression that is actually a language expression and not just typed
        /// as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side
        /// of qualified names and member access expressions are not language expressions, yet the
        /// containing qualified names or member access expressions are indeed expressions.
        /// Similarly, if the input node is a cref part that is not independently meaningful, then
        /// the result will be the full cref.
        /// &lt;/summary&gt;
        internal static CSharpSyntaxNode GetStandaloneNode(CSharpSyntaxNode node)

For example, for a qualified name “a.b”, if used syntax node corresponds just to “b” part, we expand it to “a.b” before trying to locate IOperation node for it. 
That means that passing “a.b” and passing “b” returns the same IOperation node, which is associated with “a.b”. This potentially can confuse consumers that expect to get distinct IOperation nodes for distinct syntax nodes. Should we stop doing this expansion? Or should we treat cases like this as an exception to the rule?

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>23001</IssueID>
        <PullRequestID>22917</PullRequestID>
        <Title>Hook up compiler tests for IOperation verification</Title>
        <Description>This hooks up existing compiler tests to validate IOperation, but doesn't enabled it in build/tests. To enable the extra validation, you have to either define the constant `TEST_IOPERATION_INTERFACE` when invoking msbuild, or add `-testIOperation` switch to build.ps1, e.g. `build.cmd -build -test32 -test64 -testIOperation`.

Right now it only checks one of the invariant, i.e.
"IOperation returned by GetOperation(syntaxnode) will have same syntaxnode as the given syntaxnode (IOperation.Syntax == syntaxnode)".



</Description>
        <CreatedDate>30/10/2017</CreatedDate>
        <ClosedDate>31/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>23001</IssueID>
            <PullRequestID>22917</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>23001</IssueID>
            <PullRequestID>22917</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>23001</IssueID>
            <PullRequestID>22917</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22994</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Wrong error message for `in ref` parameters</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>10/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22994</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 


**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>22989</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>22989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Solution Load Perf </Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>13/11/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>22989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>- [ ] [483683 ]( Roslyn off HostObject initialization 
- [ ] [501654]( Initialize Roslyn off UI thread, free-threaded API (Legacy, CPS, LSL)


</Description>
  </Issue>
  <Issue>
    <IssueID>22988</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>22988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Lambda conversion when argument is parenthesized fails in VB.</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>13/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
Fails with a duplicate explicit syntax node expression. This is because it's not considered a delegate creation conversion, as the operand is a BoundParenthesizedExpression.
</Description>
  </Issue>
  <Issue>
    <IssueID>22981</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use expression-bodied member doesn't work for local functions</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>31/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22981</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If I have a single-line local function, we don't offer to make it into an expression-bodied member. We do offer this for single-line methods, though.</Description>
  </Issue>
  <Issue>
    <IssueID>22980</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Duplicate explicit operation node for same syntax for code with invalid collection initializer</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22980</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        &lt;CompilerTrait(CompilerFeature.IOperation)&gt;
        &lt;Fact, WorkItem(22967, "https://github.com/dotnet/roslyn/issues/22967")&gt;
        Public Sub ObjectCreationWithInvalidCollectionInitializer()
            Dim source = &lt;![CDATA[
Class C
    Public Sub M1()
        Dim x1 = New C With {.MissingField = {x = 1}}'BIND:"New C With {.MissingField = {x = 1}}"
    End Sub
End Class]]&gt;.Value

            Dim expectedOperationTree = &lt;![CDATA[
IObjectCreationOperation (Constructor: Sub C..ctor()) (OperationKind.ObjectCreation, Type: C, IsInvalid) (Syntax: 'New C With  ...  = {x = 1}}')
  Arguments(0)
  Initializer: 
    IObjectOrCollectionInitializerOperation (OperationKind.ObjectOrCollectionInitializer, Type: C, IsInvalid) (Syntax: 'With {.Miss ...  = {x = 1}}')
      Initializers(1):
          ISimpleAssignmentOperation (OperationKind.SimpleAssignment, Type: ?, IsInvalid) (Syntax: '.MissingField = {x = 1}')
            Left: 
              IInvalidOperation (OperationKind.Invalid, Type: ?, IsInvalid, IsImplicit) (Syntax: '.MissingField = {x = 1}')
                Children(1):
                    IInvalidOperation (OperationKind.Invalid, Type: ?, IsInvalid) (Syntax: 'MissingField')
                      Children(1):
                          IInstanceReferenceOperation (OperationKind.InstanceReference, Type: C, IsInvalid, IsImplicit) (Syntax: 'New C With  ...  = {x = 1}}')
            Right: 
              IInvalidOperation (OperationKind.Invalid, Type: ?, IsInvalid, IsImplicit) (Syntax: '{x = 1}')
                Children(1):
                    IOperation:  (OperationKind.None, Type: null, IsInvalid) (Syntax: '{x = 1}')
                      Children(2):
                          ILiteralOperation (OperationKind.Literal, Type: System.Int32, Constant: 1, IsInvalid, IsImplicit) (Syntax: '{x = 1}')
                          IArrayInitializerOperation (1 elements) (OperationKind.ArrayInitializer, Type: null, IsInvalid) (Syntax: '{x = 1}')
                            Element Values(1):
                                IBinaryOperation (BinaryOperatorKind.Equals, Checked) (OperationKind.BinaryOperator, Type: ?, IsInvalid) (Syntax: 'x = 1')
                                  Left: 
                                    IInvalidOperation (OperationKind.Invalid, Type: ?, IsInvalid) (Syntax: 'x')
                                      Children(0)
                                  Right: 
                                    ILiteralOperation (OperationKind.Literal, Type: System.Int32, Constant: 1) (Syntax: '1')
]]&gt;.Value

            Dim expectedDiagnostics = &lt;![CDATA[
BC30456: 'MissingField' is not a member of 'C'.
        Dim x1 = New C With {.MissingField = {x = 1}}'BIND:"New C With {.MissingField = {x = 1}}"
                              ~~~~~~~~~~~~
BC30451: 'x' is not declared. It may be inaccessible due to its protection level.
        Dim x1 = New C With {.MissingField = {x = 1}}'BIND:"New C With {.MissingField = {x = 1}}"
                                              ~
]]&gt;.Value

            VerifyOperationTreeAndDiagnosticsForTest(Of ObjectCreationExpressionSyntax)(source, expectedOperationTree, expectedDiagnostics)
        End Sub


Got:

Duplicate explicit node for syntax (302): {x = 1}
`</Code>
    <Description>Execute the below IOperation unit test without any source changes (test not yet added):

``</Description>
  </Issue>
  <Issue>
    <IssueID>22979</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Naming for IMemberInitializerOperation</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>22979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  and  about the confusion.</Description>
  </Issue>
  <Issue>
    <IssueID>22978</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Change Visual studio build path for Ram disk</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>25/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>22978</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently I have Visual Studio 17 V 15.4.2
Is it possible to set different build path for projects? for example instead of 

`C:\Users\[UserName]\source\repos\[MyProject]\[bin|obj]`

move it on

`M:\Users\[UserName]\source\repos\[MyProject]\[bin|obj]`

note that project it self is inside `C` but temporary files are moved somewhere else. I have drive `M` which is a 16GB ram disk.

**Benefits of using RAM disk**

 - faster build times (no real IO)
 - SSD doesn't wear out with repetitive rebuilds.
 - projects are inherently cleaned up (which brings following benefits)
 - share faster, your projects are not filled with unnecessary files so that you can easily share folders with others. (code size is usually less than 1MB but build objects can go beyond 1GB)
 - fast backups, for same reason your project folders always remain cleaned up and you can backup project much faster. (especially when you have many projects, eg. you would only backup 100MB istead of 10GB)
 - less chance of creating locked files. (which cause build desync, errors etc) in that case formatting ramdisk is easier than mucking with VS settings or restarting it.

**Drawbacks:**
 - there maybe some inconsistency using environment variables related to project location.
 - project build targets may not work if they are only bound to project path. (there are work arounds, I think this has room for discussion)
 - you need much more RAM, in my case I have 32GB which I can spare 16GB for it.
 - if you reset VS or computer you loose compiled objects and you have to rebuild (once)

but in most scenarios benefits of using RAM disk overweight its drawbacks. Note that VS team doesn't have to do anything about RAM disk. all they have to do is to make it possible change path of build into parent drive or folder.

This was originally posted [here
]( if you have answer to that I appreciate to get your answer, else this proposal remains as feature request.

thanks in advance, best regards.</Description>
  </Issue>
  <Issue>
    <IssueID>22970</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>22970</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unique name for Roslyn's ServiceHub service</Title>
    <CreatedDate>02/11/2017</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22970</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>"remoteHostService" is perhaps one of the more generic names one might imagine for a servicehub service, and as the entire IDE shares one common namespace, and collisions like this take out both parties, it would be far preferable if Roslyn came up with something more unique sounding. Perhaps “RemoteRoslynLanguageService”?</Description>
  </Issue>
  <Issue>
    <IssueID>22969</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>22969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Redundant code in C# lowering</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>20/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>22969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
                    if (operandType.TypeKind == TypeKind.TypeParameter)
                    {
                        // We need to box the type parameter even if it is a known
                        // reference type to ensure there are no verifier errors
                        rewrittenOperand = MakeConversionNode(
                            syntax: rewrittenOperand.Syntax,
                            rewrittenOperand: rewrittenOperand,
                            conversion: Conversion.Boxing,
                            rewrittenType: _compilation.GetSpecialType(SpecialType.System_Object),
                            @checked: false);
                    }

                    return MakeNullCheck(syntax, rewrittenOperand, BinaryOperatorKind.NotEqual);


but the callee, `MakeNullCheck`, also does this

 c#
            if ((object)exprType != null)
            {
                if (exprType.Kind == SymbolKind.TypeParameter)
                {
                    // Box type parameters.
                    rewrittenExpr = MakeConversionNode(syntax, rewrittenExpr, Conversion.Boxing, objectType, @checked: false);
                }
`</Code>
    <Description>We have the following in `MakeIsOperator`

``

so we should be able to remove the redundant invocation of `MakeConversionNode` from the caller.
</Description>
  </Issue>
  <Issue>
    <IssueID>22967</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InvalidCastException in operation factory code (CreateBoundMemberInitializerOperation) while executing latest FxCop operation analyzers</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>05/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>22967</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State	Detail Description
Warning	AD0002	Analyzer driver threw an exception of type 'System.InvalidCastException' with message 'Unable to cast object of type 'Microsoft.CodeAnalysis.Operations.LazyInvalidOperation' to type 'Microsoft.CodeAnalysis.Operations.IMemberReferenceOperation'.'.	Newtonsoft.Json.Tests(net35)		1	Active	Analyzer driver threw the following exception:
'System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.Operations.LazyInvalidOperation' to type 'Microsoft.CodeAnalysis.Operations.IMemberReferenceOperation'.
   at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.&lt;&gt;c__DisplayClass49_0.&lt;CreateBoundMemberInitializerOperation&gt;b__0()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Operations.BaseMemberInitializerExpression.&lt;get_Children&gt;d__6.MoveNext()
   at Microsoft.CodeAnalysis.Operations.OperationExtensions.&lt;Descendants&gt;d__3.MoveNext()
   at System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(IEnumerable`1 items)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.GetOperationsToAnalyze(ImmutableArray`1 operationBlocks)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisStateOpt, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)
-----
'.
`</Code>
    <Description>**Version Used**: Install latest d15rel drop 27031.1.d15rel

**Steps to Reproduce**:

1. git clone 
2. add myget package feed for roslyn-analyzers: 
3. install latest preview of Microsoft.CodeAnalysis.FxCopAnalyzers version 2.6.0-beta1-62231-02 to all projects in solution
4. enable FSA for C#

Got the following AD0002 diagnostic for crash in Operation factory while executing analyzers:

``</Description>
  </Issue>
  <Issue>
    <IssueID>22964</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>22964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation.Parent throws System.NullReferenceException on a global statement</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22964</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [CompilerTrait(CompilerFeature.IOperation)]
        [Fact]
        public void GlobalStatement_Parent()
        {
            var source =
@"
System.Console.WriteLine();
";
            var compilation = CreateStandardCompilation(source, options: TestOptions.ReleaseExe.WithScriptClassName("Script"), parseOptions: TestOptions.Script);
            compilation.VerifyDiagnostics();

            var tree = compilation.SyntaxTrees.Single();
            var statement = tree.GetRoot().DescendantNodes().OfType&lt;StatementSyntax&gt;().Single();
            var model = compilation.GetSemanticModel(tree);
            var operation = model.GetOperationInternal(statement);

            Assert.Equal(OperationKind.ExpressionStatement, operation.Kind);
            Assert.Null(operation.Parent);
        }


System.NullReferenceException: 'Object reference not set to an instance of an object.'


&gt;	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBindingRoot(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 1336	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBindingRootOrInitializer(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 979	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 964	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 469	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.SemanticModel.GetOperationInternal(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 86	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operation.SearchParentOperation() Line 278	C#	Symbols loaded.
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operation.Parent.get() Line 47	C#	Symbols loaded.
 	Roslyn.Compilers.CSharp.Semantic.UnitTests.dll!Microsoft.CodeAnalysis.CSharp.UnitTests.IOperationTests.GlobalStatement_Parent() Line 146	C#	Symbols loaded.
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>22962</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0034 C#7 v.latest: message "'default' can be simplified" is incorrect for struct</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22962</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22962</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22962</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In C#7 &amp;quot;latest minor version,&amp;quot; the suggested message &amp;quot;'default' expression can be simplified&amp;quot; is incorrectly given when a struct (value-type) is passed as an Object-typed function argument.In other words, if you have...    static void foo(Object z) { }Then you cannot &amp;quot;simplify&amp;quot; the use of 'default(TimeSpan)' in the following because 'null' will be passed to the function instead of the boxed value-type.    foo(default(TimeSpan));This simplification is incorrectly suggested as a &amp;quot;Message&amp;quot; in the vs2017 Error List._This issue has been moved from VSTS ticketId: 517409__These are the original issue comments:_Glenn Slayden on 10/30/2017, 03:48 PM (45 hours ago): &lt;p&gt;In fact, the problem is quite a bit more pervasive. The incorrect suggestion &lt;strong&gt;IDE0034 &lt;/strong&gt;is also given for the simple line of &lt;strong&gt;C#7&lt;/strong&gt; code:&lt;/p&gt;&lt;pre&gt;Object x = default(TimeSpan);&lt;/pre&gt;&lt;p&gt;Obviously, this is not at all the same as the simplification suggested by the vs2017 IDE...&lt;/p&gt;&lt;pre&gt;Object x = default;   // incorrect result of accepting suggestion IDE0034&lt;/pre&gt;&lt;p&gt;In the latter case, `x` ends up as a true &lt;em&gt;null reference&lt;/em&gt; (i.e. the actual binary bits in `x` are all zero), whereas in the original line (viz., prior to the incorrect application of &lt;strong&gt;IDE0034&lt;/strong&gt;), `x` would end up referring to a &lt;em&gt;boxed value-type&lt;/em&gt; in the GC heap.&lt;/p&gt;_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>22960</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22960</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unify IOperation API for do an while loop statements</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22960</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22960</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22960</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This was concluded in last design meeting but we did not have a tracking issue.</Description>
  </Issue>
  <Issue>
    <IssueID>22959</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Work needed to properly split EditorFeatures / Wpf</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>15/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22959</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This PR lists some changes that we needed to do to move MonoDevelop to Roslyn 2.6.0:


 - [x] Need to export InlineRenameService
 - [ ] Need to export PreviewFactoryService
 - [ ] Need to export RoslynWaitIndicator
 - [ ] Need to export SuggestedActionCategoryRegistryService
 - [ ] Need to export IPeekResultFactory
 - [ ] Need to export ISignatureHelpBroker
 - [ ] remove the second generic parameter from IIntelliSensePresenter: 

 - [ ] Remove MS.VS.Text.UI.Wpf.dll reference from MS.CA.VisualBasic.EditorFeatures.dll

 - [ ] Investigate removing reference to MS.VS.RemoteControl.dll 14.0.0.0 from EditorFeatures</Description>
  </Issue>
  <Issue>
    <IssueID>22957</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add C# 7.3 to build settings drop-down</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>30/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22957</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Until we come up with a design where the build settings drop-down is populated by querying Roslyn, we have to add entries with every new LanguageVersion...

Once a project-system branch is available for C# 7.3, we should add the proper entry.
Here's the change we did for C# 7.2: 

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>22956</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0034  default expression can be simplified</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The statementint? x = default(int)Generates a warning IDE0034 'default' expression can be simplified and the suggestion is to replace 'default(int)' with just 'default'. This is wrong because defalt(int) is 0 while default for int? is null._This issue has been moved from VSTS ticketId: 516774__These are the original issue comments:_(no comments)_These are the original issue solutions:_(no solutions)</Description>
  </Issue>
  <Issue>
    <IssueID>22955</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>22955</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactoring Attribute: AttributeAttribute</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22955</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22955</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22955</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22955</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.5.0 Preview #2.0
**Steps to Reproduce**:
Use this code:
``
Position your cursor on "SomethingAttribute" and press "Control+R R" to rename it.  You'll notice that it only selects "the word "Something" for the renaming.

Give it a name of "CustomAttribute".
The class is incorrectly renamed to "CustomAttributeAttribute"


![rename attribute](

</Description>
  </Issue>
  <Issue>
    <IssueID>22952</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove SynthesizedImplementationMethod.AddSynthesizedAttributes</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22952</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Remove `SynthesizedImplementationMethod.AddSynthesizedAttributes`.

See 
</Description>
  </Issue>
  <Issue>
    <IssueID>22951</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio crashing when open "App Manifest Designer"</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>26/01/2018</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Visual Studio Professional 2015 
Version 14.0.25431.0.1 Update 3
**Steps to Reproduce**:

1. Create new UWP Blank App
2. Go to solution folder and find this file "*.Shared.projitems" in shared project
3. Edit file. Add some items from parent folder ("..\\..\\"). For Example:
``
4. Go to "*.Windows" project in Visual Studio
5. Open Package.appxmanifest in "App Manifest Designer"

**Actual Behavior**:
Visual Studio crashes and reloaded!

**Example**:
Also you can look bug app on github:
Repository: 
Issue: 



</Description>
  </Issue>
  <Issue>
    <IssueID>22950</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>22950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error CS8338 on (in this T) where T : struct</Title>
    <CreatedDate>01/11/2017</CreatedDate>
    <ClosedDate>07/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>22950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>22950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
static class Extensions
{
    // Error CS8338  The first parameter of an 'in' extension method 'In' must be a value type.
    public static void In&lt;T&gt;(in this T value) where T : struct { }
    // OK
    public static void Ref&lt;T&gt;(ref this T value) where T : struct { }
}

static class Static
{
    // OK
    public static void In&lt;T&gt;(in T value) where T : struct { }
    // OK
    public static void Ref&lt;T&gt;(ref T value) where T : struct { }
}
`</Code>
    <Description>**Version Used**: 

15.5.0 Preview 2.0

**Steps to Reproduce**:

``

**Expected Behavior**:

[The spec]( says 

&gt; the this parameter by reference, as long as the type is known to be a struct type (I.E. struct or **a generic type with struct constraint**).

so `(in this T value) where T : struct` should be allowed.

**Actual Behavior**:

Error CS8338
</Description>
  </Issue>
  <Issue>
    <IssueID>22672</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0039 'Use local function' breaks code</Title>
    <CreatedDate>12/10/2017</CreatedDate>
    <ClosedDate>13/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22672</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft Visual Studio Professional 2017 Preview (2)
Version 15.5.0 Preview 1.0
VisualStudio.15.Preview/15.5.0-pre.1.0+27009.1
Microsoft .NET Framework
Version 4.7.02046


**Steps to Reproduce**:

1. Paste the following code into VS. 
cs
using System;
using System.Linq.Expressions;

namespace ConsoleApp1
{
  class Program
  {
    static void Main(string[] args)
    {
      new Enclosing&lt;string&gt;.Class&lt;Program&gt;().Caller();
    }
  }

  class Enclosing&lt;T&gt; where T : class
  {
    delegate T MyDelegate(T t = null);
    static void Callee(MyDelegate d) =&gt; d(default(T));

    public class Class&lt;T&gt; where T : class
    {
      public void Caller()
      {
        MyDelegate local = x =&gt; x;
        Console.WriteLine("");

        var doubleDelegate = local + local;
        local.Invoke();
        Console.WriteLine(nameof(local.ToString));
        Expression&lt;Action&gt; expression = () =&gt; local(null);
        Callee(local);
      }
    }
  }
}

2. Convert `MyDelegate local = x =&gt; x;` to local function as suggested by IDE0039

**Expected Behavior**:
Either IDE0039 not suggested or code is compilable after such change or conflicts are shown.

**Actual Behavior**:
1. No conflicts:
![image](https://user-images.githubusercontent.com/5566206/31494299-5f6853a0-af5b-11e7-9e76-4ac575d8c541.png)
2. Code is completely broken:
cs
using System;
using System.Linq.Expressions;

namespace ConsoleApp1
{
  class Program
  {
    static void Main(string[] args)
    {
      new Enclosing&lt;string&gt;.Class&lt;Program&gt;().Caller();
    }
  }

  class Enclosing&lt;T&gt; where T : class
  {
    delegate T MyDelegate(T t = null);
    static void Callee(MyDelegate d) =&gt; d(default(T));

    public class Class&lt;T&gt; where T : class
    {
      public void Caller()
      {
        T local(T x) =&gt; x;
        Console.WriteLine("");

        var doubleDelegate = local + local; // error CS0019
        local.Invoke();  // error CS0119
        Console.WriteLine(nameof(local.ToString)); // error CS0019
        Expression&lt;Action&gt; expression = () =&gt; local(null); // error CS8110
        Callee(local); // error CS1503
      }
    }
  }
}



Error CS1503 Argument 1: cannot convert from 'method group' to 'Enclosing&lt;T&gt;.MyDelegate'
Error CS0019 Operator '+' cannot be applied to operands of type 'method group' and 'method group'
Error CS0119 'local(T)' is a method, which is not valid in the given context
Error CS0119 'local(T)' is a method, which is not valid in the given context
Error CS8110 An expression tree may not contain a reference to a local function
`</Code>
    <Description>**Version Used**: 
``</Description>
  </Issue>
  <Issue>
    <IssueID>22671</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>22671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No verifier spec is available for new codegen used for non-mutating structs</Title>
    <CreatedDate>12/10/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>22671</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.6.0.62126 (1758d50)

To support the new Roslyn behaviour updated verifier spec should be available also for readonly struct codegen (the similar case was by-ref returns). With that, we could update Mono verifier implementation not to reject newly generated code.

The request is extracted from </Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>22670</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Method including local function creates a static instead of instance method</Title>
    <CreatedDate>12/10/2017</CreatedDate>
    <ClosedDate>16/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>22670</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public class Foo
{
    private int bar;

    private void test()
    {
        void baz(int v) =&gt; Console.WriteLine(v);
        baz(bar);
    }
}

Run "Extract Method" on both lines in `test`

**Expected Behavior**:
cs
public class Foo
{
    private int bar;

    private void test()
    {
        NewMethod();
    }

    private void NewMethod()
    {
        void baz(int v) =&gt; Console.WriteLine(v);
        baz(bar);
    }
}


**Actual Behavior**:
cs
public class Foo
{
    private int bar;

    private void test()
    {
        NewMethod();
    }

    private static void NewMethod() // notice "static"
    {
        void baz(int v) =&gt; Console.WriteLine(v);
        baz(bar);
    }
}
`</Code>
    <Description>**Version Used**: VisualStudio 15.4.0

**Steps to Reproduce**:

``

`NewMethod` is marked as `static` so accessing the instance member `bar` becomes a compilation error</Description>
  </Issue>
  <Issue>
    <IssueID>22668</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Elvis Operator compiler bug: cannot chain from Nullable(Of T).</Title>
    <CreatedDate>12/10/2017</CreatedDate>
    <ClosedDate>12/10/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
public struct Instant
{
    public long ToUnixTime() =&gt; 42;
}


With the _nullable_ struct, try to use elvis as follows:
csharp
Instant? x = null;
var y = x?.ToUnixTime()?.ToString();


**Expected Behavior**:
It should compile.

**Actual Behavior**:
It doesn't compile.

A compiler error occurs at the second elvis:
`error CS0023: Operator '?' cannot be applied to operand of type 'long'`

The compiler misidentifies the `?.ToUnixTime()` return type as `long`.

Contrast to the equivalent code:
csharp
Instant? x = null;
var intermediate = x?.ToUnixTime();
var y = intermediate?.ToString();
`</Code>
    <Description>**Version Used**: 
Visual Studio 15.3.4

**Steps to Reproduce**:
Make a struct as follows:
``

The compiler correctly identifies the intermediate type as `long?`.</Description>
  </Issue>
  <Issue>
    <IssueID>22663</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Linux] error MSB6006: "csc.exe" exited with code 8</Title>
    <CreatedDate>11/10/2017</CreatedDate>
    <ClosedDate>04/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22663</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: .NET Command Line Tools (2.0.2)

.NET Core 1.1.2

dotnet --info:

``

I can't build my project in Linux.
Build log: 
Project: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22663</IssueID>
        <PullRequestID>27349</PullRequestID>
        <Title>Csc/Vbc Tasks should log stderr as error</Title>
        <Description>@nguerrera Would you have some tips for setting up a CLI with a custom-build version of Roslyn, so that I can validate the fix?

### Customer scenario
If you build a CLI project that causes the compiler to crash (for instance, stackoverflow on a very deep fluent expression, or any other crash), you get an error code, but not error message or stacktrace.

### Bugs this fixes
Fixes 
Fixes 

### Workarounds, if any
It is possible to recover the details of the failure with the following steps;
1. run the problematic `build` command, but add the option for binary logging `/bl` (for example, `dotnet build /bl`)
2. assuming this reproduced the issue, open the `msbuild.binlog` file with the [binary log viewer](
3. the log viewer should show the failed `Csc` task (as shown below)
4. you can view and copy the command-line arguments to a text file `repro.rsp`, removing the first two chunks (the first one for "dotnet.exe" and the second one for "csc.dll")
5. re-use those two chunks to run `dotnet.exe csc.dll @repro.rsp`
6. this should repro, but also print out the compiler diagnostics

![image](

### Risk
### Performance impact
Low. We're just setting an option for how the MSBuild ToolTask reports on outputs to `stderr`. The compiler doesn't normally output to `stderr`.

### Is this a regression from a previous update?
No.

### How was the bug found?
Reported by customers.

Tagging @rainersigwald  @jaredpar</Description>
        <CreatedDate>01/06/2018</CreatedDate>
        <ClosedDate>04/06/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>22663</IssueID>
            <PullRequestID>27349</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22663</IssueID>
            <PullRequestID>27349</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>27349</PullRequestID>
            <IssueID>22663</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22662</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22662</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Diagnostic when error in nested lambda is annoyingly large</Title>
    <CreatedDate>11/10/2017</CreatedDate>
    <ClosedDate>19/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22662</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>22662</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22662</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the code sample below, two errors are produced:
``
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>22660</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Confusing error message for wildcard in [AssemblyVersion] on .Net Core</Title>
    <CreatedDate>11/10/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Determinism</Name>
        <IssueID>22660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>22660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22660</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>xml
   &lt;Project Sdk="Microsoft.NET.Sdk"&gt;
     &lt;PropertyGroup&gt;
       &lt;OutputType&gt;Exe&lt;/OutputType&gt;
       &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
       &lt;GenerateAssemblyInfo&gt;False&lt;/GenerateAssemblyInfo&gt;
     &lt;/PropertyGroup&gt;
   &lt;/Project&gt;
   

   Program.cs:

   c#
   using System;
   using System.Reflection;

   [assembly: AssemblyVersion("1.0.*")]

   class Program
   {
       static void Main()
       {
           Console.WriteLine(typeof(Program).Assembly.GetName().Version);
       }
   }
   `</Code>
    <Description>**Version Used**: .Net Core 2.0.0

**Steps to Reproduce**:

1. Create the following .Net Core 2.0 application:

   csproj:

   ``
2. `dotnet build`

**Actual Behavior**: `dotnet build` produces a confusing error message:

&gt; Program.cs(4,28): error CS7034: The specified version string does not conform to the required format - major[.minor[.build[.revision]]]

**Expected Behavior**: The error clearly explains that the actual problem is that [wildcard assembly versions are not allowed for deterministic builds](

Adding `&lt;Deterministic&gt;False&lt;/Deterministic&gt;` to the csproj indeed makes the code compile.

---

The question that prompted this issue: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22660</IssueID>
        <PullRequestID>22973</PullRequestID>
        <Title>Clarify error for AssemblyVersion with wildcard when deterministic</Title>
        <Description>Fixes </Description>
        <CreatedDate>02/11/2017</CreatedDate>
        <ClosedDate>03/11/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22660</IssueID>
            <PullRequestID>22973</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>22973</PullRequestID>
            <IssueID>22660</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22659</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>22659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reduce allocation requirements in WriteObjectWorker</Title>
    <CreatedDate>11/10/2017</CreatedDate>
    <ClosedDate>23/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>22659</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The dictionaries used by `WriteObjectWorker` can become large, and occasionally fail when the IDE is under memory pressure. We should identify sets of objects which cannot be multiply-referenced within the object getting serialized, and avoid adding these objects to the map.



:link: Watson (internal issue for this): </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22659</IssueID>
        <PullRequestID>26156</PullRequestID>
        <Title>In Object serialization, do not keep track of non-reusable green nodes.</Title>
        <Description>### Reducing chances of OutOfMemory crash upon serialization/deserialization of syntax trees.

Serialization/deserialization allocates temporary tables to track potentially reused objects - to reduce the size of serialized streams and to avoid completely expanding de-duplicated nodes after the round-trip.
The additional memory requirements are proportional to the size of the tree and generally not a problem. However when running close to limits it was reported to cause crashes.

The current algorithm is very conservative and tries to keep track of _every_ node in the tree. There is a good degree of redundancy here since some nodes are clearly not reusable.

The fix here checks for common and easily detectable cases where nodes are not reusable - when nodes have diagnostics or doc comments or the size of tokens exceeds the limits when scanner will not consider them reusable, and so on - just a number of known and simple criteria.

NOTE: precise separation on not-reusable and reusable is not a goal here as that could be hard to do and going beyond common cases will yield diminishing benefits. 
We only need to remove the most common redundancies. Being very precise would just result in scenarios where we can deserialize successfully and then OOM on the next operation that works with the tree and needs some memory anyways.

### Bugs this fixes

Fixes:#22659

### Workarounds, if any

No workarounds. When working close to OOM limits, any operation that may trigger serialization (closing/opening file views for example) may become source of instability.

### Risk

Risk is low, since the fix does not interfere with overall serialization process, it only uses conservative checks to omit clearly not reusable nodes from filling up the object reference tables. 

### Performance impact

Perf impact is low. 
Next to the whole serialization/deserialization process, the additional checks should be very cheap. 
In fact, not filling up the tables with redundant objects may have positive impact on the performance, depending on a scenario.

### Is this a regression from a previous update?

N/A

### Root cause analysis

Serialization/deserialization by design require additional memory. To a degree any such action a would be dangerous when close to the limits and nothing can be done to completely eliminate that. 
It is also somewhat hard to estimate the hazard.

We are acting on this since there are known crashes and since there are fairly easy ways to reduce the transient memory consumption for this scenario.

### How was the bug found?

Crash reports, WER.

### Test documentation updated?

N/A</Description>
        <CreatedDate>13/04/2018</CreatedDate>
        <ClosedDate>18/04/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>22659</IssueID>
            <PullRequestID>26156</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22659</IssueID>
            <PullRequestID>26156</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22654</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>22654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suboptimal code for type pattern matching in a switch statement</Title>
    <CreatedDate>11/10/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>22654</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public void SwitchBasedPatternMatching2(object o)
{
    switch (o)
    {
        case int n when n == 1:
            Console.WriteLine("1"); break;
        case int n when n == 2:
            Console.WriteLine("2"); break;
        case string s:
            Console.WriteLine("s"); break;
    }
}


The generated code roughly looks like this:

csharp
public void SwitchBasedPatternMatching2(object o)
{
    if ( o != null)
    {
        bool isInt = o is int;
        int num = isInt ? ((int)o) : 0;
        if (isInt)
        {
            if (num == 1)
            {
                Console.WriteLine("1");
                return;
            }
            if (num == 2)
            {
                Console.WriteLine("2");
                return;
            }
        }
        string text;
        if ((text = (o as string)) != null)
        {
            Console.WriteLine("s");
        }
    }
}


If the switch statement has more than one consecutive type patterns with the same type the compiler will check the type only once and will check different predicates inside the if statement. In the case above it means that only one unboxing operation will happen.

But if the cases clauses intermixed with each other, then the code is not that optimal:

csharp
public void SwitchBasedPatternMatching(object o)
{
    switch (o)
    {
        case int n when n == 1:
            Console.WriteLine("1"); break;
        case string s:
            Console.WriteLine("s"); break;
        case int n when n == 2:
            Console.WriteLine("2"); break;
    }
}


In this case, the generated code checks that `o` is `int` two times:

csharp
public void SwitchBasedPatternMatching(object o)
{
    if (o != null)
    {
        bool isInt1 = o is int;
        int num = isInt1 ? ((int)o) : 0;
        if (isInt1 &amp;&amp; num == 1)
        {
            Console.WriteLine("1");
            return;
        }
        string text;
        if ((text = (o as string)) != null)
        {
            Console.WriteLine("s");
            return;
        }
        bool isInt2 = o is int;
        num = (isInt2 ? ((int)o) : 0);
        if (isInt2 &amp;&amp; num == 2)
        {
            Console.WriteLine("2");
        }
    }
}
``</Code>
    <Description>The compiler is smart enough to group different clauses with the same type together:

``

It is clear that the order of the case clauses matters know. But I can't see why the compiler can't group different cases together based on a type and generate effectively the same code as for the case before.

Is there a use case when this optimization will have an observable side effect or there is a room for optimization here?</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22654</IssueID>
        <PullRequestID>25567</PullRequestID>
        <Title>recursive-patterns(9): Add tests and a slight optimization</Title>
        <Description>These are the iterations that are new in this PR:

-  Add a test to demonstrate that pattern-matching against a decimal constant is at least as efficient as simply using ==.
-  Demonstrate absence of redundant null check (Fixes #16878)
-  Verify that we do not box for integer "is constant" (Fixes #12813)
-  Add a test to demonstrate that we do not perform redundant type checks (Fixes #22654)
-  Add test to verify code generation for the discard designator in a pattern (Fixes #15437)
-  Add a test demonstrating that there is no redundant HasValue test (Fixes #19150)
-  Add a test to verify the number of times we box in the face of generics. (Fixes #19153)
-  Optimize a type test followed by a cast, a common situation in pattern-matching. (Fixes #20641)
-  Update comments in the binder to reflect that a qualified name can appear as an expression. (Fixes #16616)
- d32d611f415a29d150b79093735e4101167269a4 Mark a test that confirms a bug fix (Fixes #9121)
-  Adjust a test to expect improved code

@cston @agocke Please review
/cc @dotnet/roslyn-compiler Additional reviews welcome!

</Description>
        <CreatedDate>18/03/2018</CreatedDate>
        <ClosedDate>29/03/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22654</IssueID>
            <PullRequestID>25567</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>22654</IssueID>
            <PullRequestID>25567</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>25567</PullRequestID>
            <IssueID>22654</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22650</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unbounded SQLite instances/connections contributing to OOM failures</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>14/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>22650</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.3

Currently we fail to bound the number of instances of the following types which are created at runtime:

* `SQLitePCL.sqlite3`
* `Microsoft.CodeAnalysis.SQLite.Interop.SqlConnection`

Associated with these types is a pair of allocations in the native heap. One is 64,000 bytes, and the other is 425,600 bytes. Ordinarily, this would not be a problem. However, it appears that it is possible for the number of connections to grow over time, resulting in overwhelming memory pressure stemming from the (mis-)use of SQLite. The following image shows one such case:

![image](


After fixing this for 15.5, we should port the fix to 15.4 servicing.</Description>
  </Issue>
  <Issue>
    <IssueID>22648</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Should `LoweredDynamicOperationFactory.GetArgumentInfo` handle `in`?</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>24/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22648</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This was spawned by reviewing code that makes use of `RefKind.Out` and asking whether it should handle `RefKind.In` as well.

``

Tagging @OmarTawfik to confirm this accurately describes what we tested.
FYI @VSadov </Description>
  </Issue>
  <Issue>
    <IssueID>22642</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>For `in` parameters non-virtual methods/delegates/etc, they should have modopt(In)</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22642</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>If you're a library author, and you already have such signature:

``

And you want to make use of the new `in` parameters, you cannot introduce an overload in the new API version that let's your users use it. Because they would be identical in IL.
Compiler should put the `modopt(In)` on signatures it doesn't put a `modreq(In)` on to enable overloading.

cc @tannergooding @jcouv </Description>
  </Issue>
  <Issue>
    <IssueID>22641</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Marshalling methods with `in` parameters should have [In] attribute</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>16/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22641</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As an optimization, compiler should place `[InAttribute]` if user didn't on `in` parameters in marshaling methods. This saves an extra copy by the run-time on method return. because right now, it is treated as an ordinary `ref`, and the value is copied in and out.

cc @tannergooding @jcouv </Description>
  </Issue>
  <Issue>
    <IssueID>22640</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Users should not be allowed to place [Out] on `in` parameters</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>16/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22640</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C {
    public void M([Out] in int x) {
    }
}
`</Code>
    <Description>``
**Expected:** a compiler error.
**Actual:** attribute is emitted.

cc @jcouv @tannergooding </Description>
  </Issue>
  <Issue>
    <IssueID>22639</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>22639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EditorServicesTest Assembly Failure</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22639</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failed in dev15.5-preview1-staging. Failed at the end of test assembly, not during a specific test.


``</Description>
  </Issue>
  <Issue>
    <IssueID>22635</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rewrite unnecessary code analyzer as a semantic model analyzer</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>24/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>22635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>22635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Current master branch

From @mavasani:

&gt; The problem seems to be in the implementation of the analyzer - it has been implemented as a block analyzer which will call the GetDiagnostics API on every single method block syntax node:  Instead it should be implemented as a SemanticModel analyzer that invokes the API just once for the entire syntax tree scope, just like unnecessary usings analyzer which also converts compiler diagnostics for unnecessary usings into hidden IDE diagnostics with unncessary tag: 
&gt;
&gt; Also calls for writing an analyzer to flag such an API usage pattern 😊 
</Description>
  </Issue>
  <Issue>
    <IssueID>22634</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Running roslyn in another process - dependency problem</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
    <IssueLabels />
    <Description>Hi,

I'm in situation when I can not use:

``
Is there a way do this programmatically because now I'm getting following error:
`"System.TypeLoadException - Could not load type System.Collections.Immutable.ImmutalbeArray1 from assembly "System.Collection.Immutable, Version=1.0.34.0 ..... )`"</Description>
  </Issue>
  <Issue>
    <IssueID>22633</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>22633</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add IOperation API for BoundDiscardExpression</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22633</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22633</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22633</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22633</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>22629</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to get the actual StartLine of a Method/Class having attributes</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>22629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>22629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.3.2

**Steps to Reproduce**:

1. In our code we are finding the start line of a Method or a Class based on the below code:
`node.GetLocation().GetMappedLineSpan().StartLinePosition.Line;`
here the node is SyntaxNode for the class/method in picture.
2. The above code works well for all the methods and classes who do not have any attribute decoration associated with it. But in case if the class / method is decorated with an attribute, the above code returns the start line as the first attribute decorated above the class /method.
3. We understand that when we have a attribute for a given class or a method, the attribute is part of the class / method declaration. 
``
4. In the above class, when we try to find the start line of the class **TestJob** using the code `node.GetLocation().GetMappedLineSpan().StartLinePosition.Line` we get the start line as 16 which is logical. 
But when we try to find the start line of the class **TestAnnotatedJob** using the code `node.GetLocation().GetMappedLineSpan().StartLinePosition.Line` we get the start line as 6 instead of 8, which though logical, but does not give the exact line number.

**Expected Behavior**:
Some mechanism in which we can get the actual line number of the start line for a class/method decorated with attribute.
 
**Actual Behavior**:
There is no mechanism which we can use.</Description>
  </Issue>
  <Issue>
    <IssueID>22628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suboptimal code for o is 42</Title>
    <CreatedDate>10/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public void BoxTwice(int n)
{
    if (n is 42) Console.WriteLine("n is 42");
}


Because the compiler generates the call to `object.Equals(42, o)`.

Similarly, if the `n` is `object`, the `is`-expression causes one boxing allocation when the similar switch statement causes no allocations:

csharp
public void BoxOnce(object o)
{
    if (o is 42) Console.WriteLine("o is 42");
}

public void NoBoxing(object o)
{
    switch (o)
    {
        case 42:
            Console.WriteLine("o is 42");
            break;
    }
}

The code gen is:

csharp
public void BoxOnce(object o)
{
    if (object.Equals(42, o))
    {
        Console.WriteLine("o is 42");
    }
}

public void NoBoxing(object o)
{
    object obj = o;
    if (obj != null)
    {
        object obj2 = obj;
        bool expr_10 = obj2 is int;
        int num = expr_10 ? ((int)obj2) : 0;
        if (expr_10 &amp;&amp; num == 42)
        {
            Console.WriteLine("o is 42");
        }
    }
}
`</Code>
    <Description>The following code causes two boxing allocations:

``

Is there any unobvious reason for this behavior or just code gen simply not optimal and can be improved in the future?

Related issue: #13247</Description>
  </Issue>
  <Issue>
    <IssueID>22625</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>API shape of IUsingStatement</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>22625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22625</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    /// &lt;summary&gt;
    /// Represents a C# using or VB Using statement.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;
    /// This interface is reserved for implementation by its associated APIs. We reserve the right to
    /// change it in the future.
    /// &lt;/remarks&gt;
    public interface IUsingStatement : IOperation
    {
        /// &lt;summary&gt;
        /// Body of the using, over which the resources of the using are maintained.
        /// &lt;/summary&gt;
        IOperation Body { get; }
 
        /// &lt;summary&gt;
        /// Declaration introduced by the using statement. Null if the using statement does not declare any variables.
        /// &lt;/summary&gt;
        IVariableDeclarationStatement Declaration { get; }
 
        /// &lt;summary&gt;
        /// Resource held by the using. Can be null if Declaration is not null.
        /// &lt;/summary&gt;
        IOperation Value { get; }
    }
`</Code>
    <Description>right now, IUsingStatement's shape is this

``

we have 2 design questions.

1. should Declaration use IVariableDeclarationStatement rather than IVariableDeclaration
2. should Declaration and Value be merged?

related to  (



</Description>
  </Issue>
  <Issue>
    <IssueID>22620</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>22620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[EE] Unify all classes of CSharpExpressionCompiler</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>20/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>22620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>22620</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, only 1 component of CSharpExpressionCompiler implements the IDkmModuleModifiedNotification and IDkmModuleInstanceUnloadNotification. These interfaces are implemented to guard calls to GetMetaDataBytesPtr, to prevent dangling pointer references (and subsequent AV's like the VSO Bug 187805.

However, all 3 classes of the component call into GetMetaDataBytesPtr, and thus 2 classes (CSharpFrameDecoder and CSharpLanguageInstructionDecoder) are unguarded and potentially running into the same issue.

Ideally, all these 3 classes should be unified into a single class, which should make things easier and potentially fix some instances of the Watson.</Description>
  </Issue>
  <Issue>
    <IssueID>22619</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>22619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"x is var _" results in the expression being true without x being evaluated</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>21/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>22619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
internal class Program
{
    private static void Main()
    {
        var test = new Program();
        var result = test.IsVarMethod();
        Console.WriteLine($"Result = {result}");
        Console.Read();
    }

    private int IsVarMethod() =&gt; ThrowingMethod() is var _ ? 1 : 0;
    private bool ThrowingMethod() =&gt; throw new Exception("Oh");
}
`</Code>
    <Description>**Version Used**: 
C# 7.1, debug mode

**Steps to Reproduce**:
``

**Expected Behavior**:
I'd expect `ThrowingMethod()` to be invoked, resulting in an exception.

**Actual Behavior**:
The method, `IsVarMethod()`, returns `1` and no exception is thrown.

This only occurs if the `x is T y` expression uses the var pattern and a discard. Change `var` to `bool` or `_` to eg `y` and the method is invoked and the exception thrown. </Description>
  </Issue>
  <Issue>
    <IssueID>22617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>22617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[EE] Override OnClose for MetadataContextItem</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>22617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>22617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This tracks the likely fix for the wretched Watson crash tracked by DevDiv VSO Bug 187805. Previous attempts at slaying this beast ( and debugger changes) seem to have not addressed all code paths causing the issue.

The Watson dumps indicate X64 debugging, with the process object unloaded at the point of attempting to read a dangling pointer returned from the GetMetaDataBytesPtr Concord API. From this, the likely explanation is:
- When the process is unloaded, Concord releases all Dkm objects (marks them as unloaded), releases their data items (calls OnClose), and then starts releasing all components (that aren't currently in flight).
- In this case, the InstructionDecoder component is currently alive and in flight, which has just called into CachingLayer's (a debugger-implemented component) GetMetaDataBytesPtr, which returns a pointer to a blob that it maintains as a member variable on the component itself.
- During (or just after) the GetMetaDataBytesPtr call, the process is unloaded. Once the IP returns to InstructionDecoder, the Concord dispatcher has begun cleanup. It marks all Dkm objects as unloaded, and starts releasing data items by calling their OnClose method. Since no data items in InstructionDecoder have OnClose, Concord moves on to the next phase, i.e. unloading components. CachingLayer is thus released, causing the pointer it just gave out, to be dangling.

The proposed fix, is to not let Concord move to the last phase of unloading components when InstructionDecoder is in flight. We can do this, by having a data item of InstructionDecoder that has an explicit clean up method to be called by the dispatcher (has an OnClose method). This will block Concord from going to the component-cleaning phase, ensuring that the bytes are alive.

Proposed fix:
Add this to MetadataContextItem, which is a data item on DkmClrAppDomain:
`protected override void OnClose() { }`

Note that the previous attempt to fix the issue was similar, but related to module instance unloads. In this case, if a process is unloaded, the module instance unloads are not fired, which is why it did not address this scenario.</Description>
  </Issue>
  <Issue>
    <IssueID>22610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Automatic indentation for method argument attributes is awkward</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[View on Developer Community](

If I want to annotate a method argument with an attribute, most commonly for MEF importing constructors, then it can easily happen that the line gets too long and I'd like to have the attribute and argument on separate lines. The suggested indentation of VS is awkward here because it indendts the attribute (ok) and then unindents the actual argument (not ok)</Description>
  </Issue>
  <Issue>
    <IssueID>22605</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SyntaxTreeIndex holding a large working set</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>04/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>22605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>22605</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.4 Preview 4

**Steps to Reproduce**:

1. Open Roslyn.sln
1. Work for a few minutes

(I used Go To Implementation a few times, but I do not know what difference that makes.)

**Expected Behavior**:

devenv.exe does not consume memory to the point of failing.

**Actual Behavior**:

During analysis of an OOM condition, 103995 instances of `SyntaxTreeIndex` were holding on to 22.3% of the total working set, nearly 400MiB.</Description>
  </Issue>
  <Issue>
    <IssueID>22603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky test: Metadata file 'mscorlib.dll (netstandard 2.0 ref)' could not be opened</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
09:40:46     Microsoft.CodeAnalysis.CSharp.UnitTests.PatternParsingTexts.ThrowExpression_Good [FAIL]
09:40:46       
09:40:46       Expected:
09:40:46       Actual:
09:40:46                       // error CS0009: Metadata file 'mscorlib.dll (netstandard 2.0 ref)' could not be opened -- Invalid argument
09:40:46                       Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments("mscorlib.dll (netstandard 2.0 ref)", "Invalid argument").WithLocation(1, 1)
09:40:46       Diff:
09:40:46       ++&gt;                 Diagnostic(ErrorCode.FTL_MetadataCantOpenFile).WithArguments("mscorlib.dll (netstandard 2.0 ref)", "Invalid argument").WithLocation(1, 1)
09:40:46       Expected: True
09:40:46       Actual:   False
09:40:46       Stack Trace:
09:40:46            at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
09:40:46            at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
09:40:46            at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
09:40:46            at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
09:40:46         /mnt/j/workspace/dotnet_roslyn/master/ubuntu_14_debug_prtest/src/Compilers/CSharp/Test/Syntax/Parsing/PatternParsingTests.cs(75,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.PatternParsingTexts.ThrowExpression_Good()
`</Code>
    <Description>



``</Description>
  </Issue>
  <Issue>
    <IssueID>22602</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>22602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flaky build: The type or namespace name 'Loader' does not exist in the namespace 'System.Runtime'</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>23/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>22602</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Hosting/AssemblyLoader/CoreAssemblyLoaderImpl.cs(7,22): error CS0234: The type or namespace name 'Loader' does not exist in the namespace 'System.Runtime' (are you missing an assembly reference?)
`</Code>
    <Description>``

Example PRs with repro:

* 
* 
* 
* 

Retesting usually resolves it.</Description>
  </Issue>
  <Issue>
    <IssueID>22600</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot build on Linux</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>22600</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/Core/Portable/CodeAnalysis.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/CSharp/csc/csc.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/CSharp/Portable/CSharpCodeAnalysis.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/CSharp/Test/Syntax/CSharpCompilerSyntaxTest.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/Test/Resources/Core/CompilerTestResources.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/Test/Utilities/CSharp/CSharpCompilerTestUtilities.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/VisualBasic/Portable/BasicCodeAnalysis.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Test/PdbUtilities/PdbUtilities.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Workspaces/Core/Portable/Workspaces.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Tools/Source/CompilerGeneratorTools/Source/BoundTreeGenerator/CompilersBoundTreeGenerator.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Tools/Source/CompilerGeneratorTools/Source/CSharpErrorFactsGenerator/CSharpErrorFactsGenerator.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Tools/Source/CompilerGeneratorTools/Source/CSharpSyntaxGenerator/CSharpSyntaxGenerator.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Tools/Source/CompilerGeneratorTools/Source/VisualBasicSyntaxGenerator/VisualBasicSyntaxGenerator.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Tools/Source/CompilerGeneratorTools/Source/VisualBasicErrorFactsGenerator/VisualBasicErrorFactsGenerator.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Workspaces/CSharp/Portable/CSharpWorkspace.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Workspaces/VisualBasic/Portable/BasicWorkspace.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Test/Utilities/Portable/TestUtilities.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Test/Utilities/Portable/TestUtilities.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/CoreTest/ScriptingTest.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/Core/Scripting.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/CSharp/CSharpScripting.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/VisualBasic/BasicScripting.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/CSharpTest/CSharpScriptingTest.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Interactive/csi/csi.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Interactive/vbi/vbi.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/VisualBasic/vbc/vbc.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/Core/MSBuildTask/MSBuildTask.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Scripting/CoreTestUtilities/ScriptingTestUtilities.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Test/Utilities/CoreClr/TestUtilities.CoreClr.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/Core/Analyzers/CodeStyle.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/Core/CodeFixes/CodeStyleFixes.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/CSharp/Analyzers/CSharpCodeStyle.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/CSharp/CodeFixes/CSharpCodeStyleFixes.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/VisualBasic/Analyzers/BasicCodeStyle.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/VisualBasic/CodeFixes/BasicCodeStyleFixes.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/Core/Tests/CodeStyleTests.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/CSharp/Tests/CSharpCodeStyleTests.csproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/CodeStyle/VisualBasic/Tests/BasicCodeStyleTests.vbproj]
/home/svick/roslyn/build/Targets/Imports.targets(340,7): error : Toolset packages have not been restored, run Restore.cmd before building [/home/svick/roslyn/src/Compilers/CSharp/Test/Symbol/CSharpCompilerSymbolTest.csproj]


Attempt 2
---

Try to fix Attempt 1 by running `restore.sh`.

1. Install .Net Core SDK 2.0.
2. `./build/scripts/restore.sh`
2. `dotnet restore CrossPlatform.sln`
3. `dotnet build CrossPlatform.sln`: the same error few times:


/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/Compilers/CSharp/Test/Syntax/CSharpCompilerSyntaxTest.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/Scripting/CoreTest/ScriptingTest.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/Scripting/CSharpTest/CSharpScriptingTest.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/Test/Utilities/CoreClr/TestUtilities.CoreClr.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/CodeStyle/Core/Tests/CodeStyleTests.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/CodeStyle/CSharp/Tests/CSharpCodeStyleTests.csproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/CodeStyle/VisualBasic/Tests/BasicCodeStyleTests.vbproj]
/usr/share/dotnet/sdk/2.0.0/Microsoft.Common.CurrentVersion.targets(4405,5): error MSB3030: Could not copy the file "/home/svick/.nuget/packages/microsoft.csharp/4.3.0/ref/netstandard1.0/Microsoft.CSharp.dll" because it was not found. [/home/svick/roslyn/src/Compilers/CSharp/Test/Symbol/CSharpCompilerSymbolTest.csproj]
`</Code>
    <Description>Note: This might seem like a duplicate of  but I think the situation changed since May.

I'm trying to build this repo on a brand new Ubuntu 16.04 Azure VM and I'm not having success.

Attempt 1
---

Follow [Building, Debugging, and Testing on Unix](

1. Install .Net Core SDK 2.0.
2. `dotnet restore CrossPlatform.sln`
3. `dotnet build CrossPlatform.sln`: the same error several times, suggesting to run `Restore.cmd`:

``

My questions:

1. Should running `restore.sh` be added to the documentation? Or should it replace running `dotnet restore`?
2. What's going on with the `Microsoft.CSharp` reference assembly? Why isn't it being restored correctly?</Description>
  </Issue>
  <Issue>
    <IssueID>22599</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>22599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Internal error in Immediate Window when trying to create an already existing variable</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>16/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>22599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>22599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
string s = "foo";
System.Diagnostics.Debugger.Break();

3.  Start Debugging
4. Open immediate window and try to create the existing variable s. Do something like:

string s = "asdf";
``</Code>
    <Description>**Version Used**: 
D15svc 27004.2002
**Steps to Reproduce**:
1. Create a new C# console app.
2. Add some code to create a variable and add a breakpoint.
``

**Expected Behavior**:
It should throw an error explaining that the variable already exists.
**Actual Behavior**:
It sends an error saying "Internal error in the C# compiler"

No other ill effects appear to occur. Immediate window still works properly after the error.
</Description>
  </Issue>
  <Issue>
    <IssueID>22596</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studios 2013 Roslyn code Extension Exception: Could not load file or assembly Microsoft.VisualStudio.LanguageServices Version 1.3.1.0</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
1.3.1.0
Visual Studios 2013

**Steps to Reproduce**:

1. We want to get a reference to the current solution in a solution opened using Visual Studios 2013. 
2. For this purpose, we are creating a Visual Studios 2013 Extension Project.
3. In the extension project, we use following  code to get a reference to the current solution:
``
4. We have added a nugget reference to **Microsoft.VisualStudio.LanguageServices** Version **1.3.1.0**. 
This package installs the required **Microsoft.CodeAnalysis** Version **1.3.1.0** and other required packages.
5. When we run the Extension project in debug mode or installed mode and when the code flow reaches the above code lines, we get an exception **Could not load file or assembly Microsoft.VisualStudio.LanguageServices** Version **1.3.1.0**.

Note: 
1. My assumption is that the base version of Roslyn for plugin code to work in VS 2013 context is version 1.3.1.0. May be my assumption could be a problem and we probably would require further older version. But I am not sure about it.
2. I have checked if the dlls emitted with the .vsix package have the required version and it looks all good.


**Expected Behavior**:
The above code should work and return the reference to the current solution successfully.

**Actual Behavior**:
Exception: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices, Version=1.3.1.0' or one of its dependencies. The system cannot find the file specified. </Description>
  </Issue>
  <Issue>
    <IssueID>22594</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>String interpolation can be optimized</Title>
    <CreatedDate>09/10/2017</CreatedDate>
    <ClosedDate>01/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22594</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22594</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22594</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>String interpolation has proven to be a very successful feature. Some people even replace efficient concatenation by interpolation, assuming the new syntax is just as efficient. However, that is not the case.

The [LDM of May 21, 2014]( noted:

&gt; The compiler would be free to not call `String.Format`, if it knows how to do things more optimally. This would typically be the case when there are no format specifiers in the string.

So far, nothing has been done to optimize interpolated strings in this way.

I believe there are five scenarios:

1. The interpolated string has no fill-ins. This case is handled already.
2. None of the fill-ins have alignment or format specifiers, and they are all strings.
3. None of the fill-ins have alignment or format specifiers, and they are all of reference type, some of which are not string (and may or may not implement `IFormattable`).
4. None of the fill-ins have alignment or format specifiers, and some of them are value types.
5. Some of the fill-ins have alignment or format specifiers.

Case 2 is surprisingly common. Last time I counted, Roslyn.sln had 1355 cases. It is also the easiest one to optimize. Basically, the call to `string.Format` can be replaced with string concatenation. That string concatenation is itself then lowered, often to a call to `string.Concat`. That lowering will perform constant folding, so in some cases no call is needed at all. [Performance differences]( can be significant.

I have prepared pull request #22595 to handle this case.</Description>
  </Issue>
  <Issue>
    <IssueID>22592</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inappropriate generation of CS 1612</Title>
    <CreatedDate>08/10/2017</CreatedDate>
    <ClosedDate>11/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>22592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>22592</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
   public struct Relay { 
       public Relay(Func&lt;string&gt; getText, Action&lt;string&gt; setText) 
       { 
               this.GetText = getText; 
               this.SetText = setText; 
       } 
       private readonly Func&lt;string&gt; GetText; 
       private readonly Action&lt;string&gt; SetText; 
       public string Text { 
           get { return this.GetText(); } 
           set { this.SetText(value); } 
       } 
   } 
   class Example { 
       private Relay Relay { 
           get { return new Relay(() =&gt; this.text, t =&gt; { this.text = t; });  } 
       } 
       private string text; 
       public Method() { 
           var r = new Relay(); 
           r.Text = "hello"; // not a compile error (although there is a null reference) 
           this.Relay.Text = "hello";  // error 1612 inappropriately generated by the compiler 
           r = this.Relay; 
           r.Text = "hello"; // no compiler error is generated, and none would be appropriate
   } 
`</Code>
    <Description>**Version Used**: 
Visual C# 2017 - 00369-60000-00001-AA549

**Steps to Reproduce**:
Unfortunately this error can be inappropriately generated when assigning to a property (i.e. invoking a property setter). An immutable struct can still have a valid property setter, as long as the property setter doesn't actually assign to any fields in the struct. For example, 

``

**Expected Behavior**:
See above. The compiler error should only be generated when a field in the struct is going to be assigned, not when a property is being assigned. 

**Actual Behavior**:
The compiler error is generated when assigning to a property, not only a field. 

</Description>
  </Issue>
  <Issue>
    <IssueID>22591</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Fix All in Document, Project, Solution (Test?)</Title>
    <CreatedDate>08/10/2017</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22591</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>An interesting side discussion from PR #19999, around a test project to test fix all, and suitable candidate for the codefix to use. 

&gt; @paul1956 **typed**
&gt;An interesting test would be to run this codefix on a copy of Roslyn source "Solution" because I believe you will get an OutOfMemory exception. Yet this is a perfect example of where a solution wide CodeFix is needed.
&gt;
&gt; @AdamSpeight2008 **typed**
&gt; @paul1956 It would be a good test. You'll be able to see the smoke from VS for miles.
&gt;
&gt;@AdamSpeight2008 isn't that a problem? If there is a limit of X fixes before bad things happen how about limiting code fixes to a smaller number or 75% of available memory, or fix the algorithm to aggregate each document. I would be much happier if a code fix stopped after 50 (100, 500...) fixes (and I could run it again) which might be one fix in each of 50 files or 50 fixes in one document, then what I have today, where I have to search for the error, go to the file, fix all the issues then find another file (which might have 1 issue), and repeat for each file. Switching from Implicit to Explicit declarations in just the Roslyn VB CodeAnalysis project is 39,000 changes and going the other way is even more. Changing to Optional Default Parameter is around 6000 changes in ~800 files (very rough guess).
&gt;

**Related To:**  #22539</Description>
  </Issue>
  <Issue>
    <IssueID>22589</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Closure causes anonymous type to allocate even if unused</Title>
    <CreatedDate>07/10/2017</CreatedDate>
    <ClosedDate>31/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22589</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Latest netcore and 2.0
**Steps to Reproduce**:

1. Method that has a closure at the bottom of method
2. Add an if statement and pass in false to exit early
3. The anonymous type is created and allocated even though the code is never touched

**Expected Behavior**:
Only allocate if the type is actually needed

**Actual Behavior**:
Type is allocated everytime

[Repro Code Solution](

When disassembling with ILdasm you can clearly see the problem (it news the annon type at the top of the method)

![image](

This was noticed during refactoring of SslStream internal classes

/cc @benaadams @stephentoub  - This was the allocation seen during testing



</Description>
  </Issue>
  <Issue>
    <IssueID>22588</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AnonymousTypeCreation initializer IsImplicit is not calculated correctly.</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22588</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we calculate IsImplicit from the operand of the AnonymousTypeCreationInitializer. However, this isn't correct as the operand can be an implicit conversion, but the assignment isn't.  is the affected line, see </Description>
  </Issue>
  <Issue>
    <IssueID>22585</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>22585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should we expose receiver when accessing shared member through instance in VB</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>09/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22585</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In VB, access of shared member through an instance is not an error, but the qualifying expression will not be evaluated in this case. We currently explicitly dropped the receiver for IRaiseEventStatement when the event is shared. (there might be other places do this as well). 

See </Description>
  </Issue>
  <Issue>
    <IssueID>22582</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>petrroll</FixedById>
        <IssueID>22582</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[C#] converting if to switch refactoring is not offered unless my caret is touch the very first "if" keyword</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>27/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22582</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22582</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[View on Developer Community](
"if" is so tiny...

Would it be better if we enable the refactoring when my caret is on leading Space/Tab trivia of "if", on "else if"/"else" too? 
</Description>
  </Issue>
  <Issue>
    <IssueID>22581</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>fix IArgument and IArrayInitializer to have null types</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>07/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22581</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>22580</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpRemoveUnreachableCodeDiagnosticAnalyzer contributing to Perf regression during test discovery</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>29/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>22580</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>22579</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CS8019 doesn't work during compilation</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>22/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2017 15.3.5

**Steps to Reproduce**:

1. Create new Class Library (.NET Framework) project.
2. Edit Active Rule Set and make CS8019 (Unnecessary using directive) an 'Error'.
3. Compile project.

**Expected Behavior**:
Given that the project starts with a Class1.cs file containing unused using directives, compilation should fail.

**Actual Behavior**:
Compilation succeeds. The VS UI does show the IntelliSense error, however.

Attached repro project.
[AnalyzerTest.zip](
</Description>
  </Issue>
  <Issue>
    <IssueID>22578</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>default literal as default parameter value takes incorrect </Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22578</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`void M(int? x = default)` should behave like `void M(int? x = default(int?))` with a default value of `null`, but instead it gets a default value of `0`.
Invoking it leads to more weirdness: `M()` uses `0`, while `M(default)` properly uses `null`.

@svick Is working on a fix in PR 
This was raised in </Description>
  </Issue>
  <Issue>
    <IssueID>22576</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IInvalidExpression child node of a variable initializer should be marked IsImplicit</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>22575</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Investigate weird syntax associated with initializer and initializer value</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See 

&gt;= New C2() ... lo World!"} [](start = 80, length = 27)

It looks like the syntax node is correct, but why the string is truncated before the With and doesn't include any indication of truncation?
</Description>
  </Issue>
  <Issue>
    <IssueID>22574</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Revisit logic for implicit variable initializer operation in C#</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>06/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  This code path sets variable initializer operation as implicit if there is no explicit initializer syntax (equals value clause). Either confirm that this can happen for error cases by adding a unit test OR remove the code path that sets isImplicit = true.</Description>
  </Issue>
  <Issue>
    <IssueID>22573</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Object initializer inside array initializer not formatted</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22573</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>22573</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    static void Main(string[] args)
    {
        var x = new[]
        {
            new{a=1}
        };
    }
}


**Expected Behavior**:

csharp
class Program
{
    static void Main(string[] args)
    {
        var x = new[]
        {
            new { a = 1 }
        };
    }
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 15.3.5

**Steps to Reproduce**:

Sample code:

``

**Actual Behavior**:
The object initializer inside array initializer not formatted.
</Description>
  </Issue>
  <Issue>
    <IssueID>22572</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect overload resolution when local function has the same name as the enclosing method</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>13/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>22572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
private static bool IsRetryableError(Exception ex)
{
    switch (ex)
    {
        case WebException webEx when IsRetryableError(webEx.Status):
        case SocketException _:
        case TimeoutException _:
        case IOException _:
            return true;
    }

    if (ex.InnerException != null)
    {
        return IsRetryableError(ex.InnerException);
    }

    return false;

    bool IsRetryableError(WebExceptionStatus status)
    {
        switch (status)
        {
            case WebExceptionStatus.ConnectFailure:
            case WebExceptionStatus.SendFailure:
            case WebExceptionStatus.ReceiveFailure:
            case WebExceptionStatus.ConnectionClosed:
            case WebExceptionStatus.NameResolutionFailure:
            case WebExceptionStatus.ProxyNameResolutionFailure:
            case WebExceptionStatus.Timeout:
                return true;
        }

        return false;
    }
}
`</Code>
    <Description>**Version Used**: VS2017 15.3.3

**Steps to Reproduce**:

1. Write the following method:

``

2. Build

**Expected Behavior**:

The code should compile without error.

**Actual Behavior**:

The compiler emits an error on `IsRetryableError(ex.InnerException)`:

&gt; error CS1503: Argument 1: cannot convert from 'System.Exception' to 'System.Net.WebExceptionStatus'

The recursive call doesn't compile, because the current method is hidden by the local function with the same name. I would have expected overload resolution to work as usual. Is this the intended behavior?</Description>
  </Issue>
  <Issue>
    <IssueID>22567</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Link errors in feature status page</Title>
    <CreatedDate>06/10/2017</CreatedDate>
    <ClosedDate>06/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>22567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22567</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On the page 



the link to "Async main" points to



But should point to



--------

On the same page, the link to "Default Expressions" points to



But should point to



</Description>
  </Issue>
  <Issue>
    <IssueID>22564</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ref and readonly structs should be displayed in IDE</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22564</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For both types, quickinfo and symbol display should be able to hint if they're annotated with `ref` and `readonly` keywords or not.

**Current behavior:**

![image](

@VSadov 's comment on #19421 

&gt; After working with actual ref structs, I am convinced that ref must be surfaced in the symbol display.
&gt; When chasing through an escape violation, it would be useful to know which types are ref structs and which are not.
&gt; Also consider "readonly". It may be useful too, but also longer...</Description>
  </Issue>
  <Issue>
    <IssueID>22563</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[VB] For-Loop Overflow and Underflow</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>03/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[Issue in VB Repo](
The follow will throw a `System.OverflowException` due to the underlying implementation details.
``</Description>
  </Issue>
  <Issue>
    <IssueID>22562</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>22562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>add invariant verification to IOperation</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>06/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22562</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>add test and assert to IOperation where there is only 1 explicit operation with same syntax node.</Description>
  </Issue>
  <Issue>
    <IssueID>22561</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>22561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetUsingStatementDeclaration is not creating IVariableDeclarationStatement correctly</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22561</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>see this - (

this has a bug

``

vb factory doesn't handle BoundLocalDeclaration kind so resouceList ends up becomes Operation.Node and filtered out since it can't go into variable declaration statement</Description>
  </Issue>
  <Issue>
    <IssueID>22560</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Opening a solution with MSBuildWorkspace returns an empty solution</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>10/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22560</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
15.3.5
**Steps to Reproduce**:

1. download the solution attached
2. enter the path to a solution file
3. debug until `var originalSolution = workspace.OpenSolutionAsync(solutionFilePath).Result;`

**Expected Behavior**:
Child project information should be available
**Actual Behavior**:
Child projects = null
[SolutionRiskMapGenerator.zip](

If all exceptions are enabled in the Debu settings of VS2017 15.3.5 I get the follwoing error

``
</Description>
  </Issue>
  <Issue>
    <IssueID>22558</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSProj and VBProj diagostics</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>06/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>22558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>22558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It is a bit of pain to try and find duplicate `Includes` in `.vbproj` and `.csproj` files especially when they are not sorted. A diagnostic the highlights them would be helpful, with the code fix to delete them.</Description>
  </Issue>
  <Issue>
    <IssueID>22556</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IOperation tests have lots of trailing whitespace</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>21/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With  moving lots of tests to have output on multiple lines, the test were not adjusted to not have trailing whitespace. So now a lot of our tests have trailing whitespace inside the strings, usually after lines that had both a header and value on the same line. These should be updated to not have trailing whitespace.</Description>
  </Issue>
  <Issue>
    <IssueID>22555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>22555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Case reported unreachable even though switch target has error</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>22555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        public void InvalidSwitchStatementExpression()
        {
            string source = @"
using System;

class Program
{
    static void Main(string[] args)
    {
        /*&lt;bind&gt;*/switch (Program)
        {
            case 1:
                break;
        }/*&lt;/bind&gt;*/
    }
}
";
            string expectedOperationTree = @"
ISwitchStatement (1 cases) (OperationKind.SwitchStatement, IsInvalid) (Syntax: 'switch (Pro ... }')
  Switch expression: 
    IInvalidExpression (OperationKind.InvalidExpression, Type: Program, IsInvalid, IsImplicit) (Syntax: 'Program')
      Children(1):
          IOperation:  (OperationKind.None, IsInvalid) (Syntax: 'Program')
  Sections:
      ISwitchCase (1 case clauses, 1 statements) (OperationKind.SwitchCase, IsInvalid) (Syntax: 'case 1: ... break;')
          Clauses:
              IPatternCaseClause (Label Symbol: case 1:) (CaseKind.Pattern) (OperationKind.CaseClause, IsInvalid) (Syntax: 'case 1:')
                Pattern: 
                  IConstantPattern (OperationKind.ConstantPattern, IsInvalid) (Syntax: 'case 1:')
                    Value: 
                      IConversionExpression (Implicit, TryCast: False, Unchecked) (OperationKind.ConversionExpression, Type: Program, IsInvalid, IsImplicit) (Syntax: '1')
                        Conversion: CommonConversion (Exists: False, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                        Operand: 
                          ILiteralExpression (OperationKind.LiteralExpression, Type: System.Int32, Constant: 1, IsInvalid) (Syntax: '1')
                Guard Expression: 
                  null
          Body:
              IBranchStatement (BranchKind.Break) (OperationKind.BranchStatement) (Syntax: 'break;')
";
            var expectedDiagnostics = new DiagnosticDescription[] {
                // CS0119: 'Program' is a type, which is not valid in the given context
                //         /*&lt;bind&gt;*/switch (Program)
                Diagnostic(ErrorCode.ERR_BadSKunknown, "Program").WithArguments("Program", "type").WithLocation(8, 27),
                // CS0029: Cannot implicitly convert type 'int' to 'Program'
                //             case 1:
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "1").WithArguments("int", "Program").WithLocation(10, 18),
                // CS0162: Unreachable code detected
                //                 break;
                Diagnostic(ErrorCode.WRN_UnreachableCode, "break").WithLocation(11, 17)
            };

            VerifyOperationTreeAndDiagnosticsForTest&lt;SwitchStatementSyntax&gt;(source, expectedOperationTree, expectedDiagnostics);
        }
`</Code>
    <Description>see this (

``

@jcouv think this "                // CS0162: Unreachable code detected
                //                 break;
                Diagnostic(ErrorCode.WRN_UnreachableCode, "break").WithLocation(11, 17)
" shouldn't be reported</Description>
  </Issue>
  <Issue>
    <IssueID>22554</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IIncrementalOrDecrementExpression having wrong Error type</Title>
    <CreatedDate>05/10/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public void InvalidUnaryExpression()
        {
            string source = @"
using System;

class Program
{
    static void Main(string[] args)
    {
        var x = new Program();
        Console.Write(/*&lt;bind&gt;*/++x/*&lt;/bind&gt;*/);
    }

    void F()
    {
    }
}
";
            string expectedOperationTree = @"
IIncrementOrDecrementExpression (Prefix) (OperationKind.IncrementExpression, Type: System.Object, IsInvalid) (Syntax: '++x')
  Target: 
    ILocalReferenceExpression: x (OperationKind.LocalReferenceExpression, Type: Program, IsInvalid) (Syntax: 'x')
";
            var expectedDiagnostics = new DiagnosticDescription[] {
                // CS0023: Operator '++' cannot be applied to operand of type 'Program'
                //         Console.Write(/*&lt;bind&gt;*/++x/*&lt;/bind&gt;*/);
                Diagnostic(ErrorCode.ERR_BadUnaryOp, "++x").WithArguments("++", "Program").WithLocation(9, 33)
            };

            VerifyOperationTreeAndDiagnosticsForTest&lt;PrefixUnaryExpressionSyntax&gt;(source, expectedOperationTree, expectedDiagnostics);
        }
`</Code>
    <Description>see this (

``</Description>
  </Issue>
  <Issue>
    <IssueID>22329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected type argument inference failure</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>11/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>22329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

The behavior at least goes back to the native compiler.</Description>
  </Issue>
  <Issue>
    <IssueID>22327</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Remove StrongNameProviderTests.cs/VirtualizedStrongnameProvider</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>07/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With some changes, this can be changed to use the VirtualizedStrongNameFileSystem and a regular PortableStrongNameProvider instance.</Description>
  </Issue>
  <Issue>
    <IssueID>22322</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow modifiers on types in any order (partial, ref, readonly)</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>30/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>22322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From LDM discussion today, this is something we could do after 7.2.

FYI @gafter @VSadov @OmarTawfik </Description>
  </Issue>
  <Issue>
    <IssueID>22319</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>khyperia</FixedById>
        <IssueID>22319</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation Rebaselining tool has been silently removing the BOM from test source files</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22319</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22319</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In Roslyn, our files start with the UTF8 BOM.  The IOperation Rebaselining tool has been silently removing it from the files that it touches.

See: 

Since we don't know which files have had their BOM stripped, the effected files need to be found and fixed.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22319</IssueID>
        <PullRequestID>22263</PullRequestID>
        <Title>Fix a trivial issue in how IsLifted is calculated for C# compound ass…</Title>
        <Description>…ignment operator

Fixes 

NOTE: We already have unit tests covering it. This just fixes the underlying implemented used to compute the value of this flag.
</Description>
        <CreatedDate>21/09/2017</CreatedDate>
        <ClosedDate>25/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>22263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>22263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>22263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>22263</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22319</IssueID>
        <PullRequestID>20541</PullRequestID>
        <Title>Set charset in .editorconfig</Title>
        <Code>
&gt; #r "System.ValueTuple.dll"
&gt; Directory.GetFiles(Environment.CurrentDirectory, "*.csx", SearchOption.AllDirectories).Select(path =&gt; (path, File.ReadAllText(path))).Select(pair =&gt; { File.WriteAllText(pair.Item1, pair.Item2, Encoding.UTF8); return true; }).Count()
11
&gt; Directory.GetFiles(Environment.CurrentDirectory, "*.vb", SearchOption.AllDirectories).Select(path =&gt; (path, File.ReadAllText(path))).Select(pair =&gt; { File.WriteAllText(pair.Item1, pair.Item2, Encoding.UTF8); return true; }).Count()
3460
&gt; Directory.GetFiles(Environment.CurrentDirectory, "*.cs", SearchOption.AllDirectories).Select(path =&gt; (path, File.ReadAllText(path))).Select(pair =&gt; { File.WriteAllText(pair.Item1, pair.Item2, Encoding.UTF8); return true; }).Count()
9379
`</Code>
        <Description>* Set `charset = utf-8-bom` for C# and VB sources in **.editorconfig**
* This encoding was the ~72% majority of existing code
* Fixes ~15 cases where `File.ReadAllText` would fail to correctly read the file contents on en-US installations (impact on other regions unclear, but all will correctly read all but one file now)

:memo: Files were converted using the C# Interactive script window, then manually reviewed to verify accuracy.

``</Description>
        <CreatedDate>29/06/2017</CreatedDate>
        <ClosedDate>29/06/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>20541</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22319</IssueID>
        <PullRequestID>22323</PullRequestID>
        <Title>Fix BOM</Title>
        <Description>

(This commit differs slightly from the one I originally posted, as I reverted the change to `src/Compilers/Test/Resources/Core/Encoding/sjis.cs`, which is in a very strange encoding)

Command: `find src/ -type f \( -name '*.cs' -o -name '*.vb' \) -print0 | xargs -0 sed -i '1s/^\(\xef\xbb\xbf\)\?/\xef\xbb\xbf/'`</Description>
        <CreatedDate>25/09/2017</CreatedDate>
        <ClosedDate>25/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22319</IssueID>
            <PullRequestID>22323</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22315</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Array type defaults to int[] for invalid implicitly typed array creation</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22315</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See C# semantic unit test `ArrayCreationWithInitializerErrorCase_ImplicitlyTypedWithoutInitializer` and comment: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22315</IssueID>
        <PullRequestID>18154</PullRequestID>
        <Title>Add unit tests for IArrayCreationExpression and IArrayInitializer</Title>
        <Description>Fixes #17596

Issues identified while adding unit tests: </Description>
        <CreatedDate>24/03/2017</CreatedDate>
        <ClosedDate>25/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>22315</IssueID>
            <PullRequestID>18154</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22315</IssueID>
            <PullRequestID>18154</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>22315</IssueID>
            <PullRequestID>18154</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22315</IssueID>
            <PullRequestID>18154</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22313</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>On projects which use .net 4.6 with the roslyn compiler</Title>
    <CreatedDate>25/09/2017</CreatedDate>
    <ClosedDate>05/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>22313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>22313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there a specific setting that is needed when compiling .net 4.6 projects when deploying them as an msi. 

it seems by default the roslyn folder is missing when deployment has begun. across both web and console. ? </Description>
  </Issue>
  <Issue>
    <IssueID>22308</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio 2017 (26430.16) Release T4 Scaffolding crashing on model</Title>
    <CreatedDate>24/09/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>22308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Weird issue when trying to compile the following model

`
    public class basketheader

    {
        [Key]
        public int id { get; set; }

        public int orderId { get; set; }

        public string title { get; set; }

        public string description { get; set; }

        public string emailBasket { get; set; }

        public decimal basketTotal { get; set; }

        public int currency { get; set; }

 
        public bool isDeleted { get; set; }

        public bool isActive { get; set; }

        public DateTime createDated { get; set; }

        public bool isSaved { get; set; }

        public string notes { get; set; }

   
        public int basketSessionId { get; set; }

       

        public string EnteredBy { get; set; }


        public BasketStatus BasketStatusSetting { get; set; }
        public enum BasketStatus
        {
            Basket=0,
            Order = 1,
            Abandon=2,
            FailedPayment=3,
            Discarded=4




        }


    }`

**Expected Behavior**:
Should Complile and product an basket header list page using asp.net mvc .4.6.2
**Actual Behavior**:
Crashes produces the following report in event viewer

Faulting application name: devenv.exe, version: 15.0.26430.16, time stamp: 0x5968f055
Faulting module name: PresentationCore.ni.dll, version: 4.7.2102.0, time stamp: 0x5937170a
Exception code: 0xc0000005
Fault offset: 0x00245bdb
Faulting process id: 0xaf0
Faulting application start time: 0x01d33538be99ac24
Faulting application path: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\devenv.exe
Faulting module path: C:\WINDOWS\assembly\NativeImages_v4.0.30319_32\PresentationCore\e455d647c69dde661983d913460fef16\PresentationCore.ni.dll
Report Id: a9a59056-e157-4f3c-a1b2-23a695355c2b
Faulting package full name: 
Faulting package-relative application ID: 

3 Also when I try to update my version of version studio options are not available to do so.</Description>
  </Issue>
  <Issue>
    <IssueID>22306</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Allow taking an unmanaged pointer off readonly lvalues</Title>
    <CreatedDate>24/09/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Specification</Name>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Historically we require that lvalue is writable before allowing taking a pointer.

That does not make a lot of sense. While there are ways to "cast away" readonliness, why is that even required before "casting away" most of the type system safeguards?

I think it is just an artifact of old implementation strategy that internally combined "lvalue" and "writeable". 
Now that these concepts are properly  separated, it makes sense to require that the target of "&amp;" is an lvalue, but does not need to be writeable.</Description>
  </Issue>
  <Issue>
    <IssueID>22305</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>22305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ensure that all statements that indirectly imply assignments of values are supported in escape analysis</Title>
    <CreatedDate>23/09/2017</CreatedDate>
    <ClosedDate>02/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ensure that all statements that imply assignments of values (like foreach loop implies assignment to an iteration variable) are doing escape analysis.

We may not have many. Foreach could be the only one that can ever see ref-like values due to other restrictions.

However we should make sure nothing is missing.



</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22305</IssueID>
        <PullRequestID>22413</PullRequestID>
        <Title>Add additional tests around Span escaping</Title>
        <Description>Most constructs already had tests, but I added a few more just in case.
Although Span return in iterators is currently impossible because no
ref-struct capable type can be an iterator, I added a safety check in
case we allow it later.

**Bugs this fixes:**
Fixes #22305

**Risk**

Only a small change in error scenarios.

**Performance impact**

None.
</Description>
        <CreatedDate>29/09/2017</CreatedDate>
        <ClosedDate>02/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22305</IssueID>
            <PullRequestID>22413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22305</IssueID>
            <PullRequestID>22413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22304</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>When merge window for v15.5 will close? (const parameters)</Title>
    <CreatedDate>23/09/2017</CreatedDate>
    <ClosedDate>31/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>22304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>22304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Couple of weeks ago decision has been taken to implement [Intel hardware intrinsics](). This feature spans several repos and during design review [@jaredpar indicated]( that there is a possibility to provide compiler support for enforcing passing compile time constants to method invocations.

Many members of the community are interested in getting this feature released as soon as possible including me. Therefore I have started some preliminary work on implementation of C# const parameters language feature which currently consists of:

- [Language proposal](
- [Prototype compiler implementation](

I understand that full implementation comprises many parts of the compiler and active participation of Roslyn team member in feature development and that there is a requirement for LDM approval of feature design as a prerequisite to starting actual feature implementation.

My question is if there is any chance to get feature shipped in v15.5 of Visual Studio taking into account all above limitations? 

</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>22302</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SqlConnection.Finalize can cause crashes</Title>
    <CreatedDate>23/09/2017</CreatedDate>
    <ClosedDate>15/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>22302</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Builds as new as 15.0.26730.15

:link: Internal issue: [DevDiv 490079](

**Steps to Reproduce**:

Unknown

**Expected Behavior**:

`SqlConnection` instances are not finalized.

**Actual Behavior**:

`SqlConnection.Finalize()` is getting called on an unknown code path, resulting in a crash.

:memo: This was supposed to be corrected by #20806, but it's still showing up.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22302</IssueID>
        <PullRequestID>20806</PullRequestID>
        <Title>Be more resilient to external errors when trying to create our underlying persistent storage</Title>
        <Description>**Customer scenario**

What does the customer do to get into this situation, and why do we think this
is common enough to address for this release.  (Granted, sometimes this will be
obvious "Open project, VS crashes" but in general, I need to understand how
common a scenario is)

**Bugs this fixes:**

(either VSO or GitHub links)

**Workarounds, if any**

Also, why we think they are insufficient for RC vs. RC2, RC3, or RTW

**Risk**

This is generally a measure our how central the affected code is to adjacent
scenarios and thus how likely your fix is to destabilize a broader area of code

**Performance impact**

(with a brief justification for that assessment (e.g. "Low perf impact because no extra allocations/no complexity changes" vs. "Low")

**Is this a regression from a previous update?**

**Root cause analysis:**

How did we miss it?  What tests are we adding to guard against it in the future?

**How was the bug found?**

(E.g. customer reported it vs. ad hoc testing)
</Description>
        <CreatedDate>11/07/2017</CreatedDate>
        <ClosedDate>13/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>22302</IssueID>
            <PullRequestID>20806</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>22302</IssueID>
            <PullRequestID>20806</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22302</IssueID>
            <PullRequestID>20806</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22301</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>API to expose locals declared in catch block</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We need to expose this API. See test `TryCatch_CatchFilterWithLocalDeclaration` in the PR here: 

We can either expose Locals off ICatchClause or define a new ICatchClauseFilter node with Locals and underlying filter expression.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>22301</IssueID>
        <PullRequestID>22210</PullRequestID>
        <Title>Add IOperation unit tests for try/catch statements and make the APIs …</Title>
        <Description>…public again

Fixes #22008 and #21277

We also decided to make some changes to ICatchClause see  and 
</Description>
        <CreatedDate>19/09/2017</CreatedDate>
        <ClosedDate>29/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>22301</IssueID>
            <PullRequestID>22210</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>22301</IssueID>
            <PullRequestID>22210</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>22301</IssueID>
            <PullRequestID>22210</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>22301</IssueID>
            <PullRequestID>22210</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>22301</IssueID>
            <PullRequestID>22210</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>22300</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>22300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should you be able to take readonly refs to literals?</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For instance, `ref readonly int x = ref 42;`. This is currently prohibited. Should it be?</Description>
  </Issue>
  <Issue>
    <IssueID>22299</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GetOperation returns null for CatchFilterClauseSyntax and FinallyClauseSyntax</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>22299</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See unit tests `TryCatch_GetOperationForCatchFilterClause` and `TryCatch_GetOperationForFinallyClause` added in 

It seems the operation tree has nodes mapping to the underlying expression of the CatchFilterClauseSyntax  and block of the FinallyClauseSyntax, but I would except these two syntax nodes also to map the underlying catch filter expression and finally block respectively.</Description>
  </Issue>
  <Issue>
    <IssueID>22298</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>put better syntax node for implicitly created param array </Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>22298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>see this comment (

basically, binder created implicit array for params parameters. and we put whole expression as syntax node for the synthesized array. 

not sure whether that is best node to assign for the synthesized array.</Description>
  </Issue>
  <Issue>
    <IssueID>22297</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IArgument doesn't expose info on out or ref</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>22/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>22297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>see this comment (

and see IArgument (

basically, user needs to get that info from either IParameter (decl) or Syntax (caller) to see whether ref or out is used.</Description>
  </Issue>
  <Issue>
    <IssueID>22293</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'GenerateTypeCodeFixProvider' encountered an error and has been disabled</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>05/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>22293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Threading;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            Task task = new Task(Display);
            task.Start();
        }

        static void Display()
        {
        }
    }
}

3. Over `new Task(Display)` choose 'Show potential fixes'

**Expected Behavior**:
'Show potential fixes' should suggest me to update to .NET Framework 4+ to use Task or didn't appears at all.

**Actual Behavior**:
Message "'GenerateTypeCodeFixProvider' encountered an error and has been disabled" apeears at the top of code editor window.

Pressing show stack trace gives:

System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Extensions.ITypeSymbolExtensions.GenerateTypeSyntax(INamespaceOrTypeSymbol symbol,Boolean nameSyntax)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.FieldGenerator.GenerateFieldDeclaration(IFieldSymbol field,CodeGenerationDestination destination,CodeGenerationOptions options)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.FieldGenerator.AddFieldTo(TypeDeclarationSyntax destination,IFieldSymbol field,CodeGenerationOptions options,IList`1 availableIndices)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpCodeGenerationService.AddField[TDeclarationNode](TDeclarationNode destination,IFieldSymbol field,CodeGenerationOptions options,IList`1 availableIndices)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.UpdateDestination[TDeclarationNode](IList`1 availableIndices,CodeGenerationOptions options,TDeclarationNode currentDestination,ISymbol member,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembersToAppropiateLocationInDestination[TDeclarationSyntax](TDeclarationSyntax destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.NamedTypeGenerator.GenerateNamedTypeDeclaration(ICodeGenerationService service,INamedTypeSymbol namedType,CodeGenerationDestination destination,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.NamedTypeGenerator.AddNamedTypeTo(ICodeGenerationService service,NamespaceDeclarationSyntax destination,INamedTypeSymbol namedType,CodeGenerationOptions options,IList`1 availableIndices,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpCodeGenerationService.AddNamedType[TDeclarationNode](TDeclarationNode destination,INamedTypeSymbol namedType,CodeGenerationOptions options,IList`1 availableIndices,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.UpdateDestination[TDeclarationNode](IList`1 availableIndices,CodeGenerationOptions options,TDeclarationNode currentDestination,ISymbol member,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembersToAppropiateLocationInDestination[TDeclarationSyntax](TDeclarationSyntax destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,IList`1 availableIndices,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.AddMembers[TDeclarationNode](TDeclarationNode destination,IEnumerable`1 members,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.NamespaceGenerator.GenerateNamespaceDeclaration(ICodeGenerationService service,INamespaceSymbol namespace,CodeGenerationOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.NamespaceGenerator.AddNamespaceTo(ICodeGenerationService service,CompilationUnitSyntax destination,INamespaceSymbol namespace,CodeGenerationOptions options,IList`1 availableIndices,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpCodeGenerationService.AddNamespace[TDeclarationNode](TDeclarationNode destination,INamespaceSymbol namespace,CodeGenerationOptions options,IList`1 availableIndices,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.&lt;&gt;c__DisplayClass54_0.&lt;AddNamespaceAsync&gt;b__0(SyntaxNode t,CodeGenerationOptions opts,IList`1 ai,CancellationToken ct)
   at async Microsoft.CodeAnalysis.CodeGeneration.AbstractCodeGenerationService.GetEditAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateType.AbstractGenerateTypeService`6.Editor.GetGenerateInNewFileOperationsAsync[TService,TSimpleNameSyntax,TObjectCreationExpressionSyntax,TExpressionSyntax,TTypeDeclarationSyntax,TArgumentSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateType.AbstractGenerateTypeService`6.Editor.GetOperationsAsync[TService,TSimpleNameSyntax,TObjectCreationExpressionSyntax,TExpressionSyntax,TTypeDeclarationSyntax,TArgumentSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateType.AbstractGenerateTypeService`6.GenerateTypeCodeAction.ComputeOperationsAsync[TService,TSimpleNameSyntax,TObjectCreationExpressionSyntax,TExpressionSyntax,TTypeDeclarationSyntax,TArgumentSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>**Version Used**: 
Visual Studio Community 2017 v15.3.5

**Steps to Reproduce**:

1. File -&gt; New -&gt; Windows Classic Desktop Console App (.NET Framework) targeting .NET Framework 3.0
2. In Program.cs paste:
``</Description>
  </Issue>
  <Issue>
    <IssueID>22292</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CLI: namespace error on fresh VB project</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>22/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22292</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro:

1. `mkdir 22227-cli-vb`
2. `cd 22227-cli-vb`
3. `dotnet new console --language=vb`
4. `dotnet build` produces the namespace error below

``

Relates to </Description>
  </Issue>
  <Issue>
    <IssueID>22289</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>22289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ArgumentOutOfRangeException in CompletionService.GetCompletionsAsync</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>20/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.3.2

**Steps to Reproduce**:
Unfortunately I don't know how to isolate this. This is something I see in logs of my Roslyn-based project, and I wasn't able to reproduce it locally (however I consistently see it in logs).

I hope you might be able to guess something from the stack trace, or suggest a way to get more information about this.

Stack trace (cleaned up from Application Insights):
``

**Expected Behavior**:
There are no exceptions from `CompletionService`.</Description>
  </Issue>
  <Issue>
    <IssueID>22283</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tests for readonly references overload hiding, inheritance, resolution, and generic type inference.</Title>
    <CreatedDate>22/09/2017</CreatedDate>
    <ClosedDate>11/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Related to test plan #19216:
Tests need to be added for hiding/overriding/inheriting, and make sure that compiler differentiates between ref/ref-readonly/out/none.</Description>
  </Issue>
  <Issue>
    <IssueID>22280</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add file banner doesn't work cross-language</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Depth Testing</Name>
        <IssueID>22280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>22280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Vsuml 26920.4001

The new feature add file banner doesn't allow you to use 'add file banner' for files of a different language than the original project.
**Steps to Reproduce**:
1. Create a new VB console app.
2. Add 2 CSharp class files, and add appropriate references/packages to compile them
3. Add a comment at the top of one of the CSharp class files like //test
4. Go to the second CSharp class file and attempt to activate quick actions.

**Expected Behavior**:
The quick action should be present to 'add file banner' from the first comment.
**Actual Behavior**:
The option is missing.

It still works for vb if you add a second vb file and attempt the same thing.

Also, I don't know if this feature is planned or supposed to work, but it would be cool to allow you to add file banner across languages with conversions. So a comment " 'test1 " from a vb file could be added/converted to a CSharp one as //test1
</Description>
  </Issue>
  <Issue>
    <IssueID>22279</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>22279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>API review for IUsingStatement</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>13/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>22279</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We should merge the `Declaration` and `Value` into a single field. The OperationKind of this field will tell the user whether it is a variable declaration or an expression.

</Description>
  </Issue>
  <Issue>
    <IssueID>22278</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>22278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'is' keyword can be converted to "see langword" tag when it is already part of a "see langword" tag </Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>13/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Depth Testing</Name>
        <IssueID>22278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VSUML 26920.4001
**Steps to Reproduce**:
1.  Create a new VB console app
2. At the start of the file, above module, add summary comments. Inside them add the text: "test 1 is"
3. Select 'is' in the comment, open up quick actions and choose "`Use &lt;see langword= "is"/&gt;`
4. Select is from inside the resulting see tag, and open up quick actions again. As you can see you can make a second tag inside the first tag.
**Expected Behavior**:
Either 'is' shouldn't be selectable at all for this action as 'is' isn't present elsewhere in the code file, or 'is' shouldn't be selectable when it is already in the tag.
**Actual Behavior**:
You're able to make a second `&lt;see langword="is"/&gt;` inside the first.
![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>22276</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Adding better Diagnostics logging for FxCop</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>09/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>22272</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>22272</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CompletesTrackingOperation should not dispose of EmptyAsyncToken</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22272</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22272</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>22272</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>22272</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.3

:memo: Observed 18,000 scheduled tasks in a work queue in a "low memory" heap dump submitted for analysis.

When `TaskExtensions.CompletesTrackingOperation` is called with `EmptyAsyncToken.Instance`, it should not attempt to dispose of the token. The `Dispose()` method is empty, and scheduling the operation has substantial overhead.
</Description>
  </Issue>
  <Issue>
    <IssueID>22271</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>22271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Is it correct for local function symbols to default their accessibility to private and static?</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>22271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>22271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        public LocalFunctionSymbol(
            Binder binder,
            Symbol containingSymbol,
            LocalFunctionStatementSyntax syntax)
        {
            _syntax = syntax;
            _containingSymbol = containingSymbol;

            _declarationDiagnostics = new DiagnosticBag();

            _declarationModifiers =
                DeclarationModifiers.Private |
                DeclarationModifiers.Static |
                syntax.Modifiers.ToDeclarationModifiers(diagnostics: _declarationDiagnostics);
`</Code>
    <Description>From our discussion.
Is this visible through the semantic model APIs? Should this rather be an implementation detail of how we emit?

``</Description>
  </Issue>
  <Issue>
    <IssueID>22270</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deconstruct method with ref readonly parameter produces invalid messages</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>22270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Invalid
{
    public void Deconstruct(ref readonly string p1, ref readonly string p2)
    {
    }
}
class Test
{
    void M()
    {
        (string p1, string p2) = new Invalid();
    }
}


Errors:

error CS1615: Argument 1 may not be passed with the 'out' keyword
error CS1615: Argument 2 may not be passed with the 'out' keyword
error CS8129: No suitable Deconstruct instance or extension method was found for type 'Invalid', with 2 out parameters and a void return type.
`</Code>
    <Description>``

The first two errors are not valid here.</Description>
  </Issue>
  <Issue>
    <IssueID>22267</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Should we offer a fixer to change "readonly ref" to "ref readonly"?</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>22267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>22266</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>22266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpConvertIfToSwitchCodeRefactoringProvider crashes in some Roslyn code</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>09/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Developer Community</Name>
        <IssueID>22266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22266</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        internal static void CheckUnsafeModifier(this Symbol symbol, DeclarationModifiers modifiers, Location errorLocation, DiagnosticBag diagnostics)
        {
            if (((modifiers &amp; DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) &amp;&amp; !symbol.CompilationAllowsUnsafe())
            {
                Debug.Assert(errorLocation != null);
                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);
            }
        }




System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax'.
   at Microsoft.CodeAnalysis.CSharp.ConvertIfToSwitch.CSharpConvertIfToSwitchCodeRefactoringProvider.CSharpAnalyzer.CreatePatternFromExpression(ExpressionSyntax operand)
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
   at Microsoft.CodeAnalysis.ConvertIfToSwitch.AbstractConvertIfToSwitchCodeRefactoringProvider.Analyzer`4.&lt;GetSections&gt;d__7.MoveNext()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at async Microsoft.CodeAnalysis.ConvertIfToSwitch.AbstractConvertIfToSwitchCodeRefactoringProvider.Analyzer`4.ComputeRefactoringsAsync[TStatementSyntax,TIfStatementSyntax,TExpressionSyntax,TSwitchLabelSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ConvertIfToSwitch.AbstractConvertIfToSwitchCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>In `SymbolExtensions.CheckUnsafeModifier`, click on `if`. I get the yellow band for analyzer crash with stacktrace which I copied below.

``</Description>
  </Issue>
  <Issue>
    <IssueID>22265</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove IArrayCreationExpression.ElementType</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>22265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>22264</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>22264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Verify ref-readonly metadata and API are imported/used correctly from ref-assemblies</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>04/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22264</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Part of test plan #19216 

Verify:
* Methods
* Properties
* Indexers
* Delegates
* R Extension Methods
* RR Extension Methods</Description>
  </Issue>
  <Issue>
    <IssueID>22262</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>UTF8-no-BOM causes diff window to display erroneous encoding warning</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels />
    <Description>VS 15.3.5, iirc started in VS15.3.0

It happens with both Git and TFVC so it seems to be related to the diff tool itself.
It's not specific to .editorconfig, though `charset = utf-8` certainly exacerbates the existing problem.

Repro:

1. Save a file as UTF8 without BOM and commit to source control.
2. Make a change to the file and resave.
3. View the diff.

It erroneously shows this message at the top:

&gt; These files have different encodings. Left file: Western European (Windows). Right File: Unicode (UTF-8) without signature. You can resolve the difference by saving the right file with the encoding Western European (Windows).

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>22261</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extra conversion inserted in an expression tree</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>01/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>22261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Linq.Expressions;

namespace TestExpression
{
    class MainClass
    {
        static void Main(string[] args)
        {
            Bar&lt;IFooChild&gt; bar = new Bar&lt;IFooChild&gt;();

            Call(bar);
        }

        static void Call&lt;TInterface&gt;(Bar&lt;TInterface&gt; foo)
            where TInterface : IFoo
        {
            foo.PrintExpression((x) =&gt; x.value);
        }
    }

    public interface IFooChild : IFoo
    {
    }

    public interface IFoo
    {
        int value { get; set; }
    }

    public class Bar&lt;TInterface&gt;
        where TInterface : IFoo
    {
        public void PrintExpression(Expression&lt;Func&lt;TInterface, int&gt;&gt; valueExpression)
        {
            Console.WriteLine(valueExpression.ToString());
            return;
        }
    }
} 

`</Code>
    <Description>
This is likely a result of the fix for  which was about the absence of such conversion nodes in general.

Now there is a smaller case where a conversion is unexpected.

``

One workaround is to add 'class' to the template part (change where TInterface : IFoo to where TInterface : class, IFoo)  ,  but ideally compiler should not insert this cast.</Description>
  </Issue>
  <Issue>
    <IssueID>22259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Path names with spaces fail in build/scripts/obtain_dotnet.sh</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>27/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>22259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
``

There are other lines, both in `obtain_dotnet.sh` and other `*.sh` files that contain *unquoted* variables. This is problematic, as the variables undergo word splitting and causes issues like the above. See e.g. [BashPitfalls]( for many discussions on this.</Description>
  </Issue>
  <Issue>
    <IssueID>22257</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>khyperia</FixedById>
        <IssueID>22257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CLI: Task failed because "" was not found.</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:

* Microsoft.NETCore.Compilers --version 2.6.0-beta1-62119-06

2.6.0-beta1-62107-06 with `InitialTargets="MakeCompilerScriptsExecutable"` [removed]( exhibits the same problem. The last working version seems to be 2.6.0-beta1-62106-06.

**Steps to Reproduce**:

1. docker run -it --rm microsoft/dotnet:2.0-sdk
2. mkdir ~/project
3. cd ~/project
4. dotnet new console
5. dotnet add package Microsoft.NETCore.Compilers --version 2.6.0-beta1-62119-06 --source 
6. dotnet build

**Expected Behavior**:

No error.

**Actual Behavior**:

&gt; /root/.nuget/packages/microsoft.netcore.compilers/2.6.0-beta1-62119-06/tools/Microsoft.CSharp.Core.targets(84,5): error MSB3082: Task failed because "" was not found. [/root/project/project.csproj]

Most likely related to 

Might be because $(CscToolPath) is empty and $(CscToolExe) contains the full path:

$(CscToolExe) = "/usr/share/dotnet/sdk/2.0.0/Roslyn/RunCsc.sh"  
$(CscToolPath) = ""

(And shouldn't it use the RunCsc script from the package?)

cc @khyperia </Description>
  </Issue>
  <Issue>
    <IssueID>22256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Auto Functions - Suggestion</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>22/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>22256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**7.1 suggested for 7.2 or later**: 

**Allow a function to auto declare and return a value.**:

**Existing format example:**

        public bool Navigate(Type sourcePageType)
        {
            var success = false;
            if (Application.Current is INavigate navigator)
            {
                success = navigator.Navigate(sourcePageType);

                if (success)
                    CurrentPage = sourcePageType;
            }
            return success;
        }

**Suggested format example:**

        public bool Navigate(Type sourcePageType) as success
        {
            if (Application.Current is INavigate navigator)
            {
                success = navigator.Navigate(sourcePageType);

                if (success)
                    CurrentPage = sourcePageType;
            }
        }

In the suggested format the function automatically initializes a value for success and will automatically return that value whenever return is called.  In this method you can avoid declaring the variable and returning it when we know this will be the behavior anyway.  Thoughts?
</Description>
  </Issue>
  <Issue>
    <IssueID>22254</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Explicit tuple name simplification not offered</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
There's no lightbulb offering to remove the explicit tuple name. It does show up for anonymous types though...</Description>
  </Issue>
  <Issue>
    <IssueID>22253</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>22253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion on `out` in local function impedes with typing</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I tried to add an out parameter to a local function and Intellisense forced a completion of a type name instead of `out`.

![image](


FYI @agocke @Pilchie for triage</Description>
  </Issue>
  <Issue>
    <IssueID>22252</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CodeBlock and OperationBlock analysis contexts should expose all owning symbols</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22252</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VB allows field declarations to share same initializer, which means that a code block/operation block can have multiple owning symbols. We currently expose a single owning symbol, but we should allow analyzers to get all owning symbols for a block contenxt. This functionality would be needed by an existing Roslyn analyzer if we implement  and remove the `ISymbolInitializer` APIs</Description>
  </Issue>
  <Issue>
    <IssueID>22249</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Instance/static method compile error</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>22249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22249</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

``

**Expected Behavior**:
Should compile, there is only one instance method and string is an object.

**Actual Behavior**:
Does not compile: 

&gt; Member 'ConsoleApplication.Test.IsValid(string)' cannot be accessed with an instance reference; qualify it with a type name instead
</Description>
  </Issue>
  <Issue>
    <IssueID>22244</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>22244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove PROTOTYPE markers from "private protected" feature</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>30/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It looks like some PROTOTYPE markers made it through when the feature was merged.



</Description>
  </Issue>
  <Issue>
    <IssueID>22242</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Implement Interface loses "ref readonly"</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Implement interface refactoring loses "ref readonly" on parameters. 

Inherit from abstract class does this too. </Description>
  </Issue>
  <Issue>
    <IssueID>22241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replace lambda with local function loses "ref readonly"</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        delegate ref readonly int D1(ref readonly int arg);

            D1 dd = (ref readonly int a) =&gt; ref a;
`</Code>
    <Description>``

Replace dd with a local function using IDE. - loses "ref readonly"
</Description>
  </Issue>
  <Issue>
    <IssueID>22240</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Accessibility modifier removes "ref" from a ref struct</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
readonly unsafe ref struct S1 { }
`</Code>
    <Description>
Invoke Refactor/Add Accessibility modifiers on 

``
The dialog offers adding "private", but also offers to remove "ref"

</Description>
  </Issue>
  <Issue>
    <IssueID>22239</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Change Signature does not show "ref readonly" modifier on parameters</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
The Change Signature  shows  other modifiers like "out" but not "ref readonly" - not sure if it does not understand it or because it simply does not fit. There is no much space in that UI.</Description>
  </Issue>
  <Issue>
    <IssueID>22238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>22238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract interface loses "ref readonly" on parameters and returns</Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
parameters become an ordinary `ref`, returns become ordinary byval returns.</Description>
  </Issue>
  <Issue>
    <IssueID>22237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bogus assert in EnsureIsReadOnlyAttributeExists </Title>
    <CreatedDate>21/09/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
                if (parameter.RefKind == RefKind.RefReadOnly)
                {
                    // These parameters might not come from a compilation (example: lambdas evaluated in EE).
                    // During rewriting, lowering will take care of flagging the appropriate PEModuleBuilder instead.
                    parameter.DeclaringCompilation?.EnsureIsReadOnlyAttributeExists(diagnostics, parameter.GetNonNullSyntaxNode().Location, modifyCompilationForRefReadOnly);
                }
`</Code>
    <Description>I saw the assert once while trying to rename a "ref readonly" parameter in CoreFxLab solution.
The assert is ignorable and I could not reproduce it again. 

== Update: 
It seems it can also be cause by solution crawler. 

The assert is benign and seems bogus. 

The following code calls into the helper when attribute is already already known to be needed that bit is "frozen".

``

Either should not call, or should relax the assert to not be triggered when asking for something that we already asked before. 
I think we should do the latter. -relax the attribute
</Description>
  </Issue>
  <Issue>
    <IssueID>22233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>preserve receiver even in error case where static method or event is called</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>19/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>see this ( and this (

right now, when static call or event reference is off instance, we drop that info. people believe we should preserve that info.</Description>
  </Issue>
  <Issue>
    <IssueID>22228</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MethodGroup being used in error case</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>19/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>22228</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C
{
    static void Main()
    {
        System.Collections.IEnumerable sequence = null;
        /*&lt;bind&gt;*/foreach (MissingType x in sequence)
        {
            bool b = !x.Equals(null);
        }/*&lt;/bind&gt;*/
    }
}


this gives this result


IForEachLoopStatement (LoopKind.ForEach) (OperationKind.LoopStatement, IsInvalid) (Syntax: 'foreach (Mi ... }')
  Locals: Local_1: MissingType x
  LoopControlVariable: ILocalReferenceExpression: x (IsDeclaration: True) (OperationKind.LocalReferenceExpression, Type: MissingType, Constant: null, IsInvalid) (Syntax: 'foreach (Mi ... }')
  Collection: ILocalReferenceExpression: sequence (OperationKind.LocalReferenceExpression, Type: System.Collections.IEnumerable) (Syntax: 'sequence')
  Body: IBlockStatement (1 statements, 1 locals) (OperationKind.BlockStatement) (Syntax: '{ ... }')
      Locals: Local_1: System.Boolean b
      IVariableDeclarationStatement (1 declarations) (OperationKind.VariableDeclarationStatement) (Syntax: 'bool b = !x ... uals(null);')
        IVariableDeclaration (1 variables) (OperationKind.VariableDeclaration) (Syntax: 'b = !x.Equals(null)')
          Variables: Local_1: System.Boolean b
          Initializer: IConversionExpression (Implicit, TryCast: False, Unchecked) (OperationKind.ConversionExpression, Type: System.Boolean) (Syntax: '!x.Equals(null)')
              Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
              Operand: IUnaryOperatorExpression (UnaryOperatorKind.Not) (OperationKind.UnaryOperatorExpression, Type: System.Object) (Syntax: '!x.Equals(null)')
                  Operand: IInvocationExpression ( ? C.()) (OperationKind.InvocationExpression, Type: ?) (Syntax: 'x.Equals(null)')
                      Instance Receiver: IOperation:  (OperationKind.None) (Syntax: 'x.Equals')
                          Children(1):
                              ILocalReferenceExpression: x (OperationKind.LocalReferenceExpression, Type: MissingType) (Syntax: 'x')
                      Arguments(1):
                          IArgument (ArgumentKind.Explicit, Matching Parameter: null) (OperationKind.Argument) (Syntax: 'null')
                            ILiteralExpression (OperationKind.LiteralExpression, Type: null, Constant: null) (Syntax: 'null')
                            InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
                            OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)
  NextVariables(0)
`</Code>
    <Description>see this test - IForEachLoopStatement_BadElementType

``

here this code where x is missing type
 bool b = **!x.Equals(null)**; 

bound to bound group and becomes this                       
 Instance Receiver: IOperation:  (OperationKind.None) (Syntax: **'x.Equals'**)

we want to take a look whether this is right or wrong.</Description>
  </Issue>
  <Issue>
    <IssueID>22227</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.NET Core 2.0: BC35000: Requested operation is not available -- For To loop with Object counter.</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>05/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>22227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
`dotnet --info` output:
.NET Command Line Tools (2.0.0)

Product Information:
 Version:            2.0.0
 Commit SHA-1 hash:  cdcd1928c9

Runtime Environment:
 OS Name:     Mac OS X
 OS Version:  10.12
 OS Platform: Darwin
 RID:         osx.10.12-x64
 Base Path:   /usr/local/share/dotnet/sdk/2.0.0/

Microsoft .NET Core Shared Framework Host

  Version  : 2.0.0
  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d

**Steps to Reproduce**:
mkdir test
cd test
dotnet new console --language=vb
dotnet add package Microsoft.VisualBasic
(edit Program.vb to contain the code below)
dotnet build

== Program.vb ==
``

**Expected Behavior**:
Build succeeds

**Actual Behavior**:
Program.vb(5,9): error BC35000: Requested operation is not available because the runtime library function 'Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl.ForLoopInitObj' is not defined.
Program.vb(5,9): error BC35000: Requested operation is not available because the runtime library function 'Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl.ForNextCheckObj' is not defined.

**Additional Notes**:
I've added '--verbosity d' to dotnet build and verified that the 'RunVbc.sh' script gets the Microsoft.VisualBasic.dll passed to it. I've also verified that Microsoft.VisualBasic.dll contains the symbol with that name. Perhaps I'm doing something wrong? Note that I can use other methods from Microsoft.VisualBasic like 'ChrW'. I can't find any answers elsewhere, so posting it here.</Description>
  </Issue>
  <Issue>
    <IssueID>22224</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>22224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Re-enable failing tests TestParentOperations and TestClone</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>21/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>22224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>22224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>22224</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>These tests are being disabled as part of  but should get fixed with change in the way GetOperation works: </Description>
  </Issue>
  <Issue>
    <IssueID>22215</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Redesign how workspace kinds work</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>22215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>22215</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Having a single string as a workspace kind has limitations. Instead, if workspaces could have multiple kinds, such as "tags", one could export workspace services targeting tags, and not specific workspace kinds.

There should be an M:N relationship allowing all combination between workspace services and workspaces. Case in point: this service is only exported for 3 specific workspaces and if you're not one of them, this service won't get exported for you.

</Description>
  </Issue>
  <Issue>
    <IssueID>22213</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Consider adding slow span binary to tests and test agains that</Title>
    <CreatedDate>20/09/2017</CreatedDate>
    <ClosedDate>05/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>22213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>22213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>22213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>22213</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We can switch all tests to the actual span or only some subset.

For the most part we only care about APIs exposed, so we do not strictly need to test with actual span.
</Description>
  </Issue>
  <Issue>
    <IssueID>21831</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>21831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Escape analysis of a local with no initializers crashes</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>21831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>21831</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We were still discussing whether this should default to "global scope" or "use scope". As a result it was not implemented to report either and now crashes with "Unreachable"

We should report something. It seems we are leaning towards "global scope".
We can change that later, but we should report something. 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21831</IssueID>
        <PullRequestID>21835</PullRequestID>
        <Title>Handle val escape for locals with no initializer</Title>
        <Description>Fixes:

</Description>
        <CreatedDate>31/08/2017</CreatedDate>
        <ClosedDate>31/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21831</IssueID>
            <PullRequestID>21835</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21828</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ensure that LoopControlVariable has IsDeclaration=true for underlying ILocalReferenceExpression</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>27/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21828</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21828</IssueID>
        <PullRequestID>21791</PullRequestID>
        <Title>Changes to the IOperation API shape for loop statements</Title>
        <Description>1. Flatten the loop statement hierarchy to only derive from ILoopStatement
2. Separate out do loops and while loops
3. Separate out the C# and VB for loops due to different semantics and syntax.

Fixes #21282</Description>
        <CreatedDate>29/08/2017</CreatedDate>
        <ClosedDate>14/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>21828</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21828</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21828</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21827</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Fix IOperation dump formatting for LogLocals</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>27/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21827</IssueID>
        <PullRequestID>21791</PullRequestID>
        <Title>Changes to the IOperation API shape for loop statements</Title>
        <Description>1. Flatten the loop statement hierarchy to only derive from ILoopStatement
2. Separate out do loops and while loops
3. Separate out the C# and VB for loops due to different semantics and syntax.

Fixes #21282</Description>
        <CreatedDate>29/08/2017</CreatedDate>
        <ClosedDate>14/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>21827</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21827</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21827</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21826</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>In-place initialization of structs optimization could be observable when ctor has ref-like args</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>27/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>21826</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Bug similar to  most likely exists when struct ctor takes a ref-like struct that refers to the variable targeted by the assignment.

We should suppress the in-place optimization in such case or it could be observable.</Description>
  </Issue>
  <Issue>
    <IssueID>21823</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose InnerLocals for for loop</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>15/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21823</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21823</IssueID>
        <PullRequestID>21791</PullRequestID>
        <Title>Changes to the IOperation API shape for loop statements</Title>
        <Description>1. Flatten the loop statement hierarchy to only derive from ILoopStatement
2. Separate out do loops and while loops
3. Separate out the C# and VB for loops due to different semantics and syntax.

Fixes #21282</Description>
        <CreatedDate>29/08/2017</CreatedDate>
        <ClosedDate>14/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>21823</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21823</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21823</IssueID>
            <PullRequestID>21791</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21822</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Synthesized name of a method implementing a local function doesn't allow reconstructing the original name of the function</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>01/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>21822</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently the synthesized name is ``) that can't use used in a valid identifier and that would allows us to parse the local function name unambiguously.

This would be a trivial change. To reduce the amount of code out there that uses the ambiguous synthesized name I suggest we implement it asap (in 15.4).</Description>
  </Issue>
  <Issue>
    <IssueID>21814</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>21814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler exceptions should be visible at default verbosity in dotnet build</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>20/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21814</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public class Class1
{
    static void Test()
    {
        bool outside = true;

        void Inner()
        {
            void Bar()
            {
            }

            void Foo()
            {
                Bar();

                bool captured = outside;
            }
        }
    }
}


**Expected Behavior**:

`dotnet build` shows the exception.

**Actual Behavior**:

The output of `dotnet build` is not very useful in diagnosing the issue:


&gt;dotnet build
Microsoft (R) Build Engine version 15.3.409.57025 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

C:\Program Files\dotnet\sdk\2.0.0\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "C:\Program Files\dotnet\sdk\2.0.0\Roslyn\RunCsc.cmd" exited with code -2146232797. [C:\code\tmp\coreapp\coreapp.csproj]

Build FAILED.

C:\Program Files\dotnet\sdk\2.0.0\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "C:\Program Files\dotnet\sdk\2.0.0\Roslyn\RunCsc.cmd" exited with code -2146232797. [C:\code\tmp\coreapp\coreapp.csproj]
    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:09.46


To see the exception, you have to use `dotnet build /v:n`, which also includes lots of irrelevant information:


&gt;dotnet build /v:n
Build started 30. 8. 2017 17:50:34.
     1&gt;Project "C:\code\tmp\coreapp\coreapp.sln" on node 1 (Restore target(s)).
     1&gt;ValidateSolutionConfiguration:
         Building solution configuration "Debug|Any CPU".
       Restore:
         Committing restore...
         Assets file has not changed. Skipping assets file writing. Path: C:\code\tmp\coreapp\obj\project.assets.json
         Restore completed in 22 ms for C:\code\tmp\coreapp\coreapp.csproj.

         NuGet Config files used:
             C:\Users\Svick\AppData\Roaming\NuGet\NuGet.Config
             C:\Program Files (x86)\NuGet\Config\Microsoft.VisualStudio.Offline.config

         Feeds used:
             C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\
             C:\Users\Svick\.dotnet\NuGetFallbackFolder
             C:\code\tmp\package-source
             https://api.nuget.org/v3/index.json
             https://dotnet.myget.org/F/dotnet-core/api/v3/index.json
             https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json
             https://dotnet.myget.org/F/roslyn-master-nightly/api/v3/index.json
             https://www.myget.org/F/aspnetvnext/api/v3/index.json
             https://www.nuget.org/api/v2/
     1&gt;Done Building Project "C:\code\tmp\coreapp\coreapp.sln" (Restore target(s)).

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:00.71
Microsoft (R) Build Engine version 15.3.409.57025 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

Build started 30. 8. 2017 17:50:35.
     1&gt;Project "C:\code\tmp\coreapp\coreapp.sln" on node 1 (Build target(s)).
     1&gt;ValidateSolutionConfiguration:
         Building solution configuration "Debug|Any CPU".
     1&gt;Project "C:\code\tmp\coreapp\coreapp.sln" (1) is building "C:\code\tmp\coreapp\coreapp.csproj" (2) on node 1 (default targets).
     2&gt;GenerateTargetFrameworkMonikerAttribute:
       Skipping target "GenerateTargetFrameworkMonikerAttribute" because all output files are up-to-date with respect to the input files.
       CoreGenerateAssemblyInfo:
       Skipping target "CoreGenerateAssemblyInfo" because all output files are up-to-date with respect to the input files.
       CoreCompile:
         C:\Program Files\dotnet\sdk\2.0.0\Roslyn\RunCsc.cmd /noconfig /unsafe+ /checked- /nowarn:1701,1702,1705,1701,1702 /langversion:7.0 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;DEBUG;NETCOREAPP2_0 /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\Microsoft.CSharp.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\Microsoft.VisualBasic.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\Microsoft.Win32.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\mscorlib.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\netstandard.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.AppContext.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Buffers.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Collections.Concurrent.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Collections.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Collections.Immutable.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Collections.NonGeneric.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Collections.Specialized.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.Annotations.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.Composition.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.DataAnnotations.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.EventBasedAsync.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ComponentModel.TypeConverter.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Configuration.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Console.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Core.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Data.Common.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Data.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.Contracts.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.Debug.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.DiagnosticSource.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.FileVersionInfo.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.Process.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.StackTrace.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.TextWriterTraceListener.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.Tools.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.TraceSource.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Diagnostics.Tracing.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Drawing.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Drawing.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Dynamic.Runtime.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Globalization.Calendars.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Globalization.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Globalization.Extensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.Compression.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.Compression.FileSystem.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.Compression.ZipFile.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.FileSystem.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.FileSystem.DriveInfo.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.FileSystem.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.FileSystem.Watcher.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.IsolatedStorage.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.MemoryMappedFiles.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.Pipes.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.IO.UnmanagedMemoryStream.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Linq.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Linq.Expressions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Linq.Parallel.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Linq.Queryable.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Http.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.HttpListener.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Mail.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.NameResolution.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.NetworkInformation.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Ping.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Requests.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Security.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.ServicePoint.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.Sockets.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.WebClient.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.WebHeaderCollection.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.WebProxy.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.WebSockets.Client.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Net.WebSockets.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Numerics.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Numerics.Vectors.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ObjectModel.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.DispatchProxy.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Emit.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Emit.ILGeneration.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Emit.Lightweight.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Extensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Metadata.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Reflection.TypeExtensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Resources.Reader.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Resources.ResourceManager.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Resources.Writer.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.CompilerServices.VisualC.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Extensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Handles.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.InteropServices.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.InteropServices.RuntimeInformation.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.InteropServices.WindowsRuntime.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Loader.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Numerics.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Serialization.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Serialization.Formatters.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Serialization.Json.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Serialization.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.Serialization.Xml.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Claims.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Cryptography.Algorithms.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Cryptography.Csp.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Cryptography.Encoding.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Cryptography.Primitives.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Cryptography.X509Certificates.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.Principal.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Security.SecureString.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ServiceModel.Web.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ServiceProcess.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Text.Encoding.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Text.Encoding.Extensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Text.RegularExpressions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Overlapped.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Tasks.Dataflow.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Tasks.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Tasks.Extensions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Tasks.Parallel.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Thread.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.ThreadPool.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Threading.Timer.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Transactions.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Transactions.Local.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.ValueTuple.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Web.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Web.HttpUtility.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Windows.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.Linq.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.ReaderWriter.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.Serialization.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.XDocument.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.XmlDocument.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.XmlSerializer.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.XPath.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Xml.XPath.XDocument.dll" /reference:"C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\WindowsBase.dll" /debug+ /debug:portable /filealign:512 /nologo /optimize- /out:obj\Debug\netcoreapp2.0\coreapp.dll /target:exe /warnaserror- /utf8output /deterministic+ /langversion:7.0 Program.cs "C:\Users\Svick\AppData\Local\Temp\.NETCoreApp,Version=v2.0.AssemblyAttributes.cs" obj\Debug\netcoreapp2.0\coreapp.AssemblyInfo.cs /warnaserror+:NU1605
         FailFast: System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
            at System.ThrowHelper.ThrowKeyNotFoundException()
            at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaOrLocalFunction(IBoundLambdaOrFunction node, ClosureKind&amp; closureKind, NamedTypeSymbol&amp; translatedLambdaContainer, LambdaFrame&amp; containerAsFrame, BoundNode&amp; lambdaScope, DebugId&amp; topLevelMethodId, DebugId&amp; lambdaId)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitLocalFunctionStatement(BoundLocalFunctionStatement node)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(BoundBlock node, ArrayBuilder`1 prologue, ArrayBuilder`1 newLocals)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(BoundBlock node)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaOrLocalFunction(IBoundLambdaOrFunction node, ClosureKind&amp; closureKind, NamedTypeSymbol&amp; translatedLambdaContainer, LambdaFrame&amp; containerAsFrame, BoundNode&amp; lambdaScope, DebugId&amp; topLevelMethodId, DebugId&amp; lambdaId)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitLocalFunctionStatement(BoundLocalFunctionStatement node)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(BoundBlock node, ArrayBuilder`1 prologue, ArrayBuilder`1 newLocals)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.IntroduceFrame(BoundNode node, LambdaFrame frame, Func`3 F)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(BoundBlock node)
            at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(BoundStatement loweredBody, NamedTypeSymbol thisType, ParameterSymbol thisParameter, MethodSymbol method, Int32 methodOrdinal, MethodSymbol substitutedSourceMethod, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, HashSet`1 assignLocals)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()

            at System.Environment.FailFast(System.String, System.Exception)
            at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
            at System.ThrowHelper.ThrowKeyNotFoundException()
            at System.Collections.Generic.Dictionary`2[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].get_Item(System.__Canon)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaOrLocalFunction(Microsoft.CodeAnalysis.CSharp.IBoundLambdaOrFunction, Microsoft.CodeAnalysis.CSharp.ClosureKind ByRef, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol ByRef, Microsoft.CodeAnalysis.CSharp.LambdaFrame ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CodeGen.DebugId ByRef, Microsoft.CodeAnalysis.CodeGen.DebugId ByRef)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaOrLocalFunction(Microsoft.CodeAnalysis.CSharp.IBoundLambdaOrFunction, Microsoft.CodeAnalysis.CSharp.ClosureKind ByRef, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol ByRef, Microsoft.CodeAnalysis.CSharp.LambdaFrame ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CodeGen.DebugId ByRef, Microsoft.CodeAnalysis.CodeGen.DebugId ByRef)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.IntroduceFrame(Microsoft.CodeAnalysis.CSharp.BoundNode, Microsoft.CodeAnalysis.CSharp.LambdaFrame, System.Func`3&lt;Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt;,Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;,Microsoft.CodeAnalysis.CSharp.BoundNode&gt;)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)
            at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor)
            at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)
            at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, System.Collections.Generic.HashSet`1&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt;)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Boolean, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator ByRef, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt;, Microsoft.CodeAnalysis.ArrayBuilder`1&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt;, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol ByRef)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, ProcessedFieldInitializers ByRef, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)
            at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass21_0.&lt;CompileNamedTypeAsTask&gt;b__0()
            at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
            at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
            at System.Threading.ThreadPoolWorkQueue.Dispatch()
     2&gt;C:\Program Files\dotnet\sdk\2.0.0\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "C:\Program Files\dotnet\sdk\2.0.0\Roslyn\RunCsc.cmd" exited with code -2146232797. [C:\code\tmp\coreapp\coreapp.csproj]
     2&gt;Done Building Project "C:\code\tmp\coreapp\coreapp.csproj" (default targets) -- FAILED.
     1&gt;Done Building Project "C:\code\tmp\coreapp\coreapp.sln" (Build target(s)) -- FAILED.

Build FAILED.

       "C:\code\tmp\coreapp\coreapp.sln" (Build target) (1) -&gt;
       "C:\code\tmp\coreapp\coreapp.csproj" (default target) (2) -&gt;
       (CoreCompile target) -&gt;
         C:\Program Files\dotnet\sdk\2.0.0\Roslyn\Microsoft.CSharp.Core.targets(84,5): error MSB6006: "C:\Program Files\dotnet\sdk\2.0.0\Roslyn\RunCsc.cmd" exited with code -2146232797. [C:\code\tmp\coreapp\coreapp.csproj]

    0 Warning(s)
    1 Error(s)

Time Elapsed 00:00:09.83
`</Code>
    <Description>**Version Used**: .Net Core 2.0

**Steps to Reproduce**:

Create a .Net Core project that causes the C# compiler to throw an exception and run `dotnet build`. For example, in .Net Core 2.0 that can be code that triggers 

``

---

Related issue: 
Originally reported as 

According to @dasMulli (see  the relevant code is in this repository.</Description>
  </Issue>
  <Issue>
    <IssueID>21813</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generic Enums (Not sure if this is the right place for this)</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>31/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>21813</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21813</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Recently I was trying to implement something like a Generic Enum Property. I looked at Enum and TEnum but they did not seem to provide what I needed. Is there any work to make Enums more flexible to work with (a la Java)? Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>21812</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: Multiple providers crash when dealing with variables/expressions typed as an array of tuples.</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>18/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21812</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio 2017 Community 15.3.2

**Steps to Reproduce**:

Type in the following code in a VB project:

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21812</IssueID>
        <PullRequestID>21854</PullRequestID>
        <Title>VB: handle typeless tuple in array initializer</Title>
        <Description>A typeless tuple in a VB array initializer would crash. For example: `Dim mTupleArray As (X As Integer, P As System.Func(Of Byte(), Integer))() = { (X:=0, P:=AddressOf MyFunction) }`.
The logic for determining the dominant type could handle typeless expressions (like `AddressOf MyFunction`), but not typeless tuples.

Fixes 
</Description>
        <CreatedDate>31/08/2017</CreatedDate>
        <ClosedDate>06/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21812</IssueID>
            <PullRequestID>21854</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>21812</IssueID>
            <PullRequestID>21854</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21812</IssueID>
            <PullRequestID>21854</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>21854</PullRequestID>
            <IssueID>21812</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21811</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>21811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>csc.exe crashes with exit code -2146232797</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>15/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    class Program
    {
        static void Main(string[] args)
        {
            var history = new Queue&lt;long&gt;();
            Enumerable.Range(0, 5)
                .Select(i =&gt;
                {
                    history.Enqueue(i);
                    return Test(i);

                    bool Test(int v)
                    {
                        history.Dequeue();
                        return Square(v) &gt; 5;
                    }

                    int Square(int w)
                    {
                        return w * w;
                    }
                });
        }
    }
`</Code>
    <Description>**Version Used**: 

Roslyn included in VS 2017 15.3.3

**Steps to Reproduce**:

Compile the following code:
``
**Expected Behavior**:

Since this is valid C# syntax the code should compile

**Actual Behavior**:

csc.exe crashes with exit code -2146232797</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21811</IssueID>
        <PullRequestID>22134</PullRequestID>
        <Title>Add regression tests for 15.3 closure conversion crashes</Title>
        <Description>Fixes #21811
Fixes #21645
Fixes #21543</Description>
        <CreatedDate>14/09/2017</CreatedDate>
        <ClosedDate>15/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21811</IssueID>
            <PullRequestID>22134</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21811</IssueID>
            <PullRequestID>22134</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21806</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Offer type names prefixed with '_', 'm_', and 's_' in editor completion list when declaring field</Title>
    <CreatedDate>30/08/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21806</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21806</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
// Scenario 1:
private IFoo [|]

// Scenario 2:
private static IFoo [|]
`</Code>
    <Description>**Version Used**: Microsoft Visual Studio 15.0.26730.10

**Steps to Reproduce**:

``

**Expected Behavior**:

**Scenario 1** `_foo`, `m_foo`, and `m_Foo` are offered in the completion list.
**Scenario 2** `s_foo` and `s_Foo` are offered in the completion list.

**Actual Behavior**:

None of the suggestions above are offered in the completion list, although `foo`/`Foo`/`GetFoo` are.

---

Perhaps this isn't a bug and whoever implemented this feature just didn't think to add these suggestions, but prefixing fields with `_` or `m_` is common in a lot of projects so it would be quite valuable if this were fixed.
</Description>
  </Issue>
  <Issue>
    <IssueID>21801</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>21801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Snippets shown in VB comments</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>28/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Set snippets behavior to "Always include snippets" and snippets are shown while typing comments in VB.</Description>
  </Issue>
  <Issue>
    <IssueID>21797</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update VisualBasicOperationFactory.CreateBoundConversion to use GetConversion</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>26/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21797</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> will add a GetConversion method for VB, we should update CreateBoundConversion to use that method instead of replicating the functionality.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21797</IssueID>
        <PullRequestID>21445</PullRequestID>
        <Title>Fix IArgument.InConversion/OutConversion</Title>
        <Code>cs
    public interface IArgument : IOperation
    {
        /// &lt;summary&gt;
        /// Kind of argument.
        /// &lt;/summary&gt;
        ArgumentKind ArgumentKind { get; }
        /// &lt;summary&gt;
        /// Parameter the argument matches.
        /// &lt;/summary&gt;
        IParameterSymbol Parameter { get; }
        /// &lt;summary&gt;
        /// Value supplied for the argument.
        /// &lt;/summary&gt;
        IOperation Value { get; }
        /// &lt;summary&gt;
        /// Information of the conversion applied to the argument value passing it into the target method. Applicable only to VB Reference arguments.
        /// &lt;/summary&gt;
        CommonConversion InConversion { get; }
        /// &lt;summary&gt;
        /// Information of the conversion applied to the argument value after the invocation. Applicable only to VB Reference arguments.
        /// &lt;/summary&gt;
        CommonConversion OutConversion { get; }
    }
`</Code>
        <Description>Fix #18548. Changed the In/OutConversion from `IConversionExpression` to `CommonConversion` (added in #21040 )

`` </Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>12/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21445</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21445</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21797</IssueID>
        <PullRequestID>21394</PullRequestID>
        <Title>Document compatibility issue with EmitOptions change</Title>
        <Description>FYI @tmat @gafter @jaredpar 
@dotnet/roslyn-compiler for review. Doc-only change. Thanks</Description>
        <CreatedDate>08/08/2017</CreatedDate>
        <ClosedDate>27/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21394</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21394</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21394</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>21394</PullRequestID>
            <IssueID>21797</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21797</IssueID>
        <PullRequestID>21599</PullRequestID>
        <Title>EnC statement matching and editing for local functions</Title>
        <Description>Towards #5156</Description>
        <CreatedDate>18/08/2017</CreatedDate>
        <ClosedDate>25/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21797</IssueID>
            <PullRequestID>21599</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21796</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Remove Microsoft.CodeAnalysis.Semantics.ConversionKind</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>31/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>API isn't used any more, needs to be removed.</Description>
  </Issue>
  <Issue>
    <IssueID>21795</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody3 is failing</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21795</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21795</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>21795</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody3
      Assert.Contains() Failure
      Not found: 
      using System;
      class Program
      {
          static void Main()
          {
              Action a = () =&gt;
              {
                  using (null)
                  {
                      D d = delegate (int x)
                      {
                          return 2 * x;
                      };
                  }
              };
          }
      }
      In value:  
      using System;
      class Program
      {
          static void Main()
          {
              Action a = () =&gt;
              {
                  using (null)
                  {
      
                  }
              };
          }
      }
      Stack Trace:
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpFormatting.cs(202,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpFormatting.PasteCodeWithLambdaBody3()
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>21788</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Formatting document not working with asp.net core 1.1 web project</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2017 15.3.2

**Steps to Reproduce**:

1. Start new asp.net core 1.1 web project
2. Copy paste c# code snippet from anywhere
3. Formatting is not automatically applied
4. Edit -&gt; Advanced -&gt; Format Document doesn't work

**Expected Behavior**:
1. Should format automatically
2. Should format when using "Format Document"

**Actual Behavior**:
1. Does not format at all. </Description>
  </Issue>
  <Issue>
    <IssueID>21787</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please permit `nameof(global::N)`</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>15/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,

Consider code:
``
First statement compiles just fine, second emits error. Why is handling of namespace and class different here?</Description>
  </Issue>
  <Issue>
    <IssueID>21786</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issues building Roslyn Solution</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>29/08/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
Latest Source Code for Roslyn Project.

**Steps to Reproduce**:

1. Download Rolsyn Source Code.
2. As mentioned in the **Getting started coding in Visual Studio** section of **Contributing Code**, run the **Restore.cmd** command.
3. We get following error:

\roslyn-master&gt;Restore.cmd
**Property 'PositionalBinding' cannot be found for type 'System.Management.Automa
tion.CmdletBindingAttribute'.
At \roslyn-master\build\scripts\build.ps1:17 char:**
15
+ [CmdletBinding &lt;&lt;&lt;&lt; (PositionalBinding=$false)]
    + CategoryInfo          : InvalidOperation: (:) [], ParentContainsErrorRec
   ordException
    + FullyQualifiedErrorId : PropertyAssignmentException

**Expected Behavior**:
The command should run and restore all the dependencies.

**Actual Behavior**:
Error thrown.</Description>
  </Issue>
  <Issue>
    <IssueID>21785</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: IDE crashes when typing code to initialise array of tuple with delegate member.</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>06/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>21785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio 2017 Community 15.3.2

**Steps to Reproduce**:

Add a VB console project. The objective is to type the following code:

``

**Actual Behavior**:

As demonstrated above: IDE crashes.</Description>
  </Issue>
  <Issue>
    <IssueID>21783</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unable to compile C# 7.1 code on VSTS build agents</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>31/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>21783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
2017-08-29T08:49:18.0026052Z ##[error]Program.cs(11,22): Error CS8107: Feature 'async main' is not available in C# 7. Please use language version 7.1 or greater.

Adding [Roslyn compilers package](https://www.nuget.org/packages/Microsoft.Net.Compilers/2.3.1/) does not fix this. Same error.

**Notes**:

First attempt on build server as 4.7 failed as the SDK was not installed (odd, since I'd installed VS 2017 on the machine earlier). Downloaded and ran `NDP47-DevPack-KB3186612-ENU.exe` on the build server to fix this.

Second build failed as expected (log below):


2017-08-29T08:48:44.2515948Z CoreCompile:
2017-08-29T08:48:44.2672205Z   E:\Microsoft Visual Studio 2017\Enterprise\MSBuild\15.0\Bin\Roslyn\csc.exe /noconfig /nowarn:1701,1702 /nostdlib+ /platform:anycpu32bitpreferred /errorreport:prompt /warn:4 /define:TRACE /highentropyva+ /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\Microsoft.CSharp.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\mscorlib.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Core.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Data.DataSetExtensions.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Data.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Net.Http.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Xml.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Xml.Linq.dll" /debug:pdbonly /filealign:512 /optimize+ /out:obj\Release\CSharp7_1_Test.exe /ruleset:"E:\Microsoft Visual Studio 2017\Enterprise\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.00 /target:exe /utf8output Program.cs Properties\AssemblyInfo.cs "D:\BuildAgent1\_work\_temp\.NETFramework,Version=v4.7.AssemblyAttributes.cs"
2017-08-29T08:48:45.2516396Z   Using shared compilation with compiler from directory: E:\Microsoft Visual Studio 2017\Enterprise\MSBuild\15.0\Bin\Roslyn
2017-08-29T08:49:18.0026052Z ##[error]Program.cs(11,22): Error CS8107: Feature 'async main' is not available in C# 7. Please use language version 7.1 or greater.
2017-08-29T08:49:18.0026052Z Program.cs(11,22): error CS8107: Feature 'async main' is not available in C# 7. Please use language version 7.1 or greater. [D:\BuildAgent1\_work\89\s\CSharp7_1_Test.csproj]
2017-08-29T08:49:18.0807322Z ##[error]CSC(0,0): Error CS5001: Program does not contain a static 'Main' method suitable for an entry point
2017-08-29T08:49:18.0807322Z CSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [D:\BuildAgent1\_work\89\s\CSharp7_1_Test.csproj]
2017-08-29T08:49:18.1588592Z Done Building Project "D:\BuildAgent1\_work\89\s\CSharp7_1_Test.csproj" (default targets) -- FAILED.
`</Code>
    <Description>Visual Studio Enterprise 2017 v15.3.2
.NET framework 4.7.02046
VSTS Build Agent: 2.120.2 (running on Server 2008, latest patches)

**Steps to Reproduce**:

1. Create c# console app for .NET 4.7
2. Change `void Main()` to `async Task Main()`
3. Change project to use C# 7.1
4. Compile and run on dev machine
5. Push repo to VSTS system
6. Create a build: use ".NET Desktop" template
7. Use local build queue
8. Check "build solution" is set to "latest" Visual Studio version
9. Save &amp; Queue build

[CSharp7_1_Test.zip](

**Expected Behavior**:

Build completes and recognises `async Task Main` as valid C# 7.1

**Actual Behavior**:

Build fails with error:
``
---
[edit] I also tested by using the "Hosted VS2017" build agent queue - this failed with the same error.

Thanks to @jcouv for taking a look at this.</Description>
  </Issue>
  <Issue>
    <IssueID>21782</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Warn when adding an optional parameter to a public method</Title>
    <CreatedDate>29/08/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>21782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>21782</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public static bool TryGet&lt;T&gt;(string key, out T value);


I added a parameter as follows:

csharp
public static bool TryGet&lt;T&gt;(string key, out T value, DBSettingValueScope scope = DBSettingValueScope.Any);


Previously, the scope was *always* `Any`. Now, the consumer of this API can optionally specify a different scope.

**Expected Behavior**:

This change doesn't appear to alter the public contract, and I'm not getting warned about any problems, so there shouldn't be any side effects. At compile time, there are no apparent problems.

**Actual Behavior**:

During run time, I'm getting a missing method exception in assembly `B`:


System.MissingMethodException: 'Method not found: 'Boolean AssemblyA.DBSettings.TryGet(System.String, !!0 ByRef)'.'
`</Code>
    <Description>**Version Used**: 
15.3.2

**Steps to Reproduce**:

1. In an assembly `A`, create a public method `MyMethod()` without an optional parameter
2. Reference this assembly from `B`
3. Add an optional parameter (with a default value) to `MyMethod()`

In my particular case, a library had a class `DBSettings` with this member:

``

The runtime should either be smart enough to find the new method with the optional parameter, *or* the IDE should warn me that the public contract has in fact been altered.</Description>
  </Issue>
  <Issue>
    <IssueID>21776</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IBlockStatement should not filter out all OperationKind.None</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>27/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, when we create `IBlockStatement`s, we filter out all `OperationKind.None` operations. We should not do this, and figure out why this is there.</Description>
  </Issue>
  <Issue>
    <IssueID>21773</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21773</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using Deconstruct indicates the whole method body for the source to the PDB</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>30/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21773</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>21773</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21773</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.0.0-rc-61104-10  5bfc051d4e (Used in dotnet/corefx)

![image](


**Steps to Reproduce**:

1.  Write a method that returns a tuple
2.  Invoke the method with deconstruction syntax
3.  Put a breakpoint on the line previous to the invocation.
4.  Step over (onto the line with the deconstructor call)

**Expected Behavior**: The current statement is highlighted.

**Actual Behavior**:  The entire method is highlighted.

![image](
![image](
![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>21771</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>21771</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InvalidOperationException from Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.GetDocument</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21771</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value, String message)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.GetDocument()
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.FilterModelInBackgroundWorker(Model model, Int32 id, SnapshotPoint caretPosition, CompletionFilterReason filterReason, ImmutableDictionary`2 filterState)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.FilterModelInBackground(Model model, Int32 id, SnapshotPoint caretPosition, CompletionFilterReason filterReason, ImmutableDictionary`2 filterState)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.Session.&lt;&gt;c__DisplayClass13_0.&lt;FilterModel&gt;b__0(Model model)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1.&lt;&gt;c__DisplayClass16_0.&lt;ChainTaskAndNotifyControllerWhenFinished&gt;b__0(TModel m, CancellationToken c)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1.&lt;&gt;c__DisplayClass17_0.&lt;ChainTaskAndNotifyControllerWhenFinished&gt;b__0(Task`1 t)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass16_0`2.&lt;SafeContinueWithFromAsync&gt;b__0(Task antecedent)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke() in f:\dd\ndp\clr\src\BCL\system\threading\Tasks\TaskContinuation.cs:line 121
   at System.Threading.Tasks.Task.Execute() in f:\dd\ndp\clr\src\BCL\system\threading\Tasks\Task.cs:line 2498
`</Code>
    <Description>Stack trace:

``

Crash dump: %internal_share%\public\tomat\Bugs\21771

VS version: 15.4.0 P1 (26823.1.d15rel)</Description>
  </Issue>
  <Issue>
    <IssueID>21770</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make-method-async code fix breaks ASP.NET MVC action routing after 'Async' suffix is appended to method name</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>28/08/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
        public async Task&lt;IActionResult&gt; IndexAsync()
        {
            await Task.Delay(300);
            return View();
        }
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. create a ASP.NET Core project
2. select MVC template, create the project, and F5 to make sure the home page is shown
3. open HomeController.cs
4. changing return type of `Index()` to `Task&lt;IActionResult&gt;`
5. Add `await Task.Delay(1);` inside `Index()`
6. Invoke code fix to make the method async

Now the method looks like 

``

7. F5
**Actual Behavior**:
HTTP 404

if rename the method back to `Index()` F5 works again.</Description>
  </Issue>
  <Issue>
    <IssueID>21769</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should IInstanceReferenceExpression use base type or current type for initializers</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>21769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, when we construct an initializer for a property defined on a base type, it will use the base type as the type of the instance reference, rather than the current type. An example:
``

Even though we're creating a new C2, the type of the instance being referenced in the initializer is C1. The question here is whether that instance, from an API user's perspective, should be C1 or C2. See  Tagging @dotnet/analyzer-ioperation @AlekseyTs.</Description>
  </Issue>
  <Issue>
    <IssueID>21768</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>21768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash (exit code -1) when using local functions</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>04/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>21768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following code crashes VBCSCompiler.exe as well as csc.exe when building using Visual Studio 2017 15.3.2 on Windows 7: 

        void Function(int someField) //necessary to have a parameter
        {
            using (IInterface db = null) //necessary to have this using statement
            {
                void LocalFunction() //necessary
                {
                    var results =
                        db.Query&lt;Class1&gt;() //need to call this method. using a constant array does not reproduce the bug.
                        .Where(cje =&gt; cje.SomeField &gt;= someField) //need expression tree here referencing parameter
                        ;
                }
            }
        }
        interface IInterface : IDisposable
        {
            IQueryable&lt;T&gt; Query&lt;T&gt;();
        }
        class Class1
        {
            public int SomeField { get; set; }
        }

Quite a few components are needed to reproduce this bug.</Description>
  </Issue>
  <Issue>
    <IssueID>21765</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Wiki] Null-conditional operator</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
var ev = Event;
if (ev != null) ev.Invoke();
`</Code>
    <Description>I was reading the "New language features in C# 6" page, specifically the null-coalescing operator.

(Aside: I wanted to check if method arguments with side effects are called or not in `x?.Do(SideEffect())`, which is not described there but would be a nice addition. Looks like the answer is no.)

The following paragraph made me twitch a little bit:
&gt; This is an easy and **thread-safe** way to check for null before you trigger an event. The reason it’s thread-safe is that the feature evaluates the left-hand side only once, and **keeps it in a temporary variable**.

Is there any magic trick that you perform to prevent read introduction?
If you compile `Event?.Invoke()` to:
``
Then it's not thread-safe in the strictest sense.
Because the JIT (or even the compiler) is free to remove the local variable and introduce a second read. It's the opposite of read elimination and it's allowed unless we speak about volatiles.

(For the curious: `Volatile.Read()` is how you can make the code above thread-safe.)

I know that currently MS JIT doesn't do read introduction on heap variables, precisely because they are aware that it would be a breaking change for such code.
It doesn't mean they won't do it in the future, that Mono doesn't do it, etc.

You have no guarantee because the specs say such code is NOT thread-safe, so maybe you should remove that remark from the wiki.
There is already a lot of confusion on this topic, see 

Also: this kind of discussions create a false sentiment that the code is thread safe. Yes, calling the delegate might be thread safe if done correctly, yet the delegate itself must be prepared to be called _after_ it was unsubscribed from. Most developpers are completely unaware of that fact. Multithreaded code without proper synchronization primitives is very hard.</Description>
  </Issue>
  <Issue>
    <IssueID>21760</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>SolutionCrawler.LogWorkItemEnqueue boxing huge amounts of enumerators</Title>
    <CreatedDate>28/08/2017</CreatedDate>
    <ClosedDate>28/08/2017</ClosedDate>
    <IssueLabels />
    <Description>In this trace, there's 55 MB of boxed enumerator allocations in this: 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>21756</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>21756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Identifier in foreach expression isn't renamed if foreach variable has destructuring</Title>
    <CreatedDate>26/08/2017</CreatedDate>
    <ClosedDate>13/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        var test = new Dictionary&lt;string, int&gt;();
        var (key2, value2) = test.First();
        foreach (var (key, value) in test)
        {

        }
    }
}

static class Extensions
{
    public static void Deconstruct&lt;TKey, TValue&gt;(this KeyValuePair&lt;TKey, TValue&gt; source, out TKey key, out TValue value)
    {
        key = source.Key;
        value = source.Value;
    }
}
`</Code>
    <Description>**Version Used**: VS15.3.2

**Steps to Reproduce**:
``
1. Select `test` in `var test = new Dictionary&lt;string, int&gt;();`
2. Press F2 to initialize rename
3. Type new name and press enter to commit

**Expected Behavior**:
All occurrences of `test` are renamed

**Actual Behavior**:
![2017-08-26_22-20-37](
The `IdentifierName` in the foreach `Expression` isn't renamed, additionally, the tooltip of `test` shows the type info for the element type instead of the dictionary.</Description>
  </Issue>
  <Issue>
    <IssueID>21753</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Namespace resolution is buggy.</Title>
    <CreatedDate>26/08/2017</CreatedDate>
    <ClosedDate>08/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>21753</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>21753</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using VS 2017 and creating some class libraries.

One library has a namespace Me.System.Services - so far so good, nothing major here.

I then added a Form to this project and the Forms designer creates code when I add buttons etc.

The .Designer.cs code fails to compile though.

It says:

`            this.button1 = new System.Windows.Forms.Button();
`

Is errant and underlines 'Windows' citing error: CS0234

`The type or namespace name 'Windows' does not exist in the namespace 'Me.System' (are you missing an assembly reference?)`

I tried to fix this by adding:

`using System = global::System;
`

hoping this would force the compiler to see 'System' as the root term in the namespace, but this has no effect and the compiler error remains. Also no code in the file refers in any way to Me.System, other than the source file's (form's) namespace:

`namespace Me.System.Services
`

Technically there is no ambiguity here yet the compiler claims there is. I'd understand if my namespace began simply 'System' but it begins 'Me.System' to AVOID ambiguity.

As it stands this is not good and pretty much rules out users from using certain terms in their namespaces in ways that are far from easy to understand. Of course - ordinarily - I'd prefix the namespaces in the statements with global:: but I cannot do that here because the code is auto-generated by the designer every time I tweak the UI.

Do others agree this is a bug? Should not: 

`using System = global::System`

be sufficient for the compiler to proceed?

(Bear in mind that this class library has already been published and consumed without issue but now I am unable to add the forms stuff).

Actually I lie, the form has been made generic like:

`    partial class ServiceControllerForm&lt;T&gt; where T : ServiceApplication, new()
`

and ServiceApplication sits in namespace Me.System.Services.
</Description>
  </Issue>
  <Issue>
    <IssueID>21752</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IEnumerable&lt;T&gt; covariance does not work with ValueTuple (object)</Title>
    <CreatedDate>26/08/2017</CreatedDate>
    <ClosedDate>26/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>21752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>21752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
.net 4.6.2, visual studio 15.3.2, C# 7.1

**Issue**:
Covariance is supported for IEnumerable&lt;T&gt; and IEnumerable&lt;U&gt; where T : U. However it doesn't work for the new ValueTuple types... not even with object.  See demo code below.

**Steps to Reproduce**:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>21748</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add two new UnaryOperatorKinds for increment and decrement operators</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>19/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>21748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We decided to remove these kinds in an earlier meeting but Aleksey wants to bring it up in the next design meeting. See </Description>
  </Issue>
  <Issue>
    <IssueID>21747</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>21747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpIntroduceVariableService.IntroduceFieldAsync doesn't drop leading and trailing trivia</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>09/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>...the way IntroduceLocalAsync does (i.e. `expression.WithoutTrailingTrivia().WithoutLeadingTrivia()`).  As a result, the trivia appear in both the initializer of the newly-created field and at its use-site.</Description>
  </Issue>
  <Issue>
    <IssueID>21741</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>21741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.InvalidOperationException : "The calling thread cannot access this object because a different thread owns it." is thrown by Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestExtensionMethods test</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>21741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>21741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestExtensionMethods
      System.InvalidOperationException : The calling thread cannot access this object because a different thread owns it.
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
           at Microsoft.CodeAnalysis.Workspace.Dispose()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs(944,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestContext.Dispose()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs(608,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.&lt;TestGenerateFromSourceSymbolAsync&gt;d__16.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.CSharp.cs(1154,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.&lt;TestExtensionMethods&gt;d__34.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>From 
``

CC @dotnet/roslyn-ide, @jasonmalinowski  </Description>
  </Issue>
  <Issue>
    <IssueID>21740</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Handle checked conversions in VB</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>03/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21740</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>21738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Handle additional cases in determining VB compound assignments for IOperations</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>09/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>21737</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should we should represent C# + operation with string operands as `BinaryOperatorKind.Concatenate`</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>21/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>21737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We return Concatenate kind only for the VB Concatenate operator. Should we should represent C# + operation with string operands as `BinaryOperatorKind.Concatenate`?</Description>
  </Issue>
  <Issue>
    <IssueID>21735</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>After installing .NET Compiler Platform SDK in VS 2017(15.3.2), "Roslyn Syntax Visualizer" is not visible in the "Other Windows" list.</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-SDK and Samples</Name>
        <IssueID>21735</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
* Visual Studio ( 15.3.2 )
![image](
* .NET Compiler Platform SDK ( 2.0.0.6140902 )
![image](

**Steps to Reproduce**:

1.  .NET Compiler Platform SDK extension install in Visual Studio 2017 Marketplace
2.  Create C# Project using Project Wizard ( C# Console Application .NET Framework )
3.  To launch Syntax Visualizer : View -&gt; Other Windows -&gt; Roslyn Syntax Visualizer
4. Check Other Windows list.

**Expected Behavior**:
Exist "Roslyn Syntax Visualizer" in "Other Windows" list 
**Actual Behavior**:
Not exist
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>21730</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.IO.IOException when VS 15.3.2 is installed</Title>
    <CreatedDate>25/08/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>21730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>21730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
응용 프로그램: devenv.exe
Framework 버전: v4.0.30319
설명: The application requested process termination through System.Environment.FailFast(string message).
메시지: System.IO.IOException: Not enough storage is available to process this command.
   위치:    위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxToken.SyntaxTokenWithValueAndTrivia`1.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.LiteralExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__15_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithThreeChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ArgumentListSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.InvocationExpressionSyntax.&lt;&gt;c.&lt;.cctor&gt;b__18_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ReturnStatementSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ReturnStatementSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.BlockSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AccessorDeclarationSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AccessorDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__30_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AccessorListSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.AccessorListSyntax.&lt;&gt;c.&lt;.cctor&gt;b__21_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.PropertyDeclarationSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.PropertyDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__39_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithManyChildrenBase..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.&lt;&gt;c.&lt;.cctor&gt;b__0_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.ClassDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__45_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.NamespaceDeclarationSyntax.&lt;&gt;c.&lt;.cctor&gt;b__36_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax..ctor(ObjectReader reader)
   위치: Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CompilationUnitSyntax.&lt;&gt;c.&lt;.cctor&gt;b__27_0(ObjectReader r)
   위치: Roslyn.Utilities.ObjectReader.ReadObject()
   위치: Roslyn.Utilities.ObjectReader.ReadValueWorker()
   위치: Roslyn.Utilities.ObjectReader.ReadValue()
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom(Stream stream, CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.DeserializeNodeFrom(Stream stream, CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.RecoverRoot(Stream stream, CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService.RecoverableSyntaxRoot`1.Recover(CancellationToken cancellationToken)
   위치: Roslyn.Utilities.AsyncLazy`1.GetValue(CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.Host.RecoverableWeakValueSource`1.GetValue(CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.RecoverableSyntaxTree.GetRoot(CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootCore(CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CSharpSyntaxTreeFactoryService.PositionalSyntaxReference.GetSyntax(CancellationToken cancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.MergedTypeDeclaration.GetAttributeDeclarations()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetAttributesBag()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetAttributes()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.get_IsExplicitDefinitionOfNoPiaLocalType()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(NamespaceSymbol ns)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(NamespaceSymbol ns)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(NamespaceSymbol ns)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(NamespaceSymbol ns)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(NamespaceSymbol ns)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.get_ContainsExplicitDefinitionOfNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.MightContainNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.AssemblyDataForCompilation.get_ContainsNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CommonReferenceManager`2.ReuseAssemblySymbolsWithNoPiaLocalTypes(BoundInputAssembly[] boundInputs, TAssemblySymbol[] candidateInputAssemblySymbols, ImmutableArray`1 assemblies, Int32 corLibraryIndex)
   위치: Microsoft.CodeAnalysis.CommonReferenceManager`2.Bind(TCompilation compilation, ImmutableArray`1 explicitAssemblies, ImmutableArray`1 explicitModules, ImmutableArray`1 explicitReferences, ImmutableArray`1 explicitReferenceMap, MetadataReferenceResolver resolverOpt, MetadataImportOptions importOptions, Boolean supersedeLowerVersions, Dictionary`2 assemblyReferencesBySimpleName, ImmutableArray`1&amp; allAssemblies, ImmutableArray`1&amp; implicitlyResolvedReferences, ImmutableArray`1&amp; implicitlyResolvedReferenceMap, DiagnosticBag resolutionDiagnostics, Boolean&amp; hasCircularReference, Int32&amp; corLibraryIndex)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateSourceAssemblyForCompilation(CSharpCompilation compilation)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetAssemblyOrModuleSymbol(MetadataReference reference)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetAssemblyOrModuleSymbol(MetadataReference reference)
   위치: Microsoft.CodeAnalysis.SolutionState.CompilationTracker.UpdateCompilationWithNewReferencesAndRecordAssemblySymbols(Compilation compilation, List`1 newReferences, Dictionary`2 metadataReferenceToProjectId)
   위치: Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;FinalizeCompilationAsync&gt;d__34.MoveNext()
스택:
   위치: System.Environment.FailFast(System.String, System.Exception)
   위치: Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   위치: Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   위치: Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   위치: Microsoft.CodeAnalysis.SolutionState+CompilationTracker+&lt;FinalizeCompilationAsync&gt;d__34.MoveNext()
   위치: Roslyn.Utilities.AsyncLazy`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetValue(System.Threading.CancellationToken)
   위치: Microsoft.CodeAnalysis.Host.RecoverableWeakValueSource`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].GetValue(System.Threading.CancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory+CSharpSyntaxTreeFactoryService+RecoverableSyntaxTree.GetRoot(System.Threading.CancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.GetRootCore(System.Threading.CancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory+CSharpSyntaxTreeFactoryService+PositionalSyntaxReference.GetSyntax(System.Threading.CancellationToken)
   위치: Microsoft.CodeAnalysis.CSharp.MergedTypeDeclaration.GetAttributeDeclarations()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetAttributesBag()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetAttributes()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.get_IsExplicitDefinitionOfNoPiaLocalType()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.NamespaceContainsExplicitDefinitionOfNoPiaLocalTypes(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol)
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.get_ContainsExplicitDefinitionOfNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.MightContainNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation+ReferenceManager+AssemblyDataForCompilation.get_ContainsNoPiaLocalTypes()
   위치: Microsoft.CodeAnalysis.CommonReferenceManager`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ReuseAssemblySymbolsWithNoPiaLocalTypes(BoundInputAssembly&lt;System.__Canon,System.__Canon&gt;[], System.__Canon[], System.Collections.Immutable.ImmutableArray`1&lt;AssemblyData&lt;System.__Canon,System.__Canon&gt;&gt;, Int32)
   위치: Microsoft.CodeAnalysis.CommonReferenceManager`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Bind(System.__Canon, System.Collections.Immutable.ImmutableArray`1&lt;AssemblyData&lt;System.__Canon,System.__Canon&gt;&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.PEModule&gt;, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt;, System.Collections.Immutable.ImmutableArray`1&lt;ResolvedReference&lt;System.__Canon,System.__Canon&gt;&gt;, Microsoft.CodeAnalysis.MetadataReferenceResolver, Microsoft.CodeAnalysis.MetadataImportOptions, Boolean, System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;ReferencedAssemblyIdentity&lt;System.__Canon,System.__Canon&gt;&gt;&gt;, System.Collections.Immutable.ImmutableArray`1&lt;AssemblyData&lt;System.__Canon,System.__Canon&gt;&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt; ByRef, System.Collections.Immutable.ImmutableArray`1&lt;ResolvedReference&lt;System.__Canon,System.__Canon&gt;&gt; ByRef, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef, Int32 ByRef)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation+ReferenceManager.CreateAndSetSourceAssemblyFullBind(Microsoft.CodeAnalysis.CSharp.CSharpCompilation)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation+ReferenceManager.CreateSourceAssemblyForCompilation(Microsoft.CodeAnalysis.CSharp.CSharpCompilation)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)
   위치: Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)
   위치: Microsoft.CodeAnalysis.SolutionState+CompilationTracker.UpdateCompilationWithNewReferencesAndRecordAssemblySymbols(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.List`1&lt;Microsoft.CodeAnalysis.MetadataReference&gt;, System.Collections.Generic.Dictionary`2&lt;Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.ProjectId&gt;)
   위치: Microsoft.CodeAnalysis.SolutionState+CompilationTracker+&lt;FinalizeCompilationAsync&gt;d__34.MoveNext()
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   위치: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   위치: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   위치: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)
   위치: Microsoft.CodeAnalysis.SolutionState+CompilationTracker+&lt;GetMetadataReferenceAsync&gt;d__38.MoveNext()
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   위치: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   위치: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task.FinishStageTwo()
   위치: System.Threading.Tasks.Task.Finish(Boolean)
   위치: System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   위치: System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)
   위치: System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)
   위치: System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)
   위치: System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.SolutionState+CompilationTracker+CompilationInfo, Microsoft.CodeAnalysis.Workspaces, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(CompilationInfo)
   위치: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Microsoft.CodeAnalysis.SolutionState+CompilationTracker+CompilationInfo, Microsoft.CodeAnalysis.Workspaces, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(CompilationInfo)
   위치: Microsoft.CodeAnalysis.SolutionState+CompilationTracker+&lt;GetOrBuildCompilationInfoAsync&gt;d__26.MoveNext()
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   위치: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   위치: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[Roslyn.Utilities.SemaphoreSlimExtensions+SemaphoreDisposer, Microsoft.CodeAnalysis.Workspaces, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].TrySetResult(SemaphoreDisposer)
   위치: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[Roslyn.Utilities.SemaphoreSlimExtensions+SemaphoreDisposer, Microsoft.CodeAnalysis.Workspaces, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].SetResult(SemaphoreDisposer)
   위치: Roslyn.Utilities.SemaphoreSlimExtensions+&lt;DisposableWaitAsync&gt;d__1.MoveNext()
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   위치: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   위치: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   위치: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(Boolean)
   위치: System.Threading.SemaphoreSlim+&lt;WaitUntilCountOrTimeoutAsync&gt;d__31.MoveNext()
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)
   위치: System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   위치: System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()
   위치: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)
   위치: System.Threading.Tasks.TaskFactory+CompleteOnInvokePromise.Invoke(System.Threading.Tasks.Task)
   위치: System.Threading.Tasks.Task.FinishContinuations()
   위치: System.Threading.Tasks.Task.FinishStageThree()
   위치: System.Threading.Tasks.Task`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(Boolean)
   위치: System.Threading.SemaphoreSlim+TaskNode.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   위치: System.Threading.ThreadPoolWorkQueue.Dispatch()
   위치: System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
`</Code>
    <Description>15.2 =&gt; 15.3.2
We have applied the following considerations

Disabling Full Solution Diagnostics
Disabling CodeLens
Disabling Solution Crawler
Adjusting File Caching Threshold(RecoverableTreeLengthThreshold = 1)
Disabling Reference Promotion
Specifying a main method explicitly

Checked Option-Text Editor-C#-Advanced-Perform editor feature analysis in external process

(press F12) navigation to type in large csproj(more than 10000 cs files), vs crash
Previously(15.3) it crashed every 20 minutes, but now it is possible for about an hour.... OTL

``</Description>
  </Issue>
  <Issue>
    <IssueID>21729</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Internal error in the C# compiler" in Intermediate Window on netcoreapp</Title>
    <CreatedDate>24/08/2017</CreatedDate>
    <ClosedDate>17/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>21729</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 
Version 15.3.0
VisualStudio.15.Release/15.3.0+26730.3
Microsoft .NET Framework
Version 4.7.02046
.NET Core Tools (dotnet --version)
2.0.0

**Steps to Reproduce**:
1. Download IntermediateWindowRepro.zip
2. Put breakpoint on Program.cs: Line 14
3. Press F5
4. In Intermediate Window, try to evaluate: `var version2 = VersionRange.Parse("[15.1.1012]");`

**Expected Behavior**:
* It evaluates it, creates a variable, version2 with the same information as `version` in Line 10. 
* It works when you use a full .NET Framework console application.

**Actual Behavior**:
Internal error in the C# compiler</Description>
  </Issue>
  <Issue>
    <IssueID>21727</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect diagnostic: error CS0648: '' is a type not supported by the language (tuple decoding issue)</Title>
    <CreatedDate>24/08/2017</CreatedDate>
    <ClosedDate>02/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>21727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>21727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:

- Visual Studio 15.3.2
- Roslyn 2.3.2.62019 (b7354608)

**Steps to Reproduce**:

- Create a new solution with two *Class Library (.NET Framerwork)* projects ProjectA and ProjectB
- Make sure the target framework of both projects is set to a .NET version prior to 4.7, the default v4.5.2 will do
- Add the `System.ValueTuple` NuGet package to ProjectA
- Reference ProjectA from ProjectB
- Add the following class to ProjectA:

``

- Compile

**Expected Behavior**:

The compilation of ProjectB should fail with an error message indicating that a reference to `System.ValueTuple` is required:

&gt; error CS0012: The type 'ValueTuple&lt;,&gt;' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ValueTuple, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.

Alternatively, the compilation could succeed, as we're *not* using the `GetEnumerator` function in ProjectB.

**Actual Behavior**:

The compilation fails on the `new ClassA { { 42, 10 } };` statement with an unhelpful/incomplete error message:

&gt; error CS0648: '' is a type not supported by the language

Not only [this error]( looks like a bad fit for this situation, its *type* argument is missing, which makes it quite puzzling.
</Description>
  </Issue>
  <Issue>
    <IssueID>21725</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>21725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move unix builds back to toolset package</Title>
    <CreatedDate>24/08/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>21725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21725</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The change to use the 2.0 SDK will disable the toolset compiler when running on Unix. This is due to a chicken and egg problem:

- Microsoft.NetCore.Compilers: contains a csc / vbc pair which target netcoreapp 1.1.
- CLI repo: uses Microsoft.NetCore.Compilers but rewrites deps file make csc / vbc be a netcoreapp 2.0.
- Roslyn repo: can't produce netcoreapp 2.0 binaries until we move to 2.0 SDK.

Our Unix builds work today because we are using dotnet 1.1. This matches the netcoreapp version in our toolset package. But moving to 2.0 SDK moves to dotnet 2.0 and hence csc / vbc will no longer run (1.1 apps don't run on 2.0). 

To make this all work out we will stage the changes as follows:

1. Disable toolset compiler on Unix builds 
1. Merge 2.0 SDK change back into master
1. Make the next Microsoft.NetCore.Compilers package our new toolset for Unix and re-enable toolset builds. </Description>
  </Issue>
  <Issue>
    <IssueID>21723</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Address comments about how IsLifted is calculated for operators</Title>
    <CreatedDate>24/08/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21723</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See 

Please also add relevant unit tests.</Description>
  </Issue>
  <Issue>
    <IssueID>21719</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>FailFast due to NullReferenceException when GetCompilationAsync returns null from an F# project</Title>
    <CreatedDate>24/08/2017</CreatedDate>
    <ClosedDate>25/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Description**: 

See 

``GetCompilationAsync`` returns ``null`` for F# projects.  All calls to ``GetCompilationAsync`` need to be checked throughout the Roslyn codebase to make sure we are guarding against the possiblity of a ``null`` return.


**Version Used**: master

**Steps to Reproduce**:

1. Get  
2. ``build vs debug``
3.  open VisualFSharp.sln
3. compile &amp; launch
3. open VisualFSharp.sln in the launched VS using the new bits
3. Turn off ``Options --&gt; Text Editor --&gt; F# --&gt; Performance --&gt; In-memory project references``
3. exit
3. compile &amp; launch
3. open ``vsintegration\src\FSharp.ProjectSystem.Base\Project\ProjectOptions.cs``
3. Go to a symbol with the caret

**Expected Behavior**:

all ok

**Actual Behavior**:

FailFast exception due to a NulLReferenceException at [this line](




</Description>
  </Issue>
  <Issue>
    <IssueID>21485</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Error CS0227 doesn't show up for Local Functions</Title>
    <CreatedDate>14/08/2017</CreatedDate>
    <ClosedDate>22/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>21485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>21485</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
void A()
{
    var bytesA = A1();
    var bytesB = B();

    unsafe byte[] A1()         //      &lt;-- no CS0227
    {
        var bytes = new byte[sizeof(int)];
        fixed (byte* ptr = &amp;bytes[0])
        {
            *(int*)ptr = sizeof(int);
        }
        return bytes;
    }
}

unsafe byte[] B()            //   &lt;--- CS0227
{
    var bytes = new byte[sizeof(long)];
    fixed (byte* ptr = &amp;bytes[0])
    {
        *(long*)ptr = sizeof(long);
    }
    return bytes;
}
`</Code>
    <Description>**Version Used**: 
v2.2.0.61624 (VS 2017.2)

**Steps to Reproduce**:

``

**Expected Behavior**:
When compiler switch is not provided, CS0227 should show up for local functions saying:

&gt; Error	CS0227	Unsafe code may only appear if compiling with /unsafe

matching the behavior of regular methods.

**Actual Behavior**:
The project compiles without `/unsafe`, without raising any error or warning, if consumer wraps all the unsafe code in a local function.
</Description>
  </Issue>
  <Issue>
    <IssueID>21484</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>How to reliably crash CSC with Linq</Title>
    <CreatedDate>13/08/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>21484</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017 Update 3 Preview 7

**Steps to Reproduce**:
1.  Create a new C# outlook VSTO addin 

2. Change the two USINGS at the top FROM:
using Outlook = Microsoft.Office.Interop.Outlook;
using Office = Microsoft.Office.Core;
TO:
using Microsoft.Office.Interop.Outlook;
using Microsoft.Office.Core;

3. Add this code:
        private void ThisAddIn_Startup(object sender, System.EventArgs e)
        {
            var MailItems = (from object x in Selection where x is MailItem select (MailItem)x).ToList();
        }

4.  Notice that "Selection" is a type (not a property) so this should generate a warning/error because it isn't valid code.  Instead, it causes the compiler to exit with code -2146232797.

**Expected Behavior**:
I should get a warning/error saying something is wrong with that query.

**Actual Behavior**:
I get a cryptic CSC error code.</Description>
  </Issue>
  <Issue>
    <IssueID>21480</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intermittent test failure: BlockCommentEditingTests.EofCase0</Title>
    <CreatedDate>13/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index) at System.AggregateException..ctor(String message, IList`1 innerExceptions)
 at System.AggregateException..ctor(String message, IEnumerable`1 innerExceptions) at System.AggregateException..ctor(IEnumerable`1 innerExceptions)
 at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) 
at Microsoft.CodeAnalysis.Workspace.Dispose() 
at Microsoft.CodeAnalysis.Editor.UnitTests.BlockCommentEditing.AbstractBlockCommentEditingTests.Verify(String initialMarkup, String expectedMarkup) 
at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.BlockCommentEditing.BlockCommentEditingTests.EofCase0() in q:\roslyn\src\EditorFeatures\CSharpTest\BlockCommentEditing\BlockCommentEditingTests.cs:line 81


Likely the same issue in Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.TestAddImport_EmptyDocument_SystemAtTop:

https://ci.dot.net/job/dotnet_roslyn/job/dev15.5.x/job/windows_release_unit64_prtest/21/testReport/junit/Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets/CSharpSnippetExpansionClientTests/TestAddImport_EmptyDocument_SystemAtTop/


MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index)
 at System.AggregateException..ctor(String message, IList`1 innerExceptions)
 at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
 at Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.VB$StateMachine_21_TestSnippetAddImportsAsync.MoveNext() in q:\roslyn\src\VisualStudio\Core\Test\Snippets\CSharpSnippetExpansionClientTests.vb:line 388 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 at Microsoft.VisualStudio.LanguageServices.UnitTests.Snippets.CSharpSnippetExpansionClientTests.VB$StateMachine_2_TestAddImport_EmptyDocument_SystemAtTop.MoveNext() in q:\roslyn\src\VisualStudio\Core\Test\Snippets\CSharpSnippetExpansionClientTests.vb:line 33
 --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 --- End of stack trace from previous location where exception was thrown ---
 at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>

``
</Description>
  </Issue>
  <Issue>
    <IssueID>21471</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>21471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Recent changes not being published to myget feed</Title>
    <CreatedDate>12/08/2017</CreatedDate>
    <ClosedDate>17/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>21471</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 3.0.0-dev-61717-03

**Steps to Reproduce**:

1. 

**Expected Behavior**:
Classes in this package have been updated with the last week, I am expecting a recent build to be available with these changes
**Actual Behavior**:
Nuget packages on the myget nightly feed for many roslyn packages have not been updated in many months.
</Description>
  </Issue>
  <Issue>
    <IssueID>21469</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>XML documentation refactoring for &lt;see&gt;</Title>
    <CreatedDate>12/08/2017</CreatedDate>
    <ClosedDate>16/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21469</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I would like to suggest a quick action that would turn words in XML documentation to `&lt;see cref&gt;` and `&lt;see langword&gt;` respectively, if applicable.

Example:
``

Pressing Ctrl+. on the `Program` word in summary would offer to change Program into `&lt;see cref="Program" /&gt;`. Similarly, pressing Ctrl+. on `new` or `class` would offer to change it to `&lt;see langword="new" /&gt;`.

(related discussion #11489)
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21469</IssueID>
        <PullRequestID>21477</PullRequestID>
        <Title>Adds feature that helps convert keywords and symbols in doc comments to the appropriate tags.</Title>
        <Description>Fixes </Description>
        <CreatedDate>12/08/2017</CreatedDate>
        <ClosedDate>16/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21469</IssueID>
            <PullRequestID>21477</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21469</IssueID>
        <PullRequestID>21479</PullRequestID>
        <Title>Bug fixes and testing for completion in XML documentation comments</Title>
        <Description>Supersedes #17970.

Builds on the *outstanding* original work by @lorcanmooney.

* Implements support for `&lt;see langword="null"/&gt;` (Fixes #11490, Fixes #11489)
* Add tests for expected behavior of `&lt;returns&gt;` and `&lt;value&gt;` (Improves upon the work in #21475)
* Implements proper support for `&lt;typeparamref name="T"/&gt;`, where `T` is defined by an enclosing code element (Fixes #17872)

Notable changes from the original:

* The set of keywords presented in code completion is restricted to a subset of keywords. This keeps the list from being overwhelming.
* The tests for `&lt;returns&gt;` and `&lt;value&gt;` were modified according to the new direction taken by the original bug.
* The handling of &lt;kbd&gt;Space&lt;/kbd&gt; after typing `&lt;see` was restored to the original behavior to avoid muscle memory problems for long-time users.</Description>
        <CreatedDate>13/08/2017</CreatedDate>
        <ClosedDate>01/09/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21469</IssueID>
            <PullRequestID>21479</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21461</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replace methods with property inserts unnecessary line</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>15/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>21461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    namespace ConsoleApp5
    {
        class C
        {
            int GetProperty()
            {
                return 0;
            }

            void SetProperty(int property)
            {
            }
        }
    }
    

2. Place the caret at the beginning of the identifier `GetProperty`

3. Apply the **Replace 'GetProperty' and 'SetProperty' with property** refactoring

**Expected Behavior**:

csharp
namespace ConsoleApp5
{
    class C
    {
        int Property
        {
            get =&gt; 0;
            set
            {
            }
        }
    }
}


### Actual Behavior

⚠️ Make sure to test the behavior when `GetProperty` is *not* the first member of `C`. In this case, a blank line should be ensured before the property.

csharp
namespace ConsoleApp5
{
    class C
    {

        int Property
        {
            get =&gt; 0;
            set
            {
            }
        }
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 7

:link: Originally identified by `ReplaceMethodWithPropertyTests.TestUpdateGetSet` in #21439.

### Steps to Reproduce

1. Add the following to **C.cs**

    ``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21461</IssueID>
        <PullRequestID>21439</PullRequestID>
        <Title>Consider trivia when testing code fixes and refactorings</Title>
        <Description>* Change `ignoreTrivia` to default to false
* Fix tests so the expected test results accurately reflect reality, including trivia

**Reviewers:** The main item to verify is that this pull request only changes expected test outputs. Test inputs should remain the same. One (seemingly unavoidable) exception is indicated with a ⚠️ comment.

:memo: The changes to expected test results reveal a large number of bugs. These will be identified in comments in this PR, and bugs filed so they can be fixed later.</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>11/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21461</IssueID>
            <PullRequestID>21439</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21461</IssueID>
        <PullRequestID>21473</PullRequestID>
        <Title>Improve trivia preservation when converting methods into a property.</Title>
        <Description>Fixes </Description>
        <CreatedDate>12/08/2017</CreatedDate>
        <ClosedDate>13/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21461</IssueID>
            <PullRequestID>21473</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21460</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Replace method with property leaves preprocessor directives in broken state</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>13/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    namespace ConsoleApp5
    {
        class C
        {
    #if true
            int GetProperty()
            {
                return 0;
            }
    #endif
        }
    }
    

2. Place the caret at the beginning of the identifier `GetProperty`
3. Apply the **Replace 'GetProperty' with property** refactoring

### Expected Behavior

#### Option 1

Do not provide the refactoring in this case.

#### Option 2

csharp
namespace ConsoleApp5
{
    class C
    {
#if true
        int Property =&gt; 0;
#endif
    }
}


#### Option 3

⚠️ This option is only acceptable if the refactoring evaluates `#if true` and determines that `true` unconditionally evaluates to true.

csharp
namespace ConsoleApp5
{
    class C
    {
        int Property =&gt; 0;
    }
}


### Actual Behavior

csharp
namespace ConsoleApp5
{
    class C
    {
        int Property =&gt; 0;
#endif
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 7

:link: Originally identified by `ReplaceMethodWithPropertyTests.TestIfDefMethod` in #21439.

### Steps to Reproduce

1. Add the following code to **C.cs**

    ``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21460</IssueID>
        <PullRequestID>21439</PullRequestID>
        <Title>Consider trivia when testing code fixes and refactorings</Title>
        <Description>* Change `ignoreTrivia` to default to false
* Fix tests so the expected test results accurately reflect reality, including trivia

**Reviewers:** The main item to verify is that this pull request only changes expected test outputs. Test inputs should remain the same. One (seemingly unavoidable) exception is indicated with a ⚠️ comment.

:memo: The changes to expected test results reveal a large number of bugs. These will be identified in comments in this PR, and bugs filed so they can be fixed later.</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>11/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21460</IssueID>
            <PullRequestID>21439</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21459</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Review trivia preservation for Move Type to File</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>25/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>21459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    // Only used by inner type.
    using System;

    // Unused by both types.
    using System.Collections;

    class Outer
    {
        class Inner
        {
            DateTime d;
        }
    }
    

2. Place the caret at the beginning of `class Inner`
3. Apply the **Move type to Outer.Inner.cs** refactoring

### Expected Behavior

Unknown, tagging @kuhlenh @CyrusNajmabadi @dotnet/roslyn-ide.

Also tagging @vweijsters, @pdelvo for thoughts.

### Actual Behavior

#### Outer.cs

csharp
// Only used by inner type.

// Unused by both types.
using System.Collections;

partial class Outer
{
}


#### Outer.Inner.cs

csharp
// Only used by inner type.
using System;

// Unused by both types.

partial class Outer
{
    class Inner
    {
        DateTime d;
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 7

:link: Originally identified by `MoveTypeTests.MoveTypeUsings1` in #21439.

### Steps to Reproduce

1. Add the following code to **Outer.cs**

    ``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21459</IssueID>
        <PullRequestID>21439</PullRequestID>
        <Title>Consider trivia when testing code fixes and refactorings</Title>
        <Description>* Change `ignoreTrivia` to default to false
* Fix tests so the expected test results accurately reflect reality, including trivia

**Reviewers:** The main item to verify is that this pull request only changes expected test outputs. Test inputs should remain the same. One (seemingly unavoidable) exception is indicated with a ⚠️ comment.

:memo: The changes to expected test results reveal a large number of bugs. These will be identified in comments in this PR, and bugs filed so they can be fixed later.</Description>
        <CreatedDate>11/08/2017</CreatedDate>
        <ClosedDate>11/08/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21459</IssueID>
            <PullRequestID>21439</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21457</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CommonConversion in VB always set to default value</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>30/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>21457</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It seems `IConversionExpression.Conversion` in VB always returns default value.

Foe example, with code below, there should be a numeric conversion.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>21456</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move type to file omits line before types</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>16/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>21456</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    // Banner Text
    using System;

    class Class1 { }
    class Class2 { }
    

2. Place the caret at the beginning of the line containing `class Class1`
3. Apply the **Move type to Class1.cs** refactoring

### Expected Behavior

#### Class1.cs

csharp
// Banner Text

class Class1 { }


#### Class2.cs

csharp
// Banner Text
using System;

class Class2 { }


### Actual Behavior

#### Class1.cs

csharp
// Banner Text
class Class1 { }


#### Class2.cs

csharp
// Banner Text
using System;
class Class2 { }
`</Code>
    <Description>**Version Used**: 15.3 Preview 7

:link: Originally revealed by `MoveTypeTests.MoveTypeWithWithUsingsAndNoContainerNamespace` in #21439.

### Steps to Reproduce

1. Add the following code to **Class2.cs**:

    ``</Description>
  </Issue>
  <Issue>
    <IssueID>21455</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline temporary leaves preprocessor directives inconsistent</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>08/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21455</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    namespace ConsoleApp5
    {
        class Program
        {
            static void Main(string[] args)
            {
                int y,
    #if true
                    x = 1,
    #endif
                    z;

                int a = x;
            }
        }
    }
    

2. Place the caret before `x` (in `x = 1`)
3. Apply the **Inline temporary variable** refactoring

### Expected Behavior

#### Option 1:

Do not show the **Inline temporary variable** refactoring for this case.

#### Option 2:

csharp
namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            int y,
#if true
#endif
                z;

            int a = 1;
        }
    }
}


#### Option 3:

csharp
namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            int y,
                z;

            int a = 1;
        }
    }
}


### Actual Behavior

csharp
namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            int y,
#endif
                z;

            int a = 1;
        }
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 7

:link: Originally revealed by `InlineTemporaryTests.Preprocessor2` in #21439.

### Steps to Reproduce

1. Use the following code:

    ``
</Description>
  </Issue>
  <Issue>
    <IssueID>21451</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>21451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation.IsImplicit for param arrays and default value arguments</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>23/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21451</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> adds `IOperation.IsImplicit`, but doesn't handle setting it correctly for param arrays and default value arguments.</Description>
  </Issue>
  <Issue>
    <IssueID>21449</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Simplify member access inside nameof() may change program behavior</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>12/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using Foo = SimplifyInsideNameof.Program;

namespace SimplifyInsideNameof
{
  class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine(nameof(SimplifyInsideNameof.Program)); // &lt;-- IDE0002 wants to put Foo here
    }
  }
}
`</Code>
    <Description>**Version Used**: 15.2, 15.3 Preview 7

:link: Originally reported by [Ville Nurmi]( on [Developer Community](

**Steps to Reproduce**:

``

**Expected Behavior**:

IDE0002 is not reported for the use of `nameof(SimplifyInsideNameof.Program)`.

**Actual Behavior**:

IDE0002 is reported. The code fix substitutes `nameof(Foo)`, which changes the program behavior.</Description>
  </Issue>
  <Issue>
    <IssueID>21448</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Re-enable CA2242 (TestForNaNCorrectlyAnalyzer) for Roslyn.sln</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21448</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> changes the BinaryOperatorKind enum public API, which breaks this analyzer at 

This analyzer should be fixed to consume the new API and re-enabled in Roslyn.</Description>
  </Issue>
  <Issue>
    <IssueID>21447</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Bug] Default value for parameter of generic type in local functions</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>11/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21447</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        TValue GetValueOrDefaultLocal&lt;TKey, TValue&gt;(IReadOnlyDictionary&lt;TKey, TValue&gt; dictionary, TKey key, int y = 10, TValue defaultValue = default(TValue))
        //                                                                                                        Highlighted: ^~~~~~~~~~~^           ^~~~~^
            =&gt; dictionary != null &amp;&amp; dictionary.TryGetValue(key, out var value) ? value : defaultValue;
    }

    TValue GetValueOrDefault&lt;TKey, TValue&gt;(IReadOnlyDictionary&lt;TKey, TValue&gt; dictionary, TKey key, TValue defaultValue = default(TValue))
        =&gt; dictionary != null &amp;&amp; dictionary.TryGetValue(key, out var value) ? value : defaultValue;
}
`</Code>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2017 
Version 15.2 (26430.16) Release
VisualStudio.15.Release/15.2.0+26430.16

**Steps to Reproduce**:

1. Create a default ConsoleApp and write code:
``
2. Compile it.
3. Type-level method compiled successfully, but local method compiled with two errors.

**Expected Behavior**: Code compiled sucessfully.
**Actual Behavior**: I have errors in output:
&gt; 1&gt;C:\…\ConsoleApp2\Program.cs(7,151,7,157): error CS0246: The type or namespace name 'TValue' could not be found (are you missing a using directive or an assembly reference?)
&gt; 1&gt;C:\…\ConsoleApp2\Program.cs(7,128,7,140): error CS1750: A value of type 'TValue' cannot be used as a default parameter because there are no standard conversions to type 'TValue'</Description>
  </Issue>
  <Issue>
    <IssueID>21446</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactoring: add parameter when an argument is added to the invocation</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>11/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>21446</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
void Test(int a, int b, int c) {}

string x = null;
Test(a, b, c);

Add an argument to the invocation:
cs
string x = null;
Test(a, b, c, x); 
`</Code>
    <Description>**Steps to reproduce**:
``
**Expected Behavior**:

Also، suggest to add parameter "string x" to the existing method "Test".

**Actual Behavior**:

The only option is to add an overload.

![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>21440</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpCompilation should be able to compile tuple code against Framework 4.6 when 4.7 is installed</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>01/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>21440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>21440</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello,

I'm trying to compile dynamic code that uses c# 7 tuples against .Net Framework 4.6.2. In this dynamic code I reference another dll (lib `Bar` in the example), also compiled against .Net 4.6.2, which references the `ValueTuple` nuget package (versions 4.3.1 and 4.4 were both tested). I run into problems when .Net Framework 4.7 is installed on my machine.

When trying to compile using `CSharpCompilation` (_Microsoft.CodeAnalysis.CSharp_ v 2.3.1), if I don't add `ValueTuple` as a reference, my other lib blocks the compilation:

``

The code runs fine on a machine without Framework 4.7 when adding the reference to `ValueTuple`

Here is a minimal project to showcase the problem:
[RoslynTest.zip](

Is there a way to work around this (other than migrating my whole project to .net 4.7)?</Description>
  </Issue>
  <Issue>
    <IssueID>21437</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>FatalExecutionEngineError when editing local function</Title>
    <CreatedDate>11/08/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>21437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21437</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.Collections.Generic;

namespace Test
{
    public class Foo
    {
        private void Bar()
        {
            IEnumerable&lt;object&gt; Local(out object value)
            {
                yield break;
            }
        }
    }
}


Stack trace:

System.NullReferenceException occurred
  HResult=0x80004003
  Message=Object reference not set to an instance of an object.
  Source=Microsoft.CodeAnalysis.CSharp
  StackTrace:
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.ReportUnassignedOutParameter(ParameterSymbol parameter, SyntaxNode node, Location location)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.LeaveParameter(ParameterSymbol parameter, SyntaxNode syntax, Location location)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.LeaveParameters(ImmutableArray`1 parameters, SyntaxNode syntax, Location location)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitLocalFunctionStatement(BoundLocalFunctionStatement localFunc)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitStatementsWithLocalFunctions(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitWithStackGuard(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.VisitAlways(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Scan(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.PreciseAbstractFlowPass`1.Analyze(Boolean&amp; badRegion)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Analyze(Boolean&amp; badRegion, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.DataFlowPass.Analyze(CSharpCompilation compilation, Symbol member, BoundNode node, DiagnosticBag diagnostics, Boolean requireOutParamsAssigned)
   at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Rewrite(MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics, Boolean hasTrailingExpression, Boolean originalBodyNested)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)
   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean generateDebugInfo, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForMethodBodiesInTree(SyntaxTree tree, Nullable`1 span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents(AnalysisScope analysisScope, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;GenerateCompilationEventsAndPopulateEventsCacheAsync&gt;d__57.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.&lt;ComputeAnalyzerDiagnosticsAsync&gt;d__56.MoveNext()
`</Code>
    <Description>**Version Used**: 15.2 (26430.16)

**Steps to Reproduce**:

Insert following code into Visual Studio editor:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>21436</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+CSharp.RemoveAttributeWithMultipleAttributes Intermittent</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21436</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[The failure was](

## Regression

**Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+CSharp.RemoveAttributeWithMultipleAttributes** (from Roslyn.Services.Editor.UnitTests)

Failing for the past 1 build (Since Failed#26 )
Took 0.84 sec.
### Stacktrace

MESSAGE:
System.AggregateException : 3 exception(s) were thrown during test.\r\nNote: exceptions may have been thrown by another test running concurrently with\r\nthis test. This can happen with any tests that share the same ExportProvider.\r\nExamining individual exception stacks may help reveal the original test and source \r\nof the problem.\r\n\r\nException 0:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\nException 1:\r\nSystem.ArgumentException: The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot.\r\n at Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection..ctor(ITextSnapshot snapshot, IList`1 spans)\r\n at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1 match)\r\n at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer)\r\n at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextBuffer targetBuffer)\r\n at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextSnapshot targetSnapshot)\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\nException 2:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)\r\n at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)\r\n at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\n\r\n---- System.NullReferenceException : Object reference not set to an instance of an object.\r\n---- System.ArgumentException : The specified NormalizedSnapshotSpanCollection extends beyond the end of the TextSnapshot.\r\n---- System.NullReferenceException : Object reference not set to an instance of an object.
+++++++++++++++++++
STACK TRACE:
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestContext.Dispose() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs:line 946 at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.&lt;TestRemoveAttributeAsync&gt;d__14`1.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs:line 519 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.CSharp.&lt;RemoveAttributeWithMultipleAttributes&gt;d__83.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.CSharp.cs:line 924 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) ----- Inner Stack Trace #1 (System.NullReferenceException) ----- at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #2 (System.ArgumentException) ----- at Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection..ctor(ITextSnapshot snapshot, IList`1 spans) at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1 match) at Microsoft.VisualStudio.Text.Projection.Implementation.BufferGraph.MapDownToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer) at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextBuffer targetBuffer) at Microsoft.VisualStudio.Text.Implementation.MappingSpan.GetSpans(ITextSnapshot targetSnapshot) at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #3 (System.NullReferenceException) ----- at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint) at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
</Description>
  </Issue>
  <Issue>
    <IssueID>21435</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Locked file in Windows determinism test</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>10/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21435</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Failure looks like 

CSC : error CS0016: Could not write to output file 'D:\j\workspace\windows_deter---2fa6dcc1\Binaries\Obj\TestUtilities\Debug\Roslyn.Test.Utilities.xml' -- 'The process cannot access the file 'D:\j\workspace\windows_deter---2fa6dcc1\Binaries\Obj\TestUtilities\Debug\Roslyn.Test.Utilities.xml' because it is being used by another process.' [D:\j\workspace\windows_deter---2fa6dcc1\src\Test\Utilities\Portable\TestUtilities.csproj]</Description>
  </Issue>
  <Issue>
    <IssueID>21432</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Feature Request] Concatenated interpolated strings could be optimized into a single string.Format</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>25/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21432</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft (R) Visual C# Compiler version 2.3.2.61928 (ec1cde8b)

**Steps to Reproduce**:
Compile the following program in release:
``
This is relevant, because splitting string literals across lines with `+` is a common way of avoiding really long lines, and it'd be nice to be able to do the same thing with string interpolation without taking the further perf hit.</Description>
  </Issue>
  <Issue>
    <IssueID>21431</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>21431</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException when showing method tooltip in Visual Studio</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21431</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21431</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>21431</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    namespace CrashTest
    {
      class Program
      {
        /// &lt;summary&gt;
        /// Main
        /// &lt;/summary&gt;
        /// &lt;param name="args"&gt;&lt;/param&gt;
        /// &lt;exception cref="KeyNotFoundException(String)"&gt;&lt;/exception&gt;
        static void Main(string[] args)
        {
        }
      }
   }

3. Hover mouse over `Main` method.

**Expected Behavior**:
Info tip appears like this one:
![image](https://user-images.githubusercontent.com/1869103/29192202-3747fcc6-7e29-11e7-856b-1437ec674fea.png)

**Actual Behavior**:
Visual studio crashes.
Here is call stack:

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.DocumentationComments.AbstractDocumentationCommentFormattingService.CrefToSymbolDisplayParts(String crefValue, Int32 position, SemanticModel semanticModel, SymbolDisplayFormat format)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.AddExceptions(ISymbol symbol)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.&lt;AddPartsAsync&gt;d__24.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSymbolDisplayService.AbstractSymbolDescriptionBuilder.&lt;BuildDescriptionSectionsAsync&gt;d__27.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.LanguageServices.AbstractSymbolDisplayService.&lt;ToDescriptionGroupsAsync&gt;d__11.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.AbstractSemanticQuickInfoProvider.&lt;CreateContentAsync&gt;d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.AbstractSemanticQuickInfoProvider.&lt;BuildContentAsync&gt;d__1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.AbstractQuickInfoProvider.&lt;GetQuickInfoItemAsync&gt;d__10.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.AbstractQuickInfoProvider.&lt;GetItemAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller.&lt;ComputeModelInBackgroundAsync&gt;d__9.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller+&lt;ComputeModelInBackgroundAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller+&lt;ComputeModelInBackgroundAsync&gt;d__9.MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller+&lt;ComputeModelInBackgroundAsync&gt;d__9, Microsoft.CodeAnalysis.EditorFeatures, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ComputeModelInBackgroundAsync&gt;d__9 ByRef)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller.ComputeModelInBackgroundAsync(Int32, Microsoft.VisualStudio.Text.ITextSnapshot, System.Collections.Generic.IList`1&lt;Microsoft.CodeAnalysis.Editor.IQuickInfoProvider&gt;, Boolean, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Controller+&lt;&gt;c__DisplayClass7_0.&lt;StartSession&gt;b__0(Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Model, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1+&lt;&gt;c__DisplayClass17_0[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;ChainTaskAndNotifyControllerWhenFinished&gt;b__0(System.Threading.Tasks.Task`1&lt;System.__Canon&gt;)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass15_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWithFromAsync&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2015
Version 14.0.25431.01 Update 3
Microsoft .NET Framework
Version 4.6.01590

**Steps to Reproduce**:

1. Create new console project
2. Put following code into Program.cs:

``</Description>
  </Issue>
  <Issue>
    <IssueID>21429</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot shutdown VS because unloading projects takes so long.</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>11/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>21429</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I've been waiting here for minutes (at least 5+).  Right now VS only shows this:

![image](

Why are we unloading projects on shutdown? It doesn't make any sense.  If i'm closing VS then we should be trying to do as little work as possible.  I'm collecting a trace to help determine what's going on here.</Description>
  </Issue>
  <Issue>
    <IssueID>21428</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Why is CS4014 not shown for all functions that return a task?</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>10/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have the following (inconsistent) behavior when using Visual Studio 2017 with C# 7 features enabled. Suppose the following code:
``
I think this behavior is inconsistent. Both calls should raise the CS4014 if the returned `Task` is ignored silently.</Description>
  </Issue>
  <Issue>
    <IssueID>21423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intermittent test failure: Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.TestSimpleLambda</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>14/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
MESSAGE:
System.IndexOutOfRangeException : Index was outside the bounds of the array.
+++++++++++++++++++
STACK TRACE:
at System.Collections.Generic.List`1.get_Item(Int32 index) 
at System.AggregateException..ctor(String message, IList`1 innerExceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) 
at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
at Microsoft.CodeAnalysis.Editor.UnitTests.Structure.BlockStructureServiceTests.&lt;TestSimpleLambda&gt;d__0.MoveNext() in q:\roslyn\src\EditorFeatures\Test\Structure\BlockStructureServiceTests.cs:line 39
 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>``

</Description>
  </Issue>
  <Issue>
    <IssueID>21422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot publish ASP.NET 5.2.3 project with "Precompile during publishing" option enabled after updating to Microsoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.6</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>29/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>21422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Cannot publish ASP.NET 5.2.3 project with "Precompile during publishing" option enabled after updating to Microsoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.6

It works fine with Microsoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.5

**Version Used**
Visual Studio Enterprise 2015
Microsoft.CodeDom.Providers.DotNetCompilerPlatform 1.0.6
Microsoft.Net.Compilers 2.3.1
Microsoft.AspNet.Mvc 5.2.3

**Error**
3&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_compiler.exe -v / -p C:\Users\phristov\Source\Workspaces\LSSCANS2.0\Cans.Web\Cans.Web\obj\Debug\AspnetCompileMerge\Source -u C:\Users\phristov\Source\Workspaces\LSSCANS2.0\Cans.Web\Cans.Web\obj\Debug\AspnetCompileMerge\TempBuildDir 
3&gt;ASPNETCOMPILER(0,0): Error ASPRUNTIME: Could not find a part of the path 'C:\Users\phristov\Source\Workspaces\LSSCANS2.0\Cans.Web\Cans.Web\obj\Debug\AspnetCompileMerge\Source\bin\roslyn\csc.exe'.

</Description>
  </Issue>
  <Issue>
    <IssueID>21421</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Intermittent failure to write XML doc comments</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>25/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21421</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
CSC : error CS0016: Could not write to output file 'D:\j\workspace\windows_deter---bd1d49d3\Binaries\Obj\CodeStyleTests\Debug\Microsoft.CodeAnalysis.CodeStyle.UnitTests.xml' -- 'The process cannot access the file 'D:\j\workspace\windows_deter---bd1d49d3\Binaries\Obj\CodeStyleTests\Debug\Microsoft.CodeAnalysis.CodeStyle.UnitTests.xml' because it is being used by another process.' [D:\j\workspace\windows_deter---bd1d49d3\src\CodeStyle\Core\Tests\CodeStyleTests.csproj]
`</Code>
    <Description>``



</Description>
  </Issue>
  <Issue>
    <IssueID>21414</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Version of language and framework</Title>
    <CreatedDate>10/08/2017</CreatedDate>
    <ClosedDate>24/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21414</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>21414</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I think it's a simple question and I cannot find the answer from google and documentations...

Which version of C# is supported in Roslyn while calling "emit"? C# 7.0?
Which version of framework is used in compiled assembly / module from Roslyn? dotnet Framework 4.6? dotnet Core 1.0? Or, same as the project which reference Roslyn nuget package?

Thanks a lot.</Description>
  </Issue>
  <Issue>
    <IssueID>21411</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>21411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'case' not offered immediately after a pattern-case-clause</Title>
    <CreatedDate>09/08/2017</CreatedDate>
    <ClosedDate>10/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21411</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

Happens when you want to write down many cases at once.
Breaks muscle memory</Description>
  </Issue>
  <Issue>
    <IssueID>21409</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>21409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function in generator causes local vars to lose initialization (w/ optimizations on)</Title>
    <CreatedDate>09/08/2017</CreatedDate>
    <ClosedDate>24/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>21409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;

namespace Buggles
{
    class Program
    {
        private static IEnumerable&lt;int&gt; Problem(IEnumerable&lt;int&gt; chunks)
        {
            var startOfChunk = 0;
            var pendingChunks = new Queue&lt;int&gt;();

            int GenerateChunk()
            {
                if (pendingChunks == null)
                {
                    Console.WriteLine("impossible in local function");
                    return -1;
                }
                while (pendingChunks.Count &gt; 0)
                {
                    pendingChunks.Dequeue();
                }
                return startOfChunk;
            }

            foreach (var chunk in chunks)
            {
                if (chunk - startOfChunk &lt;= 0)
                {
                    pendingChunks.Enqueue(chunk);
                }
                else
                {
                    yield return GenerateChunk();
                }
                startOfChunk = chunk;
                if (pendingChunks == null)
                {
                    Console.WriteLine("impossible in outer function");
                }
                else
                {
                    pendingChunks.Enqueue(chunk);
                }
            }
        }

        private static void Main()
        {
            var xs = Problem(new[] { 0, 1, 2, 3 });
            foreach (var x in xs)
            {
                Console.WriteLine(x);
            }
        }
    }
}



3. Build and run the program with and without optimizations turned on (i.e. in debug and release configuration)

**Expected Behavior**:

In both configurations, the program should print:


0
1
2


**Actual Behavior**:

When optimizations are enabled, the program prints:


0
impossible in outer function
impossible in local function
-1
impossible in outer function
impossible in local function
-1
impossible in outer function
`</Code>
    <Description>**Version Used**:

2.2.0.61624

**Steps to Reproduce**:

1. Create a new console app. I tried it targeting .NET 4.6.1 and 4.6.2 but I don't think it matters.
2. Write the following code:

``

**Notes**:

I hit this bug in real world code, and I tried to reduce it to something small that still exhibited the problem. In the process the code lost its meaning and purpose so don't try to make sense of why anybody would write the garbage in my sample.

Fortunately in my case the effect was just a baffling NullReferenceException, but as this sample demonstrates, it could potentially cause a wrong turn in program logic and go undetected.

It seems that with optimizations on, the compiler thinks it can store the struct carrying the local variables `startOfChunk` and `pendingChunks` in a local variable within the generated `MoveNext()` method. This leaves `pendingChunks` uninitialized when entering `MoveNext()` after the first time. With optimizations off it persists the struct as an instance field of the `IEnumerator` which works as expected.

My workaround in production was to break out my local function to a static function and pass in everything it needed explicitly. Interestingly it also worked if I changed it to `Func&lt;Whatever&gt; = () =&gt; {...};`, which I would've thought would be treated similarly to a local function.</Description>
  </Issue>
  <Issue>
    <IssueID>21406</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>21406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GetBoundNodes returns BoundBadExpression for RefExpressionSyntax</Title>
    <CreatedDate>09/08/2017</CreatedDate>
    <ClosedDate>05/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>21406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>21406</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Given the following code:

``

Attempting to get the IOperation for `ref i` returns an IInvalidExpression. This is because the underlying GetBoundNodes call for the RefExpressionSyntax node returns a BoundBadExpression. This is because there is no corresponding BoundNode for the RefExpressionSyntax, and we probably should be adjusting the RefExpressionSyntax to the parent variable declaration syntax in GetBindableSyntaxNode. FYI @dotnet/roslyn-compiler.</Description>
  </Issue>
  <Issue>
    <IssueID>21404</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Question] Recommended way to get info about AD0001</Title>
    <CreatedDate>09/08/2017</CreatedDate>
    <ClosedDate>03/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21404</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>21404</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi guys,

Is there any recommended way to get some context information about a failing `DiagnosticAnalyzer` in release mode? 
When debugging my analyzer (debug mode) I can have a StackTrace and get some useful information to understand where my code fails but when shipped to the end-users (release mode) we only have a AD0001 warning and the same of the failing analyzer so it is sometimes pretty complex to understand what is going wrong. 

Ideally I would be looking for the line of code of the analyzer that is failing and possibly the code that was analyzed when crashing (maybe not the exact code dump only the class/interface/method/... name).

Cheers,
Amaury</Description>
  </Issue>
  <Issue>
    <IssueID>21390</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Provide an API in persistent service where data is owned by 1 VS process</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>17/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>new persistent service added new functionality to share data between 2 processes for same solution (VS and OOP), but removed one that guarantee only 1 VS process owns the data of same solution.

this made 1 better but broke another such as Todo, Diagnostics, Designer Attribute scanner which rely on the fact that 1 VS owns the data in the persistent service.

we should either move those features to other kind of storage or provide new API in persistent service so those feature can get same guarantee as before on top of new benefit new persistent service provides.

more detail on this </Description>
  </Issue>
  <Issue>
    <IssueID>21388</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Test failure in Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Tagging.AsynchronousTaggerTests.LargeNumberOfSpans</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>13/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>21388</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This happened in [a Jenkins PR build](

**Stacktrace**

MESSAGE:
System.ArgumentException : An element of innerExceptions was null.
+++++++++++++++++++
STACK TRACE:
at System.AggregateException..ctor(String message, IList`1 innerExceptions) at System.AggregateException..ctor(String message, IEnumerable`1 innerExceptions) at System.AggregateException..ctor(IEnumerable`1 innerExceptions) at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Flatten(ICollection`1 exceptions) at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) at Microsoft.CodeAnalysis.Workspace.Dispose() at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.Tagging.AsynchronousTaggerTests.&lt;LargeNumberOfSpans&gt;d__0.MoveNext() in q:\roslyn\src\EditorFeatures\Test\Tagging\AsynchronousTaggerTests.cs:line 88 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)</Description>
  </Issue>
  <Issue>
    <IssueID>21386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[EE] Namespace not found while evaluating expressions with portable PDB</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>21386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>21386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:
Create a simple C# Console App, set PDB type to portable in Project Properties &gt; Build &gt; Advanced.

Code Snippet (portable PDB):

``

1. Set BP on int x = 1, start debugging
2. Evaluate "new Program()" in Watch Window

**Expected Behavior**:
Successful evaluation

**Actual Behavior**:
error CS0246: The type or namespace name 'Program' could not be found (are you missing a using directive or an assembly reference?)

This only repros with portable PDBs, works fine with normal PDBs.
Note that removing the "using System;" in the code snippet causes the evaluation to work.</Description>
  </Issue>
  <Issue>
    <IssueID>21385</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Misc. issues to address before merging `features/ioperation` into `master`</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>15/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>21385</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        internal CSharpParseOptions(
            LanguageVersion languageVersion,
            DocumentationMode documentationMode,
            SourceCodeKind kind,
-           ImmutableArray&lt;string&gt; preprocessorSymbols,
+           IEnumerable&lt;string&gt; preprocessorSymbols,

MemberSemanticModel.cs: Create factory lazily.

+           _operationFactory = new CSharpOperationFactory(this);


LambdaFrame.cs / LambdaRewriter*.cs: Lots of changes. Are these changes expected or is the branch stale?

VisualBasicParseOptions.vb: Revert or fix callers that are currently creating an ImmutableArray&lt;string&gt; from IEnumerable&lt;string&gt;.

        Friend Sub New(
            languageVersion As LanguageVersion,
            documentationMode As DocumentationMode,
            kind As SourceCodeKind,
-           preprocessorSymbols As ImmutableArray(Of KeyValuePair(Of String, Object)),
+           preprocessorSymbols As IEnumerable(Of KeyValuePair(Of String, Object)),
            features As ImmutableDictionary(Of String, String))


MemberSemanticModel.vb: Create factory lazily.

+           _operationFactory = New VisualBasicOperationFactory(Me)
`</Code>
    <Description>Address all `// PROTOTYPE(IOperation)` comments, perhaps by opening issues.

CSharpParseOptions.cs: Revert or fix callers that are currently creating an ImmutableArray&lt;string&gt; from IEnumerable&lt;string&gt;.
``
</Description>
  </Issue>
  <Issue>
    <IssueID>21381</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'To expression body' should not insert new lines</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21381</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
private bool foo;
public bool Foo { get { return foo; } private set { Set(ref foo, value); } }


Problem is it decides this is what I want:
c#
private bool foo;
public bool Foo { get =&gt; foo;
    private set =&gt; Set(ref foo, value);
}
`</Code>
    <Description>&lt;s&gt;Version 15.2 (26430.16) Release

I have quite a lot of code like this to which I want to apply the "To expression body" fix:

``

No amount of .editorconfig juggling seems to impact this.
Fix in project and fix in folder are really appealing, until you factor in cleaning up every single property.&lt;/s&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>21375</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>21375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use `double.ToString("G17", ...)` for ObjectDisplay.cs</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>29/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Determinism</Name>
        <IssueID>21375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>21375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  where the output produced by the `"R"` format specifier is being changed (but not on all platforms). So that we output the same source when producing a floating-point literal on all platforms, [we should use the `"G17"` format specifier](</Description>
  </Issue>
  <Issue>
    <IssueID>21373</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'IntroduceVariableCodeRefactoringProvider' encountered an error and has been disabled</Title>
    <CreatedDate>08/08/2017</CreatedDate>
    <ClosedDate>12/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>21373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.0.26228.9

:link: Originally reported by [Guy Haskell]( on [developer community](

**Steps to Reproduce**:

1. Add the following to a VB module:

    ``

2. Select the expression `3 + 3`

3. Drop down the light bulb

See the following image:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>21245</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>21245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>do not swallow JoinableTaskContextExceptions in tests</Title>
    <CreatedDate>02/08/2017</CreatedDate>
    <ClosedDate>11/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In PR  we disabled failing tests if they were due to a `JoinableTaskContextException`.  We need to investigate our `TestWorkspace` class and see if there are problems with threading behavior
</Description>
  </Issue>
  <Issue>
    <IssueID>21238</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IOperation API for BoundRangeVariable</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>08/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>21238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21238</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Both VB and C# have a BoundRangeVariable node to represent reference to a range variable in query clause. We need to design an IOperation API for it.</Description>
  </Issue>
  <Issue>
    <IssueID>21236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test plan for "non-trailing named arguments" (7.2)</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>24/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Test Plan for Non-Trailing Named Arguments
==========================================

The draft specification needs to describe the error situation as an error.

Test for proper execution in simple positive test cases
- [x] Method call `M(1, b: 2, 3)` (see `TestSimple`)
- [x] Constructor `new C(1, b: 2, 3)` (see `TestSimpleConstructor`)
- [x] Indexer `c[1, b: 2, 3]` (see `TestSimpleIndexer`)
- [x] Attribute `[MyAttr(1, b: 2, 3)]` (see `TestInAttribute`)
- [x] Extension method invocation. (see `TestSimpleExtension`)
- [x] Delegate Invocation (see `TestSimpleDelegate`)
- [x] Local function invocation (see `TestSimpleLocalFunction`)
- [x] `this(...)` and `base(...)` (see `TestSimpleThis` and `TestSimpleBase`)

You can set a property in an attribute spec using `[A(a, b, P=1)]`. Ensure you can still do that after a positional argument following an in-place named argument. Is there a way of exercising an equivalent thing in VB?

Test that the above positive cases are errors when language version is &lt; 7.2. (see `TestNamedAndOptionalParamsErrors`, `TestDynamicCallErrors`, `TestDynamicCallErrors`, error `CS1738`, see most Simple test cases which also test old langversion)

Test for errors in simple negative test cases
- [x] Method call `M(b: 2, 3)` (see `TestSimpleError`)
- [x] Other kinds of invocations, above (a couple of combinations are tested, but not all)

Test showing that *any* named argument out of position disallows following values
- [x] Method call `M(b: 2, a: 1, c: 3, 4)` (see `TestPositionalUnaffected2`, error `CS8321`)
- [x] Other kinds, above

Demonstrate interaction with kinds of symbols
- [x] Feature should be operative in symbols from source, metadata, and in a reference to another compilation (see `TestMetadataAndPESymbols`)
- [X] Should work for methods that are generic, permitting type inference from arguments in the call. (see `TestGenericInference`)
  - [ ] VB too (has been hand-verified)

Demonstrate interaction with `params`
- [x] If there is a named argument for the `params` (last) parameter, no further arguments can be specified without names. Not even that same parameter. (see `TestNamedParams`, `TestNamedParams2`, `TestTwiceNamedParams`, `TestNamedParams5`)
- [ ] Even when this feature is used for preceding arguments, a named argument may still name the `params` parameter either in expanded or unexpanded form. (see `TestParams`, `TestParams2`) **Need test for unexpanded form (has been hand-verified).**

Demonstrate that optional parameters may be omitted after taking advantage of this feature for leading parameters.

Demonstrate interaction with `dynamic`
- [x] A dynamic invocation should forbid any positional argument following a named argument. (see `TestDynamicInvocation`)
- [x] Some invocations involving dynamic are not dynamic invocations (i.e. do not involve the use of the dynamic binder to resolve the invocation). Reportedly `c[a: 1, dyn] = dyn` (an indexer) is one example. Test that the feature may be used in those cases. See Ashley's email for a list of cases. (see `TestDynamicWhenNotInvocation`)
- [x] In VB, something similar occurs with `Option Strict Off` and calls that involve the type `Object`. We should not permit non-trailing named arguments in VB late-bound calls. (see `TestDynamicInvocation` in VB)

Demonstrate interaction with [`__arglist`](
- [x] `__arglist` should act like a positional parameter that cannot be named
  - [x] Can use `__arglist` after named arguments in proper position (see `TestSimpleArglist`)
  - [x] Cannot use `__arglist` after named arguments out of proper position (see `TestSimpleArglistAfterOutOfPositionArg`)

Language Version
- [x] Feature only works in language version 7.2 (C#)
- [x] Feature only works in language version 15.5 (VB)

IDE integration
- [ ] The "add argument name" IDE action no longer adds names to following arguments in language version 7.2 (see `TestNonTrailingNamedArgumentInCSharp7_2`) **That is a completion test, not a test for 'add argument name'**
- [ ] The "add argument name" IDE action adds names to following arguments in language version &lt; 7.2 (see `TestNonTrailingNamedArgumentInCSharp7_1`) **That is a completion test, not a test for 'add argument name'**
- [ ] It should have an option to "add all argument names" (which before would have been accomplished by adding a name to the first argument) in language version 7.2 [jcouv: this is not currently planned]
- [ ] These should be true for all four invocation forms identifier above
- [ ] Language version upgrade suggested when needed
  - [x] C# *Hand-tested, verified working*
  - [ ] VB **Hand-tested, *verified not working***

Compiler APIs
- [x] The SemanticModel APIs that can return the symbol of an argument name in a named argument work even when this feature is used. 
- [x] What is the kind of result when a call is unambiguous but has a named-arg-out-of-position-followed-by-positional problem `CandidateReason.OverloadResolutionFailure`? Demonstrate. (see ` TestPositionalUnaffected2`)

## Pointers to related links:
- PR to master: 
- language proposal: 
- work items: </Description>
  </Issue>
  <Issue>
    <IssueID>21234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn parser issue</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>07/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>21234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**vs 2015**: 

**Steps to Reproduce**:

1. I am unable to get identifier base class types for member access expressions nested inside invocationexpressionsyntax.
2. building a new custom parser for setting rules

``

**Expected Behavior**:

**Actual Behavior**:

Edited by @sharwell: Code formatting (preserved original indentation)</Description>
  </Issue>
  <Issue>
    <IssueID>21233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Recommend types that are not imported yet in the autocomplete list</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>08/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C {
  void M() {
    Int32|
  }
}
`</Code>
    <Description>``
Int32 should show up in the list and once it's committed (e.g. by hitting space) `using System;` should be inserted.</Description>
  </Issue>
  <Issue>
    <IssueID>21232</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Optimize default(T) deconstruction</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>21232</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
void M(out int i, out string j) {
  (i, j) = default((int, string));
}

**Expected Behavior**: (decompiled)
cs
void M(out int i, out string j) {
  i = 0;    // default(int)
  j = null; // default(string)
}

**Actual Behavior**:
cs
void M(out int i, out string j) {
  i = default((int, string)).Item1;
  j = default((int, string)).Item2;
}
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:
``
PS: Ideally, this should work for `default` literal as well (
</Description>
  </Issue>
  <Issue>
    <IssueID>21231</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>21231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SyntaxFactory generate Nullable values types output int ?(has a space) instead of int?</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>23/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21231</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var syntaxNode = CompilationUnit()
.WithMembers(
    SingletonList&lt;MemberDeclarationSyntax&gt;(
        ClassDeclaration("Pay201707")
        .WithModifiers(
            TokenList(
                Token(SyntaxKind.PublicKeyword)))
        .WithMembers(
            SingletonList&lt;MemberDeclarationSyntax&gt;(
                PropertyDeclaration(
                    NullableType(
                        PredefinedType(
                            Token(SyntaxKind.IntKeyword))),
                    Identifier("RmbMerAmt"))
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword)))
                .WithAccessorList(
                    AccessorList(
                        List&lt;AccessorDeclarationSyntax&gt;(
                            new AccessorDeclarationSyntax[]{
                                AccessorDeclaration(
                                    SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken(
                                    Token(SyntaxKind.SemicolonToken)),
                                AccessorDeclaration(
                                    SyntaxKind.SetAccessorDeclaration)
                                .WithSemicolonToken(
                                    Token(SyntaxKind.SemicolonToken))})))))))
.NormalizeWhitespace();

Console.WriteLine(syntaxNode.ToFullString());
  

**Expected Behavior**:

csharp
public class Pay201707
    {
        public int? RmbMerAmt
        {
            get;
            set;
        }
    }


**Actual Behavior**:

csharp
public class Pay201707
    {
        public int ? RmbMerAmt
        {
            get;
            set;
        }
    }
`</Code>
    <Description>**Version Used**: 2.2.0

**Steps to Reproduce**:

1.  Use SyntaxFactory to generate SystanxTree, for example
``
</Description>
  </Issue>
  <Issue>
    <IssueID>21227</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Consider automatically inserting a banner into a file when creating a new file from a template.</Title>
    <CreatedDate>01/08/2017</CreatedDate>
    <ClosedDate>13/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21227</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From 

Danger here is that there is some random file with a banner that is appropriate for it, but we place that banner in new files even if users would not want that.</Description>
  </Issue>
  <Issue>
    <IssueID>21074</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>21074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CodeClass2.Parts always empty</Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>26/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From: 

**Version Used**: 
15.3 Preview 1

**Steps to Reproduce**:

1. When using DTE CodeClass2.Parts used to return all parts of a partial class. In this 2017 preview version it always returns empty.
</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>21068</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>21068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Same Operation node is used multiple times in the tree </Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>27/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>21068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example  </Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>21062</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn Code Analyzer - SyntaxKind.ArrowExpressionClause Not Triggered during Unit Test</Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>26/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21062</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm trying to write a code analyzer using Roslyn, and its going great except for trying to find nodes using SyntaxKind.ArrowExpressionClause when unit testing.  When running the analyzer on a Visual Studio instance, it triggers the breakpoint fine.

This is the basics of my code:

        public override void Initialize(AnalysisContext context)
        {
            var kinds = new[]
            {
                SyntaxKind.ArrowExpressionClause
            };
            context.RegisterSyntaxNodeAction(AnalyzeNode, kinds);
        }

        private static void AnalyzeNode(SyntaxNodeAnalysisContext context)
        {
            var node = context.Node;
        }

This is the code I am trying to trigger the analyzer on:

    using System;

    namespace TestRoslynConsoleApp
    {
        class Program
        {
            object foo2 { get =&gt; 5; }

            static void Main(string[] args)
           {
            
           }
       }
    }

Unit Test:

            var test = @"
                    using System;

                    namespace TestRoslynConsoleApp
                    {
                        class Program
                        {
                            object foo2 { get =&gt; 5; }

                            static void Main(string[] args)
                           {
            
                           }
                       }
                    }
                ";

            var expected = new DiagnosticResult
            {
                Id = "BoxingAnalyzer",
                Message = Resources.BoxingAnalyzerDescription,
                Severity = DiagnosticSeverity.Warning,
                Locations =
                    new[] {
                            new DiagnosticResultLocation("Test0.cs", 15, 41)
                        }
            };

            VerifyCSharpDiagnostic(test, expected);

If I set a breakpoint on "var node = context.Node;" it triggers fine when running an instance of Visual Studio and creating a program with the above code, but when Unit Testing and debugging on "var node = context.Node;", the breakpoint is not hit.</Description>
  </Issue>
  <Issue>
    <IssueID>21061</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Visual Studio crashes when C# project depends on F# which depends on C# project with FxCop analyzers </Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21061</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

----------------------------------------------------------------------------

#### Analyzer package

Microsoft.CodeAnalysis.FxCopAnalyzers  2.3.0-beta1

#### Repro steps

Open solution in Visual Studio 2017 Update 3 Preview 4 : [CrashProblemSimpleSolution.zip](

Or:
In Visual Studio 2017 Update 3 Preview 4
 1) Create .NET Core C# project, add FxCop nuget and Feature IOperation
 2) Create .NET Core F# project, add it to solution make it dependent on previous C# project
 3) Create .NET Core C# project, add FxCop nuget and Feature IOperation and make it dependent on previous C# project

#### Expected behavior
no problem

#### Actual behavior
Visual Studio will crash, this is what debugging shows:
Exception thrown at 0x74BCDBE8 in devenv.exe: Microsoft C++ exception: EEException at memory location 0x23EFE56C.
Exception thrown at 0x74BCDBE8 (KernelBase.dll) in devenv.exe: 0xE0434352 (parameters: 0x80004003, 0x00000000, 0x00000000, 0x00000000, 0x72E70000).
'devenv.exe' (Win32): Loaded 'C:\Windows\Microsoft.NET\Framework\v4.0.30319\diasymreader.dll'. Cannot find or open the PDB file.
CLR: Managed code called FailFast, saying "System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.CreateEmptyCompilation()
   at Microsoft.CodeAnalysis.SolutionState.CompilationTracker.&lt;BuildDeclarationCompilationFromScratchAsync&gt;d__29.MoveNext()"</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21061</IssueID>
        <PullRequestID>21023</PullRequestID>
        <Title>Fix crash with F# project references</Title>
        <Description>**Customer scenario:** Create a new F# project with dotnet cli, open the project with Visual Studio, add a C# project, and reference the F# project from the C# project.
**Bugs this fixes:** 
**Workarounds, if any:** nothing good.
**Risk:** low.
**Performance impact:** none. Just an additional check in a relatively rare codepath.
**Is this a regression from a previous update?** yes, ish. Referencing F# from C# in older project types worked fine, but with newer project types it's broken due to us using more of CPS.
**Root cause analysis:** normally, adding a project reference from one project to another when they're different languages is done via telling one project about the output assembly of the other, adding it as a metadata reference. To create live IntelliSense cross-language for C#/VB, we try to convert this back to a project reference in our project model. We did this conversion for C#-to-F#, which wasn't going to work because F# doesn't fit other parts of the Roslyn model. This didn't crash previously because F# projects didn't always have output paths, so we couldn't do the matching to try to convert. A unit test has been added.
**How was the bug found?** Windows Error Reporting hits.</Description>
        <CreatedDate>21/07/2017</CreatedDate>
        <ClosedDate>21/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Needs Shiproom Approval</Name>
            <IssueID>21061</IssueID>
            <PullRequestID>21023</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21061</IssueID>
            <PullRequestID>21023</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21061</IssueID>
        <PullRequestID>21035</PullRequestID>
        <Title>Fix crash with fsharp project references</Title>
        <Description>**Customer scenario:** Create a new F# project with dotnet cli, open the project with Visual Studio, add a C# project, and reference the F# project from the C# project.
**Bugs this fixes:** 
**Workarounds, if any:** nothing good.
**Risk:** low.
**Performance impact:** none. Just an additional check in a relatively rare codepath.
**Is this a regression from a previous update?** yes, ish. Referencing F# from C# in older project types worked fine, but with newer project types it's broken due to us using more of CPS.
**Root cause analysis:** normally, adding a project reference from one project to another when they're different languages is done via telling one project about the output assembly of the other, adding it as a metadata reference. To create live IntelliSense cross-language for C#/VB, we try to convert this back to a project reference in our project model. We did this conversion for C#-to-F#, which wasn't going to work because F# doesn't fit other parts of the Roslyn model. This didn't crash previously because F# projects didn't always have output paths, so we couldn't do the matching to try to convert. A unit test has been added.
**How was the bug found?** Windows Error Reporting hits.</Description>
        <CreatedDate>21/07/2017</CreatedDate>
        <ClosedDate>21/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21061</IssueID>
            <PullRequestID>21035</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21060</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Assembly aliases are not resolved during a build</Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels />
    <Code>xml
&lt;ItemGroup&gt;
  &lt;Reference Update="System"&gt;
    &lt;Aliases&gt;global,system&lt;/Aliases&gt;
  &lt;/Reference&gt;
&lt;/ItemGroup&gt;


Attempts to use members of this assembly qualified with `system::` instead of `global::` resulted in build errors of the following form:


error CS0234: The type or namespace name 'System' does not exist in the namespace 'system' (are you missing an assembly reference?)
error CS0430: The extern alias 'system' was not specified in a /reference option
error CS0616: 'System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute' is not an attribute class
`</Code>
    <Description>_From @sharwell on July 22, 2017 18:15_As demonstrated in DotNetAnalyzers/StyleCopAnalyzers#2499, it appears impossible to assign a new alias to the **System** reference. I used the following code to add the alias:

``

:link: Here is an AppVeyor build showing the output from a command line build: _Copied from original issue: dotnet/sdk#1443_</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21060</IssueID>
        <PullRequestID>2499</PullRequestID>
        <Title>Add missing On keyword to Option statements</Title>
        <Description>Add logic to AddMissingTokensCleanupProvider to add omitted On keyword from end of Option Explicit, Option Strict and Option Infer statementsFixes tfs 1151995@Pilchie @basoundr  please review</Description>
        <CreatedDate>04/05/2015</CreatedDate>
        <ClosedDate>05/05/2015</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21060</IssueID>
            <PullRequestID>2499</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21059</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler-generated expression trees do not respect overridden members</Title>
    <CreatedDate>24/07/2017</CreatedDate>
    <ClosedDate>29/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Base
{
    protected virtual int Value =&gt; 0;
}

class Override : Base
{
    protected override int Value =&gt; 1;
}

MemberExpression GetExpressionBody(Expression&lt;Func&lt;int&gt;&gt; expression)
{
    return expression.Body as MemberExpression;
}

Base baseObj = new Base();
Override overrideObj = new Override();

Assert.NotEqual(
    GetExpressionBody(() =&gt; baseObj.Value).Member,
    GetExpressionBody(() =&gt; overrideObj.Value).Member
); // throws
`</Code>
    <Description>**Version Used**:  
`Microsoft.CodeAnalysis 2.2.0`

**Steps to Reproduce**:  
1. Create a class `Base`, and define a virtual property `Value`.
2. Create another class `Override` that inherits `Base`, and overrides `Value`.
3. Use a method that requires the compiler to generate a LINQ `Expression` tree.

``

**Expected Behavior**:  
The produced `MemberExpression` has a `Member` that references `Override.Value`.

**Actual Behavior**:  
The produced `MemberExpression` has a `Member` that references `Base.Value`.

**Notes**:  
I suspect the [`ExpressionLambdaRewriter.VisitPropertyAccess`]( method is causing this issue, by calling [`PropertySymbolExtensions.GetOwnOrInheritedGetMethod`]( However, it looks like `GetOwnOrInheritedGetMethod` works correctly, which means that... the bug is produced earlier, whilst creating the semantic model.</Description>
  </Issue>
  <Issue>
    <IssueID>21053</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please update build instructions for roslyn</Title>
    <CreatedDate>22/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21053</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
&gt; dotnet --info
.NET Command Line Tools (2.0.0-preview2-006502)

Product Information:
 Version:            2.0.0-preview2-006502
 Commit SHA-1 hash:  07dfded669

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.16246
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\2.0.0-preview2-006502\

Microsoft .NET Core Shared Framework Host

  Version  : 2.0.0
  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d

but the build still fails.  

Build FAILED.

C:\Program Files (x86)\Microsoft Visual Studio\Preview\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets(57,5): error : The version of Microsoft.NET.Sdk used by this project is insufficient to support .NET Standard 2.0 which is required by this project's
references.  Please install version 2.0 or higher of the .NET Core SDK. [C:\source\roslyn\Open\src\Tools\RoslynPublish\RoslynPublish.csproj]
    0 Warning(s)
    1 Error(s)
`</Code>
    <Description>I have dotnet core 2.0 installed
``

Please list the version of dotnet core that needs to be installed for roslyn to build
</Description>
  </Issue>
  <Issue>
    <IssueID>21051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Enable RS0012 and RS0018 at the proper severity</Title>
    <CreatedDate>22/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Pull request #21052 disabled rules RS0012 and RS0018 due to substantial performance overhead. These rules should be enabled again at **Warning** severity after the underlying performance problem is resolved.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21051</IssueID>
        <PullRequestID>21052</PullRequestID>
        <Title>Enable analyzers on Roslyn.sln except for two very slow ones</Title>
        <Description>Closes #21041

| Approach | Build time (build.cmd on my machine) |
| --- | --- |
| UseRoslynAnalyzers=false (7d91bb391254f4aec786ed3d6cadf1b59741ba77) | 1:01 |
| UseRoslynAnalyzers=true (7d91bb391254f4aec786ed3d6cadf1b59741ba77 with #21042 reverted) | 3:27 |
| UseRoslynAnalyzers=true, RS0012 and RS0018 disabled | 1:21 |

⚠️ Due to limitations in the way rule set file inheritance works (and lack of a workaround in our build), this change results in these two diagnostics being disabled on developer machines *and* on the CI. However, it is my understanding that the underlying performance problem is understood, and we're just waiting for a new beta release of the packages to get published so we can consume them.

:link: See #21051 for the new issue to enable these two rules after the underlying performance problem is corrected.</Description>
        <CreatedDate>22/07/2017</CreatedDate>
        <ClosedDate>24/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21051</IssueID>
            <PullRequestID>21052</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21050</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE analyzer experience broken for Roslyn.sln</Title>
    <CreatedDate>22/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>21050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>21050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21050</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Pull request #20990 moved the project to the 2.6.0.0 compiler tool chain, including analyzers, prior to the public availability of a build of Visual Studio which supports them. It should be reverted for a proper developer experience, and then merged after a preview of release 15.5 is published.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21050</IssueID>
        <PullRequestID>20990</PullRequestID>
        <Title>Re-enable analyzers in the master branch</Title>
        <Description>The [change]( to move analyzers to 2.5 version broke analyzers in the branch - they are laid out differently in the new nuget package. Build targets are unable to find the props for importing the analyzers and silently bail out executing them. This PR fixes the following:

1. Fix the props file path in Imports.Targets
2. Move to a newer analyzer package which has an important [bug fix](
3. Report a build error if analyzer props file does not exist
4. Fix the public API errors (mostly due to duplicate entries in shipped and unshipped files).
5. Fix one instance of RS0014 (Do not use Enumerable methods on indexable collections. Instead use the collection directly) introduced recently in the code.
6. Add suppression for one instance of CA1802 in WellKnownAttributeData.cs that fixed the signing issue.</Description>
        <CreatedDate>19/07/2017</CreatedDate>
        <ClosedDate>21/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21050</IssueID>
            <PullRequestID>20990</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21041</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>21041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn analyzers causing large build slowdown</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>21041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>21041</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The Roslyn analyzers package is causing a 3-6X slowdown in our build. Makes our developer builds practically unusable. For the time being analyzers are being disabled on developer boxes. 

PR that introduced this problem: 
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>21041</IssueID>
        <PullRequestID>20990</PullRequestID>
        <Title>Re-enable analyzers in the master branch</Title>
        <Description>The [change]( to move analyzers to 2.5 version broke analyzers in the branch - they are laid out differently in the new nuget package. Build targets are unable to find the props for importing the analyzers and silently bail out executing them. This PR fixes the following:

1. Fix the props file path in Imports.Targets
2. Move to a newer analyzer package which has an important [bug fix](
3. Report a build error if analyzer props file does not exist
4. Fix the public API errors (mostly due to duplicate entries in shipped and unshipped files).
5. Fix one instance of RS0014 (Do not use Enumerable methods on indexable collections. Instead use the collection directly) introduced recently in the code.
6. Add suppression for one instance of CA1802 in WellKnownAttributeData.cs that fixed the signing issue.</Description>
        <CreatedDate>19/07/2017</CreatedDate>
        <ClosedDate>21/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>21041</IssueID>
            <PullRequestID>20990</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>21033</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>21033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inferred tuple element names should not be included in ITypeSymbol.GetMembers() in C# 7.0</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>10/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>21033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>21033</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From projects compiled with `/langversion:7`, `ITypeSymbol.GetMembers()` should use default names rather than inferred names for tuple elements that are not explicitly named since the inferred names cannot be used in C#7.

![inferred-name](
</Description>
  </Issue>
  <Issue>
    <IssueID>21032</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect indentation between a regular comment and member of a class</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>21032</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 26717.1.d15rel

**Steps to Reproduce**:

1. Paste C# code

``

2. At the `$$`, press Enter twice

**Expected Behavior**: After each Enter, the caret should be in indented 4 positions

**Actual Behavior**: After the second Enter, the caret is indented 8 positions
</Description>
  </Issue>
  <Issue>
    <IssueID>21028</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>21028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"CS8306: Tuple element name inferred" reported for deconstruction assignment with inferred name and type</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21028</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Compile with language version 7.0 with 7.1 compiler:
``</Description>
  </Issue>
  <Issue>
    <IssueID>21025</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>F2 is no longer shortcut to "Rename"</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21025</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21025</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>21025</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Version 15.4.0 Preview 1.0 [26710.3002.d15prerel]

**Steps to Reproduce**:
Looks like F2 is no longer assigned to "Rename" instead it's CTRL+R, CTRL+R. Is this by design?

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>21024</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Mixed Language Build in One Project</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>05/12/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>21024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21024</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description># Mixed Language Build in One Project
It would be nice to be able to construct a project within Visual Studio which enables the user to mix and match between C#, Visual Basic .NET, F# and MSIL (CIL).

Today C# already uses a DSL that has its own build step: WPF's XAML.

The main boon behind the feature would enable the VB-only features to be used in C# and vice-versa.  Were this build-step approach generalized, you could even enable people to introduce MSIL (or CIL) directly to give you access to behaviors that are otherwise impossible (generics with an Enum constraint, for instance, or the XML Literals of VB.NET)

**Possible Approach**
_Notice: I have not dug deep into the internals of the Roslyn code base, so this may be infeasible from the onset due to the work necessary to introduce it_
A majority of the feature could rely on the notion that it's all CIL (+MZ-PE-COFF/ELF/PEF) in the end.  So if you were adding a .vb file to a C# project, it could work in a few steps (I'm simplifying here, because there's, in reality, way too many steps!):
1. VB/C# compiler validates the code is correct and free of any errors, syntactically, semantically or otherwise.
2. Once it's verified, you can safely generate the IL that would be representative of the code
  a. This would need to work synchronously with the project's main language IL Generator to ensure that the IL for a specific class is fully present
  b. This is the cleanest way for it to work and allow partials in both languages to write the _same_ class.
  c. Allowing partials would simplify mixing in constraints or other behaviors that you couldn't otherwise do in either language.
## Caveat Emptor
This would still require a 'Primary Language' as part of the project.  This is due to the differences in the private implementation details between the two languages (A C# project would likely not have any need of the My namespace, but may want to leverage XML literals without having to worry about the C# team saying 'Over my dead body' about the feature.)

F#'s paradigm is vastly different, I could see people being more willing to dabble in something wildly different if it's closer to home.

Were CIL to be directly allowed I suspect it *could* be abused; however, same thing applies to pointer logic in C# (and everything in C++? :)  Perhaps were this to even be considered you'd need to apply the project language's member access rules to the CIL.

For me, the driving force for something like this is the ability to do one-offs that would hasten development without having to drop a wholly new project into the solution to test or introduce a single behavior or bit of data.</Description>
  </Issue>
  <Issue>
    <IssueID>21022</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot use DataAnnotations in C# interactive</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
 2.2.0.61624

**Steps to Reproduce**:

Here is the console input and output:

`` 

**Expected Behavior**:
Load the `DataAnnotations` assembly.

**Actual Behavior**:
Error messages.
</Description>
  </Issue>
  <Issue>
    <IssueID>21021</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Mark CodeStyle nugets as prerelease-only until they are truly ready to ship</Title>
    <CreatedDate>21/07/2017</CreatedDate>
    <ClosedDate>17/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Acquisition</Name>
        <IssueID>21021</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This will prevent them from getting dropped under "Release" nuget folder and prevent us from accidentally uploading them before they are ready.

To fix this add the nugets to the [PreReleaseOnly list in the BuildNugets.csx script](

Also please remember to add some manual validation steps for these nugets when you flip them back to "Release"-ready. This is so that we can validate these nugets are good to upload before each future release. Ping me when this is ready and I can tell you where to add these steps.</Description>
  </Issue>
  <Issue>
    <IssueID>21018</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code action for running/debugging test methods</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>21018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>21018</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>/cc @davkean filed as requested. </Description>
  </Issue>
  <Issue>
    <IssueID>21012</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Update Analyzer with Code Fix template</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>26/11/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>21012</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @Pzixel on July 18, 2017 9:16_I'm playing with Roslyn and wanted to create my first analyzer. It works fine, however, when I try to update NuGet packages in analyzer project I get an error because analyzer is supporting .net4.5 only while `Microsoft.CodeAnalysis.Common` 2.* doesn't. When I tried to migrate project manually to .net4.6 or .netstandard I encountered with several problems because I don't understand all switches and custom project sections in generated project and I only get multiple errors, and when I fix ones others comes. Here is #44 and #510 that are helpful in implementing it and it's a step in the same direction. I think that new `Update Analyzer with Code Fix` template must be a .netstandard project referencing packages 2.*. 

P.S. If here is a workaround how to perform such a transformation manually after project got generated it would be really helpful._Copied from original issue: dotnet/sdk#1424_</Description>
  </Issue>
  <Issue>
    <IssueID>21010</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS Test: Null references in VS adornment code</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>24/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21010</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
MESSAGE:
System.AggregateException : 3 exception(s) were thrown during test.
Note: exceptions may have been thrown by another test running concurrently with
this test. This can happen with any tests that share the same ExportProvider.
Examining individual exception stacks may help reveal the original test and source 
of the problem.

Exception 0:
System.NullReferenceException: Object reference not set to an instance of an object.
 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)
 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)

Exception 1:
System.NullReferenceException: Object reference not set to an instance of an object.
 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint)
 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)

Exception 2:
System.NullReferenceException: Object reference not set to an instance of an object.
 
at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e)
 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)


---- System.NullReferenceException : Object reference not set to an instance of an object.
---- System.NullReferenceException : Object reference not set to an instance of an object.
---- System.NullReferenceException : Object reference not set to an instance of an object.

+++++++++++++++++++
STACK TRACE:

at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize) 
at Microsoft.CodeAnalysis.Workspace.Dispose() 
at Microsoft.CodeAnalysis.Editor.UnitTests.CodeFixes.CodeFixServiceTests.&lt;GetDefaultFixesAsync&gt;d__6.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeFixes\CodeFixServiceTests.cs:line 103 --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.GetResult() 
at Microsoft.CodeAnalysis.Editor.UnitTests.CodeFixes.CodeFixServiceTests.&lt;TestGetCodeFixWithExceptionInFixableDiagnosticIds2&gt;d__4.MoveNext() in q:\roslyn\src\EditorFeatures\Test\CodeFixes\CodeFixServiceTests.cs:line 84 --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) ----- Inner Stack Trace #1 (System.NullReferenceException) ----- 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint) 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #2 (System.NullReferenceException) ----- 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.PerformLayout(SnapshotPoint trackingPoint) 
at Microsoft.VisualStudio.Text.InterTextAdornmentSupport.Implementation.InterLineAdornmentManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args) ----- Inner Stack Trace #3 (System.NullReferenceException) ----- 
at Microsoft.VisualStudio.Text.AdornmentLibrary.TextMarkers.Implementation.TextMarkerVisualManager.OnBatchedTagsChanged(Object sender, BatchedTagsChangedEventArgs e) 
at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>21008</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Improve Generate Default Constructor by adjusting cursor placement after invocation</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>27/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>21008</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When a default constructor is generated, we currently place the cursor at the end of the closing brace:

![image](

It makes more sense to leave the cursor in the parameter list so that a user can add parameters:

![image](

Same issue happens when you generate a default constructor from the type declaration:
![image](

It leaves the cursor in the type name:
![image](


</Description>
  </Issue>
  <Issue>
    <IssueID>21005</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>21005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use PackageReference for compiler toolset package and roslyn analyzers package</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>03/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>21005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>21005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>21005</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See the discussion here: 

This is likely a NuGet bug as mentioned by Srivatsn. We need to investigate this further and enable PackageReference based approach for non-Window OSes.</Description>
  </Issue>
  <Issue>
    <IssueID>21004</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>21004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test VS crash in CSharpKeywordHighlighting.Foreach or CSharpInteractiveFormsAndWpf.InteractiveWithDisplayFormAndWpfWindow</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21004</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

I guess IDE should start the investigation since that's where the crash actually occurred?</Description>
  </Issue>
  <Issue>
    <IssueID>21003</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test crash in or before CSharpGenerateTypeDialog.CSharpToBasic (could also be CSharpGenerateFromUsage.GenerateLocal)</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21003</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
    </Description>
  </Issue>
  <Issue>
    <IssueID>21002</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>21002</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Test crash in or before CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences</Title>
    <CreatedDate>20/07/2017</CreatedDate>
    <ClosedDate>13/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>21002</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>21002</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>21002</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
    </Description>
  </Issue>
  <Issue>
    <IssueID>20991</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>BasicLineCommit.CommitOnSave flaky test run failure</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>20991</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>20989</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>20989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Convert If to Select produces uncompilable VB code.</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>27/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>20989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Starting with this code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>20988</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>20988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make OrganizeImportsService public</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>31/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>20988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>20988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'd like to invoke [`OrganizeImportsService.OrganizeImportsAsync()`]( from a code refactoring, however, it's  not public.

Now, I need to resort to [using reflection]( to invoke this service, but it would make the code a lot cleaner to do this using the "front door".</Description>
  </Issue>
  <Issue>
    <IssueID>20987</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>20987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Removing unused variable deletes #ifdef</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>20/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>20987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System; 
namespace ClassLibrary {
  public class Class1 {
    public static string GetText() {
#if NET461            
        return "Hello from " + Environment.OSVersion;
#elif NETSTANDARD1_4
        return "Hello from .NET Standard";
#else
#error Unknown platform 
#endif
        int blah = 5;
    }
  }
} 
`</Code>
    <Description>Ported from 

I have a netstandard class lib 

``

using the quick fix to remove the int blah also removes the preprocess regions.</Description>
  </Issue>
  <Issue>
    <IssueID>20986</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>stcahlon</FixedById>
        <IssueID>20986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Feature Request: Add-null-check should offer to add null checks for all parameters in a signature.</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>15/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>20986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>InternalAsk</Name>
        <IssueID>20986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from  / 

</Description>
  </Issue>
  <Issue>
    <IssueID>20985</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Adding a Param to Ctor from CallSite Picks the Wrong Constructor</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>20985</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public sealed class TestClass { 
    public TestClass() { } 
    public TestClass(int i) { } 
    public TestClass(Action a, int i) : this(i) { } 
}

public sealed class Test { 
    public void TestMethod() { 
        TestClass t = new TestClass(4);
    }
}
`</Code>
    <Description>Ported from 

Add parameter to constructor from callsite Start with this code: 

``

Then, try to add another int parameter to TestClass(int) --&gt; TestClass(int,int). I would have expected this to try and add a param to TestClass(int), but instead it won't. It does give me the opportunity to generate a whole new constructor, but that's not the intention. See screenshot for more details. 

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>20984</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>20984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Resolving merge strips whitespace</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>20/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>20984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

If HEAD version of merge conflict has leading whitespace, it will strip the whitespace if I choose HEAD. I think it should leave whitespace as-is in the version selected. </Description>
  </Issue>
  <Issue>
    <IssueID>20983</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>20983</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No suggestion to add null check for inner function</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>04/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20983</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>20983</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>20983</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

Paste: static void Foo(Stuff outer) { int Bar(Stuff inner) { return 0; } Bar(outer); } Click on `outer`. There is an offer to add a null check. Click on `inner`. There is no such offer. </Description>
  </Issue>
  <Issue>
    <IssueID>20979</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>BasicExpressionEvaluator.EvaluatePrimitiveValues failed with COMException</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>25/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>20979</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Stacktrace

MESSAGE:
System.Runtime.InteropServices.COMException : Operation not supported. Unknown error: 0x8971003c.
+++++++++++++++++++
STACK TRACE:
Server stack trace: at EnvDTE.Debugger.StepOver(Boolean WaitForBreakOrEnd) at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Debugger_InProc.StepOver(Boolean waitForBreakOrEnd) at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs) at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type) at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.Debugger_InProc.StepOver(Boolean waitForBreakOrEnd) at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.Debugger_OutOfProc.StepOver(Boolean waitForBreakOrEnd) at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.Dispose(Boolean disposing) in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicExpressionEvaluator.cs:line 149 at Roslyn.VisualStudio.IntegrationTests.AbstractIntegrationTest.Dispose() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\AbstractIntegrationTest.cs:line 30 at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource)
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>20977</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add field to constructor parameter</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>21/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20977</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>20977</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>20977</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>*Filed on behalf of a customer.*

The desired experience is to press `Ctrl+.` on a field and add it to an existing constructor's parameter list. 

Today's workaround is to delete any existing constructors and "Generate constructor".</Description>
  </Issue>
  <Issue>
    <IssueID>20976</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Usings used only for required for doc comments are considered unnecessary</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>20976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;   // Not considered necessary

namespace ConsoleApp1
{
    class Program
    {
        /// &lt;summary&gt;
        /// Turns args into a &lt;see cref="List{T}"/&gt;
        /// &lt;/summary&gt;
        static void Main(string[] args)
        {
            Console.WriteLine(args.Length);
        }
    }
}
`</Code>
    <Description>**Version Used**: 
VS d15rel 26617.01

**Steps to Reproduce**:
Create a C# file where the only reference to a namespace comes through a doc comment.

``

**Expected Behavior**:
All usings are considered required

**Actual Behavior**:
Usings used only by doc comments are considered unnecessary and will be removed by the remove/sort usings command.

Lightbulbs suggesting adding the using if you don't have it.
</Description>
  </Issue>
  <Issue>
    <IssueID>20974</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Default values for ImmutableArray of IOperations</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>20974</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20974</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>20974</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>20974</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See @cston's comment: 

We need to decide if we are fine to expose default ImmutableArray operation nodes or they should always be set to empty when default, and then fix this consistently across our operation factories.</Description>
  </Issue>
  <Issue>
    <IssueID>20973</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>20973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>B08-Add parameter to constructor from callsite</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>20/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1. create an instance of object with constructor param of type int in C# application.
2. add null as new param to the same call 
3. press ctrl+ click add parameter to exisiting int constructor.
4. The new param is also added as int.

**Expected Behavior**:
The new param should be of nullable type as it is in VB

**Actual Behavior**:
The new parameter is int and gives error "Argument 1: cannot convert from '&lt;null&gt;' to 'int' "</Description>
  </Issue>
  <Issue>
    <IssueID>20969</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>20969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect "Use of unassigned local variable" for `(x is T y) == false`.</Title>
    <CreatedDate>19/07/2017</CreatedDate>
    <ClosedDate>29/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>20969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>20969</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
Microsoft Visual Studio Community 2017 
Version 15.2 (26430.16) Release
VisualStudio.15.Release/15.2.0+26430.16
Microsoft .NET Framework
Version 4.6.01586

**Steps to Reproduce**:
This produces "Use of unassigned local variable" but it should not.
``

We like to use `== flase` instead of `!` in our code base for added readability. Unfortunately this does not work with above statement :/ Would it be possible to add it?

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>20961</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>20961</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ReferenceHighlightingViewTaggerProvider crashed VS after switching branches and reloading files</Title>
    <CreatedDate>18/07/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>20961</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>20961</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>20961</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I switched branches, said no to Reloading the project, but yes to reloading the files, then this tagger crashed with:

``</Description>
  </Issue>
  <Issue>
    <IssueID>20959</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AttributeData for AttributeSyntax with ReturnKeyword</Title>
    <CreatedDate>18/07/2017</CreatedDate>
    <ClosedDate>22/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>20959</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>20959</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>20959</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is it possible to resolve AttributeData for attribute which defined with return operator?
Compilation and Semantic model present.

Example:
``</Description>
  </Issue>
  <Issue>
    <IssueID>19996</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>19996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Binding for ForEachVariableStatement doesn't bind Variable expression unless it is a deconstruction left</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>03/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19996</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For example, see scenario in unit-test GetEnclosingBinderInternalRecovery_11 added in 

This creates problems for SemanticModel because it cannot find information about that expression in a normal way. The approach we have been taking is that expressions like that should still be bound (perhaps ignoring any diagnostics from that) and preserved in the bound tree for the semantic model to find. See, how we handle declarator arguments (BindDeclaratorArguments), which are disallowed by the grammar.   </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19996</IssueID>
        <PullRequestID>19995</PullRequestID>
        <Title>Add a test for an already fixed crash due to SemanticModel failing to locate the right binder.</Title>
        <Description>Related to 

@dotnet/roslyn-compiler Please review a test only change.</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>05/06/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19996</IssueID>
            <PullRequestID>19995</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19996</IssueID>
        <PullRequestID>25848</PullRequestID>
        <Title>Bind ForEachVariableStatementSyntax.Variables for error recovery</Title>
        <Description>We now bind ForEachVariableStatementSyntax.Variables in error
scenarios, so that IOperation can provide a meaningful tree
in this scenario.

&lt;details&gt;&lt;summary&gt;Ask Mode template not completed&lt;/summary&gt;

&lt;!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,
submit the pull request and then ask us for help. :) --&gt;

### Customer scenario

In an invalid code scenario where the user puts an arbitrary expression in a foreach block, we don't bind the expression in initial bind leaving information out of the IOperation tree.

### Bugs this fixes

Fixes 
Fixes 

### Workarounds, if any

None

### Risk

This will cause us to bind an additional expression during initial bind in foreach nodes, which could potentially be quite large. However, this will only affect a fairly-uncommon broken code scenario.

### Performance impact

Low, as the additional bind shouldn't adversely anything except the broken scenario.

### Is this a regression from a previous update?

No

### Root cause analysis

N/A

### How was the bug found?

Internally-reported

### Test documentation updated?

N/A

&lt;/details&gt;
</Description>
        <CreatedDate>30/03/2018</CreatedDate>
        <ClosedDate>03/04/2018</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>19996</IssueID>
            <PullRequestID>25848</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>19996</IssueID>
            <PullRequestID>25848</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature - IOperation</Name>
            <IssueID>19996</IssueID>
            <PullRequestID>25848</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>19993</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>change yahoo link in the Wiki Interactive Window</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19993</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19993</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This, doesn't work anymore
"

In 


</Description>
  </Issue>
  <Issue>
    <IssueID>19989</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Create a way to check if FixProvider is being called from Preview Window Vs Committed</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>19989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>19989</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Feature Request**:
    Create a way to tell if the FixProvider is being Called for preview or for comitting.

I've created a Code Fix Provider to Add resources to a file, however these changes should only be applied via final commit.   There is no good way of finding if fix was for preview or for comit  Currently, I am using the call stack as a work around:

        public static bool IsCallFinal()
        {
            var currentStack = new StackTrace();
            return false == currentStack.GetFrames().Any(x =&gt; x.GetMethod().Name == "&lt;GetPreviewOperationsAsync&gt;b__0");
        }
</Description>
  </Issue>
  <Issue>
    <IssueID>19988</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Introduce Local refactoring fails to simplify extension methods</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>19988</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    using System;
    using System.Linq;

    namespace ConsoleApp4
    {
        class Program
        {
            static void Main(string[] args)
            {
                var array = new[] { 1 };
                Console.WriteLine(array.Select(i =&gt; i.ToString()));
            }
        }
    }
    

2. Select the expression `array.Select(i =&gt; i.ToString())`
3. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;, and select **Introduce local for 'array.Select(i =&gt; i.ToString())'**

**Expected Behavior**:

csharp
using System;
using System.Linq;

namespace ConsoleApp4
{
    class Program
    {
        static void Main(string[] args)
        {
            var array = new[] { 1 };
            System.Collections.Generic.IEnumerable&lt;string&gt; enumerable = array.Select(i =&gt; i.ToString());
            Console.WriteLine(enumerable);
        }
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Rafael de Lima Reis](

**Steps to Reproduce**:

1. Use the following code

    ``

**Actual Behavior**:

💭 Appears to be correct.</Description>
  </Issue>
  <Issue>
    <IssueID>19987</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect IDE0004 (Cast is redundant) in pattern matching</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19987</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

namespace ConsoleApp4
{
    class Program
    {
        static void Main(string[] args)
        {
            object x = 1f;
            switch (x)
            {
            case (float)1:
                Console.WriteLine("one");
                break;

            default:
                Console.WriteLine("not one");
                break;
            }
        }
    }
}
`</Code>
    <Description>**Version Used**: 15.3 Preview 1

🔗 Originally reported by [Thomas Castiglione](

**Steps to Reproduce**:

``

**Expected Behavior**:

* IDE0004 is not reported on the cast in `(float)1`
* Fixing all violations of IDE0004 does not remove the cast

**Actual Behavior**:

* The cast is removed when fixing IDE0004, resulting in a change in program behavior</Description>
  </Issue>
  <Issue>
    <IssueID>19986</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>kevinsun-dev</FixedById>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Text for CS1673 needs updating for local methods</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>04/06/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19986</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

public struct Foo
{
    public string name;
    
    public void PrintName()
    {
        PrintNameImpl();
        void PrintNameImpl()
        {
            Console.WriteLine(name);
        }
    }
}
`</Code>
    <Description>**Version Used**:  2.2.0.61624

**Steps to Reproduce**:

Code:

``

**Expected Behavior**:

Initially, I expected this to compile. I'm okay with it not compiling, but the error message should be accurate, explaining that there's a restriction around local methods.

**Actual Behavior**:

Error message, emphasis mine:

&gt; Test.cs(12,31): error CS1673: **Anonymous methods, lambda expressions, and query expressions** inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.

There's no anonymous method, lambda expression or query expression here. Unless there's some compatibility issue with updating the error message, it should just be updated to include local methods.</Description>
  </Issue>
  <Issue>
    <IssueID>19984</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No warning for unreachable code after throw expression</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>05/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>19984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Throw Expression</Name>
        <IssueID>19984</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

class X
{
    public static void Main ()
    {
        var x = true ? throw new NullReferenceException () : 1;
        x = 2; // This code is unreachable but no info about it
        return;
    }
}
`</Code>
    <Description>**Version Used**: 2.3.0.61719 (5fbdd5c5)

**Steps to Reproduce**:

``

**Expected Behavior**:

Proper warning about unreachable code

**Actual Behavior**:

No warning.
</Description>
  </Issue>
  <Issue>
    <IssueID>19983</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Previous version "references" of Microsoft.Net.Compilers are not removed from .csproj during a NuGet update</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>15/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19983</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is how my .csproj files look like:

``

As you can see, for every new "Microsoft.Net.Compilers" package, there is an `&lt;Error&gt;` node added but without removing the `&lt;Error&gt;` node of the previous installed version.

**My question:**

Can you please adjust your NuGet packages so that they remove the previous version from the .csproj files.</Description>
  </Issue>
  <Issue>
    <IssueID>19976</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Regression] "Refresh CodeLens Team Indicator" is always showing on the editor context menu</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>19976</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>"Refresh CodeLens Team Indicator" used to only show when right-click on the indicators themselves, they are now showing everywhere in the editor:

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>19975</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inserting a TAB after parenthesis completion moves the caret to outside of the parenthesis</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>19975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19975</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This one is a little hard to explain, but any TAB after the editor has completed my parenthesis results in the caret being moved to outside of the parenthesis instead of inserting a TAB.

This looks caused by the automatic parenthesis completion, because if I repro this where VS doesn't complete my parenthesis then it doesn't occur

Here's a video:

![tab](

1. Type: `[InlineData(1, `
2. Press `TAB`

**Expected:** Tab to be inserted
**Actual:** Caret moves beyond the the closed parenthesis

</Description>
  </Issue>
  <Issue>
    <IssueID>19973</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>XML docs for properties don't get their implicit "value" parameter added to intellisense</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>06/07/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19973</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Properties:

![image](

Methods:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>19971</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add a code fix/format to fix modifier ordering</Title>
    <CreatedDate>02/06/2017</CreatedDate>
    <ClosedDate>02/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19971</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19971</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19971</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Unlike VB, C# doesn't fix up the ordering of a modifier:

``

Above partial needs to go before class. I never remember the ordering, so we can we auto-fix this or give me a code fix so that I can just CTRL+. then ENTER to fix it immediately.</Description>
  </Issue>
  <Issue>
    <IssueID>19963</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CI test failure: Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+Shared.TestSorting</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>08/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>19963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>19963</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
   Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests+Shared.TestSorting
      System.NullReferenceException : Object reference not set to an instance of an object.
      Stack Trace:
           at Microsoft.CodeAnalysis.Editor.UnitTests.Workspaces.TestWorkspace.Dispose(Boolean finalize)
           at Microsoft.CodeAnalysis.Workspace.Dispose()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs(944,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.TestContext.Dispose()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.cs(608,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.&lt;TestGenerateFromSourceSymbolAsync&gt;d__16.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
        q:\roslyn\src\EditorFeatures\Test\CodeGeneration\CodeGenerationTests.Shared.cs(341,0): at Microsoft.CodeAnalysis.Editor.UnitTests.CodeGeneration.CodeGenerationTests.Shared.&lt;TestSorting&gt;d__0.MoveNext()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>19959</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ISymbol.GetAttributes() doesn't return the OutAttribute on the 'result' parameter in System.Int32.TryParse(s, result)</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19959</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp

        private static void TestOutAttribute()
        {
            var source =
@"Public Class Foo
    Public Sub ConvertIt()
        Dim start As String = ""1""
        Dim startId As Integer
        Integer.TryParse(start, startId)
    End Sub
End Class";
            var ws = new AdhocWorkspace();
            var vbProject = ws.AddProject("vbproject", LanguageNames.VisualBasic)
                .AddMetadataReference(MetadataReference.CreateFromFile(typeof(string).Assembly.Location))
                .AddMetadataReference(MetadataReference.CreateFromFile(typeof(Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute).Assembly.Location))
                .AddMetadataReference(MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location));
            var doc = vbProject.AddDocument("Foo.vb", source);
            var semantic = doc.GetSemanticModelAsync().GetAwaiter().GetResult();
            var root = doc.GetSyntaxRootAsync().GetAwaiter().GetResult();
            var invocation = root
                .DescendantNodes()
                .First(n =&gt; n.IsKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.InvocationExpression));
            var method = (IMethodSymbol)semantic.GetSymbolInfo(invocation).Symbol;
            var parameter = method.Parameters[1];
            var attributes = parameter.GetAttributes();
            Console.WriteLine(attributes.Length);
        }


**Expected Behavior**:
non-zero, as ILSpy shows the parameter has `[out]`

.method public hidebysig static 
	bool TryParse (
		string s,
		[out] int32&amp; result
	) cil managed 
`</Code>
    <Description>**Version Used**: 
2.0.0

**Steps to Reproduce**:

Run the following test code

``

**Actual Behavior**:
The program prints 0.</Description>
  </Issue>
  <Issue>
    <IssueID>19956</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Initialize field and property from parameter should be available even if the constructor does not have braces</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>21/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19956</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1. Create a class and try to type a new constructor like so:

``

2. With the caret within `text`, press &lt;kbd&gt;Ctrl+.&lt;/kbd&gt;

**Expected Behavior**: The "initialize field and property refactorings" should be available. Invoking them should generate braces for the constructor body.

**Actual Behavior**: Only "change signature" is available.</Description>
  </Issue>
  <Issue>
    <IssueID>19954</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation API for nameof expression</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>10/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>19954</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Proposed API:

``</Description>
  </Issue>
  <Issue>
    <IssueID>19953</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generate-default-constructor runs, and then goldbars on an enum.</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19953</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ran into this when i wanted to use 'move type to file' on an enum.  Looks like the generate-default-constructor refactoring runs, then fails because enums can't actually have constructors.  This is the callstack:

``

This should be an easy thing to fix.</Description>
  </Issue>
  <Issue>
    <IssueID>19951</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>19951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Importing C# symbols with a modreq but a missing IsReadOnly attribute should mark it as a use-site error</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>19951</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We need to add tests for this special case, and make sure that the compiler rejects it as a usesite error (if the attribute doesn't exist, then there is a problem with IL and this symbol should not be used). 

Testing should cover:

- method parameters
- method return types
- properties
- indexers parameters
- indexers return types
- delegates parameters
- delegates return types

Look for tests starting `InAttributeModReqIsConsumedInRefCustomModifiersPosition_IL` as a guide.

Found in #19658</Description>
  </Issue>
  <Issue>
    <IssueID>19950</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>19950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual C++ does not block as expected on Modreq(IsConst)</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>19950</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Visual C++ compiler understands Modreq(IsConst) and accepts it (on return types and parameters), but doesn't enforce read-only semantics on the signature.
We might need to re-consider using another type for the modifier.
Found in #19658</Description>
  </Issue>
  <Issue>
    <IssueID>19949</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IOperation support for arglist operator</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>03/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>19949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>19949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19949</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**TODO:** Add proposed API.</Description>
  </Issue>
  <Issue>
    <IssueID>19947</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>19947</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Completion list for explicit interface implementations includes invalid members</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19947</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19947</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19947</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>![image](

Only implementable members declared immediately in the named interface should be in the list, members from derived interfaces will cause an error.</Description>
  </Issue>
  <Issue>
    <IssueID>19946</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>TupleElementNamesAttribute receives extraneous null values for large tuple types</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19946</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19946</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

I was using the C# interactive window in Visual Studio 2017 Version 15.2 (26430.6) (`Microsoft (R) Roslyn C# Compiler version 2.2.0.61624`) when I first noticed the issue and did subsequent tests using `dotnet` version `2.0.0-preview1-005418`.

**Steps to Reproduce**:

1. Declare a large (more than seven elements) tuple literal field, property, or similar that would result in the `TupleElementNamesAttribute` being emitted
2. Inspect the value of the resulting `TupleElementNamesAttribute`'s `TransformNames` property

**Expected Behavior**:

Given `int elements` equal to the number of elements within the tuple type, the `TransformNames` property will contain `elements` non-null values.

**Actual Behavior**:

Given `int elements` equal to the number of elements within the tuple type, the `TransformNames` property will contain `elements` non-null values and `Enumerable.Range(1, elements / 7).Select(i =&gt; elements - 7 * i).Sum() + elements % 7` null values.</Description>
  </Issue>
  <Issue>
    <IssueID>19942</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[ComImport] broken when using .net native</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19942</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>19942</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Looks like the latest version of the .net native compiler has broken `[ComImport]` functionality when dealing with WinRT components.

I have followed the documentation detailing how to [play audio using Audio graphs]( in UWP and, since I am generating the samples procedurally, I need to use the following:

``

Interestingly, if I copy and paste the exact same code into the app project itself it does work.

You can reproduce the issue for yourself: the app is open source on [this GitHub repo](

I'm using the latest version (5.3.3) of the `Microsoft.NETCore.UniversalWindowsPlatform` nuget package as well.

Any way to work around this?</Description>
  </Issue>
  <Issue>
    <IssueID>19939</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>19939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Identical simple names and type names</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19939</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using static TestClass;

internal class Program
{
    public static void Main (string[] args)
    {
        Directions.Up (); // Fails even if there is using static and X.Y member has to be invocable
        TestClass.Directions.Up (); // Works
    }
}

public enum Directions
{
}

public static class TestClass
{
    public static int Directions;
}

public static class Extensions
{
    public static string Up (this int arg)
    {
        return "";
    }
}
`</Code>
    <Description>**Version Used**: 2.3.0.61719 (5fbdd5c5)

**Steps to Reproduce**:

``

**Expected Behavior**:

Same behaviour as in other cases where identical simple name and type-name resolution resolution is required.

**Actual Behavior**:

error CS0117: 'Directions' does not contain a definition for 'Up'

Inconsistent behaviour</Description>
  </Issue>
  <Issue>
    <IssueID>19931</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>19931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flaky test in Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.StateMachineTypeParameters</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>19931</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
MESSAGE:
System.Exception : Could not find the local named T. Available locals are .
+++++++++++++++++++
STACK TRACE:
Server stack trace: at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.LocalsWindow_InProc.GetEntryInternal(String entryName, Expressions expressions) at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.LocalsWindow_InProc.GetEntryInternal(String[] entryNames) at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.LocalsWindow_InProc.GetEntry(String[] entryNames) at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs) at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type) at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.LocalsWindow_InProc.GetEntry(String[] entryNames) at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.LocalsWindow_OutOfProc.Verifier.CheckEntry(String[] entryNames, String expectedType, String expectedValue) at Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicExpressionEvaluator.StateMachineTypeParameters() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicExpressionEvaluator.cs:line 138
`</Code>
    <Description>The failure is:

``

The screenshot of the failure shows:

![image](

Unfortunately I don't see much else to debug here. @ivanbasov any ideas what additional work we could do here to debug?

</Description>
  </Issue>
  <Issue>
    <IssueID>19930</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>19930</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ref returning "this" in a "ref readonly" struct method crashes.</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>14/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19930</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19930</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19930</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>19930</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We hit unreachable code in the error reporting.</Description>
  </Issue>
  <Issue>
    <IssueID>19929</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Core CLR test failed on CI: Microsoft.CodeAnalysis.CSharp.UnitTests.Declarations.SourcePlusMetadataTests.InterfaceName</Title>
    <CreatedDate>01/06/2017</CreatedDate>
    <ClosedDate>26/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19929</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-CoreCLR</Name>
        <IssueID>19929</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>19929</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>19929</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>19647</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>19647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Please eliminate some unused parameters in pattern-matching implementation</Title>
    <CreatedDate>19/05/2017</CreatedDate>
    <ClosedDate>19/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Design Debt</Name>
        <IssueID>19647</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  for a suggested code improvement to be done after 15.3.</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>19635</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crashes in UpdateReferenceAsync after 5-10 min of use when VSIX from a readonly-ref branch is installed</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19635</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After I have installed a recently built VSIX from readonly-ref branch, VS is nearly unusable.  I have about 5-10 min to do work before VS crashes with ThrowIfTrue.

To repro - 
1) install VSIX from 

2) open Roslyn.sln
3) wait for solution load. it varies, but could take a bit of time.
4) after solution loads wait some more time, 5-10 min, can try editing something, ... at some point it crashes.



There is nothing substantially new in the branch other than we merged recent changes from master. It could be that we have picked this problem as a result of the merge and similar problem exists in master as well.

=== The stack typically looks like this:

Application: devenv.exe
Framework Version: v4.0.30319
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.InvalidOperationException: If we computed a SymbolTreeInfo, then its checksum much match our checksum.
   at Roslyn.Utilities.Contract.ThrowIfTrue(Boolean condition, String message)
   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.&lt;UpdateReferenceAsync&gt;d__8.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.IncrementalCaches.SymbolTreeInfoIncrementalAnalyzerProvider.IncrementalAnalyzer.&lt;UpdateSymbolTreeInfoAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;&gt;c__DisplayClass31_1`1.&lt;&lt;RunAnalyzersAsync&gt;b__0&gt;d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.WorkCoordinator.IncrementalAnalyzerProcessor.&lt;GetOrDefaultAsync&gt;d__33`2.MoveNext()
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor+&lt;GetOrDefaultAsync&gt;d__33`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.Features, Version=2.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetOrDefaultAsync&gt;d__33`2&lt;System.__Canon,System.__Canon&gt; ByRef)
   at Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService+WorkCoordinator+IncrementalAnalyzerProcessor.GetOrDefaultAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon, System.Func`3&lt;System.

. . . .
</Description>
  </Issue>
  <Issue>
    <IssueID>19630</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>19630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation tree shape for empty string interpolation</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>19630</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See 

Test `InterpolatedStringExpression_Empty` generates an Interpolation String Expression Operation with no parts. It should probably have one part.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19630</IssueID>
        <PullRequestID>19590</PullRequestID>
        <Title>Add IOperation support for string interpolation</Title>
        <Description>Fixes #18300 

``</Description>
        <CreatedDate>17/05/2017</CreatedDate>
        <ClosedDate>24/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>19630</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>19630</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19630</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19630</IssueID>
        <PullRequestID>20928</PullRequestID>
        <Title>Represent empty string interpolation as one part with empty string li…</Title>
        <Description>…teral instead of zero parts

Fixes </Description>
        <CreatedDate>17/07/2017</CreatedDate>
        <ClosedDate>19/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>19630</IssueID>
            <PullRequestID>20928</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19630</IssueID>
            <PullRequestID>20928</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>20928</PullRequestID>
            <IssueID>19630</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>19629</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>19629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Live analyzers' check crashses.</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>19629</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>19628</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Reflection - Lexical Ordering</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19628</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi

I'd like to reopen this issue please:



It became closed I think over growing confusion as to whether this was a compiler or CLR issue.

Thx
</Description>
  </Issue>
  <Issue>
    <IssueID>19626</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>19626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>LastDesignTimeBuildSucceeded=false causes errors to shutdown for all but open files</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>04/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19626</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Project system set LastDesignTimeBuildSucceeded=false when designtime build fails to let the LS know that the information that LS has is incomplete. In that case we shutoff reporting errors because they are likely wrong but we don't do that for open files. 

After some internal discussion, this is the proposal:

If LastDesignTimeBuildSucceeded=false then

1.	We still get syntax errors from the compiler. (NB: these might not be entirely accurate since we might not have the right language version. I think that’s fine.)
2.	We don’t get semantic errors from the compiler. This means fixes driven from those are broken, but I think that’s fine. Consider “remove unused usings” – most definitely unsafe to invoke.
3.	We still run third party analyzers and code fixes triggered from them. We expect them to respect the flag if needed.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19626</IssueID>
        <PullRequestID>19637</PullRequestID>
        <Title>changed behavior of LastDesignTimeBuildSucceeded following suggestion…</Title>
        <Description>… on 

**Customer scenario**

User opened a solution which contains a project that contains design time build errors. due to that various parts of VS won't work as expected since the project itself is in unknown state. 

for example, "fix all" sometimes doesn't work. errors come and go as project changes its state as design time build get fixed by automatic nuget restore and etc.

this is to reduce confusion on such occasions.

same info is on the bug, but here are new user experience.

"If LastDesignTimeBuildSucceeded=false then

We still get syntax errors from the compiler. (NB: these might not be entirely accurate since we might not have the right language version. I think that’s fine.)
We don’t get semantic errors from the compiler. This means fixes driven from those are broken, but I think that’s fine. Consider “remove unused usings” – most definitely unsafe to invoke.
We still run third party analyzers and code fixes triggered from them. We expect them to respect the flag if needed."

**Bugs this fixes:**



**Workarounds, if any**

for some cases, user can fix all design time build. some other cases, there is no workaround.

**Risk**

I don't believe this will cause crash since code change is quite straight forward. but this do change existing behavior on this error case. 

**Performance impact**

before, since we dropped projects that have issues, user wouldn't see us doing anything for such broken projects, now we do same work for the broken projects as we have done to good projects. 

but it would be same cost as the same solution without any design time build issues.

**Is this a regression from a previous update?**

NO

**Root cause analysis:**

this is not fixing a code defect. rather we heard some customer feedback and changing our error handling behavior to meet their requests.

**How was the bug found?**

customer report. dogfooding feedback and etc.</Description>
        <CreatedDate>18/05/2017</CreatedDate>
        <ClosedDate>26/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>19626</IssueID>
            <PullRequestID>19637</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19626</IssueID>
            <PullRequestID>19637</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>19617</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>19617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# compiler should not crash on discards in expressions</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>27/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>19617</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  C# 7.0

**Steps to Reproduce**:

1. Try to compile the following:
``
which compiles fine.

**Actual Behavior**:

The compiler crashes with the following message:
"Microsoft.CSharp.Core.targets(71, 5): [MSB6006] "csc.exe" exited with code -2146232797."</Description>
  </Issue>
  <Issue>
    <IssueID>19616</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler error message CS1983 should describe that the type isn't TaskLike instead of saying it's not Task or Task&lt;T&gt;</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>20/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19616</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

C# 7

**Steps to Reproduce**:

``

**Expected Behavior**:

An error describing why `MyTaskLike` isn't being detected as returnable from an async method. E.g.

Couldn't find `MyTaskLike.CreateAsyncMethodBuilder`.

**Actual Behavior**:

The return type of an async method must be void, Task or Task&lt;T&gt;

PS: `ValueTask&lt;T&gt;` also works.</Description>
  </Issue>
  <Issue>
    <IssueID>19612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Select parameter in "Change signature" dialog based on cursor position.</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>29/08/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I would propose to preselect parameter in "Change signature" dialog based on cursor position in text editor. This would allow to faster remove/reorder parameters.</Description>
  </Issue>
  <Issue>
    <IssueID>19610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>19610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Update LangVersion for Roslyn VB projects to 15.3 or 15.5</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>11/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>19610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When I tried, the Ubuntu CI builds failed with: `error BC2014: the value '15.3' is invalid for option 'langversion' `
This suggests that the .NET Core build may not be using the package specified by `MicrosoftNetCompilersnetcoreVersion`.

FYI @agocke </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19610</IssueID>
        <PullRequestID>19576</PullRequestID>
        <Title>Update toolset compilers to 2.3.0-beta2-61716-09. Use LangVersion=7.1</Title>
        <Description>For the version, I picked the latest beta2 version from myget.
@jaredpar @jasonmalinowski @agocke @dotnet/roslyn-infrastructure for review.
Fixes 

@dotnet/roslyn-compiler @sharwell @CyrusNajmabadi  FYI</Description>
        <CreatedDate>17/05/2017</CreatedDate>
        <ClosedDate>23/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19610</IssueID>
            <PullRequestID>19576</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>19576</PullRequestID>
            <IssueID>19610</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>19610</IssueID>
        <PullRequestID>22812</PullRequestID>
        <Title>Update SDK and LangVersion for Roslyn to C# 7.2 and VB 15.5 for dogfooding</Title>
        <Description>Fixes 

- updated SDK package version to 2.1.1 (corresponds to VS 15.5)
- updated compiler package version and language versions (to C# 7.2 and VB 15.5)
- conditionally removed some assembly references (System.Configuration, System.Xml, ... which caused problems) as recommended by Wes
- disabled fallback packages (which caused problems on Linux, see  as recommended by Nick
- disambiguate System.Net.Http reference in RoslynPublish project (thx Jared)</Description>
        <CreatedDate>23/10/2017</CreatedDate>
        <ClosedDate>27/10/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>19610</IssueID>
            <PullRequestID>22812</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>19610</IssueID>
            <PullRequestID>22812</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>22812</PullRequestID>
            <IssueID>19610</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>19609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>19609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Array element assignment behaves differently depending if the RHS is awaited or not</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>09/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>19609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
test not awaited
hello
exception thrown

test awaited
exception thrown



csharp
 class Program
    {
        static int[] array = new int[5];

        static void Main(string[] args)
        {
            try
            {
                System.Console.WriteLine("test not awaited");
                TestNotAwaited().Wait();
            }
            catch
            {
                System.Console.WriteLine("exception thrown");
            }

            System.Console.WriteLine();

            try
            {
                System.Console.WriteLine("test awaited");
                TestAwaited().Wait();
            }
            catch
            {
                System.Console.WriteLine("exception thrown");
            }

        }

        static async Task TestNotAwaited()
        {
            array[6] = Foo1();
        }

        static async Task TestAwaited()
        {
            array[6] = await Foo();
        }

        static int Foo1()
        {
            System.Console.WriteLine("hello");
            return 123;
        }

        static async Task&lt;int&gt; Foo()
        {
            System.Console.WriteLine("hello");
            return 123;
        }
    }
`</Code>
    <Description>if the RHS is awaited we throw IndexOutOfRange _before_ evaluating the RHS, 
if the RHS is not awaited we throw IndexOutOfRange _after_ evaluating the RHS, 

The difference is subtle and I wonder if it is expected.

Repro:

The following outputs:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>19608</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash in WPF in VS</Title>
    <CreatedDate>18/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>19608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>19608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>19608</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>19604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OOM with memory mapped files</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Now</Name>
        <IssueID>19604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>19603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Clean up bound nodes modified for IOperation purpose</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>23/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have modified C# `BoundCall`,  `BoundObjectCreationExpression` and `BoundIndexerAccess` to provide necessary data for deriving argument operations. We should try to clean this up once moved to @heejaechang's operation factory model.</Description>
  </Issue>
  <Issue>
    <IssueID>19601</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>We should have a CodeStyle setting that recommends "is null" instead of "ReferenceEquals(..., null)"</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>24/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>19600</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggestion: analyzer for catching parameter name changes in overrides</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19600</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19600</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>19600</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

As we discussed today in LDM, the language allows it, but except for some rare cases (names which cannot be spoken in C#, from PE produced by other languages), users generally expect the names to match. 
Sounds like the job for an analyzer.

@CyrusNajmabadi FYI</Description>
  </Issue>
  <Issue>
    <IssueID>19597</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Building during project load seems to wait until the entire project loads before building.</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels />
    <Description>A common pattern for me is to open VS, go to a project, right-click, and say "build".  Previously, this would start the build for that project immediately.  Now it waits for my entire project to load.  As loading projects now takes minutes, this slows me down enormously.

This is a regression from RTM.</Description>
  </Issue>
  <Issue>
    <IssueID>19586</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SyntaxGenerator: support generating tuples</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>27/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19586</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I haven't found how to generate tuples using the SyntaxGenerator. Is this supported?</Description>
  </Issue>
  <Issue>
    <IssueID>19584</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ExtractMethodCodeRefactoringProvider crashes with System.InvalidOperationException : Unexpected false</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19584</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Highlight "evaluationRuleNames" below:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>19575</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Attempting to resolve a using on certain generic declarations are favoring their non-generic equivalents</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>21/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19575</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

**Expected:** To be only offered to resolve the generic version
**Actual:** Get both generic and non-generic:

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>19574</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Naming suggestions should pluralize for collection types</Title>
    <CreatedDate>17/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For example in the following, I'd want "GetEvaluationHandlers":

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>19572</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Guidelines annoyingly "move" with the caret modifying a type declaration</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>27/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19572</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Guidelines are moving with the caret when modifying a type declaration, which is a little annoying:

![lines](</Description>
  </Issue>
  <Issue>
    <IssueID>19570</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use larger memory mapped files for temporary storage</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>19570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.2

We can reduce the number of `MemoryMappedFile` instances getting disposed (a time-consuming process) by creating larger instances and using each memory mapped file as the storage for multiple temporary files. This will improve upon the performance gains already realized in #19522.

Currently files are created to match the specific size needed for each file in the solution. For an initial experiment, it might be reasonable to:

* Create files that are 1MiB in size, and use bump pointer allocation to place files within it
* When a file doesn't fit in the remaining space at the end of the last memory mapped file, create a new memory mapped file where it goes at the beginning
* Any file larger than 256KiB is placed in its own memory mapped file

⚠️ Currently these buffers are shared with the OOP workers. The serialization assumes that each temporary file is placed at offset 0 within the target memory mapped file. This will need to be updated to account for multiple temporary storage buffers within a single memory mapped file.</Description>
  </Issue>
  <Issue>
    <IssueID>19568</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InvalidProgramException caused by when (false) exception filter</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19568</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;

class C
{
    public static void Main()
    {
        try
        {
            throw new Exception();
        }
        catch when (false)
        {
        }
    }
}


**Expected Behavior**: Program crashes due to unhandled `Exception`.

**Actual Behavior**: Program crashes due to `InvalidProgramException`:

&gt; InvalidProgramException: Common Language Runtime detected an invalid program.

Comparing the IL for the above program and one with `when (true)`, which doesn't throw `InvalidProgramException`, shows:

`when (false)`:

cil
.try
{
  IL_0000: newobj       instance void [mscorlib]System.Exception::.ctor()
  IL_0005: throw        
}
filter
{
  IL_0006: pop          
  IL_0007: ldc.i4.0     
  IL_0008: ldc.i4.0     
  IL_0009: cgt.un       
  IL_000b: endfilter    
}
{
  IL_000d: pop          
  IL_000e: leave.s      IL_0010
}


`when (true)`:

cil
.try
{
  IL_0000: newobj       instance void [mscorlib]System.Exception::.ctor()
  IL_0005: throw        
}
filter
{
  IL_0006: pop          
  IL_0007: ldc.i4.1     
  IL_0008: ldc.i4.0     
  IL_0009: cgt.un       
  IL_000b: endfilter    
}
{
  IL_000d: pop          
  IL_000e: leave.s      IL_0010
}
IL_0010: ret    
`</Code>
    <Description>**Version Used**: master

**Steps to Reproduce**:

[Try to run the following code](

``

Notice the added `ret` at the end. I think the missing `ret` could be the cause of this issue.

This is probably not something one would write in production code, so this issue might not be that important. But such code might be useful to easily "comment out" a `catch`.
</Description>
  </Issue>
  <Issue>
    <IssueID>19557</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type inference issue?</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19557</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    static Func&lt;B, C&gt; Partial&lt;A, B, C&gt;(Func&lt;A, B, C&gt; f, A a) =&gt; b =&gt; f(a, b);

And a simple function to add two ints.
c#
    static int Add(int x, int y) =&gt; x + y;

And then try to partially apply by passing `Add` and `1` to `Partial`.  
c#
    Func&lt;int, int&gt; Add1 = Partial(Add, 1);

I get:

    The type arguments for method 'Partial&lt;A, B, C&gt;(Func&lt;A, B, C&gt;, A)' cannot be inferred from 
    the usage. Try specifying the type arguments explicitly.
`
This is odd to me, because the types for `Add` are known, the type for the constant `int` is known, the expected return type is known.  Why can't the `A`, `B`, and `C` of `Partial` be inferred?

If I add type arguments it works as expected:
c#
    Func&lt;int, int&gt; Add1 = Partial&lt;int, int, int&gt;(Add, 1);
`</Code>
    <Description>.NET Compiler Platform: 2.0.0.6140902

I have been running into this issue for a while now, and I am wondering whether this is just a bug that nobody has noticed, or a missing feature of Roslyn (to which I need to raise a proposal in csharplang).

First if I create a function that does partial application
``

I _feel_ like this used to work, because I wrote a ton of overrloads for doing [currying]( and [partial-application]( in my [functional programming library]( perhaps I am mistaken, but I don't remember it being so awkward to use.</Description>
  </Issue>
  <Issue>
    <IssueID>19556</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>19556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Master Unit Test Failures</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>19556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigating</Name>
        <IssueID>19556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
`Master` at [commit](

**Steps` to Reproduce**:
In VS Dev Cmd Prompt run the following commands
1. Restore (No Issues)
2. Build (No Issues)
3. Test (Lots of Unit Test Failures)

**Expected Behavior**:
No Test Failures

**Actual Behavior**:
See [Gist](
[runtests.log.txt](
[NullReferenceException is thrown on this line.](
[NullReferenceException is thrown on this line.](
[Assetion Failure](
[NullReferenceException](</Description>
  </Issue>
  <Issue>
    <IssueID>19555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2017 crashed on rename suggestion</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 
Version 15.2 (26430.6) Release
VisualStudio.15.Release/15.2.0+26430.6

**Steps to Reproduce**:

1. Source code:
``
2. set cursor before "y" in "out var y", remove one symbol "y" and type symbol "_" (single underscore)
3. wait until rename marker appears and press "Ctrl + ."
4. Rename popup menu appears suggestion to rename "y" to "_" and VS crashes in several seconds

**Expected Behavior**:
No crash

**Actual Behavior**:
VS 2017 crashes

</Description>
  </Issue>
  <Issue>
    <IssueID>19554</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>19554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tuple deconstruction crashes VS 2017 ide</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>17/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>19554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
{
  "dependencies": {
 ...
    "Microsoft.NETCore.UniversalWindowsPlatform": "5.2.2",
    "System.ValueTuple": "4.3.0",  
},
  "frameworks": {
    "uap10.0": {}
  },
  "runtimes": {
    "win10-arm": {},
    "win10-arm-aot": {},
    "win10-x86": {},
    "win10-x86-aot": {},
    "win10-x64": {},
    "win10-x64-aot": {}
  }
}


**Steps to Reproduce**:


                (DrivingGuideProgressSection[], DrivingGuideProgressSection) reducedTuple = sections.Skip(1)
                    .Aggregate((new DrivingGuideProgressSection[0], sections[0]),
                        (tuple, section) =&gt;
                        {
                            (var firstSecs, var lastSec) = tuple;
                            return lastSec.JamType == section.JamType
                                ? (firstSecs, lastSec.AddLength(section.Length))
                                : (firstSecs.Concat(new[] { lastSec }).ToArray(), section);
                        });
`</Code>
    <Description>**Version Used**: 
VS 2017 (15.2 , 26430.6)

``
When I'm wrinting
` (var firstSecs, var lastSec) = tuple;`
IDE crashes


**Expected Behavior**:

Don't crash obiviously

**Actual Behavior**:

Crash !</Description>
  </Issue>
  <Issue>
    <IssueID>19553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>19553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException in WorkspaceMetadataFileReferenceResolver.Equals(WorkspaceMetadataFileReferenceResolver)</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>01/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;

namespace WorkspaceMetadataFileReferenceResolverIssue
{
    class Program
    {
        static void Main(string[] args)
        {
            var workspace = MSBuildWorkspace.Create();
            var project = workspace.OpenProjectAsync(args[0]).Result;
            var compilation = project.GetCompilationAsync().Result;
            var options = compilation.Options.WithMetadataReferenceResolver(new ReferenceResolver());
            compilation = compilation.WithOptions(options);
        }
    }

    class ReferenceResolver : MetadataReferenceResolver
    {
        public override bool Equals(object other)
        {
            throw new NotImplementedException();
        }

        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }

        public override ImmutableArray&lt;PortableExecutableReference&gt; ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties)
        {
            throw new NotImplementedException();
        }
    }
}


Run the sample application passing a full path to csproj.

**Expected Behavior**:
Sample application should not throw an exception.

**Actual Behavior**:
Sample application throws an exception in line `compilation = compilation.WithOptions(options);`:


Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Host.WorkspaceMetadataFileReferenceResolver.Equals(WorkspaceMetadataFileReferenceResolver other)
   at Microsoft.CodeAnalysis.Host.WorkspaceMetadataFileReferenceResolver.Equals(Object other)
   at System.Object.Equals(Object objA, Object objB)
   at Microsoft.CodeAnalysis.CompilationOptions.CanReuseCompilationReferenceManager(CompilationOptions other)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.WithOptions(CSharpCompilationOptions options)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CommonWithOptions(CompilationOptions options)
   at Microsoft.CodeAnalysis.Compilation.WithOptions(CompilationOptions options)
   at WorkspaceMetadataFileReferenceResolverIssue.Program.Main(String[] args) in D:\Works
paceMetadataFileReferenceResolverIssue\Program.cs:line 16
`</Code>
    <Description>**Version Used**: 
 Microsoft.CodeAnalysis.Workspaces 2.1.0.61520

**Steps to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>19552</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE adds @ to my new keyword</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>16/05/2017</ClosedDate>
    <IssueLabels />
    <Code>cs
object isnot;
if (isnot isnot string) ...
`</Code>
    <Description>I have added `isnot` keyword and made changes to the classification. But when typing this code:
``
after the opening paren' IntelliSense suggest to write `@isnot`, though identifier `isnot` without the `@` is fine. I cannot the heck find out where this comes from. Can anybody give me a hint?</Description>
  </Issue>
  <Issue>
    <IssueID>19547</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>19547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ProjectExternalErrorReporter can't be used by F# </Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>26/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>19547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>#### ProjectExternalErrorReporter can't be used by F# because it requires a CompilerDiagnosticsAnalyzer (and we don't have one of those)

In the Visual F# IDE Tools, we are trying to use Roslyn to report both document (intellisense) and compiler (build) error messages.    We already do the former.  If we use Roslyn for both, we expect we will solve our [error message unification regressions](

For the document errors we already use a [DocumentDiagnosticAnalyzer](  For the build-time error messages, our plan was to use the instance of [ProjectExternalErrorReporter we create]( and [pass to CreateProjectContext](  This seems like a reasonable expectation of how things should work.

However,  AFAICS using this ``ProjectExternalErrorReporter`` ends up trigggering code that goes down [this path which does a FailFast.OnFatalException in DiagnosticIncrementalAnalyzern](  because the Visual F# Tools don't implement a CompilerDiagnosticsAnalyzer object. 

Possible solutions are

1. Visual F# Tools just don't try to use ``ProjectExternalErrorReporter`` for this purpose

2. Roslyn's DiagnosticIncrementalAnalyzer is adjusted so it doesn't require the language to have a CompilerDiagnosticsAnalyzer 

3. Someone says the magic recipe to create/register/access an appropriate CompilerDiagnosticsAnalyzer and pass it into roslyn

4. Roslyn makes a change to make it possible for F# to implement a CompilerDiagnosticsAnalyzer, just like C# and VB do

**Version Used**: See 

**Steps to Reproduce**: See  

1.  Build the Visual F# Tools branch mentioned in  
1. open VisualFSharp.sln 
1. set VisualFsharpOpernSource as the startup project
1. Launch devenv.exe using F5
2.  In the experimental instance of VS, open a sample F# project like the ones under tests\projects\misc
3.  Make sure the project has an error in it, e.g. a syntax error
4. Compiler the project in the experimental instance

**Expected Behavior**:

Doesn't hit a ``FailFast.OnFatalException`` in Roslyn

**Actual Behavior**:

Hits  a ``FailFast.OnFatalException`` in Roslyn 

</Description>
  </Issue>
  <Issue>
    <IssueID>19542</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>UriFormatException in GetHelpLink</Title>
    <CreatedDate>16/05/2017</CreatedDate>
    <ClosedDate>28/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19542</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 26510.0

**Steps to Reproduce**:
Just put any non-BMP character anywhere inappropriately -  e.g.
``

**Expected Behavior**:
No message boxes, i.e. ~~either~~ encode URL first ~~or tolerate UriFormatExceptions~~ (there are likely more ways to get it besides non-BMP chars).
</Description>
  </Issue>
  <Issue>
    <IssueID>19386</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to check if a Class or a Method is a Partial Class or Partial Method</Title>
    <CreatedDate>10/05/2017</CreatedDate>
    <ClosedDate>11/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>19386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>19386</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2.0.1

**Steps to Reproduce**:

1. For any Partial Class/Method, the corresponding **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node data does not give any information if the given class is Partial class/method. 
2. We dont get this information even from any property of **INamedTypeSymbol** for Class or **IMethodSymbol** for Method.
3. We can get this information only using **node.Modifiers.Any(m =&gt; m.IsKind(SyntaxKind.PartialKeyword))**.

**Expected Behavior**:
There has to be some property in **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node or in **INamedTypeSymbol** for Class or **IMethodSymbol** for Method which gives us the information that the node is a partial type. 

**Actual Behavior**:
There isnt any property currently  in **ClassDeclarationSyntax** node or **MethodDeclarationSyntax** node or in **INamedTypeSymbol** for Class or **IMethodSymbol** for Method which gives us the information that the node is a partial type. </Description>
  </Issue>
  <Issue>
    <IssueID>19383</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>It looks like LocalRewriter.BuildParamsArray doesn't handle a case of bad or missing int type.</Title>
    <CreatedDate>10/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19383</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>19382</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>19382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>A combination of discard with arglist crashes compiler</Title>
    <CreatedDate>10/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19382</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void DiscardAndArgList()
        {
            var text = @"
using System;
public class C
{
    static void Main()
    {
        M(out _, __arglist(2, 3, true));
    }
    
    static void M(out int x, __arglist)
    {    
        x = 0;
        DumpArgs(new ArgIterator(__arglist));
    }

    static void DumpArgs(ArgIterator args)
    {
        while(args.GetRemainingCount() &gt; 0)
        {
            TypedReference tr = args.GetNextArg();
            object arg = TypedReference.ToObject(tr);
            Console.Write(arg);
        }
    }
}";
            var compilation = CreateStandardCompilation(text, options: TestOptions.ReleaseExe, parseOptions: TestOptions.Regular);

            compilation.VerifyDiagnostics(
                );

            CompileAndVerify(compilation, expectedOutput: "23True");
        }
`</Code>
    <Description>``

{"Unexpected value 'DiscardExpression' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'"}
&gt;	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used) Line 314	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used) Line 56	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitAddressOfTempClone(Microsoft.CodeAnalysis.CSharp.BoundExpression expression) Line 194	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitAddress(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.AddressKind addressKind) Line 117	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitArgument(Microsoft.CodeAnalysis.CSharp.BoundExpression argument, Microsoft.CodeAnalysis.RefKind refKind) Line 584	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitArguments(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundExpression&gt; arguments, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol&gt; parameters) Line 759	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitCallExpression(Microsoft.CodeAnalysis.CSharp.BoundCall call, Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.UseKind useKind) Line 1488	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used) Line 92	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used) Line 72	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression expression, bool used) Line 60	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(Microsoft.CodeAnalysis.CSharp.BoundStatement statement) Line 40	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions(Microsoft.CodeAnalysis.CSharp.BoundStatement statement) Line 99	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint node) Line 342	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(Microsoft.CodeAnalysis.CSharp.BoundStatement statement) Line 32	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; statements) Line 639	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock block) Line 616	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(Microsoft.CodeAnalysis.CSharp.BoundStatement statement) Line 24	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementList(Microsoft.CodeAnalysis.CSharp.BoundStatementList list) Line 107	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(Microsoft.CodeAnalysis.CSharp.BoundStatement statement) Line 44	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl() Line 248	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate() Line 183	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, int methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement block, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt; lambdaDebugInfo, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt; closureDebugInfo, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator variableSlotAllocatorOpt, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain importChainOpt, bool emittingPdb, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; dynamicAnalysisSpans) Line 1339	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol methodSymbol, int methodOrdinal, ref Microsoft.CodeAnalysis.CSharp.Binder.ProcessedFieldInitializers processedInitializers, Microsoft.CodeAnalysis.CSharp.SynthesizedSubmissionFields previousSubmissionFields, Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState) Line 1109	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol containingType) Line 434	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedTypeAsTask.AnonymousMethod__0() Line 324	C#

</Description>
  </Issue>
  <Issue>
    <IssueID>19380</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>GoToAll for Generics doesn't find results, e.g. "Query&lt;T" does not find "Query&lt;T&gt;"</Title>
    <CreatedDate>10/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19380</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.1 (26403.7)

**Steps to Reproduce**:

1. Open Dapper Solution ([repo link](
2. Edit.GoToAll (I have it as `Ctrl+T`)
3. Type `Query&lt;`
4. Observe results
5. Add `T`

**Expected Behavior**:
`Query&lt;T&gt;` is found as a result, which was clearly in the list in step 4, pictured here:

&lt;img width="478" alt="screen shot 2017-05-08 at 19 23 32" src="

**Actual Behavior**:
`Query&lt;T&gt;` is missing from the list entirely, results pictured here:

&lt;img width="474" alt="screen shot 2017-05-08 at 19 23 39" src="</Description>
  </Issue>
  <Issue>
    <IssueID>19377</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"use throw expression" doesn't check that the "if check" surrounding the 'throw' has nothing but the 'throw' in it.</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>11/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19377</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported by David Sterling.  </Description>
  </Issue>
  <Issue>
    <IssueID>19376</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Go to All and Find All References deduplication improvements</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>10/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>&lt;sup&gt;Moving the conversation @NickCraver started [from Twitter]( at @davkean's request.&lt;/sup&gt;

VS2017's Go to All and Find All References duplicates items for each platform or framework you're building against. If you build for six platforms, every member shows up six times but takes you to exactly the same point in the same document. It's pure noise which limits what else you can see in the list.

For example, using @NickCraver's screenshots:

&lt;img src=" width="50%"&gt;&lt;img src=" width="50%"&gt;

The items should be grouped by destination. The information that is unique to each entry (the framework) should be shown in small print underneath. Only one thing should be clickable for all platforms, unless there are signatures in different physical files or positions due to csproj conditional file includes or `#if` preprocessor. One navigation destination, one entry.

This would be amazing (pardon my MS Paint):

&lt;img src=" width="50%"&gt;</Description>
  </Issue>
  <Issue>
    <IssueID>19375</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>19375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unexpected IAssignmentExpression in an object initializer</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>19375</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See </Description>
  </Issue>
  <Issue>
    <IssueID>19373</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>The .editorconfig setting dotnet_style_qualification_for_method = true does not appear to work.</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19373</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Roslyn Language Services 2.1.0.6152004 / Latest Visual Studio 2017

**Steps to Reproduce**:

1. In the latest version of Visual Studio 2017, open a solution with an .editorconfig file (I based my file on the Roslyn .editorconfig file, as seen here:  ).
2. Set the following property in the .editorconfig file: `dotnet_style_qualification_for_method = true:error`
3. Open a .cs file in the project that has at least one method call.
4. Ensure there is at least one method call in the file that is not prefixed with `this.`

**Expected Behavior**:
A compiler error is shown in the errors window in Visual Studio indicating that the method call must be prefixed with `this.`.

**Actual Behavior**:
No compiler errors appear.

**Notes**
When I do the opposite test (setting `dotnet_style_qualification_for_method = false:error` and ensure that a method call is prefixed with `this.`), I get a compiler error as I would expect. `dotnet_style_qualification_for_field` and `dotnet_style_qualification_for_property` seem to work fine for `true:error`, showing an error as I would expect.</Description>
  </Issue>
  <Issue>
    <IssueID>19372</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Local Functions do not support attributes</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>04/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19372</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>19372</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19372</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19372</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19372</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public int Fibonacci(int x)
{
    if (x &lt; 0) throw new ArgumentException("Less negativity please!", nameof(x));
    return Fib(x).current;
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    (int current, int previous) Fib(int i)
    {
        if (i == 0) return (1, 0);
        var (p, pp) = Fib(i - 1);
        return (p + pp, p);
    }
}
`</Code>
    <Description>**Version Used**: 
C# 7 on Visual Studio 2017

**Steps to Reproduce**:

``

**Expected Behavior**:
Signal the JIT to inline the function for performance. (I know that recursive functions will not inline, I just copied the function from the blog  post detailing local functions and stamped the attribute in there).

**Actual Behavior**:
Does not compile

cc @Pilchie </Description>
  </Issue>
  <Issue>
    <IssueID>19371</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>19371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>API replacement for named arguments in IOperation</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>12/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>19371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Semantics;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            const string source = @"
                class C
                {
                    void M(int i, string s = null)
                    {
                    }

                    void N()
                    {
                        M(3, s: string.Empty);
                    }
                }";

            Document document = new AdhocWorkspace()
                .AddProject("TestProject", LanguageNames.CSharp)
                .AddMetadataReferences(new[]
                {
                    MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                    MetadataReference.CreateFromFile(typeof(ValueTuple).Assembly.Location),
                    MetadataReference.CreateFromFile(typeof(System.IO.FileSystemInfo).Assembly.Location),
                    MetadataReference.CreateFromFile(typeof(System.Reflection.Metadata.ArrayShape).Assembly.Location)
                })
                .WithCompilationOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
                .AddDocument("Source.cs", source)
                .Project
                .WithParseOptions(new CSharpParseOptions().WithFeatures(new[]
                {
                    new KeyValuePair&lt;string, string&gt;("IOperation", "true")
                }))
                .Documents.First();

            SemanticModel model = document.GetSemanticModelAsync().Result;

            if (model.Compilation.GetDiagnostics().Any())
            {
                throw new Exception(string.Join(Environment.NewLine, model.Compilation.GetDiagnostics()));
            }

            var typeSymbol = model.Compilation.GetTypeByMetadataName("C");
            var methodSymbol = typeSymbol.GetMembers("N").OfType&lt;IMethodSymbol&gt;().Single();
            var methodSyntax = (MethodDeclarationSyntax) methodSymbol.DeclaringSyntaxReferences.First().GetSyntax();

            var bodyOperation = (IBlockStatement) model.GetOperation(methodSyntax.Body);
            var statement = (IExpressionStatement) bodyOperation.Statements.First();
            var invocation = (IInvocationExpression) statement.Expression;
            var arg0 = (IArgument) invocation.ArgumentsInEvaluationOrder.First();
            var arg1 = (IArgument) invocation.ArgumentsInEvaluationOrder.Skip(1).First();

            var syn0 = (LiteralExpressionSyntax) arg0.Syntax;
            var syn1 = (MemberAccessExpressionSyntax) arg1.Syntax;

            Console.WriteLine("0: " + syn0.ToFullString());
            Console.WriteLine("1: " + syn1.ToFullString());
        }
    }
}


which prints:

0: 3
1: string.Empty
`</Code>
    <Description>**Version Used**: 
master branch

As discussed in 

&gt; It is not obvious what value do we get from distinguishing between Positional and Named arguments. I believe Analyzers will be more interested in the order, in which arguments are evaluated (ArgumentsInEvaluationOrder solves that). Knowing whether the argument was named doesn't look that important and can always be discovered from syntax.

Because I have an [existing analyzer]( that depends on `ArgumentKind.Named`, I tried to use syntax instead. However I failed to get that working.

Please consider the next program:
``

What would be the correct way to determine if an argument is named? If non-trivial, it would be helpful to me when I would use a boolean property `IArgument.IsNamed`.</Description>
  </Issue>
  <Issue>
    <IssueID>19369</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Convert base / Insert digit separators refactorings are not available when the caret is at the end of a numeric literal</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19369</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest magma-hot bits

**Steps to Reproduce**:

``

1. Place editor caret between `2` and `;`
2. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;

**Expected Behavior**: 'Convert base' and 'Insert digit separators' refactorings should be available.

**Actual Behavior**: They're not.</Description>
  </Issue>
  <Issue>
    <IssueID>19368</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>19368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Handle special edge case in simplification</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>19368</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
class A
{
  static void Del() { }
  class B
  {
    delegate void Del();
    void Boo()
    {
      Del d = new Del(A.Del); 
      A.Del(); // Attempt to simplify this
    }
  }
}
`</Code>
    <Description>**Version Used**: Master with #19258 merged

A test already exists for this case, but was disabled as part of #19258. This behavior impacts both automatic simplification scenarios (running the simplifier as part of code formatting) as well as the simplication cases detected through an analyzer.

⚠️ When working on a correction to this, be careful not to regress on the performance benefits provided by #19258.

**Steps to Reproduce**:

1. Defined a nested type `B` which contains a nested type of the same name as a static method of the containing type `A`
2. Within a method of `B`, invoke the static member of `A` through a qualified reference
3. Attempt to use the IDE diagnostics to simplify the reference to no longer be qualified

Example:

``

**Expected Behavior**:

The invocation should be simplified to just `Del()`.

**Actual Behavior**:

The invocation remains as `A.Del()`.</Description>
  </Issue>
  <Issue>
    <IssueID>19367</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>re-enable Option Strict in the props files</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>11/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>19367</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>related: 
</Description>
  </Issue>
  <Issue>
    <IssueID>19364</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>19364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 


``


**Steps to Reproduce**:

1. Just try to use `CSharpScript.RunAsync` with code that contains IEnumerable

**Expected Behavior**:

**IT WORKS! PROFIT**

**Actual Behavior**:

`Get multi datasource encountered an error Osprey.Pro.Common.OspreyException`1[Osprey.Pro.Api.ApiExceptions]: Get multi datasource encountered an error ---&gt; Osprey.Pro.Common.OspreyException`1[Osprey.Pro.Common.CommonExceptions]: Script execution with source encountered an error ---&gt; Microsoft.CodeAnalysis.Scripting.CompilationErrorException: (32,31): error CS0012: The type 'IEnumerable&lt;&gt;' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'`


I try to add the reference like so:

`assemblies.Add(typeof(IEnumerable&lt;&gt;).Assembly);`

But then I get this:

**mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089**

instead of this:

**System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a**

How do I add this assembly in mono?</Description>
  </Issue>
  <Issue>
    <IssueID>19359</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Newline Formatting Options for unsafe Block</Title>
    <CreatedDate>09/05/2017</CreatedDate>
    <ClosedDate>09/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>19359</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
static class Program {
    static void Main() {
        unsafe {
        }
    }
}


**Expected Behavior**:

The `unsafe` block to have the open brace on the same line as the keyword:

cs
unsafe {
}


**Actual Behavior**:

A new line is inserted between the `unsafe` keyword and the opening brace:

cs
unsafe
{
}
`</Code>
    <Description>**Version Used**: 

Visual Studio 15.1 (26403.7)

**Steps to Reproduce**:

1. Uncheck all new line options for braces
1. Add the following code:

``

There isn't a section specific for `unsafe` blocks, but I would think that the formatting would be covered by the setting for "control blocks".  This particular setting does apply to `checked` and `unchecked` blocks.  I have not exhaustively tested other scenarios.</Description>
  </Issue>
  <Issue>
    <IssueID>19355</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>.editorconfig discovery isn't correctly ordered in some cases</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>08/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19355</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now the build task isn't returning the correct ordering if you had a directory structure roughly like:

.editorconfig
a\\.editorconfig
b\\.editorconfig
</Description>
  </Issue>
  <Issue>
    <IssueID>19354</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>NullReference during rebuild while reporting an error</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19354</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @jviau on May 5, 2017 19:16_I was rebuilding a my solution and I received an NFE report. This was a one-off error and I am unable to reproduce it since. Opening on this repo since `LanguageServiceErrorListProvider` is owned by you. If you find this is a CPS issue please send back to me.

Solution:
- .netcore app targeting .netstandard1.5;net45
- .netcore xunit test app targeting .netcoreapp1.0;net452

``_Copied from original issue: dotnet/project-system#2130_</Description>
  </Issue>
  <Issue>
    <IssueID>19352</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>PdbReader crashes on simple assembly from .NET Standard 1.0 project with tuples</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>08/05/2017</ClosedDate>
    <IssueLabels />
    <Description>ILSpy crashes with this error:
``

Note that if I delete the PDB file, ILSpy can load the assembly just fine.

Here are the binaries causing the problem (dll and pdb):
[repro.zip](

You can also repro with those steps:
1. Create a new solution with a .NET Standard 1.0 console project
2. Add latest ValueTuple package from myget (
3. Put a simple method (`(int, int) M() { throw null; }`)
4. Build the project
5. Open the resulting assembly in ILSpy

FYI @tmat 
</Description>
  </Issue>
  <Issue>
    <IssueID>19351</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>19351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Creating C# WPF apps crash VS with ArgumentNullException</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>12/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>19351</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VSUML 26507.1
**Steps to Reproduce**:
1. Install VS with .NET Desktop Development
2. Create a new C# WPF App

**Expected Behavior**:
Project creates successfully and you are able to work on it.
**Actual Behavior**:
Project creates followed by crashing VS.

Exception:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>19350</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>19350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Integration test CSharpCodeActions.FastDoubleInvoke failed</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>19350</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
 Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.FastDoubleInvoke
      System.InvalidOperationException : No expanded light bulb session found after View.ShowSmartTag.  Buffer content type=CSharp
      Stack Trace:
        
        Server stack trace: 
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.GetLightBulbActions(ILightBulbBroker broker, IWpfTextView view)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass19_0.&lt;GetLightBulbApplicationAction&gt;b__0(IWpfTextView view)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.&lt;&gt;c__DisplayClass11_0.&lt;GetExecuteOnActionViewCallback&gt;b__0()
           at System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
           at System.Windows.Threading.DispatcherOperation.InvokeImpl()
        --- End of stack trace from previous location where exception was thrown ---
           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
           at System.Windows.Threading.DispatcherOperation.Wait(TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherOperation operation, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke(Action callback, DispatcherPriority priority, CancellationToken cancellationToken, TimeSpan timeout)
           at System.Windows.Threading.Dispatcher.Invoke(Action callback)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InProcComponent.InvokeOnUIThread(Action action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ExecuteOnActiveView(Action`1 action)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ApplyLightBulbAction(String actionName, Nullable`1 fixAllScope, Boolean blockUntilComplete)
           at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
           at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)
        
        Exception rethrown at [0]: 
           at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
           at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.TextViewWindow_InProc.ApplyLightBulbAction(String actionName, Nullable`1 fixAllScope, Boolean blockUntilComplete)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.ApplyLightBulbAction(String action, Nullable`1 fixAllScope, Boolean blockUntilComplete)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.Verifier`1.CodeActions(IEnumerable`1 expectedItems, String applyFix, Boolean verifyNotShowing, Boolean ensureExpectedItemsAreOrdered, Nullable`1 fixAllScope, Boolean blockUntilComplete)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.OutOfProcess.TextViewWindow_OutOfProc.Verifier`1.CodeAction(String expectedItem, Boolean applyFix, Boolean verifyNotShowing, Boolean ensureExpectedItemsAreOrdered, Nullable`1 fixAllScope, Boolean blockUntilComplete)
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpCodeActions.cs(80,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.FastDoubleInvoke()
`</Code>
    <Description>


``</Description>
  </Issue>
  <Issue>
    <IssueID>19347</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add configuration option for diagnostic delays in editor</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19347</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is from this comment: 

F# is hurt a bit by artificial delays in squiggles in the editor.  Because we have type inference, people rely on instant feedback on if something will work via squiggles (or lack thereof).  Because type inference already takes quite a bit of time, any additional delay gives the appearance the editor is unresponsive in certain scenarios for F#.

A configuration flag to opt out of these delays would be great.  We would configure this in our editor layer.</Description>
  </Issue>
  <Issue>
    <IssueID>19346</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Differences in class instantiation release/debug VS 2012 vs. VS 2015/2017 </Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>19346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19346</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2012, 2015, 2017 (exact versions are being displayed in the video).

**Steps to Reproduce**:
I have recorded a [video clearly showing the problem]( Note that this refers to the library DateParser, whose code is public and can be found [here]( (it shares the same solution with other libraries; you can just download everything). 

In a nutshell, the problem is that some public variables of a class, which are used as a way to call a function where various required actions are performed, aren't being hit at class instantiation under specific conditions (newer VS and release modes).

**Expected Behavior**:
Debug /release modes behaving identically (either error or no error). All the VS versions having the same (even faulty) behaviour.

**Actual Behavior**:
VS 2012 behaves fine (both release/debug don't trigger any error). VS 2015/2017 work fine in debug mode, but trigger an error in release mode.

CLARIFICATION: although I do consider that this is a faulty behaviour for various reasons (e.g., differences debug/release and between VS versions), I am not interested in actively participating in a discussion about all the associated issues like the reasons for it to be there, alternative approaches (for anyone interested: I will modify the code such that these conditions will be plainly avoided) or the numerous difficulties associated with performing an eventual modification. The only motivation of this issue is to let you know about what I think that might be of interest to you; am also providing more than enough information, that's why I don't think that my participation is strictly required.  </Description>
  </Issue>
  <Issue>
    <IssueID>19344</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>19344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Semantic break introduced by VBOperationFactory refactoring</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>19344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19344</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See code in master: 

The operation kind depends on the length of the arguments in master, but is not so in features/operation branch: </Description>
  </Issue>
  <Issue>
    <IssueID>19343</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>19343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Debugger skips some lines in C# web project on localhost</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>19343</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2017 Preview 2 Version 15.2 26430.1-Preview.
This also happened to me in the 2017 community regular edition,

**Steps to Reproduce**:
Have no idea, very random, In order to fix this I need to rename some variables in the context.
**Update** - it happends on edit and continue.

**Actual Behavior**:
See in the screen record below, the debugger I think remember one of the previus code states and debug with the old lines.
</Description>
  </Issue>
  <Issue>
    <IssueID>19342</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Interactive shortcut Alt+UpArrow doesn't appear to work in VS 2017 15.1</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19342</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Type `1` and `Enter` into the C# Interactive Window to create a history item. Press `Alt-UpArrow`. It does nothing but it should repeat the item according to `#help`.

Before testing this I disabled all extensions that seemed relevant. It does not seem that those keyboard shortcuts can be reconfigured so that would not be relevant either.

This issue was kind of [resolved previously]( but I still find this bug to be present.</Description>
  </Issue>
  <Issue>
    <IssueID>19341</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing CS0029 under Build + IntelliSense</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19341</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19341</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19341</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. File -&gt; New Console App (.NET Framework)
2. Paste the following code
3. Build

``

Expected: error CS0029: Cannot implicitly convert type 'FormattableString' to 'FormattableString' to show up in Error List
Actual: No errors show under Build + IntelliSense, switching to Build tab shows the correct error
</Description>
  </Issue>
  <Issue>
    <IssueID>19337</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>19337</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: Intellisense for members of delegates created as lambda expressions in With-statement.</Title>
    <CreatedDate>08/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19337</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19337</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Community 2015

**Steps to Reproduce**:
Type the following code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>19333</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>19333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Constructor with default parameter not found in using statement inside lambda containing a switch statement</Title>
    <CreatedDate>07/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19333</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Community 2017
Version 15.1 (26403.7) Release
 
**Steps to Reproduce**:

1. Compile the following C# code:
``


**Expected Behavior**:
The code compiles without errors.

**Actual Behavior**:
The compiler generates the error: "CS1729 'Class2' does not contain a constructor that takes that many arguments" on the line containing the "new Class2()" expression.</Description>
  </Issue>
  <Issue>
    <IssueID>19332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>19332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Want the `interface` `class` `virtual` `override` keywords clickable</Title>
    <CreatedDate>07/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When ctrl + clicked, show something listing all related definitions and allow the items to click and Peek, so one can easily go "up" and "down"?</Description>
  </Issue>
  <Issue>
    <IssueID>19330</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide option to disable formatting on copy</Title>
    <CreatedDate>07/05/2017</CreatedDate>
    <ClosedDate>09/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>19330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>19330</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: d15rel 26505.0

**Steps to Reproduce**:

1. Copy any text 

**Expected Behavior**:
No delay 

**Actual Behavior**:
A dialog pops up indicating that the text is being fomatted

**NOTE:**  I would at least like an option to disable formatting the copied text.  Honestly what do we lose be not formatting the text? </Description>
  </Issue>
  <Issue>
    <IssueID>19329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unnecessary usings (CS8019) are not reported for script compilations</Title>
    <CreatedDate>07/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        var script = CSharpCompilation.CreateScriptCompilation("foo.csx", 
            CSharpSyntaxTree.ParseText("using System;", CSharpParseOptions.Default.WithKind(SourceCodeKind.Script)), new[] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) });
        var diag = script.GetDiagnostics();
        // no CS8019 reported


If I compile a CSX using regular compilation, it works fine.


        var script = CSharpCompilation.Create("foo.csx", new[] {
    CSharpSyntaxTree.ParseText("using System;", CSharpParseOptions.Default.WithKind(SourceCodeKind.Script)) }, new[] { MetadataReference.CreateFromFile(typeof(object).Assembly.Location) });
        var diag = script.GetDiagnostics();
        // CS8019 correctly reported
`</Code>
    <Description>**Version Used**: 

2.1.0. 
I believe the behavior has always been like that though.

**Steps to Reproduce**:

When creating a script (submission) compilation no CS8019  is reported.

``

The difference is in the 2nd example compilation is not flagged as submission.

**Expected Behavior**:

`CS8019` should be reported for script compilation. I understand that in interactive mode it isn't of much need, because the `using` can be used in subsequent submissions, but for 1-time scripts it's needed. This came up when building CSX support in [OmniSharp]( - we'd like to be able to report to our users, who are authoring a CSX i.e. in VS Code - that a given namespace is not in use.

**Actual Behavior**:

No CS8019 reported. 

The culprit is this line 
My suggestion would be to report this diagnostic for submissions too. It's hidden anyway so it would be up to the host (interactive REPL or an intellisense provider like OmniSharp) to interpret whether it's needed or not.</Description>
  </Issue>
  <Issue>
    <IssueID>19327</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AnthonyDGreen</FixedById>
        <IssueID>19327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[VB] Issue "With" Blocks containing Lambdas Modifying fields on "With" object.</Title>
    <CreatedDate>07/05/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>19327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19327</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@ericmutta reported this in the VB Language Repo ([here](
I have found that the following code:

``

...produces different results when the function `DoSomething()` updates the value of `SomeObj` before invoking the function passed in as a lambda.

The two calls to `DoSomething()` should behave identically, indeed when you do the "in-line with statement" refactoring from tools like CodeRush, it will transform the call inside the With statement into the call outside the With statement.

But they don't behave identically. It's almost like the variables used to capture `SomeObj` are different (decompiling the code with Reflector confirms this: a new closure object is introduced by the With statement, essentially "disconnecting" the object you think you are looking at based on the syntax from the run-time object actually used when the code is running).

So two questions:

is this "by design" and currently explained by the language spec? If so, where so I can read up on it?

if it is not by design, can the language/compiler be improved to either:
a) warn the user of potentially unexpected behaviour when lambdas reference members of objects accessed via the With statement.
b) produce the expected behaviour (With statement should not introduce a new closure object if the variable used is "already previously captured").

Hope this makes sense, I was unable to extract the code that produced unexpected behaviour, but if required, I can set up an isolated test case.</Description>
  </Issue>
  <Issue>
    <IssueID>19323</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unable to use roslyn as a library to create a custom language</Title>
    <CreatedDate>06/05/2017</CreatedDate>
    <ClosedDate>06/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>19323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.1

**Steps to Reproduce**:

1. Try to inherit Compilation
2. Boom! internal constructor

**Expected Behavior**:
A true open framework should allow for extension. Why keep everything internal?

**Actual Behavior**:
No chance of proper extension (unless forking roslyn itself, which seems like overkill)</Description>
  </Issue>
  <Issue>
    <IssueID>19316</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>None of these syntax factory types or extension methods seem to line up for adding a base interface</Title>
    <CreatedDate>06/05/2017</CreatedDate>
    <ClosedDate>06/05/2017</ClosedDate>
    <IssueLabels />
    <Description>All versions. 

Just trying to take an existing interface, create a new one from it with slightly altered methods (rename, change return type) and then base the new interface on the old one `INewInterface : IOldInterface` has been a 3 hour exercise in flailing. Its still not compiling (or it does, and breaks at runtime), and I'm about to go back to string parsing.

Can these Add and With methods (they mean the same thing in idiomatic english) just take what the SyntaxFactory offers, instead of requiring enormous chains of eventually unmaintainable functions?

Is there a "Plain" API available for this? Something non-fluent? (I dont mind fluent, but its not "fluent" when a statement is 40 lines long - that's just textual diarrhea). And something that works with intellisense, because I roslyn is useful to me but only if I dont have to scale an enormous rock wall of overly specific notation with types that do not seem to jive.

``

VS wants to help, but it offers things that just dont work, or that compile and fail at runtime.                                                            

</Description>
  </Issue>
  <Issue>
    <IssueID>19310</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>19310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash in `is` operator used with tuple</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>19310</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
var x = (1, 2);
if (x is ValueTuple&lt;long, long&gt;) { }
`</Code>
    <Description>**Version Used**: 

VS2015 most recent update

**Steps to Reproduce**:

1. Type the following statements
``

**Expected Behavior**:

Compiler reports "warning, the given expression is never of the provided (long, long) type."

**Actual Behavior**:

Visual Studio crashes.
</Description>
  </Issue>
  <Issue>
    <IssueID>19309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Update use of HashAlgorithm to reduce allocations</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>08/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>19309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.1

PerfView is showing substantial overhead for the creation of a temporary array in `HashAlgorithm.ComputeHash(Stream)`, originating from Microsoft.CodeAnalysis and Microsoft.CodeAnalysis.Workspaces. On my machine, this accounted for more than 3 seconds of time while Roslyn.sln was opening. Code using this method should be updated to use an alternative that allows the use of a caller-specified buffer from a pool.</Description>
  </Issue>
  <Issue>
    <IssueID>19308</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Optimize away the immediately unwrapped safe cast to nullable value types</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19308</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var a = (obj as int?)?.M();
var b = obj as int? ?? 5;

-&gt;
c
var a = obj is int ? ((int)obj).M() : default;
var b = obj is int ? (int)obj : 5;
`</Code>
    <Description>Since we are unboxing the result right away, we can eliminate the intermediate `Nullable&lt;T&gt;` value.
``
Rel: #14252</Description>
  </Issue>
  <Issue>
    <IssueID>19306</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make sure Roslyn IDE codegen features use the current line endings</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I've noticed that IDE features such as Sort Usings will use a fixed line ending (Environment.NewLine?) when they need to generate a line break. This creates a problem in a file that uses LF for line endings.

The Editor has options for this: `DefaultOptions.NewLineCharacterOptionId` and `DefaultOptions.ReplicateNewLineCharacterOptionId`. Not sure whether the editor exposes these to the user in some way (and if not, we should work with the editor to expose them).

But in any case respecting these options would be nice. Ideally inferring the line endings setting from the file and using that.
</Description>
  </Issue>
  <Issue>
    <IssueID>19305</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>19305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add Roslyn VSIX DSRN prerequisite back</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>31/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>19305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19305</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Revert </Description>
  </Issue>
  <Issue>
    <IssueID>19303</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>19303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Support matching complex types between ENC generations</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>20/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>19303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The `ArrayOfTuples` test (in `EditAndContinueTests.cs`) and a number of other tests seem to be creating ValueTuple types (regular NamedTypeSymbol rather than TupleTypeSymbol).
This is unexpected, as the tuple type unification work is supposed to lift any instances of `ValueTuple&lt;...&gt;` to a tuple `(...)`.

Here's a place to set breakpoint: 

</Description>
  </Issue>
  <Issue>
    <IssueID>19301</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty failed</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>06/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>19301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>19301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>19301</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty
      Assert.Contains() Failure
      Not found: this.SomeButton.Text = "NewButtonText"
      In value:  namespace TestProj
      {
          partial class Form1
          {
              /// &lt;summary&gt;
              /// Required designer variable.
              /// &lt;/summary&gt;
              private System.ComponentModel.IContainer components = null;
      
              /// &lt;summary&gt;
              /// Clean up any resources being used.
              /// &lt;/summary&gt;
              /// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
              protected override void Dispose(bool disposing)
              {
                  if (disposing &amp;&amp; (components != null))
                  {
                      components.Dispose();
                  }
                  base.Dispose(disposing);
              }
      
              #region Windows Form Designer generated code
      
              /// &lt;summary&gt;
              /// Required method for Designer support - do not modify
              /// the contents of this method with the code editor.
              /// &lt;/summary&gt;
              private void InitializeComponent()
              {
                  this.components = new System.ComponentModel.Container();
                  this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                  this.Text = "Form1";
              }
      
              #endregion
          }
      }
      
      
      Stack Trace:
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpWinForms.cs(44,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlProperty()
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.RemoveEventHandler
    Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlPropertyInCode
      Assert.Contains() Failure
      Not found: this.SomeButton.Text = "ButtonTextGoesHere";
      In value:  namespace TestProj
      {
          partial class Form1
          {
              /// &lt;summary&gt;
              /// Required designer variable.
              /// &lt;/summary&gt;
              private System.ComponentModel.IContainer components = null;
      
              /// &lt;summary&gt;
              /// Clean up any resources being used.
              /// &lt;/summary&gt;
              /// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;
              protected override void Dispose(bool disposing)
              {
                  if (disposing &amp;&amp; (components != null))
                  {
                      components.Dispose();
                  }
                  base.Dispose(disposing);
              }
      
              #region Windows Form Designer generated code
      
              /// &lt;summary&gt;
              /// Required method for Designer support - do not modify
              /// the contents of this method with the code editor.
              /// &lt;/summary&gt;
              private void InitializeComponent()
              {
                  this.components = new System.ComponentModel.Container();
                  this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                  this.Text = "Form1";
              }
      
              #endregion
          }
      }
      
      
      Stack Trace:
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpWinForms.cs(62,0): at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpWinForms.ChangeControlPropertyInCode()
`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>19300</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OperationKind.FieldInitializerInCreation and OperationKind.PropertyInitializerInCreation are redundant</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>14/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>19300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> changed `IObjectCreationExpression.Initializers` so we now don't create synthesized ISymbolInitializer nodes for the object member initializer. Instead we return the underlying expression. `OperationKind.FieldInitializerInCreation` and `OperationKind.PropertyInitializerInCreation` were only used for these synthesized symbol initializer nodes and hence we should now do one of the following:
1. Remove these redundant operation kinds.
2. Add an extension method `IObjectCreationExpressionGetMemberInitializers()` that returns these synthesized member initializers, if any, and then we can retain this OperationKind.

This change caused test failures in `Microsoft.CodeAnalysis.CSharp.UnitTests.OperationAnalyzerTests.MemberInitializerCSharp` and `Microsoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.OperationAnalyzerTests.MemberInitializerVisualBasic`. We should also fix these tests based on our design discussion.</Description>
  </Issue>
  <Issue>
    <IssueID>19298</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Not support Chinese for enum context</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>19298</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
root@DevEnv:~/TL.SysData# dotnet build
Microsoft (R) Build Engine version 15.1.1012.6693
Copyright (C) Microsoft Corporation. All rights reserved.

DTO/Nature/RegionHelper.cs(159,67): error CS1001: Identifier expected [/root/TL.SysData/Source/TL.SysData.csproj]
Res/RdsPrex.cs(23,1): warning CS1570: XML comment has badly formed XML -- 'Expected an end tag for element 'summary'.' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(159,67): error CS1002: ; expected [/root/TL.SysData/Source/TL.SysData.csproj]
Res/RdsPrex.cs(24,13): warning CS1570: XML comment has badly formed XML -- 'End tag was not expected at this location.' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(159,67): error CS1056: Unexpected character 'ֱ' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(159,69): error CS1002: ; expected [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(159,69): error CS1056: Unexpected character '�' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(159,70): error CS1056: Unexpected character '�' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(218,24): error CS1001: Identifier expected [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(218,24): error CS1056: Unexpected character 'ֱ' [/root/TL.SysData/Source/TL.SysData.csproj]
DTO/Nature/RegionHelper.cs(218,25): error CS1003: Syntax error, ',' expected 
....
....
DTO/Nature/RegionHelper.cs(246,28): error CS1056: Unexpected character '�' [/root/TL.SysData/Source/TL.SysData.csproj]
/usr/share/dotnet/sdk/1.0.3/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(92,5): error : Cannot find project info for '/root/TL.SysData/Source/TL.SysData.csproj'. This can indicate a missing project reference. [/root/TL.SysData/Test/UnitTest/UnitTest.csproj]

**code: enum value:**

    public enum Region 
    {
        直辖市 = 1 &lt;&lt; RegionHelper.Provincelmove,
        上海市 = 直辖市 | 1 &lt;&lt; RegionHelper.Citylmove, 
        黄浦区 = 上海市 | 1 &lt;&lt; RegionHelper.Districtlmove,
        ...
        ...
    }

...
...
    public static bool IsCCity(this Region region)
    {
        return region.IsCity() &amp;&amp; region.Province() == Region.直辖市;
    }
`</Code>
    <Description>@idoop commented on [Fri May 05 2017](when I do `dotnet build` or `dotnet pack` ,an error occurred:
``

But use VS2013/15/17 build it on windows: Success.
And i saw [#7804]( so i set this proj charSet UTF-8,and no BOM.Then build ,same error info.
## Expected behavior
Build Success.
## Actual behavior
error.....
## Environment data
`dotnet --version`
1.0.3

`cat /proc/version`
Linux version 4.4.0-77-generic (buildd@lgw01-59) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #98-Ubuntu SMP Wed Apr 26 08:34:02 UTC 2017

**Code File**:[Region.cs](
---@karelz commented on [Fri May 05 2017](That looks like Roslyn I18N bug -- @jaredpar can you please confirm?</Description>
  </Issue>
  <Issue>
    <IssueID>19297</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract Native PDB writer to Microsoft.DiaSymReader</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>19297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>19297</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A correct and deterministic implementation of native PDB writer is tricky and other tools (F#, Cecil, PDB converter, etc.) need it as well. Extract Roslyn's writer to Microsoft.DiaSymReader and make it public.</Description>
  </Issue>
  <Issue>
    <IssueID>19295</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inclusion of using is put inside unrelated preprocessor directive</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>
    </ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>19295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
#if DEBUG
using System.IO;
#endif

namespace ConsoleApplication2
{
    class Foo
    {
        public void Bar()
        {
            Console.WriteLine();
        }
    }
}



2. `Ctrl+.` on `Console.WriteLine();`
3. Select "Using System"
4. Observe how `using System;` is put inside `#if DEBUG`, result:
cs
#if DEBUG
using System;
using System.IO;
#endif

namespace ConsoleApplication2
{
    class Foo
    {
        public void Bar()
        {
            Console.WriteLine();
        }
    }
}
`</Code>
    <Description>**Version Used**: VS 20017 Version 15.1 26403.7

**Steps to Reproduce**:

1. Start with this program
``

**Expected Behavior**: `using System;` is put *outside* preprocessor directive.

**Actual Behavior**: `using System;` is put *inside* preprocessor directive making it incompilable in Release Mode.</Description>
  </Issue>
  <Issue>
    <IssueID>19288</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>19288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuildWorkspace Projects Sometimes Falsely Reports "HasDocuments"</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>31/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>19288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.1.0

**Steps to Reproduce**:

1. Use MSBuildWorkspace to load a solution in a Roslyn command-line app generated by a Roslyn template.
2. Load the solution asynchrously.
3. Load projects that have C# documents.
4. Run the program on Windows Server 2012 R2.

**Expected Behavior**:
 I expect that each project with documents reports that"HasDocuments" is true. The project will also have a collection of documents.

**Actual Behavior**:
When I run on Windows 10, I never see this issue. I see this issue on Windows Server 2012 R2. I run Windows Server 2012 R2 in an Oracle VirtualBox VM. This also occurs on Hyper-V VMs.

The problem occurs regardless of whether I compile with Visual Studio 2015 or Visual Studio 2017.

I have some solutions where I work where there is no problem. Yet, one solution falsely reports HasDocuments as false, and the collection of documents is empty. Yet, there are probably more than 100 C# files!

I cannot post any of the solutions, for obvious reasons. 

I am at a loss as to what is happening.

Scott Lurowist

</Description>
  </Issue>
  <Issue>
    <IssueID>19287</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggestion: "Build and Run" options should expose MSBuild binary logging</Title>
    <CreatedDate>05/05/2017</CreatedDate>
    <ClosedDate>05/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>19287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>19287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The new [MSBuild binary log]( option (introduced in MSBuild 15.3) is really handy. It is streamlining the usage of Kirill's structured file logger.
From the command-line, you'd pass `/bl` to `msbuild`.
When using this option, logging to a text file is redundant, since the binary log has more information. So maybe this could be exposed as a new entry in the "MSBuild project build log file verbosity" drop-down.

@Pilchie I'm not sure if this is managed by the Roslyn IDE layer or VS. Can you help route?

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>18787</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>18787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>&lt;completionlist&gt; completion triggered after .</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18787</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``
Observe that Program.Field1 is suggested at the $$. It should not be.
</Description>
  </Issue>
  <Issue>
    <IssueID>18785</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>18785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intellisense hard selection when backspacing needs to be conditioned on match quality</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18785</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>New VB project:
``

Type backspace and then `.`. `x` replaces `xAdd` because we do a hard selection. We should soft select because the new filtertext is not a prefix match of anything.
</Description>
  </Issue>
  <Issue>
    <IssueID>18781</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation API shape for object and collection initializer expressions</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18781</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
namespace Microsoft.CodeAnalysis.Semantics
{
    /// &lt;summary&gt;
    /// Represents a collection element initializer expression.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;
    /// This interface is reserved for implementation by its associated APIs. We reserve the right to
    /// change it in the future.
    /// &lt;/remarks&gt;
    public interface ICollectionElementInitializerExpression : IHasArgumentsExpression
    {
        /// &lt;summary&gt;
        /// Set of applicable methods for an implicit dynamic invocation OR the implicit Add method symbol for non-dynamic invocation.
        /// &lt;/summary&gt;
        ImmutableArray&lt;IMethodSymbol&gt; ApplicableMethods { get; }

        /// &lt;summary&gt;
        /// Flag indicating if this is a dynamic initializer invocation.
        /// &lt;/summary&gt;
        bool IsDynamic { get; }
    }
}
`</Code>
    <Description>Currently, BoundCollectionIntializerExpression has OperationKind.None and implements IOperation. This means that we completely cut-off the operations within a collection initializer, including even the nested initializers.

We need to design the API shape for Collection initializers.

1. Do we need an `ICollectionInitializerExpression`? Theoretically, we don't need it as `IObjectCreationExpression.Initializers` can return the child collection element initializer nodes of a collection initializer.
2. Do we need an `ICollectionElementInitializerExpression`? We have 2 possible designs:
   1. Follow the VB bound tree pattern, which stores a `BoundCall` for collection element initializer, so we don't need a new API. However, C# doesn't store this bound call, but instead has a `BoundCollectionElementInitializerExpression` (with invoked method name and arguments) and `BoundDynamicCollectionElementInitializer` (with possible applicable methods and arguments) . So we need to synthesize such a bound call for C# and return it as an initializer. Note that this approach introduces an implicit compiler generated IOperation node in the operation tree.
   2. Add the following API and our Operation tree node for CollectionElementInitializerExpression, can have language specific implementations that delegate to either BoundCall (VB) or BoundICollectionElementInitializerExpression or BoundDynamicCollectionElementInitializer (C#):
``


look for an example here    </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18781</IssueID>
        <PullRequestID>20689</PullRequestID>
        <Title>Fix IOperation APIs for object and collection initializers</Title>
        <Description>See  for the final design.

Fixes #18781 </Description>
        <CreatedDate>06/07/2017</CreatedDate>
        <ClosedDate>11/07/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>18781</IssueID>
            <PullRequestID>20689</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>18781</IssueID>
            <PullRequestID>20689</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18781</IssueID>
            <PullRequestID>20689</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18780</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Optimization: Passing static method as Action parameter should no allocate</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18780</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In the code below, compare the two methods of passing `StaticMethod` to `F`.
Calling with a lambda generates a lazy singleton `Action`, but calling with the method creates a new `Action` on every call. 
It seems the former would be more efficient, but to get that behavior, users have to type extra glue code. 
That is even more pronounced for the scenario where the static method takes parameters (passing into a method that accepts `Func&lt;...&gt;`).

``

FYI @CyrusNajmabadi @cston </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18780</IssueID>
        <PullRequestID>6642</PullRequestID>
        <Title>[WIP] Use cached delegate instances for method group conversions</Title>
        <Description>See #5835 This changes C# but not yet VB, vb files are changed to allow compile.</Description>
        <CreatedDate>08/11/2015</CreatedDate>
        <ClosedDate>
        </ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>18780</IssueID>
            <PullRequestID>6642</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Blocked</Name>
            <IssueID>18780</IssueID>
            <PullRequestID>6642</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>18780</IssueID>
            <PullRequestID>6642</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-C#</Name>
            <IssueID>18780</IssueID>
            <PullRequestID>6642</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18780</IssueID>
            <PullRequestID>6642</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>agocke</FixedById>
            <PullRequestID>6642</PullRequestID>
            <IssueID>18780</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18779</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>JoeRobich</FixedById>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpInteractiveCommands.VerifyPreviousAndNextHistory failed a VSI run</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>22/07/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Integration-Test</Name>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18779</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
MESSAGE:
Assert.Equal() Failure\r\n ↓ (pos 1)\r\nExpected: 1 + 2\r\nActual: 1.ToString()\r\n ↑ (pos 1)
+++++++++++++++++++
STACK TRACE:
at Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.VerifyPreviousAndNextHistory() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\CSharp\CSharpInteractiveCommands.cs:line 30
`</Code>
    <Description>

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18779</IssueID>
        <PullRequestID>37774</PullRequestID>
        <Title>Adding Skip to CSharpInteractiveCommands.VerifyPreviousAndNextHistory</Title>
        <Description>Pass rate is below 99% - 
</Description>
        <CreatedDate>06/08/2019</CreatedDate>
        <ClosedDate>07/08/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>18779</IssueID>
            <PullRequestID>37774</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18777</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0031 (Null check can be simplified) - wrong fix for nullable structs</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18777</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.1 (26403.7)

Having following code:
``
which does not compile (should be only "return x?.Value;").</Description>
  </Issue>
  <Issue>
    <IssueID>18776</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0018 false positive *causes crash*</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18776</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
class Program {
  static void Main() {
    int count = 0;
    foreach (var x in Gen(out count)) System.Console.WriteLine(x);
    System.Console.WriteLine(count);
  }

  static int[] Gen(out int count) {
    count = 2;
    return new[] { 0, 1 };
  }
}


**Expected Behavior**:

It should not offer IDE0018 "variable declaration of count can be inlined". (That's because inlining it would limit its scope too much).

**Actual Behavior**:

It offers IDE0018. Applying the fix results in a crash inside CSharpInlineDeclarationCodeFixProvider:


System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBlock' to type 'Microsoft.CodeAnalysis.CSharp.BoundForEachStatement'.
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(SemanticModel semanticModel,CommonForEachStatementSyntax forEachStatement)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.GetForEachSymbols(SemanticModel model,CommonForEachStatementSyntax forEach,IMethodSymbol&amp; getEnumeratorMethod,ITypeSymbol&amp; elementType)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode previousOriginalNode,TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(DeclarationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_0.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>[Note: I see there are several bugs relating to IDE0018, some resolved as already-fixed, some marked as feature-requests. None of them report an actual crash, so I think this is a new issue.]

[More generally, if feels like I've encountered lots of MS-authored analyzers crashing because of incorrect casts. These crashes are very user-visible, and probably the most common crashes that a user of Visual Studio will see. Why are there so many casts? And why so many crashes because of them? Maybe every single cast has to be treated with substantially more skepticism during code review? Or accompanied with a proof that it's valid? Or accompanied with fuzz-testing from an automatic syntax tree generator?]

**Version Used**: 15.1 (26403.03 Release)

**Steps to Reproduce**:

Following console app:

``</Description>
  </Issue>
  <Issue>
    <IssueID>18775</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot upgrade C# project with ValueTuple and Roslyn to .NET 4.7</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>20/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18775</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hello!

I cannot upgrade my C# project which is using Roslyn to target .NET 4.7 - I have build errors:
``

But I need to upgrade my C# project to .NET 4.7 as a workaround for the [CS8179 known issue](

Are there any solutions for this issue?</Description>
  </Issue>
  <Issue>
    <IssueID>18770</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type inference bug?</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18770</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18770</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
    public static class NullExt
    {
        public static T? Some&lt;T&gt;(this T? value, Action&lt;T&gt; func) where T : struct
        {
            if (value != null)
                func(value.Value);
            return value;
        }

        public static T Some&lt;T&gt;(this T value, Action&lt;T&gt; func) where T : class
        {
            if (value != null)
                func(value);
            return value;
        }
    }

    class Program
    {
        public static void Main()
        {
            string s = "s";
            s.Some(_ =&gt; Console.Write("some"));

            int? i = 1;
            i.Some(_ =&gt; Console.Write("some"));
        }
    }


**Expected Behavior**:
This code snippet compiles.

**Actual Behavior**:
This code snippet doesn't compiles.
error CS0121: The call is ambiguous between the following methods or properties: “NullExt.Some&lt;T&gt;(T?, Action&lt;T&gt;)” and “NullExt.Some&lt;T&gt;(T, Action&lt;T&gt;)”

Change
c#
            i.Some(_ =&gt; Console.Write("some"));

to
c#
            i.Some&lt;int&gt;(_ =&gt; Console.Write("some"));
`</Code>
    <Description>**Version Used**:  Visual Studio 2017

**Steps to Reproduce**:

``
it compiles, So i think it's a type inference bug. What do you think of this?
</Description>
  </Issue>
  <Issue>
    <IssueID>18769</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Is there an option / attribute make this work as intended?</Title>
    <CreatedDate>18/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>vbnet
Microsoft Visual Studio Enterprise 2017 
Version 15.1 (26403.7) Release
VisualStudio.15.Release/15.1.0+26403.7
Microsoft .NET Framework
Version 4.6.01586

Installed Version: Enterprise

Architecture Diagrams and Analysis Tools   00369-60000-00001-AA571
Microsoft Architecture Diagrams and Analysis Tools

Visual Basic 2017   00369-60000-00001-AA571
Microsoft Visual Basic 2017

Visual C# 2017   00369-60000-00001-AA571
Microsoft Visual C# 2017

Application Insights Tools for Visual Studio Package   8.6.00209.10
Application Insights Tools for Visual Studio

ASP.NET and Web Tools 2017   15.0.30320.0
ASP.NET and Web Tools 2017

ASP.NET Web Frameworks and Tools 2017   5.2.50303.0
For additional information, visit https://www.asp.net/

Azure App Service Tools v3.0.0   15.0.30209.0
Azure App Service Tools v3.0.0

Common Azure Tools   1.9
Provides common services for use by Azure Mobile Services and Microsoft Azure Tools.

GitHub.VisualStudio   2.2.0.8
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

JavaScript Language Service   2.0
JavaScript Language Service

KofePackagePackage Extension   1.0
KofePackagePackage Visual Studio Extension Detailed Info

Microsoft MI-Based Debugger   1.0
Provides support for connecting Visual Studio to MI compatible debuggers

NuGet Package Manager   4.1.0
NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.

SQL Server Data Tools   15.1.61702.140
Microsoft SQL Server Data Tools

TypeScript   2.1.5.0
TypeScript tools for Visual Studio

**Steps to Reproduce**:
Run attached project.

**Expected Behavior**:
No null reference
**Actual Behavior**:
null reference.

Issue is cause by to ordering of the fields and when they get bound. We really have a 2nd pass after the readonly fields been initialized, to bind references that where initially uninitialised (hence Nothing) 

--------
@CyrusNajmabadi Quick overview of issue.

If I define the readonly fields as following it works as intended.
vbnet
  ReadOnly BraceOpening As ParseDelegate = Rule(Name:=TokenKind.BraceOpening, Definition:=[Char]("{"c))
  ReadOnly BraceClosing As ParseDelegate = Rule(Name:=TokenKind.BraceClosing, Definition:=[Char]("}"c))
  ReadOnly Brace As ParseDelegate = Rule(Name:=TokenKind.Brace, Definition:=Choice(BraceOpening, BraceClosing))

But if I move the position of the `Brace` definition to above to other two, it doesn't work as intended.
vbnet
  ReadOnly Brace As ParseDelegate = Rule(Name:=TokenKind.Brace, Definition:=Choice(BraceOpening, BraceClosing))
  ReadOnly BraceOpening As ParseDelegate = Rule(Name:=TokenKind.BraceOpening, Definition:=[Char]("{"c))
  ReadOnly BraceClosing As ParseDelegate = Rule(Name:=TokenKind.BraceClosing, Definition:=[Char]("}"c))

`</Code>
    <Description>This is likely a `As Designed` but we should have an option to make this work.
[ConsoleApp2.zip](
**Version Used**: 
``
Because when `Brace` gets invoked, it is as `Definition:= Choice( Nothing, Nothing)`
</Description>
  </Issue>
  <Issue>
    <IssueID>18767</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Should we throw when given a default/empty list for IVariableDeclaration</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>13/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18767</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we check ImmutableArray.IsDefaultOrEmpty when determining isInvalid in the constructor of IVariableDeclaration. Is this the correct behavior? As the compiler is currently implemented, it's theoretically impossible to be passed either a default or empty array, but nothing says that empty might not become valid (especially for otherwise invalid syntax) in the future. Should we be ensuring that default values are swapped for an empty array in the constructor? Should we throw when encountering either of these issues?</Description>
  </Issue>
  <Issue>
    <IssueID>18766</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.CodeActions.MoveType.MoveTypeTests are flaky</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>22/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>18766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>A bunch of MoveTypeTests failed in PR #18494, which shouldn't be affected by the change.

Here's the build:


``

== More Info from #18833

They randomly fails. More often on 64bit debug than on others.
Looks like something with thread affinity.

Typical trace is:

MESSAGE:
System.InvalidOperationException : When created kind : Unknown\r\nWhen created thread id : 1\r\nWhen created thread name: \r\nCurrent thread id : 27\r\nCurrent thread name : StaTaskScheduler thread
+++++++++++++++++++
STACK TRACE:
at Roslyn.Utilities.Contract.Fail(String message) at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition, String message) at Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground() at Microsoft.CodeAnalysis.Editor.Implementation.Preview.PreviewFactoryService.d__28.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.ConfiguredTaskAwaitable1.ConfiguredTaskAwaiter.GetResult() at Microsoft.CodeAnalysis.Editor.SolutionPreviewResult.&lt;GetPreviewsAsync&gt;d__6.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.d__16.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.&lt;TestAddDocument&gt;d__15.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.CodeActions.AbstractCodeActionOrUserDiagnosticTest.d__13.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at Microsoft.CodeAnalysis.Editor.UnitTests.MoveType.AbstractMoveTypeTest.d__6.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.CodeActions.MoveType.MoveTypeTests.d__34.MoveNext() in q:\roslyn\src\EditorFeatures\CSharpTest\CodeActions\MoveType\MoveTypeTests.MoveToNewFile.cs:line 868 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
</Description>
  </Issue>
  <Issue>
    <IssueID>18764</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>johnbeisner</FixedById>
        <IssueID>18764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Migrate our internal signed build share to newer storage</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>25/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18764</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Right now we're on the "small and expensive" option for storage, and we should move to the newer storage that's been provisioned.</Description>
  </Issue>
  <Issue>
    <IssueID>18763</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>TyOverby</FixedById>
        <IssueID>18763</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash on bad code in the IDE</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>01/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18763</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18763</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>18763</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>18763</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
[X(() =&gt; this._Y)]
public void Z()
{
}

3. Move the mouse over `this`

**Expected Behavior**:

Some error message.

**Actual Behavior**:

Visual Studio crashes.

-----------------------------------

Possible stack trace:
 none
System.NullReferenceException: Object reference not set to an instance of an object.
at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.AddUnwrappingErrorTypes(ArrayBuilder`1 builder, Symbol s)
at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoForNode(SymbolInfoOptions options, BoundNode lowestBoundNode, BoundNode highestBoundNode, BoundNode boundNodeForSyntacticParent, Binder binderOpt)
at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, ISemanticFactsService semanticFacts, ISyntaxFactsService syntaxFacts, SyntaxToken token, CancellationToken cancellationToken)
at Microsoft.CodeAnalysis.Shared.Extensions.SemanticModelExtensions.GetSemanticInfo(SemanticModel semanticModel, SyntaxToken token, Workspace workspace, CancellationToken cancellationToken)
`</Code>
    <Description>**Version Used**: VS 2017 (also reproducible with VS 2015)

**Steps to Reproduce**:

1. Open a new Console Application
2. Paste the following code into the main class
``

-----------------------------------
Also recorded internally at
- 
- 
</Description>
  </Issue>
  <Issue>
    <IssueID>18762</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: Async method returning tuple with names crashes compiler when producing PDBs</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
**Version Used**: 
Visual studio 2017 (compiler vbc 2.0.0.61501)

**Steps to Reproduce**:

1. Open attached project: [ValueTuple_Test.zip](
2. Compile it
3. Checkout error

**Expected Behavior**:
Compile without errors
**Actual Behavior**:
Error on compile</Description>
  </Issue>
  <Issue>
    <IssueID>18761</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect rename behavior for local functions</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>26/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>18761</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Start with the following code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18758</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect namespace generated for new files when the project contains special characters</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
15.3 (master)
VisualStudio.15.Release/15.1.0+26403.7

**Steps to Reproduce**:

![image](

1. Create a project with special characters like " ", -, +, =, (, ), !, .,
2. Add a new .cs file

**Expected Behavior**:
``

The initial Program.cs receives the correct namespace, but all new files being added are being generated incorrectly.

Couldn't quite find the event that is creating those files.
I looked into `Microsoft.CodeAnalysis.FileTextLoader` but at that point the file was already written to disk and it's already too late. Could someone point out where I should look to find the correct entry point to debug this issue?</Description>
  </Issue>
  <Issue>
    <IssueID>18755</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Report error rather than warning if [Deprecated] attributes with both Remove and Deprecate</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>17/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18755</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following reports `warning CS0618: 'C.F()' is obsolete` based on the first `[Deprecated]` attribute rather than `error CS0618: 'C.F()' is obsolete` from the second attribute.
``</Description>
  </Issue>
  <Issue>
    <IssueID>18752</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>18752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Print lists on newlines</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>18/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18752</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See  

``
&gt; This doesn't have to fixed right away, but the output would be more readable if the first item was printed on the new line. This applies to all lists.</Description>
  </Issue>
  <Issue>
    <IssueID>18750</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Misleading diagnostic for constant `false` when clause</Title>
    <CreatedDate>17/04/2017</CreatedDate>
    <ClosedDate>13/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>18750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18750</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
            try
            {
            }
            catch (Exception) when (false)
            {
            }
`</Code>
    <Description>**Version Used**: 15.3 (master)

**Steps to Reproduce**:

1. compile
``

**Expected Behavior**: `Warning: filter expression is constant 'false'; consider removing try-catch.`

**Actual Behavior**: `Warning: filter expression is constant, consider removing the filter.`

It would be a change of behavior to remove the filter as suggested by the diagnostic.
</Description>
  </Issue>
  <Issue>
    <IssueID>18738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bad conversion produced on tuple literal</Title>
    <CreatedDate>16/04/2017</CreatedDate>
    <ClosedDate>31/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void Test()
        {
            var source = @"
class C
{
    int e = 5;
    C instance = null;
    int M()
    {
        (int, string) y = (instance?.e, null);
        System.Console.Write(y);
        return 42;
    }
}
";

            Action&lt;ModuleSymbol&gt; validator = module =&gt;
            {
                var sourceModule = (SourceModuleSymbol)module;
                var compilation = sourceModule.DeclaringCompilation;
                var tree = compilation.SyntaxTrees.First();
                var model = compilation.GetSemanticModel(tree);
                var nodes = tree.GetCompilationUnitRoot().DescendantNodes();

// crash because we produced a conversion of type "explicit literal", yet the operand is not a bound converted tuple literal
                var yTuple = nodes.OfType&lt;TupleExpressionSyntax&gt;().ElementAt(0);
                Assert.Equal("(System.Int32 e, System.String)",
                    model.GetTypeInfo(yTuple).Type.ToTestDisplayString());
            };

            var verifier = CompileAndVerify(source, parseOptions: TestOptions.Regular.WithLanguageVersion(LanguageVersion.CSharp7_1),
                additionalRefs: new[] { MscorlibRef, ValueTupleRef, SystemRuntimeFacadeRef }, sourceSymbolValidator: validator);
            verifier.VerifyDiagnostics();
        }
`</Code>
    <Description>
``

@VSadov What conversion would you expect in this scenario?</Description>
  </Issue>
  <Issue>
    <IssueID>18737</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using System.Linq Select w/ Named ValueTuple Variables causes .Net Native Compilation Errors</Title>
    <CreatedDate>16/04/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After Hours on Hours of combing through my over 50,000 lines of code and trying different conditions after days on days of confusion, I discovered an issue with the ValueTuple that caused my app to fail to compile in .Net Native.

I managed to replicate it in the solution below.

**Version Used**: 
System.ValueTuple 4.3.0
Microsoft.NETCore.UniversalWindowsPlatform 5.3.2

**Steps to Reproduce**:

``

**Expected Behavior**:
Produces a list of new Tuples with 3 Int Values out of a list of 2.

**Actual Behavior**:
`C:\Program Files (x86)\MSBuild\15.0\.Net\.NetNative\15.0.24211\x86\ilc\IlcInternals.targets(936,5): error : Internal compiler error: Object reference not set to an instance of an object.`</Description>
  </Issue>
  <Issue>
    <IssueID>18736</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>TODO: move test code out of compilation object</Title>
    <CreatedDate>16/04/2017</CreatedDate>
    <ClosedDate>25/10/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>18736</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>
    </Description>
  </Issue>
  <Issue>
    <IssueID>18733</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Generators are built against the wrong runtime.</Title>
    <CreatedDate>15/04/2017</CreatedDate>
    <ClosedDate>10/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
master, dev16 HEADs

**Steps to Reproduce**:

1. Win 10 x64 Creator Update
2. Install VS2017 with 4.7 SDK
3. Clean NuGet cache
4. Clone
4. Restore.cmd
5. msbuild /v:m /m Roslyn.sln
6. Run \roslyn\Binaries\Debug\Exes\CSharpSyntaxGenerator\CSharpSyntaxGenerator.exe

**Expected Behavior**:

No error

**Actual Behavior**:

Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)

System.Runtime in the same output directory is version 4.3.0.0</Description>
  </Issue>
  <Issue>
    <IssueID>18730</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>System.ArgumentException: 'Syntax node is not within syntax tree'</Title>
    <CreatedDate>15/04/2017</CreatedDate>
    <ClosedDate>15/04/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: VS 15.1 (latest NuGet packages)

**Steps to Reproduce**:

1. Create a solution with analyzers
2. Create a WPF solution
3. Find all references to a (private) field in all partial classes
4. Call `semanticModel.GetSymbolnfo(referenceNode)`

**Expected Behavior**:

Ideally, this would return the symbol info, even if the declaration was in a different file.

**Actual Behavior**:

&gt; System.ArgumentException: 'Syntax node is not within syntax tree'

Here is a GitHub repo with an MVCE (the link points to the line the exception happens at): [jubilant-broccoli](</Description>
  </Issue>
  <Issue>
    <IssueID>18728</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>More detail around requirements for integer comparisons in constant patterns</Title>
    <CreatedDate>15/04/2017</CreatedDate>
    <ClosedDate>16/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>18728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>18728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

class Test
{
    static void Main()
    {
        int x = 10;
        if (x is 10L)
        {
            Console.WriteLine("Yes");
        }
    }
}
`</Code>
    <Description>**Version Used**: 2.1.0.61520

**Steps to Reproduce**:

``

**Expected Behavior**:

Compiles with no error, executes and prints "Yes".

**Actual Behavior**:

&gt; error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)

From the [patterns]( feature spec:

&gt; If both `e` and `c` are of integral types, the pattern is considered matched if the result of the expression `e == c` is true.

The expression `x == 10L` is perfectly valid, so why isn't this pattern valid? I'm not suggesting that there should be a change to the behavior, but it would be nice to have a little more description in the feature doc, in lieu of a C# 7 full specification.</Description>
  </Issue>
  <Issue>
    <IssueID>18727</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Confusing error message when using a var pattern in switch/case with pointer input</Title>
    <CreatedDate>15/04/2017</CreatedDate>
    <ClosedDate>18/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18727</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

class Test
{
    unsafe static void Main()
    {
        fixed (char *x = "hello")
        {
            switch (x)
            {
                case var y: break;
            }
        }
    }
}
`</Code>
    <Description>**Version Used**:  2.1.0.61520

**Steps to Reproduce**:

``

**Expected Behavior**:

An error message that helps the user understand what's wrong.

**Actual Behavior**:

&gt; Test.cs(11,22): error CS0244: Neither 'is' nor 'as' is valid on pointer types

This is confusing (if you don't happen to be thinking about patterns in general) as the code doesn't contain an `is` or `as` operator.

I can't immediately think of any pattern match that would be valid for pointer types, so perhaps it would be clearer to make that the error message, even for `is` / `as` operators? ("Pattern matching is not valid on pointer types".) Of course, it's possible that I've misunderstood and there *are* patterns that match pointers, or will be in the future...</Description>
  </Issue>
  <Issue>
    <IssueID>18719</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Sprint 116 Summary</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>13/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>18719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Sprint Summary</Name>
        <IssueID>18719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description># Stats 2/10/2017 - 4/14/2017
|  Repository | Bugs Closed| Pull Requests Merged |
|:-------------:|:-------------:|:-------------:|
| [Roslyn]( | [986]( | [769](
| [F#]( [141]( | [247](
| [Project System]( | [245]( | [208](
| [.NET CLI]( | [317]( | [317]( |
| [.NET SDK]( | [97]( | [86]( |
| [Omnisharp]( | [19]( | [0]( |
| **Total** | **1805** | **1627** |



# VB/C# Language Design
@MadsTorgersen
- Kicked off a new series of Visual Basic language design meetings.
- MVP Guest [Klaus Löffelmann]( joined us for the first of the new meetings.
- New VB `CVal` operator to do CLR native numeric conversions.

# VB/C# Compiler Team
@jaredpar 

## C# 7.1
- Default expressions reviewed, ETA very soon
- Async main progress, ETA next week
- Tuple names progress, ETA next week
- Bugs, bugs, bugs!!! 

## C# 7.2
- Span&lt;T&gt; Safety rules reviewed, partially implemented
- ref readonly working across assemblies 
- Initial build deployed to CoreFX labs 

## Beyond 
- Default interface methods
	- Core samples working end to end C# 
	- Next on VB language design meeting agenda 
- Non-Null References
	- Got feature branch up to date with master

# F# Update
@KevinRansom @cartermp
- Infrastructure, Infrastructure, tests, bugs
	- [Brett’s]( a champ, got nightly build working again
	- Community PRs focused here as well
- Progress on issues with Portable PDBs
- Working with [Enrico Sada]( to finish getting the Commandline Parser ready for the project system
- More things navigable with QuickInfo (Community)
![image](

# Infrastructure
@jasonmalinowski 
- Rolled out new tool to catch internal API breaking changes.
- If you are asked to investigate a break, please do so quickly. Code flow to the division stops when this happens.
- If adding dependencies to new DLLs, let infrastructure know.
## Rotation next sprint
- Mantis: [Kevin Halverson](
- Grasshopper: [HeeJae Chang](
- Viper: [Vladimir Sadov](
- Tiger: [Paul Vick](
- Crane: [John Beisner](

# Live Unit Testing (LUT)
@ManishJayaswal 
- Added support for .NET Core ( single target framework only)
- Added persistence for LUT data to speed up startup time
- Added support for excluding tests from LUT permanently
- Created a command-line interface for LUT (name to be determined)
- Added support for honoring build changes made specifically for LUT build
- Stopped sending payloads for cold files to improve scale
- Updated user interface by adding icons for test methods and for excluded tests (ongoing)
- Updated the user interface for showing tests when clicking on LUT icons and added functionality to run/debug from there (ongoing)
- Add functionality to keep overall memory usage to a user defined limit by dropping data (ongoing)
- Investigated perf issues with test platform
- Bug fixing
- Helped internal teams in window with using LUT and made some progress in enabling VSO repo work with LUT
- [Kevin Halverson]( fixed some winform accessibility bugs

# Analyzer and Interactive
@jinujoseph 
- Began moving FxCop analyzers to be in the IDE by default 
- IOperation API Review + Implementations 
- PDB converter tool almost done (In Winc)
- Edit-and-Continue in Delayed-Project-Load support costed with debugger.
- Edit-and-Continue support for C# 7 feature 
- Ported integration tests (1 more remaining) 
- Bugs fixes for 15.3
- Accessibility Bugs 

# CLI and SDK
@livarcocc
- Added test coverage for the SDK supported matrix
- Added test coverage for backwards compatibility tests from 2.0 to 1.0
- Removed C++ Runtime from the CLI bundle for 2.0
- Added assembly consistency validation tool
- Implicit RuntimeFrameworkVersion
- Moved Tasks/Targets from dotnet/standard to dotnet/sdk
- Implicit restore as part of dotnet new
- Moved the CLI to use NuGet FallbackFolder for the CLI first run experience

# Project System
@srivatsn 
- Multi-Target-Framework view in the solution explorer
- Moved Integration tests to new FX​​
- NETCore 2.0 templates and TFM Picker
	- Visual Basic and F# support.
	- VB property pages – one left.
- Setup authoring for 2.0 runtimes.
- Analyzer rules in the project tree.
- Accessibility and other bug fixes.

# IDE
@Pilchie 
- Team is dogfooding Roslyn from “master”
- Generate field/property/null check for param
- More options for property generation/style
- SQLite based persistence (to enable more out-of-proc work)
- Out-of-process: FAR/NavigateTo/AddUsing/Search in SE
- Code Style Assemblies and nupkgs created
- Accessibility fixes and discussion
- Porting integration tests 56/104 done
- Numerous fixes to feedback issues</Description>
  </Issue>
  <Issue>
    <IssueID>18716</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>GoToDefinition on method implementation should go to overridden method.</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>30/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18716</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public abstract class Parent
{
    public abstract void Method();
}

public class Child : Parent
{
    public override void Method()
    {
    }
}
`</Code>
    <Description>``

If I use `go to definition` or press `F12` on `Child.Method` name, I expect it to go to `Parent.Method` (the overridden method). I find this tiny feature to be very helpful instead of manually looking up the inheritance chain to find out which parent class or interface is defining the abstract or virtual parent.

The same is true for parent type (`class` or `interface`), and member type (`method`, `property`, etc...).</Description>
  </Issue>
  <Issue>
    <IssueID>18714</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting test failed</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>15/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18714</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Stacktrace

MESSAGE:
\r\nExpected:\r\n[77..80)\r\nActual:\r\n[77..80)\r\n[91..94)\r\nDifferences:\r\n [77..80)\r\n++&gt; [91..94)\r\n\r\nExpected: True\r\nActual: False
+++++++++++++++++++
STACK TRACE:
at Roslyn.Test.Utilities.AssertEx.SetEqual[T](IEnumerable`1 expected, IEnumerable`1 actual, IEqualityComparer`1 comparer, String message, String itemSeparator) at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Verify(String marker, IDictionary`2 spans) in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs:line 54 at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting() in q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs:line 39
`</Code>
    <Description>``

</Description>
  </Issue>
  <Issue>
    <IssueID>18713</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>18713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>XML Doc Comment handles Enter incorrectly when there is whitespace before caret</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>12/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18713</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.1.26405.1

**Steps to Reproduce**:

``


![image](



</Description>
  </Issue>
  <Issue>
    <IssueID>18712</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>When the IPropertyInitializer's Target value is an indexed property or ref returning method, there is no way to get the arguments specified to that target</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18712</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported by @evildour Refer dotnet/roslyn-analyzers#1142 (comment)</Description>
  </Issue>
  <Issue>
    <IssueID>18711</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Comments are lost when changing modifiers via SyntaxEditor</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>22/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18711</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static void Main()
{
    const string source = @"
        class C
        {
            public /*leading*/ static /*intermediate*/ readonly /*trailing*/ string F = """";
        }";

    Document document = new AdhocWorkspace()
        .AddProject("TestProject", LanguageNames.CSharp)
        .AddMetadataReferences(new[]
        {
            MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
        })
        .WithCompilationOptions(
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
        .AddDocument("Source.cs", source)
        .Project
        .Documents
        .First();

    SemanticModel model = document.GetSemanticModelAsync().Result;
    if (model.Compilation.GetDiagnostics().Any())
    {
        throw new Exception(string.Join(
            Environment.NewLine, model.Compilation.GetDiagnostics()));
    }

    ISymbol field = model.Compilation.GetTypeByMetadataName("C").GetMembers("F").Single();
    FieldDeclarationSyntax fieldSyntax = 
        (FieldDeclarationSyntax) field.DeclaringSyntaxReferences[0].GetSyntax().Parent.Parent;

    SyntaxNode syntaxRoot = document.GetSyntaxRootAsync().Result;
    SyntaxEditor editor = new SyntaxEditor(syntaxRoot, document.Project.Solution.Workspace);

    DeclarationModifiers newModifiers = editor.Generator.GetModifiers(fieldSyntax) - 
        DeclarationModifiers.Static - DeclarationModifiers.ReadOnly + 
        DeclarationModifiers.Const;
    editor.SetModifiers(fieldSyntax, newModifiers);

    SyntaxNode newSyntaxRoot = editor.GetChangedRoot();
    Document newDocument = document.WithSyntaxRoot(newSyntaxRoot);
    SyntaxNode formatted = Formatter.Format(newDocument.GetSyntaxRootAsync().Result, 
        newDocument.Project.Solution.Workspace);
    var newSource = formatted.ToString();

    Console.WriteLine(newSource);
}


**Expected Behavior**:
Program output:

class C
{
    public /*leading*/ /*intermediate*/ /*trailing*/ const string F = "";
}


**Actual Behavior**:
Program output:

class C
{
    public /*leading*/ const string F = "";
}
`</Code>
    <Description>See 


**Steps to Reproduce**:
Consider the next program:
``

Order and precise location of the comments may differ, they just should be preserved.</Description>
  </Issue>
  <Issue>
    <IssueID>18710</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Using SemanticModel.GetOperation on an IPropertyInitializer's Syntax produces an IAssignmentExpression, not the original IPropertyInitializer</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18710</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported by @evildour Refer dotnet/roslyn-analyzers#1142 (comment)</Description>
  </Issue>
  <Issue>
    <IssueID>18709</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>For initializations of indexed properties, IPropertyInitializer does not expose the arguments specified for the index.</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>12/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18709</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Reported by @evildour  Refer </Description>
  </Issue>
  <Issue>
    <IssueID>18707</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>18707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Workspace options API behaves very stangely</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18707</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From #13430:

&gt; These tests share a workspace via a class fixture. Some of the tests validate behaviour with non-default options. The goal of my changes was to apply these non-default values, then restore the options to the original state once the test is complete.

&gt; The  OptionSet  is presented as what looks like a standard immutable API, so my plan was to read  Workspace.Options  and store it for later. In the meantime I would use that snapshot to create a new instance with the non-default values needed for the test, and apply them to the workspace (this part worked fine). Once the test was done, my attempts to apply the original  OptionSet  to the workspace never seemed to have any effect - the non-default options would stay in effect and cause subsequent tests to fail. The reason I found was that  WorkspaceOptionSet  is not actually a snapshot, but a cache only of "observed" values. Before the test, no options had been observed, so restoring the original instance just restored an empty cache - reads still went through to the underlying  IOptionService  which still contained the non-default values.

&gt; My workaround for this was to "observe" all the options before I changed them. That way, I could get an  OptionSet  primed with the default values, so applying it afterwards would actually change something. This was frustrated by always getting an empty  WorkspaceOptionSet  from  Workspace.Options , which was effectively throwing away any of the default values I'd previously observed.

In summary:

1. `OptionSet` looks like an immutable snapshot, but the workspace implementation isn't.
2. Reading workspace options always returns [an empty WorkspaceOptionSet]( losing any cached values.

cc @jasonmalinowski</Description>
  </Issue>
  <Issue>
    <IssueID>18706</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ServiceHub.RoslynCodeAnalysisService32.exe high CPU when overriding methods from Object</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>23/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>18706</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio Enterprise 2017 Version 15.1 (26403.3) Release

**Steps to Reproduce**:
1. Open a large solution
2. Open a file that has a class that overrides ToString, Equals, and or GetHashCode

**Expected Behavior**:
It would be nice if we could disable CodeLense from getting the count of references for methods that are overridden from Object to prevent massive CPU spikes.

**Actual Behavior**:
ServiceHub.RoslynCodeAnalysisService32.exe spins up to almost 100% CPU while it goes out and calculates all the references to ToString, Equals, and GetHashCode</Description>
  </Issue>
  <Issue>
    <IssueID>18705</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Failing test] Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>13/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18705</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
    Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting
      
      Expected:
      [77..80)
      Actual:
      [77..80)
      [91..94)
      Differences:
          [77..80)
      ++&gt; [91..94)
      
      Expected: True
      Actual:   False
      Stack Trace:
           at Roslyn.Test.Utilities.AssertEx.SetEqual[T](IEnumerable`1 expected, IEnumerable`1 actual, IEqualityComparer`1 comparer, String message, String itemSeparator)
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs(54,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Verify(String marker, IDictionary`2 spans)
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\VisualBasic\BasicReferenceHighlighting.cs(39,0): at Roslyn.VisualStudio.IntegrationTests.Basic.BasicReferenceHighlighting.Highlighting()
`</Code>
    <Description>


``

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>18703</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>random CPU spikes in idle VS</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>07/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Performance</Name>
        <IssueID>18703</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_From @abpiskunov on April 14, 2017 0:17_I was looking at VS at some moment in Task Manager and noticed that CPU started to grow to 50-60%  randomly without any action in VS (it was opened for a while already).  It was going on for sometime, then I decided to catch a trace and took etl: \\vwdbuild01\Temp\antonpis\dump\RandomCPU.etl  and it showed some code analysis going on, not sure if it is roslyn or Code Lense ..  

See if you want to investigate that…
_Copied from original issue: dotnet/project-system#1993_</Description>
  </Issue>
  <Issue>
    <IssueID>18700</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>AssemblySymbol.GetWellKnownType API should be removed</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>18700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>18700</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

This method is not used by the compiler in any meaningful way, moreover its implementation is incorrect because it doesn't follow the lookup rules for well-known types. We should remove it before someone uses it by mistake, assuming it does the right thing.</Description>
  </Issue>
  <Issue>
    <IssueID>18699</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>18699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AbstractLanguageService crashes VS with InvalidOperationException</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>22/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>18699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>18699</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.3.0.6161310

**Steps to Reproduce**:

1. Open Roslyn.sln
2. Modify properties of a project

**Actual Behavior**:
Visual Studio crash
``</Description>
  </Issue>
  <Issue>
    <IssueID>18697</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>18697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OOP crashes VS on solution TODO parsing</Title>
    <CreatedDate>14/04/2017</CreatedDate>
    <ClosedDate>19/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18697</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Roslyn Nightly 2.3.0.6161309

**Steps to Reproduce**:
1. Open Roslyn.sln
2. Wait

**Actual:**

devenv crashes due to OOP
``
</Description>
  </Issue>
  <Issue>
    <IssueID>18694</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make UpgradeProject work for VB</Title>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>13/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18694</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The driving scenario is tuple inferred names ( (VB 15.3).

Update: also VB 15.5 features.</Description>
  </Issue>
  <Issue>
    <IssueID>18691</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Guard dllexport code for sqlite on mono</Title>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>01/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18691</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See: 

To be fixed at </Description>
  </Issue>
  <Issue>
    <IssueID>18689</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jinujoseph</FixedById>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Reenable analzyers that uses IOperation API</Title>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>27/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18689</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have to disable a few IOpeartion based analyzers from PR #18494 onward because it has changed IOperation interface. Will need to enable them as soon as the following prerequisite are met:

 - [x]  Fix the implementation of IHasArgumentsExpression.
 - [x]  update analyzers to use the new API, verify their behavior is correct, and release them.
 - [ ] #19806 update roslyn to reference updated analyzer.

Disabled analyzers:
- RS0012
- RS0014
- CA1825</Description>
  </Issue>
  <Issue>
    <IssueID>18686</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Convert if to switch" should only fire if there's at least two checks</Title>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>25/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Approved to merge</Name>
        <IssueID>18686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18686</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Current as of this bug filing.

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>18682</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can Deconstruct instance methods never be generic?</Title>
    <CreatedDate>13/04/2017</CreatedDate>
    <ClosedDate>13/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>18682</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

class Test
{
    object x, y;
    
    public void Deconstruct&lt;T&gt;(out T x, out T y)
    {
        x = (T) this.x;
        y = (T) this.y;
    }
    
    static void Main()
    {
        var test = new Test { x = 1, y = 2 };
        // Doesn't compile
        //(int a, int b) = test;
        
        // This is fine: int is inferred
        int a, b;
        test.Deconstruct(out a, out b);
    }
}
`</Code>
    <Description>**Version Used**: 2.1.0.61520

**Steps to Reproduce**:

``

The commented out code produces error messages of:

&gt; Test.cs(16,26): error CS0411: The type arguments for method 'Test.Deconstruct&lt;T&gt;(out T, out T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
&gt; Test.cs(16,26): error CS8129: No Deconstruct instance or extension method was found for type 'Test', with 2 out parameters and a void return type.

Now I'd start by arguing that the second message is incorrect: it clearly *did* find a Deconstruct instance method with 2 out parameters and a void return type... but it wasn't deemed appropriate due to the first message.

I'm trying to write (for C# in Depth) the rules of `Deconstruct` methods. Would it be fair to say that:

- Instance `Deconstruct` methods can't be generic
- Extension `Deconstruct` methods can be generic, but all type arguments must be inferred via just the first (`this`) parameter

? That second statement is *very* woolly to start with, given the complexities of type inference, but if we can start with something in the right direction, that would be good.</Description>
  </Issue>
  <Issue>
    <IssueID>18563</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash in OOP.</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>28/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18563</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Note: i'm dogfooding a very recent Roslyn.  I just encountered this crash:

``

Tagging @heejaechang </Description>
  </Issue>
  <Issue>
    <IssueID>18559</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0007 triggers on cast in foreach</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18559</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio Community 2017, build 26403.0

**Steps to Reproduce**:

1. Create a foreach loop with an explicit cast such as `foreach (Match match in myMatchCollection)`
2. Enable IDE0007

**Expected Behavior**: IDE0007 should not trigger, since the explicit type does not match the type that would be generated from using a `var`.

**Actual Behavior**: IDE0007 triggers, and will incorrectly replace the explicit cast if the suggestion lightbulb is used, causing errors.
</Description>
  </Issue>
  <Issue>
    <IssueID>18556</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid code generated when implementing interface through explicitly implemented property</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>08/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18556</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2017 Update 1 and master 85ca862c20fd1cb4192f3a42521eeadcba6828cb



**Steps to Reproduce**:

1. Create a new project with the following:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>khyperia</FixedById>
        <IssueID>18555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Misleading error message for local function</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>09/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>18555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>18555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
public void M() {
   void Local()
}
`</Code>
    <Description>**Version Used**: 
2.0

**Steps to Reproduce**:

Compile the following code:
``

**Expected Behavior**:

&gt; error CS0XXX: local function 'Local()' must declare a body

**Actual Behavior**:

&gt; error CS0501: 'Local()' must declare a body because it is not marked abstract, extern, or partial

Note that you neither can mark local function with `abstract`, `extern` or `partial` modifier</Description>
  </Issue>
  <Issue>
    <IssueID>18554</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deconstruction assigning to write-only indexer causes compiler crash</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Test
{
    int this[int index]
    {
        set =&gt; Console.WriteLine($"{index}={value}");
//        get =&gt; throw new Exception("Shouldn't be called");
    }
    
    void BreakCompiler()
    {
        var tuple = (1, 2);
        (this[0], this[1]) = tuple;
    }

    static void Main()
    {
        new Test().BreakCompiler();
    }    
}
`</Code>
    <Description>**Version Used**: 2.1.0.61520

**Steps to Reproduce**: Compile the code below

using System;

``

**Expected Behavior**: Indexer is called twice

**Actual Behavior**: Compiler crashes with code -2146232797

Note that uncommenting the getter for the indexer - even though it's not called anywhere - fixes the breakage.</Description>
  </Issue>
  <Issue>
    <IssueID>18550</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`WasCompilerGenerated` property on bound node is not a robust way to determine `ArgumentKind` in VB</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>18550</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The implementation in VB bound tree provides a fully populated list of arguments, including arguments with default value and array that is generated by compiler as argument for `ParamArray` parameter for invocation of expanded form. However, we currently don't have definitive information on the bound node that tells us if 

1. it is a default value argument, or 
2. it is an array created by compiler because or it is an array provided explicitly by caller for the normal form of invocation. 

At the moment, we rely on checking `WasCompilerGenerated` property on the argument bound nodes, which might break in many cases. @AlekseyTs proposed a more robust approach, basically to create additional wrapper nodes, and during binding we wrap up argument nodes of default value and paramarray argument generated by compiler.
</Description>
  </Issue>
  <Issue>
    <IssueID>18549</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>18549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`IHasArgumentsExpression.ArgumentsInEvaluationOrder` in C# should not use private implementation</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18549</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, there is a lot of logic duplicated in C#'s implementation and there is a lot of opportunities to deviate from what LocalRewriter is doing. I believe our goal should be to return result consistent with what LocalRewriter would produce. As such we should find a way to share that logic, IOperation should not have its own private implementation.

With this in mind, I have made the change for IHasArgumentsExpression interface in #18494 with minimal change in implementation, to avoid doing unnecessary throwaway work. As a result, **the contract for `IHasArgumentsExpression.ArgumentsInEvaluationOrder` is broken**, as current implementation is the old `ArgumentsInSourceOrder`, therefore missing all default arguments (including empty param array). This issue is intended to track this as well, as I believe getting rid of private implementation would also fix this.</Description>
  </Issue>
  <Issue>
    <IssueID>18548</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>genlu</FixedById>
        <IssueID>18548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InConversion and OutConversion of VB ByRef argument exposes placeholder nodes as IOperations</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>18548</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When passing a modifiable element as argument for a VB `ByRef` parameter, the `In/OutConversion`  properties of  the `IArgument` operation would expose placeholder nodes as `Operand` (as those properties themselves are of type `IConversionExpression`). 

``

Related: #8905</Description>
  </Issue>
  <Issue>
    <IssueID>18546</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Insertion tool should take a global mutex to prevent shared use of the Git workspace</Title>
    <CreatedDate>08/04/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18546</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since the insertion tool parties on the Git checkout of the VS source tree, if you manually ran it while an automated job was running on the same machine all sorts of things would blow up. We had one PR where we think this might have happened. It should take a global mutex to prevent that from happening.</Description>
  </Issue>
  <Issue>
    <IssueID>18544</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>18544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MSBuildWorkspace.OpenProjectAsync().Result is null under load</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>11/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18544</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2015
Microsoft.CodeAnalysis.Workspaces.Desktop.dll 1.0.0.50618
In package Microsoft.CodeAnalysis.Workspaces.Common.1.0.1.nupkg
**Steps to Reproduce**:
I am analyzing over 1000 projects for some pattern of code. I am using MSBuildWorkspace in a standalone analyzer to load these projects using the OpenProjectAsync method.  
The MSBuildWorkspace is static and is shared, while the projects are loaded and analyzed in parallel through multiple tasks.  
Occasionally, OpenProjectAsync().Result is null and there is no other exception thrown.  It seems random and there does not seem to be a pattern for these projects.  I could open the failed project the next time around with no issues.
If I create a separate workspace every time, per project, then all the projects get opened correctly and there is no issue, but it is *significantly* slower.  Creating the workspace is both time and memory intensive, as I find.

Any idea why OpenProjectAsync().Result returns null occasionally?  Can the MSBuildWorkspace instance be shared like how I am doing?

**Expected Behavior**:
Either the project should open or there should be some error thrown.
**Actual Behavior**:
No error thrown and instead the project is null.</Description>
  </Issue>
  <Issue>
    <IssueID>18537</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18537</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect syntax mapping for IOperation corresponding to an invalid invocation expression </Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>25/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18537</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18537</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18537</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>18537</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See comment 

It seems more logical for the syntax of the receiver to have just Console instead of Console.WriteLine2</Description>
  </Issue>
  <Issue>
    <IssueID>18535</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inconsistent typing of multidimensional arrays in VB.NET</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>08/04/2017</ClosedDate>
    <IssueLabels />
    <Code>
    Dim a = {"a"}
    Dim o1 = {{"a"}}
    Dim o2 = {a}

2. Put cursor over o1 and o2 and observe their types

**Expected Behavior**:
`o1` and `o2` should be of same type

**Actual Behavior**:
`o1` is of type `String(,)` and `o2` is of type `String()()`

My expectations for consistency are driven not only by common sense but also by the fact that `o1` and `o2` are typed the same in similar c# code:

    var a = new[] { "a" };
    var o1 = new[] { new[] { "a" } };
    var o2 = new[] { a };
`</Code>
    <Description>**Version Used**: VS: 14.0.25123.00 Update 2

**Steps to Reproduce**:
1. Have the following code
``
</Description>
  </Issue>
  <Issue>
    <IssueID>18533</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Nuget package incompatibility between latest versions of CodeDom.Providers.DotNetCompilerPlatform and .Net.Compilers</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Latest version of VS2017

**Steps to Reproduce**:

1.  Create a ASP.NET web application with WebAPI
2.  Upgrade nuget package for Microsoft.Net.Compilers from v1.3.2 (default) to v2.0.1
3.  Publish (I tested via folder publishing)
4.  Test API


**Expected Behavior**:
I would expect the API to work without errors.

**Actual Behavior**:
&gt;Compilation Error
&gt;
&gt;Description: An error occurred during the compilation of a resource required to service this request. &gt;Please review the following specific error details and modify your source code appropriately. 
&gt;
&gt;Compiler Error Message: The compiler failed with error code -532462766.
&gt;
&gt;
&gt;Show Detailed Compiler Output:
&gt;
&gt;
&gt;Version Information: Microsoft .NET Framework Version:4.0.30319; ASP.NET Version:4.0.30319.36366`

If I downgrade the Microsoft.Net.Compilers package back down to 1.3.2 everything works fine. Dependency for Microsoft.CodeDom.Providers.DotNetCompilerPlatform says it works with &gt;=1.3.2 of .Net.Compilers, but perhaps it's not compatible with v2.0.1.</Description>
  </Issue>
  <Issue>
    <IssueID>18531</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>tmat</FixedById>
        <IssueID>18531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Modifying VB Integer value while debugging causing crash</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>17/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>18531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-EnC</Name>
        <IssueID>18531</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.2.0.6160306

**Steps to Reproduce**:

1. Create a new VB Console App
2. Replace code with:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18527</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent CS0019 behaviour with nullable enum types</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>18527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18527</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
enum E : byte
{
      A = 1
}


**1. Compilable version**:

csharp
static void Main(string[] args)
{
      E? e = E.A;
      byte b = (byte) (e ?? 0);
}


**2. CS0019 version** (`0` changed to `1`):

csharp
static void Main(string[] args)
{
      E? e = E.A;
      byte b = (byte) (e ?? 1);
}


**3. "Fixed" CS0019 version**:

csharp
static void Main(string[] args)
{
      E? e = E.A;
      byte b = (byte) (e ?? (E)1); // or (e ?? E.A) but not (e ?? (byte)1)
}


**4. Simplified version** (somewhat optimized code transformation for future compiler improvement):

csharp
static void Main(string[] args)
{
      E? e = E.A;
      byte b = (byte) e.GetValueOrDefault((E) 1); // or e.GetValueOrDefault(E.A)
}


---

As far as I can see here is the following (in square brackets reference to code example):

- [1] compiler output code as:

csharp
    E? e = new E?(E.A);
    byte b = e.HasValue ? ((byte) e.GetValueOrDefault()) : ((byte) 0);
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017
Version 15.1 (26403.0) Release
VisualStudio.15.Release/15.1.0+26403.0
Microsoft .NET Framework
Version 4.7.02046

**Code to Reproduce**:

``

- [2] compiler can't "understand" `1` constant in code although it just worked with `0` (probably since `default(E) == 0` ?) with `CS0019` (main reason why I fill this issue as `inconsistent behaviour`)

- [3] compilable variants

- [4] just optional suggestion for future improvements of nullable type handling

Hopefully, fix will be for [2] (make it compilable) and not for [1] (make it `CS0019`).</Description>
  </Issue>
  <Issue>
    <IssueID>18526</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>18526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Implemented dotnet/csharplang#323</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>18526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>18526</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@gafter 
I have implemented your proposal dotnet/csharplang#323 together with dotnet/csharplang#328 (default coalescing operator). It wasn't so complicated after all. Maybe there are some side-effects I have overseen?
Currently there are no tests.

I would like to submit a PR for a first review.

(See 

~Update:
I just encountered a slight problem. In case of~
``
~the behaviour of a *default-coalescing-operator* is completely arbitrary. I've got to sort that out, first!~
Sorted that out. It behaves as expected by the specs (`c?.x` gets converted to (int?) and thus has no ambiguity).


</Description>
  </Issue>
  <Issue>
    <IssueID>18524</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Build problem with Turkish(Turkey) regional settings</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>18524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2017 Enterprise / 15.1 (26403.0) Release

**Steps to Reproduce**:

1. Change Windows's regional settings to Turkish (Turkey).
2. Run Restore.cmd.
3. Run Build.cmd.

**Expected Behavior**: Build.cmd should run without any error.

**Actual Behavior**: There are lots of errors and build failed.  I also cannot build the solution on Visual Studio too. 

Output file:  [build.txt](

</Description>
  </Issue>
  <Issue>
    <IssueID>18522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>18522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>OOM in Diagnostic analyzer after changing branches in git</Title>
    <CreatedDate>07/04/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>18522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Description: The application requested process termination through System.Environment.FailFast(string message).
Message: System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Threading.ExecutionContext.Capture(StackCrawlMark&amp; stackMark, CaptureOptions options)
   at System.Threading.Tasks.Task.ContinueWith[TResult](Func`2 continuationFunction, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, StackCrawlMark&amp; stackMark)
   at System.Threading.Tasks.Task.ContinueWith[TResult](Func`2 continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
   at Roslyn.Utilities.TaskExtensions.SafeContinueWith[TResult](Task task, Func`2 continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
   at Roslyn.Utilities.TaskExtensions.ContinueWithAfterDelay(Task task, Action continuationAction, CancellationToken cancellationToken, Int32 millisecondsDelay, TaskContinuationOptions taskContinuationOptions, TaskScheduler scheduler)
   at Roslyn.Utilities.SimpleTaskQueue.&lt;&gt;c__DisplayClass6_0.&lt;ScheduleTask&gt;b__0(Int32 delay)
   at Roslyn.Utilities.SimpleTaskQueue.ScheduleTaskWorker[TTask](Func`2 taskCreator, CancellationToken cancellationToken)
   at Roslyn.Utilities.SimpleTaskQueue.ScheduleTask(Action taskAction, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticService.RaiseDiagnosticsUpdated(Object sender, DiagnosticsUpdatedArgs args)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticService.OnDiagnosticsUpdated(Object sender, DiagnosticsUpdatedArgs e)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.&lt;&gt;c__DisplayClass46_1.&lt;RaiseBulkDiagnosticsUpdated&gt;b__1(EventHandler`1 handler)
   at Roslyn.Utilities.EventMap.Registry`1.Invoke(Action`1 invoker)
   at Roslyn.Utilities.EventMap.EventHandlerSet`1.RaiseEvent(Action`1 invoker)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.&lt;&gt;c__DisplayClass46_0.&lt;RaiseBulkDiagnosticsUpdated&gt;b__0(DiagnosticsUpdatedArgs args)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.RaiseDiagnosticsRemoved(DocumentId documentId, Solution solution, StateSet stateSet, AnalysisKind kind, Action`1 raiseEvents)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.&lt;&gt;c__DisplayClass41_0.&lt;RemoveDocument&gt;b__0(Action`1 raiseEvents)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.&lt;&gt;c__DisplayClass46_2.&lt;RaiseBulkDiagnosticsUpdated&gt;b__2()
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass15_0.&lt;ContinueWithAfterDelay&gt;b__1(Task _)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass3_0.&lt;SafeContinueWith&gt;b__0(Task antecedent)
   at Roslyn.Utilities.TaskExtensions.&lt;&gt;c__DisplayClass7_0`1.&lt;SafeContinueWith&gt;b__0(Task t)
Stack:
   at System.Environment.FailFast(System.String, System.Exception)
   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)
   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass7_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.ExecutionContext.Capture(System.Threading.StackCrawlMark ByRef, CaptureOptions)
   at System.Threading.Tasks.Task.ContinueWith[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`2&lt;System.Threading.Tasks.Task,System.__Canon&gt;, System.Threading.Tasks.TaskScheduler, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.StackCrawlMark ByRef)
   at System.Threading.Tasks.Task.ContinueWith[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`2&lt;System.Threading.Tasks.Task,System.__Canon&gt;, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
   at Roslyn.Utilities.TaskExtensions.SafeContinueWith[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Threading.Tasks.Task, System.Func`2&lt;System.Threading.Tasks.Task,System.__Canon&gt;, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
   at Roslyn.Utilities.TaskExtensions.ContinueWithAfterDelay(System.Threading.Tasks.Task, System.Action, System.Threading.CancellationToken, Int32, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
   at Roslyn.Utilities.SimpleTaskQueue+&lt;&gt;c__DisplayClass6_0.&lt;ScheduleTask&gt;b__0(Int32)
   at Roslyn.Utilities.SimpleTaskQueue.ScheduleTaskWorker[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`2&lt;Int32,System.__Canon&gt;, System.Threading.CancellationToken)
   at Roslyn.Utilities.SimpleTaskQueue.ScheduleTask(System.Action, System.Threading.CancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticService.RaiseDiagnosticsUpdated(System.Object, Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticService.OnDiagnosticsUpdated(System.Object, Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService+&lt;&gt;c__DisplayClass46_1.&lt;RaiseBulkDiagnosticsUpdated&gt;b__1(System.EventHandler`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs&gt;)
   at Roslyn.Utilities.EventMap+Registry`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Action`1&lt;System.__Canon&gt;)
   at Roslyn.Utilities.EventMap+EventHandlerSet`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RaiseEvent(System.Action`1&lt;System.__Canon&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService+&lt;&gt;c__DisplayClass46_0.&lt;RaiseBulkDiagnosticsUpdated&gt;b__0(Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.RaiseDiagnosticsRemoved(Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Solution, StateSet, AnalysisKind, System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+&lt;&gt;c__DisplayClass41_0.&lt;RemoveDocument&gt;b__0(System.Action`1&lt;Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs&gt;)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService+&lt;&gt;c__DisplayClass46_2.&lt;RaiseBulkDiagnosticsUpdated&gt;b__2()
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass15_0.&lt;ContinueWithAfterDelay&gt;b__1(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass3_0.&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass7_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWith&gt;b__0(System.Threading.Tasks.Task)
   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticEventTaskScheduler.Start()
   at Roslyn.Utilities.TaskFactoryExtensions+&lt;&gt;c__DisplayClass1_0.&lt;SafeStartNew&gt;b__0()
   at System.Threading.Tasks.Task.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)
   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)
   at System.Threading.Tasks.ThreadPoolTaskScheduler.LongRunningThreadWork(System.Object)
   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
   at System.Threading.ThreadHelper.ThreadStart(System.Object)
`</Code>
    <Description>**Version Used**: 
VS: 15.2 (d15rel.26405.2)
Roslyn: 2.3.0.6160605

**Steps to Reproduce**:

1. Open Roslyn.sln and work for a while (with FSA on).
2. Switch Git branches.
3. Choose NOT to reload projects, but do reload files.
4. Close VS.

**Actual Behavior**:
Dump at:
"\\mlangfs1\public\kevinpi\devenv.exe.11980.dmp"

VS OOMs with the stack:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>18518</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Possibly redundant filtering of diagnostics in CompileMethods</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>12/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        internal override bool CompileMethods(
            CommonPEModuleBuilder moduleBuilder,
            bool emittingPdb,
            bool emitMetadataOnly,
            bool emitTestCoverageData,
            DiagnosticBag diagnostics,
            Predicate&lt;ISymbol&gt; filterOpt,
            CancellationToken cancellationToken)
        {
            bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken));


C#
       internal ImmutableArray&lt;Diagnostic&gt; GetDiagnostics(CompilationStage stage, bool includeEarlierStages, CancellationToken cancellationToken)
        {
...
        var result = DiagnosticBag.GetInstance();
            FilterAndAppendAndFreeDiagnostics(result, ref builder);
            return result.ToReadOnlyAndFree&lt;Diagnostic&gt;();
        }
`</Code>
    <Description>The `GetDiagnostics` method already applies the same filtering.

``</Description>
  </Issue>
  <Issue>
    <IssueID>18517</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpInitializeMemberFromParameterCodeRefactoringProvider encountered an error and has been disabled</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest dogfooding bits as of this writing.

**Steps to Reproduce**:

1. Checkout this branch: 
2. Open "CSharpGoToImplementation.cs"

**Expected Behavior**: No infobar errors.

**Actual Behavior**: Infobar error:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>18515</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>18515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Specifications are not up to date</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>13/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>18515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18515</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We are shipping an out-of-date specification for C# with Visual Studio. We should stop doing that and link to the online specifications.

This is also [tracked internally at 405168]( and [428131](</Description>
  </Issue>
  <Issue>
    <IssueID>18512</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>18512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VisualStudioSetup and /rootsuffix RoslynDev crash in current master branch</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>11/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18512</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I tried it several times to clean, restore and recompile, always the same problem as stated in the title.
Until now my previous compilations all worked.
I'm trying C# features.</Description>
  </Issue>
  <Issue>
    <IssueID>18510</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect IDE0004 (Cast is redundant) when negating enum value</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>08/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
enum Sign
{
    Positive = 1,
    Negative = -1
}

class T
{
    void Foo()
    {
        Sign mySign = Sign.Positive;
        Sign invertedSign = (Sign)(-(int)mySign);
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2017 (15.1 - 26403.0)

**Steps to Reproduce**:

``

**Expected Behavior**:

IDE0004 is not reported for the `(int)` cast in `(int)mySign`.

**Actual Behavior**:

IDE0004 is reported for the `(int)` cast in `(int)mySign`. Removing the cast results in the following compilation error:

&gt; CS0023: Operator '-' cannot be applied to operand of type 'Sign'

**Reference**:

This appears related to, but not quite a duplicate of #11008.

This was originally reported here:
</Description>
  </Issue>
  <Issue>
    <IssueID>18509</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18509</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing FieldReferenceExpression operations in collection initializers</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18509</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18509</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18509</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18509</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

=================================

#### Microsoft.Maintainability.Analyzers
#### AvoidUnusedPrivateFieldsAnalyzer
#### Repro steps
1. Open Analyzers.sln
2. Change Dependencies\CodeAnalysis\project.json to include: `"Microsoft.CodeAnalysis.FxCopAnalyzers": "1.2.0-beta1"`
3. Restore NuGet packages for solution
4. Open BasicInvokeTheCorrectPropertyToEnsureCorrectUseSiteDiagnostics.vb

![falsereportca1823](

Seems like an IOperation bug (analyzer is just looking for all FieldReferenceExpressions), but someone should confirm before porting it to Roslyn repo.


=============

It's either an straightforward IOperation bug or a more subtle issue. If the compiler is replacing uses of a named constant with its value in the bound trees, then we will have to get clever to retain the knowledge that the constant came from a symbol.
This is almost certainly not fixed.
</Description>
  </Issue>
  <Issue>
    <IssueID>18507</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>18507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Checklist for completion of private protected feature</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>04/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18507</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See also 

- [x] Developer needs to do an IDE test pass to ensure basic functionality is maintained. See [IDE Test Plan](
- [x] Reviewer needs to create a flavor of the test plan for the feature involved.  In many cases this will just be stripping out unnecessary elements (example expression classification prob not of interest to ref asemblies).  But it should also call out areas of interest particular to this feature. See [Compiler Test Plan]( *Test plan is at 
- [x] Reviewer needs to validate the test coverage is sufficient for the test plan and note the test gaps
- [x] Add a test that `private protected` members are excluded in reference assemblies. See  for context.

We'll expand these sub-bullets as work progresses.</Description>
  </Issue>
  <Issue>
    <IssueID>18506</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation API entries should stay in PublicAPI.Unshipped.txt</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>12/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18506</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

Seems like this PR incorrectly moved unshipped IOperation APIs to PublicAPI.Shipped.txt. 

Anything that touches the IOperation API surface should be unshipped:
  1. OperationKind
  2. IOperation API surface in MS.CA.Semantics namespace (which includes the IOperation interfaces, OperationWalker, OperationVisitor, etc.) 
  3. SemanticModel.GetOperation API.
  4. RegisterOperationAction
  5. OperationAnalysisContext</Description>
  </Issue>
  <Issue>
    <IssueID>18504</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE offers suggestion to "Inline temporary variable" where it results in a build error</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18504</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.01.0.61520 (d15prerel 26404.00)

**Steps to Reproduce**:

This is similar to #3846, but results in a build error instead of a code behavior change, so perhaps Roslyn should be able to detect this scenario and not offer "Inline temporary variable"?

1. Create a blank C# console app
2. Add the following methods to the Program class:
``
3. IDE provides lightbulb to "Inline temporary variable" on stringValue in Method.  Use it

**Expected Behavior**: "Inline temporary variable" is not suggested because it will result in a build error.

**Actual Behavior**: Using "Inline temporary variable" results in build error CS0165 -- "Use of unassigned local variable 'stringValue'"
</Description>
  </Issue>
  <Issue>
    <IssueID>18500</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Performance] Inline Rename takes minutes to update two references</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>18500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>18500</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
fltmgr.sys!TreeUnlinkMulti+0x2
fltmgr.sys!DeleteNameCacheNodes+0xe2
fltmgr.sys!FltpFreeNameCacheCreateCtrl+0x2f
fltmgr.sys!FltpLegacyProcessingAfterPreCallbacksCompleted+0x6a9
fltmgr.sys!FltpCreate+0x2f5
ntoskrnl.exe!IopParseDevice+0x1655
ntoskrnl.exe!ObpLookupObjectName+0x8b2
ntoskrnl.exe!ObOpenObjectByNameEx+0x1dd
ntoskrnl.exe!NtQueryFullAttributesFile+0x189
ntoskrnl.exe!KiSystemServiceCopyEnd+0x13
ntdll.dll!NtQueryFullAttributesFile+0x14
wow64.dll!whNtQueryFullAttributesFile+0x9a
wow64.dll!Wow64SystemServiceEx+0x155
wow64cpu.dll!ServiceNoTurbo+0xb
wow64.dll!RunCpuSimulation+0xf311
wow64.dll!Wow64LdrpInitialize+0x120
ntdll.dll!LdrpInitializeProcess+0x1551
ntdll.dll!_LdrpInitialize+0xe982
ntdll.dll!LdrInitializeThunk+0xe
ntdll.dll!_NtQueryFullAttributesFile@8+0xc
kernelbase.dll!_GetFileAttributesExW@12+0x7e
microsoft.build.ni.dll!DomainBoundILStubClass.IL_STUB_PInvoke
microsoft.build.ni.dll!Microsoft.Build.Shared.FileUtilities.FileOrDirectoryExistsNoThrow
microsoft.build.ni.dll!Microsoft.Build.Evaluation.FunctionCallExpressionNode.BoolEvaluate
microsoft.build.ni.dll!Microsoft.Build.Evaluation.NotExpressionNode.BoolEvaluate
microsoft.build.ni.dll!Microsoft.Build.Evaluation.AndExpressionNode.BoolEvaluate
microsoft.build.ni.dll!Microsoft.Build.Evaluation.GenericExpressionNode.Evaluate
microsoft.build.ni.dll!Microsoft.Build.Evaluation.ConditionEvaluator.EvaluateConditionCollectingConditionedProperties[System.__Canon,System.__Canon]
microsoft.build.ni.dll!Microsoft.Build.Evaluation.ConditionEvaluator.EvaluateCondition[System.__Canon,System.__Canon]
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateCondition
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateConditionCollectingConditionedProperties
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluatePropertyElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluatePropertyGroupElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].PerformDepthFirstPass
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateImportElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].PerformDepthFirstPass
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateImportElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].PerformDepthFirstPass
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateImportElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].PerformDepthFirstPass
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].EvaluateImportElement
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].PerformDepthFirstPass
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Evaluate
microsoft.build.ni.dll!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Evaluate
microsoft.build.ni.dll!Microsoft.Build.Execution.ProjectInstance.Initialize
microsoft.build.ni.dll!Microsoft.Build.Execution.ProjectInstance..ctor
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.LoadProjectIntoConfiguration
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProject&gt;d__57.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProject&gt;d__57]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildProject
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildAndReport&gt;d__49.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildAndReport&gt;d__49]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;RequestThreadProc&gt;d__48.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;RequestThreadProc&gt;d__48]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.WaitWithBuilderThreadStart
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;StartNewBuildRequests&gt;d__51.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;StartNewBuildRequests&gt;d__51]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.StartNewBuildRequests
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProjects&gt;d__33.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProjects&gt;d__33]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildProjects
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskHost+&lt;BuildProjectFilesInParallelAsync&gt;d__53.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Microsoft.Build.Framework.BuildEngineResult].Start[Microsoft.Build.BackEnd.TaskHost+&lt;BuildProjectFilesInParallelAsync&gt;d__53]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskHost.BuildProjectFilesInParallelAsync
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskHost+&lt;InternalBuildProjects&gt;d__49.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Microsoft.Build.Framework.BuildEngineResult].Start[Microsoft.Build.BackEnd.TaskHost+&lt;InternalBuildProjects&gt;d__49]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskHost.InternalBuildProjects
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild+&lt;ExecuteTargets&gt;d__77.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.Boolean].Start[Microsoft.Build.BackEnd.MSBuild+&lt;ExecuteTargets&gt;d__77]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild.ExecuteTargets
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild+&lt;BuildProjectsInParallel&gt;d__74.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.Boolean].Start[Microsoft.Build.BackEnd.MSBuild+&lt;BuildProjectsInParallel&gt;d__74]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild.BuildProjectsInParallel
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild+&lt;ExecuteInternal&gt;d__73.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.Boolean].Start[Microsoft.Build.BackEnd.MSBuild+&lt;ExecuteInternal&gt;d__73]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.MSBuild.ExecuteInternal
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteInstantiatedTask&gt;d__26.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteInstantiatedTask&gt;d__26]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder+&lt;InitializeAndExecuteTask&gt;d__24.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TaskBuilder+&lt;InitializeAndExecuteTask&gt;d__24]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteBucket&gt;d__19.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteBucket&gt;d__19]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteTask&gt;d__18.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteTask&gt;d__18]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteTask&gt;d__13.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TaskBuilder+&lt;ExecuteTask&gt;d__13]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetEntry+&lt;ProcessBucket&gt;d__48.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TargetEntry+&lt;ProcessBucket&gt;d__48]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetEntry+&lt;ExecuteTarget&gt;d__42.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.TargetEntry+&lt;ExecuteTarget&gt;d__42]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetBuilder+&lt;ProcessTargetStack&gt;d__22.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.TargetBuilder+&lt;ProcessTargetStack&gt;d__22]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetBuilder+&lt;BuildTargets&gt;d__11.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.TargetBuilder+&lt;BuildTargets&gt;d__11]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.TargetBuilder.BuildTargets
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProject&gt;d__57.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[System.__Canon].Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildProject&gt;d__57]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildProject
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildAndReport&gt;d__49.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;BuildAndReport&gt;d__49]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder+&lt;RequestThreadProc&gt;d__48.MoveNext
microsoft.build.ni.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[Microsoft.Build.BackEnd.RequestBuilder+&lt;RequestThreadProc&gt;d__48]
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc
microsoft.build.ni.dll!Microsoft.Build.BackEnd.RequestBuilder.WaitWithBuilderThreadStart
microsoft.build.ni.dll!Microsoft.Build.Execution.BuildSubmission.Execute
microsoft.visualstudio.commonide.ni.dll!Microsoft.VisualStudio.Build.ComInteropWrapper.ProjectShim.BuildTargetsImpl
microsoft.visualstudio.commonide.ni.dll!Microsoft.VisualStudio.Build.ComInteropWrapper.ProjectShim.BuildTargetListWithOutputs
unknown!0x35fdb794
clr.dll!@COMToCLRDispatchHelper@32+0x6b
clr.dll!_COMToCLRWorker@8+0x198
unknown!0x2e7d060
csproj.dll!CLangBuildMgr::BuildTarget+0x182
csproj.dll!CLanguageReferences::ResolveReferencesViaMSBuild+0x80b8
csproj.dll!CLangReference::Refresh+0xa59f
csproj.dll!CLangReference::GetResolvedPath+0x37
csproj.dll!CVsProjExtReference::get_Path+0x41
unknown!0x3f0ac245
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetAssemblyReferencePathAsString
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsString
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsUri
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver+&lt;get_References&gt;d__34.MoveNext
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.GetReferences
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.UpdateReferenceCache
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.InitializeInternal
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.Initialize
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService+&lt;&gt;c__DisplayClass74_0.&lt;GetHostProject&gt;b__0
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.InvokeWorker
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.Invoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.InvokeCall
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvokeInbound
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.MarshalIn
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.ThreadMarshaler.MarshalIn
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService.GetHostProject
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService+&lt;&gt;c__DisplayClass77_0.&lt;GetHostProject&gt;b__0
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.InvokeWorker
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.Invoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.InvokeCall
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvokeInbound
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.MarshalIn
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.ThreadMarshaler.MarshalIn
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService.GetHostProject
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsString
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsUri
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.EnsureReferences
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver+&lt;get_References&gt;d__34.MoveNext
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.GetReferences
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.UpdateReferenceCache
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.InitializeInternal
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.Initialize
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService+&lt;&gt;c__DisplayClass74_0.&lt;GetHostProject&gt;b__0
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.InvokeWorker
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.Invoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.InvokeCall
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvokeInbound
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.MarshalIn
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.ThreadMarshaler.MarshalIn
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService.GetHostProject
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService+&lt;&gt;c__DisplayClass77_0.&lt;GetHostProject&gt;b__0
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.InvokeWorker
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.Invoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.InvokeCall
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvokeInbound
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.MarshalIn
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.ThreadMarshaler.MarshalIn
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService.GetHostProject
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsString
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.GetReferencePathAsUri
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver.EnsureReferences
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.Platform.DTEReferenceResolver+&lt;get_References&gt;d__34.MoveNext
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.GetReferences
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.UpdateReferenceCache
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.InitializeInternal
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProject.Initialize
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService+&lt;&gt;c__DisplayClass74_0.&lt;GetHostProject&gt;b__0
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.InvokeWorker
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler+Call.Invoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.InvokeCall
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvoke
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.DirectInvokeInbound
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.STAMarshaler.MarshalIn
microsoft.visualstudio.designtools.designercontract.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerContract.Isolation.Remoting.ThreadMarshaler.MarshalIn
microsoft.visualstudio.designtools.designerhost.ni.dll!Microsoft.VisualStudio.DesignTools.DesignerHost.HostServices.HostProjectService.GetHostProject
microsoft.visualstudio.designtools.xamllanguageservice.ni.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService+&lt;GetFilesForHierarchy&gt;d__79.MoveNext
microsoft.visualstudio.designtools.xamllanguageservice.ni.dll!Microsoft.VisualStudio.DesignTools.Xaml.LanguageService.XamlLanguageService.Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify.OnBeforeGlobalSymbolRenamed
microsoft.visualstudio.shell.interop.8.0.ni.dll!DomainBoundILStubClass.IL_STUB_COMtoCLR
clr.dll!@COMToCLRDispatchHelper@32+0x6b
clr.dll!_COMToCLRWorker@8+0x198
unknown!0x2e7d060
csproj.dll!CLangHierarchy::OnBeforeGlobalSymbolRenamed+0x241
microsoft.visualstudio.shell.interop.8.0.ni.dll!DomainBoundILStubClass.IL_STUB_CLRtoCOM
microsoft.visualstudio.languageservices.ni.dll!Microsoft.VisualStudio.LanguageServices.Implementation.VsRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Shared.Extensions.IRefactorNotifyServiceExtensions.TryOnBeforeGlobalSymbolRenamed
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+SymbolInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession+&lt;&gt;c__DisplayClass69_0.&lt;Commit&gt;b__0
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers[System.__Canon]
microsoft.codeanalysis.editorfeatures.ni.dll!Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.Microsoft.CodeAnalysis.Editor.ICommandHandlerService.Execute[System.__Canon]
microsoft.visualstudio.languageservices.ni.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteReturn
microsoft.visualstudio.languageservices.ni.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteVisualStudio2000
microsoft.visualstudio.languageservices.ni.dll!Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.Exec
microsoft.visualstudio.editor.implementation.ni.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec
microsoft.visualstudio.editor.implementation.ni.dll!Microsoft.VisualStudio.Editor.Implementation.CommandChainNode.InnerExec
microsoft.visualstudio.editor.implementation.ni.dll!Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Exec
microsoft.visualstudio.editor.implementation.ni.dll!Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.Exec
microsoft.visualstudio.platform.windowmanagement.ni.dll!Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.Exec
microsoft.visualstudio.platform.windowmanagement.ni.dll!Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Exec
microsoft.visualstudio.ole.interop.ni.dll!DomainBoundILStubClass.IL_STUB_COMtoCLR
clr.dll!@COMToCLRDispatchHelper@32+0x6b
clr.dll!_COMToCLRWorker@8+0x198
unknown!0x2e7d060
msenv.dll!CVSCommandTarget::ExecCmd+0x2be
msenv.dll!FTranslateAcceleratorEx+0x3fce
msenv.dll!FTranslateAccelerator+0x5f
msenv.dll!CMsoComponent::MainFTranslateMessage+0xe4
msenv.dll!CMsoComponent::FPreTranslateMessage+0x47
msenv.dll!SCMI::FPreTranslateMessage+0x1d
msenv.dll!SCM_MsoStdCompMgr::FPreTranslateMessage+0x49
msenv.dll!MainMessageLoop::ProcessMessage+0x38
msenv.dll!CMsoCMHandler::EnvironmentMsgLoop+0x8a
msenv.dll!CMsoCMHandler::FPushMessageLoop+0x54
msenv.dll!SCM::FPushMessageLoop+0xa8
msenv.dll!SCM_MsoCompMgr::FPushMessageLoop+0x2a
msenv.dll!CMsoComponent::PushMsgLoop+0x2e
msenv.dll!VStudioMainLogged+0x244
msenv.dll!_VStudioMain+0x7b
devenv.exe!util_CallVsMain+0xde
devenv.exe!CDevEnvAppId::Run+0xa30
devenv.exe!_WinMain@16+0xa4
devenv.exe!util_FormRootKeyPath+0x37b7
`</Code>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

Using Inline Rename (Ctrl + R + R) on a method, with two locations (definition and one call) takes literally minutes.

This is in a solution with aprox. 60 C# projects, one C++/cli project and 5 F# projects.

**Expected Behavior**:

It should finish in &lt; 1 minute

**Actual Behavior**:

It took minutes.

After a few minutes I attached the concurrency visualizer to create an ETW trace, and after attaching it took an additional minute.


It looks like the issue is related to either the XAML service or msbuild, here is one random callstack from the middle of the trace:

``


I have uploaded the traces here: 

</Description>
  </Issue>
  <Issue>
    <IssueID>18499</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Multiple info bars in VB file</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18499</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>New VB console app with the following text:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>18493</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>drognanar</FixedById>
        <IssueID>18493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Merge bot keeps pushing empty branches to origin</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>15/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18493</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm constantly deleting merge branches on project system that have no changes. I speculate based on the naming of them (in that they have consecutive dates) that the merge bot is pushing branches to origin even when they have no changes. This might be okay when it used to have a fork, but given it now pushes directly to the repo - it would be great if it didn't do that as these become visible to visitors of the main repo.
</Description>
  </Issue>
  <Issue>
    <IssueID>18492</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Arrows don't navigate Edit.Find box as expected</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>18492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18492</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>## Repro
1. Press Ctrl-F (for Edit.Find)
2. Type something in the search box
![image](
3. Press tab once, then use arrow keys (right then down) to go to "Find Next", "Find Previous", "Find All". This works as expected.
![image](
4. set the focus back in the search box
5. press tab 6 times, bringing the focus on "Entire Solution"
6. Try to use arrow keys to expand the choices, but the dropdown doesn't open as expected

## Expected
![image](

## Actual
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>18486</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Compiler treats hidden member as a member</Title>
    <CreatedDate>06/04/2017</CreatedDate>
    <ClosedDate>08/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18486</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
class C1
{
    private void M(int i = 0) { }
    class C2 : C1
    {
        new void M(int i) { } // hide C1.M(int)
        public void Entry()
        {
            this.M(); // error: M requires an argument
        }
    }
}


Similarly, the following should be an error, but is permitted by the compiler

 c#
class C1
{
    private void M(int i = 0) { }
    class C2 : C1
    {
        new void M(int i) { } // hide C1.M(int)
        public void Entry()
        {
            M(); // error: M requires an argument
        }
    }
}
`</Code>
    <Description>According to the C# spec, the following should be an error. But the compiler permits it

``
</Description>
  </Issue>
  <Issue>
    <IssueID>18481</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ExtractMethodCodeRefactoringProvider crashes after a local function is pasted into a method</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18481</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)


Here is the code I was writing at the time:

cs
        [Theory]
        public void Multiply(Term term, int coefficient)
        {
            void Verify(Term product)
            {
                Assert.Equal(coefficient * term.Coefficient, product.Coefficient);
                Assert.Equal(term.Exponent, product.Exponent);[|]
            }

            var product = coefficient * term;

            // Multiplication should be commutative.
            product = term * coefficient;
            Assert.Equal()
        }


I had just deleted the two `Assert.Equal` statements from below `var product = ...` and pasted them into the body of the local function when the crash happened.

If it's relevant, here is the code for the `Term` class in my project. Luckily it's largely self-contained:

cs
    public struct Term
    {
        private Term(int coefficient, int exponent)
        {
            Coefficient = coefficient;
            Exponent = exponent;
        }

        public static implicit operator Term(int value)
            =&gt; new Term(coefficient: value, exponent: 0);

        public static Term operator *(Term left, Term right)
            =&gt; new Term(
                coefficient: checked(left.Coefficient * right.Coefficient),
                exponent: checked(left.Exponent + right.Exponent));

        public static Term X(int exponent) =&gt; new Term(1, exponent);

        public int Coefficient { get; }

        public int Exponent { get; }

        public bool IsConstant =&gt; Exponent == 0;

        public Term Pow(int exponent)
            =&gt; new Term(
                coefficient: Coefficient.Pow(exponent),
                exponent: checked(Exponent * exponent));
    }
`</Code>
    <Description>**Version Used**: VS 2017

``</Description>
  </Issue>
  <Issue>
    <IssueID>18480</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Work items] infer names on tuples</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>29/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18480</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Relates to proposal  (now championed issue 

- [x] C#
- [x] VB
    - [x] Gate feature with VB Language Version
    - [x] That version should be called "15.3"
- [x] Deconstruction (`var t = ((x, y) = (1, 2));`).
- [x] Verify and fix IDE scenarios for C#
- [x] Verify and fix IDE scenarios for VB
- [x] Is it possible to let the inference happen, but report an "please update" error at usage site?
- [x] Ensure VB language version is passed from MSBuild to IDE (now tracked by 
- [x] Disallow reserved names
- [x] Optimize duplicate name logic (answer: not needed)
- [x] Confirm behavior for deconstruction-declaration (refactoring doesn't support, for now)
- [x] Find out the code to make UpgradeProject work for VB (update: we decided that UpgradeProject still won't work for VB in the dev15.3 timeframe)</Description>
  </Issue>
  <Issue>
    <IssueID>18477</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>18477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid error message on passing in parameters by ref</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>19/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>18477</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class C {
    public void M(ref readonly int x) {
    }
    
    public void User() {
        int x = 0;
        M(x);     // OK
        M(ref x); // ERROR
    }
}
`</Code>
    <Description>``

**Expected**: error CS1620: Argument 1 must be passed **_without_** the 'ref' keyword
**Actual**: error CS1620: Argument 1 must be passed **_with_** the 'in' keyword
</Description>
  </Issue>
  <Issue>
    <IssueID>18475</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Strange behaviour with Dictionary and List initializers in C# 6</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18475</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> cs
var dictionary = new Dictionary&lt;int, List&lt;int&gt;&gt;
{
	[0] = new List&lt;int&gt;{ 1 },
	[0] = { 2 }
};
		
Console.WriteLine(dictionary[0].Count);


**Expected Behavior**:
Compiler or static code analysis should raise an error, since it looks like not supported syntax.

**Actual Behavior**:
Dictionary will contain List with two elements {1, 2}

What's more case below is also compiled without problems, but during execution `KeyNotFoundException` exception will be thrown:
 cs
var dictionary = new Dictionary&lt;int, List&lt;int&gt;&gt;
{
	[0] = { 1 }
};
`</Code>
    <Description>**Version Used**: 
Roslyn 2.0.0-rc2 (C# 6)

**Steps to Reproduce**:

Run below code
``

I found it by mistake and then by analyzing generated *IL code*</Description>
  </Issue>
  <Issue>
    <IssueID>18473</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Improperly formatted/tabbed XML Doc Comment is moved on Caret Position Changed in VB</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18473</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18473</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18473</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.0.0.26228.9

**Steps to Reproduce**:

1. Using following code

``
2. Highlight XML Doc Comment
3. Shift+Tab
4. Move caret
5. Observe that XML Doc Comment is repositioned.

**Expected Behavior**: XML Doc Comment is not moved by changes in caret position.

![image](

I don't know VB well enough to be familiar with the intended behavior, but I believe it's only supposed to change on edits.

</Description>
  </Issue>
  <Issue>
    <IssueID>18470</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Getting absolute path to CompilationOption.CryptoKeyFile</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>18470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>18470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>18470</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have a `Project` which `CompilationOption.CryptoKeyFile` is a relative path. I want to get access to `CryptoKeyFile`, so I need an absolute path to `CryptoKeyFile`. As far as I understand `CompilationOption.StrongNameProvider` should resolve relative paths to key files, however It does not have public API. I suggest to add a way to get an absolute path of `CryptoKeyFile` without using internal Roslyn API.</Description>
  </Issue>
  <Issue>
    <IssueID>18467</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CodeFix CS4033: Make method async (stay void) adds the Async suffix</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18467</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>From: 

&gt;The CodeFix CS4033 'Make method async (stay void)' adds the Async suffix to the methodname. If it stays void I don't want the Async suffix. Only when the methods returns a Task it must add this Async suffix to the name.
</Description>
  </Issue>
  <Issue>
    <IssueID>18465</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tests are Hanging</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>18465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18465</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There seems to be an intermittent problem with hanging vsi tests. As an example, see the logs saved in "\\mlangfs1\public\frsilb\logs\Jenkins Hang". These are from a debug and release build of </Description>
  </Issue>
  <Issue>
    <IssueID>18463</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Analyzer packages appear to be missing developmentDependency=true</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-SDK and Samples</Name>
        <IssueID>18463</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Steps to Reproduce**:

1. Create .NET 4.5 Class Library project
2. Add Microsoft.CodeAnalysis.CSharp 2.0.0 NuGet package to project

**Expected Behavior**:

Analyzer package should be added

**Actual Behavior**:

Errors displayed:

Package Microsoft.CodeAnalysis.CSharp.Workspaces 2.0.0 is not compatible with net45 (.NETFramework,Version=v4.5). Package Microsoft.CodeAnalysis.CSharp.Workspaces 2.0.0 supports: netstandard1.3 (.NETStandard,Version=v1.3)
Package Microsoft.CodeAnalysis.Workspaces.Common 2.0.0 is not compatible with net45 (.NETFramework,Version=v4.5). Package Microsoft.CodeAnalysis.Workspaces.Common 2.0.0 supports:
  - net46 (.NETFramework,Version=v4.6)
  - netstandard1.3 (.NETStandard,Version=v1.3)

Shouldn't analyzer packages be marked with developmentDependency=true so it shouldn't matter what the target framework of the project is, as the analyzer is used by Roslyn, not the project?</Description>
  </Issue>
  <Issue>
    <IssueID>18462</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18462</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' </Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18462</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18462</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18462</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    static void Main(string[] args)
    {
        var z = ((byte, byte))((_, _) = (-1, -1));
    }
}



Analyzer 'Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer' threw the following exception:
'Exception occurred with following context:
Compilation: ConsoleApp19
SyntaxTree: ...\Program.cs
SyntaxNode: ((byte, byte))((_, _) = (-1, -1 ... [CastExpressionSyntax]@[72..105) (4,16)-(4,49)

System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.Binder.CheckFeatureAvailability(Location location, MessageID feature, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.FallBackOnDiscard(IdentifierNameSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIdentifier(SimpleNameSyntax node, Boolean invoked, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node, DiagnosticBag diagnostics, DeclarationExpressionSyntax&amp; declaration, ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariables(ExpressionSyntax node, DiagnosticBag diagnostics, DeclarationExpressionSyntax&amp; declaration, ExpressionSyntax&amp; expression)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindParenthesizedExpression(ExpressionSyntax innerExpression, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics, ExpressionSyntax initializer, BindValueKind valueKind, CSharpSyntaxNode errorSyntax)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.TypesAreCompatible(TExpressionSyntax originalExpression, TExpressionSyntax newExpression)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ReplacementChangesSemanticsForNodeLanguageSpecific(SyntaxNode currentOriginalNode, SyntaxNode currentReplacedNode, SyntaxNode previousOriginalNode, SyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode previousOriginalNode, TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode, TSyntaxNode currentReplacedNode, TSyntaxNode originalRoot, Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast, SemanticModel semanticModel, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Diagnostics.RemoveUnnecessaryCast.CSharpRemoveUnnecessaryCastDiagnosticAnalyzer.IsUnnecessaryCast(SemanticModel model, SyntaxNode node, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.TryRemoveCastExpression(SemanticModel model, SyntaxNode node, Diagnostic&amp; diagnostic, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.RemoveUnnecessaryCast.RemoveUnnecessaryCastDiagnosticAnalyzerBase`1.&lt;Initialize&gt;b__6_0(SyntaxNodeAnalysisContext nodeContext)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c__DisplayClass42_1`1.&lt;ExecuteSyntaxNodeAction&gt;b__1()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock(DiagnosticAnalyzer analyzer, Action analyze, Nullable`1 info)
-----
'.

`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>18461</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'GenerateConversionCodeFixProvider' encountered an error and has been disabled</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>29/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18461</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    static void Main(string[] args)
    {
        byte b;
        var q = ((byte, byte))unchecked((b, _) = (-1, -1));
    }


VS will show an error message with the following stack trace


System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral' to type 'Microsoft.CodeAnalysis.CSharp.BoundConvertedTupleLiteral'.
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoForNode(BoundNode lowestBoundNode,BoundNode highestBoundNode,BoundNode boundNodeForSyntacticParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.GenerateMember.GenerateParameterizedMember.CSharpGenerateConversionService.TryGetImplicitConversionMethodAndTypeToGenerateIn(SemanticDocument document,SyntaxNode expression,ISet`1 classInterfaceModuleStructTypes,CancellationToken cancellationToken,IMethodSymbol&amp; methodSymbol,INamedTypeSymbol&amp; typeToGenerateIn)
   at Microsoft.CodeAnalysis.CSharp.GenerateMember.GenerateParameterizedMember.CSharpGenerateConversionService.TryInitializeImplicitConversionState(SemanticDocument document,SyntaxNode expression,ISet`1 classInterfaceModuleStructTypes,CancellationToken cancellationToken,SyntaxToken&amp; identifierToken,IMethodSymbol&amp; methodSymbol,INamedTypeSymbol&amp; typeToGenerateIn)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateConversionService`4.State.TryInitializeImplicitConversion(TService service,SemanticDocument document,SyntaxNode node,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateConversionService`4.State.TryInitializeConversionAsync(TService service,SemanticDocument document,SyntaxNode node,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateConversionService`4.State.GenerateConversionStateAsync[TService,TSimpleNameSyntax,TExpressionSyntax,TInvocationExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.GenerateMember.GenerateParameterizedMember.AbstractGenerateConversionService`4.GenerateConversionAsync[TService,TSimpleNameSyntax,TExpressionSyntax,TInvocationExpressionSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeFixes.GenerateMember.AbstractGenerateMemberCodeFixProvider.RegisterCodeFixesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>Place the caret in the first '-1' literal in the following code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>18460</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VSSDK.BuildTools dep version breaks sln</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>13/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18460</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Latest Master f937819

**Steps to Reproduce**:

1. Download latest version from scratch
2. Uninstall/remove NuGet package Microsoft.Net.Compilers 2.0.1
3. Uninstall/remove NuGet package Microsoft.VSSDK.BuildTools 15.0.26124-RC3
3. Try to open de Roslyn project with vs15

**Expected Behavior**: Everything loads fine

**Actual Behavior**: 90% of the projects breaks and the solution it's unable to self-recover. Offering you to install the visual studio 2015 update 1 in a loop. While for example I already have the update 3.

I solved the behavior by installing the latest NuGet build for both package from other project*. After change on the file to the 15.0.26201 and download the package from other project* everything get solved.

I think it breaks because the version of the VSSDK 15.0.26124-RC3 it's not available to download (by default, it's a pre release) and in the Dependencies.props it's the desired version. 

How can I upload my branch with that change to this project and then ask to merge it?
Thanks you.

*You need to download from other functional project because while the solution it's broken, the NuGet it's unable to find the "default project".

</Description>
  </Issue>
  <Issue>
    <IssueID>18459</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>18459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn emits conversions without overflow checks in checked contexts with deconstruction</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18459</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    static void Main(string[] args)
    {
        int x = -1;
        checked
        {
            var s1 = ((byte, byte))((_, _) = (-1, -1));
            Console.WriteLine(s1.Item1);

            var s2 = ((byte, byte))((_, _) = (x, x));
            Console.WriteLine(s2.Item1);
        }
        Console.ReadKey();
    }



Compiles and prints

255
255
`</Code>
    <Description>The following code

``

It should throw an overflow exception instead.

Roslyn incorrectly emits `conv.u1` instead of `conv.ovf.u1` in the code above.</Description>
  </Issue>
  <Issue>
    <IssueID>18458</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Issue when compilig Visual Basic Project With Microsoft.CodeAnalysis.Emit</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>18458</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 1.3.1

Please help to resolve this,



Thanks.
</Description>
  </Issue>
  <Issue>
    <IssueID>18449</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extract method offers to extract out a "return null"</Title>
    <CreatedDate>05/04/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18449</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Given that I cannot repro this on any other return null block (including the one it originally showed), I suspect the following isn't expected?

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>18443</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AmadeusW</FixedById>
        <IssueID>18443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Accessibility: Narrator says control type twice in the navigation bar </Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>14/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-User Friendly</Name>
        <IssueID>18443</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Copied from [VSO tracker](

**Version Used**: master

**Steps to Reproduce**:

1. Launch Visual Studio
2. Create a New WPF Project
3. Tab to the editor that is present in the .cs file
4. Press CONTROL +F2 to navigate to the combo boxes.

**Expected Behavior**:
Name property should be appropriate and should not contain any localized control type

**Actual Behavior**:
Name property is 'Memberdropdown'
Narrator reads as 'Member drop down, &lt;name&gt;, Combo box'</Description>
  </Issue>
  <Issue>
    <IssueID>18428</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>18428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Flaky Test] Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ResetInteractiveFromProjectAndVerify failed in release build</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>18428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>18428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18428</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
 Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ResetInteractiveFromProjectAndVerify
      System.Exception : Predicate never assigned a value after 10000 milliseconds and no exceptions were thrown. REPL text: &gt; #reset
      Resetting execution engine.
      Loading context from 'CSharpInteractive.rsp'.
      &gt; using System;
      &gt; #reset
      Resetting execution engine.
      Loading context from 'CSharpInteractive.rsp'.
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Core.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Xml.Linq.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.DataSetExtensions.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\Microsoft.CSharp.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Data.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Net.Http.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Xml.dll"
      &gt; #r "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Windows.Forms.dll"
      &gt; #r "TestProj.exe"
      &gt; using TestProj;
      &gt; x
      (1,1): error CS0103: The name 'x' does not exist in the current context
      &gt; (new TestProj.C()).M()
      (1,15): error CS0234: The type or namespace name 'C' does not exist in the namespace 'TestProj' (are you missing an assembly reference?)
      &gt; .
      Stack Trace:
        
        Server stack trace: 
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForPredicate(Func`1 predicate)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForLastReplOutputContains(String outputText)
           at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]&amp; outArgs)
           at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)
        
        Exception rethrown at [0]: 
           at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
           at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData&amp; msgData, Int32 type)
           at Microsoft.VisualStudio.IntegrationTest.Utilities.InProcess.InteractiveWindow_InProc.WaitForLastReplOutputContains(String outputText)
        q:\roslyn\src\VisualStudio\IntegrationTest\IntegrationTests\Extensions\InteractiveExtensions.Verifiers.cs(16,0): at Roslyn.VisualStudio.IntegrationTests.Extensions.Interactive.InteractiveExtensions.WaitForLastReplOut
`</Code>
    <Description>Possibly related to #18293, but since that issue doesn't describe this test specifically, opening a separate bug. Failed in  Jenkins Logs:

``
![image](

Tagging @tmat @ivanbasov.</Description>
  </Issue>
  <Issue>
    <IssueID>18427</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extended file properties are missing from compiled assembly file.</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels />
    <Code>csharp
private static async Task CompileSolution(Solution solution)
{
    foreach (var id in solution.GetProjectDependencyGraph().GetTopologicallySortedProjects())
    {
        var compilation = await solution.GetProject(id).GetCompilationAsync();

        using (var exeStream = new FileStream($"{id.Id}.dll", FileMode.OpenOrCreate))
        {
            compilation.Emit(exeStream);
            await exeStream.FlushAsync();
         }
    }
}
`</Code>
    <Description>**Version Used**: 
VS2015

**Steps to Reproduce**:

``

Running the above code will generate an assembly **without** extended file properties like:
Copyright, Product Version, etc...

But compiling the same solution with Visual Studio sets the correct properties in the generated file.

**Expected Behavior**:
![image](

**Actual Behavior**:
![image](</Description>
  </Issue>
  <Issue>
    <IssueID>18423</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Is there a way to disable the option offered by the IDE to disable an analyzer?</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>26/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18423</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>As i have pointed out here:



i am genuinely wondering whether there is any way to prevent this behavior of offering to suppress analyzers which work in the scope of an Error.

Is there currently a way to do this? If not - would this be a feature which could be added?

Note that i think supression on non errors is perfectly fine. But on an error level it should be impossible in my opinion.</Description>
  </Issue>
  <Issue>
    <IssueID>18422</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Projects fail to load when opening Roslyn.sln in visual studio</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18422</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
C:\Work\roslyn\src\Compilers\Server\VBCSCompilerTests\VBCSCompilerTests.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Core\Portable\CodeAnalysis.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Core\CodeAnalysisTest\CodeAnalysisTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\csc\csc.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Portable\CSharpCodeAnalysis.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\CommandLine\CSharpCommandLineTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\Emit\CSharpCompilerEmitTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\Semantic\CSharpCompilerSemanticTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\Symbol\CSharpCompilerSymbolTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\Syntax\CSharpCompilerSyntaxTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Test\Resources\Core\CompilerTestResources.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Test\Utilities\CSharp\CSharpCompilerTestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Test\Utilities\VisualBasic\BasicCompilerTestUtilities.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Portable\BasicCodeAnalysis.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Test\CommandLine\BasicCommandLineTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Test\Emit\BasicCompilerEmitTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Test\Semantic\BasicCompilerSemanticTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Test\Symbol\BasicCompilerSymbolTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\Test\Syntax\BasicCompilerSyntaxTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\PdbUtilities\PdbUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Utilities\Desktop\TestUtilities.Desktop.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\Core\Portable\Workspaces.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\Source\BoundTreeGenerator\CompilersBoundTreeGenerator.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpErrorFactsGenerator\CSharpErrorFactsGenerator.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\CSharpSyntaxGenerator.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\Source\VisualBasicSyntaxGenerator\VisualBasicSyntaxGenerator.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\CoreTest\ServicesTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\CSharpTest\CSharpServicesTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\VisualBasicTest\VisualBasicServicesTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\Source\VisualBasicErrorFactsGenerator\VisualBasicErrorFactsGenerator.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\Core\Desktop\Workspaces.Desktop.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\CSharp\Portable\CSharpWorkspace.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\VisualBasic\Portable\BasicWorkspace.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\RunTests\RunTests.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Features\CSharp\Portable\CSharpFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Features\Core\Portable\Features.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\VisualBasic\BasicEditorFeatures.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\CSharp\CSharpEditorFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\Core\EditorFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\VisualBasicTest\BasicEditorServicesTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\Core\Scripting.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\CoreTest\ScriptingTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\CSharp\CSharpScripting.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\CSharpTest\CSharpScriptingTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\InteractiveWindow\Editor\InteractiveWindow.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\CSharpTest\CSharpEditorServicesTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\CSharpTest2\CSharpEditorServicesTest2.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\Test\EditorServicesTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\Test2\EditorServicesTest2.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\TestUtilities\ServicesTestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\EditorFeatures\CSharp\CSharpInteractiveEditorFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\EditorFeatures\Core\InteractiveEditorFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\HostTest\InteractiveHostTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\csi\csi.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\vbi\vbi.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\InteractiveWindow\EditorTest\InteractiveWindowTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\InteractiveWindow\VisualStudio\VisualStudioInteractiveWindow.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\Impl\ServicesVisualStudioImpl.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\SolutionExplorerShim\SolutionExplorerShim.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\VisualBasic\Impl\BasicVisualStudio.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\CSharp\Impl\CSharpVisualStudio.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\CSharp\Repl\CSharpVisualStudioRepl.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\CSharp\Test\CSharpVisualStudioTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\Test\ServicesVisualStudioTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Setup\VisualStudioSetup.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\InteractiveServices\VisualStudioInteractiveServices.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\SetupInteractive\VisualStudioSetupInteractive.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\VisualStudioDiagnosticsToolWindow\VisualStudioDiagnosticsWindow.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\CSharp\Test\ExpressionCompiler\CSharpExpressionCompilerTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\CSharp\Test\ResultProvider\CSharpResultProviderTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\VisualBasic\Test\ExpressionCompiler\BasicExpressionCompilerTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\VisualBasic\Test\ResultProvider\BasicResultProviderTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Test\ExpressionCompiler\ExpressionCompilerTestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Source\Concord\Concord.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Test\ResultProvider\ResultProviderTestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\Text\TextEditorFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Features\VisualBasic\Portable\BasicFeatures.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\Features\InteractiveFeatures.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\VisualBasic\BasicScripting.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\Def\ServicesVisualStudio.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\MetadataVisualizer\MetadataVisualizer.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\CSharp\Source\ExpressionCompiler\CSharpExpressionCompiler.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\VisualBasic\Source\ExpressionCompiler\BasicExpressionCompiler.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Package\ExpressionEvaluatorPackage.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Source\ExpressionCompiler\ExpressionCompiler.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\Test\WinRT\CSharpWinRTTest.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Core\MSBuildTaskTests\MSBuildTaskTests.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\VisualBasic\Source\ResultProvider\NetFX20\BasicResultProvider.NetFX20.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\VisualBasic\Source\ResultProvider\Portable\BasicResultProvider.Portable.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\CSharp\Source\ResultProvider\NetFX20\CSharpResultProvider.NetFX20.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\CSharp\Source\ResultProvider\Portable\CSharpResultProvider.Portable.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Source\ResultProvider\NetFX20\ResultProvider.NetFX20.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\ExpressionEvaluator\Core\Source\ResultProvider\Portable\ResultProvider.Portable.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\vbc\vbc.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\Pdb2Xml\Pdb2Xml.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\VisualStudioInteractiveComponents\VisualStudioInteractiveComponents.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\EditorFeatures\VisualBasic\BasicInteractiveEditorFeatures.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\Host\InteractiveHost.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\VisualBasic\Repl\BasicVisualStudioRepl.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\CSharp\CscCore\CscCore.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\VisualBasic\VbcCore\VbcCore.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Utilities\Portable\TestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\CoreTest.Desktop\ScriptingTest.Desktop.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\CSharpTest.Desktop\CSharpScriptingTest.Desktop.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\VisualBasicTest.Desktop\BasicScriptingTest.Desktop.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Scripting\VisualBasicTest\BasicScriptingTest.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Diagnostics\Diagnostics.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\CsiCore\CsiCore.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Interactive\VbiCore\VbiCore.vbproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Server\VBCSCompiler\VBCSCompiler.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Server\PortableServer\PortableServer.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Extension\CompilerExtension.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Utilities\Portable.FX45\TestUtilities.FX45.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\DeployCoreClrTestRuntime\DeployCoreClrTestRuntime.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\CommonNetCoreReferences\CommonNetCoreReferences.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Test\Utilities\CSharp.Desktop\CSharpCompilerTestUtilities.Desktop.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\DeployDesktopTestRuntime\DeployDesktopTestRuntime.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\ProcessWatchdog\ProcessWatchdog.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\Source\CompilerGeneratorTools\DeployCompilerGeneratorToolsRuntime\DeployCompilerGeneratorToolsRuntime.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\TestSetup\VisualStudioTestSetup.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\IntegrationTests\VisualStudioIntegrationTests.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\TestUtilities\VisualStudioTestUtilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\CommonCoreClrRuntime\CommonCoreClrRuntime.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Dependencies\VisualStudio\VisualStudio.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Dependencies\VisualStudioText\VisualStudioText.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Dependencies\VisualStudioEditor\VisualStudioEditor.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Deployment\Roslyn.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\EditorFeatures\Next\EditorFeatures.Next.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Setup.Next\VisualStudioSetup.Next.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Xaml\Impl\XamlVisualStudio.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Perf\tests\Perf.Tests.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Perf\Utilities\Perf.Utilities.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Test\Perf\Runner\Perf.Runner.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\Remote\Core\RemoteWorkspaces.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Workspaces\Remote\ServiceHub\ServiceHub.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Tools\RepoUtil\RepoUtil.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\Compilers\Core\MSBuildTask\MSBuildTask.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\TestUtilities.Next\VisualStudioTestUtilities.Next.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\RemoteHostClientMock\RemoteHostClientMock.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\Next\ServicesVisualStudio.Next.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets

C:\Work\roslyn\src\VisualStudio\Core\Test.Next\VisualStudioTest.Next.csproj : error  : The imported project "C:\Users\Sean.Farrow\.nuget\packages\Microsoft.VSSDK.BuildTools\15.0.25604-Preview4\build\Microsoft.VsSDK.BuildTools.props" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.  C:\Work\roslyn\build\Targets\Settings.targets
`</Code>
    <Description>When loading Roslyn.sln in visual studio 2017 community I get the following in my output window:

``

it appears that the imports haven't been updated. there is an RC3 package of microsoft.vssdk.buildtools 15.0.26124 downloaded when I restore, but given that the final release is out, which package should we use?
This is blocking me fixing issue #15988.
Help appreciated.
Kind regards
Sean
**Version Used**: 

**Steps to Reproduce**:

1. 
2. 
3. 

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>18418</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Tuples and ternary operators don't mix well</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>04/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18418</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18418</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.0.0.61501

**Steps to Reproduce**:

1. Try to compile this (verified to not work in .NETStandard 1.6 project:
``

**Expected Behavior**: That it compiles without error.

**Actual Behavior**: It doesn't compile with errors about ')' and ';' being expected.

I noticed that it works if I put the expressions in brackets:
`return ((hasX ? x : float.NaN), (hasY ? y : float.NaN), (hasZ ? z : float.NaN));`</Description>
  </Issue>
  <Issue>
    <IssueID>18414</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>18414</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unable to create an Analyzer targeting Roslyn 2.0</Title>
    <CreatedDate>04/04/2017</CreatedDate>
    <ClosedDate>15/12/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18414</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017
VisualStudio/15.0.0+26228.10

**Steps to Reproduce**:

1. Create a new Analyzer project from the "Analyzer with Code Fix (NuGet + VSIX)" template
2. Notice that the Analyzer builds against Roslyn 1.0.1
3. Attempt to upgrade all NuGet package.

**Expected Behavior**:

* The Analyzer is now built against Roslyn 2.0

**Actual Behavior**:

An error message:

&gt;  Could not install package 'Microsoft.CodeAnalysis.Common 2.0.0'. You are trying to install this package into a project that targets '.NETPortable,Version=v4.5,Profile=Profile7', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.

It seems like this is because Microsoft.CodeAnalysis.Common is now only built for .NET Standard 1.3. If I manually reference this assembly from my existing analyzer, I get a Code Analysis error:

&gt; MSBUILD : error : CA0001 : Could not find type 'System.Runtime.CompilerServices.ConditionalWeakTable`2' in assembly 'Microsoft.CodeAnalysis, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.</Description>
  </Issue>
  <Issue>
    <IssueID>18409</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>18409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Naming Style: Treat underscore "_" specially in naming conventions</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>25/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18409</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We have teams who want to create rules like
&gt; prevent field names from starting with "m_" 

The way a user should be able to do this is to create a naming convention that says
&gt; field names must be lowercase

and have the "word separator" blank (so that if an "underscore" appears, it is a violation). 

This will fix the issue here:  </Description>
  </Issue>
  <Issue>
    <IssueID>18405</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>18405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Getting the IOperation for a single argument returns the entire expression using the argument</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>27/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18405</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Paste the following code into ETA:

``

It should be returning just the `IArgument`.</Description>
  </Issue>
  <Issue>
    <IssueID>18397</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jmarolf</FixedById>
        <IssueID>18397</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>BasicIntellisense.Type a Variable is Broken</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>27/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18397</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18397</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18397</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Broken in Dev16 vsi tests. Looks like  could be the cause, the integration tests started failing after the Open pointer was moved to include it.</Description>
  </Issue>
  <Issue>
    <IssueID>18396</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make Method Asynchronous does not preserve leading trivia properly</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18396</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class C
{
    // Leading trivia
    /*1*/ void /*2*/ M2/*3*/() /*4*/
    {
        await M3Async();
    }

    async Task&lt;int&gt; M3Async()
    {
        return 1;
    }
}


**Expected Behavior**:

csharp
class C
{
    // Leading trivia
    /*1*/ async void /*2*/ M2Async/*3*/() /*4*/
    {
        await M3Async();
    }

    async Task&lt;int&gt; M3Async()
    {
        return 1;
    }
}


**Actual Behavior**:

csharp
class C
{
    // Leading trivia
    /*1*/
    async void /*2*/ M2Async/*3*/() /*4*/
    {
        await M3Async();
    }

    async Task&lt;int&gt; M3Async()
    {
        return 1;
    }
}
`</Code>
    <Description>**Version Used**: Master branch with #18307 merged.

**Steps to Reproduce**:

:bulb: A unit test is implemented for this case as part of #18307, but is skipped. Un-skip these tests to enable them when the underlying issue is fixed.

Use "Make method async (keep void)" on the following method:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>18395</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>'=' in path causes issues with /reference</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

**Steps to Reproduce**:

1. Clone corefx into a path containing '='
2. Build corefx

**Expected Behavior**:
Successful build.

**Actual Behavior**:
/reference paths appended to csc command line contain = signs, but are not quoted.  Roslyn interprets these as aliases.

Appears to be a bug in </Description>
  </Issue>
  <Issue>
    <IssueID>18391</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CS0108 Incorrectly shown with fix that breaks code</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>04/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>good first issue</Name>
        <IssueID>18391</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio 2017

**Steps to Reproduce**:
Put this code into C#:

``

The problem is, that code doesn't compile and now generates 4 errors instead of one warning.
</Description>
  </Issue>
  <Issue>
    <IssueID>18390</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Strange indentation two new lines after comment</Title>
    <CreatedDate>03/04/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18390</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;

namespace ConsoleApp1
{
    // Anything

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}


Place caret at the end of the line `// Anything`. Press enter twice.

Expected:
cs
using System;

namespace ConsoleApp1
{
    // Anything

   [|]

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}


Actual:
cs
using System;

namespace ConsoleApp1
{
    // Anything

       [|]

    class Program
    {
        static void Main()
        {
            Console.ReadLine();
        }
    }
}
`</Code>
    <Description>Code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18379</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType'</Title>
    <CreatedDate>02/04/2017</CreatedDate>
    <ClosedDate>02/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18379</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 1.2.0

**Steps to Reproduce**: Unknown

**Expected Behavior**: No exception thrown

**Actual Behavior**:
Unexpected value 'None' of type 'Microsoft.CodeAnalysis.SpecialType'
`System.InvalidOperationException:
   at Microsoft.CodeAnalysis.CSharp.Binder.DoUncheckedConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.FoldConstantNumericConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.FoldConstantConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.CreateConversion (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.CoerceArguments (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpressionContinued (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroupInvocation (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleArrayInitializer (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindBlock (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindPossibleEmbeddedStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore (Microsoft.CodeAnalysis.CSharp, Version=1.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35)`
</Description>
  </Issue>
  <Issue>
    <IssueID>18376</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Very long delay before semantic highlighting appears</Title>
    <CreatedDate>02/04/2017</CreatedDate>
    <ClosedDate>14/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>18376</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Note, that there is no any significant CPU load. It looks like there is an intentional delay somewhere in Roslyn code:

![1](

Interesting, that the delay is much longed on preview tab, if I double click on documents, they colored faster (but still not fast enough):

![1](

The guidelines appear faster in both cases, but slowly, too.</Description>
  </Issue>
  <Issue>
    <IssueID>18371</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>TyOverby</FixedById>
        <IssueID>18371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intellisense displays tuple elements as fields when they are actually constructor arguments</Title>
    <CreatedDate>01/04/2017</CreatedDate>
    <ClosedDate>08/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18371</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual C# 2017 00369-60000-00001-AA863
**Steps to Reproduce**:

1. Create a C# project in Visual Studio 2017
2. Add the following class
  ``
3. Observe the hover tips shown in the screenshots below
![image]( _Note: mouse is hovering at text cursor location_
![image]( _Note: mouse is hovering at text cursor location_

**Expected Behavior**:
Intellisense indicates that the tuple elements actually refer to the constructor arguments, not the class fields.
CS1717 is raised.
**Actual Behavior**:
Intellisense incorrectly displays the tuple elements as fields when they are in fact parameters.
No warning is raised.</Description>
  </Issue>
  <Issue>
    <IssueID>18369</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Why "Constraint cannot be special class 'Enum'"? It is possible in F# and MSIL</Title>
    <CreatedDate>01/04/2017</CreatedDate>
    <ClosedDate>02/04/2017</ClosedDate>
    <IssueLabels />
    <Code>c#
void Func&lt;T&gt;() where T: System.Enum {}
`</Code>
    <Description>**Version Used**: 
C# 7
**Steps to Reproduce**:
``

**Expected Behavior**:
Should compile
**Actual Behavior**:
`error CS0702: Constraint cannot be special class 'Enum'`

I'm guessing it is "by design", but what is the reason for this design? F# and MSIL both appear to handle that constraint. Also, according to  C# itself can then consume such a method no problem.</Description>
  </Issue>
  <Issue>
    <IssueID>18364</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provide API to transform source to source</Title>
    <CreatedDate>01/04/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>18364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18364</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a different take on  (I'm unsure if this is already possible using "Custom Tool" in VS).

I want to suggest instead of an "IL optimization step", we provide an API to transform the source itself, I believe it will bring more flexibility and IMO it is easier to develop. A lot of inlining optimizations like #15644, linq rewriting, etc can be done in this pass. The generated code will show up in solution explorer as a child item under the actual source, and debugging will work on those generated files.

This is a more general solution to "modifying generators" proposed at  except that it does not incur any changes to the language. However, with source-only attributes this can be taken further to a lot of other use cases.


</Description>
  </Issue>
  <Issue>
    <IssueID>18335</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Should As New initializers be the same node?</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18335</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider the following VB code:

``

Should the initializers for the `IVariableDeclaration`s be literally the same instance, or should there be some way to tell if the initializer for two different variable declarations is the same initializer? If they are the same object, it will complicate the creation of a parent pointer.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18335</IssueID>
        <PullRequestID>18698</PullRequestID>
        <Title>IVariableDeclaration refactor</Title>
        <Description>`IVariableDeclaration` has been refactored, as discussed in #18335. The general changes made are as follows:
* `IVariableDeclaration` gets rid of the `Variable` property, and has a new property, `Variables`, which returns an `ImmutableArray&lt;ILocalSymbol&gt;`. 
* `IVariableDeclarationStatement.Variables` has been renamed to `IVariableDeclarationStatement.Declarations`.
* `IVariableDeclarationStatement` gets a new extension method, `GetDeclaredVariables`, which enumerates all `ILocalSymbol`s declared by all `IVariableDeclaration`s in the statement.
* Implementations were updated to follow these changes.

All other changes are simply test updates. Starting with @dotnet/analyzer-ioperation @CyrusNajmabadi for review.

**Update**:
Refactors now follow @CyrusNajmabadi's suggestions here:  I've updated the main body to reflect.</Description>
        <CreatedDate>14/04/2017</CreatedDate>
        <ClosedDate>18/04/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>18335</IssueID>
            <PullRequestID>18698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>18335</IssueID>
            <PullRequestID>18698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18335</IssueID>
            <PullRequestID>18698</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18329</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>18329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS 2015 Update 3 hangs</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18329</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**I have a memory dump that is 1.7GB in size.  Please let me know how I can get this to you!**

**Strange observations:**
1. I read about a hang with Update 3 ( and pulled the cumulative update - KB3165756 ( It says it successfully installed and shows up in my list of Windows installed updates - as well as the About dialog in VS.  However, my executable and the error message in Application Event Viewer (message below) list the version as 14.25420.1 instead of 14.0. 25431.01 (the cumulative update) so I'm not positive it is actually updated.

2. this seems to be project specific. I deleted the .suo thinking it was corrupt but it didn't change anything. I have also disabled Solution-wide Analysis - again didn't work.

**Version Used**: VS2015 14.0.254.20.1 (Update 3)

**Steps to Reproduce**:

1.  Open VS as administrator
2. Open a solution (seems to be solution-specific)
3. VS completes loading solution
4. within 10-20 seconds, VS just hangs and is non-responsive

**Expected Behavior**:
VS does not hang

**Actual Behavior**:
VS hangs and I have to kill the process

**Error Message from Application Event Viewer after I kill the process:**
The program devenv.exe version 14.0.25420.1 stopped interacting with Windows and was closed. To see if more information about the problem is available, check the problem history in the Security and Maintenance control panel.
 Process ID: 49d0
 Start Time: 01d2a971b6255985
 Termination Time: 4294967295
 Application Path: C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe
 Report Id: 04cd0394-1566-11e7-b28b-34f39a954916
 Faulting package full name: 
 Faulting package-relative application ID: </Description>
  </Issue>
  <Issue>
    <IssueID>18326</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Passing MSBuild settings to a DiagnosticAnalyzer</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>21/08/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18326</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>XML
&lt;ItemGroup&gt;
    &lt;AdditionalFileContent Include="MyCustomProp=$(MyCustomProp);
                                    TargetFramework=$(TargetFramework)"
                           FileName="MyCompany.MyAnalyzer.settings" /&gt;
&lt;/ItemGroup&gt;


The expectation is that `&lt;AdditionalFileContent&gt;` is a well-known item group that is handled by the built-in targets and does something like this:

1. Creates a file with the name `FileName` somewhere in `obj`
2. Updates the file only if the contents change
3. Registers the file for `Clean`
4. Turns the (fully qualified) file names into `&lt;AdditionalFiles&gt;` that are then passed to the compiler as usual

## Consumption

The analyzer author will be able to access the data like this:

C#
// Get text for my settings
var additionalFiles = compilationStartContext.Options.AdditionalFiles;
var mySettings = additionalFiles.Single(file =&gt; Path.GetFileName(file.Path).Equals("MyCompany.MyAnalyzer.settings", StringComparer.OrdinalIgnoreCase));

// Parse options (of course not very robust)
var mySettings = mySettings.Split(Environment.NewLine)
                           .Select(l =&gt; line.Split("="))
                           .ToDictionary(a =&gt; a[0], a =&gt; a[1]);


Of course, this requires parsing by the developer right now. So ideally the `AnalyzerOptions` class would get a new API like this:

C#
namespace Microsoft.CodeAnalysis.Diagnostics
{
    public partial class AnalyzerOptions
    {
        ImmutableDictionary&lt;string, string&gt; GetFileOptions(string fileName);
    }
}


This would cut down the ceremony above to a single line:

C#
var myOptions = compilationStartContext.Options.GetFileOptions("MyCompany.MyAnalyzer.settings");
`</Code>
    <Description>The only way to pass settings to analyzers is via `&lt;AdditionalFiles&gt;`. Unfortunately that requires a file on disk. In many instances, analyzer authors want to pass custom settings to their analyzers simply by letting the developer set some properties in their project file. Or they may want get the value of existing properties, e.g. `TargetFramework`.

## Proposal

Introduce a new item group `&lt;AdditionalFileContent&gt;`. This allows analyzer authors to include a props file in their NuGet package like this:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>18324</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>18324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'this' local not available in debugger while stepping through local function.</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>05/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>18324</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Have not checked if this reproes 100% of the time.  If not, i can provide an example (in roslyn) where it happens as part of this PR: </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18324</IssueID>
        <PullRequestID>18259</PullRequestID>
        <Title>Add implementation of the persistence service backed by sqlite.</Title>
        <CreatedDate>28/03/2017</CreatedDate>
        <ClosedDate>31/03/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>18324</IssueID>
            <PullRequestID>18259</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18324</IssueID>
            <PullRequestID>18259</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18322</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline temp variable into an extension method invocation causes leading "this." to be parenthesized</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017

**Steps to Reproduce**:

1. Copy/Paste C# code:
``
2. Run Inline Temp on `c`

**Expected Behavior**: `this.DoStuff(8);`

**Actual Behavior**: `(this).DoStuff(8);`
</Description>
  </Issue>
  <Issue>
    <IssueID>18321</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Use expression body has encountered an error</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18321</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18321</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18321</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
       public void EncapsulateField()
            =&gt; _editorInProc.EncapsulateField()

to the end of `Editor_OutOfProc.cs` and then invoking GFU on the call to `EncapsulateField()`. I consistently get the following error bar. Unfortunately this doesn't repro in a standalone case.

C#
&gt;	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;System.__Canon&gt;.GetFirstStatementSemicolon(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.Update(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax declaration, bool preferExpressionBody, Microsoft.CodeAnalysis.Options.OptionSet options)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.AddEdits(Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.Diagnostic diagnostic, Microsoft.CodeAnalysis.Options.OptionSet options, bool preferExpressionBody, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;.FixAllAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllAsync.AnonymousMethod__0(Microsoft.CodeAnalysis.Editing.SyntaxEditor editor)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(Microsoft.CodeAnalysis.Document document, System.Func&lt;Microsoft.CodeAnalysis.Editing.SyntaxEditor, System.Threading.Tasks.Task&gt; editAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.&lt;FixAllWithEditorAsync&gt;d__3&gt;(ref Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.&lt;FixAllWithEditorAsync&gt;d__3 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(Microsoft.CodeAnalysis.Document document, System.Func&lt;Microsoft.CodeAnalysis.Editing.SyntaxEditor, System.Threading.Tasks.Task&gt; editAsync, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllAsync(Microsoft.CodeAnalysis.Document document, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.UseExpressionBody.AbstractUseExpressionBodyCodeFixProvider&lt;System.__Canon&gt;.RegisterCodeFixesAsync.AnonymousMethod__0(System.Threading.CancellationToken c)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.DocumentChangeAction.GetChangedDocumentAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetChangedSolutionAsync&gt;d__21&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetChangedSolutionAsync&gt;d__21 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputeOperationsAsync&gt;d__18&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputeOperationsAsync&gt;d__18 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.__Canon&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputePreviewOperationsAsync&gt;d__20&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;ComputePreviewOperationsAsync&gt;d__20 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder&lt;System.Collections.Immutable.ImmutableArray&lt;System.__Canon&gt;&gt;.Start&lt;Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetPreviewOperationsAsync&gt;d__17&gt;(ref Microsoft.CodeAnalysis.CodeActions.CodeAction.&lt;GetPreviewOperationsAsync&gt;d__17 stateMachine)	Unknown
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewOperationsAsync.AnonymousMethod__0()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeActions.CodeActionOperation&gt;&gt;&gt;.InnerInvoke()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.Execute()	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)	Unknown
 	mscorlib.dll!System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()	Unknown
 	mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()	Unknown
 	mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()	Unknown
`</Code>
    <Description>I was attempting to add this method
``

Dump at `\\mlangfs1\public\rchande\usexpressionbody.dmp`.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18321</IssueID>
        <PullRequestID>17046</PullRequestID>
        <Title>Use document options instead of workspace ones</Title>
        <CreatedDate>08/02/2017</CreatedDate>
        <ClosedDate>09/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>18321</IssueID>
            <PullRequestID>17046</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18321</IssueID>
            <PullRequestID>17046</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18320</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>18320</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"csc.exe" exited with code -2146232797 / Unit Test project / await on dynamic</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>06/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18320</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18320</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version 14.0.25420.01 Update 3**: 

**Steps to Reproduce**:

1. Create unit test project.
2. Add the following class.
``
3. Build the project.

**Expected Behavior**:
May be this is not the correct way of coding. But the other project types (class library project) compile successfully without an error.
Expecting to compile same as the class library project or give a compilation error with details to fix. 

**Actual Behavior**:
Compile error only with the description.
&gt; "csc.exe" exited with code -2146232797
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18320</IssueID>
        <PullRequestID>19991</PullRequestID>
        <Title>Add a test for an already fixed crash due to missing Microsoft.CSharp.Dll reference.</Title>
        <Description>Closes #18320.

@dotnet/roslyn-compiler Please review a test only change.</Description>
        <CreatedDate>02/06/2017</CreatedDate>
        <ClosedDate>06/06/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>18320</IssueID>
            <PullRequestID>19991</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Language-C#</Name>
            <IssueID>18320</IssueID>
            <PullRequestID>19991</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>18320</IssueID>
            <PullRequestID>19991</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18320</IssueID>
            <PullRequestID>19991</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18313</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>18313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roaming issue with VS2017 and VS2015 CodeStyle settings</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>24/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>18313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I installed VS2015 U3 on clean machine, signed in with my account and went to Tools\Options\Text Editor\C#\Code Style and VS crashed

``

We need to figure out what setting isn't round tripping back to VS2015 :-/</Description>
  </Issue>
  <Issue>
    <IssueID>18312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[IOperation] Expand `Using` `IVariableDeclaration`/`IVariableDeclarationStatementTests`</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>25/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>18312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>After  is fixed, expand the tests for `Using` statements to match C#'s level of testing.</Description>
  </Issue>
  <Issue>
    <IssueID>18311</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect quick info for ValueTuple&lt;T&gt;</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>18311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    void Foo()
    {
        var y = ValueTuple.Create(1);
    }
    `</Code>
    <Description>**Version Used**: VS 2017 (15.0.0+26228.9)

**Steps to Reproduce**:

1. Use the following code:

    ``

2. Hover over `var`
3. Hover over `y`

**Expected Behavior**:

* In step 2, the result should be `struct System.ValueTuple&lt;T&gt;`, with `T is int`.
* In step 3, the result should be `ValueTuple&lt;int, int&gt; y`

**Actual Behavior**:

* In step 2, the result is `(System.Int32)`
* In step 3, the result is `(int) y`

Neither of these are valid tuple syntaxes in C#.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18311</IssueID>
        <PullRequestID>18489</PullRequestID>
        <Title>Fixes #18311 - Incorrect quick info for ValueTuple&lt;T&gt;</Title>
        <Description>Fixes #18311 
Closes #15508

Hovering `var` will show `System.ValueTuple&lt;System.Int32&gt;`
Hovering `y` will show `(local variable) ValueTuple&lt;int&gt; y`</Description>
        <CreatedDate>06/04/2017</CreatedDate>
        <ClosedDate>07/04/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>18311</IssueID>
            <PullRequestID>18489</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18311</IssueID>
            <PullRequestID>18489</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18309</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Navigate to Member" spelling correction fails for numbers</Title>
    <CreatedDate>30/03/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>18309</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS 2017 (15.0.0+26228.9)

**Steps to Reproduce**:

1. Open Roslyn.sln
2. Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;
3. Type `m TestDesconstruction4`

**Expected Behavior**:

The `TestDeconstruction4()` method is selected.

**Actual Behavior**:

The `TestDeconstruction()` method is selected.

**Additional Steps**:

If you type `m TestDesconstruction44` (with a second `4` at the end), the `TestDeconstruction4()` method is now selected. It seems the first number is being ignored when making a spelling correction to the input?</Description>
  </Issue>
  <Issue>
    <IssueID>18306</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[IOperation] Getting a `UsingBlock` doesn't return an IOperation tree with an `IUsingStatement` in it</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>23/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>18306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>18306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>For the following code:

``</Description>
  </Issue>
  <Issue>
    <IssueID>18303</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>333fred</FixedById>
        <IssueID>18303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Design Question : Should we have a special node for Out Var Declaration</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>30/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18303</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example here : </Description>
  </Issue>
  <Issue>
    <IssueID>18300</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation doesn't support string interpolations</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>25/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18300</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Example Code** 
using System;
class P
{
    private void M()
    {
        var s = "";
        if (int.TryParse(s, out var i))
            Console.WriteLine($"i ={ i}, s ={ s}");
        else
          Console.WriteLine($"i ={ i}, s ={ s}");
    }
}

Try generating Ioperation tree for Ifstatement
**Generated Tree**

IOperation tree for "if (int.TryParse(s, out var i))
            Console.WriteLine($"i ={ i}, s ={ s}");
        else
          Console.WriteLine($"i ={ i}, s ={ s}");"


IIfStatement (OperationKind.IfStatement)
  Condition: IInvocationExpression (static System.Boolean System.Int32.TryParse(System.String s, out System.Int32 result)) (OperationKind.InvocationExpression, Type: System.Boolean)
      IArgument (Matching Parameter: s) (OperationKind.Argument)
        ILocalReferenceExpression: s (OperationKind.LocalReferenceExpression, Type: System.String)
      IArgument (Matching Parameter: result) (OperationKind.Argument)
        ILocalReferenceExpression: i (OperationKind.LocalReferenceExpression, Type: System.Int32)
  IExpressionStatement (OperationKind.ExpressionStatement)
    IInvocationExpression (static void System.Console.WriteLine(System.String value)) (OperationKind.InvocationExpression, Type: System.Void)
      IArgument (Matching Parameter: value) (OperationKind.Argument)
        IOperation:  (OperationKind.None)
  IExpressionStatement (OperationKind.ExpressionStatement)
    IInvocationExpression (static void System.Console.WriteLine(System.String value)) (OperationKind.InvocationExpression, Type: System.Void)
      IArgument (Matching Parameter: value) (OperationKind.Argument)
        IOperation:  (OperationKind.None)</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>18300</IssueID>
        <PullRequestID>19590</PullRequestID>
        <Title>Add IOperation support for string interpolation</Title>
        <Description>Fixes #18300 

``</Description>
        <CreatedDate>17/05/2017</CreatedDate>
        <ClosedDate>24/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>18300</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>18300</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>18300</IssueID>
            <PullRequestID>19590</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>18299</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Provably correct code fails to compile in VS 2017</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: Microsoft Visual Studio Enterprise 2017
Version 15.0.26228.10 D15RTWSVC
Microsoft .NET Framework
Version 4.7.02046

Visual C# 2017   00369-60000-00001-AA113
Microsoft Visual C# 2017

**Steps to Reproduce**:

1. Attempt to compile the following function:
``

**Expected Behavior**:
The function should compile.

**Actual Behavior**:
The function does not compile with the error that exception is not assigned a value on all code paths.

**Rationale**
The fact that exception is assigned a value on all code paths is provable at compile time. There are 2 code paths here: either manyThings has 1 or more values, or it has none. If it has at least 1 value, we will call TryDoThing which will assign a value. If it has none, the if condition will always be true, and exception will be assigned a value.

**Easy workaround**
Set `exception = null` as the first line in the function, and everything's fine. In my case this was functionally equivalent.</Description>
  </Issue>
  <Issue>
    <IssueID>18296</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Failing Test] Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.FallbackToCsc</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18296</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
System.IO.IOException : The process cannot access the file 'C:\\Users\\dotnet-bot\\AppData\\Local\\Temp\\RoslynTests\\439e38be-dcbc-452e-8735-aa6aa0b1e12c\\hello.exe' because it is being used by another process.
+++++++++++++++++++
STACK TRACE:
at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) 
at System.IO.File.InternalDelete(String path, Boolean checkHost) 
at System.IO.File.Delete(String path) at Microsoft.CodeAnalysis.Test.Utilities.DisposableFile.Dispose() 
at Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.VerifyResultAndOutput(ProcessResult result, TempDirectory path, String expectedOutput) in q:\roslyn\src\Compilers\Server\VBCSCompilerTests\CompilerServerTests.cs:line 235 
at Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.&lt;FallbackToCsc&gt;d__34.MoveNext() in q:\roslyn\src\Compilers\Server\VBCSCompilerTests\CompilerServerTests.cs:line 247 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) 
--- End of stack trace from previous location where exception was thrown --- 
at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) 
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
`</Code>
    <Description>Microsoft.CodeAnalysis.CompilerServer.UnitTests.CompilerServerUnitTests.FallbackToCsc started failing on Windows 32-bit with build 752, 

@dotnet/roslyn-compiler, can someone take a look?

Log:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18295</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Flaky Test] Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpCodeActions.GenerateMethodInClosedFile</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>18/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

``</Description>
    <PullRequests />
  </Issue>
  <Issue>
    <IssueID>18289</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>18289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title> Operand of the IUnaryOperatorExpression doesn't implement any specific IOperation</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>09/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>18289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18289</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description> 

also refer 
</Description>
  </Issue>
  <Issue>
    <IssueID>18288</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>18288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Look into the NonShipping MSBuild property</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>18288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This tag used to control signing, possible it's not necessary anymore.

Even if it is necessary can we use `$(RoslynProjectType)` to assign reasonable defaults and then enforce via BuildBoss? </Description>
  </Issue>
  <Issue>
    <IssueID>18284</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>nameof(System.Void) doesn't work</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>07/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18284</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>18284</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The compiler reports an error when ``

Expected: 
The result of the expression should be "Void".</Description>
  </Issue>
  <Issue>
    <IssueID>18283</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>ivanbasov</FixedById>
        <IssueID>18283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Flaky Interactive Integration Tests</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>18283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>18283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The following tests have been failing (only one failed per build) in the latest debug integration test runs:

* [Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractive.TypingHelpDirectiveWorks](
* [Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpSendToInteractive.ExecuteInInteractiveWithKeyboardShortcut](
* [Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpInteractiveCommands.CutDeletePasteSelectAll](</Description>
  </Issue>
  <Issue>
    <IssueID>18282</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Code Style: Wrapping</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>There should be an option to limit width of the text, and formatting code cause it to wrap inside that limitation.</Description>
  </Issue>
  <Issue>
    <IssueID>18280</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Move "Qualify Member Access" analyzers from Features layer to Code Style layer</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The "qualify member access" analyzers should be moved from the Features layer (which only runs in the IDE) to the new Code Style layer (which runs during the compilation process). This includes `AbstractQualifyMemberAccessDiagnosticAnalyzer` and `AbstractQualifyMemberAccessCodeFixprovider` along with their derived types.

:memo: For those who aren't aware, these are the Use/Don't Use `this.` (C#) and `Me.` (VB) code style analyzers.

📝 Depends on #18278</Description>
  </Issue>
  <Issue>
    <IssueID>18278</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Create new assemblies for NuGet-distributed analyzers</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>31/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18278</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We need new assemblies to define analyzers and code fixes in order to distribute them on NuGet. This is a prerequisite to #17182.</Description>
  </Issue>
  <Issue>
    <IssueID>18276</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE syntax coloring: missing keyword-like classification for binding-fallback-discards</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>18276</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Perfectionist hell:

&lt;img width="182" alt="screen shot 2017-03-29 at 14 39 25" src="

&lt;img width="282" alt="screen shot 2017-03-29 at 14 36 37" src="

Since this kind of "binding fallback" discards can change meaning if symbol named `_` suddenly appears in scope, syntax coloring can be especially important.</Description>
  </Issue>
  <Issue>
    <IssueID>18275</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18275</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Don't offer Spell Check on contextual keywords like "nameof"</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18275</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18275</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
namespace N
{
    class nameof
    {
    }
}

class C
{
    void M()
    {
        nameof // caret on this line
    }
}


A second case where this occurs is the following. In this case, it seems more likely that a user forgot to mark `M` with `async`, as opposed to needing to add a `using` declaration.

csharp
namespace N
{
    class await
    {
    }
}

class C
{
    void M()
    {
        await // caret on this line
    }
}
`</Code>
    <Description>#18223 covers the case of `var`, but `nameof` is another contextual keyword which can affected by this.

### Steps to reproduce:

``

### Expected results

* No code fix shown for `using N`
* No code fix shown for `using static N.nameof`

### Actual results

Both of the above code fixes are shown.
</Description>
  </Issue>
  <Issue>
    <IssueID>18274</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>XML documentation file is malformed when method has C# 7 tuples as parameters</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>03/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18274</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I was referred here from an [msbuild Github issue](

**Version Used**: 
2.0.0.61325

**Steps to Reproduce**:
1. Clone [this]( repo.
2. Open command prompt at src\TupleExtensions
3. Run `dotnet restore`
4. Run `dotnet build`

**Expected Behavior**:
A NuGet package with correct documentation is generated.

**Actual Behavior**:
The documentation doesn't work for most methods.

The documentation file (that can be found under `bin\Debug\netstandard1.0\TupleExtensions.xml`) contains entries like

``

The important part is `System.Collections.Generic.IEnumerable{System.}`, which is what it generates for a parameter of type `IEnumerable&lt;(TKey key, TValue value)&gt;`. This means that Visual Studio can't find the documentation when the NuGet package is installed.</Description>
  </Issue>
  <Issue>
    <IssueID>18273</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>18273</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Internal error in the C# compiler" when try to evaluate statement in Watch\Immediate window</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>18/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18273</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18273</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18273</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
    class Program
    {
        static void M(out int x) { x = 10; }

        static void Main(string[] args)
        {
        }
    }


2. Run the program and put a break point in the start of method "Main"

3. When break point hit,  paste the following statement in Watch window or in the Immediate window:
C#
new Func&lt;int&gt;(delegate { int x; var y = new Func&lt;int&gt;(() =&gt; { M(out x); return 1; }).Invoke(); return y; }).Invoke() 


**Expected Behavior**:
"1" will printed

**Actual Behavior**:
"Internal error in the C# compiler" printed

StackTrace:
"The given key was not present in the dictionary."


&gt;	mscorlib.dll!System.Collections.Generic.Dictionary&lt;System.__Canon, System.__Canon&gt;.this[System.__Canon].get(System.__Canon key)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.RecordVarRead(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol local)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitLocal(Microsoft.CodeAnalysis.CSharp.BoundLocal node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundLocal.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor visitor)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression node, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext context)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression node, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext context)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitAssignmentOperator(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor visitor)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCore(Microsoft.CodeAnalysis.CSharp.BoundExpression node, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext context)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression node, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext context)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression node, Microsoft.CodeAnalysis.CSharp.CodeGen.ExprContext context)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor visitor)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundStatement&gt; list)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor visitor)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.VisitStatement(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode node)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.StackOptimizerPass1.Analyze(Microsoft.CodeAnalysis.CSharp.BoundNode node, System.Collections.Generic.Dictionary&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol, Microsoft.CodeAnalysis.CSharp.CodeGen.LocalDefUseInfo&gt; locals, bool debugFriendly)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.Optimizer.Optimize(Microsoft.CodeAnalysis.CSharp.BoundStatement src, bool debugFriendly, out System.Collections.Generic.HashSet&lt;Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol&gt; stackLocals)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.CodeGenerator(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, Microsoft.CodeAnalysis.CSharp.BoundStatement boundBody, Microsoft.CodeAnalysis.CodeGen.ILBuilder builder, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.OptimizationLevel optimizations, bool emittingPdb)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, int methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement block, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo&gt; lambdaDebugInfo, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo&gt; closureDebugInfo, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator variableSlotAllocatorOpt, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain importChainOpt, bool emittingPdb, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CodeGen.SourceSpan&gt; dynamicAnalysisSpans)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol&gt; additionalTypes, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(Microsoft.CodeAnalysis.CSharp.CSharpCompilation compilation, Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBeingBuiltOpt, bool generateDebugInfo, bool hasDeclarationErrors, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Predicate&lt;Microsoft.CodeAnalysis.CSharp.Symbol&gt; filterOpt, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileMethods(Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder moduleBuilder, bool emittingPdb, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Predicate&lt;Microsoft.CodeAnalysis.ISymbol&gt; filterOpt, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Compilation.Compile(Microsoft.CodeAnalysis.Emit.CommonPEModuleBuilder moduleBuilder, bool emittingPdb, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Predicate&lt;Microsoft.CodeAnalysis.ISymbol&gt; filterOpt, System.Threading.CancellationToken cancellationToken)	Unknown
 	Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.CompilationContext.CompileExpression(string typeName, string methodName, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.Alias&gt; aliases, Microsoft.CodeAnalysis.CodeGen.CompilationTestData testData, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, out Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProperties resultProperties)	Unknown
 	Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.CSharp.ExpressionEvaluator.EvaluationContext.CompileExpression(string expr, Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluationFlags compilationFlags, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.Alias&gt; aliases, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, out Microsoft.CodeAnalysis.ExpressionEvaluator.ResultProperties resultProperties, Microsoft.CodeAnalysis.CodeGen.CompilationTestData testData)	Unknown
 	Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrExpressionCompiler.CompileExpression.AnonymousMethod__1(Microsoft.CodeAnalysis.ExpressionEvaluator.EvaluationContextBase context, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileWithRetry&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileExpressionResult&gt;(System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.MetadataBlock&gt; metadataBlocks, Microsoft.CodeAnalysis.DiagnosticFormatter formatter, Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CreateContextDelegate createContext, Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileDelegate&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileExpressionResult&gt; compile, Microsoft.CodeAnalysis.ExpressionEvaluator.DkmUtilities.GetMetadataBytesPtrFunction getMetaDataBytesPtr, out string errorMessage)	Unknown
 	Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileWithRetry&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileExpressionResult&gt;(Microsoft.VisualStudio.Debugger.Clr.DkmClrModuleInstance moduleInstance, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.MetadataBlock&gt; metadataBlocks, Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CreateContextDelegate createContext, Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileDelegate&lt;Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.CompileExpressionResult&gt; compile, out string errorMessage)	Unknown
 	Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.dll!Microsoft.CodeAnalysis.ExpressionEvaluator.ExpressionCompiler.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrExpressionCompiler.CompileExpression(Microsoft.VisualStudio.Debugger.Evaluation.DkmLanguageExpression expression, Microsoft.VisualStudio.Debugger.Clr.DkmClrInstructionAddress instructionAddress, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, out string error, out Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrInspectionQuery result)	Unknown
 	Microsoft.VisualStudio.Debugger.Engine.dll!Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrExpressionCompiler_CompileExpression(System.IntPtr pvClassInfo, System.IntPtr Expression, System.IntPtr InstructionAddress, System.IntPtr InspectionContext, ref System.IntPtr Error, ref System.IntPtr Result)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	Microsoft.VisualStudio.Debugger.Engine.dll!Microsoft.VisualStudio.Debugger.Evaluation.DkmLanguageExpression.CompileExpression(Microsoft.VisualStudio.Debugger.Clr.DkmClrInstructionAddress InstructionAddress, Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext InspectionContext, out string Error, out Microsoft.VisualStudio.Debugger.Evaluation.ClrCompilation.DkmCompiledClrInspectionQuery Result)	Unknown
 	vsdebugeng.manimpl.dll!VSDebugEngine.ManagedEE.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmLanguageExpressionEvaluator.EvaluateExpression(Microsoft.VisualStudio.Debugger.Evaluation.DkmInspectionContext inspectionContext, Microsoft.VisualStudio.Debugger.DkmWorkList workList, Microsoft.VisualStudio.Debugger.Evaluation.DkmLanguageExpression expression, Microsoft.VisualStudio.Debugger.CallStack.DkmStackWalkFrame stackFrame, Microsoft.VisualStudio.Debugger.DkmCompletionRoutine&lt;Microsoft.VisualStudio.Debugger.Evaluation.DkmEvaluateExpressionAsyncResult&gt; completionRoutine)	Unknown
 	Microsoft.VisualStudio.Debugger.Engine.dll!Microsoft.VisualStudio.Debugger.EntryPoint.IDkmLanguageExpressionEvaluator_EvaluateExpression(System.IntPtr pvClassInfo, System.IntPtr InspectionContext, System.IntPtr WorkList, System.IntPtr Expression, System.IntPtr StackFrame, System.IntPtr CompletionRoutine)	Unknown
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017
Version 15.0.26228.9 D15RTWSVC
Microsoft .NET Framework
Version 4.6.01586

Project target framework:
.NETCoreApp 1.1
.NET Framework 4.5.2

**Steps to Reproduce**:
1. Paste the following methods:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>18271</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0028 - invalid code fixes</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>(Visual Studio/15.0.0+26228.10)

Two related problems:

Problem 1

![image](

The fix will not compile due to t not being declared yet.

Problem 2

![image](

Changes the intention of original code and will generate incorrect result or in this case null pointer exception at runtime.
</Description>
  </Issue>
  <Issue>
    <IssueID>18267</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>chborl</FixedById>
        <IssueID>18267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactoring: Convert auto-prop to full prop and introduce field</Title>
    <CreatedDate>29/03/2017</CreatedDate>
    <ClosedDate>18/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18267</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>We should have a refactoring that introduces getters and setters for an autoproperty for when people decide they need to add logic to them.</Description>
  </Issue>
  <Issue>
    <IssueID>18260</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0028 - Collection Initializer Can Be Simplified: Invalid Code</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio/15.0.0+26228.9

**Steps to Reproduce**:

1. Define a dictionary initializer
2. Specify some values via assignment (`dict[key] = value`)
3. Specify some values that refer to the dictionary (same value for different keys: `dict[key2] = dict[key1]`)

**Expected Behavior**:

Stop specifying the values in the collection initializer if the value expression contains a reference to an unassigned variable.

**What You Can Not Do**
You can't necessarily rewrite the expressions to cherry pick the values you want:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18257</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>18257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Pattern switch in async method causes compiler crash</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>18257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
// csc /t:library /optimize+ repro.cs
using System;
 
public class Foo {}
 
public class C {
    public async void M() {
        switch (new object())
        {
            case Foo _:
            default:
                throw new InvalidOperationException();
        }
    }
}
`</Code>
    <Description>The following code (thanks to @TyOverby) causes a compiler assertion

``

The lowering temp produced by pattern-matching is not classified as long-lived, and probably should be.
</Description>
  </Issue>
  <Issue>
    <IssueID>18256</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>18256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AddImport code fix provider encountered an error</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>01/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18256</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Dump at `\\mlangfs1\public\rchande\addimport.dmp`</Description>
  </Issue>
  <Issue>
    <IssueID>18253</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>18253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Limit "Go to all" results to improve performance</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>21/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Performance</Name>
        <IssueID>18253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>"Go to all" currently causes a UI freeze of around 10 seconds on my machine when I try to search for something broad like "a". Even if I have a particularly narrow search, the freeze is still very noticeable.

I originally thought this was because we were doing an async as RunSyncronously, but it turns out 99.9% of the time is spent in WPF UpdateLayout. I assume this is because we're returning a huge number of results - it makes more sense if we 'cap' the number of results we return to the top 50 or so.

We've tried filtering the results to exact matches on the F# side, but it hasn't made much of a dent in the UI freeze. See 

See also  for the original F# issue.

#### Repro steps

1. Open VisualFSharp.sln
2. Go to all &gt; Search "a"
3. See the UI freeze

#### Expected behavior

No UI freeze

#### Actual behavior

UI is frozen for many seconds

#### Related information

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>18250</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>18250</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"CSharpCodeActions.Rename Tracking before GFU" is flaky</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>17/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18250</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18250</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>18250</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>18250</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Encountered in this PR:


Jenkins link:


Stacktrace

MESSAGE:
No Active Light Bulbs in View!
+++++++++++++++++++
STACK TRACE:
at Tao.Utilities.Extensions.ThrowUnexpectedResultException[TAction](TAction action, String message) at Roslyn.Hosting.Test.VerifyCodeActionsAction.ExecuteOnUIThread() in D:\j\workspace\windows_eta_o---d880a2eb\Closed\Hosting\RoslynTaoActions\Actions\EditorTestApp\VerifyCodeActionsAction.cs:line 125 at Roslyn.Hosting.Test.EditorAction.&lt;Execute&gt;b__0_0() in D:\j\workspace\windows_eta_o---d880a2eb\Closed\Hosting\Test\Actions\EditorTestApp\EditorAction.cs:line 21 at Roslyn.Hosting.Test.EditorTestAppAction.&lt;&gt;c__DisplayClass25_0.&lt;ExecuteOnUIThread&gt;b__0() in D:\j\workspace\windows_eta_o---d880a2eb\Closed\Hosting\Test\Actions\EditorTestApp\EditorTestAppAction.cs:line 165 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at Roslyn.Hosting.Test.EditorTestAppAction.ExecuteOnUIThread(Action a) in D:\j\workspace\windows_eta_o---d880a2eb\Closed\Hosting\Test\Actions\EditorTestApp\EditorTestAppAction.cs:line 178 at Roslyn.Hosting.Test.EditorAction.Execute(TaoEngine engine) in D:\j\workspace\windows_eta_o---d880a2eb\Closed\Hosting\Test\Actions\EditorTestApp\EditorAction.cs:line 13 at Tao.Engine.DebuggableActionExecutor.Execute() at Tao.Engine.DefaultActionExecutor.Execute()</Description>
  </Issue>
  <Issue>
    <IssueID>18247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Explicitly typed "var" declarations in C#</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>28/03/2017</ClosedDate>
    <IssueLabels />
    <Description>## Problem
You can currently define variables in 3 ways using explicit types or an implicit type using the `` to use a more consistent syntax throughout their code.</Description>
  </Issue>
  <Issue>
    <IssueID>18246</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>18246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactor &amp; Decide on interface versus abstract type</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>06/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>18246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>18246</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Tagging @heejaechang, who would like to discuss this in the API design meeting.</Description>
  </Issue>
  <Issue>
    <IssueID>18244</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Possible concurrency problem with XmlDocumentationProvider</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Investigation Required</Name>
        <IssueID>18244</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.0.0 (NuGet)

**Steps to Reproduce**:

1. Load an assembly into a compilation using a `MetadataReference`, specifying an `XmlDocumentationProvider`
2. Concurrently call `ISymbol.GetDocumentationCommentXml()`

**Expected Behavior**: Correct XML from the XML file.

**Actual Behavior**: Occasional missing XML elements that are present in the XML file.

I've noticed this happening in big documentation generations where I concurrently iterate lots of symbols and repeatedly attempt to get the XML comments for them. Most of the time it works fine, but every so often one of the symbols will end up with missing comments.

It's been difficult to track down a root cause due to inconsistency, but wrapping the entire `ISymbol.GetDocumentationCommentXml()` call in a lock appears to resolve the issue leading me to suspect some kind of concurrency problem. It could be in the `GetDocumentationCommentXml()` implementation, but I suspect it's in `XmlDocumentationProvider.GetDocumentationForSymbol()`. 

Specifically, there's a check outside the lock if the dictionary cache has been initialized. If not we lock and read the XML file, but if the dictionary has been initialized we go straight to checking for the symbol. If a thread starts generating the dictionary and then another gets to the method and does the check for initialization before the first is done it may get incomplete or inconsistent information.

This *might* be related to #18191 since symptoms sound similar (cc @rynowak)
</Description>
  </Issue>
  <Issue>
    <IssueID>18242</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0028 (Collection initialization can be simplified) - invalid code fix</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18242</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi, IDE0028 proposes invalid code fix for following code (using VS2017 15.0.26228.9):
``
The fix looks like this:
![ide0028](

which does not compile.

Diagnostic should not be displayed in these cases or fix has to be smarter.</Description>
  </Issue>
  <Issue>
    <IssueID>18241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Do not suggest replacing property with separate methods</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>18241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
Visual Studio/15.0.0-RTW+26228.4

**Steps to Reproduce**:
See Actual behavior.

**Expected Behavior**:
Introduce private field and implement getter/setter to use that field instead of introducing separate methods which break the concept (or unit) of property. At least have this refactoring with higher priority.

**Actual Behavior**:
C# is the only language which has a clear concept of Properties, instead of having only methods which are separate and independent of each other. Why do you suggest this anti-pattern instead of implementing getters/setters?

![image](

</Description>
  </Issue>
  <Issue>
    <IssueID>18240</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Generate class ..." causes inconsistent accessibility</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>04/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18240</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Foo&lt;T&gt; where T : Bar // Generate class 'Bar'
{
}

**Actual Behavior**:
csharp
public class Foo&lt;T&gt; where T : Bar // CS0703 Inconsistent accessibility: constraint type 'Bar' is less accessible than 'Foo&lt;T&gt;'
{
}

internal class Bar 
{
}


**Expected Behavior**:
csharp
public class Foo&lt;T&gt; where T : Bar
{
}

public class Bar 
{
}
`</Code>
    <Description>**Version Used**: Visual Studio 2017 15.0.0-RTW+26228.4

**Code to Reproduce**:
``</Description>
  </Issue>
  <Issue>
    <IssueID>18239</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extract method should extract into local function</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>02/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18239</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual Studio/15.0.0-RTW+26228.4

**Steps to Reproduce**:
See Actual behavior.

**Expected Behavior**:
Extract method refactoring should extract into local function if selection contains local function invocations.

**Actual Behavior**:
![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>18237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>18237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>The 'C# 7' language version is missing from csc.exe /? printhelp</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>06/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>18237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>18237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The 'C# 7' language version is missing from csc.exe /? printhelp.
See: 

**Version Used**: 
`csc.exe 2.0.0.61501`

**Steps to Reproduce**:
`csc.exe /?`

**Expected Behavior**:
`/langversion:&lt;string&gt;         Specify language version mode: ISO-1, ISO-2, 3, 5, 6, 7, Default, or Latest`

**Actual Behavior**:
`/langversion:&lt;string&gt;         Specify language version mode: ISO-1, ISO-2, 3, 5, 6, Default, or Latest`
</Description>
  </Issue>
  <Issue>
    <IssueID>18234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>18234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Replace property with method" throws away XML comments</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>28/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>18230</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Critical capabilities changes were detected without any change made to the project, and forces the project to be reloaded.</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>28/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>18230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Changed branches in git and reloaded the solution.  Then this happened.
``
</Description>
  </Issue>
  <Issue>
    <IssueID>18229</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggestion: When calling a non-existent method, don't autocomplete on colon</Title>
    <CreatedDate>28/03/2017</CreatedDate>
    <ClosedDate>10/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>18229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>18229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>18229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm calling a non-existent method
``

I type `firstParameter:` at the $$, and completion commits whatever happens to be selected and I get some type/namespace/method name inserted when I'm trying to use named arguments.</Description>
  </Issue>
  <Issue>
    <IssueID>18225</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Missing child IOperations for an IInvalidStatement for a goto case statement outside switch statement</Title>
    <CreatedDate>27/03/2017</CreatedDate>
    <ClosedDate>27/06/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>18225</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Source:
``

IOperation tree is missing the ILiteralExpression child.
Issue seems to be here: </Description>
  </Issue>
  <Issue>
    <IssueID>17218</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>17218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Provide an option to the diagnostic suppression codefix to use SuppressMessage vs. pragmas</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>14/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>17218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>IDE-CodeStyle</Name>
        <IssueID>17218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17218</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I understand the rationale behind adopting pragmas as the defacto suppression codefix as discussed in [this issue]( but mixing pragmas and [SuppressMessage] in large, existing codebases is non-ideal. It would be nice if there was an option/configuration file that could tweak the suppression mechanism the codefix employs.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>17218</IssueID>
        <PullRequestID>35327</PullRequestID>
        <Title>Resurrected the option to suppress in source using attributes</Title>
        <Description>Resurrected the option to suppress in source using attributes (see 

The code was taken from the history ( and adapted to latest changes.
TODO:
* "Fix all" not implemented/does not work, if used pragma suppression is performed
* add unit tests
* title needs translation</Description>
        <CreatedDate>28/04/2019</CreatedDate>
        <ClosedDate>14/05/2019</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>17218</IssueID>
            <PullRequestID>35327</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Community</Name>
            <IssueID>17218</IssueID>
            <PullRequestID>35327</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>mavasani</FixedById>
            <PullRequestID>35327</PullRequestID>
            <IssueID>17218</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>17217</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>improve how to handle OOP killed NoOpSession case</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>23/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>17217</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>right now Session.InvokeAsync returns default(T) if OOP is killed by users to indicate features that OOP is gone.

this seems not intuitive to know what is going on.

3 options.

1. make CreateSession to return null rather than NoOpSession.
2. make Session to throw to indicate this bad situation
3. make InvokeAsync to return some result type user can check to see the call actually succeeded.
4. make all caller to subscribe to RemoteHostClient.ConnectionChange and each feature deal with a case where OOP is gone.

</Description>
  </Issue>
  <Issue>
    <IssueID>17214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VisualStudioSetup or VisualStudioSetup.Next don't deploy ExpressionEvaluator or Interactive</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>02/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>17214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro
1. Set VisualStudioSetup.Next as startup project
2. Hit F5
3. In the new instance of VS start debugging something (to load EE)
4. In the new instance of VS, open the interactive window
5. In the initial instance of VS check the loaded modules

You will notice that all the CodeAnalysis modules were loaded from the RoslynDev hive folder (ie. correctly), except for the ExpressionEvaluator and Interactive modules (those were still loaded from the non-hive folder).

For EE, the workaround indicated by Chuck was to build the "ExpressionEvaluatorPackage" project (under ExpressionEvaluator/Setup) before F5. That indeed fixed the problem.
So I suspect there is a missing dependency between Setup or Setup.Next and ExpressionEvaluatorPackage project.

I suspect something similar is missing for Interactive.

Modules loaded when exercising the EE:
![image](


Modules loaded when exercising Interactive:
![image](

FYI @tmat</Description>
  </Issue>
  <Issue>
    <IssueID>17208</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>17208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Unassigned local" error for reference to "out var" in "group by"</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>18/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>17208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>17208</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The compiler incorrectly reports `CS0165` for `y == null`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>17207</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Could we drop CS1612 on setting struct property?</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>07/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>17207</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes I made struct just for being wrapper to another class object

``

Like so, when that struct was being returned from another property or indexer, it cause `error CS1612: Cannot modify the return value of 'Dictionary&lt;string, DictVector&gt;.this[string]' because it is not a variable`

Changing that struct to be class work fine. I just think it has no reason to cause error for property while method seem OK. It should error just for set field</Description>
  </Issue>
  <Issue>
    <IssueID>17204</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Let conditional operator ?: work on nullable</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>17/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>17204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>17204</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes we have `bool?` condition. Such as `dictionary?.TryGetValue(key,out value)`

When I want it to `return dictionary?.TryGetValue(key,out value) ? value : null` it cause error

Maybe we should support `?:??` like this?

`return dictionary?.TryGetValue(key,out value) ? value : null ?? null`

or maybe just

``</Description>
  </Issue>
  <Issue>
    <IssueID>17203</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IErrorReportingService needs to be cleaned up</Title>
    <CreatedDate>17/02/2017</CreatedDate>
    <ClosedDate>16/01/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>17203</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>in this PR - 

I added ability to show infobar in VS main window. and some people believe IDE should always use that which is different behavior than what we have now.

looks like we have some clean up to do on the service.

options are

1. leave things as it is.
2. make everyone to use VS main window
3. make service to accept view to show the infobar explicitly.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>17203</IssueID>
        <PullRequestID>17174</PullRequestID>
        <Title>let OOP to be killed</Title>
        <Description>**Customer scenario**

Customer kills VS ServiceHub processes and VS crash.

**Bugs this fixes:** 



**Workarounds, if any**

don't kill ServiceHub processes.

**Risk**

we no longer explicitly kill VS when we detect OOP is gone, but there can be still some cases where OOP is killed at right moment which cause OOP features to throw exceptions we didn't know about. and that exception caused VS to crash.

also, if user decides to keep using VS after killing OOP, VS is in unknown state. can't guarantee VS will work as it should.

**Performance impact**

I don't see any performance impact since this code is only related to specific user action (killing OOP processes). after that, VS is unstable anyway. we explicitly ask users to close and re-open VS.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

the crash happened because we had code that explicitly killed VS when OOP is killed unintentionally. now, we removed that code and instead show this if that happens.

![image](

**How was the bug found?**

Watson, customer reports</Description>
        <CreatedDate>16/02/2017</CreatedDate>
        <ClosedDate>21/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>17203</IssueID>
            <PullRequestID>17174</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Needs Shiproom Approval</Name>
            <IssueID>17203</IssueID>
            <PullRequestID>17174</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>17203</IssueID>
            <PullRequestID>17174</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>17198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MemberSemanticModel.GetDeclaredSymbol(LocalFunctionStatementSyntax shouldn't bind LocalFunctionStatementSyntax</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>28/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>It should work similar to ``, which doesn't bind any syntax. </Description>
  </Issue>
  <Issue>
    <IssueID>17194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Typing "core" to filter new project templates doesn't find "Console App (.Net Core)"</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels />
    <Description>1. Open VS2017
2. In the box below "New project", type "core" and enter
No results


![image](

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>17191</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>TyOverby</FixedById>
        <IssueID>17191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Suspected Race Condition in VB Binder</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>07/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>17191</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
F:\roslyn&gt;C:\Users\tyoverby\.nuget\packages\xunit.runner.console\2.2.0-beta4-build3444\tools\xunit.console.x86.exe "F:\roslyn\Binaries\Debug\UnitTests\BasicCommandLineTest\\Roslyn.Compilers.VisualBasic.CommandLine.UnitTests.dll" -method Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.ErrorLoggerTests.AnalyzerDiagnosticsWithAndWithoutLocation



Stack Trace


xUnit.net Console Runner (32-bit .NET 4.0.30319.42000)
  Discovering: Roslyn.Compilers.VisualBasic.CommandLine.UnitTests
  Discovered:  Roslyn.Compilers.VisualBasic.CommandLine.UnitTests
  Starting:    Roslyn.Compilers.VisualBasic.CommandLine.UnitTests
    Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.ErrorLoggerTests.AnalyzerDiagnosticsWithAndWithoutLocation [FAIL]
      System.InvalidOperationException : This program location is thought to be unreachable.
      Stack Trace:
           at Microsoft.CodeAnalysis.VisualBasic.BackstopBinder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Binder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Binder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Binder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Binder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Binder.GetSyntaxReference(VisualBasicSyntaxNode node)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourcePropertySymbol.Create(SourceMemberContainerTypeSymbol containingType, Binder bodyBinder, PropertyStatementSyntax syntax, PropertyBlockSyntax blockSyntaxOpt, DiagnosticBag diagnostics)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.CreateProperty(PropertyStatementSyntax syntax, PropertyBlockSyntax blockSyntaxOpt, Binder binder, DiagnosticBag diagBag, MembersAndInitializersBuilder members, ArrayBuilder`1&amp; staticInitializers, ArrayBuilder`1&amp; instanceInitializers)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.AddMember(StatementSyntax memberSyntax, Binder binder, DiagnosticBag diagBag, MembersAndInitializersBuilder members, ArrayBuilder`1&amp; staticInitializers, ArrayBuilder`1&amp; instanceInitializers, Boolean reportAsInvalid)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.AddMembersInPart(Binder binder, VisualBasicSyntaxNode node, DiagnosticBag diagBag, DeclarationModifiers accessModifiers, MembersAndInitializersBuilder members, ArrayBuilder`1&amp; staticInitializers, ArrayBuilder`1&amp; instanceInitializers, Boolean&amp; nodeNameIsAlreadyDefined)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.AddDeclaredNonTypeMembers(MembersAndInitializersBuilder membersBuilder, DiagnosticBag diagnostics)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.BuildNonTypeMembers(DiagnosticBag diagnostics)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagBag)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers()
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.get_MemberAndInitializerLookup()
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GetMembersUnordered()
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.EnsureAllHandlesAreBound()
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol.GenerateAllDeclarationErrorsImpl(CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol.GenerateDeclarationErrors(CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol._Closure$__78-0._Lambda$__1(NamespaceOrTypeSymbol typeOrNamespace)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.VisitTypesAndNamespacesWithin(NamespaceOrTypeSymbol ns, Action`1 visitor, ConcurrentStack`1 tasks, CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.VisitAllSourceTypesAndNamespaces(Action`1 visitor, ConcurrentStack`1 tasks, CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.GetAllDeclarationErrors(CancellationToken cancellationToken, Boolean&amp; hasExtensionMethods)
           at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceAssemblySymbol.GetAllDeclarationErrors(CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDeclarationDiagnostics(CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.CommonCompiler.RunCore(TextWriter consoleOutput, ErrorLogger errorLogger, CancellationToken cancellationToken)
           at Microsoft.CodeAnalysis.CommonCompiler.Run(TextWriter consoleOutput, CancellationToken cancellationToken)
        src\Compilers\VisualBasic\Test\CommandLine\ErrorLoggerTests.vb(290,0): at Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.ErrorLoggerTests.AnalyzerDiagnosticsWithAndWithoutLocation()
  Finished:    Roslyn.Compilers.VisualBasic.CommandLine.UnitTests


The binding error is not occurring in the source code for the actual module, instead it is occurring in the My Template


{' Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

Option Strict On
Option Explicit On
Option Compare Binary

#If TARGET = "module" AndAlso _MYTYPE = "" Then
#Const _MYTYPE="Empty"
#End If

#If _MYTYPE = "WindowsForms" Then

#Const _MYFORMS = True
#Const _MYWEBSERVICES = True
#Const _MYUSERTYPE = "Windows"
#Const _MYCOMPUTERTYPE = "Windows"
#Const _MYAPPLICATIONTYPE = "WindowsForms"

#ElseIf _MYTYPE = "WindowsFormsWithCustomSubMain" Then

#Const _MYFORMS = True
#Const _MYWEBSERVICES = True
#Const _MYUSERTYPE = "Windows"
#Const _MYCOMPUTERTYPE = "Windows"
#Const _MYAPPLICATIONTYPE = "Console"

#ElseIf _MYTYPE = "Windows" OrElse _MYTYPE = "" Then

#Const _MYWEBSERVICES = True
#Const _MYUSERTYPE = "Windows"
#Const _MYCOMPUTERTYPE = "Windows"
#Const _MYAPPLICATIONTYPE = "Windows"

#ElseIf _MYTYPE = "Console" Then

#Const _MYWEBSERVICES = True
#Const _MYUSERTYPE = "Windows"
#Const _MYCOMPUTERTYPE = "Windows"
#Const _MYAPPLICATIONTYPE = "Console"

#ElseIf _MYTYPE = "Web" Then

#Const _MYFORMS = False
#Const _MYWEBSERVICES = False
#Const _MYUSERTYPE = "Web"
#Const _MYCOMPUTERTYPE = "Web"

#ElseIf _MYTYPE = "WebControl" Then

#Const _MYFORMS = False
#Const _MYWEBSERVICES = True
#Const _MYUSERTYPE = "Web"
#Const _MYCOMPUTERTYPE = "Web"

#ElseIf _MYTYPE = "Custom" Then

#ElseIf _MYTYPE &lt;&gt; "Empty" Then

#Const _MYTYPE = "Empty"

#End If

#If _MYTYPE &lt;&gt; "Empty" Then

Namespace My

#If _MYAPPLICATIONTYPE = "WindowsForms" OrElse _MYAPPLICATIONTYPE = "Windows" OrElse _MYAPPLICATIONTYPE = "Console" Then

    &lt;Global.System.CodeDom.Compiler.GeneratedCodeAttribute("MyTemplate", "11.0.0.0")&gt; _
    &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; Partial Friend Class MyApplication

#If _MYAPPLICATIONTYPE = "WindowsForms" Then
        Inherits Global.Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase
#If TARGET = "winexe" Then
        &lt;Global.System.STAThread(), Global.System.Diagnostics.DebuggerHidden(), Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Advanced)&gt; _
        Friend Shared Sub Main(ByVal Args As String())
            Try
               Global.System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(MyApplication.UseCompatibleTextRendering())
            Finally
            End Try               
            My.Application.Run(Args)
        End Sub
#End If

#ElseIf _MYAPPLICATIONTYPE = "Windows" Then
        Inherits Global.Microsoft.VisualBasic.ApplicationServices.ApplicationBase
#ElseIf _MYAPPLICATIONTYPE = "Console" Then
        Inherits Global.Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase	
#End If '_MYAPPLICATIONTYPE = "WindowsForms"

    End Class

#End If '#If _MYAPPLICATIONTYPE = "WindowsForms" Or _MYAPPLICATIONTYPE = "Windows" or _MYAPPLICATIONTYPE = "Console"

#If _MYCOMPUTERTYPE &lt;&gt; "" Then

    &lt;Global.System.CodeDom.Compiler.GeneratedCodeAttribute("MyTemplate", "11.0.0.0")&gt; _
    &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; Partial Friend Class MyComputer

#If _MYCOMPUTERTYPE = "Windows" Then
        Inherits Global.Microsoft.VisualBasic.Devices.Computer
#ElseIf _MYCOMPUTERTYPE = "Web" Then
        Inherits Global.Microsoft.VisualBasic.Devices.ServerComputer
#End If
        &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
        &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
        Public Sub New()
            MyBase.New()
        End Sub
    End Class
#End If

    &lt;Global.Microsoft.VisualBasic.HideModuleName()&gt; _
    &lt;Global.System.CodeDom.Compiler.GeneratedCodeAttribute("MyTemplate", "11.0.0.0")&gt; _
    Friend Module MyProject

#If _MYCOMPUTERTYPE &lt;&gt; "" Then
        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Computer")&gt; _
        Friend ReadOnly Property Computer() As MyComputer
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_ComputerObjectProvider.GetInstance()
            End Get
        End Property

        Private ReadOnly m_ComputerObjectProvider As New ThreadSafeObjectProvider(Of MyComputer)
#End If

#If _MYAPPLICATIONTYPE = "Windows" Or _MYAPPLICATIONTYPE = "WindowsForms" Or _MYAPPLICATIONTYPE = "Console" Then
        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Application")&gt; _
        Friend ReadOnly Property Application() As MyApplication
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_AppObjectProvider.GetInstance()
            End Get
        End Property
        Private ReadOnly m_AppObjectProvider As New ThreadSafeObjectProvider(Of MyApplication)
#End If

#If _MYUSERTYPE = "Windows" Then
        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.User")&gt; _
        Friend ReadOnly Property User() As Global.Microsoft.VisualBasic.ApplicationServices.User
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_UserObjectProvider.GetInstance()
            End Get
        End Property
        Private ReadOnly m_UserObjectProvider As New ThreadSafeObjectProvider(Of Global.Microsoft.VisualBasic.ApplicationServices.User)
#ElseIf _MYUSERTYPE = "Web" Then
        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.User")&gt; _
        Friend ReadOnly Property User() As Global.Microsoft.VisualBasic.ApplicationServices.WebUser
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_UserObjectProvider.GetInstance()
            End Get
        End Property
        Private ReadOnly m_UserObjectProvider As New ThreadSafeObjectProvider(Of Global.Microsoft.VisualBasic.ApplicationServices.WebUser)
#End If

#If _MYFORMS = True Then

#Const STARTUP_MY_FORM_FACTORY = "My.MyProject.Forms"

        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Forms")&gt; _
        Friend ReadOnly Property Forms() As MyForms
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_MyFormsObjectProvider.GetInstance()
            End Get
        End Property

        &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
        &lt;Global.Microsoft.VisualBasic.MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")&gt; _
        Friend NotInheritable Class MyForms
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Private Shared Function Create__Instance__(Of T As {New, Global.System.Windows.Forms.Form})(ByVal Instance As T) As T
                If Instance Is Nothing OrElse Instance.IsDisposed Then
                    If m_FormBeingCreated IsNot Nothing Then
                        If m_FormBeingCreated.ContainsKey(GetType(T)) = True Then
                            Throw New Global.System.InvalidOperationException(Global.Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString("WinForms_RecursiveFormCreate"))
                        End If
                    Else
                        m_FormBeingCreated = New Global.System.Collections.Hashtable()
                    End If
                    m_FormBeingCreated.Add(GetType(T), Nothing)
                    Try
                        Return New T()
                    Catch ex As Global.System.Reflection.TargetInvocationException When ex.InnerException IsNot Nothing
                        Dim BetterMessage As String = Global.Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString("WinForms_SeeInnerException", ex.InnerException.Message)
                        Throw New Global.System.InvalidOperationException(BetterMessage, ex.InnerException)
                    Finally
                        m_FormBeingCreated.Remove(GetType(T))
                    End Try
                Else
                    Return Instance
                End If
            End Function

            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Private Sub Dispose__Instance__(Of T As Global.System.Windows.Forms.Form)(ByRef instance As T)
                instance.Dispose()
                instance = Nothing
            End Sub

            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
            Public Sub New()
               MyBase.New()
            End Sub

            &lt;Global.System.ThreadStatic()&gt; Private Shared m_FormBeingCreated As Global.System.Collections.Hashtable

            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; Public Overrides Function Equals(ByVal o As Object) As Boolean
                Return MyBase.Equals(o)
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; Public Overrides Function GetHashCode() As Integer
                Return MyBase.GetHashCode
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
            Friend Overloads Function [GetType]() As Global.System.Type
                Return GetType(MyForms)
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; Public Overrides Function ToString() As String
                Return MyBase.ToString
            End Function
        End Class

        Private m_MyFormsObjectProvider As New ThreadSafeObjectProvider(Of MyForms)

#End If

#If _MYWEBSERVICES = True Then

        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.WebServices")&gt; _
        Friend ReadOnly Property WebServices() As MyWebServices
             &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
             Get
                Return m_MyWebServicesObjectProvider.GetInstance()
            End Get
        End Property

        &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
        &lt;Global.Microsoft.VisualBasic.MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")&gt; _
        Friend NotInheritable Class MyWebServices

            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never), Global.System.Diagnostics.DebuggerHidden()&gt; _
            Public Overrides Function Equals(ByVal o As Object) As Boolean
                Return MyBase.Equals(o)
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never), Global.System.Diagnostics.DebuggerHidden()&gt; _
            Public Overrides Function GetHashCode() As Integer
                Return MyBase.GetHashCode
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never), Global.System.Diagnostics.DebuggerHidden()&gt; _
            Friend Overloads Function [GetType]() As Global.System.Type
                Return GetType(MyWebServices)
            End Function
            &lt;Global.System.ComponentModel.EditorBrowsable(Global.System.ComponentModel.EditorBrowsableState.Never), Global.System.Diagnostics.DebuggerHidden()&gt; _
            Public Overrides Function ToString() As String
                Return MyBase.ToString
            End Function

           &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
           Private Shared Function Create__Instance__(Of T As {New})(ByVal instance As T) As T
                If instance Is Nothing Then
                    Return New T()
                Else
                    Return instance
                End If
            End Function

            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Private Sub Dispose__Instance__(Of T)(ByRef instance As T)
                instance = Nothing
            End Sub

            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
            Public Sub New()
               MyBase.New()
            End Sub
        End Class

        Private ReadOnly m_MyWebServicesObjectProvider As New ThreadSafeObjectProvider(Of MyWebServices)
#End If

#If _MYTYPE = "Web" Then

        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Request")&gt; _
        Friend ReadOnly Property Request() As Global.System.Web.HttpRequest
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Dim CurrentContext As Global.System.Web.HttpContext = Global.System.Web.HttpContext.Current
                If CurrentContext IsNot Nothing Then
                    Return CurrentContext.Request
                End If
                Return Nothing
            End Get
        End Property

        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Response")&gt; _
        Friend ReadOnly Property Response() As Global.System.Web.HttpResponse
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Dim CurrentContext As Global.System.Web.HttpContext = Global.System.Web.HttpContext.Current
                If CurrentContext IsNot Nothing Then
                    Return CurrentContext.Response
                End If
                Return Nothing
            End Get
        End Property

        &lt;Global.System.ComponentModel.Design.HelpKeyword("My.Application.Log")&gt; _
        Friend ReadOnly Property Log() As Global.Microsoft.VisualBasic.Logging.AspLog
            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            Get
                Return m_LogObjectProvider.GetInstance()
            End Get
        End Property

        Private ReadOnly m_LogObjectProvider As New ThreadSafeObjectProvider(Of Global.Microsoft.VisualBasic.Logging.AspLog)

#End If  '_MYTYPE="Web"

        &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
        &lt;Global.System.Runtime.InteropServices.ComVisible(False)&gt; _
        Friend NotInheritable Class ThreadSafeObjectProvider(Of T As New)
            Friend ReadOnly Property GetInstance() As T
#If TARGET = "library" Then
                &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
                Get
                    Dim Value As T = m_Context.Value
                    If Value Is Nothing Then
                        Value = New T
                        m_Context.Value() = Value
                    End If
                    Return Value
                End Get
#Else
                &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
                Get
                    If m_ThreadStaticValue Is Nothing Then m_ThreadStaticValue = New T
                    Return m_ThreadStaticValue
                End Get
#End If
            End Property

            &lt;Global.System.Diagnostics.DebuggerHidden()&gt; _
            &lt;Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Never)&gt; _
            Public Sub New()
                MyBase.New()
            End Sub

#If TARGET = "library" Then
            Private ReadOnly m_Context As New Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue(Of T)
#Else
            &lt;Global.System.Runtime.CompilerServices.CompilerGenerated(), Global.System.ThreadStatic()&gt; Private Shared m_ThreadStaticValue As T
#End If
        End Class
    End Module
End Namespace
#End If
}
`</Code>
    <Description>Test: [Microsoft.CodeAnalysis.VisualBasic.CommandLine.UnitTests.ErrorLoggerTests.AnalyzerDiagnosticsWithAndWithoutLocation](

Repro steps: 

1. In the test, add `\parallel-` to the command-line flags.
2. Run the test *by itself* (this bug does not repro reliably when run with other tests)

My repro script is 

``</Description>
  </Issue>
  <Issue>
    <IssueID>17189</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Light bulb no longer works in Interactive Window</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>06/04/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>17189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingIDE</Name>
        <IssueID>17189</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Repro:
1) Open C# Interactive Window
2) Type

``.

Actual result:
Nothing happens.
</Description>
  </Issue>
  <Issue>
    <IssueID>17185</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0016 is suggested in places where it changes the semantics of the code</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>17185</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Example:
``

In the case where `x` is not null, but `y` is, the semantics of the code has changed, because now `_x` will be assigned before the `ArgumentNullException` has been thrown for `_y`.</Description>
  </Issue>
  <Issue>
    <IssueID>17184</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>17184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Change configuration of analyzers from the editor</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>22/06/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>17184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Add an item to the lightbulb menu Preview to let a user change the configuration quickly from the editoir. </Description>
  </Issue>
  <Issue>
    <IssueID>17183</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>17183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0007 and IDE0008 do not work for 'Fix all occurrences'</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>26/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Attempting to 'Fix all occurrences' for IDE0007 (Use 'var' instead of explicit type) or IDE0008 (Use explicit type instead of 'var') results in Preview Changes dialog that contains no entries:

![image](</Description>
  </Issue>
  <Issue>
    <IssueID>17181</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ellipsis is showing even if a diagnostic is suppressed with #pragma</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.0-RC4+26206.0

**Code to Reproduce**:

![ellipsis](
</Description>
  </Issue>
  <Issue>
    <IssueID>17178</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mavasani</FixedById>
        <IssueID>17178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VS crashes itself shortly after opening solution with .NET Core and UWP project</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>17178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>17178</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>d15rel 26214.0

After opening a solution from my MRU and switching to another app, several seconds later VS crashed itself. Here is the info from the Event Viewer:

``</Description>
  </Issue>
  <Issue>
    <IssueID>17177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>17177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unresolvable conflict not indicated when renaming identifier.</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.0-RC4+26206.0

**Code to Reproduce**:

![rename](
</Description>
  </Issue>
  <Issue>
    <IssueID>17173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>[Umbrella] Add LanguageVersion 7.1/15.3 and streamline process</Title>
    <CreatedDate>16/02/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Readonly References</Name>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Update (jcouv): Updated the issue to capture proposal and open issues.

Here's the current proposal:

In the IDE, the dropdown will just have new entries, “C# 7.1”, …, “C# 8.0”, in addition to current options.
It will also have a new entry “latest”, which means ‘latest latest’ version. The existing “default” option means ‘latest major’ version. 
We will likely re-label “latest” and “default” to friendlier names in the UI, but we will keep the default as ‘latest major’.

No change in msbuild (just passing langver through, as today).

In the compiler:
Langver command-line parameter is a string and currently accepts “7”, “default”, and some more. It will support new options: “7.1” and “latest”.
The public API enum, `LanguageVersion`, will have a new entry with label “CSharp7_1” and enum value `71` (integer). C# 8 will be represented with label “CSharp8” and value `80`. The enum already supports “Latest”.

## General tracking of compiler adoption with new releases

Moved the table tracking adoption to 

## Work items for adding 7.1

- [x] We need to confirm whether the enum value stays `71` (adequate for less than 9 minor versions) or become `701` or whatever. Once the value is settled, the output needs to be fixed and tests will have to be adjusted. (fixed in 
- [x] The parsing of command-line parameter should not accept "71", but rather "7.1" (fixed in 
- [x] Fix the error message (it should print "7.1", instead of the "71" currently) (fixed in 
- [x] Add entries to UI ("7.1" and "latest") and re-label as discussed
    - "C# latest major version (default)”
    - "C# latest minor version (latest)” 
- [x] Add code fixer so that `ERR_FeatureNotAvailableInVersion7` offer "upgrade this project to use 'latest'" and "upgrade all projects to use 'latest'". (PR 
- [x] Use a single diagnostic for `LanguageVersionExtensionsInternal.GetErrorCode()` (no, better telemetry to keep different error codes)
- [x] Print version diagnostic with `#VERSION` ( PR 
- [x] After any of the 7.1 features are merged to master, the UpgradeProject code fixer should be modified to handle it and tested accordingly.
- [x] Allow new VB versions without project system change (

- [ ] **VB project settings UI and DTE. (This was punted)**

## General checklist for adding new language version
- [x] Add new enum value to `LanguageVersion`
- [x] A number of tests will break and provide a checklist of fixes, including:
    - [x] Update the mapping for "default" and "latest"
    - [x] Update the command-line documentation
    - [x] Update the command-line help
    - [x] Update the UpgradeProject code fixer

Relates to </Description>
  </Issue>
  <Issue>
    <IssueID>17171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Extracting class to a separate file does not add EOL in the end of the file</Title>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>@krwq said:
&gt; Most of the guidelines recommend to use EOL in the end of file - when separating class into separate file in VS using refactoring options it does not add it by default.

This issue was moved from: </Description>
  </Issue>
  <Issue>
    <IssueID>17165</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>17165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>17165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>ExtractMethodMatrix.GetVariableStyle Throws exception on code with errors</Title>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>15/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17165</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](

**Steps to Reproduce**:

1.  Use Alt+Arrow to move members into lambda that is an argument into a method that is missing semicolon

**Expected Behavior**:
No Crash

**Actual Behavior**:
``

Also reported at </Description>
  </Issue>
  <Issue>
    <IssueID>17157</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>17157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# Interactive doesn't work with tuple syntax when desktop framework 4.7 is installed</Title>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>17157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingLogic</Name>
        <IssueID>17157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC 15.9.9-RC4+26206.0
Microsoft (R) Visual C# Interactive Compiler version 2.0.0.61404

**Steps to Reproduce**:

* Microsoft Visual Studio Enterprise 2017 RC 15.9.9-RC4+26206.0
1. Open the **C# Interactive** window.
2. Enter `(1,2)`

* Microsoft (R) Visual C# Interactive Compiler version 2.0.0.61404
1. Run `csi.exe`
2. Enter `(1,2)`

**Expected Behavior**:
Outputs `[(1, 2)]`

**Actual Behavior**:

* Microsoft Visual Studio Enterprise 2017 RC 15.9.9-RC4+26206.0
    (1,13): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported

* Microsoft (R) Visual C# Interactive Compiler version 2.0.0.61404
    (1,1): error CS8179: Predefined type 'System.ValueTuple`2' is not defined or imported
    (1,1): error CS0029: Cannot implicitly convert type '(string, int)' to 'object'

**Workaround**

* Microsoft Visual Studio Enterprise 2017 RC 15.9.9-RC4+26206.0

Remove

    /r:System.ValueTuple.dll

From

    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\ManagedLanguages\VBCSharp\InteractiveComponents\CSharpInteractive.rsp

* Microsoft (R) Visual C# Interactive Compiler version 2.0.0.61404

Remove

    /r:System.ValueTuple.dll

From

    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Roslyn\csi.rsp
</Description>
  </Issue>
  <Issue>
    <IssueID>17155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>TyOverby</FixedById>
        <IssueID>17155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VerifyDiagnostics doesn't print out WithLocation in assertion message</Title>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>10/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
        [Fact]
        public void LongTupleTypeMismatch()
        {
            var source = @"
class C
{
    static void Main()
    {
        (int, int, int, int, int, int, int, int) x = (""Alice"", 2, 3, 4, 5, 6, 7, 8);
        (int, int, int, int, int, int, int, int) y = (1, 2, 3, 4, 5, 6, 7, 8, 9);
    }
}
";

            CreateCompilationWithMscorlib(source, references: new[] { ValueTupleRef, SystemRuntimeFacadeRef }).VerifyDiagnostics(
                // (7,54): error CS0029: Cannot implicitly convert type '(int, int, int, int, int, int, int, int, int)' to '(int, int, int, int, int, int, int, int)'
                //         (int, int, int, int, int, int, int, int) y = (1, 2, 3, 4, 5, 6, 7, 8, 9);
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "(1, 2, 3, 4, 5, 6, 7, 8, 9)").WithArguments("(int, int, int, int, int, int, int, int, int)", "(int, int, int, int, int, int, int, int)").WithLocation(7, 54)
                ); // I deleted the second expected diagnostic
        }



  // (6,55): error CS0029: Cannot implicitly convert type 'string' to 'int'
                //         (int, int, int, int, int, int, int, int) x = ("Alice", 2, 3, 4, 5, 6, 7, 8);
                Diagnostic(ErrorCode.ERR_NoImplicitConv, @"""Alice""").WithArguments("string", "int").WithLocation(6, 55),
                // (7,54): error CS0029: Cannot implicitly convert type '(int, int, int, int, int, int, int, int, int)' to '(int, int, int, int, int, int, int, int)'
                //         (int, int, int, int, int, int, int, int) y = (1, 2, 3, 4, 5, 6, 7, 8, 9);
                Diagnostic(ErrorCode.ERR_NoImplicitConv, "(1, 2, 3, 4, 5, 6, 7, 8, 9)").WithArguments("(int, int, int, int, int, int, int, int, int)", "(int, int, int, int, int, int, int, int)") // &lt;&lt;&lt; No location
`</Code>
    <Description>Take a unittest that expects more than one diagnostic. Delete one of them.
Run the test and look at the assertion message.
Some of the locations are missing.

``

FYI @AlekseyTs </Description>
  </Issue>
  <Issue>
    <IssueID>17154</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>No warning (CS0219) on local variables that initialized with interpolated strings, but whose values are never used</Title>
    <CreatedDate>15/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>17154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17154</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Visual Studio Community 2015
Version 14.0.23107.0 D14REL

**Steps to Reproduce**:

Declare and initialize a local variable with an interpolated string, but don't subsequently use the variable. 

E.g.

    static void Main(string[] args)
    {
         var name = "Whatever";
         var foo = "Hello, world {name}";   //warning CS2019 since 'foo' is not used.
         var bar = $"Hello, word {name}";  //no warning even though 'bar' is not used.

        return;
    }

**Expected Behavior**:

Warning: **CS0219** the variable 'bar' is assigned but its value is never used.

**Actual Behavior**:

No warning.</Description>
  </Issue>
  <Issue>
    <IssueID>17148</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS Crashes on solution reload</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17148</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
![image](


**Steps to Reproduce**:

1. Open Roslyn.sln
2. switch branch in github
3. select "Reload Solution" when Visual Studio detects the change

**Visual Studio Crashes With the Following Callstack:**
``</Description>
  </Issue>
  <Issue>
    <IssueID>17147</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>17147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Diagnostic for invalid langversion flag was not updated for C# 7</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>17147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The message should mention "7" and also "latest".

``

FYI @gafter </Description>
  </Issue>
  <Issue>
    <IssueID>17143</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>17143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE test plan needs serious updating</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17143</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Our [IDE test plan]( needs some serious updating. Turns out we also had an internal OneNote page that had some overlap.</Description>
  </Issue>
  <Issue>
    <IssueID>17140</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>17140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Type system HOLE: ref returns are not considered as invariant during variance checking</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>20/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>17140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Ref Locals and Returns</Name>
        <IssueID>17140</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
delegate ref T RefFunc&lt;out T&gt;();
interface I&lt;out T&gt; { ref T RefMethod(); }

class C : I&lt;string&gt; {
  string _field;
  public ref string RefMethod() =&gt; ref _field;
    
  public void M() {
    I&lt;string&gt; ofString = new C();
    I&lt;object&gt; ofObject = ofString;
    ofObject.RefMethod() = new object(); // BOOM!
      
    RefFunc&lt;object&gt; func = new RefFunc&lt;string&gt;(this.RefMethod);
    func() = new object(); // BOOM!
  }
}


**Expected Behavior**:

Compiler error, similar to CS1961 in the example below:
c#
interface I&lt;in T&gt; {
  // error CS1961: Invalid variance: The type parameter 'T' must be invariantly
  // valid on 'I&lt;T&gt;.RefMethod(ref T)'. 'T' is contravariant.
  void RefMethod(ref T refParameter);
}
`</Code>
    <Description>**Version Used**: 

Master branch @ February 14

**Steps to Reproduce**:

Compile the following code:
``

**Actual Behavior**:

Code compiles without a single error, program crashes at runtime:
&gt; System.TypeLoadException: 'Could not load type 'I`1' from assembly 'ConsoleApp13, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' because a covariant or contravariant type parameter was used illegally in the signature for the result type in method 'RefMethod'.'</Description>
  </Issue>
  <Issue>
    <IssueID>17139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Find All References" misses results</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>26/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On VS 2017 RC, Feb 7th update.

I have the following `public const string DealGroupValidated` in a partial class. As you can see in the screen shot, it _is_ used in one place.

![image](

Yet, when I perform a _Find All References_ on this field, it comes up empty.
![image](

This is an ASP.NET Core project migrated to `.csproj`, if it makes any difference. Lightweight solution loading is turned off.</Description>
  </Issue>
  <Issue>
    <IssueID>17138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>17138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler crash: discard designation in expression tree lambda</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

class C
{
  public Expression&lt;Func&lt;Dictionary&lt;int, int&gt;, bool&gt;&gt; Expression =&gt;
    dict =&gt; dict.TryGetValue(42, out var _);
}

Or with shorter form of discard:
c#
    dict =&gt; dict.TryGetValue(42, out _)


**Expected Behavior**:

Compiler error, similar to "error CS8198: An expression tree may not contain an out argument variable declaration."

**Actual Behavior**:


Unexpected value 'Sequence' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitExpressionWithoutStackGuard(BoundExpression node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 244
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitInternal(BoundExpression node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 260
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.Visit(BoundExpression node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 171
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.TranslateLambdaBody(BoundBlock block) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 138
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitLambdaInternal(BoundLambda node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 752
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.RewriteLambda(BoundLambda node, TypeCompilationState compilationState, TypeMap typeMap, Int32 recursionDepth, DiagnosticBag diagnostics) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\ExpressionLambdaRewriter.cs:line 114
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaConversion(BoundLambda node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 1480
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitConversion(BoundConversion conversion) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 1179
   at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 2072
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 147
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 96
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 225
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 206
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 83
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReturnStatement(BoundReturnStatement node) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 8881
   at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 2599
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 147
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 86
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 8822
   at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 2223
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 147
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 86
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(BoundBlock node, ArrayBuilder`1 prologue, ArrayBuilder`1 newLocals) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 994
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(BoundBlock node) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 975
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor) in \Binaries\Obj\CSharpCodeAnalysis\Debug\BoundNodes.xml.Generated.cs:line 2321
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeVisitors.cs:line 147
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node) in \Src\Compilers\CSharp\Portable\BoundTree\BoundTreeRewriter.cs:line 86
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(BoundStatement loweredBody, NamedTypeSymbol thisType, ParameterSymbol thisParameter, MethodSymbol method, Int32 methodOrdinal, MethodSymbol substitutedSourceMethod, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, Boolean assignLocals) in \Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 259
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt) in \Src\Compilers\CSharp\Portable\Compiler\MethodCompiler.cs:line 1221
`</Code>
    <Description>**Version Used**: 

Master branch @ Feb 14

**Steps to Reproduce**:

Compile the following code:
``</Description>
  </Issue>
  <Issue>
    <IssueID>17136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extensions per solution support</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>17136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Sometimes I find myself in situations where I wish I had the option to disable/enable specific extensions for specific solutions mainly for two reasons:

1. The extension is heavy and opening large solutions can take quite some time so you're in the mercy of the vendor to improve the experience, the classic example is using R# with large projects.

2. The extension shouldn't even load because the extension isn't used for example using Visual Assist for C++ as opposed to R#.

The problem is when you disable/enable extensions sometimes you lose the configuration and you need to restore it each time so it's really a hassle to switch between extensions and manually configuring keybinds and/or features.

Now, I can probably ask extension vendor to come up with their own mechanism to disable/enable themselves per solution but it's a bit awkward for an extension to enable itself only to find out that it should be disabled and some vendors don't even want to be in that spot, people requested this feature from JetBrains since R# 5.0 and "nothing" was done about it but besides this point it really feels like it should be a feature of the IDE.

What I'm suggesting is to either add a new "section" to `*.sln` files to track extensions or add a new `.vs\extensions.json` file to track it but I think that in order to _really_ solve the issues Visual Studio would need a new infrastructure to store its configuration per extension so something like this:
``
With this, when R# is disabled two things should happen:

1. Visual Studio should write the state of the extension to `.vs\extensions.json`.
2. Visual Studio should write its current settings to `\SomeProject\.vs\extensions\ReSharper.settings`.

When R# is enabled two things should happen:

1. Visual Studio should write the state of the extension to `.vs\extensions.json`.
2. Visual Studio should read the settings from `\SomeProject\.vs\extensions\ReSharper.settings` and apply them back to Visual Studio.

When a solution loads Visual Studio needs to check the state of the extension and enable/disable it respectively.

When both R# and Visual Assist are enabled there might be some conflicts  so one way to solve this is to show a dialog to the user and ask him/her for the default option he/she wants to set and then write it to `\SomeProject\.vs\extensions\Visual Studio.settings` which will be used whenever a conflict exists.

Installing multiple extensions for productivity tools is pretty common, sharing configuration between teams is also common and there's no reason for us to manage these things manually when the IDE should and can do it automatically.

With this improvement it would be easy to share configuration, enable/disable extensions between machines and different solutions.</Description>
  </Issue>
  <Issue>
    <IssueID>17135</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Ternary operator used inside tuple creation expression causes compiler errors</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17135</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
using System;

namespace N {
	class Program {
		static object Field1;
		static object Field2;

		public void Method(bool b) {
			// Works (fails if you uncomment last statement)
			//(string, object) vt1 = new ValueTuple&lt;string, object&gt;("", b ? Field2 : Field1);

			// Works (fails if you uncomment last statement)
			//(string, object) vt2 = ValueTuple.Create("", b ? Field2 : Field1);

			// Works (always)
			//(string, object) vt3 = ("", b ? "" : (object)123);

			// Fails
			(string, object) vt4 = ("", b ? Field2 : Field1);
		}

		public static void Main() {
		}
	}
}



1&gt;X:\ConsoleApp34\ConsoleApp34\Program.cs(19,43,19,44): error CS1026: ) expected
1&gt;X:\ConsoleApp34\ConsoleApp34\Program.cs(19,43,19,44): error CS1002: ; expected
1&gt;X:\ConsoleApp34\ConsoleApp34\Program.cs(19,43,19,44): error CS1513: } expected
1&gt;X:\ConsoleApp34\ConsoleApp34\Program.cs(19,51,19,52): error CS1002: ; expected
1&gt;X:\ConsoleApp34\ConsoleApp34\Program.cs(19,51,19,52): error CS1513: } expected
`</Code>
    <Description>**Version Used**: VS2017RC.4

``

When hovering over the error (span: `b ? Field2`), QuickInfo shows two errors:

- A declaration is not allowed in this context.
- Use of unassigned local variable 'Field2'

Is this correct behavior? Did I miss something obvious?</Description>
  </Issue>
  <Issue>
    <IssueID>17131</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IntelliSense still outputs "errors" in the Output window when it cannot file files due to races</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>15/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17131</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
[Failure] Could not find file 'c:\users\davkean\documents\visual studio 2017\Projects\ConsoleApplication1\ConsoleApplication1\Program.cs'.
`</Code>
    <Description>1. Create a new Console App (.NET Framework)
2. Delete Program.cs

Expected: No error
Actual in the Output window I get this "error":

``</Description>
  </Issue>
  <Issue>
    <IssueID>17130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>More PooledStringBuilder usage cases.</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>06/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>17130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>17130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Been looking at moving the VB unit test to use multi-line string literals.
Spotted a few opportunities to use a pooled string builder,
In `ParserTestUtilities.vb` and `CompilationTestUtilities.vb` which should reduce the memory usage.

#17134 </Description>
  </Issue>
  <Issue>
    <IssueID>17129</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline temporary variable reformats multiline if condition, unindents the following lines</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>20/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code

``</Description>
  </Issue>
  <Issue>
    <IssueID>17126</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline temporary variable unindents new statement with comment</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>20/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code

``
</Description>
  </Issue>
  <Issue>
    <IssueID>17124</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Proposal] Convert VB Unit Tests to Multiline String Literals.</Title>
    <CreatedDate>14/02/2017</CreatedDate>
    <ClosedDate>31/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>17124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>17124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Now the VB.net supports multi-line string literals, the usage of XML Literals can be lessened.
The conversion will have to be carefully done as the XML-Literal are white case sensitive as well as indentation aware, they also include escaped characters. 
There is a potential gain in test performance and memory usage. </Description>
  </Issue>
  <Issue>
    <IssueID>17122</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'IDE0019 Use pattern matching' generates invalid code if type is a nullable type</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>20/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code

``
</Description>
  </Issue>
  <Issue>
    <IssueID>17120</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'IDE0022 Use expression body for methods' removes '#endif'</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17120</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code

``</Description>
  </Issue>
  <Issue>
    <IssueID>17119</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>17119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'IDE0027 Use expression body for accessors' removes newline after getter</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>26/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17119</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: VS2017RC.4

**Steps to Reproduce**:

1. Add code
``</Description>
  </Issue>
  <Issue>
    <IssueID>17117</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>InvalidCastException in CSharpInlineDeclarationCodeFixProvider</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17117</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
int value;
foreach (var c in int.TryParse("0", out value).ToString()) { }

Invoke quick action on the first line.

**Actual Behavior**:

System.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBlock' to type 'Microsoft.CodeAnalysis.CSharp.BoundForEachStatement'.
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetForEachStatementInfo(CommonForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(SemanticModel semanticModel,CommonForEachStatementSyntax forEachStatement)
   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.GetForEachSymbols(SemanticModel model,CommonForEachStatementSyntax forEach,IMethodSymbol&amp; getEnumeratorMethod,ITypeSymbol&amp; elementType)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemanticsForNode(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode previousOriginalNode,TSyntaxNode previousReplacedNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics(TSyntaxNode currentOriginalNode,TSyntaxNode currentReplacedNode,TSyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)
   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`9.ReplacementChangesSemantics()
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax&amp; replacementNode,TextSpan&amp; issueSpan,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(QualifiedNameSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(DeclarationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(ArgumentSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(ArgumentListSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.&lt;&gt;c__DisplayClass10_0.&lt;ReduceAsync&gt;b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>**Version Used**: 26206

**Steps to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>17114</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Supported nested yield sequences</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>17114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>17114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Support automatic enumeration of sequences that appear after a "yield return" statement.

The following code is not valid C#

    class Program
    {
        static void Main(string[] args)
        {
        }

        private IEnumerable&lt;int&gt; Values
        {
            get
            {
                yield return 1;
                yield return 2;
                yield return 3;

                yield return Others;
            }
        }

        private IEnumerable&lt;int&gt; Others
        {
            get
            {
                yield return 4;
                yield return 5;
                yield return 6;
            }
        }
    }

To get the desired effect (the effect intended by the above) we must write the property 'Values'  like this:

        private IEnumerable&lt;int&gt; Values
        {
            get
            {
                yield return 1;
                yield return 2;
                yield return 3;

                foreach (var e in Others)
                    yield return e;
            }
        }

Allowing us to code it as in the first example above would seem to be a natural way of expressing this.

The basic rule could be that if the expression following yield return is of the same type as the return type of the enclosing property/method then translate this to an automatic enumeration of the expression's elements.

This is supported in F# using yield! as opposed to yield (in a sequence expression) and would be a very welcome improvement to C#. 




</Description>
  </Issue>
  <Issue>
    <IssueID>17111</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>17111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Write specification for target-typed default prototype</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>27/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>17111</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Relates to prototype work #13602</Description>
  </Issue>
  <Issue>
    <IssueID>17108</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>17108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>String Interpolation highlight issue</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>22/05/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>17108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17108</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used:**
VS 2017, VS 2015
C# 6.0 

String interpolation does not highlight argument(s) if a string contains colon character ":". Please refer the screenshot for more info.

**Actual Behavior**

![image](

**Expected Behavior**

![image](
 


</Description>
  </Issue>
  <Issue>
    <IssueID>17107</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IDE0018 when using out variables</Title>
    <CreatedDate>13/02/2017</CreatedDate>
    <ClosedDate>14/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17107</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Latest VS 2017, not sure how to see witch Roslyn version is used
**Steps to Reproduce**:
``

**Expected Behavior**:
If value is used with an out parameter, IDE0018 should be ignored

**Actual Behavior**:
IDE0018 is raised when var has an `out`

</Description>
  </Issue>
  <Issue>
    <IssueID>17104</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Local functions not in the navigation bar</Title>
    <CreatedDate>12/02/2017</CreatedDate>
    <ClosedDate>13/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>17104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>17104</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently we have 3 dropdowns in the navigation bar, projects, types in current file and members in current type.

Local functions are not in there, neither in GoToAll.

Should we have a fourth dropdown with variables/consts and local functions in current member?</Description>
  </Issue>
  <Issue>
    <IssueID>17103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>`is constant` pattern-matching operation fails to convert constant to type of left-hand-side</Title>
    <CreatedDate>12/02/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>17103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
bool Is42(byte b) =&gt; b is 42;

Works not the same way as similar `switch` statement:
c#
bool Is42(byte b) {
    switch (b) {
        case 42: return true;
        default: return false;
    }
}
`</Code>
    <Description>I know it's way too late, but maybe somebody can explain why this `is` constant pattern:
``

`switch` statement performs implicit conversion of literal expressions under `case` labels to *"govering-type"* (`byte` in the example above), while `is` expression just uses "nominal"/"default" type of literal expression and in fact first method never returns `true`.

cc @gafter</Description>
  </Issue>
  <Issue>
    <IssueID>16837</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Insertion tool should track the upstream branch when it pushes</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16837</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When the insertion tool pushes the new branch, it should track the upstream branch (i.e. `push -u`) so if you checkout the branch locally you can more easily push updates.</Description>
  </Issue>
  <Issue>
    <IssueID>16836</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>16836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>2 helper types that do similar thing</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>16836</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>looks like there are 2 helper types that does similar thing





2 probably need to be merged to one.</Description>
  </Issue>
  <Issue>
    <IssueID>16829</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>khyperia</FixedById>
        <IssueID>16829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>VB: TupleElementNamesAttribute is not emitted for property setter argument</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>27/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16829</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`TupleElementNamesAttribute` is not emitted for `set_P` or `set_Q`:
``</Description>
  </Issue>
  <Issue>
    <IssueID>16827</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>16827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>References from .NET framework project to .NET standard library project are not found</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16827</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Ported from 

**Version Used**: 
d15prerel 26130

**Steps to Reproduce**:

*Repro 1:*
1. Open the attached [ClassLibrary4.zip]( solution and see references for Class1 or Class1.M or Class1.M2 via CodeLens indicators or Find All References.

*Repro 2:*
1. Create a framework console app (FrameworkConsoleApp3_2:   4.6.1);
2. Add a new standard class library project (StandardCL3_2: [netstandard1.4]), write the method to the class;
3. Add the reference from FrameworkConsoleApp3_2 to StandardCL3_2 successfully;
4. Call the class library method from FrameworkConsoleApp3_2 and save the program.cs;
5. Build the solution succeeded;
6. See references for Class1 or Class1.M or Class1.M2 via CodeLens indicators or Find All References.

**Expected Behavior**:
Non-zero references.

**Actual Behavior**:
Zero references.
</Description>
  </Issue>
  <Issue>
    <IssueID>16825</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Incorrect inferred tuple names with null coalescing operator</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16825</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class Sample
{
  void M(bool b)
  {
      var personWithAddress =  GetPersonWithPhysicalAddress();
      var personWithEmail = GetPersonWithEmail();
      var person = personWithAddress != null ? personWithAddress : personWithEmail;
      var person2 = personWithAddress ?? personWithEmail;
  }

  public (string name, string address)? GetPersonWithPhysicalAddress() =&gt; null;
  public (string name, string email)? GetPersonWithEmail() =&gt; ("Jane", "Jane@doe.com");
}


This issue makes it impossible to replace the null coalescing operator with a conditional operator as following code will become invalid:
cs
person2.Value.address;
`</Code>
    <Description>In the following code sample variables 'person' and 'person2' should have same set of elements' names. I.e. they should both have '(string name, string)?' type. However, 'person2' has '(string name, string address)?' type. 

``</Description>
  </Issue>
  <Issue>
    <IssueID>16824</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Type argument inference with unambiguous method group</Title>
    <CreatedDate>30/01/2017</CreatedDate>
    <ClosedDate>16/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16824</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Program
{
    public static void Main()
    {
        Test(IsEven);
    }

    public static bool IsEven(int x) =&gt; x % 2 == 0;

    public static void Test&lt;T&gt;(Func&lt;T, bool&gt; predicate)
    {
    }
}
`</Code>
    <Description>Apologies if this is a dupe; I don't see another issue like this.

Please allow the following. I see no possible ambiguity in this scenario. The`IsEven` and `Test` method groups have only one overload which fits the delegate signature.

``

**Expected Behavior**:
Infers `Test&lt;int&gt;(IsEven)` and compiles

**Actual Behavior**:
CS0411 The type arguments for method 'Program.Test&lt;T&gt;(Func&lt;T, bool&gt;)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
</Description>
  </Issue>
  <Issue>
    <IssueID>16820</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Convert to Interpolated String inserts an extra space in the string from newlines</Title>
    <CreatedDate>29/01/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16820</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.0.0-RC.3+26127.0

``

The space between `B` and `C` should not be there.
This a subtle and easily-overlooked change in runtime behavior; this is quite bad.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16820</IssueID>
        <PullRequestID>17100</PullRequestID>
        <Title>Concatenate contiguous strings</Title>
        <Description>Concatenate contiguous strings when converting from string concatenation to interpolated string
fixes #16820
</Description>
        <CreatedDate>11/02/2017</CreatedDate>
        <ClosedDate>24/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16820</IssueID>
            <PullRequestID>17100</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16820</IssueID>
            <PullRequestID>17100</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16819</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>16819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline Temporary Variable adds duplicate cast</Title>
    <CreatedDate>29/01/2017</CreatedDate>
    <ClosedDate>12/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16819</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 15.0.0-RC.3+26127.0

``</Description>
  </Issue>
  <Issue>
    <IssueID>16818</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>16818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>tmeschter</FixedById>
        <IssueID>16818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MetadataAsSource uses Visual Basic code instead of C# code</Title>
    <CreatedDate>29/01/2017</CreatedDate>
    <ClosedDate>11/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16818</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  VS2017RC 15.0.26127.0

**Steps to Reproduce**:

- Create a C# Console App (.NET Framework 4.6)
- Add a VB Class Library (.NET Framework 4.6)
- Add a reference to the VB library from the C# Console App
- Restart VS
- Click on eg. 'string' in the C# code and press F12

**Expected Behavior**:

C# code is shown since current project is a C# project.

**Actual Behavior**:

Visual Basic code is shown


I couldn't repro this with VS2015.3.</Description>
  </Issue>
  <Issue>
    <IssueID>16817</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Add feature to disable or grey-out obsolete/deprecated C# methods, attributes, etc on autocomplete</Title>
    <CreatedDate>29/01/2017</CreatedDate>
    <ClosedDate>29/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16817</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16817</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16817</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[@DustinCampbell recommended, a few weeks ago, that I post the request here also. Originally in [

I couldn't find a setting for this, nor find results about it on Google. It would be really helpful to avoid auto-completing obsolete stuff when using an API that has legacy methods and attributes. In VSCode, greying out things marked Obsolete (and showing them last in the autocomplete list) - or maybe even being able to disable them - would be great.

Thanks,
Daniel</Description>
  </Issue>
  <Issue>
    <IssueID>16815</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: add `else` block to `foreach` if no items are iterated</Title>
    <CreatedDate>28/01/2017</CreatedDate>
    <ClosedDate>22/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16815</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16815</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider the following ASP.NET Razor sample:

    &lt;div class="content"&gt;
        @foreach (var item in Model
            .Items
            .Where(x =&gt; x.Name != null)
            .OrderByDescending(x =&gt; x.Added))
        {
            &lt;div class="item"&gt;
                @item.Name
            &lt;/div&gt;
        }
    &lt;/div&gt;

If one wishes to check that the collection would first return items it requires adding another level of testing to the Razor:

    &lt;div class="content"&gt;
        @if (Model.Items.Count(x =&gt; x.Name != null) &gt; 0)
        {
            foreach (var item in Model
                .Items
                .Where(x =&gt; x.Name != null)
                .OrderByDescending(x =&gt; x.Added))
            {
                &lt;div class="item"&gt;
                    @item.Name
                &lt;/div&gt;
            }
        }
        else // We didn't actually find anything
        {
            &lt;div class="none"&gt;
                No items
            &lt;/div&gt;
        }
    &lt;/div&gt;

You could propose two major solutions currently supported by the language to solve this issue:

First: create an intermediary variable in the view:

    &lt;div class="content"&gt;
        @{
            var filteredCollection = Model.Items.Where(x =&gt; x.Name != null);
            if (filteredCollection.Count() &gt; 0)
            {
                foreach (var item in filteredCollection.OrderByDescending(x =&gt; x.Added))
                {
                    &lt;div class="item"&gt;
                        @item.Name
                    &lt;/div&gt;
                }
            }
            else // We didn't actually find anything
            {
                &lt;div class="none"&gt;
                    No items
                &lt;/div&gt;
            }
        }
    &lt;/div&gt;

Obviously this is not a pure solution: our view contains a local variable and requires a local variable if using this solution for each and every location we wish to operate on a collection in this manner with.

The second solution would be to add the `filteredCollection` to the model being passed to the view, then simply:

    &lt;div class="content"&gt;
        @if (Model.ItemsWithName.Count() &gt; 0)
        {
            foreach (var item in Model.ItemWithName.OrderByDescending(x =&gt; x.Added))
            {
                &lt;div class="item"&gt;
                    @item.Name
                &lt;/div&gt;
            }
        }
        else // We didn't actually find anything
        {
            &lt;div class="none"&gt;
                No items
            &lt;/div&gt;
        }
    &lt;/div&gt;

This increases maintenance with the model, and requires this to be somehow derived from the model. (If it's a simple filter on another collection in the model that's easy enough, but the more complex our conditions become the more maintenance on the model is required.)

---

I propose we add an `else` block to be added directly after a `foreach` block which would only execute if **no items were iterated**.

    &lt;div class="content"&gt;
        @foreach (var item in Model
            .Items
            .Where(x =&gt; x.Name != null)
            .OrderByDescending(x =&gt; x.Added))
        {
            &lt;div class="item"&gt;
                @item.Name
            &lt;/div&gt;
        }
        else // We didn't actually iterate anything
        {
            &lt;div class="none"&gt;
                No items
            &lt;/div&gt;
        }
    &lt;/div&gt;

This would be most helpful in ASP.NET applications where custom object sorting and filtering is more likely to be common and the potential to display a 'no items to display' message is much higher.</Description>
  </Issue>
  <Issue>
    <IssueID>16811</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>16811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Unit tests are using the 'foreground thread' state between tests</Title>
    <CreatedDate>28/01/2017</CreatedDate>
    <ClosedDate>24/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Continuous Improvement</Name>
        <IssueID>16811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16811</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>While working on the VisualStudioWorkspace thread affinity fix, I "discovered" that we have some shared components, notably the ForegroundNotificationService, that use the STA thread in the tests between tests. This is terrifying. Our WpfFact clears the foreground thread between tests, which meant that when feature asked for the foreground thread it got the "fallback foreground thread" which was really some random thread pool thread and everything broke from there. This was very difficult to debug.

We should try to clean this up. I can think of a few tasks that are small (I hope) and would have made this easier to debug:

- [ ] Investigate why we have the 'fallback foreground thread' behavior and delete it if possible
- [ ] If the above cannot be deleted, update the foreground thread class in unit tests to fail (hard) if somebody asks for it
- [ ] Fail tests if somebody tries to schedule work to the STA scheduler when a WpfFact isn't running

And possibly more, of course.</Description>
  </Issue>
  <Issue>
    <IssueID>16802</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>BlockCommentEditingTests failing on recent VS2017 builds</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16802</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>When our master branch is compiled / ran against the 26127.00 build of VS a number of BlockCommentEditingTests are failing.  This is a recent regression as it doesn't happen in our build from 2 weeks ago.

Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.BlockCommentEditing.BlockCommentEditingTests

- InsertOnMiddleLine6
- InsertOnStartLine2
- InsertOnMiddleLine3
- InsertOnMiddleLine2_Tab
- InsertOnStartLine3
- InsertOnStartLine3_Tab
- InsertOnMiddleLine2
- BoundCheckInsertOnStartLine1
- InsertOnStartLine2_Tab
- InsertOnMiddleLine3_Tab
- InsertOnEndLine3
- BoundCheckInsertOnMiddleLine

Here is a branch which can be used to repro the problem. 




</Description>
  </Issue>
  <Issue>
    <IssueID>16801</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SemanticModel.LookupNames/LookupSymbols APIs do not return Local Function type parameters in any place within the function signature</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>28/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16801</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a clone of TestMethodParameterAndTypeParameterScope unit-test from src\compilers\csharp\test\semantic\semantics\lookuppositiontests.cs
``</Description>
  </Issue>
  <Issue>
    <IssueID>16796</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS crashes when a massive file is part of a solution</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16796</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS crashes on OOM when a massive file (over 100MB) is added as a part of a solution.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16796</IssueID>
        <PullRequestID>16775</PullRequestID>
        <Title>added max file limit</Title>
        <Description>**Customer scenario**

User has big file (over 100MB) in solution and VS crashes OOM.

**Bugs this fixes:** 



**Workarounds, if any**

remove the massive file from solution or split the file into smaller chunk

**Risk**

since we are now limiting size of text file (100MB) we will read, if someone had a big file which is big but not big enought to make VS OOM, that file will be no longer read into VS (Roslyn).

but we provide regkey to change default threshold, so we do still provide a workaround for such user.

**Performance impact**

there should be no change on performance

**Is this a regression from a previous update?**

No

**Root cause analysis:**

we need to read in whole file into memory to operate, we do chunk them so that it doesn't go to the LOH, but still we read whole thing in memory to operate rather than reading in or map portion of a file to operate. but naturally that sets limit on how much big file we can support, especially since devenv is in 32bit process. this fix explicitly set limit so that we reduce chance of going OOM.

since we at least chunk, we won't OOM due to lack of giant continuous memory block.

**How was the bug found?**

customer report.</Description>
        <CreatedDate>26/01/2017</CreatedDate>
        <ClosedDate>31/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16796</IssueID>
            <PullRequestID>16775</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16796</IssueID>
            <PullRequestID>16775</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Needs Shiproom Approval</Name>
            <IssueID>16796</IssueID>
            <PullRequestID>16775</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Tenet-Reliability</Name>
            <IssueID>16796</IssueID>
            <PullRequestID>16775</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16796</IssueID>
            <PullRequestID>16775</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16793</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Implement interface should not use tuple syntax for ValueTuple&lt;T&gt;</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16793</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Use "Implement interface" on `C`
``
Result: `public (object) F()` rather than `public ValueTuple&lt;object&gt; F()`</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16793</IssueID>
        <PullRequestID>16989</PullRequestID>
        <Title>Properly generate type syntax for tuples with less than arity-2.</Title>
        <Description>Fixes </Description>
        <CreatedDate>07/02/2017</CreatedDate>
        <ClosedDate>07/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16793</IssueID>
            <PullRequestID>16989</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16793</IssueID>
            <PullRequestID>16989</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16791</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>16791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CSharpLineSeparators is failing in master</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>12/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>16791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16791</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**History**: </Description>
  </Issue>
  <Issue>
    <IssueID>16790</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Flaky EnC &amp; CodeGen tests</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>06/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16790</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>16790</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Flaky</Name>
        <IssueID>16790</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16790</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Examples**



**History**


</Description>
  </Issue>
  <Issue>
    <IssueID>16788</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>C# Design Notes for Jan 10, 2017</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>29/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Design Notes</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16788</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
switch (...)
{
	case 1:
		Local();
	case int x:
		void Local() { x = 1; }
}
`</Code>
    <Description># C# Language Design Notes for Jan 10, 2017

## Agenda

- Switch and local functions

# Switch and local functions

The combination of expression variables, local functions and the weird scoping rule in switch statements, leads to a current hole in the compiler:

``

The problem here is that the scope, and therefore lifetime, of `x` is limited to the case section, whereas the scope, and therefore lifetime, of the `Local` function that uses `x` is the whole switch block. Therefore, calling `Local()` from elsewhere uses `x` without it being alive.

There are other, trickier, ways to observe this effect without local functions, e.g. with refs. But this is probably the most "common" scenario (though not actually very likely to be common).

Options:

1. Extend the scope and lifetime of expression variables to the whole switch block (then names leak and can't be reused)
2. Have differing scopes and lifetimes, keeping the scope of expression variables the case section, while making the lifetime the whole switch block
3. Keep the scope of local functions the section only
4. Scope of cases that declare variables is narrower, even for local declarations inside of that case section

All options have problems:
1. Might be a decent design, given how we extended the scope of expression variables elsewhere. But it's risky to change scope rules this late in the game
2. Would fix the problems without changing scope rules, but it might be odd to observe that scope and lifetime differ
3. Only solves the symptom of the problem as it relates to local functions
4. Would introduce inconsistent scoping behavior between different case sections


## Conclusion
Of all these we prefer 2 at this stage. 1 would warrant discussion if we weren't so close to shipping - it would break existing C# 7.0 code that reuses variable names across case sections, which is expected to be common. Option 2 sweeps things under the rug nicely, and keeps existing code running while addressing the compiler failure.</Description>
  </Issue>
  <Issue>
    <IssueID>16786</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Retrieving Symbol from DocumentationCommentId</Title>
    <CreatedDate>27/01/2017</CreatedDate>
    <ClosedDate>27/01/2017</ClosedDate>
    <IssueLabels />
    <Description>I am currently using roslyn to parse xml doc comments.

The `ISymbol.GetDocumentationCommentId()` method works great to get an id that identifies an xml doc comment member. However, when parsing the xml doc comments themselves, it does not appear possible to (cleanly) get back to the Symbol from the id.

For example, I use `Symbol.GetDocumentationCommentXml()` to extract the following doc xml:

``
From here I can easily use a visitor to parse the xml and extract the id, but there is no way to cleanly retrieve its corresponding `IMethodSymbol`.

Currently, I am using a separate visitor to find the Symbol by crudely parsing the cref and walking the dot-delineated tokens, then comparing the full cref id to the results of another `GetDocumentationCommentId()` call. I am caching the results, but it is still a lot of overhead considering you have to include references in the lookup.

A big improvement would be if roslyn could cache the results from `GetDocumentationCommentId` calls and expose a reverse-lookup. Since this method is called internally from the `DocumentationCommentCompiler`, the cache would be filled automatically as you query the documentation xml.

I also thought about overloading the `GetDocumentationCommentXml` method itself to include an out parameter that returns an individual lookup for any Ids that were bound -- but this approach appears to have a much larger surface area given the number of individual overloads and the call depth for this method.

If the cache idea is acceptable, I would be happy to work on an initial pull request after some discussion.

Is this something that would be desirable to the community? And what would be your thoughts on implementation? Is there something I am missing that makes this unnecessary?

Thanks!
</Description>
  </Issue>
  <Issue>
    <IssueID>16783</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>khyperia</FixedById>
        <IssueID>16783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function type parameters are not in scope for default value of parameters</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>12/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16783</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        [Fact]
        public void GenericDefaultParams()
        {
            CompileAndVerify(@"
using System;
class C
{
    public void M()
    {
        void Local&lt;T&gt;(T t = default(T))
        {
            Console.WriteLine(t);
        }
        Local&lt;int&gt;();
    }
}

class C2
{
    public static void Main()
    {
        new C().M();
    }
}", expectedOutput: "0");
        }
`</Code>
    <Description>This test

``

Should succeed, but it does not.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16783</IssueID>
        <PullRequestID>16784</PullRequestID>
        <Title>Add tests for default parameters in local functions</Title>
        <Description>Fixes #16352</Description>
        <CreatedDate>26/01/2017</CreatedDate>
        <ClosedDate>27/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16783</IssueID>
            <PullRequestID>16784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Local Functions</Name>
            <IssueID>16783</IssueID>
            <PullRequestID>16784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16783</IssueID>
            <PullRequestID>16784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16783</IssueID>
        <PullRequestID>19120</PullRequestID>
        <Title>regression test for  https://github.com/dotnet/roslyn/issues/19119</Title>
        <Description>regression test for  

enabled one test for a fixed bug.</Description>
        <CreatedDate>29/04/2017</CreatedDate>
        <ClosedDate>29/04/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16783</IssueID>
            <PullRequestID>19120</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16778</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Declared variables confused with tuple arguments in VS tooltips</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>23/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16778</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16778</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>16778</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16778</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16778</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``

Hovering over `b` (the tuple argument) produces nothing, but hovering over 'a' (the other tuple argument) produces a tooltip about `a` (the declared variable).

![image](

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16778</IssueID>
        <PullRequestID>16659</PullRequestID>
        <Title>Implements GetDeclaredSymbol for tuple literals and GetSymbolInfo for elements of tuple literals.</Title>
        <Code>cs
var x = (Customer: 1, Orders: 2);
`</Code>
        <Description>Implements GetDeclaredSymbol for tuple literals and GetSymbolInfo for elements of tuple literals.
Unimplemented GetDeclaredSymbol was responsible for erratic behavior and crashes in IDE.

Fixes:#14600
Fixes:#11013
Fixes:#14116
Fixes:#16168

**Customer scenario**

Even though tuple literals are expressions, they implicitly declare tuple types and elements.
Tuple literals do not provide semantic information about tuple literals.
(note: we do produce correct semantic info for tuple types we do not do so for tuple literals)

That leads to crashes in some "rename" scenarios, incorrect colorization, erratic behavior of "go to definition" and other misbehavior of IDE features built on top of "find all references" engine.

The root cause is that inferred references could be incorrectly computed - i.e. 
In the following code "Customer" and "Orders" could be understood by IDE as references to types, members or locals as long as they have same name.

``
 
**Bugs this fixes:** 

Primarily #14600, 
there are several other bugs caused by the same issue.
#11013
#14116
#16168

**Workarounds, if any**

User must ignore incorrect colorization and should not try renaming symbols that are erroneously considered references from the tuple element.

I.E. when IDE thinks that a tuple element name is actually a reference to a containing type, renaming the element will be allowed (even though renaming elements is otherwise blocked). That could lead to both the element and the incorrectly referred to type being renamed, leading to crashes.

**Risk**

Risk is low. 

This fix does not enable renaming tuple elements. Enabling that is a 2.1 item.
It however makes the blocking to be more effective.
I.E. crashing scenarios that should be blocked will be blocked as intended.

**Performance impact**

Low.
Just correctly implementing an existing semantic info API. It is not any special in terms of complexity.

**Is this a regression from a previous update?**

New feature

**Root cause analysis:**

Tuple literal expression are special since they declare types and elements. An API for returning info on those was not implemented. The effects of not providing semantic info for those was not believed as potentially crashing, so the fix was pushed to 2.1
Now we know about crashing scenarios.

**How was the bug found?**

Ad hock testing. Customer reports.
</Description>
        <CreatedDate>20/01/2017</CreatedDate>
        <ClosedDate>26/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16778</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16778</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Needs Shiproom Approval</Name>
            <IssueID>16778</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16778</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16771</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Exception in `SolutionState.CheckContainsDocument` crashes VS</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>30/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16771</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>16771</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I have a crash dump for this. \\jcouvdev\shared-dumps\issue-16771

``</Description>
  </Issue>
  <Issue>
    <IssueID>16769</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Initialize to known type instead of anonymous type when possible</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>22/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16769</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Point
{
    public int X { get; set; }
    public int Y { get; set; }
}

class PointWrapper
{
    public Point Value { get; }
}

the statement 
csharp
var p1 = new PointWrapper {  // Currently valid
    Value = { X = 0, Y = 0 } 
};

is already valid. No need to specify type of property `Value` within the initializer. Even `new` keyword is not required (using `new` is an error actually). But `Point p = new { X = 1, Y = 2 };` is not valid. We have to write
csharp
Point p = new Point { X = 1, Y = 2 };  // Currently valid


My proposal is, when the type of an object is known, make the type-name optional with initializers. In other words, convert the right hand anonymous typed object to the specified type enabling-
csharp
Point p = new { X = 1, Y = 2 };  // Proposing

It should not affect the case when the type is not already known or specified like-
csharp
var p = new { X = 1, Y = 2 };  // Currently valid, no conversion

Same goes for collection initializers, so that this-
csharp
List&lt;Point&gt; list = new List&lt;Point&gt;{
    new Point { X = 0, Y = 0 },
    new Point { X = 1, Y = 1 }
};

can be written like-
csharp
List&lt;Point&gt; list = new {
    { X = 0, Y = 0 },
    { X = 1, Y = 1 }
};
`</Code>
    <Description>Given following classes-
``
Related- #16648
</Description>
  </Issue>
  <Issue>
    <IssueID>16768</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Create MetadataReference throws an exception on Xamarin project</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>27/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16768</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version:
Visual Studio 2015
Tested with Microsoft.Codeanalysis 1.3.1.0 and 2.0.0.0

Code:
`var metadataReference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);`

Exception:

&gt; System.IO.FileNotFoundException: Could not find file "/mscorlib.dll".</Description>
  </Issue>
  <Issue>
    <IssueID>16766</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Negative Pattern</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>21/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16766</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
if (obj is not null)

switch (obj) {
  case not Constant:
      break;
}

It could be even nested in recursive patterns as well,
c
case (not 0, var y):
// equivalent to
case (var x, var y) when x != 0:

This would be consistent with other proposed pattern operators like #6235.

Note that definitive assignment rules are reversed, for example,
c
if (obj is not T t) return;
// t is definitely assigned
`</Code>
    <Description>Moved from: 

I propose to add a pattern operator to negate the effect of another pattern,

*not-pattern*:
 `not` *pattern*

A "negative pattern" could be applied to an arbitrary pattern and reverse the failure path.

Examples:
``
This also eliminates the need to parenthesize the `is` expression in case you want to negate the result.

</Description>
  </Issue>
  <Issue>
    <IssueID>16762</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0030 incorrect code fix</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16762</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS2017RC 15.0.26020.0
**Steps to Reproduce**:

input sample code in IDE:
``</Description>
  </Issue>
  <Issue>
    <IssueID>16759</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash in SemanticModel</Title>
    <CreatedDate>26/01/2017</CreatedDate>
    <ClosedDate>30/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>16759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>16759</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
System.NullReferenceException : Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBindingRoot(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode&amp; bindableNode,BoundNode&amp; lowestBoundNode,BoundNode&amp; highestBoundNode,BoundNode&amp; boundParent)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node,SymbolInfoOptions options,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel,ExpressionSyntax expression,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ContextQuery.SyntaxTreeExtensions.IsEnumTypeMemberAccessContext(SyntaxTree syntaxTree,SemanticModel semanticModel,Int32 position,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Extensions.ContextQuery.CSharpSyntaxContext.CreateContextWorker(Workspace workspace,SemanticModel semanticModel,Int32 position,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Recommendations.CSharpRecommendationService.GetRecommendedSymbolsAtPositionWorkerAsync(Workspace workspace,SemanticModel semanticModel,Int32 position,OptionSet options,CancellationToken cancellationToken)
   at async Microsoft.CodeAnalysis.Recommendations.AbstractRecommendationService.GetRecommendedSymbolsAtPositionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Recommendations.Recommender.GetImmutableRecommendedSymbolsAtPositionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetPerContextSymbols(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.GetItemsWorkerAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.ProvideCompletionsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetContextAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.ComputeNonEmptyCompletionContextsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetCompletionsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.SpellCheck.AbstractSpellCheckCodeFixProvider`1.CreateSpellCheckCodeIssueAsync[TSimpleName](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.SpellCheck.AbstractSpellCheckCodeFixProvider`1.RegisterCodeFixesAsync[TSimpleName](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(&lt;Unknown Parameters&gt;)
   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)
`</Code>
    <Description>Callstack is:

``

No dump unfortunately.</Description>
  </Issue>
  <Issue>
    <IssueID>16757</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16757</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SemanticModel.GetDeclaredSymbol(ParameterSyntax) doesn't work for parameters of a Local Function</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>26/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16757</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16757</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16757</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16757</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is going to affect IDE experience. I noticed that IDE doesn't show tooltips on the parameters and "Find All References" finds nothing when invoked on the parameters. This issue is the likely reason for the behavior.</Description>
  </Issue>
  <Issue>
    <IssueID>16756</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generic type inference for value tuples seems ... odd</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>2 - Ready</Name>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16756</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;

namespace TupleGenericsTests
{
    public static class Extensions
    {
        public static TR F1&lt;T1, TR&gt;(this T1 value, Func&lt;T1, TR&gt; func) =&gt; func(value);
        public static TR F2&lt;T1, T2, TR&gt;(this (T1, T2) value, Func&lt;T1, T2, TR&gt; func) =&gt; 
            func(value.Item1, value.Item2);
    }

    public class Tests
    {
        public int TimesTwo(int value) =&gt; value * 2;
        public int AddTwoInts(int value1, int value2) =&gt; value1 + value2;
        public float AddIntAndFloat(int value1, float value2) =&gt; value1 + value2;

        public int TestF1() =&gt; 1.F1(TimesTwo);

        public int TestF2WithTwoInts() =&gt; (1, 1).F2(AddTwoInts);

        public int TestF2WithIntAndFloat() =&gt; (1, 1.0).F2(AddIntAndFloat);
    }
}
`</Code>
    <Description>**Version Used**: 
VS 2017 RC (15.0.26020.0)
C# 2017 RC (00369-50000-00000-AA898)

**Steps to Reproduce**:

Compile the following code:
``

**Expected Behaviour**:
All compiles fine.

**Actual Behaviour**:
`TestF1` - compiles fine.
`TestF2WithTwoInts` - compiles fine.
`TestF2WithIntAndFloat` - fails to compile, with the error:
`The type arguments for method 'Extensions.F2&lt;T1, T2, TR&gt;((T1, T2), Func&lt;T1, T2, TR&gt;)' cannot be inferred from the usage. Try specifying the type arguments explicitly.`

It seems odd that if `T1`, `T2` and `TR` are all the same type, then their types can be inferred; but if they differ, then they can't be inferred.
</Description>
  </Issue>
  <Issue>
    <IssueID>16754</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Having a certain number of (bool) arguments in base constructor call is causing CS0012 "The type ... is defined in an assembly that is not referenced."</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>09/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>16754</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2015
Version 14.0.25431.01 Update 3

**Steps to Reproduce**:
Attempt to compile attached example sln:
[ConsoleApplication3151419.zip](

For readers that don't want to open files:
Basically there's this base class in ClassLibrary2 with two protected constructors:
``


**Expected Behavior**:
Compiles.

**Actual Behavior**:

The usage of the base constructor having the same number of (bool) arguments as the second base constructor is apparently triggering an unexpected need to reference `ObscureThingConsoleApplicationNeedntKnowAbout`, producing compile error:

Error	CS0012	The type 'ObscureThingConsoleApplicationNeedntKnowAbout' is defined in an assembly that is not referenced. You must add a reference to assembly 'ClassLibrary1...

</Description>
  </Issue>
  <Issue>
    <IssueID>16753</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Race condition completing (empty) attribute list for an event</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>12/09/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16753</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16753</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16753</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> c#
        [Fact, WorkItem(16753, "https://github.com/dotnet/roslyn/issues/16753")]
        public void TestConcurrentCompletionMany()
        {
            for (int i = 0; i &lt; 1000; i++)
            {
                TestConcurrentCompletion();
            }
        }

        private static void TestConcurrentCompletion()
        {
            var source =
@"
using System;
public enum E1 { A, B, C, D, E }
public class C1
{
    public event Action e1;
    public event Action e2;
    public event Action e3;
    Action Events =&gt; e1 + e2 + e3;
}
public unsafe struct S1
{
    public fixed int X[10];
    public int A, B, C, D;
    public CI P1 =&gt; null;
    public CI P2 =&gt; null;
    public CI P3 =&gt; null;
    public CI this[CI a, CI b, CI c] =&gt; null;
}
internal class CI {}
";
            var q = new AsyncQueue&lt;CompilationEvent&gt;();
            var compilation = CreateCompilationWithMscorlib45(source).WithEventQueue(q);
            Func&lt;Task&gt; makeTask = async () =&gt; {
                try
                {
                    while (true)
                    {
                        var compilationEvent = await q.DequeueAsync();
                        compilation.GetDiagnostics();
                    }
                }
                catch (OperationCanceledException)
                {
                }
            };
            Task kickoff = Task.Run(() =&gt;
            {
                compilation.GetDiagnostics();
            });
            // start a handful of tasks each of which waits on the queue
            var tasks = Enumerable.Range(0, 30).Select(i =&gt; i != 19 ? makeTask() : kickoff).ToArray();
            Task.WaitAll(tasks);
        }


frequently fails with an assertion error here in SourceEventSymbol.cs:

 c#
        private CustomAttributesBag&lt;CSharpAttributeData&gt; GetAttributesBag()
        {
            if ((_lazyCustomAttributesBag == null || !_lazyCustomAttributesBag.IsSealed) &amp;&amp;
                LoadAndValidateAttributes(OneOrMany.Create(this.AttributeDeclarationSyntaxList), ref _lazyCustomAttributesBag))
            {
                var completed = state.NotePartComplete(CompletionPart.Attributes);
                Debug.Assert(completed);
                DeclaringCompilation.SymbolDeclaredEvent(this);
            }

            return _lazyCustomAttributesBag;
        }
`</Code>
    <Description>The following test (recommended in `CompilationEventTests.cs`)

``

This looks like it may be a previously unknown race condition.
</Description>
  </Issue>
  <Issue>
    <IssueID>16751</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect SemanticModel behavior within attributes in Local Functions</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>01/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16751</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void Scope_LocalFunction_Attribute_99()
        {
            var source =
@"
public class X
{
    public static void Main()
    {
        const bool b1 = true;

        void Local1(
            [Test(p = b1)]
            [Test(p = b2)]
            int p1)
        {
        }

        Local1(1);
    }
}

class b1 {}

class Test : System.Attribute
{
    public bool p {get; set;}
}
";
            var compilation = CreateCompilationWithMscorlib45(source, options: TestOptions.DebugExe, parseOptions: TestOptions.Regular);
            compilation.GetDiagnostics().Where(d =&gt; d.Code != (int)ErrorCode.ERR_AttributesInLocalFuncDecl).Verify(
                // (10,23): error CS0103: The name 'b2' does not exist in the current context
                //             [Test(p = b2)]
                Diagnostic(ErrorCode.ERR_NameNotInContext, "b2").WithArguments("b2").WithLocation(10, 23),
                // (6,20): warning CS0219: The variable 'b1' is assigned but its value is never used
                //         const bool b1 = true;
                Diagnostic(ErrorCode.WRN_UnreferencedVarAssg, "b1").WithArguments("b1").WithLocation(6, 20)
                );

            var tree = compilation.SyntaxTrees.Single();
            var model = compilation.GetSemanticModel(tree);

            var b2 = tree.GetRoot().DescendantNodes().OfType&lt;IdentifierNameSyntax&gt;().Where(id =&gt; id.Identifier.ValueText == "b2").Single();
            Assert.Null(model.GetSymbolInfo(b2).Symbol);

            var b1 = tree.GetRoot().DescendantNodes().OfType&lt;IdentifierNameSyntax&gt;().Where(id =&gt; id.Identifier.ValueText == "b1").Single();
            var b1Symbol = model.GetSymbolInfo(b1).Symbol;
            Assert.Equal("b1", b1Symbol.ToTestDisplayString());
            Assert.Equal(SymbolKind.Local, b1Symbol.Kind);
        }
`</Code>
    <Description>``

The last Assert in the test fails:
Test 'Scope_LocalFunction_Attribute_99' failed: Assert.Equal() Failure
Expected: Local
Actual:   NamedType
</Description>
  </Issue>
  <Issue>
    <IssueID>16748</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Crash in SemanticModel when an expression variable is declared in default parameter value of an Anonymous Method</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>30/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16748</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
        [Fact]
        public void DeclarationInAnonymousMethodParameterDefault()
        {
            var text = @"
class C
{
    public static void Main(int arg)
    {
        System.Action&lt;bool, int&gt; d1 = delegate (
                                                bool b = M(M(out int z1), z1), 
                                                int s2 = z1) 
                                            { var t = z1; };
        System.Action&lt;bool, int&gt; d2 = delegate (
                                                bool b = M(M(out var z2), z2), 
                                                int s2 = z2)  
                                            { var t = z2; };

        int x = z1 + z2;
        d1 = d2 = null;
    }
    static int M(out int z) =&gt; z = 1;
    static int M(int a, int b) =&gt; a+b;
}
";
            var compilation = CreateCompilationWithMscorlib45(text);

            var tree = compilation.SyntaxTrees[0];
            var model = compilation.GetSemanticModel(tree);

            var z1 = tree.GetRoot().DescendantNodes().OfType&lt;IdentifierNameSyntax&gt;().Where(id =&gt; id.Identifier.ValueText == "z1").First();
            Assert.Equal("", model.GetTypeInfo(z1).Type.ToTestDisplayString());
        }



Test 'DeclarationInAnonymousMethodParameterDefault' failed: 
    System.InvalidOperationException : This program location is thought to be unreachable.
	at Microsoft.CodeAnalysis.CSharp.Binder.BindOutVariableDeclarationArgument(DeclarationExpressionSyntax declarationExpression, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindOutVariableArgument(DeclarationExpressionSyntax declarationExpression, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics, ArgumentSyntax argumentSyntax, Boolean allowArglist, RefKind refKind)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean hadError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentsAndNames(SeparatedSyntaxList`1 arguments, DiagnosticBag diagnostics, AnalyzedArguments result, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentsAndNames(ArgumentListSyntax argumentListOpt, DiagnosticBag diagnostics, AnalyzedArguments result, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionAllowArgList(ExpressionSyntax node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindValueAllowArgList(ExpressionSyntax node, DiagnosticBag diagnostics, BindValueKind valueKind)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentExpression(DiagnosticBag diagnostics, ExpressionSyntax argumentExpression, RefKind refKind, Boolean allowArglist)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentValue(DiagnosticBag diagnostics, ArgumentSyntax argumentSyntax, Boolean allowArglist, RefKind refKind)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentAndName(AnalyzedArguments result, DiagnosticBag diagnostics, Boolean hadError, ArgumentSyntax argumentSyntax, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentsAndNames(SeparatedSyntaxList`1 arguments, DiagnosticBag diagnostics, AnalyzedArguments result, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindArgumentsAndNames(ArgumentListSyntax argumentListOpt, DiagnosticBag diagnostics, AnalyzedArguments result, Boolean allowArglist, Boolean isDelegateCreation)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)
	at Microsoft.CodeAnalysis.CSharp.Binder.BindNamespaceOrTypeOrExpression(ExpressionSyntax node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
	at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)
	at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)
	at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode&amp; bindableNode, BoundNode&amp; lowestBoundNode, BoundNode&amp; highestBoundNode, BoundNode&amp; boundParent)
	at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
	at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
	at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken)
	at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
	at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)
	at Microsoft.CodeAnalysis.SemanticModel.GetTypeInfo(SyntaxNode node, CancellationToken cancellationToken)
	Semantics\OutVarTests.cs(28978,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OutVarTests.DeclarationInAnonymousMethodParameterDefault()
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>16747</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Wrong source code stepping info</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>26/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16747</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Threading.Tasks;

class Program
{
    static void Main() { TestAsync().Wait(); }

    static async Task TestAsync()
    {
        int nonZero = await FalseAsync();

        // The problem is that the debugger steps into the body of the if below but it should not.
        if (nonZero == 0)
        {
            throw new Exception();
        }
    }

    static async Task&lt;int&gt; FalseAsync() { return await Task.FromResult(42); }
}
`</Code>
    <Description>**Original Issue**: 

**Version Used**: VS 2017 RC, VS 2015 Update 3, and dotnet CLI 1.0.0-preview2-1-003177

**Steps to Reproduce**:

Given the following code:
``
1. From Visual Studio or VS Code, put a breakpoint on this line `if (nonZero == 0)`, check the `nonZero` variable value, you will see it's 42
2.  Step over with the debugger

**Expected Behavior**:
The debugger steps out of the `if`

**Actual Behavior**:
The debugger steps inside the `if`

**Screenshot**:
![47389342-db96-11e6-94b8-3f16c869d7ca](

**Screen Capture of Disassembly + Registers**
[debug.zip](

</Description>
  </Issue>
  <Issue>
    <IssueID>16745</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Constructor injection and inheritance</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>07/02/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16745</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class BaseService
{
    public BaseService(Foo foo, Bar bar)
    {
        this.foo = foo;
        this.bar = bar;
    }
}

sealed class DerivedService : BaseService
{
    public DerivedService(baseparams, Baz baz) : base(baseparams)
    {
        this.foo = baseparams.foo;
        this.baz = baz;
    }
}


#### If `baseparams` is like a rest parameter:

In this scenario, `baseparams` is a keyword which means "insert the parameter list from the base class" as in rest parameters. This would solve the source breaking problem which is the bulk of the work and the bulk of the downside to constructor injection, but would be binary breaking. It's likely that you'll be recompiling if the base class changes, so this may be totally fine.

#### If `baseparams` is sugar for a generated struct:

In this scenario, my `DependencyArgs` struct solution above is compiler-generated. This solves both the source breaking problem and the binary breaking problem. The struct would have to live in the base assembly, so:

c#
class BaseService
{
    public BaseService(encapsulateparams(Foo foo, Bar bar))
    {
        if (foo == null) throw ArgumentNullException(nameof(foo));
        this.foo = foo;
        this.bar = bar;
    }
}

sealed class DerivedService : BaseService
{
    public DerivedService(baseparams, Baz baz) : base(baseparams)
    {
        if (baseparams.foo == null) throw ArgumentNullException(nameof(baseparams.foo));
        this.foo = baseparams.foo;
        this.baz = baz;
    }
}


Desugared:
c#
class BaseService
{
    public struct DependencyArgs
    {
        public readonly Foo foo;
        public readonly Bar bar;

        public DependencyArgs(Foo foo, Bar bar)
        {
            this.foo = foo;
            this.bar = bar;
        }
    }
    public BaseService(DependencyArgs dependencyArgs)
    {
        if (dependencyArgs.foo == null) throw ArgumentNullException(nameof(dependencyArgs.foo));
        this.foo = dependencyArgs.foo;
        this.bar = dependencyArgs.bar;
    }
}

sealed class DerivedService : BaseService
{
    public DerivedService(BaseService.DependencyArgs baseDependencyArgs, Baz baz) : base(baseDependencyArgs)
    {
        this.foo = baseDependencyArgs.foo;
        this.baz = baz;
    }
}
`</Code>
    <Description>The ideal DI strategy seems to be constructor injection of each dependency. Each dependency becomes a readonly field and the dependencies are clearly and idiomatically visible in the constructor signature. This works well both with manual instantiation and with IoC containers.

Its single downside is that it does not play well with inheritance. The constructor is pretty much only meant to be used by IoC containers, but it's also used by necessity by the derived constructor. If the base constructor needs a new dependency, it's a breaking change to add a constructor parameter.

ReSharper is very helpful when applying signature changes to automatically modify derived constructors and inject instances found at call sites, but besides the downsides of that code churn, the primary scenario is where the base class is in a different library.

I've run into this issue more and more lately and it came up in 

Possible solutions

 * **Service location** is where ( is likely going to land. For my own architectures, I've learned the hard way that service location results in no small amount of pain. Much could be said but let's put that aside for now and see if we can still achieve a painless dependency injection solution.

 * **Property injection** solves the breaking changes problem when using an IoC container. With inheritance, the container sets the inherited properties and everything works. With composition, the 'base' instance is constructor injected and everything works. Without an IoC container though, you've exchanged a breaking change at compile time (new ctor parameter) for a breaking change at runtime (unset property) which is bad. There's no way around the fact that a break should happen with manual instantiation, but it should break at compile time. Property injection also introduces lots of management to make sure the properties aren't abused and it is a poor API.

 * **Private field injection** solves the breaking changes problem when using an IoC container. With inheritance, the container sets the inherited properties and everything works. With composition, the 'base' instance is constructor injected and everything works. But without an IoC container, there is no API to initialize this at all and nothing works.

 * A **`DependencyArgs` parameter** is the only thing I can think of that works in today's C#. I've been thinking about the fact that the BCL best practice for adding parameters to event handlers in a back-compatible way is to define an `EventArgs` from the start. Compared to straight up constructor injection it feels like quite some overhead to write a `DependencyArgs` for each service, yet we've done it for every event for years so maybe it's not as bad is it first seems. Dependencies (properties on the struct) could be added without breaking changes.

   The base service could contain an immutable nested `public struct DependencyArgs` that contains the constructor with a parameter for each dependency and sets each dependency to a public getter-only property or public readonly field. Then the service takes this struct as a parameter instead of the list it had before. The derived class would also take a parameter of type `BaseService.DependencyArgs` and pass it to the base constructor, and could either borrow dependencies off that object or have them injected beside the args parameter. If the derived class itself is expected to be subclassed, it could take its own `DerivedService.DependencyArgs` type as well and the `BaseService.DependencyArgs` would be injected into the `DerivedService.DependencyArgs`.
   With an IoC container, you'd register all nested types named `DependencyArgs` so that the container automatically creates and injects the args and everything works. Adding a dependency to the base `DependencyArgs` does not require any change in derived classes.
   Without an IoC container, you obviously still need a breaking change to happen because your manually written composition root does not dynamically locate services. Instead of breaking because there is a missing service constructor parameter, it now breaks because there is a missing DependencyArgs constructor parameter. This is cleaner than the runtime break that property injection would cause.

   In practice this would be simpler than it sounds than when I list all the edge cases it handles. You exchange listing dependencies via constructor parameter list for exposing them via nested public struct. It's a parameter refactor. The visibility and API stay pretty much the same.

 * **But... what if it didn't have to be this way?** I can't think of any improvement on that last solution without a language change.

Is this too far out for C# or might it actually happen? Similar to rest parameters (hear me out) but typesafe and designed for this particular scenario?

``

I'm just brainstorming here and hoping for improvements or new solutions on this entire topic. What do y'all think?</Description>
  </Issue>
  <Issue>
    <IssueID>16742</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>!is Candy [Feature]</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16742</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>With pattern matching coming, I've noticed the "is" operator being used in many examples. I've noticed the pattern `(!(thing is null))` in a lot. A nice piece of candy would be to be able to apply "not" directly to the operator - `(thing !is null)`. This would follow the comparison operator pattern for == and !=.  
</Description>
  </Issue>
  <Issue>
    <IssueID>16741</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>windows_vsi_p3_prtest timing out</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>07/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>16741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16741</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Following error is given in the dump taken when execution times out
``</Description>
  </Issue>
  <Issue>
    <IssueID>16738</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Crash in OOP that kills VS.</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>01/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Reliability</Name>
        <IssueID>16738</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Just hit this on a VS that is only 1-2 days old:

``

Tagging @heejaechang </Description>
  </Issue>
  <Issue>
    <IssueID>16737</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>16737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Switch Roslyn to BasicUndo that targets Dev15 VS SDK</Title>
    <CreatedDate>25/01/2017</CreatedDate>
    <ClosedDate>17/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16737</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Update BasicUndo.dll to Dev15 VS SDK, publish nupkg and switch Roslyn to the updated package. 
Clean up binding redirects in ``.</Description>
  </Issue>
  <Issue>
    <IssueID>16733</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Reflection - Lexical Ordering</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>09/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>16733</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi,

There's no official way to reflect on a type and get (say) public properties in their lexical (declared) order. Many articles and utilities rely on ordering by MetadataToken and although this seems to work, is sometimes regarded as risky and potentially breaking in a future release.

However lexical ordering is extremely useful and quite natural for many applications so providing a way to do this that has official support would be superb.

(For example we have Dapper utility code that formats SQL queries with `{0}` and `{1}` etc where parameters are expected and then use reflection to replace these with `@&lt;some_property_name&gt;` ensuring the SQL text always contains a parameter name that **exactly** matches the anonymous object's property name, 0 being the first property, 1 the second etc.).

I guess you could either flatly commit to honoring the MetadataToken and say that this will always be the same as the lexical order or perhaps introduce a new property on the Type class LexicalPosition where 0 indicates the first declared property, 1 the second and so on.

If this integer was assigned increasingly based on lexical order of members (whether they be fields, properties, public private etc) then this would work - getting all public properties ordered by LexicalPosition would always order correctly.

I'm posting this here because it is the compiler that will know this lexical order as it processes the token stream.

One could argue that writing code which depends on lexical order is risky but it would be no more risky than writing code that depends on a the spelling of a property.

Thanks.
</Description>
  </Issue>
  <Issue>
    <IssueID>16731</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16731</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Find All References for literals</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>24/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16731</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16731</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>help wanted</Name>
        <IssueID>16731</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Can the team consider providing intellisense so that I can select a constant string literal and do "Find all references" and likewise for integer, float and other constants?

A reference to a constant is after all, a reference and I would imagine under the hood, the metadata is there to support this.

Right now we must use "Find in files" for this which is not as reliable as finding language references.

Thx
</Description>
  </Issue>
  <Issue>
    <IssueID>16730</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Question - Compiler releases</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>02/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>16730</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a question.

Can someone please explain why it is always necessary to associate an update to the C# language with a Visual Studio release?

For example the latest language updates (local methods, tuples etc) why can't these be made available to Visual Studio 2015 users as just a compiler upgrade?

Thanks
</Description>
  </Issue>
  <Issue>
    <IssueID>16728</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>16728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>All VSI queues failing with CreatePkgDef error in VisualStudioSetup.Dependencies.csproj</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>09/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16728</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
CreatePkgDef : error : ArgumentException: No Visual Studio registration attribute found in this assembly. [D:\j\workspace\windows_vsi_p---2168b4b2\Open\src\VisualStudio\Setup.Dependencies\VisualStudioSetup.Dependencies.csproj]
`</Code>
    <Description>




``</Description>
  </Issue>
  <Issue>
    <IssueID>16722</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Failing test] CSharpRename.xml is failing</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>24/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Disabled Test</Name>
        <IssueID>16722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>16722</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
02:49:57 	Executing action [1/23/2017 2:43:22 AM] PreviewChangesDialog
02:49:57 Button 1 clicked
02:49:57     'Apply' button.
02:49:57 --------------------------------
02:49:57 System.Windows.Automation.ElementNotAvailableException: Unrecognized error.
02:49:57    at MS.Internal.Automation.UiaCoreApi.CheckError(Int32 hr)
02:49:57    at MS.Internal.Automation.UiaCoreApi.UiaGetUpdatedCache(SafeNodeHandle hnode, UiaCacheRequest request, NormalizeState normalize, Condition customCondition)
02:49:57    at System.Windows.Automation.AutomationElement.FromHandle(IntPtr hwnd)
02:49:57    at Roslyn.VSHosting.Test.PreviewChangesDialogAction.FindDialog(Boolean retryIfNotFound) in D:\j\workspace\windows_vsi_p---767012cc\Closed\Hosting\RoslynTaoActions\Actions\VisualStudio\PreviewChangesDialogAction.cs:line 32
02:49:57    at Roslyn.CommonToBothHosts.Test.AbstractOkCancelDialogAction.&lt;IsDialogClosed&gt;b__8_0() in D:\j\workspace\windows_vsi_p---767012cc\Closed\Hosting\RoslynTaoActions\Actions\Common\AbstractOkCancelDialogAction.cs:line 32
02:49:57    at Tao.Utilities.Helper.Retry[T](Func`1 action, TimeSpan delay, TimeSpan timeout) in D:\j\workspace\windows_vsi_p---767012cc\Closed\Hosting\Test\Execution\Helper.cs:line 57
02:49:57    at Roslyn.CommonToBothHosts.Test.AbstractOkCancelDialogAction.IsDialogClosed() in D:\j\workspace\windows_vsi_p---767012cc\Closed\Hosting\RoslynTaoActions\Actions\Common\AbstractOkCancelDialogAction.cs:line 32
02:49:57    at Roslyn.CommonToBothHosts.Test.AbstractOkCancelDialogAction.VerifyDialogIsOpen(Boolean isValid) in D:\j\workspace\windows_vsi_p---767012cc\Closed\Hosting\RoslynTaoActions\Actions\Common\AbstractOkCancelDialogAction.cs:line 110
02:49:57 ================================

`</Code>
    <Description>

``</Description>
  </Issue>
  <Issue>
    <IssueID>16719</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Case blocks in a switch statement share scope</Title>
    <CreatedDate>24/01/2017</CreatedDate>
    <ClosedDate>12/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16719</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
MSBuild 14.0.25420.1, 

**Steps to Reproduce**:
I have a few IDEOnes replicating the issue. 

***These ones shouldn't compile but do:***




***This should compile but does not:***
 

**Expected Behavior**:
Case blocks shouldn't share scope, and instead should declare local scopes.
I expect 

&gt; `error CS0103: The name `what' does not exist in the current context,` 

in the bad examples.

**Actual Behavior**:
The case blocks act as there is no separation and share scope.

This has lead to quite a few SO questions and blog posts, and requires a bit of ugly syntax to workaround.

***See:***
  


</Description>
  </Issue>
  <Issue>
    <IssueID>16332</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>merge partial class  to one ClassDeclarationSyntax</Title>
    <CreatedDate>08/01/2017</CreatedDate>
    <ClosedDate>09/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16332</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there an easy way to merge partial class  to one “ClassDeclarationSyntax” ?</Description>
  </Issue>
  <Issue>
    <IssueID>16331</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Minor clarification for the wiki</Title>
    <CreatedDate>08/01/2017</CreatedDate>
    <ClosedDate>08/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>16331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16331</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>On the [wiki page for creating new analyzers]( there is an instruction that needs a bit more text. It currently says...

&gt; Press F5 to run the newly created Analyzer project in a second instance of Visual Studio. 

Which is correct if you have an empty solution, but if you are adding a new analyzer project to an existing solution, it doesnt work. Something like the following may reduce that confusion.

&gt; Press F5 to run the newly created Analyzer projects in a second instance of Visual Studio (the project template actually creates three projects, and the &lt;project name&gt;.VISX is the one the debugger will start).</Description>
  </Issue>
  <Issue>
    <IssueID>16323</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Find All References" window blinking and unusable until all references are found</Title>
    <CreatedDate>07/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>16323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-External</Name>
        <IssueID>16323</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>VS 2017 RC2:

![1](

Finding all references in large solution may take some time (up to minutes if it contains many F# projects). As the API is asynchronous, I expect the window to be responsive and not blinking while the search process is running: I'd like to be able to click on already found references, scroll the results freely and stop the finding process (however, it's a separate issue).</Description>
  </Issue>
  <Issue>
    <IssueID>16322</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>VS 2017 RC Debugging Message</Title>
    <CreatedDate>07/01/2017</CreatedDate>
    <ClosedDate>01/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16322</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I am trying to debug with VS2017RC and i am always getting this error when i try to start:

![image](

My startproject ist VisualStudioSetup.Next

Any suggestions?
</Description>
  </Issue>
  <Issue>
    <IssueID>16321</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Support delete member in C# dynamic object</Title>
    <CreatedDate>07/01/2017</CreatedDate>
    <ClosedDate>18/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16321</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since `DynamicObject` support `TryDeleteMember` and dynamic object mostly used to bind with json and other remote system which sometimes treat `null` and `not exist` differently

I think we should support `delete` syntax on dynamic object

maybe just use `~`

``</Description>
  </Issue>
  <Issue>
    <IssueID>16313</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>zero- and one-element tuples</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>06/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>16313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16313</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>To best align positional pattern-matching (which won't restrict the number of values being deconstructed) with tuples, please support zero-element and one-element tuple types and tuple expressions.</Description>
  </Issue>
  <Issue>
    <IssueID>16312</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please Add Type Classes to C#</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16312</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See
- [
- [
- [
</Description>
  </Issue>
  <Issue>
    <IssueID>16311</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Avoid creating the tuple return type for deconstruction twice</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>18/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16311</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`DeconstructVariablesAsTuple` and `MakeDeconstructionConstructionStep` both build a tuple type that corresponds to the left-hand-side (and the returned value of the deconstruction).


``</Description>
  </Issue>
  <Issue>
    <IssueID>16306</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline Declaration refactoring on out parameter crashes IDE</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>15/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Urgency-Soon</Name>
        <IssueID>16306</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;
using System.Collections.Generic;

class C
{
    void Foo()
    {
        int rowCountMember;
        var item = "";
        int rowCount;
        foreach (var row in function1(item, out rowCount))
        {
            function2(row);
        }

        rowCountMember = rowCount;
    }

    private IEnumerable&lt;object&gt; function1(string item, out int rowCount)
    {
        throw new NotImplementedException();
    }

    private void function2(object row)
    {
        throw new NotImplementedException();
    }
}


Try to invoke 'inline declaration' on int rowCount.  This crashes the IDE with this callstack:


&gt;	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetForEachStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax node) Line 776	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetForEachStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax node) Line 2117	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetForEachStatementInfo(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax forEachStatement) Line 720	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.GetForEachSymbols(Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax forEach, out Microsoft.CodeAnalysis.IMethodSymbol getEnumeratorMethod, out Microsoft.CodeAnalysis.ITypeSymbol elementType) Line 714	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.CSharp.Conversion&gt;.ReplacementBreaksForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax forEachStatement, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax newForEachStatement) Line 566	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.CSharp.Conversion&gt;.ReplacementChangesSemanticsForNode(Microsoft.CodeAnalysis.SyntaxNode currentOriginalNode, Microsoft.CodeAnalysis.SyntaxNode currentReplacedNode, Microsoft.CodeAnalysis.SyntaxNode previousOriginalNode, Microsoft.CodeAnalysis.SyntaxNode previousReplacedNode) Line 496	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.CSharp.Conversion&gt;.ReplacementChangesSemantics(Microsoft.CodeAnalysis.SyntaxNode currentOriginalNode, Microsoft.CodeAnalysis.SyntaxNode currentReplacedNode, Microsoft.CodeAnalysis.SyntaxNode originalRoot, bool skipVerificationForCurrentNode) Line 437	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.CSharp.Conversion&gt;.ReplacementChangesSemantics() Line 416	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax reducedName, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Threading.CancellationToken cancellationToken) Line 1955	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SemanticModel semanticModel, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax replacementNode, out Microsoft.CodeAnalysis.Text.TextSpan issueSpan, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) Line 1477	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SemanticModel semanticModel, out Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax replacementNode, out Microsoft.CodeAnalysis.Text.TextSpan issueSpan, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) Line 697	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SemanticModel semanticModel, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax replacementNode, out Microsoft.CodeAnalysis.Text.TextSpan issueSpan, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) Line 664	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Options.OptionSet optionSet, System.Threading.CancellationToken cancellationToken) Line 42	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyNode&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node, Microsoft.CodeAnalysis.SyntaxNode newNode, Microsoft.CodeAnalysis.SyntaxNode parentNode, System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Options.OptionSet, System.Threading.CancellationToken, Microsoft.CodeAnalysis.SyntaxNode&gt; simplifier) Line 104	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.SimplifyExpression&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax expression, Microsoft.CodeAnalysis.SyntaxNode newNode, System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Options.OptionSet, System.Threading.CancellationToken, Microsoft.CodeAnalysis.SyntaxNode&gt; simplifier) Line 128	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node) Line 48	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 423	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node) Line 2481	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node) Line 66	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 150	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node) Line 2801	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 3836	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) Line 2788	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 3672	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) Line 163	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;(Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; list) Line 216	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node) Line 2771	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 3469	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node) Line 161	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 3277	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax node) Line 3278	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; visitor) Line 9391	C#
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(Microsoft.CodeAnalysis.SyntaxNode node) Line 37	C#
 	Microsoft.CodeAnalysis.CSharp.Workspaces.dll!Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractExpressionRewriter.VisitNodeOrToken(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken, Microsoft.CodeAnalysis.SemanticModel semanticModel, bool simplifyAllDescendants) Line 176	C#
 	Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax&gt;.ReduceAsync.AnonymousMethod__0() Line 246	C#


With an exception:


System.InvalidCastException: 'Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.BoundBlock' to type 'Microsoft.CodeAnalysis.CSharp.BoundForEachStatement'.'
`</Code>
    <Description>Start with the following code:

``

</Description>
  </Issue>
  <Issue>
    <IssueID>16304</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>shyamnamboodiripad</FixedById>
        <IssueID>16304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Insertion tool needs to respond to updateRevisions.txt</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16304</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The insertion tool right now (I believe) won't respond to updateRevisions.txt files, since it does the commit via libgit2sharp which won't do the commit hooks. This is bad, because it means we won't update revision.txt files that we need to do in some cases, like assembly version changes.

We could fix this in two ways:

1. Shell out to git commit which will run the hooks.
2. Shell out to the hook directly.
2. Reimplement the support in the insertion tool.</Description>
  </Issue>
  <Issue>
    <IssueID>16295</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Allow Deconstruct and implicit operator to both support deconstruction and conversion to tuple types</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>09/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16295</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>`cs
public class PseudoTuple&lt;T1, T2&gt; 
{
    public PseudoTuple(T1 item1, T2 item2)
    {
        Item1 = item1;
        Item2 = item2;
    }

    public T1 Item1 { get; }
    public T2 Item2 { get; }

    public void Deconstruct(out T1 item1, out T2 item2)
    {
        item1 = Item1;
        item2 = Item2;
    }
}

...

void F((int, string) tuple) { }
var t = new PseudoTuple&lt;int, string&gt;(1, "a");
var (x, y) = t; // Deconstruction. Works fine.
F(t);  // This line doesn't compile as can't convert PseudoTuple to ValueTuple
F((x, y)); // Creating a tuple from x, y and passing that. Works fine.
`
Add the following to `PseudoTuple` and all then compiles:
`cs
public static implicit operator (T1, T2)(PseudoTuple&lt;T1, T2&gt; tuple) =&gt; 
    (tuple.Item1, tuple.Item2);
`
It would be useful if both `Deconstruct` and `implicit operator` could be used for both purposes, requiring only one to be defined. So having `public void Deconstruct(out T1 item1, out T2 item2)` **or** `public static implicit operator (T1, T2)(PseudoTuple&lt;T1, T2&gt; tuple)` defined in `PseudoTuple` then the following statements would compile fine:
`cs
void F((int, string) tuple) { }
var t = new PseudoTuple&lt;int, string&gt;(1, "a");
var (x, y) = t;
F(t);
F((x, y));
``</Code>
    <Description>With reference to the discussion on #16199, whilst tuples and deconstructions are different things, the need to define two ways of converting from a type to a deconstruction or a tuple respectively, seems an unnecessary overhead.

Take the following code by way of example,

``

This would have the added advantage that a `Deconstruct` extension method could be used to allow implicit conversions to tuples for 3rd party types, as extension operators aren't (yet) supported. 
</Description>
  </Issue>
  <Issue>
    <IssueID>16293</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Switch over type throws null ref exception</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16293</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
var msg = context.Message;
//TODO: convert to switch later, currently doesnt work, switching on type throws null ref error
if (msg is Started)
{
    Console.WriteLine("[REMOTING] Started EndpointManager");
    return Actor.Done;
}
if (msg is MessageEnvelope)
{
    var env = (MessageEnvelope)msg;
    PID pid;
    if (!_connections.TryGetValue(env.Target.Host, out pid))
    {
        Console.WriteLine("Resolving EndpointWriter for {0}", env.Target.Host);
        var props =
            Actor.FromProducer(() =&gt; new EndpointWriter(env.Target.Host))
                .WithMailbox(() =&gt; new EndpointWriterMailbox());
        pid = context.Spawn(props);
        _connections.Add(env.Target.Host, pid);
    }
    pid.Tell(msg);
    return Actor.Done;
}
return Actor.Done;


Which works as expected.

This block however, https://github.com/AsynkronIT/protoactor-dotnet/blob/master/src/Proto.Remoting/EndpointManager.cs#L45
c#
switch (context.Message)
{
    case Started _:
        Console.WriteLine("[REMOTING] Started EndpointManager");
        return Actor.Done;
    case MessageEnvelope env:
        PID pid;
        if (!_connections.TryGetValue(env.Target.Host, out pid))
        {
            Console.WriteLine("Resolving EndpointWriter for {0}", env.Target.Host);
            var props =
                Actor.FromProducer(() =&gt; new EndpointWriter(env.Target.Host))
                    .WithMailbox(() =&gt; new EndpointWriterMailbox());
            pid = context.Spawn(props);
            _connections.Add(env.Target.Host, pid);
        }
        pid.Tell(env);
        return Actor.Done;
    default:
        return Actor.Done;
}

Throws Null reference exception.

I have narrowed it down to the `case MessageEnvelope env:` line.
Replacing that with:
c#
case MessageEnvelope _:
     var env = context.Message as MessageEnvelope;
`</Code>
    <Description>Reporting the unexpected behavior seen in this question: 

**Version Used**: 
Microsoft Visual Studio Professional 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01038

Installed Version: Professional
Visual C# 2017 RC   00369-50000-00000-AA365
Microsoft Visual C# 2017 RC

**Steps to Reproduce**:

1. I have not been able to reproduce this outside of my library code:
I have this block of code:

``
Fixes the issue.

**Expected Behavior**:
I would expect the above to work just like the original if based code.

**Actual Behavior**:
Null reference exception on the `case MessageEnvelope env:` line.
Or rather it throws null reference exception directly on the `switch(context.Message)` before I am able to step into any of the case blocks.  but the above mentioned fix removes the issue.

</Description>
  </Issue>
  <Issue>
    <IssueID>16288</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Promote local function to method</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>02/08/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16288</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class X
{
  void F(int p)
  {
    bool M1() =&gt; p == 1;
    void M2() =&gt; p = 1;
    void M3() =&gt; F(3);
    M1();
    M2();
    M3();
  }
}

Apply to each local function -&gt;
cs
class X
{
  private static bool M1(int p) =&gt; p == 1;
  private static void M2(ref int p) =&gt; p = 1;
  private void M3() =&gt; F(3);
  void F(int p)
  {
    M1(p);
    M2(ref p);
    M3();
  }
}
`</Code>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>16287</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Use Null Propagation diagnostic incorrect for method groups</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16287</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
var c = new C();
Action&lt;string&gt; a = $$c != null ? c.M : (Action&lt;string&gt;)null;
class C { public void M(string s) { } }


IDE0030 appears at $$, and the fix produces non-compilable code:

csharp
Action&lt;string&gt; a = c?.M;  //CS0023 Operator '?' cannot be applied to operand of type 'method group'
`</Code>
    <Description>**Version Used**: VS 2017 Build 26020

**Steps to Reproduce**:
``

**Expected Behavior**:

Diagnostic should not show up in this case.
</Description>
  </Issue>
  <Issue>
    <IssueID>16284</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16284</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Rename file to match type" doesn't work for nested types</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>08/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16284</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16284</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. In file DesignTimeAssemblyResolution.ReferenceItem.cs:

``


2. On ResolvedReference, drop the light bulb

Expected: To be able to rename the file to match type or vice versa ("Move type to file" created the file)
Actual: Only get offered to "move type to file"
</Description>
  </Issue>
  <Issue>
    <IssueID>16283</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Move type to file" moves leading whitespace with it</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>07/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16283</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a minor annoyance as you usually have a least one line of spacing between the type and preceding methods and you have to delete the whitespace immediately after moving:

1. On ReferenceItem, choose Move type to file

``</Description>
  </Issue>
  <Issue>
    <IssueID>16282</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Move type to file" duplicates interface implementations in partial class</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>14/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16282</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. On ReferenceItem, choose "Move type to DesignTimeAssemblyResolution.ReferencePathItem"

``</Description>
  </Issue>
  <Issue>
    <IssueID>16281</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Move type to file" doesn't respect "Place 'System' directives first when sorting usings"</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16281</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16281</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16281</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. On ReferenceItem, choose "Move type to file"

``</Description>
  </Issue>
  <Issue>
    <IssueID>16280</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Move type to file" duplicates trivia</Title>
    <CreatedDate>06/01/2017</CreatedDate>
    <ClosedDate>13/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16280</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. On ReferenceItemType, choose Move type to DesignTimeAssemblyResolution.ReferenceItemType

``



Expected: For the commented out code to either stay in the same file, or move with the type
Actual: It's left both in the original file and moved to the new file</Description>
  </Issue>
  <Issue>
    <IssueID>16271</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Permit declaring an extension method in a non-static class</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>24/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>1 - Planning</Name>
        <IssueID>16271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16271</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class SomeRandomClass
{
    void SomeRandomMethod(SomeType x)
    {
        x.HelperExtensionMethod();
    }

    static void HelperExtensionMethod(this SomeType x) {}
}
`</Code>
    <Description>Please relax the language specification so that a (static) extension method may be declared in a class that is not static.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>16270</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Permit expression variables in field initializers and constructor initializers</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>16270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16270</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    static int SisZero =&gt; int.TryParse(s, out int i) ? i==0 : false; // error
}


and in ctor-initializers

cs
class C : Base
{
    public C(string s) : base(int.TryParse(s, out int i) ? i==0 : false) // error
    {
    }
}
`</Code>
    <Description>In C# 7 there are a couple of places where we forbid the use of expression variables (pattern variables and out variables). Specifically, we forbid them in field initializers

``

the reason we did not allow these in C# 7 is that we were not sure of the right design for, or were not prepared to implement, the correct scope for these variables. Please design the right scope for them and implement that in some later language version.</Description>
  </Issue>
  <Issue>
    <IssueID>16265</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Microsoft.CSharp.RuntimeBinder.Binder.Convert" not found by the compiler</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>10/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Tenet-Compatibility</Name>
        <IssueID>16265</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
static void Main()
{
    int result(dynamic val) =&gt; (int)val;

    int a = result(7);
    int b = result(3u);
    int c = result(42L);
}

3.  Compile

**Expected Behavior**:
No compiler error

**Actual Behavior**:
The following error occures:

Error	CS0656	Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.Convert'
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC Version 15.0.26020.0 D15REL
Microsoft .NET Framework Version 4.6.01586

**Steps to Reproduce**:

1.  Create a C#7 project
2.  Use the "Type" `dynamic` in a function or anywhere else .... it doesn't matter, e.g:
``

&lt;hr/&gt;

**NOTE:** Adding a reference to `Microsoft.CSharp` solves the issue, but it breaks existing programs/projects, as it was not needed previously (afaik)</Description>
  </Issue>
  <Issue>
    <IssueID>16263</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mattwar</FixedById>
        <IssueID>16263</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn is more strict than Visual Studio when compiling project</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>09/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16263</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16263</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>16263</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
1.3.2
**Steps to Reproduce**:

1. Project A.csproj contains T4 template which produces code file FancyClass1.cs I had code file added both in project and in shared project, in VS everything compiles ok without warnings, with roslyn I get a bunch of errors about duplicate declarations
2. Shared project B.shproj has FancyClass1.cs added as link
3. Project A.csproj loaded with MSBuildWorspace and compiled with Project.GetCompilationAsync()
**Expected Behavior**:
Same behavior as Visual Studio: compilation without errors (or vise versa).
In other words: Consistent behavior between Visual Studio and roslyn compilation.
**Actual Behavior**:
In compilation there are diagnostics with error severity about type duplication.</Description>
  </Issue>
  <Issue>
    <IssueID>16261</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>KevinH-MS</FixedById>
        <IssueID>16261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Ngen DLLs generates "Failed to load type token" and "Failed to load method token"</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>11/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16261</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I am trying to generate native assemblies using Ngen on a root assembly that has dependency on **Microsoft.CodeAnalysis** and **Microsoft.CodeAnalysis.CSharp**.  I am seeing some errors below and have reached out the Ngen team.  While the native assemblies **Microsoft.CodeAnalysis.ni.dll** and **Microsoft.CodeAnalysis.CSharp.ni.dll** are generated, Ngen team has indicated that having these errors will impact performance.  We are generating native binaries to improve performance, so resolving these errors is critical for us.  Your help will be greatly appreciated.

**Version Used**: Microsoft.CodeAnalysis, Version=1.3.1.0 and Microsoft.CodeAnalysis.CSharp, Version=1.3.1.0

**Steps to Reproduce**:

1. Run ngen on any root assembly that has dependency on Microsoft.CodeAnalysis and Microsoft.CodeAnalysis.CSharp.

**Expected Behavior**:
Native assemblies for **Microsoft.CodeAnalysis.ni.dll** and **Microsoft.CodeAnalysis.CSharp.ni.dll** should be generated without error messages.

**Actual Behavior**:
Lots of messages for many object types are generated for these 2 DLLs, e.g.:

&lt;pre&gt;
1&gt;    Compiling assembly Microsoft.CodeAnalysis, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (CLR v4.0.30319) ...
1&gt;Failed to load type token 680003c9 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.Linq.Enumerable+Iterator`1.
1&gt;Failed to load type token 680004c1 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Collections.Concurrent]System.Collections.Concurrent.IProducerConsumerCollection`1.
1&gt;Failed to load type token 680004c2 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Collections.Concurrent]System.Collections.Concurrent.ConcurrentQueue`1.
1&gt;Failed to load type token 680004fe for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.Linq.Enumerable+&lt;SelectManyIterator&gt;d__1`2.
1&gt;Failed to load type token 68000500 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.Linq.Buffer`1.
1&gt;Failed to load type token 68000501 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.ArrayT`1.
[long list of similar errors...]

1&gt;    Compiling assembly Microsoft.CodeAnalysis.CSharp, Version=1.3.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (CLR v4.0.30319) ...
1&gt;Failed to load type token 68000440 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.Linq.Enumerable+&lt;CastIterator&gt;d__1`1.
1&gt;Failed to load type token 68000451 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [Microsoft.CodeAnalysis]Microsoft.CodeAnalysis.ArrayBuilder`1+&lt;&gt;c__DisplayClass39_0.
1&gt;Failed to load type token 68000472 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [Microsoft.CodeAnalysis]Microsoft.CodeAnalysis.ArrayBuilder`1+&lt;&gt;c__DisplayClass39_0.
1&gt;Failed to load type token 6800047c for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [Microsoft.CodeAnalysis]Microsoft.CodeAnalysis.ArrayBuilder`1+&lt;&gt;c__DisplayClass39_0.
1&gt;Failed to load type token 680004a7 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [Microsoft.CodeAnalysis]Microsoft.CodeAnalysis.CommonReferenceManager`2+ReferencedAssembly.
1&gt;Failed to load type token 680004d1 for the profile data in [D:\Program Files (x86)\SiteExtensions\Functions\1.0.10690\bin\Microsoft.CodeAnalysis.CSharp.dll] The type specified by the IBC data is no longer present in the assembly's metadata.  The type was [System.Linq]System.Linq.EmptyEnumerable`1.
[long list of similar errors...]
&lt;/pre&gt;

**Suggested fix**:
I engaged the help from Ngen team and their response is as follows:

"_If your team owns Microsoft.Codeanalysis.CSharp.dll, please talk to the people responsible for doing the build, and ask them to re-run IBC data generation procedure. This is usually a post-build optimization step, which runs some typical apps that use this DLL, and collect profiling data. Each team does this procedure a little differently, but hopefully the build team in your group knows how to do it. If this assembly came from another team, you’ll need to talk to its owner_."

Kindly see if you can fix this soon.</Description>
  </Issue>
  <Issue>
    <IssueID>16260</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Expose some way to initialize ForegroundThreadAffinitizedObject</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>20/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Expired</Name>
        <IssueID>16260</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm building some tests to compare the performance of the editor with various language services. I'm using a [fork]( of [VSEmbed]( to do so. VSEmbed hosts the editor with Roslyn's language services outside of Visual Studio and in a WPF Application.

When I create the editor from a Console Application I receive a number of errors complaining that the `ForegroundNotificationService` can't be created by MEF and is failing here: 

It looks like I have to initialize the `ForegroundThreadAffinitizedObject` as shown here: 

Currently I'm doing this via reflection as you can see here: 

This works, but it's obviously fragile. Is there any chance we might be able to expose some way of initializing `ForegroundThreadAffinitizedObject`?

</Description>
  </Issue>
  <Issue>
    <IssueID>16259</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implement customizable classification using Symbol Specifications</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16259</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
  </Issue>
  <Issue>
    <IssueID>16257</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Discussion: Constrains for numerical types?</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16257</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>At the moment we can have constraints for generics parameters, I wonder what people think about constrains for the native numerical types? 

I know it's related to Design by Contract but I think that this is a more simple problem and isn't so ambitious and it can always be expanded in the future either to support more types or/and user-defined types.

So what I'm thinking is something like this:
``

Bad idea? good idea? what do you think?</Description>
  </Issue>
  <Issue>
    <IssueID>16255</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Permit discards in lambda parameters</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>1 - Planning</Name>
        <IssueID>16255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16255</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
Func&lt;int, int, int&gt; zero = (_, _) =&gt; 0;
`</Code>
    <Description>Please permit a lambda to have multiple declarations of parameters named `_`. In this case the parameters are "discards" and are not usable inside the lambda.

``
</Description>
  </Issue>
  <Issue>
    <IssueID>16254</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>You can either do a rename across the tree, or rename file to match type, but not both</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16254</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a new Console Application
2. Change "class Program" -&gt; "class Program2"
3. Drop down lightbulb and choose Rename file to "Program2.cs"
4. Navigate to "class Program2"

Expected: To be able to rename session to rename usages of "Program" to "Program2"
Actual: The lightbulb is gone and cannot fix up usages

The reverse is also true, if I rename type I cannot rename file.</Description>
  </Issue>
  <Issue>
    <IssueID>16253</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>16253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Undo history, breakpoints, diff marks and cursor position is lost after using code fix to rename file to match type</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>25/03/2019</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16253</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Create a new project
2. Make changes in Class1.cs
3. Rename Class1 =&gt; Class2
4. Drop light bulb
5. Choose Rename file to match type
6. Attempt to undo the changes you made in 2

Expected: Changes to be undone in the file
Actual: All undo history is lost - unlike if I manually renamed the type
</Description>
  </Issue>
  <Issue>
    <IssueID>16248</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Regression: Formatter no longer adds line break after attribute</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16248</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Formatting;

namespace FormatterLineBreakTest
{
    class Program
    {
        static void Main(string[] args)
        {
            const string source = @"
                class C
                {
                    [NotNull] string P      { get; set; }
                }

                public sealed class NotNullAttribute : System.Attribute 
                { 
                }";

            Document document = new AdhocWorkspace()
                .AddProject("TestProject", LanguageNames.CSharp)
                .AddMetadataReferences(new[] {MetadataReference.CreateFromFile(typeof(object).Assembly.Location)})
                .WithCompilationOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
                .AddDocument("Source.cs", source)
                .Project
                .Documents.First();

            SemanticModel model = document.GetSemanticModelAsync().Result;

            if (model.Compilation.GetDiagnostics().Any())
            {
                throw new Exception(string.Join(Environment.NewLine, model.Compilation.GetDiagnostics()));
            }

            SyntaxNode syntaxRoot = document.GetSyntaxRootAsync().Result;

            SyntaxNode formattedSyntaxRoot = Formatter.Format(syntaxRoot, document.Project.Solution.Workspace);
            Console.WriteLine(formattedSyntaxRoot.ToFullString());
        }
    }
}


**Expected Behavior**:
The same output that v1.3.2 produces, which is:


class C
{
    [NotNull]
    string P { get; set; }
}

public sealed class NotNullAttribute : System.Attribute
{
}

**Actual Behavior**:


class C
{
    [NotNull] string P { get; set; }
}

public sealed class NotNullAttribute : System.Attribute
{
}
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.0.0-rc2

**Steps to Reproduce**:
The next program produces different results for Microsoft.CodeAnalysis v1.3.2 and v2.0.0-rc2:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>16247</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Place 'System' directives first when sorting usings" doesn't roam</Title>
    <CreatedDate>05/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16247</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Log into VS
2. Choose Tools -&gt; Options -&gt; C# -&gt; Advanced
3. Check "Place 'System' directives first when sorting usings"
4. Click OK
5. On another machine, Log into VS

Expected: For the setting to have roamed and it be checked
Actual: It does not roam and its unchecked</Description>
  </Issue>
  <Issue>
    <IssueID>16245</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>16245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bug: Namespace import fails for attributes on local functions</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>08/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16245</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Editing;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.Simplification;

namespace FormatterSimplifierTest
{
    class Program
    {
        static void Main()
        {
            const string attributeSource = @"
                namespace Z
                {
                    public class SomeAttribute : System.Attribute
                    {
                    }
                }";

            const string source = @"
                namespace X
                {
                    class C
                    {
                        static void M(string p1)
                        {
                            void N(string p2)
                            {
                            }

                            N(string.Empty);
                        }
                    }
                }";

            Document document = new AdhocWorkspace()
                .AddProject("TestProject", LanguageNames.CSharp)
                .AddMetadataReferences(new[] {MetadataReference.CreateFromFile(typeof(object).Assembly.Location)})
                .WithCompilationOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
                .AddDocument("Source.cs", source)
                .Project
                .AddDocument("Attribute.cs", attributeSource)
                .Project
                .Documents.First();

            SemanticModel model = document.GetSemanticModelAsync().Result;

            if (model.Compilation.GetDiagnostics().Any())
            {
                throw new Exception(string.Join(Environment.NewLine, model.Compilation.GetDiagnostics()));
            }

            IMethodSymbol mSymbol = (IMethodSymbol) model.Compilation.GetTypeByMetadataName("X.C").GetMembers("M").Single();
            MethodDeclarationSyntax mSyntax = (MethodDeclarationSyntax) mSymbol.DeclaringSyntaxReferences[0].GetSyntax();
            ParameterSyntax p1Syntax = mSyntax.DescendantNodes().OfType&lt;ParameterSyntax&gt;().First();

            LocalFunctionStatementSyntax nSyntax = mSyntax.DescendantNodes().OfType&lt;LocalFunctionStatementSyntax&gt;().Single();
            ParameterSyntax p2Syntax = nSyntax.DescendantNodes().OfType&lt;ParameterSyntax&gt;().Single();

            INamedTypeSymbol someAttributeSymbol = model.Compilation.GetTypeByMetadataName("Z.SomeAttribute");

            Console.WriteLine(AddAttributeTo(p1Syntax, someAttributeSymbol, document));
            Console.WriteLine("---");
            Console.WriteLine(AddAttributeTo(p2Syntax, someAttributeSymbol, document));
        }

        private static string AddAttributeTo(SyntaxNode target, INamedTypeSymbol attributeSymbol, Document document)
        {
            SyntaxAnnotation namespaceImportAnnotation = new SyntaxAnnotation();

            DocumentEditor editor = DocumentEditor.CreateAsync(document).Result;

            // Add Z.SomeAttribute
            SyntaxNode attributeSyntax =
                editor.Generator.Attribute(editor.Generator.TypeExpression(attributeSymbol))
                    .WithAdditionalAnnotations(Simplifier.Annotation, Formatter.Annotation, namespaceImportAnnotation);
            editor.AddAttribute(target, attributeSyntax);
            Document documentWithAttribute = editor.GetChangedDocument();
            string documentWithAttributeText = documentWithAttribute.GetSyntaxTreeAsync().Result.ToString();

            // Add namespace import.
            Document documentWithImport =
                ImportAdder.AddImportsAsync(documentWithAttribute, namespaceImportAnnotation).Result;
            string documentWithImportText = documentWithAttribute.GetSyntaxTreeAsync().Result.ToString();

            Document documentSimplified = Simplifier.ReduceAsync(documentWithImport).Result;
            string documentSimplifiedText = documentSimplified.GetSyntaxTreeAsync().Result.ToString();

            Document documentFormatted = Formatter.FormatAsync(documentSimplified).Result;
            string documentFormattedText = documentFormatted.GetSyntaxTreeAsync().Result.ToString();

            return documentFormattedText;
        }
    }
}


**Expected Behavior**:
A namespace import is added for `Z.SomeAttribute` on both method and local function parameter.


using Z;

namespace X
{
    class C
    {
        static void M([Some] string p1)
        {
            void N(string p2)
            {
            }

            N(string.Empty);
        }
    }
}
---

using Z;

namespace X
{
    class C
    {
        static void M(string p1)
        {
            void N([Some] string p2)
            {
            }

            N(string.Empty);
        }
    }
}


**Actual Behavior**:
Namespace import fails silently for `Z.SomeAttribute` on local function `X.C.M.N`. It seems that because of this, the simplifier leaves the attribute untouched.


using Z;

namespace X
{
    class C
    {
        static void M([Some] string p1)
        {
            void N(string p2)
            {
            }

            N(string.Empty);
        }
    }
}
---

namespace X
{
    class C
    {
        static void M(string p1)
        {
            void N([global::Z.SomeAttribute] string p2)
            {
            }

            N(string.Empty);
        }
    }
}
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis v2.0.0-rc2

**Steps to Reproduce**:
Run the next program in VS 2017 RC2 as a .NET Framework console application that targets .NET 4.6.1:
``</Description>
  </Issue>
  <Issue>
    <IssueID>16241</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>CodeFix "Collection initialization can be simplified" is suggested in an invalid location</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16241</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`` </Description>
  </Issue>
  <Issue>
    <IssueID>16237</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>brettfo</FixedById>
        <IssueID>16237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Migrate key storage to Azure</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16237</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we're using a Microsoft-internal key management system that is being deprecated. We should move this to Azure storage before it's shut down, but also because moving to Azure means we can move dependent infrastructure to Azure too.</Description>
  </Issue>
  <Issue>
    <IssueID>16236</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jeremymeng</FixedById>
        <IssueID>16236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Intellisense eats "=" while typing attribute parameter without committing completion</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16236</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp

[A()]
class AAttribute: Attribute
{
    public string Skip { get; set; }
}
`</Code>
    <Description>**Version Used**: 

VS 2017 RC public.d15rel/15.0.26014.0

**Steps to Reproduce**:

1. paste the following code into a C# code file

``

2. type "Skip = " in "()" of "A[()]"

**Expected Behavior**:
"Skip " inserted in the editor

**Actual Behavior**:
"Skip = " inserted in the editor</Description>
  </Issue>
  <Issue>
    <IssueID>16235</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn Insertion Tool doesn't send notifications on script failure</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16235</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>The Roslyn Insertion Tool doe not currently send notifications if the insertion script itself fails (such as if building the tool fails).

We should wrap the script in a `try/catch` block and use the `Send-MailMessage` function to ensure that script execution failures are sent to @dotnet/roslyn-infrastructure as well.

We should additionally be validating the MSBuild exit code so we can send the appropriate error notification.</Description>
  </Issue>
  <Issue>
    <IssueID>16234</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Review IDE features vs constraint that a throw expression may not be used in an expr tree</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>07/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16234</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>See 

A throw expression is not permitted to be used inside of an expression tree. The IDE team needs to review the feature set to see if there are any IDE features that need to be adjusted based on this language restriction.

/cc @CyrusNajmabadi </Description>
  </Issue>
  <Issue>
    <IssueID>16233</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[C# Feature] Local Enums</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16233</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>## Background
Local Functions are a great new feature. One of the uses I've see for local functions is local decision making. For example, functions containing switch statements. Switching on Enum values is common.

A side effect of local function capability is that it creates additional layers of scope. A best-practice is to declare variables near the point of use, for clarity. When we had only one level of scope inside a function, declaring enums at the class level was "close enough". While the idea of declaring local enums has come up before, I think they were more nice to have's than anything else. I believe that the introduction of local functions makes this something to reconsider.

## Proposed
Allow declaring enumerations inside methods.

### Justification
Using an enumeration inside a local function now requires "declaring a 'variable'" at least two levels above the point of use.

``
The scope of declaration should mean that the declared item has meaning within that scope. Currently, this will not always be the case with local functions and enums.  

I think this case makes it worth revisiting the idea of local enums.</Description>
  </Issue>
  <Issue>
    <IssueID>16230</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Inline temporary variable changes the behavior</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16230</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
int F()
{
  var [||]result = 1;
  if(G()) return result;
  result = 2;
  return result;
}


**Expected Behavior**:
cs
int F()
{
  if(G()) return 1;
  return 2;
}

**Actual Behavior**:
cs
int F()
{
  var result = 1;
  if(G()) return 1;
  result = 2;
  return 1;
}
`</Code>
    <Description>**Version Used**: VS2015 Update 3 - 14.0.25420.01

**Steps to Reproduce**:

``
</Description>
  </Issue>
  <Issue>
    <IssueID>16229</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mattwar</FixedById>
        <IssueID>16229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Object Initializer Completion</Title>
    <CreatedDate>04/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16229</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 1.3.2
**Steps to Reproduce**:
1. I create a CompletionService and a CodeAnalisys.Document with the following source:
``

2. Invoke GetCompletionsAsync passing the given CaretPosition

**Expected Behavior**:
I expect the CompletionList.Items to contain the Ent02 properties.
The target is to show the correct suggestions to initialize Ent02

**Actual Behavior**:
The CompletionList does not contain any of the Ent02 properties (it has several properties)

I could see discussions about this in the Omnisharp repo with the same request.
Should it already work in 1.3.2? Later versions?
I am still waiting the next stable version before going there.

Thanks!
</Description>
  </Issue>
  <Issue>
    <IssueID>16214</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>RegisterSymbolAction with SymbolKind.Parameter is incorrectly reported as unsupported</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>09/10/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16214</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
        public override void Initialize(AnalysisContext context)
        {
            context.RegisterSymbolAction(AnalyzeParameter, SymbolKind.Parameter);
        }

        private void AnalyzeParameter(SymbolAnalysisContext context)
        {
            throw new System.NotImplementedException();
        }


**Expected Behavior**:
No warnings, because the limitation no longer applies.

**Actual Behavior**:

Warning	RS1003	SymbolKind 'Parameter' is not supported for symbol analyzer actions.
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis 2.0.0-rc2

**Steps to Reproduce**:
In VS 2017 RC, create an analyzer project with the following code:
``

With  merged, this warning should be removed as suggested [here](

The latest prerelease version of Microsoft.CodeAnalysis.Analyzers (causing the warning) is still at 1.2.0-beta2.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16214</IssueID>
        <PullRequestID>13931</PullRequestID>
        <Title>Make RegisterSymbolAction work on Parameters</Title>
        <Description>Fixes #8753This is just a proposal to get feedback on the approach of registering more operation or symbol actions when a symbol action is registered with SymbolKind.Local or SymbolKind.Parameter. It also includes some hacks to SymbolAnalysisContext and OperationAnalysisContext to make _isSupportedDiagnostic accessible. Additionally, we'd need to add tests (somewhere?).</Description>
        <CreatedDate>20/09/2016</CreatedDate>
        <ClosedDate>18/10/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16214</IssueID>
            <PullRequestID>13931</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Analyzers</Name>
            <IssueID>16214</IssueID>
            <PullRequestID>13931</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16214</IssueID>
            <PullRequestID>13931</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16214</IssueID>
            <PullRequestID>13931</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16211</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Can't reference mscorlib in .Net Core</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16211</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

class Program
{
    static void Main(string[] args)
    {
        var greetings = HelloWorlder.GetGreetings();
        // should write Hello World
        greetings();
    }
}

public static class HelloWorlder
{
    public static Action GetGreetings()
    {
        var tree = CSharpSyntaxTree.ParseText(@"
using System;
public class MyClass
{
    public static void Main()
    {
        Console.WriteLine(""Hello World!"");
        Console.ReadLine();
    }   
}");
        const string testAsmName = "testLib";

        var coreDir = Path.GetDirectoryName(typeof(object).GetTypeInfo().Assembly.Location);

        var mscorlib = MetadataReference.CreateFromFile(Path.Combine(coreDir, "mscorlib.dll"));
        var compilation = CSharpCompilation.Create(testAsmName,
            syntaxTrees: new[] { tree }, references: new[] { mscorlib });

        var emitResult = compilation.Emit($"{testAsmName}.dll");

        if (!emitResult.Success)
        {
            throw new Exception(string.Join(Environment.NewLine, emitResult.Diagnostics.Select((x, i) =&gt; $"{i + 1}. {x}")));
        }
        var ourAssembly = Assembly.Load(new AssemblyName(testAsmName));
        var type = ourAssembly.GetType("MyClass");

        var meth = type.GetRuntimeMethod("Main", Type.EmptyTypes);
        return () =&gt; meth.Invoke(null, null);
    }
}
`</Code>
    <Description>Here is sample code which is working on target `4.5.2`, but doesn't on `Core 1.0.1`. 

``
As you can examine yourself, it writes `Hello world` on full framework but fails to compile on `.Net Core` with following errors:

&gt; 1. warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.
&gt; 2. (3,14): error CS0518: Predefined type 'System.Object' is not defined or imported
&gt; 3. (5,19): error CS0518: Predefined type 'System.Void' is not defined or imported
&gt; 4. (7,27): error CS0518: Predefined type 'System.String' is not defined or imported
&gt; 5. (7,9): error CS0518: Predefined type 'System.Object' is not defined or imported
&gt; 6. (7,9): error CS0103: The name 'Console' does not exist in the current context
&gt; 7. (8,9): error CS0518: Predefined type 'System.Object' is not defined or imported
&gt; 8. (8,9): error CS0103: The name 'Console' does not exist in the current context
&gt; 9. (3,14): error CS1729: 'object' does not contain a constructor that takes 0 arguments</Description>
  </Issue>
  <Issue>
    <IssueID>16209</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>16209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bug: Symbol lookup fails for a parameter of a local function</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>31/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16209</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ParameterSymbolTest
{
    class Program
    {
        static void Main()
        {
            const string source = @"
                class C
                {
                    void M()
                    {
                        void N(string p)
                        {
                        }

                        N(string.Empty);
                    }
                }";

            var tree = CSharpSyntaxTree.ParseText(source);
            var compilation = CSharpCompilation.Create("test.exe", new[] {tree},
                new[] {MetadataReference.CreateFromFile(typeof(object).Assembly.Location)},
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            var model = compilation.GetSemanticModel(tree);

            if (compilation.GetDiagnostics().Any())
            {
                throw new Exception(string.Join(Environment.NewLine, compilation.GetDiagnostics()));
            }

            var mSymbol = compilation.GetTypeByMetadataName("C").GetMembers("M").Single();
            var mSyntax = mSymbol.DeclaringSyntaxReferences[0].GetSyntax();

            var nSyntax = mSyntax.DescendantNodes().OfType&lt;LocalFunctionStatementSyntax&gt;().Single();
            var nSymbol = model.GetDeclaredSymbol(nSyntax);
            Console.WriteLine($"Function symbol null: {nSymbol == null}");

            var pSyntax = nSyntax.DescendantNodes().OfType&lt;ParameterSyntax&gt;().Single();
            var pSymbol = model.GetDeclaredSymbol(pSyntax);
            Console.WriteLine($"Parameter symbol null: {pSymbol == null}");
        }
    }
}


**Expected Behavior**:

Function symbol null: False
Parameter symbol null: False


**Actual Behavior**:

Function symbol null: False
Parameter symbol null: True
`</Code>
    <Description>**Version Used**: 
Microsoft.CodeAnalysis.2.0.0-rc2

**Steps to Reproduce**:
Run the next program in VS 2017 RC2 as a .NET Framework console application that targets .NET 4.6.1:
``

Edit: cleanup of repro code.</Description>
  </Issue>
  <Issue>
    <IssueID>16206</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>16206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rationalize our dependency on Microsoft.VisualStudio.Repository</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16206</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn has a transitive dependency on the Microsoft.VisualStudio.Repository.  This is not included in our reference set.  Hence Roslyn is depneding on it without realizing it. This causes our test output to be incomplete and our depnedency graph to have missing entries.</Description>
  </Issue>
  <Issue>
    <IssueID>16205</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactoring "Move type to ..." removes modifier</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16205</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public abstract class Foo
{
    private class Bar // Move type to Bar.cs
    {
    }
}


**Actual Behavior**:
csharp
public partial class Foo
{
}
`</Code>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.26014.0

**Code to Reproduce**:
``
</Description>
  </Issue>
  <Issue>
    <IssueID>16202</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>16202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rationalize our CodeAnalysis.Sdk.UI dependency</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>29/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16202</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn has a transitive dependency on the Microsoft.VisualStudio.TeamSystem.Common via our Microsoft.VisualStudio.CodeAnalysis.Sdk.UI dependency.  The NuGet package for CodeAnalysis.Sdk.UI is not properly setup to recognize TeamSystem.Common as a dependency.  Hence Roslyn is depneding on it without realizing it.  This causes our test output to be incomplete and our depnedency graph to have missing entries.  
</Description>
  </Issue>
  <Issue>
    <IssueID>16201</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jaredpar</FixedById>
        <IssueID>16201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Rationalize our GraphModel dependency</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>29/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16201</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Roslyn has a dependency on the GraphModel APis via the NuGet package RoslynDependencies.Microsoft.VisualStudio.GraphModel.  This package doesn't fit the standard naming convention for packages and lacks Dev15 versions.  This needs to be updated so we can remove the work around in our RunTests project and our project.json entries. </Description>
  </Issue>
  <Issue>
    <IssueID>16200</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Problem with tuple names (possibly related to async or Task?)</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>09/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16200</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I'm using VS2017 RC 15.0.26014 and my application targets net framework 4.6.1.

I have two assemblies referencing System.ValueTuple 4.3

MyProject.Services
MyProject.WebApi

In MyProject.Services I have a class with a method like this

&lt;!-- language: lang-c# --&gt;

    public async Task&lt;(int fCount, int cCount, int aCount)&gt; GetAllStatsAsync()
    {
        // Some code...
        return (fCount, cCount, aCount);
    }

In MyProject.WebApi I have a controller that use this method like that:

&lt;!-- language: lang-c# --&gt;

    public async Task&lt;HttpResponseMessage&gt; GetInfoAsync()
    {
        // Some code...
        var stats = await _myClass.GetAllStatsAsync();
        
        var vm = new ViewModel
                 {
                     FCount = stats.fCount,
                     CCount = stats.cCount,
                     ACount = stats.aCount
                 };

         return Request.CreateResponse(HttpStatusCode.OK, vm);
    }

Intellisense is working and deconstruct the tuple but when I compile it fails without any Error in Error List window.
In the output windows I have this errors:

&gt; 2&gt;MyController.cs(83,31,83,40): error CS1061: 'ValueTuple&lt;int, int,
&gt; int&gt;' does not contain a definition for 'fCount' and no extension
&gt; method 'fCount' accepting a first argument of type 'ValueTuple&lt;int,
&gt; int, int&gt;' could be found (are you missing a using directive or an
&gt; assembly reference?) 2&gt;MyController.cs(84,39,84,49): error CS1061:
&gt; 'ValueTuple&lt;int, int, int&gt;' does not contain a definition for 'cCount'
&gt; and no extension method 'cCount' accepting a first argument of type
&gt; 'ValueTuple&lt;int, int, int&gt;' could be found (are you missing a using
&gt; directive or an assembly reference?) 2&gt;MyController.cs(85,35,85,40):
&gt; error CS1061: 'ValueTuple&lt;int, int, int&gt;' does not contain a
&gt; definition for 'aCount' and no extension method 'aCount' accepting a
&gt; first argument of type 'ValueTuple&lt;int, int, int&gt;' could be found (are
&gt; you missing a using directive or an assembly reference?)

I tried adding the __DEMO__ and __DEMO_EXPERIMENTAL__ build flags but still fails.

Any idea on what's wrong?

**EDIT 1:**

This code works and stats is well deconstructed, I can see the values when debugging. I'm probably hitting a bug.

&lt;!-- language: lang-c# --&gt;

    public async Task&lt;HttpResponseMessage&gt; GetInfoAsync()
    {
        // Some code...
        var stats = await _myClass.GetAllStatsAsync();
        var tu = stats.ToTuple();
        var vm = new ViewModel
                 {
                     FCount = tu.Item1,
                     CCount = tu.Item2,
                     ACount = tu.Item3
                 };

         return Request.CreateResponse(HttpStatusCode.OK, vm);
    }
</Description>
  </Issue>
  <Issue>
    <IssueID>16199</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bug? implicit operator of tuple</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>09/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>16199</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp

public class Point
{
    public int X, Y;
    public static implicit operator (int x, int y) (Point p)
    {
        return (p.X, p.Y);
    }
    public static implicit operator int (Point p)
    {
        return p.X;
    }
}

  ...
  var point = new Point { X = 1, Y = 2 };
  int i = point; 
  // this works as expected

  (int x, int y) t = point;
  // works as expected

  (int x, int y) = point;
  // The compiler gives two errors here:
  // CS1061 'Point' does not contain a definition for 'Deconstruct' ....
  // CS8129 No Deconstruct instance or extension method was found for type 'Point', with 2 out parameters.
`</Code>
    <Description>An implicit operator from a type to a tuple type is not accepted in an assignment to an unnamed tuple. 
Version: Visual Studio 2017 RC2.

``</Description>
  </Issue>
  <Issue>
    <IssueID>16198</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline variable declaration removed whitespace</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>08/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16198</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is based on what is in master as of #0461ffc60aa57e9862ba721a0681352ce443896b.

I cannot repro this standalone nor if I manually run the code fix over the same code. But hopefully this contains enough information to understand the problem. Basically, in [this commit]( it changed:

``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16198</IssueID>
        <PullRequestID>17016</PullRequestID>
        <Title>Fix issue with inline-formatting changing indentation of multi-line constructs</Title>
        <Description>Fixes </Description>
        <CreatedDate>08/02/2017</CreatedDate>
        <ClosedDate>08/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16198</IssueID>
            <PullRequestID>17016</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16195</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Generic expression of a derived type cannot be handled by a pattern</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>08/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16195</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Professional 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01586
Visual C# Compiler version 2.0.0.61213

**Steps to Reproduce**:

    public class Packet
    {
    }

    public class KeepalivePacket : Packet
    {
    }

    public void Send&lt;T&gt;(T packet)
        where T : Packet
    {
        if (packet is KeepalivePacket keepalive)
        {
            // Do stuff with keepalive
        }

        switch (packet)
        {
            case KeepalivePacket keepalivePacket:
                // Do stuff with keepalivePacket
                break;
        }
    }

I get a compilation error for both the if statement and case statement. 

&gt; CS8121: An expression of type T cannot be handled by a pattern of type KeepalivePacket

The code compiles successfully if the type is _not_ a derived type of `Packet` (ie. `packet is Packet keepalive` or `packet is object keepalive` works fine).

The code compiles without error if I first cast the parameter to `object`.

    if ((object)packet is KeepalivePacket keepalive)
    {
        // This works
    }

I couldn't find any mention of unsupported pattern matching with generic parameters/variables in the design notes/blog posts. 

Is this expected to fail? Does this compilation error need a more informative message?

Roslyn is recommending pattern matching for the following code with **IDE0019**. Applying the code fix to the following code results in the compilation error above.

    var keepalive = packet as KeepalivePacket;
    if (keepalive != null)
    {
        // Do stuff with keepalive
    }

Does **IDE0019** need to be updated to not apply when the variable/parameter is generic?</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16195</IssueID>
        <PullRequestID>18756</PullRequestID>
        <Title>Classify pattern-matching temp as long-lived</Title>
        <Description>**Customer scenario**

Use a switch in an async method, where the switch uses any new features introduced in C# 7.0.

**Bugs this fixes:**

Fixes #18257

**Workarounds, if any**

None known.

**Risk**

Small, as there is no change to code generation, but rather the classification of variables affecting the PDB.

**Performance impact**

Tiny, if any. Thee is only a slight change to which (existing) compiler code path is taken for these scenarios.

**Is this a regression from a previous update?**

No, the pattern-matching switch was new in C# 7.0.

**Root cause analysis:**

We did not test the interaction of pattern-matching with async.

**How was the bug found?**

Customer reported.
</Description>
        <CreatedDate>17/04/2017</CreatedDate>
        <ClosedDate>19/04/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Resolution-Fixed</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18756</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>18756</PullRequestID>
            <IssueID>16195</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16195</IssueID>
        <PullRequestID>18784</PullRequestID>
        <Title>Relax conversion requirements for pattern-matching involving type parameters.</Title>
        <Description>**Customer scenario**

This is a tiny language change for 7.1. See 

See #16195 for customer scenario. In short, pattern-matching can give a compile-time error unexpectedly when type parameters are involved. The compiler is correct to give these errors according to the spec, but we wish to relax the language to make it legal.

**Bugs this fixes:**

Fixes #16195

**Workarounds, if any**

Cast the expression being matched to `object`.

**Risk**

Low. This has little impact on existing code.

**Performance impact**

None expected.

**Is this a regression from a previous update?**

No.
</Description>
        <CreatedDate>18/04/2017</CreatedDate>
        <ClosedDate>08/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>4 - In Review</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>18784</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>18784</PullRequestID>
            <IssueID>16195</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16195</IssueID>
        <PullRequestID>19631</PullRequestID>
        <Title>Add some pattern-matching tests suggested by test plan.</Title>
        <Description>Relates to #19038, #16195

Note that this is a test-only change. Comments referring to added tests have been added to #19038.

@AlekseyTs Can you review this test-only change please?
</Description>
        <CreatedDate>18/05/2017</CreatedDate>
        <ClosedDate>22/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>19631</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>19631</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>19631</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16195</IssueID>
            <PullRequestID>19631</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>19631</PullRequestID>
            <IssueID>16195</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16194</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Tuple extension method vs foreach</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>03/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16194</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
public static IEnumerator&lt;(T, U)&gt; GetEnumerator&lt;T, U&gt;(
  this (T[] xs, U[] ys) source)
  =&gt; source.xs.Zip(source.ys, (x, y) =&gt; (x, y)).GetEnumerator();


does not permit the following code to compile

cs
foreach(var (x, y) in (new int[1], new byte[2])) // ERROR
`</Code>
    <Description>It was [reported on discussion on another issue]( that an extension method such as

``

</Description>
  </Issue>
  <Issue>
    <IssueID>16193</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[C# Feature Request] Hierarchy Data Type</Title>
    <CreatedDate>03/01/2017</CreatedDate>
    <ClosedDate>08/05/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Records</Name>
        <IssueID>16193</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>### Background
There are a few threads that talk about things like nested enums, and other need to represent hierarchal structures. To define a unique spot in a hierarchy we use things like nested namespaces, nested classes, or specialized parser classes. There is no built-in way. On occasion, just to be able to locate a typed-hierarchy object, I've even resorted to things like
``

I think there is a need to be able to represent hierarchies as true hierarchies, and not have to manually construct nested objects. I don't know what that should actually look like, but I thought I would put out a few ideas.
   
</Description>
  </Issue>
  <Issue>
    <IssueID>16190</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Deconstruct() not invoked when right-hand-side is a tuple type</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>24/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16190</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        [Fact]
        public void CallDeconstructForTuple()
        {
            string source = @"
class Program
{
    public static void Main()
    {
        (int x, int y, int z) = (1, 2);
    }
}
static class Extensions
{
    public static void Deconstruct(this (int, int) self, out int x, out int y, out int z)
    {
        x = self.Item1;
        y = self.Item2;
        z = 0;
    }
}
";
            var comp = CreateCompilationWithMscorlibAndSystemCore(source,
                references: new[] { ValueTupleRef, SystemRuntimeFacadeRef },
                options: TestOptions.DebugExe);
            comp.VerifyDiagnostics(
                );
        }
`</Code>
    <Description>According to [the specification](

&gt; In short, what this does in the general case is find a `Deconstruct` method on the expression on the right-hand-side of the assignment, invoke it with the appropriate number of `out var` parameters, converts those output values (if needed) and assign them to the variables on the left-hand-side. And in the special case where the expression on the right-hand-side is a tuple (tuple expression or tuple type), then the elements of the tuple can be assigned to the variables on the left-hand-side without needing to call `Deconstruct`.

The following test should pass (although the special case applies, so that it *can* be done without invoking `Deconstruct`, in this case the types match only when calling `Deconstruct`). But it fails.

To be clear, this may be a problem with the specification or it may be a problem with the implementation.

``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16190</IssueID>
        <PullRequestID>16643</PullRequestID>
        <Title>Update docs for deconstruction and discards</Title>
        <Description>This is a doc and test-only change.

Fixes 
Contributes to 

@gafter for review, no rush (post-dev15 branch).</Description>
        <CreatedDate>20/01/2017</CreatedDate>
        <ClosedDate>24/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16190</IssueID>
            <PullRequestID>16643</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Documentation</Name>
            <IssueID>16190</IssueID>
            <PullRequestID>16643</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Test</Name>
            <IssueID>16190</IssueID>
            <PullRequestID>16643</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16190</IssueID>
            <PullRequestID>16643</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>16643</PullRequestID>
            <IssueID>16190</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16187</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: implement limited CHA in RyuJit and take into account 'sealed' keyword</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>16187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16187</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Devirtualize more aggressively sealed classes**: 

**Steps to Reproduce**:

Most of times calling ToString(). GetHashCode() and co is converted to a virtual call. But by specification sealed methods and classes cannot have overriden methods, so if in context the virtual method cannot be overriden, it should be enforced to be devirtualized safely. There is one difference between calling a virtual method and a non-virtual method (the null pointer check) which should be still checked on this devirtualization.

**Expected Behavior**:

It should be expected that calling .ToString() to a provable sealed class (like against an Array&lt;T&gt; classes, as byte[], should call a non-virtual method). 

This snippet of code is inside a class which is not overriden anywhere:

``
(the code does a lambda capture, 

Not only that static calls could be optimized, but RyuJit could have bigger devirtualization opportunities.

As a phase two of this proposal, it is that RyuJit to identify sealed classes which are in context of assemblies:

- **internal classes which are not overriden inside the assembly** could be considered sealed

- **private classes (classes defined inside another classes) which are not overriden**, could be considered sealed

This optimization step could add extra startup cost when loading new assemblies to check the Class Hierarchy Analysis, so maybe the marking of internal classes/priva classes as sealed, could be done on Roslyn side

I added a reverse link [to RyuJIT repository](</Description>
  </Issue>
  <Issue>
    <IssueID>16186</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>C# file with /*/ crashes IDE</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16186</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS2015 Update 3 with RC Insider VSIX

**Steps to Reproduce**:
1. New a C# console project
1. Empty the Program.cs
1. Type `/*/`
1. Wait for a few seconds

**Expected Behavior**:
No crash

**Actual Behavior**:
Crash</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16186</IssueID>
        <PullRequestID>16218</PullRequestID>
        <Title>Fix crash in outlining when indexing out of an incomplete multiline comment.</Title>
        <Description>Fixes </Description>
        <CreatedDate>03/01/2017</CreatedDate>
        <ClosedDate>04/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16186</IssueID>
            <PullRequestID>16218</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16186</IssueID>
            <PullRequestID>16218</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16186</IssueID>
            <PullRequestID>16218</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16184</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mattwar</FixedById>
        <IssueID>16184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException when creating workspaces/solutions in parallel</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16184</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Host.Mef;
using Microsoft.CodeAnalysis.Text;
using Xunit;

public class Tests {
    [Fact]
    public void Workspaces_CanBeCreatedConcurrently() {
        var tasks = new List&lt;Task&gt;();
        for (var i = 0; i &lt; 5; i++) {
            tasks.Add(Task.Run(() =&gt; {
                var hostServices = MefHostServices.Create(MefHostServices.DefaultAssemblies);
                var projectId = ProjectId.CreateNewId();
                var projectInfo = ProjectInfo.Create(
                    projectId, VersionStamp.Create(), "_", "_", LanguageNames.CSharp
                );
                var documentId = DocumentId.CreateNewId(projectId);
                var sourceText = SourceText.From("");

                var workspace = new AdhocWorkspace(hostServices);
                workspace.CurrentSolution
                    .AddProject(projectInfo)
                    .AddDocument(documentId, "_", sourceText);
            }));
        }
        Task.WaitAll(tasks.ToArray());
    }
}


**Expected Behavior**:
Test is successful.

**Actual Behavior**:

One or more errors occurred. (Object reference not set to an instance of an object.)
Object reference not set to an instance of an object.
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout)
   at System.Threading.Tasks.Task.WaitAll(Task[] tasks)
   at Tests.Workspaces_CanBeCreatedConcurrently() in D:\Development\VS 2015\MirrorSharp\MirrorSharp.Tests\UpdogTests.cs:line 28
   at Microsoft.CodeAnalysis.Workspace.get_Options()
   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService..ctor(HostLanguageServices languageServices)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CreateLanguageService(HostLanguageServices provider)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Host.Mef.MefLanguageServices.GetService[TLanguageService]()
   at Microsoft.CodeAnalysis.ProjectState.FixProjectInfo(ProjectInfo projectInfo)
   at Microsoft.CodeAnalysis.ProjectState..ctor(ProjectInfo projectInfo, HostLanguageServices languageServices, SolutionServices solutionServices)
   at Microsoft.CodeAnalysis.Solution.AddProject(ProjectInfo projectInfo)
   at Tests.&lt;&gt;c.&lt;Workspaces_CanBeCreatedConcurrently&gt;b__0_0()
   at System.Threading.Tasks.Task.Execute()
`</Code>
    <Description>**Version Used**: 
1.3.2

**Steps to Reproduce**:

``</Description>
  </Issue>
  <Issue>
    <IssueID>16183</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: case statements </Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>23/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16183</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
if(!(e is &lt;pattern&gt;)) return;
// use pattern variables

This would not be that convenient to use, besides, not all patterns are fallible. So that the `is` expression would always return `true` and therefore, is redundant.

With `let` as the read-only counterpart of `var` as proposed in #16182, it would be no longer available as a pattern-matching statement e.g. `let X x = e;` would not do pattern-match like #6400.

To prevent possible ambiguities and avoid backward-compat issues (#10624), I suggest we use `case` (analogous with `case` labels in `switch`) as the pattern-matching statement.

cs
case &lt;pattern&gt; = e1 [[when e2] else return];

Note: An expression form of `case` is already being used in pattern-matching spec draft. This caused an ambiguity (or otherwise indistinguishable visual difference) with `match` labels — therefore, the grammar does not allow `case` expressions to be chained. I think it would be better to reuse `match` itself as a shorthand for a one-handed `match` expression.
cs
var x = e1 match { case &lt;pattern&gt;: e2 };
var x = e1 match &lt;pattern&gt;: e2;
`</Code>
    <Description>One of the main motivations of a pattern-matching statement (#6400) is to prevent additional indention that occurs within `if` statements. However, with revised scoping rules around declaration expressions, you can negate the whole expression and variables will be still in scope after the `if` block.
``
This is no longer ambigious and can be nested.</Description>
  </Issue>
  <Issue>
    <IssueID>16182</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: let as the read-only counterpart of var</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>29/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16182</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var x = e;
let x = e;
ref var x = e;
ref let x = e;
var (x, y) = e;
let (x, y) = e;
(var x, var y) = e;
(let x, let y) = e;
M(out var (x, y));
M(out let (x, y));
foreach(ref var x in arr)
foreach(ref let x in arr)
e is var x
e is let x
case var x:
case let x:
(x, y) =&gt; {};
(let x, let y) =&gt; {};
((x, y)) =&gt; {};
(let (x, y)) =&gt; {};

Some statements like `foreach` and `using` define read-only variables by default. That could be the case for an analyzer to suggest to use `let` in those places to make that clear, visually.

However, parameters should use `readonly` just like fields, as they are more high-profile than locals.
cs
readonly object field;
void M(readonly object parameter) {}

Note, unlike `var`, `let` is able to be used as a modifier on explicitly-typed locals,
cs
let X x = e;
`</Code>
    <Description>Disclaimer: This is particularly related to #16183 as the syntax has some overlaps with previously proposed pattern-matching statement (#6400). Also, I think if this is decided now, it might help if we prevent some syntactical forms to retain backward compatibility in the future (#13148).

Considering how common it will be to define read-only locals, `readonly` is too verbose to be used as a modifier on local variables (#115). Instead, I suggest we use `let` as the read-only counterpart of `var`: 

``
Notice that this is ambiguous with pattern-matching statement (#6400). See #16183 for more on that.
</Description>
  </Issue>
  <Issue>
    <IssueID>16181</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Require that switch filter conditions be enclosed in parenthesis</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>16181</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26014.0 D15REL

**Steps to Reproduce**:

``

**Expected Behavior**:
Require that the Boolean expression be enclosed in parenthesis.

**Actual Behavior**:
The Boolean expression is not required to be enclosed in parenthesis.

**Comments**
It's probably too late, but this is not coherent with other states that have Boolean expression. As far as I can remember, other statements require the condition to be enclosed in parenthesis:

* `if (condition)`
* `while (condition)`
* `case (Exception ex) when (condition)`</Description>
  </Issue>
  <Issue>
    <IssueID>16180</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Switch on pattern throws NullReferenceException</Title>
    <CreatedDate>02/01/2017</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16180</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    switch (transitionBase)
    {
        case Transition transition:
            return new RuntimeTransition(
                transition.Name,
                runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                transition.Action,
                null);
        case InternalTransition transition:
            return new RuntimeTransition(
                transition.Name,
                null,
                transition.Action,
                transition.Guard);
        case ExternalTransition transition:
            return new RuntimeTransition(
                transition.Name,
                runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                transition.Action,
                transition.Guard);
        default:
            throw new ArgumentOutOfRangeException(
                nameof(transitionBase), 
                $"Invalid transition type: {transitionBase.GetType().FullName}");
    }
}


The method can be found [here](https://github.com/paulomorgado/StateMachineExplorations/blob/e987a5ffcf3edc1923ffacb91cd71482ea9bbd17/src/StateMachineExplorations/Definitions/RuntimeBuilder.cs#L108-L135) and a test that calls into it [here](https://github.com/paulomorgado/StateMachineExplorations/blob/e987a5ffcf3edc1923ffacb91cd71482ea9bbd17/tests/StateMachineExplorationTests/Definitions/IfElseStateTests.cs).

**Expected Behavior**:
Selects the correct branch.

**Actual Behavior**:
Throws `NullReferenceException` in the `switch (transitionBase)` line.

**Comments**

Refactoring the code to this:


private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    if (transitionBase != null)
    {
        {
            if (transitionBase is Transition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                    transition.Action,
                    null);
            }
        }

        {
            if (transitionBase is InternalTransition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    null,
                    transition.Action,
                    transition.Guard);
            }
        }

        {
            if (transitionBase is ExternalTransition transition)
            {
                return new RuntimeTransition(
                    transition.Name,
                    runtimeStates?.Single(s =&gt; s.Name == transition.Target.Name),
                    transition.Action,
                    transition.Guard);
            }
        }
    }

    throw new ArgumentOutOfRangeException("transitionBase", string.Format("Invalid transition type: {0}", transitionBase.GetType().FullName));
}


works as expected.

Decompiling the code with .NET Reflector 9.0 gives me this code:


private static RuntimeTransition BuildRuntimeTransition(TransitionBase transitionBase, IEnumerable&lt;RuntimeStateBase&gt; runtimeStates)
{
    TransitionBase base2 = transitionBase;
    if (base2 != null)
    {
        Transition transition = base2 as Transition;
        if (transition != null)
        {
            &lt;&gt;c__DisplayClass3_0 class_;
            class_.transition = transition;
            return new RuntimeTransition(class_.transition.Name, (runtimeStates != null) ? ((ITransitionTarget) Enumerable.Single&lt;RuntimeStateBase&gt;(runtimeStates, new Func&lt;RuntimeStateBase, bool&gt;(class_.&lt;BuildRuntimeTransition&gt;b__0))) : null, class_.transition.Action, null);
        }
        InternalTransition transition2 = base2 as InternalTransition;
        if (transition2 != null)
        {
            InternalTransition transition5 = transition2;
            return new RuntimeTransition(transition5.Name, null, transition5.Action, transition5.Guard);
        }
        ExternalTransition transition3 = base2 as ExternalTransition;
        if (transition3 != null)
        {
            &lt;&gt;c__DisplayClass3_1 class_2;
            class_2.transition = transition3;
            return new RuntimeTransition(class_2.transition.Name, (runtimeStates != null) ? ((ITransitionTarget) Enumerable.Single&lt;RuntimeStateBase&gt;(runtimeStates, new Func&lt;RuntimeStateBase, bool&gt;(class_2.&lt;BuildRuntimeTransition&gt;b__1))) : null, class_2.transition.Action, class_2.transition.Guard);
        }
    }
    throw new ArgumentOutOfRangeException("transitionBase", $"Invalid transition type: {transitionBase.GetType().FullName}");
}
`</Code>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26014.0 D15REL
netstandard1.4

**Steps to Reproduce**:

Call this method:
``

I don't know why the need for the `&lt;&gt;c__DisplayClass3_0` and `&lt;&gt;c__DisplayClass3_1` but they seem to be causing this issue.</Description>
  </Issue>
  <Issue>
    <IssueID>16179</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Solution does not open in VS 2K15 update 3</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>16179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16179</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS 2K15 update 3
After cloning the repository, I went to VS 2k15, Updte 3, I got a prompt to install SP1, I skipped. No single project in the solution was able to load, all 86 projects display (load failurr or Unavailable)
**Steps to Reproduce**:

1. cloned the repositiory
2. Opened solution in VS
3. When prompted to install VS 2K15 SP1, I skipped

**Expected Behavior**:

**Actual Behavior**:
</Description>
  </Issue>
  <Issue>
    <IssueID>16178</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Parsing Diagnostics Relocation Work.</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
    <IssueLabels />
    <Description>@CyrusNajmabadi  and @jcouv 

Would you mind looking at the parsing of parameter arguments, soon. As I'm thinking of having another look at implementing my previous proposal for a VB language feature (Implicit Default Optional Parameters). As it maybe possible to implement in the binder rather than the parser. 
``
The `= 0` or `= Nothing` (`Initialiser` I think) to be optional in the presence of the parameter modifier `optional`.
IRCC one cause for concern (for said ole implementation) was a change to the code involved in overload resolution, to correctly handle `&lt;CallerInfoAttributes&gt;` in the presence of the feature.
If you move the diagnostic(s) involved I could re-prototype the feature, to hopefully get it into a future version of the language.</Description>
  </Issue>
  <Issue>
    <IssueID>16177</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Roslyn should embed interop structs with [ComVisible(true)]</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>26/09/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>16177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>16177</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
import "oaidl.idl";
import "ocidl.idl";

[
	uuid(E9832E6C-053B-4E7B-9F94-624964D2177B),
	version(1.0),
]
library FooLib
{
	importlib("stdole2.tlb");

	 [uuid(823F7C79-0238-4830-A7F2-8610ED1B3550),
	 version(1.0)]
	 typedef struct FooStruct {

		long operand1;
		long operand2;

	} FooStruct;
	[
		uuid(C58291E0-9474-438A-97E4-F7976B919C30)		
	]
	coclass Bar
	{
		[default] interface IBar;
	};

	[
		object,
		uuid(57D5CCE9-B3E2-4884-95F8-5B268DDF3DF2),
		oleautomation,
		dual,
		nonextensible,
		pointer_default(unique)
	]
	interface IBar : IDispatch {
		[id(1)]
		HRESULT CallFoos([in] SAFEARRAY(FooStruct)* ppFoos);
	};

};


2. Create a C# desktop/console project, reference ATL com library (Add reference), and set Embed Interop Types = true, and make sure [ComVisible(false)] in the assemblyInfo.cs.

3. Try to call CallFoos with following code:


new Bar().CallFoos(new FooStruct[] {  new FooStruct() })
`</Code>
    <Description>**Version**: VS 2015 Update 3

**Steps to Reproduce**:

1. Create a ATL COM library:

``

**Expected Behavior**:
Succeed

**Actual Behavior**:
Fail. CLR throws ArgumentException with HRESULT=0x80070057 (E_INVALIDARG).

**Reason**:
The underlying problem is caused by interop type embeding. When marshaling SAFEARRAY of structs, CLR needs to locate the IRecordInfo from the typelib in order to be able to correctly represent them in VARIANTs. 
Due to interop embeding, CLR is not able to correctly locate the type lib GUID (the right GUID is on the interop assembly that is not inherited into the main app, and in the case of multiple embedding interop assemblies, it simply can't), so registering the TLB actually don't work. As a result, CLR has to resort back to dynamically export a tlb on the fly to solve the issue. 
This usually works well for embedded interop classes and interfaces since they are [ComImport], but not for structs since it can't have [ComImport]. Therefore, CLR uses [ComVisible()] setting on struct to determine whether the importing is needed. If [ComVisible(false)] is set on assembly level (which is the **default**), CLR would ignore the struct and the struct would fail to be found in the exported type lib. 
If you turn off embed interop types, or change the default [ComVisible(false)] to true, you wouldn't see this issue. 
To work well with CLR, it might be reasonable to make such structs [ComVisible(true)] when embedding them. 
</Description>
  </Issue>
  <Issue>
    <IssueID>16176</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>16176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IntelliSense: Lambda mode persists after new</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16176</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

``
Pressing Space after `new` opens IntelliSense in suggestions mode, even though that cannot be a lambda anymore.

Demo: </Description>
  </Issue>
  <Issue>
    <IssueID>16175</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>kuhlenh</FixedById>
        <IssueID>16175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 15 RC - Context menu bloat?</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16175</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there any reason why the context menus of the editor are so bloated? is it for accessibility? discoverability? honest question here!

The Code Editor and Project and Solution context menus have many items that don't make sense and when you have extensions installed and many other things you find yourself in a really unpleasant place so you have to customize it and I wonder if there's any plans to shrink them down?

One possible solution is to have one group on the context menu dedicated to extensions and then have one sub-menu per extension where this is enforced by Visual Studio for all the stuff related to it, currently there's an anarchy of vendors and items are just scattered throughout the context menus.

In addition, I think that some items are just there for the sake of it and not for a _reason_ like in the Code Editor, here are few examples:

1. Cut/Copy/Paste - Most people would probably use keyboard shortcuts as opposed to clicking.
2. Outlining, Snippet - Same as above.
3. Snippet - Same as above.
4. Source Control - Command-line or same as above.

Now, like I wrote above I'm not sure if these were added for accessibility or discoverability but maybe you can ask the user how he wants it or by default have only refactoring stuff and navigation stuff like Peek Definition, Go To Definition and Go To Implementation.

Maybe you can offer different experience to the user like Typist, Clicker, Blind, Deaf.. sorry I'm not good with names but this isn't meant to be a joke but just a way to improve the experience for each kind of user, finally you can let the user select how he wants the experience to be, I'm not sure what's the best approach to take here but either way I'm not really using the context menu as I prefer the keyboard but when I do I'd really want to see only refactoring stuff and navigation stuff there.
</Description>
  </Issue>
  <Issue>
    <IssueID>16174</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NullReferenceException at SourceMethodSymbol.CalculateLocalSyntaxOffset (on a Mac)</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>3 - Working</Name>
        <IssueID>16174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>16174</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
  System.ExecutionEngineException: System.NullReferenceException: Object reference not set to an instance of an object
    at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMethodSymbol.CalculateLocalSyntaxOffset (System.Int32 localPosition, Microsoft.CodeAnalysis.SyntaxTree localTree) [0x00007] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.SynthesizedStateMachineMethod.CalculateLocalSyntaxOffset (System.Int32 localPosition, Microsoft.CodeAnalysis.SyntaxTree localTree) [0x00006] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GetLocalDebugName (Microsoft.CodeAnalysis.ILocalSymbolInternal local, Microsoft.CodeAnalysis.CodeGen.LocalDebugId&amp; localId) [0x0004c] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.DefineLocal (Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol local, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntaxNode) [0x00156] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0006d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0009d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0000c] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement (Microsoft.CodeAnalysis.CSharp.BoundSequencePoint node) [0x0002d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0008b] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0009d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl () [0x00027] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate () [0x00000] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody (Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, System.Int32 methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement block, System.Collections.Immutable.ImmutableArray`1[T] lambdaDebugInfo, System.Collections.Immutable.ImmutableArray`1[T] closureDebugInfo, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator variableSlotAllocatorOpt, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain importChainOpt, System.Boolean emittingPdb) [0x000c0] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods (Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState) [0x000fa] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType (Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol containingType) [0x0043d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass20_0.&lt;CompileNamedTypeAsTask&gt;b__0 () [0x00000] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0  ---&gt; System.NullReferenceException: Object reference not set to an instance of an object
    at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMethodSymbol.CalculateLocalSyntaxOffset (System.Int32 localPosition, Microsoft.CodeAnalysis.SyntaxTree localTree) [0x00007] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.SynthesizedStateMachineMethod.CalculateLocalSyntaxOffset (System.Int32 localPosition, Microsoft.CodeAnalysis.SyntaxTree localTree) [0x00006] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GetLocalDebugName (Microsoft.CodeAnalysis.ILocalSymbolInternal local, Microsoft.CodeAnalysis.CodeGen.LocalDebugId&amp; localId) [0x0004c] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.DefineLocal (Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol local, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntaxNode) [0x00156] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0006d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0009d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0000c] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement (Microsoft.CodeAnalysis.CSharp.BoundSequencePoint node) [0x0002d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0008b] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock (Microsoft.CodeAnalysis.CSharp.BoundBlock block) [0x0009d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement (Microsoft.CodeAnalysis.CSharp.BoundStatement statement) [0x0007e] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl () [0x00027] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.Generate () [0x00000] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody (Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder moduleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol method, System.Int32 methodOrdinal, Microsoft.CodeAnalysis.CSharp.BoundStatement block, System.Collections.Immutable.ImmutableArray`1[T] lambdaDebugInfo, System.Collections.Immutable.ImmutableArray`1[T] closureDebugInfo, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol stateMachineTypeOpt, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator variableSlotAllocatorOpt, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider debugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain importChainOpt, System.Boolean emittingPdb) [0x000c0] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods (Microsoft.CodeAnalysis.CSharp.TypeCompilationState compilationState) [0x000fa] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType (Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol containingType) [0x0043d] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
    at Microsoft.CodeAnalysis.CSharp.MethodCompiler+&lt;&gt;c__DisplayClass20_0.&lt;CompileNamedTypeAsTask&gt;b__0 () [0x00000] in &lt;44ba953d41aa43dd9b6e6c27ec08c729&gt;:0 
`</Code>
    <Description>**Version Used**: 2.0.0.60620

**Steps to Reproduce**:
Not sure if this scenario is even supported. I'm trying to compile a modified version of monodevelop on Visual Studio for Mac. MCS had an issue with type-forwarding assemblies, so I switched to MSBuild with Roslyn (by modifying the Microsoft.CSharp.Mono.targets file). Most projects in the solution compiled fine, except for MonoDevelop.Ide, which produced the following exception:

``
[Full stack trace](

The same code compiles fine in Visual Studio 2017.</Description>
  </Issue>
  <Issue>
    <IssueID>16173</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Implement customizable type/member sorting using Symbol Specifications</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16173</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, we can add Symbols Specification and then control the style for each specification and that's great but there's no way to to sort these Symbols Specification inside the Manage Specifications window and I think that it would be awesome if we could control the order and then make the formatting mechanism use these specifications to sort the _code_.

In R# there's a feature called File Layout where you can plan how you want to structure the code and you can have some complex rules there, however, for people that don't use R# for whatever reason they may find this feature attractive and as useful as having naming styles.

Any plans for something like this?
</Description>
  </Issue>
  <Issue>
    <IssueID>16172</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>dpoeschl</FixedById>
        <IssueID>16172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Visual Studio 15 RC - Lost Windows</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>09/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16172</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>_Disclaimer: This is one example, I guess that there are more scenarios where this happens._

**Version Used**:  Visual Studio 15 RC

**Steps to Reproduce**:

1. Open Visual Studio.
2. Go to Options\Text Editor\C#\Code Style\Naming\Manage Specifications.
3. Alt+Tab to another application.
4. Alt+Tab back to Visual Studio.
5. The Options window will show but Manage Specifications will _disappear_ and to some users it may seems like Visual Studio is hanged because the Options window is a modal window and you can't do anything unless you close the Manage Specifications window first.

Now, I'm pretty sure that intuitively most users will try to use Alt+Tab to bring the window only to find out that it's not in list because Alt+Tab is used to switch between applications or to show top level windows whereas in practice they need to use Win+Tab to bring this window.

I don't know if it's a bug or whether you know about it but anyway, I thought to report this.

**Expected Behavior**:

Manage Specifications should appear again when the user press Alt+Tab to get back to Visual Studio.

**Actual Behavior**:

Manage Specifications doesn't appear.</Description>
  </Issue>
  <Issue>
    <IssueID>16171</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>throw expression in ref returning methods produces an error</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Expression-Bodied Ctor/Dtor/Accessor</Name>
        <IssueID>16171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Throw Expression</Name>
        <IssueID>16171</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
class C
{
    ref int M() =&gt; throw null;
}
`</Code>
    <Description>**Version Used**: 

**Steps to Reproduce**:

``
**Expected Behavior**: No error

**Actual Behavior**: `By-value returns may only be used in methods that return by value`


</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16171</IssueID>
        <PullRequestID>16224</PullRequestID>
        <Title>Permit a throw expression in an expression-bodied ref-returning method.</Title>
        <Description>**Customer scenario**

Use a throw expression as the expression body of a ref-returning local function.

**Bugs this fixes:** 

Fixes #16171

**Workarounds, if any**

Don't use an expression bodied method for this confluence of features.

**Risk**

Very low. The additional code is a simple test and targeted to the problematic scenario.

**Performance impact**

Tiny, if any, for the same reason.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

We did not test the confluence of three new features (expression-bodied methods, ref-returning functions, and throw expressions).

**How was the bug found?**

Customer reported.

@dotnet/roslyn-compiler May I please have a couple of reviews of this tiny bug fix?
</Description>
        <CreatedDate>04/01/2017</CreatedDate>
        <ClosedDate>05/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>4 - In Review</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Expression-Bodied Ctor/Dtor/Accessor</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Local Functions</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Ref Locals and Returns</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Throw Expression</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16171</IssueID>
            <PullRequestID>16224</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>16224</PullRequestID>
            <IssueID>16171</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16170</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Bug: Types in surrounding code are explicitly listed when renaming a lambda argument having the same name as a tuple element</Title>
    <CreatedDate>01/01/2017</CreatedDate>
    <ClosedDate>23/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16170</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        public static void Foo2()
        {
            IEnumerable&lt;IGrouping&lt;int, long&gt;&gt; groupings = null;

            var bar = groupings
                .SelectMany(g =&gt; g, (g, l[|]) =&gt; (i: g.Key, l: l))
                .Select(t =&gt; t.l);
        }


2. Hit Backspace and rename `l` to something else, like `le`
3. Press Ctrl + . and select "rename 'l' to 'le'".

**Expected Behavior**:

cs
        public static void Foo2()
        {
            IEnumerable&lt;IGrouping&lt;int, long&gt;&gt; groupings = null;

            var bar = groupings
                .SelectMany(g =&gt; g, (g, le) =&gt; (i: g.Key, l: le))
                .Select(t =&gt; t.l);
        }


**Actual Behavior**:

cs
        public static void Foo2()
        {
            IEnumerable&lt;IGrouping&lt;int, long&gt;&gt; groupings = null;

            var bar = groupings
                .SelectMany&lt;IGrouping&lt;int, long&gt;, long, (int i, long l)&gt;((IGrouping&lt;int, long&gt; g) =&gt; g, (IGrouping&lt;int, long&gt; g, le) =&gt; ((i: g.Key, le: le)))
                .Select(((int i, long l) t) =&gt; t.l);
        }


**Other Notes:** This was the simplest repro I could get. For snippets like

cs
        public static void Foo2()
        {
            IEnumerable&lt;IGrouping&lt;int, long&gt;&gt; groupings = null;

            var baz = groupings
                .Select(g =&gt; (bar: g, foo: 0))
                .Select(t =&gt; t.bar);
        }
`</Code>
    <Description>**Version Used**: VS 2017 RC, 2.0.0.61104 (obtained via `csc /?` from the command line)

**Steps to Reproduce**:

1.

``

attempting to rename `bar` will simply not work (the option won't show up when you press Ctrl + .).

**Possibly Related:** </Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16170</IssueID>
        <PullRequestID>16659</PullRequestID>
        <Title>Implements GetDeclaredSymbol for tuple literals and GetSymbolInfo for elements of tuple literals.</Title>
        <Code>cs
var x = (Customer: 1, Orders: 2);
`</Code>
        <Description>Implements GetDeclaredSymbol for tuple literals and GetSymbolInfo for elements of tuple literals.
Unimplemented GetDeclaredSymbol was responsible for erratic behavior and crashes in IDE.

Fixes:#14600
Fixes:#11013
Fixes:#14116
Fixes:#16168

**Customer scenario**

Even though tuple literals are expressions, they implicitly declare tuple types and elements.
Tuple literals do not provide semantic information about tuple literals.
(note: we do produce correct semantic info for tuple types we do not do so for tuple literals)

That leads to crashes in some "rename" scenarios, incorrect colorization, erratic behavior of "go to definition" and other misbehavior of IDE features built on top of "find all references" engine.

The root cause is that inferred references could be incorrectly computed - i.e. 
In the following code "Customer" and "Orders" could be understood by IDE as references to types, members or locals as long as they have same name.

``
 
**Bugs this fixes:** 

Primarily #14600, 
there are several other bugs caused by the same issue.
#11013
#14116
#16168

**Workarounds, if any**

User must ignore incorrect colorization and should not try renaming symbols that are erroneously considered references from the tuple element.

I.E. when IDE thinks that a tuple element name is actually a reference to a containing type, renaming the element will be allowed (even though renaming elements is otherwise blocked). That could lead to both the element and the incorrectly referred to type being renamed, leading to crashes.

**Risk**

Risk is low. 

This fix does not enable renaming tuple elements. Enabling that is a 2.1 item.
It however makes the blocking to be more effective.
I.E. crashing scenarios that should be blocked will be blocked as intended.

**Performance impact**

Low.
Just correctly implementing an existing semantic info API. It is not any special in terms of complexity.

**Is this a regression from a previous update?**

New feature

**Root cause analysis:**

Tuple literal expression are special since they declare types and elements. An API for returning info on those was not implemented. The effects of not providing semantic info for those was not believed as potentially crashing, so the fix was pushed to 2.1
Now we know about crashing scenarios.

**How was the bug found?**

Ad hock testing. Customer reports.
</Description>
        <CreatedDate>20/01/2017</CreatedDate>
        <ClosedDate>26/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16170</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16170</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Needs Shiproom Approval</Name>
            <IssueID>16170</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16170</IssueID>
            <PullRequestID>16659</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16166</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tuple element is fetched even though discarded</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>18/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16166</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
int M()
{
  var (_, e) = (1, 2);
  return e;
}

**Expected Behavior**:

(decompiled)
cs
int M()
{
  var e = (1, 2);
  return e.Item2;
}



**Actual Behavior**:

cs
int M()
{
  var e = (1, 2);
  int item = e.Item1;
  return e.Item2;
}
`</Code>
    <Description>**Version Used**:  

**Steps to Reproduce**:



``</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16166</IssueID>
        <PullRequestID>17027</PullRequestID>
        <Title>Avoid creating "steps" in deconstruction binding and optimize output</Title>
        <Description>~~The initial binding for deconstruction now produces a `BoundAssignmentOperator` (instead of a `BoundDeconstructionAssignmentOperator`).~~

The `BoundDeconstructionAssignmentOperator` now has:
 - a `BoundTupleLiteral` as its Left,
 - a `BoundConversion` as its Right, holding:
     - a tree of `Conversion` objects with Kind=Deconstruction, information about a Deconstruct method (optional) and an array of nested `Conversions` (like a tuple conversion),
     - an `BoundExpression` as its Operand.

A number of optimizations just fell out from this change. Most deconstructions don't construct a `ValueTuple` anymore and most un-necessary temps are now avoided.

Fixes  (don't construct ValueTuple in simple deconstruction)
Fixes  (don't use temps in simple deconstruction)
Fixes  (don't construct ValueTuple in simple deconstruction)
Fixes  (Phase ordering and bound node design issues for tuple deconstruction)
Fixes  (Avoid creating the tuple return type for deconstruction twice)
Fixes  (don't construct ValueTuple un-necessarily)

@dotnet/roslyn-compiler for review.</Description>
        <CreatedDate>08/02/2017</CreatedDate>
        <ClosedDate>18/02/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16166</IssueID>
            <PullRequestID>17027</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>16166</IssueID>
            <PullRequestID>17027</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16166</IssueID>
            <PullRequestID>17027</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>17027</PullRequestID>
            <IssueID>16166</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16161</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jasonmalinowski</FixedById>
        <IssueID>16161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Format Document doesn't work after Style Settings Changes</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>24/07/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16161</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>1. Open a document. (Only seems to repro with documents that are freshly opened and have had no text changes).
1. Run Format Document on open document.
2. Change code style settings.
3. Run Format Document on open document again.

**Expected**
Document is reformatted to the new code style settings.

**Actual**
The document is not reformatted until any text change has been applied. Once any change has been applied, Format Document works as expected, including changing settings and having the changes automatically picked up.

Tested on d15prerel/26030.00</Description>
  </Issue>
  <Issue>
    <IssueID>16160</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Discussion: Code Generator Catalog </Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Community</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Documentation</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Replace/Original</Name>
        <IssueID>16160</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
partial class Person
{
  public string FirstName { get; set; }
  public string LastName { get; set; }
}

// generated
partial class Person : INotifyPropertyChanged
{
  private string _firstName;
  public replace string FirstName
  {
    get =&gt; _firstName;
    set 
    {
      if (_firstName != value)
      {
         _firstName = value;
         OnPropertyChanged(nameof(FirstName));
      }
    }    
  }
}

Also, if a property depends on others, we could also raise additional events by inspecting its accessor.
cs
[NPC]
public string FullName =&gt; this.FirstName + ", " + this.LastName;

// generated
public replace string FirstName
{
  get =&gt; _firstName;
  set 
  {
    if (_firstName != value)
    {
       _firstName = value;
       OnPropertyChanged(nameof(FirstName));
       OnPropertyChanged(nameof(FullName));
    }
  }
}

Note, #850 can lead to simpler code generation i.e does not need to figure out a name for backing field:
cs
public replace string FirstName
{
  string field;
  get =&gt; field;
  set 
  {
    if (field != value)
    {
      field = value;
      OnPropertyChanged(nameof(FirstName));
      OnPropertyChanged(nameof(FullName));
    }
  }
}

Or the type (#8364):
cs
public replace string FirstName
{
  get;
  set 
  {
    if (field != value)
    {
      field = value;
      OnPropertyChanged(nameof(FirstName));
      OnPropertyChanged(nameof(FullName));
    }
  }
}

Note: If none of `replace`d members call `original` the original declaration should be *removed* as the backing fields are no longer being used.

#### 2. Dependency Injection
Dependency containers commonly depend on reflection to create objects. This could be moved to compile-time via code generators. In this scenario, there should be a way to parametrize the code generator to switch between implementations. e.g. mocks. (attributes does not belong to MEF).
cs
[Export]
class Service1 : IService1
{
  [Import]
  private IService2 Service2 { get; }
}


Note that this will be only useful to manage object lifecycle. If implementations come from outside of assembly boundaries we should probably fallback to reflection under the hood.
#### 3. Caching / Lazy Initialization
cs
[Cache]
public string Property =&gt; ComputeProperty();

// generated
private string _property;
public replace string Property =&gt; _property ?? (_property = original);

#### 4. Memoization
cs
[Memoize]
public string Function(string arg) { ... }

// mind you, a simple demonstration without thread-safety
private readonly Dictionary&lt;string, string&gt; _fCache = new();
public replace string F(string arg)
  =&gt; _fCache.TryGetValue(arg, out var result) ? result : _fCache[arg] = original(arg);

#### 5. Dependency Properties
cs
partial class Foo : DependencyObject
{
  [PropertyMetadata(defaultValue: string.Empty)]
  public string Name { get; set; }
  public int Size { get; }
}

// generated
partial class Foo 
{
  public static readonly DependencyProperty NameProperty =
    DependencyProperty.Register(nameof(Name), typeof(string), typeof(Foo), new(string.Empty));
    
  public replace string Name
  {
    get =&gt; (string)GetValue(NameProperty);
    set =&gt; SetValue(NameProperty, value);
  }
  
  internal static readonly DependencyPropertyKey SizePropertyKey =
        DependencyProperty.RegisterReadOnly(nameof(ReadonlyNam), typeof(string), typeof(Foo));

  public static readonly DependencyProperty SizeProperty = SizePropertyKey.DependencyProperty;
    
  public replace int Size
  {
    get =&gt; (int)GetValue(SizeProperty);
    internal set =&gt; SetValue(SizePropertyKey, value);
  }
}


Note, it would be nice to be able to inspect property initializer and use it in the generated code, e.g.
cs
public string Name { get; set; } = string.Empty;

#### 6. ORMs
Currently ORMs) use runtime code generation (NH) or proxies (EF) to enable change tracking and lazy loading in POCOs. They could ship with a code generator to move this procedure to the compile-time.
cs
class BlogPost
{
   public string Title { get; set; }
   public string Body { get; set; }
   public List&lt;Comment&gt; Comments { get; }
}


#### 7. Mixins

It's possible to implement member delegation as an analyzer but if we want to delegate *all* members, perhaps a code generator is more likely preferable.
cs
partial class Class
{
  [Mixin] private readonly ISomething _something = new Something();
}

// generated
partial class Class : ISomething
{
  public void DoSomething() =&gt; _something.DoSomething();
}



#### 8. Double Dispatch
This could be used to implement visitor pattern or a simple double dispatch:

cs
public object F(T x) { .. }
public object F(U x) { .. }
[DoubleDispatch]
public extern object F(Base p);

// generated
public object F(Base p)
{
  switch(p)
  {
    case T x: return F(x);
    case U x: return F(x);
    default: throw ExceptionHelper.UnexpectedValue(p);
  }
}

You could use a similar technique to generate semi-virtual extension methods. Since this is generated by a  generator, you are free to handle the failure case differently.

Generators should be able to produce diagnostics if target members are malformed, e.g. a method instead of a property.

#### 9. Duck Typing
cs
interface IDuck
{
  void Quack();
}

[Duck(typeof(IDuck))]
class A { public void Quack() {} }

void F(IDuck d) { }

F(new A().Wrap());

// generated
static class Extensions
{
  class WrapperA : IDuck
  {
    private readonly A _obj;
    public WrapperA(A obj) =&gt; _obj = obj;
    public Quack() =&gt; obj.Quack();
  }
  public static IDuck Wrap(this A obj) =&gt; new WrapperA(_obj);
}


Though, #11159 + #258 = #8127 can greatly improve this scenario in terms of perf and easier code gen.

Note: An assembly attribute could be used to annotate exterior types,
cs
[assembly: Duck(typeof(IDuck), typeof(AnotherAssembly.B))]
`</Code>
    <Description>Here is an incomplete list of potential use cases for code generators to explore ideas and discussion. I believe this will help to shape generator APIs and language features around it.

#### 1. NPC implementation (huh)

``


#### 10. Type providers for xml, json, csv, sql, etc
F# type providers can take a string as parameter to bootstrap code generation. This requires code generators to accept  a parameter which is not possible in #5561.

#### 11. Variadic generics

There are types with variable arities including Func, Action and ValueTuple. It is a common scenario where we want to have a bunch of similar methods that are only different in number of generic types.

#### 12. Basic implementation
Some of interfaces like  `IEquitable`, `IComparable` etc, given "key properties" could be implemented via generators . This can also be implemented as an analyzer, but with generators it would be totally transparent. `ToString` overrides also belong to this category.

#### 13. Serialization

Serialization to various formats like json, can be provided at compile-time without using reflection.</Description>
  </Issue>
  <Issue>
    <IssueID>16159</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>16159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Tuple and extension methods</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>18/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>16159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16159</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
using System;
using System.Linq;
using System.Collections.Generic;
static class C
{
    static IEnumerable&lt;(T, U)&gt; AsEnumerable&lt;T, U&gt;(
        this (IEnumerable&lt;T&gt; xs, IEnumerable&lt;U&gt; ys) source)
	=&gt; source.xs.Zip(source.ys, (x, y) =&gt; (x, y));

    static void Main()
    {
        foreach(var (x, y) in AsEnumerable((new int[1], new byte[2]))) // OK
        {          
        }      

        foreach(var (x, y) in (new int[1], new byte[2]).AsEnumerable()) // ERROR; needs cast
        {    
        }  
    }   
}
`</Code>
    <Description>``
~~In fact, an extension `GetEnumerator` should be sufficient without the explicit call.~~</Description>
  </Issue>
  <Issue>
    <IssueID>16158</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE0027 false positive (Simplify collection initialization)</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16158</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
string item = null;
var items = new List&lt;string&gt;();

var values = new List&lt;string&gt;(); // Collection initialization can be simplified
values.Add(item);
values.AddRange(items);


**Actual Behavior**:
csharp
string item = null;
var items = new List&lt;string&gt;();

var values = new List&lt;string&gt;
{
    item,
    items // error
};
`</Code>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.26014.0

**Code to Reproduce**:
``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16158</IssueID>
        <PullRequestID>16217</PullRequestID>
        <Title>Ensure the 'Add' name actually matches before accepting any invocation expression.</Title>
        <Description>Fixes </Description>
        <CreatedDate>03/01/2017</CreatedDate>
        <ClosedDate>06/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16158</IssueID>
            <PullRequestID>16217</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16158</IssueID>
            <PullRequestID>16217</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16158</IssueID>
            <PullRequestID>16217</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16157</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Refactoring ReplacePropertyWithMethod produces invalid code</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16157</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
public class Foo
{
    public bool Any { get; } // Replace 'Any' with method

    public static void Bar()
    {
        var foo = new Foo();
        bool f = foo?.Any == true;
    }
}

**Actual Behavior**:
csharp
public class Foo
{
    private readonly bool any;

    public bool GetAny()
    {
        return any;
    }

    public static void Bar()
    {
        var foo = new Foo();
        bool f = foo? (.GetAny)() == true;
    }
}


**Expected Behavior**:
csharp
public class Foo
{
    private readonly bool any;

    public bool GetAny()
    {
        return any;
    }

    public static void Bar()
    {
        var foo = new Foo();
        bool f = foo?.GetAny() == true;
    }
}
`</Code>
    <Description>**Version Used**: Visual Studio 2017 RC 15.0.26014.0

**Code to Reproduce**:
``
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16157</IssueID>
        <PullRequestID>16213</PullRequestID>
        <Title>Fix issue with 'Convert Prop to Method' with member bindings.</Title>
        <Description>Fixes </Description>
        <CreatedDate>03/01/2017</CreatedDate>
        <ClosedDate>04/01/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>16157</IssueID>
            <PullRequestID>16213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-IDE</Name>
            <IssueID>16157</IssueID>
            <PullRequestID>16213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16157</IssueID>
            <PullRequestID>16213</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16156</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Better pattern matching with generic types</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>28/02/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16156</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
abstract class Result&lt;T&gt; { }
sealed class Success&lt;T&gt;:Result&lt;T&gt;
{
    public T Value {get;}
    public Success(T value) {Value = value;}
}
sealed class Error&lt;T&gt;:Result&lt;T&gt;
{
    public Exception Ex {get;}
    public Error(Exception ex) {Ex = ex;}
}


And this static method-
 csharp
static Result&lt;T&gt; Try&lt;T&gt;(Func&lt;T&gt; fun)
{
    try
    {
        return new Success&lt;T&gt;(fun());
    }
    catch (Exception e)
    {
        return new Error&lt;T&gt;(e);
    }
}


I want to write
 csharp
var res = Try(SomeMethod);
if (res is Success ok)
    Console.WriteLine(ok.Value);
else
    Console.WriteLine((res as Error).Ex.Message);


instead of
 csharp
var res = Try(SomeMethod);
if (res is Success&lt;int&gt; ok)
    Console.WriteLine(ok.Value);
else
    Console.WriteLine((res as Error&lt;int&gt;).Ex.Message);


Another option can be discarding the type with '_'-
 csharp
var res = Try(SomeMethod);
if (res is Success&lt;_&gt; ok)
    Console.WriteLine(ok.Value);
else
    Console.WriteLine((res as Error&lt;_&gt;).Ex.Message);
`</Code>
    <Description>Predecessor: #5023

Actually in the parent issue, pattern matching was not highlighted. Hence this new issue. Given these classes-
``
</Description>
  </Issue>
  <Issue>
    <IssueID>16155</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please allow ref on foreach variable in case of an array</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>19/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>16155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16155</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
foreach(ref var item in array)
{
}

-&gt;
cs
for(int i = 0; i &lt; array.Length; ++i)
{
  ref var item = ref array[i];
}
`</Code>
    <Description>``
</Description>
  </Issue>
  <Issue>
    <IssueID>16152</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>uint inconsitency</Title>
    <CreatedDate>30/12/2016</CreatedDate>
    <ClosedDate>30/12/2016</ClosedDate>
    <IssueLabels />
    <Description>``
Succeeds in compile time (expected as C# does not do constant folding) but also at runtime.
Why does runtime does not throw an exception because we don't use unchecked?

If C# allows this, why does it fail in the 2 first scenarios? Isn't it inconsistent?

BTW note that if in the watch window, we use `(uint)-1`, we got 4294967295 on the Value column.</Description>
  </Issue>
  <Issue>
    <IssueID>16151</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Error Recovery Docs?</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>30/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>16151</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Is there any documentation on how the error recovery system works?
If so, could you signpost me to it.</Description>
  </Issue>
  <Issue>
    <IssueID>16147</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>warning CS0429 - not detected by csc.exe</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>30/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16147</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
csc.exe
I have tested with these versions, the non Roslyn compilers work as expected:
Microsoft (R) Visual C# 2005 Compiler version 8.00.50727.5483
Microsoft (R) Visual C# Compiler version 4.6.1087.0

The following do not emit the warning:
Microsoft (R) Visual C# Compiler version 1.3.1.60616
Microsoft (R) Visual C# Compiler version 1.3.1.60621
Microsoft (R) Visual C# Compiler version 2.0.0.61205

**Steps to Reproduce**:
1. Create a file to produce the issue (
// CS0429.cs  
public class cs0429   
{  
    public static void Main()   
    {  
        if (false &amp;&amp; myTest())  // CS0429  
        // Try the following line instead:  
        // if (true &amp;&amp; myTest())  
        {  
        }  
        else  
        {  
            int i = 0;  
            i++;  
        }  
    }  
  
    static bool myTest() { return true; }  
}  

2. Build using CSC.exe
csc.exe CS0429.cs

**Expected Behavior**:
I would expect to see the following warning as per previous versions:

CS0429.cs(6,22): warning CS0429: Unreachable expression code detected

**Actual Behavior**:
The warning does not get emitted.</Description>
  </Issue>
  <Issue>
    <IssueID>16139</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Partial interface implementation a.k.a. Traits</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>20/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16139</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I believe C# could benefit from from a feature similar to traits in Scala, or mixins in other languages. This proposal could be a potential implementation for asks in both #73 or #258. The main difference would be in the implementation.

## Benefits

- Reduce boilerplate by enabling the definition of default or universal implementations on interfaces.
- Maintain the DRY rule for code that may make heavy use of common interfaces.

## Syntax
``

This example, while contrived demonstrates a scenario where I've chosen to implement one of the two functions in the interface, For the implementation, I've chosen explicitly to use expression bodied methods as the implementor of the functionality.

**Side Note**: I wonder how much IEquatable code is being copied and pasted between classes in code bases because this feature is missing.</Description>
  </Issue>
  <Issue>
    <IssueID>16138</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>MoveTypeCodeRefactoringProvider does not work on new project system</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>20/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16138</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 2017 RC2

**Steps to Reproduce**:

1.  Create a netstandard project that uses the new project system
2. Change the name of the class to be different from the filename
3.  Invoke MoveTypeCodeRefactoringProvider

**Expected Behavior**:
File is renamed

**Actual Behavior**:
refactoring fails
``</Description>
  </Issue>
  <Issue>
    <IssueID>16137</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to inject "Namespace" to final type comes from CSharpScript ?</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>31/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>16137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16137</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Hi

based on this issue [CS7021: You cannot declare namespace in script code]( I can not have any namespace in my text.

**My goal is convert Text To Type.**

please see code

`

    public class Program
    {
        public static void Main(string[] args)
        {
            var script = @" 
                        using System;
                        //namespace N     I CAN NOT HAVE NAMESPACE HERE BUT I NEED IT INTO RETURNED TYPE !
                        //{
                            public class A
                            {
                                public string B { get; set; }
                            }
                        //}
            ";
            CSharpScriptEngine.Execute(script);
            var typeOfA = (Type)CSharpScriptEngine.Execute("return typeof(A);");

        }
    }

`

but final type (typeOfA) does not have any information about namespace so I want to know Is there any approach for this problem ?

Can I inject namespace info to final Type ?
some codes and extensions take my Types and shows error because **namespace is null** .

I think CodeDom in .NET framework is so better than Roslyn for this scenario because accept namespace, but I use .NET Core and I must use Roslyn unfortunately ! 

Does Roslyn have any solution ?!?!</Description>
  </Issue>
  <Issue>
    <IssueID>16136</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>DustinCampbell</FixedById>
        <IssueID>16136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make IQuickInfoProvider public</Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16136</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>

This would be quite helpful for developers writing IDE-like scenarios (

It would also make it much easier to write extensions that provide Roslyn-aware items in Quick Info

For example:

 - Show coverage information
 - Show recorded values from last test run
 - Show `git blame` for the target symbol
 - Show NuGet info for the target symbol
 - Show platform support or internal corporate compliance rules</Description>
  </Issue>
  <Issue>
    <IssueID>16130</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AnthonyDGreen</FixedById>
        <IssueID>16130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>NameOf(Me) </Title>
    <CreatedDate>29/12/2016</CreatedDate>
    <ClosedDate>22/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>16130</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`NameOf(Me)` should evaluate to the Class / Structure / Module name, it is used in.

``
*Advantage*
Doesn't require reflection. 
Doesn't require repetition of the TypeName</Description>
  </Issue>
  <Issue>
    <IssueID>16129</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>pattern matching with structs causes unnecessary boxing, nullable conversions</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>19/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16129</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;

class C
{
    static void Main()
    {
        if (TrySomething() is ValueTuple&lt;string, bool&gt; v &amp;&amp; v.Item2 == true)
        {
            System.Console.Write(v.Item1 == null);
        }
    }

    static (string Value, bool Success) TrySomething()
    {
        return (null, true);
    }
}


For the Main I'd expect to see an IL equivalent of

C#
    static void Main()
    {
        {
            ValueTuple&lt;string, bool&gt; v = TrySomething();
            if (v.Item2 == true)
            {
                System.Console.Write(v.Item1 == null);
            }
        }
    }


instead I see (decompiled)
C#
    private static void Main()
    {
        ValueTuple&lt;string, bool&gt;? valueTuple = (object)C.TrySomething() as ValueTuple&lt;string, bool&gt;?;
        ValueTuple&lt;string, bool&gt; valueOrDefault = valueTuple.GetValueOrDefault();
        bool flag = valueTuple.HasValue &amp;&amp; valueOrDefault.Item2;
        if (flag)
        {
            Console.Write(valueOrDefault.Item1 == null);
        }
    }
`</Code>
    <Description>``

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>16129</IssueID>
        <PullRequestID>19413</PullRequestID>
        <Title>Fix crash in is operator used with tuples</Title>
        <Description>**Customer scenario**

Certain patterns of erroneous pattern-matching were not previously diagnosed. Specifically, when you match a nullable of one integral type with a declaration pattern of another integral type, there was no error. We introduce this error. This is a breaking change in a scenario related to the recently-released pattern-matching feature, so we would like to take the break as soon as possible so that customers do not rely on being able to write the erroneous code. We do not believe the pattern of code is very likely to arise in practice.

This PR also fixes a crash in the existing `is` operator when used with tuple types.

**Bugs this fixes:**

* Fixes crash in `is` operator used with tuples
Fixes #19310

* Matching an expression of type `byte?` with a pattern of type `int` should not be allowed
Fixes #19151

* Unify subsumption implementations
Fixes #19273

* Greatly improved code gen for value type pattern match
Fixes #16129
Fixes #18944
Fixes #14252

**Workarounds, if any**

N/A

**Risk**

The purpose of the change is to reduce future risk. Also, because we now combine what were previously three separate implementations, we have one third fewer places there could be bugs.

**Performance impact**

None expected, as there are only small changes to the code paths taken during compilation.

**Is this a regression from a previous update?**

No.

**Root cause analysis:**

For the crash, we did not test scenarios involving mixing tuples with the existing `is` operator.

**How was the bug found?**

I found the crash reviewing the existing code while preparing the fix for the other two issues.
</Description>
        <CreatedDate>10/05/2017</CreatedDate>
        <ClosedDate>19/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>16129</IssueID>
            <PullRequestID>19413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Bug</Name>
            <IssueID>16129</IssueID>
            <PullRequestID>19413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>16129</IssueID>
            <PullRequestID>19413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>16129</IssueID>
            <PullRequestID>19413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>16129</IssueID>
            <PullRequestID>19413</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>19413</PullRequestID>
            <IssueID>16129</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>16127</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Block scenario for accessing member of tuple returned from deconstruction</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>29/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16127</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In C#7.0, you could write `var p = ((var x, var y) = M()).Property;` by implementing your own `ValueTuple'2`.
In the future, we may decide that the return type of a deconstruction is a tuple with names (instead of a tuple without names) where the names are inferred.

Depending on the rules for inferring such names, we could break existing code.

FYI @gafter @VSadov @AlekseyTs </Description>
  </Issue>
  <Issue>
    <IssueID>16126</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Investigate if behavioral difference with attributes on lambdas/anonymous methods is intentional.</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16126</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>During  it was discovered that we disallow attributes on anonymous-methods, but we don't disallow them on lambdas.  It's unclear if this divergence is intentional or not.  If so, then this bug can just be closed out.  If it's unintentional, this bug can act as the way to track understanding what we should do.</Description>
  </Issue>
  <Issue>
    <IssueID>16124</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Are MefHostServices thread-safe/reusable in Roslyn 1.3.2?</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>02/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16124</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    internal class CustomWorkspace : Workspace {
        public CustomWorkspace(HostServices host) : base(host, "Custom" /* same as AdHoc */) {
        }

        public override bool CanOpenDocuments =&gt; true;

        public override bool CanApplyChange(ApplyChangesKind feature) {
            return feature == ApplyChangesKind.ChangeDocument;
        }

        public new Solution SetCurrentSolution(Solution solution) {
            return base.SetCurrentSolution(solution);
        }
    }


**Stack Traces**

Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Workspace.get_Options()
   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService..ctor(HostLanguageServices languageServices)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CreateLanguageService(HostLanguageServices provider)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Host.Mef.MefLanguageServices.GetService[TLanguageService]()
   at Microsoft.CodeAnalysis.DocumentState.Create(DocumentInfo info, ParseOptions options, HostLanguageServices language, SolutionServices services)
   at Microsoft.CodeAnalysis.Solution.AddDocument(DocumentId documentId, String name, SourceText text, IEnumerable`1 folders, String filePath, Boolean isGenerated)



Object reference not set to an instance of an object.
   at Microsoft.CodeAnalysis.Options.OptionService..ctor(IEnumerable`1 optionProviders, IEnumerable`1 optionSerializers)
   at lambda_method(Closure , LifetimeContext , CompositionOperation )
   at System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(Int32 sharingId, CompositionOperation operation, CompositeActivator creator)
   at lambda_method(Closure , LifetimeContext , CompositionOperation )
   at System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(Int32 sharingId, CompositionOperation operation, CompositeActivator creator)
   at System.Composition.Hosting.Core.CompositionOperation.Run(LifetimeContext outermostLifetimeContext, CompositeActivator compositionRootActivator)
   at System.Composition.Hosting.Providers.Lazy.LazyWithMetadataExportDescriptorProvider.&lt;&gt;c__DisplayClass5`2.&lt;&gt;c__DisplayClass7.&lt;&gt;c__DisplayClass9.&lt;&gt;c__DisplayClassb.&lt;GetLazyDefinitions&gt;b__4()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.&lt;&gt;c__DisplayClass5_0.&lt;.ctor&gt;b__1()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices.GetService[TWorkspaceService]()
   at Microsoft.CodeAnalysis.Workspace.get_Options()
   at Microsoft.CodeAnalysis.Host.AbstractSyntaxTreeFactoryService..ctor(HostLanguageServices languageServices)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTreeFactoryServiceFactory.CreateLanguageService(HostLanguageServices provider)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at Microsoft.CodeAnalysis.Host.Mef.MefLanguageServices.GetService[TLanguageService]()
   at Microsoft.CodeAnalysis.DocumentState.Create(DocumentInfo info, ParseOptions options, HostLanguageServices language, SolutionServices services)
   at Microsoft.CodeAnalysis.Solution.AddDocument(DocumentId documentId, String name, SourceText text, IEnumerable`1 folders, String filePath, Boolean isGenerated)
`</Code>
    <Description>**Version:** 1.3.2

I'm getting random test failures when creating multiple parallel workspaces over the same instance of `MefHostServices`. Is it a bug, or is parallel use of `MefHostServices` instance unsupported?

**Workspace:**
``</Description>
  </Issue>
  <Issue>
    <IssueID>16122</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Throw expression inside Linq.Expression</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16122</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Enumerable.Range(0, 100).AsQueryable().Select(i =&gt; i &lt; 1000 ? i : throw new Exception())


**Expected Behavior**:
It should translate throw expression into `Expression.Throw(...)` and execute query.

**Actual Behavior**:
In project it says `"csc.exe" exited with code -2146232797.` which is kind of hard to understand. In C# interactive it prints exception:

Unexpected error:
System.InvalidOperationException: Unexpected value 'ThrowExpression' of type 'Microsoft.CodeAnalysis.CSharp.BoundKind'
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitInternal(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.Visit(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitExactType(BoundExpression e)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitConditionalOperator(BoundConditionalOperator node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitInternal(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.Visit(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.TranslateLambdaBody(BoundBlock block)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.VisitLambdaInternal(BoundLambda node)
   at Microsoft.CodeAnalysis.CSharp.ExpressionLambdaRewriter.RewriteLambda(BoundLambda node, TypeCompilationState compilationState, TypeMap typeMap, Int32 recursionDepth, DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteLambdaConversion(BoundLambda node)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitConversion(BoundConversion conversion)
   at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitCall(BoundCall node)
   at Microsoft.CodeAnalysis.CSharp.BoundCall.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitConversion(BoundConversion node)
   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitConversion(BoundConversion conversion)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitConversion(BoundConversion conversion)
   at Microsoft.CodeAnalysis.CSharp.BoundConversion.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32&amp; recursionDepth, BoundExpression node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitReturnStatement(BoundReturnStatement node)
   at Microsoft.CodeAnalysis.CSharp.BoundReturnStatement.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.VisitSequencePoint(BoundSequencePoint node)
   at Microsoft.CodeAnalysis.CSharp.BoundSequencePoint.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RewriteBlock(BoundBlock node, ArrayBuilder`1 prologue, ArrayBuilder`1 newLocals)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.VisitBlock(BoundBlock node)
   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)
   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)
   at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.Rewrite(BoundStatement loweredBody, NamedTypeSymbol thisType, ParameterSymbol thisParameter, MethodSymbol method, Int32 methodOrdinal, MethodSymbol substitutedSourceMethod, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, Boolean assignLocals)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.LowerBodyOrInitializer(MethodSymbol method, Int32 methodOrdinal, BoundStatement body, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState, Boolean instrumentForDynamicAnalysis, DebugDocumentProvider debugDocumentProvider, ImmutableArray`1&amp; dynamicAnalysisSpans, DiagnosticBag diagnostics, VariableSlotAllocator&amp; lazyVariableSlotAllocator, ArrayBuilder`1 lambdaDebugInfoBuilder, ArrayBuilder`1 closureDebugInfoBuilder, StateMachineTypeSymbol&amp; stateMachineTypeOpt)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers&amp; processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.&lt;&gt;c__DisplayClass20_0.&lt;CompileNamedTypeAsTask&gt;b__0()
   at Roslyn.Utilities.UICultureUtilities.&lt;&gt;c__DisplayClass5_0.&lt;WithCurrentUICulture&gt;b__0()
   at System.Threading.Tasks.Task.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()
   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean generateDebugInfo, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.Build[T](Compilation compilation, DiagnosticBag diagnostics, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.ScriptBuilder.CreateExecutor[T](ScriptCompiler compiler, Compilation compilation, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.Script`1.GetExecutor(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Scripting.Script`1.CommonCompile(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.TryCompile(Script previousScript, String code, String path, ScriptOptions options)
   at Microsoft.CodeAnalysis.Interactive.InteractiveHost.Service.&lt;ExecuteAsync&gt;d__30.MoveNext()
`</Code>
    <Description>**Version Used**: 
C#7, VS 2017 RC (Version 15.0.26014.0 D15REL)
**Steps to Reproduce**:

``	
</Description>
  </Issue>
  <Issue>
    <IssueID>16121</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Make the IWaitIndicator service accessible to F# project system</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Won't Fix</Name>
        <IssueID>16121</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: master

Microsoft.CodeAnalysis.Editor.Host.IWaitIndicator should be public, and not just visible to projects that can see internals of EditorFeatures.

Alternatively, please add Microsoft.VisualStudio.FSharp.ProjectSystem to the InternalsVisibleTo for this project (FSharp.Editor is already there).</Description>
  </Issue>
  <Issue>
    <IssueID>16118</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>How to use Roslyn in .Net Core, I can't reference Microsoft.Analysis via NuGet</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>29/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>16118</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:  .Net Standard 1.6

**Steps to Reproduce**:

1.  Reference Microsoft.Analysis via NuGet
2.  Visual Studio 2015 Nuget Package console throw a exception</Description>
  </Issue>
  <Issue>
    <IssueID>16116</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>16116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SelectionValidator tests can't handle C# 7.0 code</Title>
    <CreatedDate>28/12/2016</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16116</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
        public async Task DontCrash()
        {
            await IterateAllAsync(TestResource.AllInOneCSharpCodeVersion6);
        }
`</Code>
    <Description>Specifically the catch all test [DontCrash]( can't handle the TestResource.AllInOneCSharpCode resource string


``

This was missed originally because there were two versions of TestResource.AllInOneCSharpCode:

- TestUtilities Portable: never updated, had only C# 6.0 code
- TestUtilities Desktop: updated to have C# 7.0 code

This suite was referencing the Portable version hence it was missed when we added the new code.  Once I found the duplicate strings and merged them the issue popped up.

The failure seems to be around local functions hence assigning out to @agocke.

@Pilchie for an FYI</Description>
  </Issue>
  <Issue>
    <IssueID>16114</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>16114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Null-Propagation Quick-Fix Suggests Invalid Fix</Title>
    <CreatedDate>27/12/2016</CreatedDate>
    <ClosedDate>05/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16114</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: d15prerel/26022.07

Simple example:

``

The IDE suggests moving `base(a != null ? a.Length : throw new ArgumentNullException(nameof(a)))` to use null propagation as follows: `base(a?.Length)`. This changes behavior, removing the ArgumentNullException, and it also no longer compiles, as `a?.Length` is an `int?`, not an `int`.

/cc @Pilchie @dpoeschl </Description>
  </Issue>
  <Issue>
    <IssueID>16112</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Question: Boxing on stack for function calls</Title>
    <CreatedDate>27/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>16112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16112</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>According to C# documentation boxing is done on heap. What i am wondering about is whether it's a good idea in theory to allocate box on stack in case boxing is done for a function argument. And move that box to heap later only if that box gets referenced from heap. I think it would be a significant optimization for function calls with object-type arguments and the ones with variable number of arguments. Please enlighten me on this matter.</Description>
  </Issue>
  <Issue>
    <IssueID>16110</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Add attributes which run custom functions to and throw compiler errors on fail.</Title>
    <CreatedDate>27/12/2016</CreatedDate>
    <ClosedDate>28/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16110</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Add some way of putting attributes on different classes/enums and run custom functions for validation on compile time.
E.g.

A custom NoDublicatesAttribute could be added to enums to prevent multiple in the enum.
A custom NoImplicitValuesAttribute could be added to enums to only allow explicit value assignment the enum.</Description>
  </Issue>
  <Issue>
    <IssueID>16109</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>vasily-kirichenko</FixedById>
        <IssueID>16109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>SyntacticClassificationTaggerProvider should not block UI thread</Title>
    <CreatedDate>27/12/2016</CreatedDate>
    <ClosedDate>23/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16109</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I experience huge UI freezes as I edit large F# files (~15K lines):

![image](

As I understand, the root cause of this is blocking wait for semantic classification spans here 

Yes, F# can calculate fresh classification for long time (up to 30 seconds and more on huge files), so I believe Roslyn should not block UI thread waiting for data, making the asynchronous API meaningless. 

VS 2017 RC2</Description>
  </Issue>
  <Issue>
    <IssueID>16106</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>16106</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>False error CS0170: Use of possibly unassigned field 'Item1'</Title>
    <CreatedDate>26/12/2016</CreatedDate>
    <ClosedDate>10/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16106</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16106</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16106</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>``</Description>
  </Issue>
  <Issue>
    <IssueID>16103</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Plan and break big in C# 10</Title>
    <CreatedDate>26/12/2016</CreatedDate>
    <ClosedDate>29/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16103</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Version 10 for anything looks significant. As C# 7 has not been released yet, there is still 6+ years left before C# 10. I propose to make C# a greatest modern language ever in version 10, and to serve the purpose, break big. And start planning for this from now onward, so that everybody can be ready for this, when it happens.</Description>
  </Issue>
  <Issue>
    <IssueID>16102</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Rename should report a conflict when renaming Deconstruct</Title>
    <CreatedDate>25/12/2016</CreatedDate>
    <ClosedDate>15/11/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16102</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2017 RC Refresh

_pedantic_ :)

``</Description>
  </Issue>
  <Issue>
    <IssueID>16101</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Missing type argument of generic extension method is not detected</Title>
    <CreatedDate>25/12/2016</CreatedDate>
    <ClosedDate>25/12/2016</ClosedDate>
    <IssueLabels />
    <Code>csharp
namespace RoslynBugTest
{
    class Program
    {
        static void Main(string[] args)
        {
            string works1 = RoslynBugTest.TestStatic&lt;string&gt;();
            string fails1 = RoslynBugTest.TestStatic&lt;&gt;(); // ERROR

            var testClass = new RoslynBugTest();

            string works2 = testClass.TestMethod&lt;string&gt;();
            string fails2 = testClass.TestMethod&lt;&gt;(); // ERROR

            string works3 = testClass.TestExtensionMethod&lt;string&gt;();
            string shouldFail = testClass.TestExtensionMethod&lt;&gt;(); // NO ERROR
        }
    }

    class RoslynBugTest
    {
        public static T TestStatic&lt;T&gt;() =&gt; default(T);
        public T TestMethod&lt;T&gt;() =&gt; default(T);
    }

    static class RoslynBugTestExtensions
    {
        public static T TestExtensionMethod&lt;T&gt;(this RoslynBugTest r) =&gt; default(T);
    }
}
`</Code>
    <Description>**Version Used**: 
VS2015 Update 3

**Steps to Reproduce**:

1. Quick console application code to reproduce the error:
``
2. Observe that VS does not show any error for shouldFail3
3. Compile the code while commenting out the declaration/assignments of fails1 and fails2

**Expected Behavior**:
Squiggly red line and the following error message:
`CS0305: Using the generic method group 'TestExtensionMethod' requires 1 type arguments`

**Actual Behavior**:
No message, squiggly line or anything in VS while coding, generic error while compiling (when fails1 and fails2 are commented out):
`CS7038: Failed to emit module 'RoslynBugTest'.`
No hints as to which file/line/code failed to compile.</Description>
  </Issue>
  <Issue>
    <IssueID>16100</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>A tooltip bug or just a decision?</Title>
    <CreatedDate>25/12/2016</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16100</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: Visual Studio 15

In the following code:
``
The method `Write` is implemented whereas `Delete` isn't so I get two errors.

1. Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1662	Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type	Gogo	D:\Projects\Gogo\src\Gogo\Program.cs	13	Active

2. Severity	Code	Description	Project	File	Line	Suppression State
Error	CS1061	'ConsoleContext' does not contain a definition for 'Delete' and no extension method 'Delete' accepting a first argument of type 'ConsoleContext' could be found (are you missing a using directive or an assembly reference?)	Gogo	D:\Projects\Gogo\src\Gogo\Program.cs	17	Active

Now, when I hover over the `Write` methods the tooltip shows only the first error and only when I hover the `Delete` method it shows both but the quick action to generate the method showing up regardless to the position of the cursor as long as it's inside the red squiggles area.

I don't know but it _seems_ like the tooltip shows errors that are relevant to a specific context but in addition it might make sense to show/include the last error everywhere regardless to context.</Description>
  </Issue>
  <Issue>
    <IssueID>16099</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>No warning for identity pattern-matching comparison </Title>
    <CreatedDate>25/12/2016</CreatedDate>
    <ClosedDate>11/04/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Feature - Warning Waves</Name>
        <IssueID>16099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16099</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: a2df65047264ed08fb3a985056085dbcee821253

``

**Expected Behavior**:
Warning: "The given expression is always / never equal to the provided value", just like `is` would when used with types.

**Actual Behavior**:
No warnings

</Description>
  </Issue>
  <Issue>
    <IssueID>16098</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>extern local functions make the parser prematurely leave method scope</Title>
    <CreatedDate>25/12/2016</CreatedDate>
    <ClosedDate>26/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-Diagnostic Clarity</Name>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>16098</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: a2df65047264ed08fb3a985056085dbcee821253

``

**Expected**: 
(currently-non-existent) error "Local functions cannot be 'extern'".

**Actual**:
A whole bunch of syntax &amp; semantic errors from the rest of the file, because the parser assumes a missing `}` before the `extern` keyword:

&gt; 
&gt; (1,20,1,20): error CS1513: } expected
&gt; (3,8,3,14): error CS1519: Invalid token 'return' in class, struct, or interface member declaration
&gt; (5,0,5,1): error CS1022: Type or namespace definition, or end-of-file expected
&gt; (1,15,1,16): error CS0161: 'C.M()': not all code paths return a value

</Description>
  </Issue>
  <Issue>
    <IssueID>16095</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Proposal] primitive struct as primitive</Title>
    <CreatedDate>24/12/2016</CreatedDate>
    <ClosedDate>19/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16095</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Primitive type such as `string` and `int` have a special ability. Such as make it `const`, use it on default parameter (because it is const), or make it a base class of enum (actually it only for integer but that also included in this proposal)

I think it useful if we could have struct that contain only primitive things also being primitive. And if it contains only integer it should also be integer. So struct that which is primitive can be `const` field. Can be set default parameter. And if it is integer struct it would be able to make enum from it

``

This should also cope with Tuple and other generic struct. If its generic contains only primitive it would became primitive</Description>
  </Issue>
  <Issue>
    <IssueID>16094</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>16094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Local function - Error "csc.exe" exited with code -2146232797</Title>
    <CreatedDate>24/12/2016</CreatedDate>
    <ClosedDate>25/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>16094</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
// Error "csc.exe" exited with code -2146232797.	
internal static int BinarySearch&lt;T&gt;(IList&lt;T&gt; source, T value, IComparer&lt;T&gt; comparer = null)
{
    int LocalBinarySearch&lt;T2&gt;(
        IList&lt;T2&gt; localSource, T2 localValue, IComparer&lt;T2&gt; localComparer, int startIndex, int endIndex)
    {
        if (startIndex &gt; endIndex)
        {
            return -1;
        }
        int middleIndex = startIndex + (endIndex - startIndex) / 2; 
        int compare = localComparer.Compare(localSource[middleIndex], localValue);
        if (compare == 0)
        {
            return middleIndex;
        }
        return compare &gt; 0
            ? LocalBinarySearch&lt;T2&gt;(localSource, localValue, localComparer, startIndex, middleIndex - 1)
            : LocalBinarySearch&lt;T2&gt;(localSource, localValue, localComparer, middleIndex + 1, endIndex);
    }
    return LocalBinarySearch(source, value, comparer ?? Comparer&lt;T&gt;.Default, 0, source.Count - 1);
}


**Expected Behavior**: Compile

**Actual Behavior**: Error "csc.exe" exited with code -2146232797.

Removing the local function's type parameter, it compiles:

internal static int BinarySearch2&lt;T&gt;(IList&lt;T&gt; source, T value, IComparer&lt;T&gt; comparer = null)
{
    int LocalBinarySearch( // No type parameter, works.
        int startIndex, int endIndex)
    {
        if (startIndex &gt; endIndex)
        {
            return -1;
        }
        int middleIndex = startIndex + (endIndex - startIndex) / 2; 
        int compare = comparer.Compare(source[middleIndex], value);
        if (compare == 0)
        {
            return middleIndex;
        }
        return compare &gt; 0
            ? LocalBinarySearch(startIndex, middleIndex - 1)
            : LocalBinarySearch(middleIndex + 1, endIndex);
    }

    comparer = comparer ?? Comparer&lt;T&gt;.Default;
    return LocalBinarySearch(0, source.Count - 1);
}


Or, removing the recursion, it compiles:

internal static int BinarySearch3&lt;T&gt;(IList&lt;T&gt; source, T value, IComparer&lt;T&gt; comparer = null)
{
    int LocalBinarySearch&lt;T2&gt;(
        IList&lt;T2&gt; localSource, T2 localValue, IComparer&lt;T2&gt; localComparer, int startIndex, int endIndex)
    {
        if (startIndex &gt; endIndex)
        {
            return -1;
        }
        int middleIndex = startIndex + (endIndex - startIndex) / 2;
        int compare = localComparer.Compare(localSource[middleIndex], localValue);
        if (compare == 0)
        {
            return middleIndex;
        }
        return 0; // Has type parameter but no recursion, works.
    }
    return LocalBinarySearch(source, value, comparer ?? Comparer&lt;T&gt;.Default, 0, source.Count - 1);
}
`</Code>
    <Description>**Version Used**: VS 2017 RC, 15.0.26014.0

**Steps to Reproduce**:

In a .NET or .NET Core console application
``

</Description>
  </Issue>
  <Issue>
    <IssueID>16093</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>[Yet another] Try...catch - proposal: Drop "{" and "}" in one-liners</Title>
    <CreatedDate>24/12/2016</CreatedDate>
    <ClosedDate>05/08/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16093</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I know that we had a lot of `try`...`catch`-proposals during the last weeks, but here is the only proposal I have to make about this subject:

Please allow to omit the brackets `{` and `}` in `try`/`catch`/`finally`-blocks, if the block contains a single expression:
``

I personally find it irksome, if one has to type `{` and `}` explicitly for simple expressions as in the example above.
Allowing this new syntax would also be consistent with any other 'block-type expression' (dunno what they are officially called) like `if`, `else`, `for`, `foreach`, `do`, `while`, `fixed`, `using`, etc.
I also believe that this proposal should not take a very huge effort/workload to implement, as we have such analyzation methods already implemented in the syntax parser.

related: 

&lt;hr/&gt;

_And of course, merry Christmas to everyone!!_</Description>
  </Issue>
  <Issue>
    <IssueID>16090</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>fixed synthax in interactive host C# Make Crash Visual Studio</Title>
    <CreatedDate>23/12/2016</CreatedDate>
    <ClosedDate>16/06/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>16090</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**:
Interactive Shell On Microsoft Visual Studio 2015 Version: 14.0.25123.00 Update 2

**Steps to Reproduce**:
1. Open Visual Studio
2. View -&gt; Interactive Shell C#
3. Digit fixed{}

**Actual Behavior**:
CRASH

Happy Christmas
</Description>
  </Issue>
  <Issue>
    <IssueID>16089</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Please allow non-public members to implicitly implement non-public interfaces</Title>
    <CreatedDate>23/12/2016</CreatedDate>
    <ClosedDate>21/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16089</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
internal interface I
{
  void M();
}

public class C : I
{
  protected internal virtual void M() {}
}
`</Code>
    <Description>``
In other words, `M` must not be less accessible than `I` rather than required to be public.

Currently the workaround is to explicitly implement `I ` to delegate corresponding non-public members.

Q: Should the accessibility of `C` also be taken into account?</Description>
  </Issue>
  <Issue>
    <IssueID>16086</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>16086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Fix all" does nothing sometimes and crashes</Title>
    <CreatedDate>23/12/2016</CreatedDate>
    <ClosedDate>02/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16086</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a branch from  - this is a case where Fix All just doesn't run (this is after I have the fix for  . I don't have a 100% repro on this, but it occurs after running a few fixes, here's a video to show I'm not crazy:



Note, this time it crashed, which I've never seen before - the stack was:

``


</Description>
  </Issue>
  <Issue>
    <IssueID>16083</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>Pilchie</FixedById>
        <IssueID>16083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Get told that Roslyn is going to remove references when running a Code Fix</Title>
    <CreatedDate>23/12/2016</CreatedDate>
    <ClosedDate>03/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16083</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>This is a timing thing that I've seen a few times, if I run a code fix *before* the solution has finished loading (I believe that's related), I see the following:

![image](

There's not a 100% repro here, so play around with the ProjectSystem solution.</Description>
  </Issue>
  <Issue>
    <IssueID>16077</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Extended lightweight dynamic</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>04/05/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>16077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16077</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var r = obj.$Property;
var r = obj.TryGetProperty("Property");

var r = obj.$Method()
var r = obj.TryInvokeMember("Method", Array.Empty&lt;Argument&gt;());

var r = obj.$Method(arg: 1)
var r = obj.TryInvokeMember("Method", new[] { new Argument(name: "arg", value: 1) });

var r = obj.$[1];
var r = obj.TryGetIndexer(...);


`TryInvoke`, `TryGetIndexer`, etc could be convention based and not depend on a base class or interface.

This would be a lightweight compile-time alternative to `System.Dynamic.DynamicObject`.

Note: first use case could prefer an indexer as proposed in #3555 to be more useful with existing types.

If you just want a dynamic argument list:
cs
var r = obj.Method$(arg: 1)
var r = obj.Method(new [] { new Argument(name: "arg", value: 1) })
`</Code>
    <Description>Extend "lightweight dynamic" (#3555) with method invocations, etc.

``
Alternatively you could use #6949, e.g `obj.M({ "arg": value });`.</Description>
  </Issue>
  <Issue>
    <IssueID>16074</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: default interface method implementation</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-VB</Name>
        <IssueID>16074</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>vbnet
&lt;Extension&gt;
Public Function DefaultMethodExample(of T As InterfaceType)(x As T) As .....

' Overrides for a specifc interface implentation class
' Where T2 is a type which implement the interface InterfaceType
&lt;Extension&gt;
Public Function DefaultMethodExample(Of T As T2)(x As T) .......


Or using an abstract class is also works, but the problem is that the abstract class just not allow multiple inherits and the extension method is not so Convenient. So i think this java language feature can be introduce into VB/C#.

This default interface method is useful for some common operations of an interface type, and can save a lot of time from the duplicate coding for this job.

For example, in visualbasic define for the default interface method implementation in Interface with VB ``Default`` keyword:

vbnet
Public Interface IExample(Of T)

Default ReadOnly Property Value(key$) As String
    Get
        Dim s As New Value(Of String)
        Return If("" = (s = GetData(key$)), s, Provider(NameOf(IExample(Of ).Provider &amp; key$)).ToString)
    End Get
End Property

Default Function GetData As NameValueCollection
    Return New NameValueCollection
End Function

Function Provider As Dictionary(Of String, T)

End Interface


Were in this interface its implentation type, can overrides the default method with ``Overloads`` keyword:

vbnet
Public Class T2
Implements IExample(Of String)

Public Overloads Function GetData As NameValueCollection Implements IExample(Of String).GetData
' blablabla
End Function

Public Function Provider As Dictionary(Of String, String) Implements IExample(Of String).Provider
' blablabla
End Function
End Class
`</Code>
    <Description>Hi, currently the interface definition in .NET just allow define a set of method declaration template, and not allow includes any implentation details. But the java language it does, the interface define in java can includes some default method implentation, and I thinks this feature can introduce in the .NET language too.

**Actually, the interface with default method implentation in java language can be simulated in .NET language by using extension method of the interface type or abstract class**

For example, using the extension method for this simulation:

``</Description>
  </Issue>
  <Issue>
    <IssueID>16072</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: try ... expressions</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>04/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16072</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code> csharp
var result = try ExceptionThrowingMethod() else throw; // To rethrow the exception
var result = try ExceptionThrowingMethod() else return; // To return from a void returning method
var result = try ExceptionThrowingMethod() else return 0; // To return from a method returning other types
var result = try ExceptionThrowingMethod() else new Object(); // To carry on with a default value
var result = try ExceptionThrowingMethod() else 0; // To carry on with 0 as a default value


And a `try` expression without `else` is just adding ` else null` with the expression as default. That means-

 csharp
var result = try ExceptionThrowingMethod();

is actually just,
 csharp
var result = try ExceptionThrowingMethod() else null;
`</Code>
    <Description>Sometimes developers do not want to look at the detail type and detail information of an exception. They would just want to rethrow or return or carry on with a default value, when any exception has occurred. In those case, the `try .. else ...` expression can be handy:

``

This feature may not be very good on its own. But along with proposed null checking in the C# 8, this can be handy. The `try ... else ...` syntax is actually borrowed from "[The Error Model]( blog from Joe Duffy, though was used in a fundamentally different(and more precise) error/exception handling model. This also depends on `return` expression proposed in #14239.</Description>
  </Issue>
  <Issue>
    <IssueID>16070</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Slightly smarter intellisense?</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>23/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16070</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, in Visual Studio 15 RC when you're in a given position and the results form an _invalid_ code it might make sense to add an option to filter it out from the intellisense.

Here is an example:
``
So the moment I type `ICan` I should no longer get either of these interfaces that were listed on the type unless I type ICanW... where in this case I expect to see `ICanWrite` again but this can be debated as it might confuse people although I don't think so.

_This suggestion might be applicable to more places._

</Description>
  </Issue>
  <Issue>
    <IssueID>16069</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>16069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Typing dot after method group incorrectly shows IntelliSense</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>25/07/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Pedantic ;)</Name>
        <IssueID>16069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16069</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2017 RC Refresh

``

Typing either `.` in this code will open IntelliSense, even though no identifier can go there.

_pedantic_</Description>
  </Issue>
  <Issue>
    <IssueID>16068</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>16068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler: Hard crash when deconstructing single-valued tuple</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>23/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>16068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>16068</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>C#
var (x) = ValueTuple.Create(1);


The compiler crashes [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Symbols/Tuples/TupleTypeSymbol.cs,87) because single-valued tuples aren't supposed to exist.

Even worse, typing the last `)` into VS will CTD the entire IDE 💥 

	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Symbols.TupleTypeSymbol.Create(Microsoft.CodeAnalysis.Location locationOpt, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol&gt; elementTypes, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; elementLocations, System.Collections.Immutable.ImmutableArray&lt;string&gt; elementNames, Microsoft.CodeAnalysis.CSharp.CSharpCompilation compilation, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.MakeDeconstructionConstructionStep(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder&gt; constructionInputs)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.DeconstructOrAssignOutputs(Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep deconstructionStep, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; variables, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep&gt; deconstructionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; conversionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; assignmentSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionConstructionStep&gt; constructionStepsOpt)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.DeconstructIntoSteps(Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder targetPlaceholder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; variables, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionDeconstructStep&gt; deconstructionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; conversionSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionAssignmentStep&gt; assignmentSteps, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.BoundDeconstructionConstructionStep&gt; constructionStepsOpt)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionAssignment(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right, Microsoft.CodeAnalysis.ArrayBuilder&lt;Microsoft.CodeAnalysis.CSharp.Binder.DeconstructionVariable&gt; checkedVariables, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, Microsoft.CodeAnalysis.CSharp.BoundDeconstructValuePlaceholder rhsPlaceholder)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstruction(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindAssignment(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics, bool invoked, bool indexed)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax syntax, bool allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
 	Microsoft.CodeAnalysis.CSharp.dll!Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)	Unknown
`</Code>
    <Description>**Version Used**: 	a2df65047264ed08fb3a985056085dbcee821253

``

</Description>
  </Issue>
  <Issue>
    <IssueID>16067</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>XML crefs don't impact usings</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>22/12/2016</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 
4.6.1 on VS 2015 (Update 3)

**Steps to Reproduce**:

1. Add unqualified cref in XML documentation not used elsewhere in the class.
2. Add a using for the cref.

``

**Expected Behavior**:
The "using System" should be flagged as used, since ArgumentNullException references it.

**Actual Behavior**:
The "using System" is greyed out and will be removed in a Remove and Sort Usings operation.</Description>
  </Issue>
  <Issue>
    <IssueID>16066</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Pattern matching crashes if lambda captures pattern variable</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>16066</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Microsoft Visual Studio Enterprise 2017 RC
Version 15.0.26014.0 D15REL
Microsoft .NET Framework
Version 4.6.01055

**Steps to Reproduce**:
Run the following app:

``
**Expected Behavior**:
App just runs, no output.

**Actual Behavior**:
Null-reference on the switch statement, when trying to initialize not created instance of a hidden class &lt;&gt;c__DisplayClass27_0 CS$&lt;&gt;8__locals0;

Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
   at ConsoleApp2017.Program.Main(String[] args) in D:\Temp\ConsoleApp2017\ConsoleApp2017\Program.cs:line 16
</Description>
  </Issue>
  <Issue>
    <IssueID>16065</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>heejaechang</FixedById>
        <IssueID>16065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>AssertIsForeground fired in VisualStudioProjectTracker.RegisterWorkspaceHost from ServiceHubRemoteHostClient</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>06/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>16065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16065</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Latest Roslyn bits on top of VS2017 RC.2

**Steps to Reproduce**:

1. Build latest Roslyn bits into RoslynDev hive
2. devenv /rootsuffix RoslynDev
3. Attach another VS debugger instance to the started VS
4. Create a managed project

**Actual Behavior**: Following foreground thread assert fired:
``

This seems like a fallout of </Description>
  </Issue>
  <Issue>
    <IssueID>16064</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Optional methods</Title>
    <CreatedDate>22/12/2016</CreatedDate>
    <ClosedDate>26/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16064</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
abstract class Base
{    
    public virtual Task Method1Async() =&gt; Task.CompletedTask;
    public virtual Task Method2Async() =&gt; Task.CompletedTask;
    public virtual Task Method3Async() =&gt; Task.CompletedTask;
}

Base obj = new Derived();
await obj.Method1Async();
await obj.Method2Async();
await obj.Method3Async();

If we don't want to bother to call these methods if they weren't overridden, we should use interfaces, 
cs
class C : IMethod1Async, IMethod2Async, IMethod3Async
{    
    Task IMethod1Async.Method1Async() { .. }
    Task IMethod2Async.Method2Async() { .. }
    Task IMethod3Async.Method3Async() { .. }
}

var obj = new C();
await (obj as IMethod1Async)?.Method1Async();
await (obj as IMethod2Async)?.Method2Async();
await (obj as IMethod3Async)?.Method3Async();

Note that this won't work as `await` currently throws on null (#7171). So it'll be more verbose in practice.
cs
Base obj = new Derived();
if (obj is IMethod1Async m1) await m1.Method1Async();
if (obj is IMethod2Async m2) await m2.Method2Async();
if (obj is IMethod3Async m3) await m3.Method3Async();

Swift has a concept of "optional methods" that may or may not be implemented in derived classes, e.g.
cs
abstract class Base
{    
    public virtual Task Method1Async();
    public virtual Task Method2Async();
    public virtual Task Method3Async();
}

Base obj = new Derived();
await obj.Method1Async?();
await obj.Method2Async?();
await obj.Method3Async?();
`</Code>
    <Description>Assume that we have the following base class with some virtual methods for derived classes to override.
``

Note: This is only possible in Swift's protocols. So in C# it may or may not be suitable in class declarations.

Task is just an example here, in any case if our virtual method is not empty, we should use similar patterns. I'd welcome any other solution for this specific problem that doesn't need any language change.</Description>
  </Issue>
  <Issue>
    <IssueID>16060</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>16060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>XML documentation does not offer framework types in autocomplete list</Title>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>12/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16060</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.0.0.61213

**Steps to Reproduce**:

In a XML comment, type `&lt;see cref="UInt32`

**Expected Behavior**: `UInt32` to be in the autocomplete list.

**Actual Behavior**: Only `uint` in the list.
</Description>
  </Issue>
  <Issue>
    <IssueID>16059</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Predefined type preference for XML documentation</Title>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>04/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>16059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>16059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Answered</Name>
        <IssueID>16059</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2.0.0.61213

By which predefined type preference setting is `&lt;see cref="UInt32" /&gt;` judged? Either way, I think there should be a separate setting for usage in XML comments.</Description>
  </Issue>
  <Issue>
    <IssueID>16051</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>16051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Should Inner Classes show up in the BaseList?</Title>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>18/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>16051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Blocked</Name>
        <IssueID>16051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>16051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Concept-API</Name>
        <IssueID>16051</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Should a nested class (inner class) show up in the outer class' ClassDeclaration's BaseList?

**Version Used**:  Nuget 1.2.0.0, DLL 1.2.1

**Steps to Reproduce**:
Suppose I have this Outer class with a nested Inner class
``

**Expected Behavior**:

Outer 's BaseList contains SomeBaseClass and ISomeInterface

**Actual Behavior**:
Outer 's BaseList contains SomeBaseClass, ISomeInterface and Inner
</Description>
  </Issue>
  <Issue>
    <IssueID>16049</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Lenient Checked exceptions with warnings, without type</Title>
    <CreatedDate>21/12/2016</CreatedDate>
    <ClosedDate>04/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>16049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Discussion</Name>
        <IssueID>16049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>16049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>16049</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Although, checked exception was intentionally left out while designing C# and .net, can this be implemented now in a non-breaking way? I propose to-

- Follow proposed strict null checking and warn instead of raising error if declared exception not handled.
- Follow Midori and add only `throws` with the method signature instead of adding full type of the exception.

And, all about error handling, specially pros and cons of different error handling models has been discussed by Joe Duffy in this blog post-   
</Description>
  </Issue>
  <Issue>
    <IssueID>15619</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Extend Out Variable support to LINQ</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>08/01/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>1 - Planning</Name>
        <IssueID>15619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>15619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>15619</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Consider this case for out variable use:

``

This won't work due to how "out int" is transformed -- it is scoped to the delegate passed to `Where()`. Out variables should be extended for more natural LINQ integration.</Description>
  </Issue>
  <Issue>
    <IssueID>15614</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>VSadov</FixedById>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler produces unverified code for ref returns</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>16/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Ref Locals and Returns</Name>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>15614</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
        [Fact]
        void InvokeVarForLvalueInParens()
        {
            var source = @"
class Program
{
    public static void Main()
    {
        (var(x, y)) = 10;
        System.Console.WriteLine(z);
    }
    static int x = 1, y = 2, z = 3;
    static ref int var(int x, int y)
    {
        return ref z;
    }
}";
            var compilation = CreateCompilationWithMscorlib(source, references: new[] { ValueTupleRef, SystemRuntimeFacadeRef }, options: TestOptions.DebugExe);
            compilation.VerifyDiagnostics();
            CompileAndVerify(compilation, expectedOutput: "10");
        }


with

none
------ Test started: Assembly: Roslyn.Compilers.CSharp.Emit.UnitTests.dll ------

Unknown .NET Framework Version: v4.6
Test 'Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.InvokeVarForLvalueInParens' failed: Microsoft.CodeAnalysis.Test.Utilities.PeVerifyException : 
PeVerify failed for assembly 'C:\Users\ngafter\AppData\Local\Temp\':
[ : Program::var1][mdToken=0x6000002][offset 0x0000000A] Return type is ByRef, TypedReference, ArgHandle, or ArgIterator.


	at Microsoft.CodeAnalysis.Test.Utilities.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
	at Microsoft.CodeAnalysis.Test.Utilities.RuntimeAssemblyManager.PeVerifyModules(String[] modulesToVerify, Boolean throwOnError)
	at Microsoft.CodeAnalysis.Test.Utilities.HostedRuntimeEnvironment.PeVerify()
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompilationVerifier.Emit(String expectedOutput, IEnumerable`1 manifestResources, EmitOptions emitOptions, Boolean peVerify, SignatureDescription[] expectedSignatures)
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Compilation compilation, IEnumerable`1 dependencies, IEnumerable`1 manifestResources, SignatureDescription[] expectedSignatures, String expectedOutput, Action`1 assemblyValidator, Action`1 symbolValidator, EmitOptions emitOptions, Boolean verify)
	at Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 assemblyValidator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, EmitOptions emitOptions, Boolean verify)
	at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CompileAndVerify(Compilation compilation, IEnumerable`1 manifestResources, IEnumerable`1 dependencies, Action`1 sourceSymbolValidator, Action`1 validator, Action`1 symbolValidator, SignatureDescription[] expectedSignatures, String expectedOutput, Boolean verify)
	CodeGen\CodeGenDeconstructTests.cs(5802,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.CodeGen.CodeGenDeconstructTests.InvokeVarForLvalueInParens()

0 passed, 1 failed, 0 skipped, took 3.15 seconds (xUnit.net 2.1.0 build 3179).
`</Code>
    <Description>This test fails:

``

We probably need to test a similar consumption scenario for VB.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15614</IssueID>
        <PullRequestID>15548</PullRequestID>
        <Title>Combine deconstruction assignment and declaration, and support discards.</Title>
        <Description>- Combine deconstruction assignment and declaration, and support discards.
- Because tuples may contain declarations, adjust lambda disambiguation
  and adjust parsing of argument lists.
- Diagnose tuple element names on the left of a deconstruction.
- Add relational operators to disambiguating tokens in 7.5.4.2
- Remove `BoundVoid`

~~Fixes #15548 
Fixes #15549~~

Update (from jcouv): the bug numbers seem wrong. I think the correct ones were #14794
 and #14832

/cc @jcouv @AlekseyTs @VSadov @dotnet/roslyn-compiler </Description>
        <CreatedDate>27/11/2016</CreatedDate>
        <ClosedDate>12/12/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>4 - In Review</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15614</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>15548</PullRequestID>
            <IssueID>15614</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15612</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Roslyn workspace should send notifications when it has completed the loading of all ....</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15612</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>projects in Light Weight solution load mode. Else LUT does not know that all projects are loaded and we show uncovered glyphs.
</Description>
  </Issue>
  <Issue>
    <IssueID>15610</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Proposal: Access to "this" in field initializers in C#</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>22/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>0 - Backlog</Name>
        <IssueID>15610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>15610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>15610</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
public class MyGraph
{
   public class Node
   {
        public Node(MyGraph parent)
        { ...}
   }

   public Node Root {get;} = new Node(this);
}

This makes constructor a "semantic bottleneck" and trashes it up with some unrelated pieces of code that should be there near those fields declaration.


Foreseeing the question about the order of field initializers execution and how to know which fields of "this" are already initialized and can be used to see what to expect being initialized. Here is an example that demonstrates situation:


public class MyClass
{
     DbConnection connection = new DbConnection();
     string[] Names {get;} = this.connection.LoadNames();  //assumes "connection" to be initialized
}


I see 2 approaches:
a) Developer friendly way (Preferable): Execute initializers following the field declaration order. So if "connection" declared before "Names", then during "Names" initialization, connection is available. People can ask what to do in case of partial classes. I would suggest: in case of partial class initializers execution order matches the order of filenames, because that's how compiler will join those files.

//file1.cs
partial class MyClass
{
     string[] Names3 {get;} = this.connection.LoadNames();  //NullReference
}

//file2.cs
public partial class MyClass
{
     string[] Names {get;} = this.connection.LoadNames();  //NullReference
     DbConnection connection = new DbConnection();
     string[] Names2 {get;} = this.connection.LoadNames();  //Success
}

//file3.cs
partial class MyClass
{
     string[] Names4 {get;} = this.connection.LoadNames();  //Success
}


b) Simple, but hostile way: even though field initializers were executed and values calculated - compiler can just keep fields unassigned until all initializers executed, right before execution of constructor. This would be suckier than the option "a", but at least  we'll have link to "this" assigned and can do the workaround using Lazy:

public class MyClass
{
     DbConnection connection = new DbConnection();
     Lazy&lt;string&gt; Names {get;} = new Lazy&lt;string&gt;(()=&gt;this.connection.LoadNames());
}
`</Code>
    <Description>Problem: In many cases we developers still have to use constructor to initialize values, just because we don't have access to "this" in field initializers. Example of expected behavior:

``
Regardless of the approach, having any of those two options would be better than having none, and having to trash up the constructor.

This is definitely doable just on compiler level (no changes to CLR required) and it also does not break existing code, because now devs cannot use "this", all initializers are basically static methods code.</Description>
  </Issue>
  <Issue>
    <IssueID>15609</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>ObjectDisposedException invoking Find All References</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15609</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
   at System.Threading.SemaphoreSlim.CheckDispose()
   at System.Threading.SemaphoreSlim.Release(Int32 releaseCount)
   at StreamJsonRpc.DelimitedMessageHandler.&lt;WriteAsync&gt;d__23.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at StreamJsonRpc.JsonRpc.&lt;InvokeCoreAsync&gt;d__56`1.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcSession.&lt;InitializeAsync&gt;d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcSession.&lt;CreateAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.&lt;CreateServiceSessionAsync&gt;d__7.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Remote.RemoteHostClient.&lt;CreateServiceSessionAsync&gt;d__6.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioDiagnosticAnalyzerExecutor.&lt;AnalyzeOutOfProcAsync&gt;d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioDiagnosticAnalyzerExecutor.&lt;AnalyzeAsync&gt;d__4.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.&lt;AnalyzeAsync&gt;d__19.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer.Executor.&lt;ComputeDiagnosticsAsync&gt;d__6.MoveNext()
`</Code>
    <Description>Open Roslyn.sln, go to  SymbolCompletionItem.cs and invoke FAR on the first overload of `Create` (at the top of the file). Then invoke FAR on the second overload of `Create` (second method in the file).

Expected: FAR succeeds.
Actual: VS crashes with ObjectDisposedException:
Dump at `\\mlangfs1\public\rchande\farcrash.dmp`
This on the RC build we gave to MVPs.
``
</Description>
  </Issue>
  <Issue>
    <IssueID>15604</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Add tests for declarations appearing in a nameof argument</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>04/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>15604</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Since it is *possible* to write a general expression inside of a `nameof()`, such as an expression `(int x, int y)`, `(M(out var x), var (y, z) = e)` etc which are tuple expressions containing declaration expressions, we may want the SemanticModel to work for these declaration expressions and their types, etc. I do not believe we have SemanticModel support for such expressions today, or tests for these scenarios.</Description>
  </Issue>
  <Issue>
    <IssueID>15603</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mattwar</FixedById>
        <IssueID>15603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Make AdHoc workspaces load without having to install other packages Microsoft.CodeAnalysis.Elfie and Esent.Interop</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15603</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
at System.Reflection.RuntimeAssembly.get_DefinedTypes()
at System.Composition.Hosting.ContainerConfiguration.&lt;WithAssemblies&gt;b__0(Assembly a)
at System.Linq.Enumerable.&lt;SelectManyIterator&gt;d__16`2.MoveNext()
at System.Composition.TypedParts.TypedPartExportDescriptorProvider..ctor(IEnumerable`1 types, AttributedModelProvider attributeContext)
at System.Composition.Hosting.ContainerConfiguration.CreateContainer()
at Microsoft.CodeAnalysis.Host.Mef.MefHostServices.Create(IEnumerable`1 assemblies)
at Microsoft.CodeAnalysis.Host.Mef.DesktopMefHostServices.get_DefaultServices()


the offending loads show up in fusion log:


Assembly manager loaded from:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\clr.dll
Running under executable  ....
--- A detailed error log follows. 

=== Pre-bind state information ===
LOG: DisplayName = Microsoft.CodeAnalysis.Elfie, Version=0.10.6.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
 (Fully-specified)
LOG: Appbase = file:///....
LOG: Initial PrivatePath = NULL
Calling assembly : Microsoft.CodeAnalysis.Workspaces.Desktop, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.

=== Pre-bind state information ===
LOG: DisplayName = Esent.Interop, Version=1.9.4.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
 (Fully-specified)
LOG: Appbase = file:///....
LOG: Initial PrivatePath = NULL
Calling assembly : Microsoft.CodeAnalysis.Workspaces.Desktop, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.


**Workaround**:

Create container configuration with parts that actually load, [e.g.](https://github.com/StackExchange/StackExchange.Precompilation/blob/dev/roslyn-v2/StackExchange.Precompilation.Build/Compilation.cs#L143):


var parts = new List&lt;Type&gt;();
foreach (var a in assemblies)
{
    try
    {
        parts.AddRange(Assembly.Load(a).GetTypes());
    }
    catch (ReflectionTypeLoadException thatsWhyWeCantHaveNiceThings)
    {
        parts.AddRange(thatsWhyWeCantHaveNiceThings.Types);
    }
}
parts.RemoveAll(x =&gt; x == null);

var container = new ContainerConfiguration().WithParts(parts).CreateContainer();
var host = MefHostServices.Create(container);
var workspace = new AdhocWorkspace(host);
`</Code>
    <Description>**Version Used**: 
Roslyn - 2.0.0-rc
Composition 1.0.27

**Steps to Reproduce**:

1. Create new project
2. Install-Package Microsoft.CodeAnalysis.CSharp.Workspaces -Version 2.0.0-rc 
3. call `new AdhocWorkspace(DesktopMefHostServices.DefaultServices);`

**Expected Behavior**:
The Workspace gets created with successfully loaded MEF parts from available assemblies.

**Actual Behavior**:

The WithAssemblies call [expects all]( the exported types to [load successfully]( even those that require `Microsoft.CodeAnalysis.Elfie` and `Esent.Interop`, so we get this exception:

``



</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15603</IssueID>
        <PullRequestID>15870</PullRequestID>
        <Title>Updating the Workspaces.Common nuspec to explicitly partition the des…</Title>
        <Description>FYI. @jasonmalinowski, @Pilchie, @CyrusNajmabadi 

This was broken with  and  when `ManagedEsent` and `Microsoft.CodeAnalysis.Elfie` were added to the nuspec as dependencies.

They should have only been added to the list of desktop dependencies.</Description>
        <CreatedDate>13/12/2016</CreatedDate>
        <ClosedDate>13/12/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15603</IssueID>
            <PullRequestID>15870</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15603</IssueID>
        <PullRequestID>19109</PullRequestID>
        <Title>Move Roslyn to new SDK and Project System</Title>
        <Description>Merging the work to move Roslyn to the new SDK and Project System.  Full details available here:



Note that tests will **not** pass on this PR.  The groovy file was fairly substantially changed in the features/sdk branch and as a result the tests just won't line up here.  There are PRs within the branch demonstrating a completely green run.  Will do a final test PR within the branch before merging to ensure we are clean through all changes on Friday

Recent green run: 

This change will be merged over the weekend to minimize disruption. 

</Description>
        <CreatedDate>28/04/2017</CreatedDate>
        <ClosedDate>01/05/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Area-Infrastructure</Name>
            <IssueID>15603</IssueID>
            <PullRequestID>19109</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15603</IssueID>
            <PullRequestID>19109</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15603</IssueID>
        <PullRequestID>18034</PullRequestID>
        <Title>Move the symbol-index-update-engine out of Workspace.Desktop</Title>
        <Description>This has a few benefits including:

1. People who only want Workspace.Desktop to use MSBuildWorkspace don't need all the references that we currently have to pull in.
2. Elfie currently references Roslyn's Workspace in order to analyze code.  This causes a circularity where Workspace depends on Elfie which depends on Workspace.  This makes updating either difficult.
</Description>
        <CreatedDate>21/03/2017</CreatedDate>
        <ClosedDate>21/03/2017</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15603</IssueID>
            <PullRequestID>18034</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15601</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Suggestion: provide better SemanticModel/IDE experience inside broken foreach declaration</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>30/03/2018</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>15601</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>[In a code review it was suggested]( that we should bind and give good SemanticModel (and therefore IDE) experience inside an expression in this context:

`foreach (AnyExpression in e) {}`

where `AnyExpression` is some expression form not legally supported in this context.
</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15601</IssueID>
        <PullRequestID>15548</PullRequestID>
        <Title>Combine deconstruction assignment and declaration, and support discards.</Title>
        <Description>- Combine deconstruction assignment and declaration, and support discards.
- Because tuples may contain declarations, adjust lambda disambiguation
  and adjust parsing of argument lists.
- Diagnose tuple element names on the left of a deconstruction.
- Add relational operators to disambiguating tokens in 7.5.4.2
- Remove `BoundVoid`

~~Fixes #15548 
Fixes #15549~~

Update (from jcouv): the bug numbers seem wrong. I think the correct ones were #14794
 and #14832

/cc @jcouv @AlekseyTs @VSadov @dotnet/roslyn-compiler </Description>
        <CreatedDate>27/11/2016</CreatedDate>
        <ClosedDate>12/12/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>4 - In Review</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Feature Request</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Pattern Matching</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15601</IssueID>
            <PullRequestID>15548</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>gafter</FixedById>
            <PullRequestID>15548</PullRequestID>
            <IssueID>15601</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15599</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>15599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Compiler: NullRef on local method that uses instance and scoped local method</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>18/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15599</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 0694d5ccc05b7e1cc37c82a1c15c8f9fc23e3775 

``

The compiler throws a NullRef:

&gt; 
&gt;    at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.FramePointer(SyntaxNode syntax, NamedTypeSymbol frameClass) in D:\#TeamCity\buildAgent\work\596e688e8f7f38c8\!roslyn\dotnet\Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 500
&gt;    at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.FrameOfType(SyntaxNode syntax, NamedTypeSymbol frameType) in D:\#TeamCity\buildAgent\work\596e688e8f7f38c8\!roslyn\dotnet\Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 450
&gt;    at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RemapLambdaOrLocalFunction(SyntaxNode syntax, MethodSymbol originalMethod, ImmutableArray`1 typeArgumentsOpt, ClosureKind closureKind, MethodSymbol&amp; synthesizedMethod, BoundExpression&amp; receiver, NamedTypeSymbol&amp; constructedFrame) in D:\#TeamCity\buildAgent\work\596e688e8f7f38c8\!roslyn\dotnet\Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.cs:line 820
&gt;    at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.RemapLocalFunction(SyntaxNode syntax, MethodSymbol symbol, BoundExpression&amp; receiver, MethodSymbol&amp; method, ImmutableArray`1&amp; parameters, ImmutableArray`1 typeArguments) in D:\#TeamCity\buildAgent\work\596e688e8f7f38c8\!roslyn\dotnet\Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.LocalFunctionReferenceRewriter.cs:line 133
&gt;    at Microsoft.CodeAnalysis.CSharp.LambdaRewriter.LocalFunctionReferenceRewriter.VisitCall(BoundCall node) in D:\#TeamCity\buildAgent\work\596e688e8f7f38c8\!roslyn\dotnet\Src\Compilers\CSharp\Portable\Lowering\LambdaRewriter\LambdaRewriter.LocalFunctionReferenceRewriter.cs:line 37
&gt; 

</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15599</IssueID>
        <PullRequestID>14736</PullRequestID>
        <Title>Implement proper 'this' capturing for local functions</Title>
        <Description>Currently, when a local function is captured inside another localfunction or lambda it can capture 'this' without generating a frame.This is useful, but when that lambda is itself captured then thecapturing closure must also capture the frame pointer, namely 'this'.Currently, local function frame pointers are not correctly captured whenthe captured local function itself captures something from a "higher"scope than the capturing local function.This change solves this problem by:1) Considering a local function's captured variables when deciding itsscope. If the local function captures variables from a higher scope,that local function will be analyzed as belonging to the "higher" scope,causing that local function to register for frame capturing.2) Since the proxies for capturing frames are not available at the timeof local function reference rewriting, the proxies must be saved. Thereis a new temporary bound node for this purpose,PartiallyLoweredLocalFunctionReference, that stores the proxies and theunderlying node for later use during the rewriting phase. This nodeshould never make it past LocalFunctionReferenceRewriting.When these steps are completed, local functions should act verysimilarly to all other captured variables with different frames, wherethe frame pointers are captured and walked in a linked list in order toaccess the target with the proper receiver/frame pointer.</Description>
        <CreatedDate>25/10/2016</CreatedDate>
        <ClosedDate>28/10/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>15599</IssueID>
            <PullRequestID>14736</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>15599</IssueID>
            <PullRequestID>14736</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15599</IssueID>
            <PullRequestID>14736</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15595</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>15595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Differences between SourceGenerators and EC# macros</Title>
    <CreatedDate>30/11/2016</CreatedDate>
    <ClosedDate>24/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Replace/Original</Name>
        <IssueID>15595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Question</Name>
        <IssueID>15595</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>To focus the [conversation]( with @CyrusNajmabadi about [SourceGenerators]( and macros...

&gt; Finally, i guess i'm just not seeing what purpose macros actually serve over the SourceGenerator proposal. As you've mentioned, they cannot introduce new syntax. So all they can do is take existing syntax and manipulate it, to produce new syntax. But that's what SourceGenerators did. That's something Roslyn is optimized for, as it allows very extensible transformation of Syntax.

I feel like there are multiple important differences between them, but let me first clarify:
- Where do SourceGenerators fit in the [compilation pipeline]( Somewhere in the "Binder" area?
- Is it true that the original source code can directly use any newly generated member?
- Macros can be provided with "invalid" code to "fix" (i.e. the code makes sense to the developer and to the macro but could not be understood by the underlying compiler until the macro transforms it. e.g. one might write a macro to change `const int Foo = "Foo".Length;` to `const int Foo = 3`). In contrast, it looks to me like the SourceGenerators system currently requires the source code to be not just syntactically valid, but semantically valid as well. Is that correct?
- The linked document doesn't say anything about using attributes to "invoke" a SourceGenerator, but earlier you said "Or, alternatively, we can use the approach we took with SourceGenerators. Namely that we used an existing piece of syntax (i.e. '[attributes]'), to mark where we wanted generators to run." What did you mean? How does that work?
- Does a SourceGenerator have a full ability to introspect the entire compilation? If so, what prevents you from having to re-run every SourceGenerator on every keystroke?

Thanks!</Description>
  </Issue>
  <Issue>
    <IssueID>15587</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>CSharpScript.RunAsync() fails when providing a Globals object</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>29/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>15587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-ScriptingIDE</Name>
        <IssueID>15587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Duplicate</Name>
        <IssueID>15587</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: `Microsoft.CodeAnalysis.Scripting 1.3.2 and 2.0.0 RC (Issue occurs with .NET Core 1.1.0 but not 1.0.1)

**Steps to Reproduce**:

1. Use `CSharpScript.RunAsync()`, providing Globals 

**Expected Behavior**:
Script is compiled and executed.

**Actual Behavior**:
[InvalidCastException](

**Additional Notes**:
I am unsure if this is my environment or Roslyn, but given this broke after using .NET Core 1.1.0 and with how little information I could find on troubleshooting this issue, I felt it was best to report it.

I can confirm that the runtimes being used by Roslyn and my Project are the same, and that I only have one instance of the Entry Assembly (where the class `ReplGlobals` is) loaded.</Description>
  </Issue>
  <Issue>
    <IssueID>15579</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>15579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>BasicIntellisense VSI test is broken</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>01/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Test</Name>
        <IssueID>15579</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Scenario: XML doc comment intellisense



From the expected and actual results, it looks like #15552 caused this regression.</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15579</IssueID>
        <PullRequestID>15552</PullRequestID>
        <Title>Remove dependency between DocComment insertion and Completion.</Title>
        <Description>Helps out with </Description>
        <CreatedDate>28/11/2016</CreatedDate>
        <ClosedDate>28/11/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15579</IssueID>
            <PullRequestID>15552</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15579</IssueID>
        <PullRequestID>15583</PullRequestID>
        <Title>Order DocCommentHandler after Commit and Completion handlers.</Title>
        <CreatedDate>29/11/2016</CreatedDate>
        <ClosedDate>30/11/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15579</IssueID>
            <PullRequestID>15583</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees />
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15576</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>cston</FixedById>
        <IssueID>15576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>EE: Use DkmClrModuleInstance.GetSymUnmanagedReader rather than GetSymbolInterface</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>31/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>15576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Interactive-Debugging</Name>
        <IssueID>15576</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`GetSymUnmanagedReader` is required to support symbols for .NET Native modules.</Description>
  </Issue>
  <Issue>
    <IssueID>15574</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>msbuild issue</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>22/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>15574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Need More Info</Name>
        <IssueID>15574</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Error MSB4019: The imported project "C:\Users\gautams\Downloads\MSBuild.Community.Tasks.v1.5.0.214\MSBuild.Community.Tasks.Targets" was not found.</Description>
  </Issue>
  <Issue>
    <IssueID>15571</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Cannot load debug symbols for Roslyn DLLs</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>29/11/2016</ClosedDate>
    <IssueLabels />
    <Description>**Version Used**: 

Visual Studio 2015 Update 3

**Steps to Reproduce**:

1.  Clone this repo.
2.  Run `Restore.cmd` and `msbuild /v:m /m Roslyn.sln`
3.  Run `devenv /rootsuffix RoslynDev`
4. Start another Visual Studio, Attach to previous `devenv.exe`
5. Open `Modules` window, try load symbols for `Microsoft.CodeAnalysis.*.dll` by selecting from `Binaries\Debug\Dlls\*\Microsoft.CodeAnalysis.*.pdb`

**Actual Behavior**:

Visual Studio says "A matching symbol file was not found in this folder".

And the timestamps in the `Modules` window seem randomly.

![default](
</Description>
  </Issue>
  <Issue>
    <IssueID>15570</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>jcouv</FixedById>
        <IssueID>15570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inconsistent formatting in extension methods for tuples</Title>
    <CreatedDate>29/11/2016</CreatedDate>
    <ClosedDate>18/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15570</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Latest `master` branch

Visual Studio 2015 Update 3

**Steps to Reproduce**:

Suddenly there is an idea in my head: *Can I `await` on a tuple of multiple tasks, then get their results with deconstruction?* So I wrote this extension method:

``

However, when I invoke the *Format Document* command, I noticed one thing: **The space after `this` keyword is missing**</Description>
    <PullRequests>
      <PullRequest>
        <RepoID>roslynWebScrap</RepoID>
        <IssueID>15570</IssueID>
        <PullRequestID>15967</PullRequestID>
        <Title>Spacing between this and open-paren in tuple extension method</Title>
        <Description>**Customer scenario**
Type an extension method on a tuple type (`static void Extension(this (int, string) self)`) and format document. The space before the tuple's open-paren is removed.

**Bugs this fixes:** 


**Workarounds, if any**
This is annoying but not breaking.

**Risk**
**Performance impact**
Low. Added a specific case to the space formatting rule.

**Is this a regression from a previous update?**
No.

**How was the bug found?**
Reported by customer.

@CyrusNajmabadi and @dotnet/roslyn-ide for review.</Description>
        <CreatedDate>17/12/2016</CreatedDate>
        <ClosedDate>18/12/2016</ClosedDate>
        <PullRequestLabels>
          <PullRequestLabel>
            <Name>Approved to merge</Name>
            <IssueID>15570</IssueID>
            <PullRequestID>15967</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>Area-Compilers</Name>
            <IssueID>15570</IssueID>
            <PullRequestID>15967</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>New Language Feature - Tuples</Name>
            <IssueID>15570</IssueID>
            <PullRequestID>15967</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
          <PullRequestLabel>
            <Name>cla-already-signed</Name>
            <IssueID>15570</IssueID>
            <PullRequestID>15967</PullRequestID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestLabel>
        </PullRequestLabels>
        <PullRequestAssignees>
          <PullRequestAssignee>
            <FixedById>jcouv</FixedById>
            <PullRequestID>15967</PullRequestID>
            <IssueID>15570</IssueID>
            <RepoID>roslynWebScrap</RepoID>
          </PullRequestAssignee>
        </PullRequestAssignees>
      </PullRequest>
    </PullRequests>
  </Issue>
  <Issue>
    <IssueID>15558</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>15558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Variable declared in the scope of an outer function that is written to from inside scope of a local function does not get updated in specific cases..</Title>
    <CreatedDate>28/11/2016</CreatedDate>
    <ClosedDate>13/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>15558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15558</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
VS2017 RC 15.0.25920.0, .Net 4.6.01509, csc 2.0.0.61104

**Steps to Reproduce**:
Some background: I wrote a messaging class with a static method to parse a binary message from bytes. It is written in the spirit of how I write ascent parsers in C, where I pass a reference to the index in the source to each function, and the inner functions are responsible for incrementing the index. The difference is that the index should now be in a scope accessible to the local functions.

I tried to simplify the reproduction of the bug, but I was having difficulty. I could've just made a silly mistake too, but I can't find it. In any other case I can come up with it seems to work as expected. I put together this program that reproduces it (the bug is at Message.FromBytes(), with the variable 'i'):
``
... and replacing 'i' with '*i' in the code above, which works as expected.

Let me know if you guys need any more info, it's a bit befuddling! 😅 Keep up the good work, I'm really liking VS 2017 and C#7!</Description>
  </Issue>
  <Issue>
    <IssueID>15555</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Throw in expression bodied lambdas is a syntax error</Title>
    <CreatedDate>28/11/2016</CreatedDate>
    <ClosedDate>09/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>4 - In Review</Name>
        <IssueID>15555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Throw Expression</Name>
        <IssueID>15555</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
2017 RC
**Steps to Reproduce**:
@gafter in #13389, it says that a throw expression is permitted as the body of an expression-bodied lambda or method. I receive the error
&gt; error CS8115: A throw expression is not allowed in this context.
With the following code
``
I'm not sure if this was an intentional change but I don't see it documented. Thanks!
**Expected Behavior**:
Throw expressions may be used in an expression bodied lambda expression.
**Actual Behavior**:
Throw expressions are not legal as the bodies of expression bodied lambda expressions.</Description>
  </Issue>
  <Issue>
    <IssueID>15554</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Fluent API formatting suggestion </Title>
    <CreatedDate>28/11/2016</CreatedDate>
    <ClosedDate>15/03/2020</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature Request</Name>
        <IssueID>15554</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Currently, Visual Studio doesn't know how to format the following code:
``
I use R# quite heavily for formatting and it does know how to do it but I think that it would be nice if VS could handle it out of the box too.

</Description>
  </Issue>
  <Issue>
    <IssueID>15553</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bogus Invalid expression term 'int' error on 2.0.0-rc</Title>
    <CreatedDate>28/11/2016</CreatedDate>
    <ClosedDate>28/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15553</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
using System;
using System.Threading.Tasks;

class My
{
    static bool TestContinueWhenAnyException(Task[] antecedents)
    {
        bool antecedentsAreFutures = antecedents is Task&lt;int&gt;[];
        return antecedentsAreFutures;
    }

    static void Main()
    {
    }
}


Expected Behavior: Compiles successfully

Actual Behavior:


test.cs(8,58): error CS1525: Invalid expression term 'int'
test.cs(8,62): error CS1525: Invalid expression term '['
test.cs(8,63): error CS0443: Syntax error; value expected 
`</Code>
    <Description>Version used: 

Steps to Reproduce:

csc test.cs

``

This bug was found trying to compile  using 2.0.0-rc.</Description>
  </Issue>
  <Issue>
    <IssueID>15547</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>IEnumerable&lt;T&gt; runs constructor any access(even inspection)</Title>
    <CreatedDate>27/11/2016</CreatedDate>
    <ClosedDate>27/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-External</Name>
        <IssueID>15547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>15547</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
mono 4.8.0 
.NET framework 4.6.1
**Steps to Reproduce**:

1. Create a class, preferably with a static integer you can increment to count individual constructor calls
2. Create IEnumerable of the class by selecting an arbitrary array of items
3. Use breakpoints to Inspect with debugger / Try to print or count the elements to cause the constructor to run again

**Expected Behavior**:
Constructor runs once for each element and objects are stored inside IEnumerable 
**Actual Behavior**:
Constructor runs every time elements are accessed in any way

You can avoid the bug by casting the IEnumerable to a List&lt;&gt; or array to cause all constructors to be ran once and the objects be saved properly

Code to reproduce:

``


Putting a breakpoint on line `Console.WriteLine(allClasses.Count());` and inspecting allClasses causes the values inside to change every time you inspect them

![First inspection](
![Second inspection](

</Description>
  </Issue>
  <Issue>
    <IssueID>15545</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>OmarTawfik</FixedById>
        <IssueID>15545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect errors reported, and broken intellisense for heavily overloaded method</Title>
    <CreatedDate>27/11/2016</CreatedDate>
    <ClosedDate>12/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15545</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 
Visual C# 2017 RC
**Steps to Reproduce**:

_I am sorry if this is a duplicate but I didn't find anything that seemed to match it._

I have an API that exposes a method with 38 distinct overloads each varying by taking a generic delegate with a different number of type parameters (all of the `System.Func` and `System.Action` delegates taking more than a single argument and a few extra ones which are specified in precisely the same manner but go up to `T20`).
Ever since Visual Studio 15 Preview 5 and now up through 2017 RC, I get spurious errors at calls to these methods. The code builds, runs, and passes its unit tests, but the language service reports syntax errors that are erroneous. Furthermore, the IDE's quick info, tooltips, and Go To Definition command indicate an overload taking a delegate of lesser arity. This code was written in C# 5.0 and C# 6.0. 
**Example**:
![image](


Note that in the above the tooling indicates that I am calling the overload taking a 
`` 
However where it gets weird is that if I simply edit the file the errors go away, but only temporarily, coming back at random as I navigate across the project.
**Example**:
![image](

Note that all I did was add a single blank space after the opening brace of the lambda expression. And this not only caused the errors to vanish but causes the right overload to be displayed.

For reference, all of the overloads are in the following class  

The errors re-appear whenever I close and re-open the file.
**Expected Behavior**:
No errors are reported.
**Actual Behavior**:
Spurious syntactic and semantic errors are displayed (builds and runs correctly)</Description>
  </Issue>
  <Issue>
    <IssueID>15539</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>MadsTorgersen</FixedById>
        <IssueID>15539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Proposal: Disallow e is null and other constant patterns</Title>
    <CreatedDate>26/11/2016</CreatedDate>
    <ClosedDate>01/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>15539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>15539</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>`e is null` is a good way for reference null check instead of `(object)e == null` but it does not work with non-constant expressions e.g. `e1 is e2`. I think multiple ways of doing the same thing would be (1) confusing for beginners and (2) it would cause yet another inconsistency all over the code base i.e. there should be a code style option to prefer one over the other.  I'd rather have a dedicated operator for such operations (#8409)  to cover all cases and maintain a consistent behavior instead of an operator that does not cover all cases and essentially is useful in comparing by value scenarios i.e. patterns.

If it's here to stay I'd like to hear the rational behind it.</Description>
  </Issue>
  <Issue>
    <IssueID>15538</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
      <IssueAssignee>
        <FixedById>MadsTorgersen</FixedById>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Proposal:  Ternary Operator Scoping</Title>
    <CreatedDate>26/11/2016</CreatedDate>
    <ClosedDate>01/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Out Variable Declaration</Name>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Pattern Matching</Name>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-By Design</Name>
        <IssueID>15538</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>I propose that if an identifier is introduced within the body of an expression used with the ternary conditional operator (`?:`) that the scope of said identifier should be narrow.  Specifically said identifiers would only be accessible within the `first_expression` and `second_expression` expressions.

I give the following non-exhaustive list of reasons as to why I think that this is reasonable:

1.  Said identifiers could be considered a "working space" of the current expression and would have no purpose after the final result is calculated.
1.  In the case of pattern variables the identifier would almost certainly not be definitely assigned and therefore effectively unusable in the wider scope.
1.  The conditional operator can be viewed as a simpler and terser form of `match` which would likely carry over the same narrow scoping as `switch`.

I'll update this proposal with additional reasons as enumerated in the comments.  I just wanted to get the ball rolling.</Description>
  </Issue>
  <Issue>
    <IssueID>15537</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Now it's time to discuss which new language features would be in C# 8.0</Title>
    <CreatedDate>26/11/2016</CreatedDate>
    <ClosedDate>26/11/2016</ClosedDate>
    <IssueLabels />
    <Description>As C# 7.0 will be released soon, there's no time to add more features. But there are still many good ideas that has not come true in C# 7.0, so I wonder which of them would be in the roadmap of C# 8.0, such as escape analysis and reference count as alternative GC.</Description>
  </Issue>
  <Issue>
    <IssueID>15536</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>15536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Bad codegen in call-forward to local function in different switch block</Title>
    <CreatedDate>26/11/2016</CreatedDate>
    <ClosedDate>19/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15536</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
class Program
{
    static void Main(string[] args)
    {
        object o = null;
        switch (o)
        {
            case string x:
                Assign();
                Foo();
                break;
            case int x:
                void Assign() { x = 5; }
                void Foo() =&gt; System.Console.WriteLine(x);
                break;
        }
    }
}
`</Code>
    <Description>From #15322:

``

The problem seems to be getting the information for the local in CodeGen. It's not clear if this is an issue </Description>
  </Issue>
  <Issue>
    <IssueID>15533</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>15533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Renaming a local function breaks code by renaming usages of unrelated elements</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>18/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15533</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    class Program
    {
        static void Main(string[] args)
        {
            if ("".Length &gt; 0)
            {
                Action a = Local;
                void Local()
                {
                    Console.WriteLine("Hello from Local");
                } // Local
            }
            else
            {
                Action a = Local;
                void Local() // &lt;-- invoke the refactoring here
                {
                }
            }
        }
    }
`</Code>
    <Description>The refactoring tries to rename all symbols with the same name even if they are referencing another function

``

Obviously changes should be limited to the 'else' block, otherwise my code will be completely broken by the refactoring.

![roslynrename](
</Description>
  </Issue>
  <Issue>
    <IssueID>15532</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>15532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>InvalidOperationException in extract method when selecting local function call</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>11/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15532</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
class Program
{
    static void Main(string[] args)
    {
        bool LocalFunc() =&gt; args == null;

        [|LocalFunc();|]
    }
}


**Expected Behavior**: No error.

**Actual Behavior**:

Yellow error strip shows with the message:

&gt; 'ExtractMethodCodeRefactoringProvider' encountered an error and has been disabled.

Stack trace:


System.InvalidOperationException : Unexpected false
   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)
   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)
   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(&lt;Unknown Parameters&gt;)
   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(&lt;Unknown Parameters&gt;)
`</Code>
    <Description>**Version Used**: VS2017RC (15.0.25914.0 D15REL)

**Steps to Reproduce**:

Create a .Net Framework console application with the following code and select the marked line:

``</Description>
  </Issue>
  <Issue>
    <IssueID>15530</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>15530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Inline Temporary Variable omits parentheses when calling extension methods</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>28/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15530</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 2017 RC

``

The Inline Temporary Variable refactoring produces `await Task.FromResult("").Any();`, which does not compile.

It looks like you need to move the parenthesis check before unreducing extension methods.</Description>
  </Issue>
  <Issue>
    <IssueID>15529</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>MadsTorgersen</FixedById>
        <IssueID>15529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>while variable closure</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>24/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Language Design</Name>
        <IssueID>15529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Language-C#</Name>
        <IssueID>15529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15529</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>In C# 5, `foreach` was explicitly changed - a breaking change no less - to ensure that loop variables were not closed over. At the time Eric Lippert wrote:

&gt;this is the single most common incorrect bug report we get... That’s a terrible situation for everyone; we very much wish to design a language which does not have “gotcha” features like this. [[1]](

With C# 7's current rules for `while` loop scoping, we again have the same problem where condition and loop variables will be closed over by default,

Wouldn't it make sense to consider this ahead of time and ensure that out and pattern match vars do not fall into this trap?

`while(GetNext(out T value)){...}` should follow in the footsteps of `foreach` and produce something like:
``

In general I do not agree with the new scoping rules for `if` and `while`, but I see the later being not just confusing or an inconvenience, but a flaw that will be a "gotcha" for many.

@ericlippert 's final quote in the link above is also quite poignant:
&gt; Design is, of course, the art of compromise in the face of many competing principles. “Eliminate gotchas” in this case directly opposes other principles like “no breaking changes”, and “be consistent with other language features”.

The C# 7 language team has a real opportunity to meet all of these principles before they become an issue.

Please reconsider the scoping rules for out and pattern match variables.




</Description>
  </Issue>
  <Issue>
    <IssueID>15526</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Variable declaration can be inlined" sometimes does not respect "var" settings</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>25/11/2016</ClosedDate>
    <IssueLabels />
    <Description>The variable declaration can be inlined sometimes does not always respect my "var" settings

![image](


I can't get a standalone repro because when I try to isolate it does respect it, but to see examples, run this fixer across the project system repro.

Example (

![image](
</Description>
  </Issue>
  <Issue>
    <IssueID>15525</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>"Object initialization can be simplified" throws away whitespace and comments</Title>
    <CreatedDate>25/11/2016</CreatedDate>
    <ClosedDate>28/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15525</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Before:
``</Description>
  </Issue>
  <Issue>
    <IssueID>15524</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>15524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Incorrect completion, navigate to not working in AppDomainUtils.cs</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>15/03/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15524</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>Open AppDomainUtils.cs in Roslyn.sln. 

Go To Definition doesn't work on AppDomain.CreateDomain.

The list of available overloads is also off:
![image](



Repros on D15Rel 25920 with latest Roslyn VSIX from master installed.
</Description>
  </Issue>
  <Issue>
    <IssueID>15523</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>gafter</FixedById>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Invalid keyword recommender tests after #15049</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>25/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Not Reproducible</Name>
        <IssueID>15523</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
var q = (int a, int b) = e;
`</Code>
    <Description>We are preparing in #15049 for the ability to declare variables in a deconstruction in an expression. As a consequence, in the future you would be able to write

``

Note that this is not a lambda expression, but a deconstruction assignment in the initializer of q. So inside the parens, neither `ref` nor `out` would be permitted.

Since the parser is changing to support this, two existing keyword recommender tests are invalidated by this: `RefKeywordRecommenderTests.TestInLambdaDeclaration3` and `OutKeywordRecommenderTests.TestInLambdaDeclaration3`. I am marking them skipped with this issue until we can decide what to do about them.</Description>
  </Issue>
  <Issue>
    <IssueID>15522</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>agocke</FixedById>
        <IssueID>15522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>'Call hierarchy' window is unable to expand local functions ('searching...' takes forever)</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>18/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Local Functions</Name>
        <IssueID>15522</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
    class Program
    {
        static void Main(string[] args)
        {
            Local();
            void Local() =&gt; Bar();
        }
        static void Bar() { }
    }
`</Code>
    <Description>Expanding local functions' call nodes never ends in VS 2017 RC.

``

![callhierarchy](
</Description>
  </Issue>
  <Issue>
    <IssueID>15518</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees />
    <Title>Microsoft.CodeAnalysis.CSharp.Scripting 2.0.0-rc breaks without System.Runtime.InteropServices.RuntimeInformation</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>03/01/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Interactive</Name>
        <IssueID>15518</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>csharp
    class Program
    {
        static void Main(string[] args)
        {
            var script = @"int Add(int x, int y) {
 return x+y;
 }
 Add(1, 4)";
            var result = CSharpScript.EvaluateAsync&lt;int&gt;(script).Result;

            //result is now 5
            Console.WriteLine(result);
            Console.ReadLine();
        }
    }


3. Run the program

**Expected Behavior**:
Program prints `5`.

**Actual Behavior**:

An unhandled exception of type 'System.IO.FileNotFoundException' occurred in Microsoft.CodeAnalysis.dll

Additional information: Could not load file or assembly 'System.Runtime.InteropServices.RuntimeInformation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.
`</Code>
    <Description>**Version Used**: 

`Microsoft.CodeAnalysis.CSharp.Scripting`:`2.0.0-rc`

**Steps to Reproduce**:

1. Install `Microsoft.CodeAnalysis.CSharp.Scripting` from Nuget into a desktop 461 console app.
2. Add some basic scripting code:

``

Note: installing `System.Runtime.InteropServices.RuntimeInformation` manually from nuget fixes the problem. Looks like a package dependency was missed.</Description>
  </Issue>
  <Issue>
    <IssueID>15517</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>rchande</FixedById>
        <IssueID>15517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>Opening Roslyn.sln asks to update to Visual Studio 2015 - Update 1 when it already has Update 3 installed</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>21/02/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Infrastructure</Name>
        <IssueID>15517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Contributor Pain</Name>
        <IssueID>15517</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>**Version Used**: 

Microsoft Visual Studio Enterprise 2015
Version 14.0.25431.01 Update 3
Microsoft .NET Framework
Version 4.6.01055
Installed Version: Enterprise

I have just cloned the repo and when I tried to open it in VS 2015 with update 3 installed. none of the project are loading. I am getting following error:
**Install Update 1 for Visual Studio.**

What am I missing here ?</Description>
  </Issue>
  <Issue>
    <IssueID>15513</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>AlekseyTs</FixedById>
        <IssueID>15513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IOperation reports 'Instance' for static method access in delegate creation xpression.</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>17/10/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Analyzers</Name>
        <IssueID>15513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Feature - IOperation</Name>
        <IssueID>15513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>_Product-level triaged</Name>
        <IssueID>15513</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>c#
using System;

class A
{
    static int Function(int x) =&gt; x + x;
    static void Error()
    {
        var func = new Func&lt;int,int&gt;(Function); // &lt;- IDE0009	Member access should be qualified. Lightbulb says to change this to "this.Function", but its compile error.
        func(1);
    }
}


For the reference to "Function" (inside new Func&lt;int, int&gt;(Function)), we get an IMemberReferenceExpression that has a non-null .Instance`</Code>
    <Description>From 

Given the code:

`` value.  The kind of this is "InstanceReferenceExpression".  This doesn't make sense as "Function" is a reference to a static method.</Description>
  </Issue>
  <Issue>
    <IssueID>15510</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>mattwar</FixedById>
        <IssueID>15510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>System.Runtime.InteropServices.RuntimeInformation package should be included as a dependency for MSBuildWorkspace</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>14/12/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15510</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Description>NuGet package 2.0.0-rc for the workspace doesn't seem to work if you don't additionally install </Description>
  </Issue>
  <Issue>
    <IssueID>15508</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>sharwell</FixedById>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>IDE extract method fails to handle some deconstruction scenarios.</Title>
    <CreatedDate>24/11/2016</CreatedDate>
    <ClosedDate>07/04/2017</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-Compilers</Name>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>New Language Feature - Tuples</Name>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Resolution-Fixed</Name>
        <IssueID>15508</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>cs
            private bool TryGetTupleTypesAndNames(
                SeparatedSyntaxList&lt;ArgumentSyntax&gt; arguments,
                out ImmutableArray&lt;ITypeSymbol&gt; elementTypes,
                out ImmutableArray&lt;string&gt; elementNames)
            {
                elementTypes = default(ImmutableArray&lt;ITypeSymbol&gt;);
                elementNames = default(ImmutableArray&lt;string&gt;);

                var elementTypesBuilder = ArrayBuilder&lt;ITypeSymbol&gt;.GetInstance();
                var elementNamesBuilder = ArrayBuilder&lt;string&gt;.GetInstance();
                try
                {
                    foreach (var arg in arguments)
                    {
                        var expr = arg.Expression;
                        if (expr.IsKind(SyntaxKind.DeclarationExpression))
                        {
                            AddTypeAndName((DeclarationExpressionSyntax)expr, elementTypesBuilder, elementNamesBuilder);
                        }
                        else if (expr.IsKind(SyntaxKind.TupleExpression))
                        {
                            AddTypeAndName((TupleExpressionSyntax)expr, elementTypesBuilder, elementNamesBuilder);
                        }
                    }

                    if (elementTypesBuilder.Contains(null))
                    {
                        return false;
                    }

                    elementTypes = elementTypesBuilder.ToImmutable();
                    elementNames = elementNamesBuilder.ToImmutable();
                    return true;
                }
                finally
                {
                    elementTypesBuilder.Free();
                    elementNamesBuilder.Free();
                }
            }
`</Code>
    <Description>The IDE code is not resilient against arbitrary expressions appearing on the left-hand-side of a deconstruction. It tries to produce a zero-element tuple type, which causes an exception to be thrown.

This will be a problem after generalized deconstruction support is added to the compiler, even in error scenarios. I'll skip the two affected tests, `GenerateMethodTests.TestDeconstruction3` and `4`. The offending code is here, in `src\Workspaces\CSharp\Portable\LanguageServices\CSharpTypeInferenceService.TypeInferrer.cs`:

``

there appears to be an `else` missing when we test `expr.IsKind`. This causes the caller to attempt to produce a tuple type with an insufficient number of elements.</Description>
  </Issue>
  <Issue>
    <IssueID>15505</IssueID>
    <RepoID>roslynWebScrap</RepoID>
    <IssueAssignees>
      <IssueAssignee>
        <FixedById>CyrusNajmabadi</FixedById>
        <IssueID>15505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueAssignee>
    </IssueAssignees>
    <Title>"Use null propogation" code fix introduces a compiler error</Title>
    <CreatedDate>23/11/2016</CreatedDate>
    <ClosedDate>24/11/2016</ClosedDate>
    <IssueLabels>
      <IssueLabel>
        <Name>Area-IDE</Name>
        <IssueID>15505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
      <IssueLabel>
        <Name>Bug</Name>
        <IssueID>15505</IssueID>
        <RepoID>roslynWebScrap</RepoID>
      </IssueLabel>
    </IssueLabels>
    <Code>
Severity	Code	Description	Project	File	Line	Suppression State
Message	IDE0030	Null check can be simplified	CSharpCodeAnalysis	C:\roslyn-internal\Open\src\Compilers\CSharp\Portable\CSharpCompilationOptions.cs	618	Active

4. Press Ctrl + dot to invoke code fix

**Expected Behavior**: 
Code fix is applied without introducing any errors.

**Actual Behavior**:
Code fix introduces the following error:

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0023	Operator '?' cannot be applied to operand of type 'ImmutableArray&lt;string&gt;'	CSharpCodeAnalysis	C:\roslyn-internal\Open\src\Compilers\CSharp\Portable\CSharpCompilationOptions.cs	618	Active
`</Code>
    <Description>**Version Used**: 
VS2017 RC

**Steps to Reproduce**:

1. Enable Full solution analysis for C#
2. Open Roslyn.sln and source file `src\Compilers\CSharp\Portable\CSharpCompilationOptions.cs`
3. Observe below suggestion in the error list:
``
![image](
</Description>
  </Issue>
</Issues>